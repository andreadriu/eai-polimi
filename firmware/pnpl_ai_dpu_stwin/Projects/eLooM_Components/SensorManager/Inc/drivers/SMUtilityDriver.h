/**
 ******************************************************************************
 * @file    SMUtilityDriver.h
 * @author  SRA - MCD
 * @version 1.1.0
 * @date    10-Dec-2021
 *
 * @brief   Sensor Manager Utility driver
 *
 * Declare the API of the driver.
 *
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *                             
 *
 ******************************************************************************
 */
#ifndef INCLUDE_DRIVERS_UTILITYDRIVER_H_
#define INCLUDE_DRIVERS_UTILITYDRIVER_H_

#ifdef __cplusplus
extern "C" {
#endif


#include "drivers/IDriver.h"
#include "drivers/IDriver_vtbl.h"
#include "mx.h"


/**
 * Create  type name for _SMUtilityDriver.
 */
typedef struct _SMUtilityDriver_t SMUtilityDriver_t;

/**
 * Initialization parameters for the driver.
 */
typedef struct _SMUtilityDriverParams_t
{
  /**
   * Specifies the peripheral HAL initialization parameters generated by CubeMX.
   */
  MX_TIMParams_t *p_mx_tim_cfg;

  /**
   * Generic parameter.
   */
  uint32_t param;
}SMUtilityDriverParams_t;

/**
 *  SMUtilityDriver_t internal structure.
 */
struct _SMUtilityDriver_t
{
  /**
   * Base class object.
   */
  IDriver super;

  /* Driver variables should be added here. */

  /**
   * Specifies all the configuration parameters for the TIM peripheral linked to
   * an instance of this class. It based on the HAL driver generated by CubeMX.
   */
  SMUtilityDriverParams_t mx_handle;
};


/* Public API declaration */
/**************************/

/**
 * Allocate an instance of SMUtilityDriver_t. The driver is allocated
 * in the FreeRTOS heap.
 *
 * @return a pointer to the generic interface ::IDriver if success,
 * or SYS_OUT_OF_MEMORY_ERROR_CODE otherwise.
 */
IDriver *SMUtilityDriverAlloc(void);

/**
 * Get the time stamp. It is implemented as the counter of a 16-bit timer.
 *
 * @param _this [IN] specifies a pointer to an ::SMUtilityDriver_t object
 * @return the time stamp.
 */
inline uint32_t SMUtilityDrvGetTimeStamp(SMUtilityDriver_t *_this);


/* Inline functions definition */
/*******************************/

SYS_DEFINE_INLINE
uint32_t SMUtilityDrvGetTimeStamp(SMUtilityDriver_t *_this)
{
  assert_param(_this != NULL);

  return _this->mx_handle.p_mx_tim_cfg->p_tim->Instance->CNT;
}

#ifdef __cplusplus
}
#endif

#endif /* INCLUDE_DRIVERS_UTILITYDRIVER_H_ */
