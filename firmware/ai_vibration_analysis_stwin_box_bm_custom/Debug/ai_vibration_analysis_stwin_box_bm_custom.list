
ai_vibration_analysis_stwin_box_bm_custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e72c  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00055374  0801e980  0801e980  0002e980  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08073cf4  08073cf4  00083cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08073cfc  08073cfc  00083cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08073d00  08073d00  00083d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000ad0  20000000  08073d04  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003587  20000ae0  080747d4  00090ae0  2**5
                  ALLOC
  8 ._user_heap_stack 00000601  20004067  080747d4  00094067  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00090ad0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006b35f  00000000  00000000  00090b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ae5d  00000000  00000000  000fbe65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004198  00000000  00000000  00106cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003d18  00000000  00000000  0010ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004508c  00000000  00000000  0010eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005027a  00000000  00000000  00153c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019927e  00000000  00000000  001a3e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000140  00000000  00000000  0033d0fc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00012e10  00000000  00000000  0033d23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000086d8  00000000  00000000  0035004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000ae0 	.word	0x20000ae0
 8000254:	00000000 	.word	0x00000000
 8000258:	0801e94c 	.word	0x0801e94c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000ae4 	.word	0x20000ae4
 8000274:	0801e94c 	.word	0x0801e94c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b8 	b.w	8001018 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d32:	4604      	mov	r4, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d148      	bne.n	8000dcc <__udivmoddi4+0xa0>
 8000d3a:	428a      	cmp	r2, r1
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	d961      	bls.n	8000e04 <__udivmoddi4+0xd8>
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	b143      	cbz	r3, 8000d58 <__udivmoddi4+0x2c>
 8000d46:	f1c3 0120 	rsb	r1, r3, #32
 8000d4a:	409f      	lsls	r7, r3
 8000d4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d50:	409c      	lsls	r4, r3
 8000d52:	fa20 f101 	lsr.w	r1, r0, r1
 8000d56:	430f      	orrs	r7, r1
 8000d58:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	0c22      	lsrs	r2, r4, #16
 8000d62:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d66:	fb01 7716 	mls	r7, r1, r6, r7
 8000d6a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d6e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d72:	4290      	cmp	r0, r2
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x5c>
 8000d76:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x5a>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f200 8137 	bhi.w	8000ff4 <__udivmoddi4+0x2c8>
 8000d86:	463e      	mov	r6, r7
 8000d88:	1a12      	subs	r2, r2, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d90:	fb01 2210 	mls	r2, r1, r0, r2
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x86>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	d202      	bcs.n	8000db0 <__udivmoddi4+0x84>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f200 811c 	bhi.w	8000fe8 <__udivmoddi4+0x2bc>
 8000db0:	4610      	mov	r0, r2
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	2600      	movs	r6, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0x9a>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	f000 80fd 	beq.w	8000fd0 <__udivmoddi4+0x2a4>
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4631      	mov	r1, r6
 8000de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de4:	fab3 f683 	clz	r6, r3
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d14b      	bne.n	8000e84 <__udivmoddi4+0x158>
 8000dec:	428b      	cmp	r3, r1
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f240 80ef 	bls.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4630      	mov	r0, r6
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e3      	beq.n	8000dc6 <__udivmoddi4+0x9a>
 8000dfe:	e9c5 4700 	strd	r4, r7, [r5]
 8000e02:	e7e0      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xdc>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f382 	clz	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 809d 	bne.w	8000f4c <__udivmoddi4+0x220>
 8000e12:	1a89      	subs	r1, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b297      	uxth	r7, r2
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	0c20      	lsrs	r0, r4, #16
 8000e1e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e22:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2a:	fb07 f002 	mul.w	r0, r7, r2
 8000e2e:	4288      	cmp	r0, r1
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f102 38ff 	add.w	r8, r2, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4288      	cmp	r0, r1
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80cf 	beq.w	8000fee <__udivmoddi4+0x2c2>
 8000e50:	4642      	mov	r2, r8
 8000e52:	1a09      	subs	r1, r1, r0
 8000e54:	b2a4      	uxth	r4, r4
 8000e56:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5e:	fb00 f707 	mul.w	r7, r0, r7
 8000e62:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e66:	42a7      	cmp	r7, r4
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x150>
 8000e6a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x14e>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f200 80b4 	bhi.w	8000fe2 <__udivmoddi4+0x2b6>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	1be4      	subs	r4, r4, r7
 8000e7e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e82:	e79b      	b.n	8000dbc <__udivmoddi4+0x90>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	40f9      	lsrs	r1, r7
 8000e94:	40b2      	lsls	r2, r6
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fa00 f306 	lsl.w	r3, r0, r6
 8000eac:	0c20      	lsrs	r0, r4, #16
 8000eae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eb2:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eba:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebe:	4288      	cmp	r0, r1
 8000ec0:	d90f      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 808d 	beq.w	8000ffa <__udivmoddi4+0x2ce>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	1a09      	subs	r1, r1, r0
 8000ee4:	b2a4      	uxth	r4, r4
 8000ee6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eea:	fb09 1110 	mls	r1, r9, r0, r1
 8000eee:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1de>
 8000efa:	eb1c 0101 	adds.w	r1, ip, r1
 8000efe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f02:	d201      	bcs.n	8000f08 <__udivmoddi4+0x1dc>
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d87f      	bhi.n	8001008 <__udivmoddi4+0x2dc>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	fba0 9802 	umull	r9, r8, r0, r2
 8000f16:	4541      	cmp	r1, r8
 8000f18:	464c      	mov	r4, r9
 8000f1a:	46c6      	mov	lr, r8
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x1f8>
 8000f1e:	d106      	bne.n	8000f2e <__udivmoddi4+0x202>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d204      	bcs.n	8000f2e <__udivmoddi4+0x202>
 8000f24:	3801      	subs	r0, #1
 8000f26:	ebb9 0402 	subs.w	r4, r9, r2
 8000f2a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d070      	beq.n	8001014 <__udivmoddi4+0x2e8>
 8000f32:	1b1a      	subs	r2, r3, r4
 8000f34:	eb61 010e 	sbc.w	r1, r1, lr
 8000f38:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3c:	fa01 f707 	lsl.w	r7, r1, r7
 8000f40:	40f1      	lsrs	r1, r6
 8000f42:	2600      	movs	r6, #0
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	e73c      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0020 	rsb	r0, r3, #32
 8000f54:	fa01 f203 	lsl.w	r2, r1, r3
 8000f58:	fa21 f600 	lsr.w	r6, r1, r0
 8000f5c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f60:	fa24 f100 	lsr.w	r1, r4, r0
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	409c      	lsls	r4, r3
 8000f6a:	4311      	orrs	r1, r2
 8000f6c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f70:	0c0a      	lsrs	r2, r1, #16
 8000f72:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f76:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f7a:	fb00 f607 	mul.w	r6, r0, r7
 8000f7e:	4296      	cmp	r6, r2
 8000f80:	d90e      	bls.n	8000fa0 <__udivmoddi4+0x274>
 8000f82:	eb1c 0202 	adds.w	r2, ip, r2
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	bf2c      	ite	cs
 8000f8c:	f04f 0901 	movcs.w	r9, #1
 8000f90:	f04f 0900 	movcc.w	r9, #0
 8000f94:	4296      	cmp	r6, r2
 8000f96:	d902      	bls.n	8000f9e <__udivmoddi4+0x272>
 8000f98:	f1b9 0f00 	cmp.w	r9, #0
 8000f9c:	d031      	beq.n	8001002 <__udivmoddi4+0x2d6>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	1b92      	subs	r2, r2, r6
 8000fa2:	b289      	uxth	r1, r1
 8000fa4:	fbb2 f6fe 	udiv	r6, r2, lr
 8000fa8:	fb0e 2216 	mls	r2, lr, r6, r2
 8000fac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fb0:	fb06 f207 	mul.w	r2, r6, r7
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x29c>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc0:	d201      	bcs.n	8000fc6 <__udivmoddi4+0x29a>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d823      	bhi.n	800100e <__udivmoddi4+0x2e2>
 8000fc6:	4646      	mov	r6, r8
 8000fc8:	1a89      	subs	r1, r1, r2
 8000fca:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fce:	e725      	b.n	8000e1c <__udivmoddi4+0xf0>
 8000fd0:	462e      	mov	r6, r5
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	e6f7      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000fd6:	1a84      	subs	r4, r0, r2
 8000fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	461f      	mov	r7, r3
 8000fe0:	e70b      	b.n	8000dfa <__udivmoddi4+0xce>
 8000fe2:	4464      	add	r4, ip
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	e749      	b.n	8000e7c <__udivmoddi4+0x150>
 8000fe8:	4464      	add	r4, ip
 8000fea:	3802      	subs	r0, #2
 8000fec:	e6e1      	b.n	8000db2 <__udivmoddi4+0x86>
 8000fee:	3a02      	subs	r2, #2
 8000ff0:	4461      	add	r1, ip
 8000ff2:	e72e      	b.n	8000e52 <__udivmoddi4+0x126>
 8000ff4:	3e02      	subs	r6, #2
 8000ff6:	4462      	add	r2, ip
 8000ff8:	e6c6      	b.n	8000d88 <__udivmoddi4+0x5c>
 8000ffa:	f1a8 0802 	sub.w	r8, r8, #2
 8000ffe:	4461      	add	r1, ip
 8001000:	e76f      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001002:	3802      	subs	r0, #2
 8001004:	4462      	add	r2, ip
 8001006:	e7cb      	b.n	8000fa0 <__udivmoddi4+0x274>
 8001008:	3802      	subs	r0, #2
 800100a:	4461      	add	r1, ip
 800100c:	e77d      	b.n	8000f0a <__udivmoddi4+0x1de>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	e7d9      	b.n	8000fc8 <__udivmoddi4+0x29c>
 8001014:	462e      	mov	r6, r5
 8001016:	e6d6      	b.n	8000dc6 <__udivmoddi4+0x9a>

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <HAL_GPIO_EXTI_Rising_Callback>:
#include "stdio.h"

extern volatile uint8_t MemsEventDetected;

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	MemsEventDetected = 1;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000d84 	.word	0x20000d84

0800103c <sensor_init>:
int32_t time_elapsed=0;
int32_t time_elapsed2=0;
int32_t post_FIFO_read;
int32_t pre_FIFO_read;

void sensor_init(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

	// init ism330dhcx sensor
	ret_uint = Sensor_IO_SPI_CS_Init_All();
 8001040:	f000 f908 	bl	8001254 <Sensor_IO_SPI_CS_Init_All>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <sensor_init+0xac>)
 800104a:	701a      	strb	r2, [r3, #0]
	ret = CUSTOM_MOTION_SENSOR_Init(CUSTOM_ISM330DHCX_0,MOTION_ACCELERO);
 800104c:	2102      	movs	r1, #2
 800104e:	2000      	movs	r0, #0
 8001050:	f013 fd60 	bl	8014b14 <CUSTOM_MOTION_SENSOR_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	4a25      	ldr	r2, [pc, #148]	; (80010ec <sensor_init+0xb0>)
 8001058:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO,ISM330DHCX_ACC_ODR);
 800105a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80010f0 <sensor_init+0xb4>
 800105e:	2102      	movs	r1, #2
 8001060:	2000      	movs	r0, #0
 8001062:	f013 fe23 	bl	8014cac <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
 8001066:	4603      	mov	r3, r0
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <sensor_init+0xb0>)
 800106a:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_BDR( CUSTOM_ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_ACC_ODR);
 800106c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80010f0 <sensor_init+0xb4>
 8001070:	2102      	movs	r1, #2
 8001072:	2000      	movs	r0, #0
 8001074:	f014 f8e4 	bl	8015240 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR>
 8001078:	4603      	mov	r3, r0
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <sensor_init+0xb0>)
 800107c:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_SetFullScale( CUSTOM_ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_ACC_FS);
 800107e:	2210      	movs	r2, #16
 8001080:	2102      	movs	r1, #2
 8001082:	2000      	movs	r0, #0
 8001084:	f013 fe58 	bl	8014d38 <CUSTOM_MOTION_SENSOR_SetFullScale>
 8001088:	4603      	mov	r3, r0
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <sensor_init+0xb0>)
 800108c:	6013      	str	r3, [r2, #0]

	// get sensor sensitivity
	ret = CUSTOM_MOTION_SENSOR_GetSensitivity(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO, &sensor_acc_sensitivity);
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <sensor_init+0xb8>)
 8001090:	2102      	movs	r1, #2
 8001092:	2000      	movs	r0, #0
 8001094:	f013 fdc6 	bl	8014c24 <CUSTOM_MOTION_SENSOR_GetSensitivity>
 8001098:	4603      	mov	r3, r0
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <sensor_init+0xb0>)
 800109c:	6013      	str	r3, [r2, #0]

	// sensor fifo init
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(CUSTOM_ISM330DHCX_0, ENABLE);
 800109e:	2101      	movs	r1, #1
 80010a0:	2000      	movs	r0, #0
 80010a2:	f013 ffe7 	bl	8015074 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <sensor_init+0xb0>)
 80010aa:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level( CUSTOM_ISM330DHCX_0, INPUT_BUFFER_SIZE);
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	2000      	movs	r0, #0
 80010b2:	f014 f807 	bl	80150c4 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <sensor_init+0xb0>)
 80010ba:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(CUSTOM_ISM330DHCX_0,  ENABLE);
 80010bc:	2101      	movs	r1, #1
 80010be:	2000      	movs	r0, #0
 80010c0:	f014 f828 	bl	8015114 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <sensor_init+0xb0>)
 80010c8:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_ISM330DHCX_0,  ISM330DHCX_STREAM_MODE);
 80010ca:	2106      	movs	r1, #6
 80010cc:	2000      	movs	r0, #0
 80010ce:	f014 f849 	bl	8015164 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <sensor_init+0xb0>)
 80010d6:	6013      	str	r3, [r2, #0]

	// AI init
	aiInit();
 80010d8:	f013 fa82 	bl	80145e0 <aiInit>
	// PRE PROCESSING init
	pre_processing_init(&pre_processing_data);
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <sensor_init+0xbc>)
 80010de:	f002 fa4f 	bl	8003580 <pre_processing_init>

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000b00 	.word	0x20000b00
 80010ec:	20000afc 	.word	0x20000afc
 80010f0:	44d04000 	.word	0x44d04000
 80010f4:	20000d80 	.word	0x20000d80
 80010f8:	20000b04 	.word	0x20000b04
 80010fc:	00000000 	.word	0x00000000

08001100 <sensor_process>:

void sensor_process(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af02      	add	r7, sp, #8

	if (MemsEventDetected == 1){
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <sensor_process+0x138>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	f040 808c 	bne.w	8001228 <sensor_process+0x128>

		//pre_FIFO_read = BSP_GetTick();

		MemsEventDetected = 0;
 8001110:	4b49      	ldr	r3, [pc, #292]	; (8001238 <sensor_process+0x138>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]

		for(int jj=0;jj<INPUT_BUFFER_SIZE;jj++){
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	e075      	b.n	8001208 <sensor_process+0x108>
			CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO, DataOut);
 800111c:	4a47      	ldr	r2, [pc, #284]	; (800123c <sensor_process+0x13c>)
 800111e:	2102      	movs	r1, #2
 8001120:	2000      	movs	r0, #0
 8001122:	f014 f847 	bl	80151b4 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word>
			sensor_acc[jj].x = ((float)DataOut[0])*sensor_acc_sensitivity*0.001; // from [mg] to [g]
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <sensor_process+0x13c>)
 8001128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001134:	4b42      	ldr	r3, [pc, #264]	; (8001240 <sensor_process+0x140>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113e:	ee17 0a90 	vmov	r0, s15
 8001142:	f7ff fa05 	bl	8000550 <__aeabi_f2d>
 8001146:	a33a      	add	r3, pc, #232	; (adr r3, 8001230 <sensor_process+0x130>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa58 	bl	8000600 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fd4a 	bl	8000bf0 <__aeabi_d2f>
 800115c:	4601      	mov	r1, r0
 800115e:	4839      	ldr	r0, [pc, #228]	; (8001244 <sensor_process+0x144>)
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4403      	add	r3, r0
 800116c:	6019      	str	r1, [r3, #0]
			sensor_acc[jj].y = ((float)DataOut[1])*sensor_acc_sensitivity*0.001;
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <sensor_process+0x13c>)
 8001170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <sensor_process+0x140>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001186:	ee17 0a90 	vmov	r0, s15
 800118a:	f7ff f9e1 	bl	8000550 <__aeabi_f2d>
 800118e:	a328      	add	r3, pc, #160	; (adr r3, 8001230 <sensor_process+0x130>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fa34 	bl	8000600 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fd26 	bl	8000bf0 <__aeabi_d2f>
 80011a4:	4601      	mov	r1, r0
 80011a6:	4827      	ldr	r0, [pc, #156]	; (8001244 <sensor_process+0x144>)
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4403      	add	r3, r0
 80011b4:	3304      	adds	r3, #4
 80011b6:	6019      	str	r1, [r3, #0]
			sensor_acc[jj].z = ((float)DataOut[2])*sensor_acc_sensitivity*0.001;
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <sensor_process+0x13c>)
 80011ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <sensor_process+0x140>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	ee17 0a90 	vmov	r0, s15
 80011d4:	f7ff f9bc 	bl	8000550 <__aeabi_f2d>
 80011d8:	a315      	add	r3, pc, #84	; (adr r3, 8001230 <sensor_process+0x130>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fa0f 	bl	8000600 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fd01 	bl	8000bf0 <__aeabi_d2f>
 80011ee:	4601      	mov	r1, r0
 80011f0:	4814      	ldr	r0, [pc, #80]	; (8001244 <sensor_process+0x144>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4403      	add	r3, r0
 80011fe:	3308      	adds	r3, #8
 8001200:	6019      	str	r1, [r3, #0]
		for(int jj=0;jj<INPUT_BUFFER_SIZE;jj++){
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3301      	adds	r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	dd86      	ble.n	800111c <sensor_process+0x1c>
		}

		// call pre_processing_functions
		pre_processing_process(sensor_acc, INPUT_BUFFER_SIZE, preprocessing_output_array, INPUT_BUFFER_SIZE/2, &pre_processing_data);
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <sensor_process+0x148>)
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <sensor_process+0x14c>)
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <sensor_process+0x144>)
 800121c:	f002 fa10 	bl	8003640 <pre_processing_process>

		// call ai process
		aiProcess(preprocessing_output_array, ai_out);
 8001220:	490b      	ldr	r1, [pc, #44]	; (8001250 <sensor_process+0x150>)
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <sensor_process+0x14c>)
 8001224:	f013 fa08 	bl	8014638 <aiProcess>

	}
	//Get number of unread FIFO samples
    //CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples(CUSTOM_ISM330DHCX_0, &num_samples);

}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	d2f1a9fc 	.word	0xd2f1a9fc
 8001234:	3f50624d 	.word	0x3f50624d
 8001238:	20000d84 	.word	0x20000d84
 800123c:	20000d88 	.word	0x20000d88
 8001240:	20000d80 	.word	0x20000d80
 8001244:	20000d90 	.word	0x20000d90
 8001248:	20000b04 	.word	0x20000b04
 800124c:	20001990 	.word	0x20001990
 8001250:	20001b90 	.word	0x20001b90

08001254 <Sensor_IO_SPI_CS_Init_All>:
 * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
 * @param  None
 * @retval HAL_StatusTypeDef HAL Status
 */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  /* Set the pin for the ISM330DHCX before init to avoid a glitch */
  //if use STWIN
  //BUS_SPI3_SCK_GPIO_CLK_ENABLE();
  //if use STWIN.BX
  BUS_SPI2_SCK_GPIO_CLK_ENABLE();
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <Sensor_IO_SPI_CS_Init_All+0x58>)
 800125c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <Sensor_IO_SPI_CS_Init_All+0x58>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <Sensor_IO_SPI_CS_Init_All+0x58>)
 800126c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <Sensor_IO_SPI_CS_Init_All+0x5c>)
 8001280:	f006 feda 	bl	8008038 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]

  GPIO_InitStruct.Pin = CUSTOM_ISM330DHCX_0_CS_PIN;
 8001290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001294:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(CUSTOM_ISM330DHCX_0_CS_PORT, &GPIO_InitStruct);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <Sensor_IO_SPI_CS_Init_All+0x5c>)
 800129c:	f006 fc16 	bl	8007acc <HAL_GPIO_Init>

  return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	46020c00 	.word	0x46020c00
 80012b0:	42021c00 	.word	0x42021c00

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f005 fb6c 	bl	8006994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f831 	bl	8001322 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012c0:	f000 f894 	bl	80013ec <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80012c4:	f000 f8df 	bl	8001486 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 fe7a 	bl	8001fc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012cc:	f000 f8e4 	bl	8001498 <MX_ADC1_Init>
  MX_ADF1_Init();
 80012d0:	f000 f928 	bl	8001524 <MX_ADF1_Init>
  MX_MDF1_Init();
 80012d4:	f000 f990 	bl	80015f8 <MX_MDF1_Init>
  MX_DAC1_Init();
 80012d8:	f000 fa00 	bl	80016dc <MX_DAC1_Init>
  MX_I2C1_Init();
 80012dc:	f000 fa46 	bl	800176c <MX_I2C1_Init>
  MX_I2C2_Init();
 80012e0:	f000 fa84 	bl	80017ec <MX_I2C2_Init>
  MX_I2C3_Init();
 80012e4:	f000 fac2 	bl	800186c <MX_I2C3_Init>
  MX_ICACHE_Init();
 80012e8:	f000 fb00 	bl	80018ec <MX_ICACHE_Init>
  MX_RTC_Init();
 80012ec:	f000 fb12 	bl	8001914 <MX_RTC_Init>
  MX_SAI1_Init();
 80012f0:	f000 fb5e 	bl	80019b0 <MX_SAI1_Init>
  MX_SPI1_Init();
 80012f4:	f000 fc22 	bl	8001b3c <MX_SPI1_Init>
  MX_SPI3_Init();
 80012f8:	f000 fc90 	bl	8001c1c <MX_SPI3_Init>
  MX_TAMP_RTC_Init();
 80012fc:	f000 fcfe 	bl	8001cfc <MX_TAMP_RTC_Init>
  MX_TIM3_Init();
 8001300:	f000 fd42 	bl	8001d88 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001304:	f000 fd94 	bl	8001e30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001308:	f000 fde0 	bl	8001ecc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800130c:	f000 fe2c 	bl	8001f68 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8001310:	f000 f9c2 	bl	8001698 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8001314:	f012 fcb6 	bl	8013c84 <MX_USB_Device_Init>
  sensor_init();
 8001318:	f7ff fe90 	bl	800103c <sensor_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_process();
 800131c:	f7ff fef0 	bl	8001100 <sensor_process>
 8001320:	e7fc      	b.n	800131c <main+0x68>

08001322 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b09e      	sub	sp, #120	; 0x78
 8001326:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	2260      	movs	r2, #96	; 0x60
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f018 fa76 	bl	8019822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001336:	463b      	mov	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001346:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800134a:	f008 fc93 	bl	8009c74 <HAL_PWREx_ControlVoltageScaling>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001354:	f001 f87e 	bl	8002454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001358:	232b      	movs	r3, #43	; 0x2b
 800135a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001360:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136e:	2310      	movs	r3, #16
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001372:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001380:	2303      	movs	r3, #3
 8001382:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800138c:	230a      	movs	r3, #10
 800138e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800139c:	230c      	movs	r3, #12
 800139e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f008 fd15 	bl	8009dd8 <HAL_RCC_OscConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013b4:	f001 f84e 	bl	8002454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b8:	231f      	movs	r3, #31
 80013ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013bc:	2303      	movs	r3, #3
 80013be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	2104      	movs	r1, #4
 80013d4:	4618      	mov	r0, r3
 80013d6:	f009 fbd5 	bl	800ab84 <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013e0:	f001 f838 	bl	8002454 <Error_Handler>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3778      	adds	r7, #120	; 0x78
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0b2      	sub	sp, #200	; 0xc8
 80013f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	22c8      	movs	r2, #200	; 0xc8
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f018 fa12 	bl	8019822 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_MDF1|RCC_PERIPHCLK_ADF1
 80013fe:	f44f 3260 	mov.w	r2, #229376	; 0x38000
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_ADCDAC;
  PeriphClkInit.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_PLL3;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_PLL3;
 8001410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 8001418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001420:	2303      	movs	r3, #3
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 48;
 8001428:	2330      	movs	r3, #48	; 0x30
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 25;
 8001430:	2319      	movs	r3, #25
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 8001438:	230c      	movs	r3, #12
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVQ;
 8001440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001446:	2303      	movs	r3, #3
 8001448:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 48;
 800144e:	2330      	movs	r3, #48	; 0x30
 8001450:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8001452:	2302      	movs	r3, #2
 8001454:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 7;
 8001456:	2307      	movs	r3, #7
 8001458:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 25;
 800145a:	2319      	movs	r3, #25
 800145c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 800145e:	230c      	movs	r3, #12
 8001460:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8001466:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4618      	mov	r0, r3
 8001470:	f009 ff5e 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <PeriphCommonClock_Config+0x92>
  {
    Error_Handler();
 800147a:	f000 ffeb 	bl	8002454 <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	37c8      	adds	r7, #200	; 0xc8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800148a:	f008 fc85 	bl	8009d98 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800148e:	f008 fc93 	bl	8009db8 <HAL_PWREx_DisableUCPDDeadBattery>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_ADC1_Init+0x84>)
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <MX_ADC1_Init+0x88>)
 80014a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <MX_ADC1_Init+0x84>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_ADC1_Init+0x84>)
 80014aa:	2204      	movs	r2, #4
 80014ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_ADC1_Init+0x84>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_ADC1_Init+0x84>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_ADC1_Init+0x84>)
 80014bc:	2204      	movs	r2, #4
 80014be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_ADC1_Init+0x84>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_ADC1_Init+0x84>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_ADC1_Init+0x84>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_ADC1_Init+0x84>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_ADC1_Init+0x84>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_ADC1_Init+0x84>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_ADC1_Init+0x84>)
 80014ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_ADC1_Init+0x84>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_MDF;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_ADC1_Init+0x84>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_ADC1_Init+0x84>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_ADC1_Init+0x84>)
 8001508:	f005 fba4 	bl	8006c54 <HAL_ADC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001512:	f000 ff9f 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20001b98 	.word	0x20001b98
 8001520:	42028000 	.word	0x42028000

08001524 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <MX_ADF1_Init+0xc8>)
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <MX_ADF1_Init+0xcc>)
 800152c:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001530:	2201      	movs	r2, #1
 8001532:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = ENABLE;
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001536:	2201      	movs	r2, #1
 8001538:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.CommonParam.OutputClock.Pins = MDF_OUTPUT_CLOCK_0;
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <MX_ADF1_Init+0xc8>)
 800153c:	2220      	movs	r2, #32
 800153e:	611a      	str	r2, [r3, #16]
  AdfHandle0.Init.CommonParam.OutputClock.Divider = 5;
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001542:	2205      	movs	r2, #5
 8001544:	615a      	str	r2, [r3, #20]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Activation = ENABLE;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001548:	2201      	movs	r2, #1
 800154a:	761a      	strb	r2, [r3, #24]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_ADF1_Init+0xc8>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Edge = MDF_CLOCK_TRIG_FALLING_EDGE;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001558:	621a      	str	r2, [r3, #32]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <MX_ADF1_Init+0xc8>)
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001564:	2210      	movs	r2, #16
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <MX_ADF1_Init+0xc8>)
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 31;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001570:	221f      	movs	r2, #31
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_ADF1_Init+0xc8>)
 8001576:	2201      	movs	r2, #1
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <MX_ADF1_Init+0xc8>)
 800157c:	f006 fefc 	bl	8008378 <HAL_MDF_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADF1_Init+0x66>
  {
    Error_Handler();
 8001586:	f000 ff65 	bl	8002454 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_ADF1_Init+0xd0>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_ADF1_Init+0xd0>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_ADF1_Init+0xd0>)
 8001598:	2250      	movs	r2, #80	; 0x50
 800159a:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 16;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_ADF1_Init+0xd0>)
 800159e:	2210      	movs	r2, #16
 80015a0:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 1;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = ENABLE;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.ReshapeFilter.DecimationRatio = MDF_RSF_DECIMATION_RATIO_4;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  AdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_SYNC_CONT;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015cc:	2220      	movs	r2, #32
 80015ce:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	66da      	str	r2, [r3, #108]	; 0x6c
  AdfFilterConfig0.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	671a      	str	r2, [r3, #112]	; 0x70
  AdfFilterConfig0.Trigger.Edge = MDF_FILTER_TRIG_RISING_EDGE;
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <MX_ADF1_Init+0xd0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	675a      	str	r2, [r3, #116]	; 0x74
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20001c24 	.word	0x20001c24
 80015f0:	46024080 	.word	0x46024080
 80015f4:	20001c68 	.word	0x20001c68

080015f8 <MX_MDF1_Init>:
  * @brief MDF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_MDF1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END MDF1_Init 1 */

  /**
    MdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  MdfHandle0.Instance = MDF1_Filter0;
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <MX_MDF1_Init+0x94>)
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <MX_MDF1_Init+0x98>)
 8001600:	601a      	str	r2, [r3, #0]
  MdfHandle0.Init.CommonParam.InterleavedFilters = 0;
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <MX_MDF1_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  MdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <MX_MDF1_Init+0x94>)
 800160a:	2201      	movs	r2, #1
 800160c:	609a      	str	r2, [r3, #8]
  MdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_MDF1_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	731a      	strb	r2, [r3, #12]
  MdfHandle0.Init.SerialInterface.Activation = DISABLE;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_MDF1_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  if (HAL_MDF_Init(&MdfHandle0) != HAL_OK)
 800161c:	481b      	ldr	r0, [pc, #108]	; (800168c <MX_MDF1_Init+0x94>)
 800161e:	f006 feab 	bl	8008378 <HAL_MDF_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_MDF1_Init+0x34>
  {
    Error_Handler();
 8001628:	f000 ff14 	bl	8002454 <Error_Handler>
  /**
    MdfFilterConfig0, MdfOldConfig0 and/or MdfScdConfig0 structures initialization

    WARNING : only structures are filled, no specific init function call for filter
  */
  MdfFilterConfig0.DataSource = MDF_DATA_SOURCE_ADCITF1;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_MDF1_Init+0x9c>)
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
  MdfFilterConfig0.Delay = 0;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  MdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_MDF1_Init+0x9c>)
 800163a:	2250      	movs	r2, #80	; 0x50
 800163c:	609a      	str	r2, [r3, #8]
  MdfFilterConfig0.DecimationRatio = 4;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001640:	2204      	movs	r2, #4
 8001642:	60da      	str	r2, [r3, #12]
  MdfFilterConfig0.Offset = 0;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  MdfFilterConfig0.Gain = 4;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_MDF1_Init+0x9c>)
 800164c:	2204      	movs	r2, #4
 800164e:	615a      	str	r2, [r3, #20]
  MdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001652:	2200      	movs	r2, #0
 8001654:	761a      	strb	r2, [r3, #24]
  MdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2020 	strb.w	r2, [r3, #32]
  MdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
  MdfFilterConfig0.Integrator.Activation = DISABLE;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  MdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_MDF1_Init+0x9c>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  MdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001676:	2200      	movs	r2, #0
 8001678:	665a      	str	r2, [r3, #100]	; 0x64
  MdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_MDF1_Init+0x9c>)
 800167c:	2200      	movs	r2, #0
 800167e:	669a      	str	r2, [r3, #104]	; 0x68
  MdfFilterConfig0.DiscardSamples = 0;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <MX_MDF1_Init+0x9c>)
 8001682:	2200      	movs	r2, #0
 8001684:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN MDF1_Init 2 */

  /* USER CODE END MDF1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20001ce4 	.word	0x20001ce4
 8001690:	40025080 	.word	0x40025080
 8001694:	20001d28 	.word	0x20001d28

08001698 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <MX_CRC_Init+0x3c>)
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <MX_CRC_Init+0x40>)
 80016a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_CRC_Init+0x3c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <MX_CRC_Init+0x3c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_CRC_Init+0x3c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <MX_CRC_Init+0x3c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_CRC_Init+0x3c>)
 80016bc:	2201      	movs	r2, #1
 80016be:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_CRC_Init+0x3c>)
 80016c2:	f005 ff03 	bl	80074cc <HAL_CRC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016cc:	f000 fec2 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20001da4 	.word	0x20001da4
 80016d8:	40023000 	.word	0x40023000

080016dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	; 0x38
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2230      	movs	r2, #48	; 0x30
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f018 f899 	bl	8019822 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_DAC1_Init+0x88>)
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <MX_DAC1_Init+0x8c>)
 80016f8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016fa:	481a      	ldr	r0, [pc, #104]	; (8001764 <MX_DAC1_Init+0x88>)
 80016fc:	f005 ffd0 	bl	80076a0 <HAL_DAC_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 8001706:	f000 fea5 	bl	8002454 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001722:	2304      	movs	r3, #4
 8001724:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_DAC1_Init+0x88>)
 8001734:	f005 ffd6 	bl	80076e4 <HAL_DAC_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 800173e:	f000 fe89 	bl	8002454 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_DAC1_Init+0x88>)
 800174c:	f006 f964 	bl	8007a18 <HAL_DACEx_SetConfigAutonomousMode>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 8001756:	f000 fe7d 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3738      	adds	r7, #56	; 0x38
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20001dc8 	.word	0x20001dc8
 8001768:	46021800 	.word	0x46021800

0800176c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <MX_I2C1_Init+0x78>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <MX_I2C1_Init+0x7c>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_I2C1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017a8:	f006 fc8f 	bl	80080ca <HAL_I2C_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017b2:	f000 fe4f 	bl	8002454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017ba:	f006 fd15 	bl	80081e8 <HAL_I2CEx_ConfigAnalogFilter>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 fe46 	bl	8002454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017cc:	f006 fd57 	bl	800827e <HAL_I2CEx_ConfigDigitalFilter>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 fe3d 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20001ddc 	.word	0x20001ddc
 80017e4:	40005400 	.word	0x40005400
 80017e8:	00f07bff 	.word	0x00f07bff

080017ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_I2C2_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <MX_I2C2_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_I2C2_Init+0x74>)
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <MX_I2C2_Init+0x7c>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_I2C2_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_I2C2_Init+0x74>)
 8001804:	2201      	movs	r2, #1
 8001806:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_I2C2_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_I2C2_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_I2C2_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_I2C2_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_I2C2_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001826:	480e      	ldr	r0, [pc, #56]	; (8001860 <MX_I2C2_Init+0x74>)
 8001828:	f006 fc4f 	bl	80080ca <HAL_I2C_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001832:	f000 fe0f 	bl	8002454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <MX_I2C2_Init+0x74>)
 800183a:	f006 fcd5 	bl	80081e8 <HAL_I2CEx_ConfigAnalogFilter>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001844:	f000 fe06 	bl	8002454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_I2C2_Init+0x74>)
 800184c:	f006 fd17 	bl	800827e <HAL_I2CEx_ConfigDigitalFilter>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001856:	f000 fdfd 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20001e28 	.word	0x20001e28
 8001864:	40005800 	.word	0x40005800
 8001868:	00f07bff 	.word	0x00f07bff

0800186c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_I2C3_Init+0x74>)
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <MX_I2C3_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F07BFF;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_I2C3_Init+0x74>)
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <MX_I2C3_Init+0x7c>)
 800187a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_I2C3_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_I2C3_Init+0x74>)
 8001884:	2201      	movs	r2, #1
 8001886:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_I2C3_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_I2C3_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C3_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_I2C3_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C3_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <MX_I2C3_Init+0x74>)
 80018a8:	f006 fc0f 	bl	80080ca <HAL_I2C_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018b2:	f000 fdcf 	bl	8002454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <MX_I2C3_Init+0x74>)
 80018ba:	f006 fc95 	bl	80081e8 <HAL_I2CEx_ConfigAnalogFilter>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018c4:	f000 fdc6 	bl	8002454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_I2C3_Init+0x74>)
 80018cc:	f006 fcd7 	bl	800827e <HAL_I2CEx_ConfigDigitalFilter>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018d6:	f000 fdbd 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20001e74 	.word	0x20001e74
 80018e4:	46002800 	.word	0x46002800
 80018e8:	00f07bff 	.word	0x00f07bff

080018ec <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80018f0:	2000      	movs	r0, #0
 80018f2:	f006 fd11 	bl	8008318 <HAL_ICACHE_ConfigAssociativityMode>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80018fc:	f000 fdaa 	bl	8002454 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001900:	f006 fd2a 	bl	8008358 <HAL_ICACHE_Enable>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800190a:	f000 fda3 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_RTC_Init+0x94>)
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <MX_RTC_Init+0x98>)
 8001930:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_RTC_Init+0x94>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_RTC_Init+0x94>)
 800193a:	227f      	movs	r2, #127	; 0x7f
 800193c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_RTC_Init+0x94>)
 8001940:	22ff      	movs	r2, #255	; 0xff
 8001942:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_RTC_Init+0x94>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_RTC_Init+0x94>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_RTC_Init+0x94>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_RTC_Init+0x94>)
 8001958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_RTC_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_RTC_Init+0x94>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <MX_RTC_Init+0x94>)
 800196c:	f00c f96c 	bl	800dc48 <HAL_RTC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001976:	f000 fd6d 	bl	8002454 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_RTC_Init+0x94>)
 8001990:	f00c fae0 	bl	800df54 <HAL_RTCEx_PrivilegeModeSet>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800199a:	f000 fd5b 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20001ec0 	.word	0x20001ec0
 80019ac:	46007800 	.word	0x46007800

080019b0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80019b4:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019b6:	4a5d      	ldr	r2, [pc, #372]	; (8001b2c <MX_SAI1_Init+0x17c>)
 80019b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80019ba:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80019c0:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80019c6:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019cc:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80019d2:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019ea:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019f2:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <MX_SAI1_Init+0x180>)
 80019f4:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019f6:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80019fc:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <MX_SAI1_Init+0x178>)
 80019fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001a24:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a2e:	2208      	movs	r2, #8
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a44:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a50:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001a5c:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001a62:	4831      	ldr	r0, [pc, #196]	; (8001b28 <MX_SAI1_Init+0x178>)
 8001a64:	f00c faa4 	bl	800dfb0 <HAL_SAI_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_SAI1_Init+0xc2>
  {
    Error_Handler();
 8001a6e:	f000 fcf1 	bl	8002454 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <MX_SAI1_Init+0x188>)
 8001a76:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a80:	2203      	movs	r2, #3
 8001a82:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001ab0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab4:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_SAI1_Init+0x184>)
 8001b16:	f00c fa4b 	bl	800dfb0 <HAL_SAI_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_SAI1_Init+0x174>
  {
    Error_Handler();
 8001b20:	f000 fc98 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20001ef0 	.word	0x20001ef0
 8001b2c:	40015404 	.word	0x40015404
 8001b30:	0002ee00 	.word	0x0002ee00
 8001b34:	20001f88 	.word	0x20001f88
 8001b38:	40015424 	.word	0x40015424

08001b3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b4c:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <MX_SPI1_Init+0xdc>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b62:	2207      	movs	r2, #7
 8001b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b76:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bda:	480e      	ldr	r0, [pc, #56]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bdc:	f00c fc16 	bl	800e40c <HAL_SPI_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8001be6:	f000 fc35 	bl	8002454 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001bee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bf2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_SPI1_Init+0xd8>)
 8001bfe:	f00d fe4c 	bl	800f89a <HAL_SPIEx_SetConfigAutonomousMode>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8001c08:	f000 fc24 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20002020 	.word	0x20002020
 8001c18:	40013000 	.word	0x40013000

08001c1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c2e:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <MX_SPI3_Init+0xdc>)
 8001c30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c42:	2207      	movs	r2, #7
 8001c44:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c46:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c60:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001c64:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001cbc:	f00c fba6 	bl	800e40c <HAL_SPI_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_SPI3_Init+0xae>
  {
    Error_Handler();
 8001cc6:	f000 fbc5 	bl	8002454 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cd2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_SPI3_Init+0xd8>)
 8001cde:	f00d fddc 	bl	800f89a <HAL_SPIEx_SetConfigAutonomousMode>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPI3_Init+0xd0>
  {
    Error_Handler();
 8001ce8:	f000 fbb4 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200020b0 	.word	0x200020b0
 8001cf8:	46002000 	.word	0x46002000

08001cfc <MX_TAMP_RTC_Init>:
  * @brief TAMP Initialization Function
  * @param None
  * @retval None
  */
static void MX_TAMP_RTC_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b090      	sub	sp, #64	; 0x40
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TAMP_Init 0 */

  /* USER CODE END TAMP_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	619a      	str	r2, [r3, #24]
  RTC_TamperTypeDef sTamper = {0};
 8001d16:	463b      	mov	r3, r7
 8001d18:	2224      	movs	r2, #36	; 0x24
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f017 fd80 	bl	8019822 <memset>

  /* USER CODE END TAMP_Init 1 */

  /** Enable the RTC Active Tamper
  */
  privilegeState.tampPrivilegeFull = TAMP_PRIVILEGE_FULL_YES;
 8001d22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.MonotonicCounterPrivilege = TAMP_MONOTONIC_CNT_PRIVILEGE_NO;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	4619      	mov	r1, r3
 8001d32:	4814      	ldr	r0, [pc, #80]	; (8001d84 <MX_TAMP_RTC_Init+0x88>)
 8001d34:	f00c f90e 	bl	800df54 <HAL_RTCEx_PrivilegeModeSet>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TAMP_RTC_Init+0x46>
  {
    Error_Handler();
 8001d3e:	f000 fb89 	bl	8002454 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8001d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d66:	623b      	str	r3, [r7, #32]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_TAMP_RTC_Init+0x88>)
 8001d6e:	f00c f87d 	bl	800de6c <HAL_RTCEx_SetTamper>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TAMP_RTC_Init+0x80>
  {
    Error_Handler();
 8001d78:	f000 fb6c 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TAMP_Init 2 */

  /* USER CODE END TAMP_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3740      	adds	r7, #64	; 0x40
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20001ec0 	.word	0x20001ec0

08001d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <MX_TIM3_Init+0xa4>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4.294967295E9;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001dcc:	4816      	ldr	r0, [pc, #88]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001dce:	f00d fda5 	bl	800f91c <HAL_TIM_IC_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001dd8:	f000 fb3c 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	480f      	ldr	r0, [pc, #60]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001dec:	f00e f8d0 	bl	800ff90 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001df6:	f000 fb2d 	bl	8002454 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_TIM3_Init+0xa0>)
 8001e12:	f00d fdda 	bl	800f9ca <HAL_TIM_IC_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e1c:	f000 fb1a 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20002140 	.word	0x20002140
 8001e2c:	40000400 	.word	0x40000400

08001e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e34:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e36:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <MX_USART2_UART_Init+0x98>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e3c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e60:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7a:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e7c:	f00e f94a 	bl	8010114 <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001e86:	f000 fae5 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e8e:	f00e fd21 	bl	80108d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001e98:	f000 fadc 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001ea0:	f00e fd56 	bl	8010950 <HAL_UARTEx_SetRxFifoThreshold>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001eaa:	f000 fad3 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001eb0:	f00e fcd7 	bl	8010862 <HAL_UARTEx_DisableFifoMode>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001eba:	f000 facb 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000218c 	.word	0x2000218c
 8001ec8:	40004400 	.word	0x40004400

08001ecc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ed2:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <MX_USART3_UART_Init+0x98>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ef8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001efc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f16:	4812      	ldr	r0, [pc, #72]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f18:	f00e f8fc 	bl	8010114 <HAL_UART_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001f22:	f000 fa97 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f26:	2100      	movs	r1, #0
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f2a:	f00e fcd3 	bl	80108d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8001f34:	f000 fa8e 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4809      	ldr	r0, [pc, #36]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f3c:	f00e fd08 	bl	8010950 <HAL_UARTEx_SetRxFifoThreshold>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8001f46:	f000 fa85 	bl	8002454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_USART3_UART_Init+0x94>)
 8001f4c:	f00e fc89 	bl	8010862 <HAL_UARTEx_DisableFifoMode>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8001f56:	f000 fa7d 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000221c 	.word	0x2000221c
 8001f64:	40004800 	.word	0x40004800

08001f68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001f70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f74:	2206      	movs	r2, #6
 8001f76:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001fa4:	f006 fb84 	bl	80086b0 <HAL_PCD_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001fae:	f000 fa51 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200022ac 	.word	0x200022ac
 8001fbc:	42040000 	.word	0x42040000

08001fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd6:	4bbe      	ldr	r3, [pc, #760]	; (80022d0 <MX_GPIO_Init+0x310>)
 8001fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fdc:	4abc      	ldr	r2, [pc, #752]	; (80022d0 <MX_GPIO_Init+0x310>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fe6:	4bba      	ldr	r3, [pc, #744]	; (80022d0 <MX_GPIO_Init+0x310>)
 8001fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ff4:	4bb6      	ldr	r3, [pc, #728]	; (80022d0 <MX_GPIO_Init+0x310>)
 8001ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffa:	4ab5      	ldr	r2, [pc, #724]	; (80022d0 <MX_GPIO_Init+0x310>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002004:	4bb2      	ldr	r3, [pc, #712]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002012:	4baf      	ldr	r3, [pc, #700]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002018:	4aad      	ldr	r2, [pc, #692]	; (80022d0 <MX_GPIO_Init+0x310>)
 800201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002022:	4bab      	ldr	r3, [pc, #684]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002030:	4ba7      	ldr	r3, [pc, #668]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002036:	4aa6      	ldr	r2, [pc, #664]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002040:	4ba3      	ldr	r3, [pc, #652]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4ba0      	ldr	r3, [pc, #640]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002054:	4a9e      	ldr	r2, [pc, #632]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800205e:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206c:	4b98      	ldr	r3, [pc, #608]	; (80022d0 <MX_GPIO_Init+0x310>)
 800206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002072:	4a97      	ldr	r2, [pc, #604]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800207c:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <MX_GPIO_Init+0x310>)
 800207e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4b91      	ldr	r3, [pc, #580]	; (80022d0 <MX_GPIO_Init+0x310>)
 800208c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002090:	4a8f      	ldr	r2, [pc, #572]	; (80022d0 <MX_GPIO_Init+0x310>)
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800209a:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <MX_GPIO_Init+0x310>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a8:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <MX_GPIO_Init+0x310>)
 80020aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ae:	4a88      	ldr	r2, [pc, #544]	; (80022d0 <MX_GPIO_Init+0x310>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020b8:	4b85      	ldr	r3, [pc, #532]	; (80022d0 <MX_GPIO_Init+0x310>)
 80020ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <MX_GPIO_Init+0x310>)
 80020c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020cc:	4a80      	ldr	r2, [pc, #512]	; (80022d0 <MX_GPIO_Init+0x310>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020d6:	4b7e      	ldr	r3, [pc, #504]	; (80022d0 <MX_GPIO_Init+0x310>)
 80020d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80020ea:	487a      	ldr	r0, [pc, #488]	; (80022d4 <MX_GPIO_Init+0x314>)
 80020ec:	f005 ffa4 	bl	8008038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2181      	movs	r1, #129	; 0x81
 80020f4:	4878      	ldr	r0, [pc, #480]	; (80022d8 <MX_GPIO_Init+0x318>)
 80020f6:	f005 ff9f 	bl	8008038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2102      	movs	r1, #2
 80020fe:	4877      	ldr	r0, [pc, #476]	; (80022dc <MX_GPIO_Init+0x31c>)
 8002100:	f005 ff9a 	bl	8008038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8002104:	2201      	movs	r2, #1
 8002106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210a:	4875      	ldr	r0, [pc, #468]	; (80022e0 <MX_GPIO_Init+0x320>)
 800210c:	f005 ff94 	bl	8008038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8002110:	2340      	movs	r3, #64	; 0x40
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002114:	4b73      	ldr	r3, [pc, #460]	; (80022e4 <MX_GPIO_Init+0x324>)
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	486d      	ldr	r0, [pc, #436]	; (80022d8 <MX_GPIO_Init+0x318>)
 8002124:	f005 fcd2 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8002128:	f248 0362 	movw	r3, #32866	; 0x8062
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	2303      	movs	r3, #3
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213a:	4619      	mov	r1, r3
 800213c:	486a      	ldr	r0, [pc, #424]	; (80022e8 <MX_GPIO_Init+0x328>)
 800213e:	f005 fcc5 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC12 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8002142:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002150:	2302      	movs	r3, #2
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002154:	230c      	movs	r3, #12
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215c:	4619      	mov	r1, r3
 800215e:	4863      	ldr	r0, [pc, #396]	; (80022ec <MX_GPIO_Init+0x32c>)
 8002160:	f005 fcb4 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin CS_DLPC_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin;
 8002164:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	4855      	ldr	r0, [pc, #340]	; (80022d4 <MX_GPIO_Init+0x314>)
 800217e:	f005 fca5 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8002182:	2324      	movs	r3, #36	; 0x24
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002186:	2303      	movs	r3, #3
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	4850      	ldr	r0, [pc, #320]	; (80022d8 <MX_GPIO_Init+0x318>)
 8002196:	f005 fc99 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 800219a:	f24a 2301 	movw	r3, #41473	; 0xa201
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a0:	2303      	movs	r3, #3
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4850      	ldr	r0, [pc, #320]	; (80022f0 <MX_GPIO_Init+0x330>)
 80021b0:	f005 fc8c 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 80021b4:	2381      	movs	r3, #129	; 0x81
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4843      	ldr	r0, [pc, #268]	; (80022d8 <MX_GPIO_Init+0x318>)
 80021cc:	f005 fc7e 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin BOOT0_Pin LED2_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|BOOT0_Pin|LED2_Pin|STSAFE_RESET_Pin;
 80021d0:	f241 6308 	movw	r3, #5640	; 0x1608
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e2:	4619      	mov	r1, r3
 80021e4:	483b      	ldr	r0, [pc, #236]	; (80022d4 <MX_GPIO_Init+0x314>)
 80021e6:	f005 fc71 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 80021ea:	2302      	movs	r3, #2
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4836      	ldr	r0, [pc, #216]	; (80022dc <MX_GPIO_Init+0x31c>)
 8002202:	f005 fc63 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8002206:	2381      	movs	r3, #129	; 0x81
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <MX_GPIO_Init+0x324>)
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	4830      	ldr	r0, [pc, #192]	; (80022dc <MX_GPIO_Init+0x31c>)
 800221a:	f005 fc57 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 800221e:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002224:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <MX_GPIO_Init+0x324>)
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4830      	ldr	r0, [pc, #192]	; (80022f4 <MX_GPIO_Init+0x334>)
 8002234:	f005 fc4a 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8002238:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223e:	2303      	movs	r3, #3
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	4619      	mov	r1, r3
 800224c:	4824      	ldr	r0, [pc, #144]	; (80022e0 <MX_GPIO_Init+0x320>)
 800224e:	f005 fc3d 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8002252:	f64c 233e 	movw	r3, #51774	; 0xca3e
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <MX_GPIO_Init+0x324>)
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	481e      	ldr	r0, [pc, #120]	; (80022e0 <MX_GPIO_Init+0x320>)
 8002268:	f005 fc30 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800226c:	2304      	movs	r3, #4
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002278:	2302      	movs	r3, #2
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800227c:	230c      	movs	r3, #12
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	481a      	ldr	r0, [pc, #104]	; (80022f0 <MX_GPIO_Init+0x330>)
 8002288:	f005 fc20 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 800228c:	f240 1301 	movw	r3, #257	; 0x101
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002292:	2303      	movs	r3, #3
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	4619      	mov	r1, r3
 80022a0:	4815      	ldr	r0, [pc, #84]	; (80022f8 <MX_GPIO_Init+0x338>)
 80022a2:	f005 fc13 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 80022a6:	230c      	movs	r3, #12
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022aa:	2303      	movs	r3, #3
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	4619      	mov	r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <MX_GPIO_Init+0x32c>)
 80022ba:	f005 fc07 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 80022be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e015      	b.n	80022fc <MX_GPIO_Init+0x33c>
 80022d0:	46020c00 	.word	0x46020c00
 80022d4:	42021c00 	.word	0x42021c00
 80022d8:	42022000 	.word	0x42022000
 80022dc:	42021000 	.word	0x42021000
 80022e0:	42021400 	.word	0x42021400
 80022e4:	10110000 	.word	0x10110000
 80022e8:	42021800 	.word	0x42021800
 80022ec:	42020800 	.word	0x42020800
 80022f0:	42020c00 	.word	0x42020c00
 80022f4:	42020400 	.word	0x42020400
 80022f8:	42020000 	.word	0x42020000
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002302:	4619      	mov	r1, r3
 8002304:	484e      	ldr	r0, [pc, #312]	; (8002440 <MX_GPIO_Init+0x480>)
 8002306:	f005 fbe1 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 800230a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <MX_GPIO_Init+0x484>)
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	4619      	mov	r1, r3
 800231e:	484a      	ldr	r0, [pc, #296]	; (8002448 <MX_GPIO_Init+0x488>)
 8002320:	f005 fbd4 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8002324:	f248 0302 	movw	r3, #32770	; 0x8002
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232a:	2303      	movs	r3, #3
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002336:	4619      	mov	r1, r3
 8002338:	4844      	ldr	r0, [pc, #272]	; (800244c <MX_GPIO_Init+0x48c>)
 800233a:	f005 fbc7 	bl	8007acc <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 800233e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002344:	2303      	movs	r3, #3
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	4619      	mov	r1, r3
 8002352:	483f      	ldr	r0, [pc, #252]	; (8002450 <MX_GPIO_Init+0x490>)
 8002354:	f005 fbba 	bl	8007acc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	2107      	movs	r1, #7
 800235c:	200b      	movs	r0, #11
 800235e:	f005 f872 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002362:	200b      	movs	r0, #11
 8002364:	f005 f889 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2107      	movs	r1, #7
 800236c:	200c      	movs	r0, #12
 800236e:	f005 f86a 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002372:	200c      	movs	r0, #12
 8002374:	f005 f881 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2107      	movs	r1, #7
 800237c:	200d      	movs	r0, #13
 800237e:	f005 f862 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002382:	200d      	movs	r0, #13
 8002384:	f005 f879 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2107      	movs	r1, #7
 800238c:	200e      	movs	r0, #14
 800238e:	f005 f85a 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002392:	200e      	movs	r0, #14
 8002394:	f005 f871 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2107      	movs	r1, #7
 800239c:	200f      	movs	r0, #15
 800239e:	f005 f852 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80023a2:	200f      	movs	r0, #15
 80023a4:	f005 f869 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2107      	movs	r1, #7
 80023ac:	2010      	movs	r0, #16
 80023ae:	f005 f84a 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80023b2:	2010      	movs	r0, #16
 80023b4:	f005 f861 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2107      	movs	r1, #7
 80023bc:	2011      	movs	r0, #17
 80023be:	f005 f842 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 80023c2:	2011      	movs	r0, #17
 80023c4:	f005 f859 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2107      	movs	r1, #7
 80023cc:	2012      	movs	r0, #18
 80023ce:	f005 f83a 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80023d2:	2012      	movs	r0, #18
 80023d4:	f005 f851 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2107      	movs	r1, #7
 80023dc:	2013      	movs	r0, #19
 80023de:	f005 f832 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 80023e2:	2013      	movs	r0, #19
 80023e4:	f005 f849 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2107      	movs	r1, #7
 80023ec:	2014      	movs	r0, #20
 80023ee:	f005 f82a 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 80023f2:	2014      	movs	r0, #20
 80023f4:	f005 f841 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2107      	movs	r1, #7
 80023fc:	2015      	movs	r0, #21
 80023fe:	f005 f822 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8002402:	2015      	movs	r0, #21
 8002404:	f005 f839 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2107      	movs	r1, #7
 800240c:	2016      	movs	r0, #22
 800240e:	f005 f81a 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002412:	2016      	movs	r0, #22
 8002414:	f005 f831 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2107      	movs	r1, #7
 800241c:	2018      	movs	r0, #24
 800241e:	f005 f812 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8002422:	2018      	movs	r0, #24
 8002424:	f005 f829 	bl	800747a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2107      	movs	r1, #7
 800242c:	2019      	movs	r0, #25
 800242e:	f005 f80a 	bl	8007446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8002432:	2019      	movs	r0, #25
 8002434:	f005 f821 	bl	800747a <HAL_NVIC_EnableIRQ>

}
 8002438:	bf00      	nop
 800243a:	3738      	adds	r7, #56	; 0x38
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	42021400 	.word	0x42021400
 8002444:	10110000 	.word	0x10110000
 8002448:	42020c00 	.word	0x42020c00
 800244c:	42020400 	.word	0x42020400
 8002450:	42021000 	.word	0x42021000

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245c:	e7fe      	b.n	800245c <Error_Handler+0x8>
	...

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_MspInit+0x30>)
 8002468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246c:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_MspInit+0x30>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_MspInit+0x30>)
 8002478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	46020c00 	.word	0x46020c00

08002494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_ADC_MspInit+0x80>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d129      	bne.n	800250a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_ADC_MspInit+0x84>)
 80024b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024bc:	4a16      	ldr	r2, [pc, #88]	; (8002518 <HAL_ADC_MspInit+0x84>)
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_ADC_MspInit+0x84>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_ADC_MspInit+0x84>)
 80024d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024da:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_ADC_MspInit+0x84>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_ADC_MspInit+0x84>)
 80024e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024f2:	2303      	movs	r3, #3
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f6:	2303      	movs	r3, #3
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <HAL_ADC_MspInit+0x88>)
 8002506:	f005 fae1 	bl	8007acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	42028000 	.word	0x42028000
 8002518:	46020c00 	.word	0x46020c00
 800251c:	42020800 	.word	0x42020800

08002520 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a41      	ldr	r2, [pc, #260]	; (8002644 <HAL_MDF_MspInit+0x124>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12f      	bne.n	80025a2 <HAL_MDF_MspInit+0x82>
  {
  /* USER CODE BEGIN ADF1_MspInit 0 */

  /* USER CODE END ADF1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_MDF_MspInit+0x128>)
 8002544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002548:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <HAL_MDF_MspInit+0x128>)
 800254a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800254e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_MDF_MspInit+0x128>)
 8002554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_MDF_MspInit+0x128>)
 8002562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002566:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_MDF_MspInit+0x128>)
 8002568:	f043 0310 	orr.w	r3, r3, #16
 800256c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_MDF_MspInit+0x128>)
 8002572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800257e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8002590:	2303      	movs	r3, #3
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	4619      	mov	r1, r3
 800259a:	482c      	ldr	r0, [pc, #176]	; (800264c <HAL_MDF_MspInit+0x12c>)
 800259c:	f005 fa96 	bl	8007acc <HAL_GPIO_Init>
  /* USER CODE BEGIN MDF1_MspInit 1 */

  /* USER CODE END MDF1_MspInit 1 */
  }

}
 80025a0:	e04c      	b.n	800263c <HAL_MDF_MspInit+0x11c>
  else if(IS_MDF_INSTANCE(hmdf->Instance))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2a      	ldr	r2, [pc, #168]	; (8002650 <HAL_MDF_MspInit+0x130>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d018      	beq.n	80025de <HAL_MDF_MspInit+0xbe>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a28      	ldr	r2, [pc, #160]	; (8002654 <HAL_MDF_MspInit+0x134>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_MDF_MspInit+0xbe>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a27      	ldr	r2, [pc, #156]	; (8002658 <HAL_MDF_MspInit+0x138>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00e      	beq.n	80025de <HAL_MDF_MspInit+0xbe>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a25      	ldr	r2, [pc, #148]	; (800265c <HAL_MDF_MspInit+0x13c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_MDF_MspInit+0xbe>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <HAL_MDF_MspInit+0x140>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_MDF_MspInit+0xbe>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a22      	ldr	r2, [pc, #136]	; (8002664 <HAL_MDF_MspInit+0x144>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d12e      	bne.n	800263c <HAL_MDF_MspInit+0x11c>
    __HAL_RCC_MDF1_CLK_ENABLE();
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_MDF_MspInit+0x128>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_MDF_MspInit+0x128>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_MDF_MspInit+0x128>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_MDF_MspInit+0x128>)
 80025fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_MDF_MspInit+0x128>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_MDF_MspInit+0x128>)
 800260e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO3_EX_Pin;
 800261a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 800262c:	2306      	movs	r3, #6
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIO3_EX_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <HAL_MDF_MspInit+0x148>)
 8002638:	f005 fa48 	bl	8007acc <HAL_GPIO_Init>
}
 800263c:	bf00      	nop
 800263e:	3730      	adds	r7, #48	; 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	46024080 	.word	0x46024080
 8002648:	46020c00 	.word	0x46020c00
 800264c:	42021000 	.word	0x42021000
 8002650:	40025080 	.word	0x40025080
 8002654:	40025100 	.word	0x40025100
 8002658:	40025180 	.word	0x40025180
 800265c:	40025200 	.word	0x40025200
 8002660:	40025280 	.word	0x40025280
 8002664:	40025300 	.word	0x40025300
 8002668:	42021400 	.word	0x42021400

0800266c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_CRC_MspInit+0x3c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10e      	bne.n	800269c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_CRC_MspInit+0x40>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_CRC_MspInit+0x40>)
 8002686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800268a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_CRC_MspInit+0x40>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40023000 	.word	0x40023000
 80026ac:	46020c00 	.word	0x46020c00

080026b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0bc      	sub	sp, #240	; 0xf0
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	22c8      	movs	r2, #200	; 0xc8
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f017 f8a6 	bl	8019822 <memset>
  if(hdac->Instance==DAC1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_DAC_MspInit+0xbc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d140      	bne.n	8002762 <HAL_DAC_MspInit+0xb2>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1;
 80026e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 80026ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4618      	mov	r0, r3
 80026fa:	f008 fe19 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_DAC_MspInit+0x58>
    {
      Error_Handler();
 8002704:	f7ff fea6 	bl	8002454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_DAC_MspInit+0xc0>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_DAC_MspInit+0xc0>)
 8002710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_DAC_MspInit+0xc0>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_DAC_MspInit+0xc0>)
 8002728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800272c:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_DAC_MspInit+0xc0>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_DAC_MspInit+0xc0>)
 8002738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002744:	2310      	movs	r3, #16
 8002746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800274a:	2303      	movs	r3, #3
 800274c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800275a:	4619      	mov	r1, r3
 800275c:	4805      	ldr	r0, [pc, #20]	; (8002774 <HAL_DAC_MspInit+0xc4>)
 800275e:	f005 f9b5 	bl	8007acc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	37f0      	adds	r7, #240	; 0xf0
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	46021800 	.word	0x46021800
 8002770:	46020c00 	.word	0x46020c00
 8002774:	42020000 	.word	0x42020000

08002778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0c2      	sub	sp, #264	; 0x108
 800277c:	af00      	add	r7, sp, #0
 800277e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002786:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800279c:	22c8      	movs	r2, #200	; 0xc8
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f017 f83e 	bl	8019822 <memset>
  if(hi2c->Instance==I2C1)
 80027a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80027aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a8a      	ldr	r2, [pc, #552]	; (80029dc <HAL_I2C_MspInit+0x264>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d147      	bne.n	8002848 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027b8:	f04f 0240 	mov.w	r2, #64	; 0x40
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ce:	4618      	mov	r0, r3
 80027d0:	f008 fdae 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80027da:	f7ff fe3b 	bl	8002454 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80027e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e4:	4a7e      	ldr	r2, [pc, #504]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027ee:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80027fc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002800:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002804:	2312      	movs	r3, #18
 8002806:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002816:	2304      	movs	r3, #4
 8002818:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002820:	4619      	mov	r1, r3
 8002822:	4870      	ldr	r0, [pc, #448]	; (80029e4 <HAL_I2C_MspInit+0x26c>)
 8002824:	f005 f952 	bl	8007acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002828:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 800282a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800282e:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002834:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002838:	4b69      	ldr	r3, [pc, #420]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 800283a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800283e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002846:	e0c3      	b.n	80029d0 <HAL_I2C_MspInit+0x258>
  else if(hi2c->Instance==I2C2)
 8002848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800284c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a64      	ldr	r2, [pc, #400]	; (80029e8 <HAL_I2C_MspInit+0x270>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d16a      	bne.n	8002930 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800285a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002870:	4618      	mov	r0, r3
 8002872:	f008 fd5d 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 800287c:	f7ff fdea 	bl	8002454 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002886:	4a56      	ldr	r2, [pc, #344]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002888:	f043 0320 	orr.w	r3, r3, #32
 800288c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80028a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a4:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80028a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028ae:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80028b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028bc:	2301      	movs	r3, #1
 80028be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c2:	2312      	movs	r3, #18
 80028c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028d4:	2304      	movs	r3, #4
 80028d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028da:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028de:	4619      	mov	r1, r3
 80028e0:	4842      	ldr	r0, [pc, #264]	; (80029ec <HAL_I2C_MspInit+0x274>)
 80028e2:	f005 f8f3 	bl	8007acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028e6:	2310      	movs	r3, #16
 80028e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ec:	2312      	movs	r3, #18
 80028ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028fe:	2304      	movs	r3, #4
 8002900:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002904:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002908:	4619      	mov	r1, r3
 800290a:	4839      	ldr	r0, [pc, #228]	; (80029f0 <HAL_I2C_MspInit+0x278>)
 800290c:	f005 f8de 	bl	8007acc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800291c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
}
 800292e:	e04f      	b.n	80029d0 <HAL_I2C_MspInit+0x258>
  else if(hi2c->Instance==I2C3)
 8002930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2d      	ldr	r2, [pc, #180]	; (80029f4 <HAL_I2C_MspInit+0x27c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d146      	bne.n	80029d0 <HAL_I2C_MspInit+0x258>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002958:	4618      	mov	r0, r3
 800295a:	f008 fce9 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_MspInit+0x1f0>
      Error_Handler();
 8002964:	f7ff fd76 	bl	8002454 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 800296a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296e:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 8002970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002974:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 800297a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002986:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800298a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298e:	2312      	movs	r3, #18
 8002990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029a0:	2304      	movs	r3, #4
 80029a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029a6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029aa:	4619      	mov	r1, r3
 80029ac:	4812      	ldr	r0, [pc, #72]	; (80029f8 <HAL_I2C_MspInit+0x280>)
 80029ae:	f005 f88d 	bl	8007acc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80029b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029b8:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80029ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029be:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_I2C_MspInit+0x268>)
 80029c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	bf00      	nop
 80029d2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40005400 	.word	0x40005400
 80029e0:	46020c00 	.word	0x46020c00
 80029e4:	42020400 	.word	0x42020400
 80029e8:	40005800 	.word	0x40005800
 80029ec:	42021400 	.word	0x42021400
 80029f0:	42021c00 	.word	0x42021c00
 80029f4:	46002800 	.word	0x46002800
 80029f8:	42021800 	.word	0x42021800

080029fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0b6      	sub	sp, #216	; 0xd8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	22c8      	movs	r2, #200	; 0xc8
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f016 ff08 	bl	8019822 <memset>
  if(hrtc->Instance==RTC)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_RTC_MspInit+0x80>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d12a      	bne.n	8002a72 <HAL_RTC_MspInit+0x76>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f008 fc7b 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002a40:	f7ff fd08 	bl	8002454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_RTC_MspInit+0x84>)
 8002a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_RTC_MspInit+0x84>)
 8002a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_RTC_MspInit+0x84>)
 8002a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a5a:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_RTC_MspInit+0x84>)
 8002a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a60:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RTC_MspInit+0x84>)
 8002a66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a72:	bf00      	nop
 8002a74:	37d8      	adds	r7, #216	; 0xd8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	46007800 	.word	0x46007800
 8002a80:	46020c00 	.word	0x46020c00

08002a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0c0      	sub	sp, #256	; 0x100
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	22c8      	movs	r2, #200	; 0xc8
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f016 febc 	bl	8019822 <memset>
  if(hspi->Instance==SPI1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <HAL_SPI_MspInit+0x1f8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d147      	bne.n	8002b44 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002ab4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002ac0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	4618      	mov	r0, r3
 8002ace:	f008 fc2f 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002ad8:	f7ff fcbc 	bl	8002454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002ade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ae2:	4a67      	ldr	r2, [pc, #412]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ae8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002aec:	4b64      	ldr	r3, [pc, #400]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002aee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002afa:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b00:	4a5f      	ldr	r2, [pc, #380]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8002b18:	231c      	movs	r3, #28
 8002b1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b30:	2305      	movs	r3, #5
 8002b32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b36:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4851      	ldr	r0, [pc, #324]	; (8002c84 <HAL_SPI_MspInit+0x200>)
 8002b3e:	f004 ffc5 	bl	8007acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b42:	e095      	b.n	8002c70 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_SPI_MspInit+0x204>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	f040 8090 	bne.w	8002c70 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b62:	f107 0320 	add.w	r3, r7, #32
 8002b66:	4618      	mov	r0, r3
 8002b68:	f008 fbe2 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8002b72:	f7ff fc6f 	bl	8002454 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b76:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002b78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b7c:	4a40      	ldr	r2, [pc, #256]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002b7e:	f043 0320 	orr.w	r3, r3, #32
 8002b82:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002b86:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002b88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b94:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b9a:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb8:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_SPI_MspInit+0x1fc>)
 8002be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c08:	2306      	movs	r3, #6
 8002c0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c0e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c12:	4619      	mov	r1, r3
 8002c14:	481b      	ldr	r0, [pc, #108]	; (8002c84 <HAL_SPI_MspInit+0x200>)
 8002c16:	f004 ff59 	bl	8007acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c34:	2306      	movs	r3, #6
 8002c36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4812      	ldr	r0, [pc, #72]	; (8002c8c <HAL_SPI_MspInit+0x208>)
 8002c42:	f004 ff43 	bl	8007acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c46:	2330      	movs	r3, #48	; 0x30
 8002c48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c5e:	2306      	movs	r3, #6
 8002c60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4809      	ldr	r0, [pc, #36]	; (8002c90 <HAL_SPI_MspInit+0x20c>)
 8002c6c:	f004 ff2e 	bl	8007acc <HAL_GPIO_Init>
}
 8002c70:	bf00      	nop
 8002c72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40013000 	.word	0x40013000
 8002c80:	46020c00 	.word	0x46020c00
 8002c84:	42021800 	.word	0x42021800
 8002c88:	46002000 	.word	0x46002000
 8002c8c:	42020000 	.word	0x42020000
 8002c90:	42020400 	.word	0x42020400

08002c94 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_SPI_MspDeInit+0x6c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_SPI_MspDeInit+0x70>)
 8002ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_SPI_MspDeInit+0x70>)
 8002cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2);
 8002cb6:	211c      	movs	r1, #28
 8002cb8:	4813      	ldr	r0, [pc, #76]	; (8002d08 <HAL_SPI_MspDeInit+0x74>)
 8002cba:	f005 f8df 	bl	8007e7c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002cbe:	e01a      	b.n	8002cf6 <HAL_SPI_MspDeInit+0x62>
  else if(hspi->Instance==SPI3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_SPI_MspDeInit+0x78>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d115      	bne.n	8002cf6 <HAL_SPI_MspDeInit+0x62>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_SPI_MspDeInit+0x70>)
 8002ccc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <HAL_SPI_MspDeInit+0x70>)
 8002cd2:	f023 0320 	bic.w	r3, r3, #32
 8002cd6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 8002cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cde:	480a      	ldr	r0, [pc, #40]	; (8002d08 <HAL_SPI_MspDeInit+0x74>)
 8002ce0:	f005 f8cc 	bl	8007e7c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8002ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce8:	4809      	ldr	r0, [pc, #36]	; (8002d10 <HAL_SPI_MspDeInit+0x7c>)
 8002cea:	f005 f8c7 	bl	8007e7c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4|GPIO_PIN_5);
 8002cee:	2130      	movs	r1, #48	; 0x30
 8002cf0:	4808      	ldr	r0, [pc, #32]	; (8002d14 <HAL_SPI_MspDeInit+0x80>)
 8002cf2:	f005 f8c3 	bl	8007e7c <HAL_GPIO_DeInit>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40013000 	.word	0x40013000
 8002d04:	46020c00 	.word	0x46020c00
 8002d08:	42021800 	.word	0x42021800
 8002d0c:	46002000 	.word	0x46002000
 8002d10:	42020000 	.word	0x42020000
 8002d14:	42020400 	.word	0x42020400

08002d18 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <HAL_TIM_IC_MspInit+0x88>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d12d      	bne.n	8002d96 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_TIM_IC_MspInit+0x8c>)
 8002d3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d40:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_TIM_IC_MspInit+0x8c>)
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_TIM_IC_MspInit+0x8c>)
 8002d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_TIM_IC_MspInit+0x8c>)
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d5e:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_TIM_IC_MspInit+0x8c>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_TIM_IC_MspInit+0x8c>)
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_PWM_Pin;
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d86:	2302      	movs	r3, #2
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4805      	ldr	r0, [pc, #20]	; (8002da8 <HAL_TIM_IC_MspInit+0x90>)
 8002d92:	f004 fe9b 	bl	8007acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40000400 	.word	0x40000400
 8002da4:	46020c00 	.word	0x46020c00
 8002da8:	42020800 	.word	0x42020800

08002dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0c0      	sub	sp, #256	; 0x100
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc4:	f107 0320 	add.w	r3, r7, #32
 8002dc8:	22c8      	movs	r2, #200	; 0xc8
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f016 fd28 	bl	8019822 <memset>
  if(huart->Instance==USART2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5e      	ldr	r2, [pc, #376]	; (8002f50 <HAL_UART_MspInit+0x1a4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d145      	bne.n	8002e68 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ddc:	f04f 0202 	mov.w	r2, #2
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002de8:	2300      	movs	r3, #0
 8002dea:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dec:	f107 0320 	add.w	r3, r7, #32
 8002df0:	4618      	mov	r0, r3
 8002df2:	f008 fa9d 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002dfc:	f7ff fb2a 	bl	8002454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e00:	4b54      	ldr	r3, [pc, #336]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e06:	4a53      	ldr	r2, [pc, #332]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e24:	4a4b      	ldr	r2, [pc, #300]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e2e:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8002e3c:	2370      	movs	r3, #112	; 0x70
 8002e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e54:	2307      	movs	r3, #7
 8002e56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e5e:	4619      	mov	r1, r3
 8002e60:	483d      	ldr	r0, [pc, #244]	; (8002f58 <HAL_UART_MspInit+0x1ac>)
 8002e62:	f004 fe33 	bl	8007acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e66:	e06e      	b.n	8002f46 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <HAL_UART_MspInit+0x1b0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d169      	bne.n	8002f46 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e72:	f04f 0204 	mov.w	r2, #4
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e82:	f107 0320 	add.w	r3, r7, #32
 8002e86:	4618      	mov	r0, r3
 8002e88:	f008 fa52 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_MspInit+0xea>
      Error_Handler();
 8002e92:	f7ff fadf 	bl	8002454 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e9c:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002e9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eba:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed8:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002eda:	f043 0308 	orr.w	r3, r3, #8
 8002ede:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <HAL_UART_MspInit+0x1a8>)
 8002ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f08:	2307      	movs	r3, #7
 8002f0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f12:	4619      	mov	r1, r3
 8002f14:	4812      	ldr	r0, [pc, #72]	; (8002f60 <HAL_UART_MspInit+0x1b4>)
 8002f16:	f004 fdd9 	bl	8007acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002f1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f34:	2307      	movs	r3, #7
 8002f36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f3a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <HAL_UART_MspInit+0x1ac>)
 8002f42:	f004 fdc3 	bl	8007acc <HAL_GPIO_Init>
}
 8002f46:	bf00      	nop
 8002f48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40004400 	.word	0x40004400
 8002f54:	46020c00 	.word	0x46020c00
 8002f58:	42020c00 	.word	0x42020c00
 8002f5c:	40004800 	.word	0x40004800
 8002f60:	42020000 	.word	0x42020000

08002f64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b0be      	sub	sp, #248	; 0xf8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f7c:	f107 0318 	add.w	r3, r7, #24
 8002f80:	22c8      	movs	r2, #200	; 0xc8
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f016 fc4c 	bl	8019822 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3c      	ldr	r2, [pc, #240]	; (8003080 <HAL_PCD_MspInit+0x11c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d171      	bne.n	8003078 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002f94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f008 f9c0 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8002fb6:	f7ff fa4d 	bl	8002454 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8002fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc0:	4a30      	ldr	r2, [pc, #192]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002fd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4822      	ldr	r0, [pc, #136]	; (8003088 <HAL_PCD_MspInit+0x124>)
 8003000:	f004 fd64 	bl	8007acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8003006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_PCD_MspInit+0x120>)
 800300c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003010:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8003016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800301a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8003024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d119      	bne.n	8003064 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800304e:	f006 fe93 	bl	8009d78 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_PCD_MspInit+0x120>)
 8003054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_PCD_MspInit+0x120>)
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003062:	e001      	b.n	8003068 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8003064:	f006 fe88 	bl	8009d78 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003068:	2200      	movs	r2, #0
 800306a:	2100      	movs	r1, #0
 800306c:	2049      	movs	r0, #73	; 0x49
 800306e:	f004 f9ea 	bl	8007446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003072:	2049      	movs	r0, #73	; 0x49
 8003074:	f004 fa01 	bl	800747a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003078:	bf00      	nop
 800307a:	37f8      	adds	r7, #248	; 0xf8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	42040000 	.word	0x42040000
 8003084:	46020c00 	.word	0x46020c00
 8003088:	42020000 	.word	0x42020000

0800308c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0bc      	sub	sp, #240	; 0xf0
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	22c8      	movs	r2, #200	; 0xc8
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f016 fbc0 	bl	8019822 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <HAL_SAI_MspInit+0x134>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d13f      	bne.n	800312c <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80030ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 80030b8:	2340      	movs	r3, #64	; 0x40
 80030ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030be:	f107 0310 	add.w	r3, r7, #16
 80030c2:	4618      	mov	r0, r3
 80030c4:	f008 f934 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_SAI_MspInit+0x46>
    {
      Error_Handler();
 80030ce:	f7ff f9c1 	bl	8002454 <Error_Handler>
    }

    if (SAI1_client == 0)
 80030d2:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <HAL_SAI_MspInit+0x138>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10e      	bne.n	80030f8 <HAL_SAI_MspInit+0x6c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_SAI_MspInit+0x13c>)
 80030dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030e0:	4a39      	ldr	r2, [pc, #228]	; (80031c8 <HAL_SAI_MspInit+0x13c>)
 80030e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030e6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80030ea:	4b37      	ldr	r3, [pc, #220]	; (80031c8 <HAL_SAI_MspInit+0x13c>)
 80030ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_SAI_MspInit+0x138>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <HAL_SAI_MspInit+0x138>)
 8003100:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003102:	2374      	movs	r3, #116	; 0x74
 8003104:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800311a:	230d      	movs	r3, #13
 800311c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003120:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003124:	4619      	mov	r1, r3
 8003126:	4829      	ldr	r0, [pc, #164]	; (80031cc <HAL_SAI_MspInit+0x140>)
 8003128:	f004 fcd0 	bl	8007acc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <HAL_SAI_MspInit+0x144>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d13f      	bne.n	80031b6 <HAL_SAI_MspInit+0x12a>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8003136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 8003142:	2340      	movs	r3, #64	; 0x40
 8003144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4618      	mov	r0, r3
 800314e:	f008 f8ef 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 8003158:	f7ff f97c 	bl	8002454 <Error_Handler>
    }

      if (SAI1_client == 0)
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_SAI_MspInit+0x138>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10e      	bne.n	8003182 <HAL_SAI_MspInit+0xf6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_SAI_MspInit+0x13c>)
 8003166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_SAI_MspInit+0x13c>)
 800316c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003170:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <HAL_SAI_MspInit+0x13c>)
 8003176:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800317a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_SAI_MspInit+0x138>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_SAI_MspInit+0x138>)
 800318a:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800318c:	2308      	movs	r3, #8
 800318e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80031a4:	230d      	movs	r3, #13
 80031a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031ae:	4619      	mov	r1, r3
 80031b0:	4806      	ldr	r0, [pc, #24]	; (80031cc <HAL_SAI_MspInit+0x140>)
 80031b2:	f004 fc8b 	bl	8007acc <HAL_GPIO_Init>

    }
}
 80031b6:	bf00      	nop
 80031b8:	37f0      	adds	r7, #240	; 0xf0
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40015404 	.word	0x40015404
 80031c4:	200027b8 	.word	0x200027b8
 80031c8:	46020c00 	.word	0x46020c00
 80031cc:	42021000 	.word	0x42021000
 80031d0:	40015424 	.word	0x40015424

080031d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <NMI_Handler+0x4>

080031da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031de:	e7fe      	b.n	80031de <HardFault_Handler+0x4>

080031e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <MemManage_Handler+0x4>

080031e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <BusFault_Handler+0x4>

080031ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <UsageFault_Handler+0x4>

080031f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003220:	f003 fc1c 	bl	8006a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 800322c:	2001      	movs	r0, #1
 800322e:	f004 ff1b 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}

08003236 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 800323a:	2002      	movs	r0, #2
 800323c:	f004 ff14 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}

08003244 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 8003248:	2004      	movs	r0, #4
 800324a:	f004 ff0d 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}

08003252 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8003256:	2008      	movs	r0, #8
 8003258:	f004 ff06 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8003264:	2010      	movs	r0, #16
 8003266:	f004 feff 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}

0800326e <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8003272:	2020      	movs	r0, #32
 8003274:	f004 fef8 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}

0800327c <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8003280:	2040      	movs	r0, #64	; 0x40
 8003282:	f004 fef1 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}

0800328a <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 800328e:	2080      	movs	r0, #128	; 0x80
 8003290:	f004 feea 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}

08003298 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 800329c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032a0:	f004 fee2 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */
  count++;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <EXTI8_IRQHandler+0x1c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a02      	ldr	r2, [pc, #8]	; (80032b4 <EXTI8_IRQHandler+0x1c>)
 80032ac:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI8_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200027bc 	.word	0x200027bc

080032b8 <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 80032bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032c0:	f004 fed2 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 80032cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80032d0:	f004 feca 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 80032dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032e0:	f004 fec2 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 80032ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032f0:	f004 feba 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80032fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003300:	f004 feb2 	bl	8008068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}

08003308 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <SPI2_IRQHandler+0x10>)
 800330e:	f00b ffb9 	bl	800f284 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200027c8 	.word	0x200027c8

0800331c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <OTG_FS_IRQHandler+0x10>)
 8003322:	f005 fb18 	bl	8008956 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200022ac 	.word	0x200022ac

08003330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return 1;
 8003334:	2301      	movs	r3, #1
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_kill>:

int _kill(int pid, int sig)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800334a:	f016 fa23 	bl	8019794 <__errno>
 800334e:	4603      	mov	r3, r0
 8003350:	2216      	movs	r2, #22
 8003352:	601a      	str	r2, [r3, #0]
  return -1;
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <_exit>:

void _exit (int status)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ffe7 	bl	8003340 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003372:	e7fe      	b.n	8003372 <_exit+0x12>

08003374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e00a      	b.n	800339c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003386:	e000      	b.n	800338a <_read+0x16>
 8003388:	bf00      	nop
 800338a:	4601      	mov	r1, r0
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	60ba      	str	r2, [r7, #8]
 8003392:	b2ca      	uxtb	r2, r1
 8003394:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3301      	adds	r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dbf0      	blt.n	8003386 <_read+0x12>
  }

  return len;
 80033a4:	687b      	ldr	r3, [r7, #4]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e009      	b.n	80033d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	60ba      	str	r2, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	e000      	b.n	80033ce <_write+0x20>
 80033cc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	dbf1      	blt.n	80033c0 <_write+0x12>
  }
  return len;
 80033dc:	687b      	ldr	r3, [r7, #4]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <_close>:

int _close(int file)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800340e:	605a      	str	r2, [r3, #4]
  return 0;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_isatty>:

int _isatty(int file)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003426:	2301      	movs	r3, #1
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <_sbrk+0x5c>)
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <_sbrk+0x60>)
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <_sbrk+0x64>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <_sbrk+0x68>)
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	429a      	cmp	r2, r3
 800347e:	d207      	bcs.n	8003490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003480:	f016 f988 	bl	8019794 <__errno>
 8003484:	4603      	mov	r3, r0
 8003486:	220c      	movs	r2, #12
 8003488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	e009      	b.n	80034a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <_sbrk+0x64>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <_sbrk+0x64>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <_sbrk+0x64>)
 80034a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	200c0000 	.word	0x200c0000
 80034b0:	00000400 	.word	0x00000400
 80034b4:	200027c0 	.word	0x200027c0
 80034b8:	20004068 	.word	0x20004068

080034bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034c0:	4b18      	ldr	r3, [pc, #96]	; (8003524 <SystemInit+0x68>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	4a17      	ldr	r2, [pc, #92]	; (8003524 <SystemInit+0x68>)
 80034c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <SystemInit+0x6c>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <SystemInit+0x6c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <SystemInit+0x6c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <SystemInit+0x6c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <SystemInit+0x6c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <SystemInit+0x6c>)
 80034ee:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80034f2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80034f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <SystemInit+0x6c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <SystemInit+0x6c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a09      	ldr	r2, [pc, #36]	; (8003528 <SystemInit+0x6c>)
 8003504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <SystemInit+0x6c>)
 800350c:	2200      	movs	r2, #0
 800350e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <SystemInit+0x68>)
 8003512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003516:	609a      	str	r2, [r3, #8]
  #endif
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00
 8003528:	46020c00 	.word	0x46020c00

0800352c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800352c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003564 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003530:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003532:	e003      	b.n	800353c <LoopCopyDataInit>

08003534 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003536:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003538:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800353a:	3104      	adds	r1, #4

0800353c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800353c:	480b      	ldr	r0, [pc, #44]	; (800356c <LoopForever+0xa>)
	ldr	r3, =_edata
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003540:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003542:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003544:	d3f6      	bcc.n	8003534 <CopyDataInit>
	ldr	r2, =_sbss
 8003546:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003548:	e002      	b.n	8003550 <LoopFillZerobss>

0800354a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800354a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800354c:	f842 3b04 	str.w	r3, [r2], #4

08003550 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <LoopForever+0x16>)
	cmp	r2, r3
 8003552:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003554:	d3f9      	bcc.n	800354a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003556:	f7ff ffb1 	bl	80034bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800355a:	f016 f921 	bl	80197a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800355e:	f7fd fea9 	bl	80012b4 <main>

08003562 <LoopForever>:

LoopForever:
    b LoopForever
 8003562:	e7fe      	b.n	8003562 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003564:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8003568:	08073d04 	.word	0x08073d04
	ldr	r0, =_sdata
 800356c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003570:	20000ad0 	.word	0x20000ad0
	ldr	r2, =_sbss
 8003574:	20000ae0 	.word	0x20000ae0
	ldr	r3, = _ebss
 8003578:	20004067 	.word	0x20004067

0800357c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800357c:	e7fe      	b.n	800357c <ADC1_IRQHandler>
	...

08003580 <pre_processing_init>:
#include "arm_math.h"
#include "params.h"
#include "pre_processing_app.h"
#include <stdlib.h>

void pre_processing_init(pre_processing_data_t* pre_processing_data) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	6078      	str	r0, [r7, #4]
    // Axis selection.
    pre_processing_data->axis_selection_axis = AXIS_SELECTION_AXIS;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]

    // Signal normalization.
    pre_processing_data->signal_normalization_peak_to_peak = SIGNAL_NORMALIZATION_PEAK_TO_PEAK;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003594:	605a      	str	r2, [r3, #4]
    pre_processing_data->signal_normalization_offset = SIGNAL_NORMALIZATION_OFFSET;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	609a      	str	r2, [r3, #8]

    // MFCC.
    arm_status mfcc_status;
    arm_rfft_fast_init_f32(&((*pre_processing_data).mfcc_handler), INPUT_BUFFER_SIZE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3310      	adds	r3, #16
 80035a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035a6:	4618      	mov	r0, r3
 80035a8:	f012 f870 	bl	801568c <arm_rfft_fast_init_f32>
    mfcc_status = arm_dct4_init_f32(&((*pre_processing_data).mfcc_dct4f32), &((*pre_processing_data).mfcc_rfftf32), &((*pre_processing_data).mfcc_cfftradix4f32), MFCC_TRIANGULAR_FILTERS_BANK_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_SIZE / 2.0, 0.125);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80035be:	2340      	movs	r3, #64	; 0x40
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	f012 fd04 	bl	8015fd4 <arm_dct4_init_f32>
 80035cc:	4603      	mov	r3, r0
 80035ce:	73fb      	strb	r3, [r7, #15]
    if (mfcc_status != ARM_MATH_SUCCESS) {
 80035d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <pre_processing_init+0x5c>
        sys_error_handler();
 80035d8:	f000 fde2 	bl	80041a0 <sys_error_handler>
    }
    pre_processing_data->mfcc_triangular_filters_scale = MFCC_TRIANGULAR_FILTERS_SCALE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    pre_processing_data->mfcc_signal_windowing = MFCC_SIGNAL_WINDOWING;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    triangular_filters_init(INPUT_BUFFER_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_FRACTION, ISM330DHCX_ACC_ODR, pre_processing_data->mfcc_triangular_filters_scale, (*pre_processing_data).mfcc_bin);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3370      	adds	r3, #112	; 0x70
 80035f6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003638 <pre_processing_init+0xb8>
 80035fa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800363c <pre_processing_init+0xbc>
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003604:	f000 fa76 	bl	8003af4 <triangular_filters_init>
    (*pre_processing_data).mfcc_multipliers = (float32_t*) SysAlloc(INPUT_BUFFER_SIZE * sizeof(float32_t));
 8003608:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800360c:	f000 fdcb 	bl	80041a6 <SysAlloc>
 8003610:	4602      	mov	r2, r0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    multipliers_init((*pre_processing_data).mfcc_multipliers, INPUT_BUFFER_SIZE, (*pre_processing_data).mfcc_signal_windowing);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 0278 	ldr.w	r0, [r3, #632]	; 0x278
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003624:	461a      	mov	r2, r3
 8003626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800362a:	f000 faf3 	bl	8003c14 <multipliers_init>
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	44d04000 	.word	0x44d04000
 800363c:	3ee66666 	.word	0x3ee66666

08003640 <pre_processing_process>:

void pre_processing_process(tridimensional_data_t* data_in, uint32_t data_in_size, float32_t* data_out, uint32_t data_out_size, pre_processing_data_t* pre_processing_data) {
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	b097      	sub	sp, #92	; 0x5c
 8003646:	af06      	add	r7, sp, #24
 8003648:	6278      	str	r0, [r7, #36]	; 0x24
 800364a:	6239      	str	r1, [r7, #32]
 800364c:	61fa      	str	r2, [r7, #28]
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	466b      	mov	r3, sp
 8003652:	461e      	mov	r6, r3
    // Axis selection.
    float32_t data_0[data_in_size];
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	460b      	mov	r3, r1
 8003658:	3b01      	subs	r3, #1
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
 800365c:	2300      	movs	r3, #0
 800365e:	460c      	mov	r4, r1
 8003660:	461d      	mov	r5, r3
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	016b      	lsls	r3, r5, #5
 800366c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003670:	0162      	lsls	r2, r4, #5
 8003672:	2300      	movs	r3, #0
 8003674:	4688      	mov	r8, r1
 8003676:	4699      	mov	r9, r3
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003684:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003688:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800368c:	008b      	lsls	r3, r1, #2
 800368e:	3307      	adds	r3, #7
 8003690:	08db      	lsrs	r3, r3, #3
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	ebad 0d03 	sub.w	sp, sp, r3
 8003698:	ab06      	add	r3, sp, #24
 800369a:	3303      	adds	r3, #3
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    axis_selection(data_in, data_in_size, data_0, data_in_size, pre_processing_data->axis_selection_axis);
 80036a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036b0:	f000 f93c 	bl	800392c <axis_selection>

    // Signal normalization.
    float32_t data_1[data_in_size];
 80036b4:	6a39      	ldr	r1, [r7, #32]
 80036b6:	460b      	mov	r3, r1
 80036b8:	3b01      	subs	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
 80036bc:	2300      	movs	r3, #0
 80036be:	6139      	str	r1, [r7, #16]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80036ce:	4628      	mov	r0, r5
 80036d0:	0143      	lsls	r3, r0, #5
 80036d2:	4620      	mov	r0, r4
 80036d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036d8:	4620      	mov	r0, r4
 80036da:	0142      	lsls	r2, r0, #5
 80036dc:	2300      	movs	r3, #0
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ee:	4628      	mov	r0, r5
 80036f0:	0143      	lsls	r3, r0, #5
 80036f2:	4620      	mov	r0, r4
 80036f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036f8:	4620      	mov	r0, r4
 80036fa:	0142      	lsls	r2, r0, #5
 80036fc:	008b      	lsls	r3, r1, #2
 80036fe:	3307      	adds	r3, #7
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	ebad 0d03 	sub.w	sp, sp, r3
 8003708:	ab06      	add	r3, sp, #24
 800370a:	3303      	adds	r3, #3
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
    signal_normalization(data_0, data_in_size, data_1, data_in_size, pre_processing_data->signal_normalization_peak_to_peak, pre_processing_data->signal_normalization_offset);
 8003712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003714:	edd3 7a01 	vldr	s15, [r3, #4]
 8003718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371a:	ed93 7a02 	vldr	s14, [r3, #8]
 800371e:	eef0 0a47 	vmov.f32	s1, s14
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	6a39      	ldr	r1, [r7, #32]
 800372c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800372e:	f000 f960 	bl	80039f2 <signal_normalization>

    // Mean removal.
    float32_t data_2[data_in_size];
 8003732:	6a39      	ldr	r1, [r7, #32]
 8003734:	460b      	mov	r3, r1
 8003736:	3b01      	subs	r3, #1
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373a:	2300      	movs	r3, #0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 4500 	ldrd	r4, r5, [r7]
 800374c:	4628      	mov	r0, r5
 800374e:	0143      	lsls	r3, r0, #5
 8003750:	4620      	mov	r0, r4
 8003752:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003756:	4620      	mov	r0, r4
 8003758:	0142      	lsls	r2, r0, #5
 800375a:	2300      	movs	r3, #0
 800375c:	468a      	mov	sl, r1
 800375e:	469b      	mov	fp, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800376c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003770:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003774:	008b      	lsls	r3, r1, #2
 8003776:	3307      	adds	r3, #7
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	ebad 0d03 	sub.w	sp, sp, r3
 8003780:	ab06      	add	r3, sp, #24
 8003782:	3303      	adds	r3, #3
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
    mean_removal(data_1, data_in_size, data_2, data_in_size);
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378e:	6a39      	ldr	r1, [r7, #32]
 8003790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003792:	f000 f981 	bl	8003a98 <mean_removal>

    // MFCC.
    mfcc(data_2, data_in_size, data_out, data_out_size, ((*pre_processing_data).mfcc_bin), &((*pre_processing_data).mfcc_dct4f32), &((*pre_processing_data).mfcc_handler), (*pre_processing_data).mfcc_signal_windowing, (*pre_processing_data).mfcc_multipliers);
 8003796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003798:	3370      	adds	r3, #112	; 0x70
 800379a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800379c:	3228      	adds	r2, #40	; 0x28
 800379e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037a0:	3110      	adds	r1, #16
 80037a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80037a4:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
 80037a8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80037aa:	f8d4 4278 	ldr.w	r4, [r4, #632]	; 0x278
 80037ae:	9404      	str	r4, [sp, #16]
 80037b0:	9003      	str	r0, [sp, #12]
 80037b2:	9102      	str	r1, [sp, #8]
 80037b4:	9201      	str	r2, [sp, #4]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	6a39      	ldr	r1, [r7, #32]
 80037be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037c0:	f000 fc22 	bl	8004008 <mfcc>
 80037c4:	46b5      	mov	sp, r6
}
 80037c6:	bf00      	nop
 80037c8:	3744      	adds	r7, #68	; 0x44
 80037ca:	46bd      	mov	sp, r7
 80037cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080037d0 <complex_abs>:
/*----------------------------------------------------------------------------*/
/* Support functions          			      						          */
/*----------------------------------------------------------------------------*/

// calculation of the complex absolute value
float complex_abs(float real, float compl) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80037da:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 80037de:	edd7 7a01 	vldr	s15, [r7, #4]
 80037e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80037e6:	edd7 7a00 	vldr	s15, [r7]
 80037ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f2:	eeb0 0a67 	vmov.f32	s0, s15
 80037f6:	f01a fd43 	bl	801e280 <sqrtf>
 80037fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80037fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <dot_product>:

// Dot product calculation using CMSIS DSP library
float32_t dot_product(float32_t* in_1, uint32_t data_in1_size, float32_t* in_2, uint32_t data_in2_size) {
 8003808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800380c:	b089      	sub	sp, #36	; 0x24
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	466b      	mov	r3, sp
 800381a:	461e      	mov	r6, r3

	float32_t multOutput[data_in1_size];
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	460b      	mov	r3, r1
 8003820:	3b01      	subs	r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	2300      	movs	r3, #0
 8003826:	4688      	mov	r8, r1
 8003828:	4699      	mov	r9, r3
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003836:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800383a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800383e:	2300      	movs	r3, #0
 8003840:	460c      	mov	r4, r1
 8003842:	461d      	mov	r5, r3
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	016b      	lsls	r3, r5, #5
 800384e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003852:	0162      	lsls	r2, r4, #5
 8003854:	008b      	lsls	r3, r1, #2
 8003856:	3307      	adds	r3, #7
 8003858:	08db      	lsrs	r3, r3, #3
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	ebad 0d03 	sub.w	sp, sp, r3
 8003860:	466b      	mov	r3, sp
 8003862:	3303      	adds	r3, #3
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	617b      	str	r3, [r7, #20]
	float32_t dot_out=0;
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
	arm_mult_f32(in_1, in_2, multOutput, data_in1_size);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f012 fe60 	bl	801653c <arm_mult_f32>
	for (int i=0;  i<data_in1_size;   i++){
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	e00d      	b.n	800389e <dot_product+0x96>
		arm_add_f32(&dot_out, &multOutput[i], &dot_out, 1);
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	18d1      	adds	r1, r2, r3
 800388a:	f107 0210 	add.w	r2, r7, #16
 800388e:	f107 0010 	add.w	r0, r7, #16
 8003892:	2301      	movs	r3, #1
 8003894:	f012 feac 	bl	80165f0 <arm_add_f32>
	for (int i=0;  i<data_in1_size;   i++){
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d8ed      	bhi.n	8003882 <dot_product+0x7a>
	}
	return dot_out;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	46b5      	mov	sp, r6
 80038aa:	ee07 3a90 	vmov	s15, r3
}
 80038ae:	eeb0 0a67 	vmov.f32	s0, s15
 80038b2:	3724      	adds	r7, #36	; 0x24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038ba:	0000      	movs	r0, r0
 80038bc:	0000      	movs	r0, r0
	...

080038c0 <hz_to_mel>:

// conversion between Hz and Mel
float hz_to_mel(float f_Hz_in) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	ed87 0a01 	vstr	s0, [r7, #4]
	return 2595*log10(1+f_Hz_in/700);
 80038ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80038ce:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003928 <hz_to_mel+0x68>
 80038d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038de:	ee17 0a90 	vmov	r0, s15
 80038e2:	f7fc fe35 	bl	8000550 <__aeabi_f2d>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	ec43 2b10 	vmov	d0, r2, r3
 80038ee:	f01a fc53 	bl	801e198 <log10>
 80038f2:	ec51 0b10 	vmov	r0, r1, d0
 80038f6:	a30a      	add	r3, pc, #40	; (adr r3, 8003920 <hz_to_mel+0x60>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc fe80 	bl	8000600 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	f7fd f972 	bl	8000bf0 <__aeabi_d2f>
 800390c:	4603      	mov	r3, r0
 800390e:	ee07 3a90 	vmov	s15, r3
}
 8003912:	eeb0 0a67 	vmov.f32	s0, s15
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	f3af 8000 	nop.w
 8003920:	00000000 	.word	0x00000000
 8003924:	40a44600 	.word	0x40a44600
 8003928:	442f0000 	.word	0x442f0000

0800392c <axis_selection>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Axis selection        						      */
/*----------------------------------------------------------------------------*/

void axis_selection(tridimensional_data_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, axis_t axis) {
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
	if (axis == X)
 800393a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <axis_selection+0x48>
	{
		for (int i=0; i<data_out_size ; i++){
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e010      	b.n	800396a <axis_selection+0x3e>
	    	data_out[i]=data_in[i].x;
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	441a      	add	r2, r3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	440b      	add	r3, r1
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d8ea      	bhi.n	8003948 <axis_selection+0x1c>
	{
		for (int i=0; i<data_out_size ; i++){
	    	data_out[i]=data_in[i].z;
	    }
	}
}
 8003972:	e038      	b.n	80039e6 <axis_selection+0xba>
	else if (axis == Y)
 8003974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003978:	2b01      	cmp	r3, #1
 800397a:	d118      	bne.n	80039ae <axis_selection+0x82>
		for (int i=0; i<data_out_size ; i++){
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e010      	b.n	80039a4 <axis_selection+0x78>
	    	data_out[i]=data_in[i].y;
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	441a      	add	r2, r3
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	440b      	add	r3, r1
 800399a:	6852      	ldr	r2, [r2, #4]
 800399c:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d8ea      	bhi.n	8003982 <axis_selection+0x56>
}
 80039ac:	e01b      	b.n	80039e6 <axis_selection+0xba>
	else if (axis == Z)
 80039ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d117      	bne.n	80039e6 <axis_selection+0xba>
		for (int i=0; i<data_out_size ; i++){
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e010      	b.n	80039de <axis_selection+0xb2>
	    	data_out[i]=data_in[i].z;
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	441a      	add	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	440b      	add	r3, r1
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d8ea      	bhi.n	80039bc <axis_selection+0x90>
}
 80039e6:	bf00      	nop
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <signal_normalization>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Signal normalization between -1 and 1             */
/*----------------------------------------------------------------------------*/

void signal_normalization(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, float32_t peak_to_peak, float32_t offset) {
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b08c      	sub	sp, #48	; 0x30
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6178      	str	r0, [r7, #20]
 80039fa:	6139      	str	r1, [r7, #16]
 80039fc:	60fa      	str	r2, [r7, #12]
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a04:	edc7 0a00 	vstr	s1, [r7]

	float32_t max, min;
	uint32_t maxpos, minpos;

	arm_max_f32(data_in,data_in_size,&max,&maxpos);
 8003a08:	f107 0320 	add.w	r3, r7, #32
 8003a0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a10:	6939      	ldr	r1, [r7, #16]
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f011 fd06 	bl	8015424 <arm_max_f32>
	arm_min_f32(data_in,data_in_size,&min,&minpos);
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f011 fc56 	bl	80152d4 <arm_min_f32>

	for(int i=0; i<data_out_size ; i++){
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2c:	e02a      	b.n	8003a84 <signal_normalization+0x92>
		data_out[i] = ((data_in[i] - min)/(max - min))*peak_to_peak - ((peak_to_peak / 2) + offset);
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4413      	add	r3, r2
 8003a36:	ed93 7a00 	vldr	s14, [r3]
 8003a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003a42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a5e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003a62:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003a66:	edd7 7a00 	vldr	s15, [r7]
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<data_out_size ; i++){
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	3301      	adds	r3, #1
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d8d0      	bhi.n	8003a2e <signal_normalization+0x3c>
	}
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3730      	adds	r7, #48	; 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <mean_removal>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Remove mean from signal     			          */
/*----------------------------------------------------------------------------*/

void mean_removal (float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]

	static float32_t mean;

	// calculation of the signal mean value
	arm_mean_f32(data_in, data_in_size, &mean);
 8003aa6:	4a12      	ldr	r2, [pc, #72]	; (8003af0 <mean_removal+0x58>)
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f011 fc7a 	bl	80153a4 <arm_mean_f32>

	// subtract the mean value from the signal in order to remove gravity effect on the accelerometric data
	for (int i=0 ; i < data_out_size ; i++){
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	e013      	b.n	8003ade <mean_removal+0x46>
		data_out[i] = data_in[i] - mean;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	ed93 7a00 	vldr	s14, [r3]
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <mean_removal+0x58>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ad4:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0 ; i < data_out_size ; i++){
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3301      	adds	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d8e7      	bhi.n	8003ab6 <mean_removal+0x1e>
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	200027c4 	.word	0x200027c4

08003af4 <triangular_filters_init>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Calculation of the triangular filters bank        */
/*----------------------------------------------------------------------------*/

void triangular_filters_init(uint32_t number_of_samples, uint32_t triangular_filters_bank_size, float32_t triangular_filters_bank_fraction, float32_t odr, triangular_filters_scale_t triangular_filters_scale, uint32_t* bin) {
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b08f      	sub	sp, #60	; 0x3c
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6178      	str	r0, [r7, #20]
 8003afc:	6139      	str	r1, [r7, #16]
 8003afe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b02:	edc7 0a02 	vstr	s1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71fb      	strb	r3, [r7, #7]

	float32_t low_freq;
	float32_t high_freq;
	float32_t* Hz_points = (float32_t*) SysAlloc((triangular_filters_bank_size + 2) * sizeof(float32_t));
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	3302      	adds	r3, #2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fb47 	bl	80041a6 <SysAlloc>
 8003b18:	62b8      	str	r0, [r7, #40]	; 0x28
	float32_t d_hz_points;
	float32_t bin_sep;
	float32_t f_max;
	float32_t f_min = 0.0;
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24

	f_max = odr * triangular_filters_bank_fraction;
 8003b20:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	edc7 7a08 	vstr	s15, [r7, #32]

	if (triangular_filters_scale == TRIANGULAR_FILTERS_SCALE_MEL) {
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10c      	bne.n	8003b50 <triangular_filters_init+0x5c>
	    low_freq = hz_to_mel(f_min);
 8003b36:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003b3a:	f7ff fec1 	bl	80038c0 <hz_to_mel>
 8003b3e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	    high_freq = hz_to_mel(f_max);
 8003b42:	ed97 0a08 	vldr	s0, [r7, #32]
 8003b46:	f7ff febb 	bl	80038c0 <hz_to_mel>
 8003b4a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 8003b4e:	e003      	b.n	8003b58 <triangular_filters_init+0x64>
	} else {
        low_freq = f_min;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
	    high_freq = f_max;
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
	}

	d_hz_points = (high_freq - low_freq) / (float32_t) (triangular_filters_bank_size + 2);
 8003b58:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003b5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	3302      	adds	r3, #2
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b74:	edc7 7a07 	vstr	s15, [r7, #28]

	bin_sep = odr / (float32_t) number_of_samples;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b82:	edd7 6a02 	vldr	s13, [r7, #8]
 8003b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8a:	edc7 7a06 	vstr	s15, [r7, #24]

	for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b92:	e033      	b.n	8003bfc <triangular_filters_init+0x108>
		Hz_points[i] = (float32_t) (low_freq + i * d_hz_points);
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bac:	4413      	add	r3, r2
 8003bae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb6:	edc3 7a00 	vstr	s15, [r3]
		bin[i] = round((Hz_points[i] / bin_sep));
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc0:	4413      	add	r3, r2
 8003bc2:	ed93 7a00 	vldr	s14, [r3]
 8003bc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bce:	ee16 0a90 	vmov	r0, s13
 8003bd2:	f7fc fcbd 	bl	8000550 <__aeabi_f2d>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	ec43 2b10 	vmov	d0, r2, r3
 8003bde:	f01a fa95 	bl	801e10c <round>
 8003be2:	ec51 0b10 	vmov	r0, r1, d0
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	18d4      	adds	r4, r2, r3
 8003bee:	f7fc ffdf 	bl	8000bb0 <__aeabi_d2uiz>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d8c6      	bhi.n	8003b94 <triangular_filters_init+0xa0>
	}

	SysFree(Hz_points);
 8003c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c08:	f000 fadc 	bl	80041c4 <SysFree>
}
 8003c0c:	bf00      	nop
 8003c0e:	373c      	adds	r7, #60	; 0x3c
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd90      	pop	{r4, r7, pc}

08003c14 <multipliers_init>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Initializing the multipliers array                */
/*----------------------------------------------------------------------------*/

void multipliers_init(float32_t* multipliers, uint32_t data_size, signal_windowing_t signal_windowing) {
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	71fb      	strb	r3, [r7, #7]
	switch (signal_windowing) {
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d13a      	bne.n	8003c9e <multipliers_init+0x8a>
		case HANNING:
		{
			for (int i = 0; i < data_size; i++) {
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e032      	b.n	8003c94 <multipliers_init+0x80>
				multipliers[i] = 0.5 * (1 - arm_cos_f32((float32_t) 2*PI*i/(data_size-1)));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c38:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003ca8 <multipliers_init+0x94>
 8003c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c50:	eeb0 0a66 	vmov.f32	s0, s13
 8003c54:	f012 fbe4 	bl	8016420 <arm_cos_f32>
 8003c58:	eef0 7a40 	vmov.f32	s15, s0
 8003c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c64:	ee17 0a90 	vmov	r0, s15
 8003c68:	f7fc fc72 	bl	8000550 <__aeabi_f2d>
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <multipliers_init+0x98>)
 8003c72:	f7fc fcc5 	bl	8000600 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	18d4      	adds	r4, r2, r3
 8003c86:	f7fc ffb3 	bl	8000bf0 <__aeabi_d2f>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	6023      	str	r3, [r4, #0]
			for (int i = 0; i < data_size; i++) {
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d8c8      	bhi.n	8003c2e <multipliers_init+0x1a>
			}
			break;
 8003c9c:	e000      	b.n	8003ca0 <multipliers_init+0x8c>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8003c9e:	bf00      	nop
		}
	}
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd90      	pop	{r4, r7, pc}
 8003ca8:	40c90fdb 	.word	0x40c90fdb
 8003cac:	3fe00000 	.word	0x3fe00000

08003cb0 <hanning>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Multiply the Hanning window to the input signal   */
/*----------------------------------------------------------------------------*/

void hanning(float32_t* data_in, uint32_t data_in_size, float32_t* data_out, uint32_t data_out_size, float32_t* multipliers) {
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < data_in_size; i++) {
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e016      	b.n	8003cf2 <hanning+0x42>
		data_out[i] = multipliers[i] * data_in[i];
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	4413      	add	r3, r2
 8003ccc:	ed93 7a00 	vldr	s14, [r3]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	edd3 7a00 	vldr	s15, [r3]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data_in_size; i++) {
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d8e4      	bhi.n	8003cc4 <hanning+0x14>
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <fft>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  FFT Calculation using CMSIS DSP Library           */
/*----------------------------------------------------------------------------*/

void fft(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, arm_rfft_fast_instance_f32 * fft_handler, signal_windowing_t signal_windowing, float32_t* multipliers) {
 8003d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	b08b      	sub	sp, #44	; 0x2c
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	466b      	mov	r3, sp
 8003d1a:	461e      	mov	r6, r3

	float32_t fft_out_buf[data_in_size];
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	3b01      	subs	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	2300      	movs	r3, #0
 8003d26:	4688      	mov	r8, r1
 8003d28:	4699      	mov	r9, r3
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003d36:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003d3a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003d3e:	2300      	movs	r3, #0
 8003d40:	460c      	mov	r4, r1
 8003d42:	461d      	mov	r5, r3
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	016b      	lsls	r3, r5, #5
 8003d4e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003d52:	0162      	lsls	r2, r4, #5
 8003d54:	008b      	lsls	r3, r1, #2
 8003d56:	3307      	adds	r3, #7
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	ebad 0d03 	sub.w	sp, sp, r3
 8003d60:	ab02      	add	r3, sp, #8
 8003d62:	3303      	adds	r3, #3
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	613b      	str	r3, [r7, #16]

	switch (signal_windowing){
 8003d6a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d108      	bne.n	8003d84 <fft+0x7c>
		case HANNING:
		{
			hanning(data_in, data_in_size, data_in, data_in_size, multipliers);
 8003d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff97 	bl	8003cb0 <hanning>
			break;
 8003d82:	e000      	b.n	8003d86 <fft+0x7e>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8003d84:	bf00      	nop
		}
	}

	arm_rfft_fast_f32(fft_handler, (float32_t*)  data_in, (float32_t*) fft_out_buf, 0);
 8003d86:	2300      	movs	r3, #0
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003d8e:	f011 fd63 	bl	8015858 <arm_rfft_fast_f32>

	int freqpoint = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]

	for (int i=0;   i<data_in_size   ; i=i+2) {
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	e057      	b.n	8003e4c <fft+0x144>
	  data_out[freqpoint] =(complex_abs(fft_out_buf[i], fft_out_buf[i+1])); //(sqrt(data_in_size));
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	edd3 7a00 	vldr	s15, [r3]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3301      	adds	r3, #1
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	ed93 7a00 	vldr	s14, [r3]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	18d4      	adds	r4, r2, r3
 8003dbe:	eef0 0a47 	vmov.f32	s1, s14
 8003dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc6:	f7ff fd03 	bl	80037d0 <complex_abs>
 8003dca:	eef0 7a40 	vmov.f32	s15, s0
 8003dce:	edc4 7a00 	vstr	s15, [r4]
	  //data_out[freqpoint] = 2 * data_out[freqpoint]*data_out[freqpoint] /(float32_t)ISM330DHCX_ODR;

	  if(data_out[freqpoint] < 1e-3){
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc fbb7 	bl	8000550 <__aeabi_f2d>
 8003de2:	a321      	add	r3, pc, #132	; (adr r3, 8003e68 <fft+0x160>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fe7c 	bl	8000ae4 <__aeabi_dcmplt>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <fft+0xf6>
		  data_out[freqpoint] = 1e-3;
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <fft+0x158>)
 8003dfc:	601a      	str	r2, [r3, #0]
	  }
	  data_out[freqpoint] = 20*log10(data_out[freqpoint]);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc fba1 	bl	8000550 <__aeabi_f2d>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	ec43 2b10 	vmov	d0, r2, r3
 8003e16:	f01a f9bf 	bl	801e198 <log10>
 8003e1a:	ec51 0b10 	vmov	r0, r1, d0
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <fft+0x15c>)
 8003e24:	f7fc fbec 	bl	8000600 <__aeabi_dmul>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	18d4      	adds	r4, r2, r3
 8003e38:	f7fc feda 	bl	8000bf0 <__aeabi_d2f>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	6023      	str	r3, [r4, #0]
	  freqpoint++;
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	3301      	adds	r3, #1
 8003e44:	61bb      	str	r3, [r7, #24]
	for (int i=0;   i<data_in_size   ; i=i+2) {
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d8a3      	bhi.n	8003d9c <fft+0x94>
 8003e54:	46b5      	mov	sp, r6
	}
}
 8003e56:	bf00      	nop
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e60:	3a83126f 	.word	0x3a83126f
 8003e64:	40340000 	.word	0x40340000
 8003e68:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e6c:	3f50624d 	.word	0x3f50624d

08003e70 <triangular_filters_convolution>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Convolution of the triangular filters bank        */
/*----------------------------------------------------------------------------*/

void triangular_filters_convolution(float32_t * data_in, uint32_t data_in_size, float32_t * data_out,  uint32_t data_out_size, uint32_t * bin) {
 8003e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e74:	b08f      	sub	sp, #60	; 0x3c
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	466b      	mov	r3, sp
 8003e82:	461e      	mov	r6, r3

	int f_m_minus=0, f_m=0, f_m_plus=0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
 8003e88:	2300      	movs	r3, #0
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
	float32_t in_vector[data_in_size];
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	460b      	mov	r3, r1
 8003e94:	3b01      	subs	r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	4699      	mov	r9, r3
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003eaa:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003eae:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	016b      	lsls	r3, r5, #5
 8003ec2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003ec6:	0162      	lsls	r2, r4, #5
 8003ec8:	008b      	lsls	r3, r1, #2
 8003eca:	3307      	adds	r3, #7
 8003ecc:	08db      	lsrs	r3, r3, #3
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	ebad 0d03 	sub.w	sp, sp, r3
 8003ed4:	466b      	mov	r3, sp
 8003ed6:	3303      	adds	r3, #3
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	617b      	str	r3, [r7, #20]

	for (int m=1; m < data_out_size+1; m++){
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee2:	e084      	b.n	8003fee <triangular_filters_convolution+0x17e>
		f_m_minus = bin[m-1];
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eea:	3b01      	subs	r3, #1
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
		f_m = bin[m];
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003efc:	4413      	add	r3, r2
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	623b      	str	r3, [r7, #32]
		f_m_plus = bin[m+1];
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	3301      	adds	r3, #1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f0a:	4413      	add	r3, r2
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61fb      	str	r3, [r7, #28]

		for (int i=0; i<data_in_size   ;i++){
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	e009      	b.n	8003f2a <triangular_filters_convolution+0xba>
			in_vector[i] = (float32_t) 0.0;
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_in_size   ;i++){
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	3301      	adds	r3, #1
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d8f1      	bhi.n	8003f16 <triangular_filters_convolution+0xa6>
		}
		for (int k=f_m_minus;k < f_m;k++){
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
 8003f36:	e01d      	b.n	8003f74 <triangular_filters_convolution+0x104>
			in_vector[k] = (((float32_t)k-f_m_minus)/(f_m-f_m_minus));
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f50:	6a3a      	ldr	r2, [r7, #32]
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	edc3 7a00 	vstr	s15, [r3]
		for (int k=f_m_minus;k < f_m;k++){
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	3301      	adds	r3, #1
 8003f72:	633b      	str	r3, [r7, #48]	; 0x30
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	dbdd      	blt.n	8003f38 <triangular_filters_convolution+0xc8>
		}
		for (int j=f_m; j<f_m_plus;j++){
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f80:	e01d      	b.n	8003fbe <triangular_filters_convolution+0x14e>
			in_vector[j] = (float32_t)((f_m_plus-(float32_t)j)/(f_m_plus-f_m));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f96:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	edc3 7a00 	vstr	s15, [r3]
		for (int j=f_m; j<f_m_plus;j++){
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	3301      	adds	r3, #1
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	dbdd      	blt.n	8003f82 <triangular_filters_convolution+0x112>
		}
		data_out[m-1] = dot_product(in_vector, data_in_size,data_in, data_in_size);
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	18d4      	adds	r4, r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	6978      	ldr	r0, [r7, #20]
 8003fdc:	f7ff fc14 	bl	8003808 <dot_product>
 8003fe0:	eef0 7a40 	vmov.f32	s15, s0
 8003fe4:	edc4 7a00 	vstr	s15, [r4]
	for (int m=1; m < data_out_size+1; m++){
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	3301      	adds	r3, #1
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	f63f af75 	bhi.w	8003ee4 <triangular_filters_convolution+0x74>
 8003ffa:	46b5      	mov	sp, r6
	}
}
 8003ffc:	bf00      	nop
 8003ffe:	373c      	adds	r7, #60	; 0x3c
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004008 <mfcc>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  MFCC		        					          */
/*----------------------------------------------------------------------------*/

void mfcc(float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, uint32_t * bin, arm_dct4_instance_f32 * dct4f32, arm_rfft_fast_instance_f32 * fft_handler,  signal_windowing_t signal_windowing, float32_t* multipliers) {
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	b091      	sub	sp, #68	; 0x44
 800400e:	af04      	add	r7, sp, #16
 8004010:	6178      	str	r0, [r7, #20]
 8004012:	6139      	str	r1, [r7, #16]
 8004014:	60fa      	str	r2, [r7, #12]
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	466b      	mov	r3, sp
 800401a:	461e      	mov	r6, r3

	float32_t dct_status[data_out_size*2];
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	0059      	lsls	r1, r3, #1
 8004020:	460b      	mov	r3, r1
 8004022:	3b01      	subs	r3, #1
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004026:	2300      	movs	r3, #0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	0143      	lsls	r3, r0, #5
 8004038:	6838      	ldr	r0, [r7, #0]
 800403a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800403e:	6838      	ldr	r0, [r7, #0]
 8004040:	0142      	lsls	r2, r0, #5
 8004042:	2300      	movs	r3, #0
 8004044:	468a      	mov	sl, r1
 8004046:	469b      	mov	fp, r3
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8004054:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8004058:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800405c:	008b      	lsls	r3, r1, #2
 800405e:	3307      	adds	r3, #7
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	ebad 0d03 	sub.w	sp, sp, r3
 8004068:	ab04      	add	r3, sp, #16
 800406a:	3303      	adds	r3, #3
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t fft_out[data_in_size/2];
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	0859      	lsrs	r1, r3, #1
 8004076:	460b      	mov	r3, r1
 8004078:	3b01      	subs	r3, #1
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	2300      	movs	r3, #0
 800407e:	4688      	mov	r8, r1
 8004080:	4699      	mov	r9, r3
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800408e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8004092:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8004096:	2300      	movs	r3, #0
 8004098:	460c      	mov	r4, r1
 800409a:	461d      	mov	r5, r3
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	016b      	lsls	r3, r5, #5
 80040a6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80040aa:	0162      	lsls	r2, r4, #5
 80040ac:	008b      	lsls	r3, r1, #2
 80040ae:	3307      	adds	r3, #7
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	ebad 0d03 	sub.w	sp, sp, r3
 80040b8:	ab04      	add	r3, sp, #16
 80040ba:	3303      	adds	r3, #3
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	61fb      	str	r3, [r7, #28]

	fft(data_in, data_in_size, fft_out, data_in_size/2, fft_handler, signal_windowing, multipliers);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	085a      	lsrs	r2, r3, #1
 80040c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c8:	9302      	str	r3, [sp, #8]
 80040ca:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	6939      	ldr	r1, [r7, #16]
 80040da:	6978      	ldr	r0, [r7, #20]
 80040dc:	f7ff fe14 	bl	8003d08 <fft>

	triangular_filters_convolution(fft_out, data_in_size/2, data_out, data_out_size, bin);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	0859      	lsrs	r1, r3, #1
 80040e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	69f8      	ldr	r0, [r7, #28]
 80040ee:	f7ff febf 	bl	8003e70 <triangular_filters_convolution>
	for (int i = 0; i<data_out_size; i++) {
 80040f2:	2300      	movs	r3, #0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f6:	e039      	b.n	800416c <mfcc+0x164>
		if (data_out[i] < 10e-10){
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fa24 	bl	8000550 <__aeabi_f2d>
 8004108:	a323      	add	r3, pc, #140	; (adr r3, 8004198 <mfcc+0x190>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fce9 	bl	8000ae4 <__aeabi_dcmplt>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <mfcc+0x11c>
			data_out[i] = 10e-10;
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <mfcc+0x188>)
 8004122:	601a      	str	r2, [r3, #0]
		}
		data_out[i] = 20*log10(data_out[i]);
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc fa0e 	bl	8000550 <__aeabi_f2d>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	ec43 2b10 	vmov	d0, r2, r3
 800413c:	f01a f82c 	bl	801e198 <log10>
 8004140:	ec51 0b10 	vmov	r0, r1, d0
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <mfcc+0x18c>)
 800414a:	f7fc fa59 	bl	8000600 <__aeabi_dmul>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	18d4      	adds	r4, r2, r3
 800415e:	f7fc fd47 	bl	8000bf0 <__aeabi_d2f>
 8004162:	4603      	mov	r3, r0
 8004164:	6023      	str	r3, [r4, #0]
	for (int i = 0; i<data_out_size; i++) {
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	3301      	adds	r3, #1
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	429a      	cmp	r2, r3
 8004172:	d8c1      	bhi.n	80040f8 <mfcc+0xf0>
	}

	// apply the direct cosine transform in order to have the MFCC
	arm_dct4_f32(dct4f32, dct_status, data_out);
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004178:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800417a:	f011 ff77 	bl	801606c <arm_dct4_f32>
 800417e:	46b5      	mov	sp, r6
}
 8004180:	bf00      	nop
 8004182:	3734      	adds	r7, #52	; 0x34
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	f3af 8000 	nop.w
 8004190:	3089705f 	.word	0x3089705f
 8004194:	40340000 	.word	0x40340000
 8004198:	e826d695 	.word	0xe826d695
 800419c:	3e112e0b 	.word	0x3e112e0b

080041a0 <sys_error_handler>:
 */

#include "sys_functions.h"

void sys_error_handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <sys_error_handler+0x4>

080041a6 <SysAlloc>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void *SysAlloc(size_t nSize) {
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  void *pcMemory = (void *) calloc(nSize,sizeof(uint8_t));
 80041ae:	2101      	movs	r1, #1
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f015 fae7 	bl	8019784 <calloc>
 80041b6:	4603      	mov	r3, r0
 80041b8:	60fb      	str	r3, [r7, #12]
  return pcMemory;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <SysFree>:

void SysFree(void *pvData) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  free(pvData);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f015 fb13 	bl	80197f8 <free>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e051      	b.n	800429c <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	7b1a      	ldrb	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <ISM330DHCX_RegisterBusIO+0xcc>)
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <ISM330DHCX_RegisterBusIO+0xd0>)
 800423a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e020      	b.n	800429c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4798      	blx	r3
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e016      	b.n	800429c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d112      	bne.n	800429c <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004280:	230c      	movs	r3, #12
 8004282:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8004284:	7afb      	ldrb	r3, [r7, #11]
 8004286:	461a      	mov	r2, r3
 8004288:	2112      	movs	r1, #18
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fd73 	bl	8004d76 <ISM330DHCX_Write_Reg>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	080055dd 	.word	0x080055dd
 80042ac:	08005613 	.word	0x08005613

080042b0 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3320      	adds	r3, #32
 80042bc:	2101      	movs	r1, #1
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 ff3f 	bl	8006142 <ism330dhcx_device_conf_set>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e078      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3320      	adds	r3, #32
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 ffb6 	bl	8006248 <ism330dhcx_auto_increment_set>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	e06c      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3320      	adds	r3, #32
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 ff84 	bl	80061fc <ism330dhcx_reset_set>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	e060      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3320      	adds	r3, #32
 8004304:	2101      	movs	r1, #1
 8004306:	4618      	mov	r0, r3
 8004308:	f001 ff9e 	bl	8006248 <ism330dhcx_auto_increment_set>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	e054      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3320      	adds	r3, #32
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f001 fe42 	bl	8005fa8 <ism330dhcx_block_data_update_set>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800432a:	f04f 33ff 	mov.w	r3, #4294967295
 800432e:	e048      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3320      	adds	r3, #32
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f002 f854 	bl	80063e4 <ism330dhcx_fifo_mode_set>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	e03c      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2204      	movs	r2, #4
 800434c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3320      	adds	r3, #32
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f001 fa04 	bl	8005764 <ism330dhcx_xl_data_rate_set>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e02c      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3320      	adds	r3, #32
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f001 f99a 	bl	80056a8 <ism330dhcx_xl_full_scale_set>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e020      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2204      	movs	r2, #4
 8004384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3320      	adds	r3, #32
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f001 fc38 	bl	8005c04 <ism330dhcx_gy_data_rate_set>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295
 800439e:	e010      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3320      	adds	r3, #32
 80043a4:	210c      	movs	r1, #12
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 fbb4 	bl	8005b14 <ism330dhcx_gy_full_scale_set>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295
 80043b6:	e004      	b.n	80043c2 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f888 	bl	80044e8 <ISM330DHCX_ACC_Disable>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	e015      	b.n	8004410 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fa92 	bl	800490e <ISM330DHCX_GYRO_Disable>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	e00c      	b.n	8004410 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3320      	adds	r3, #32
 8004426:	6839      	ldr	r1, [r7, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f001 fed6 	bl	80061da <ism330dhcx_device_id_get>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	e000      	b.n	800443c <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2200      	movs	r2, #0
 800445e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800446c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2210      	movs	r2, #16
 8004472:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	4a07      	ldr	r2, [pc, #28]	; (800449c <ISM330DHCX_GetCapabilities+0x58>)
 800447e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	4a06      	ldr	r2, [pc, #24]	; (800449c <ISM330DHCX_GetCapabilities+0x58>)
 8004484:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	45d05800 	.word	0x45d05800

080044a0 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e014      	b.n	80044e0 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f103 0220 	add.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f001 f94d 	bl	8005764 <ism330dhcx_xl_data_rate_set>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	e004      	b.n	80044e0 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e01f      	b.n	800453e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f103 0220 	add.w	r2, r3, #32
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3333      	adds	r3, #51	; 0x33
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f001 fa9a 	bl	8005a44 <ism330dhcx_xl_data_rate_get>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	e010      	b.n	800453e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3320      	adds	r3, #32
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f001 f91e 	bl	8005764 <ism330dhcx_xl_data_rate_set>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	e004      	b.n	800453e <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3320      	adds	r3, #32
 800455a:	f107 020b 	add.w	r2, r7, #11
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f001 f8c7 	bl	80056f4 <ism330dhcx_xl_full_scale_get>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	e023      	b.n	80045ba <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004572:	7afb      	ldrb	r3, [r7, #11]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d81b      	bhi.n	80045b0 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	08004591 	.word	0x08004591
 8004584:	080045a9 	.word	0x080045a9
 8004588:	08004599 	.word	0x08004599
 800458c:	080045a1 	.word	0x080045a1
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8004594:	601a      	str	r2, [r3, #0]
      break;
 8004596:	e00f      	b.n	80045b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	4a0b      	ldr	r2, [pc, #44]	; (80045c8 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 800459c:	601a      	str	r2, [r3, #0]
      break;
 800459e:	e00b      	b.n	80045b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <ISM330DHCX_ACC_GetSensitivity+0x84>)
 80045a4:	601a      	str	r2, [r3, #0]
      break;
 80045a6:	e007      	b.n	80045b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 80045ac:	601a      	str	r2, [r3, #0]
      break;
 80045ae:	e003      	b.n	80045b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	60fb      	str	r3, [r7, #12]
      break;
 80045b6:	bf00      	nop
  }

  return ret;
 80045b8:	68fb      	ldr	r3, [r7, #12]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	3d79db23 	.word	0x3d79db23
 80045c8:	3df9db23 	.word	0x3df9db23
 80045cc:	3e79db23 	.word	0x3e79db23
 80045d0:	3ef9db23 	.word	0x3ef9db23

080045d4 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3320      	adds	r3, #32
 80045e6:	f107 020b 	add.w	r2, r7, #11
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fa29 	bl	8005a44 <ism330dhcx_xl_data_rate_get>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	e04e      	b.n	800469c <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80045fe:	7afb      	ldrb	r3, [r7, #11]
 8004600:	2b0a      	cmp	r3, #10
 8004602:	d846      	bhi.n	8004692 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004639 	.word	0x08004639
 8004610:	08004643 	.word	0x08004643
 8004614:	0800464b 	.word	0x0800464b
 8004618:	08004653 	.word	0x08004653
 800461c:	0800465b 	.word	0x0800465b
 8004620:	08004663 	.word	0x08004663
 8004624:	0800466b 	.word	0x0800466b
 8004628:	08004673 	.word	0x08004673
 800462c:	0800467b 	.word	0x0800467b
 8004630:	08004683 	.word	0x08004683
 8004634:	0800468b 	.word	0x0800468b
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
      break;
 8004640:	e02b      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8004646:	601a      	str	r2, [r3, #0]
      break;
 8004648:	e027      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 800464e:	601a      	str	r2, [r3, #0]
      break;
 8004650:	e023      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	4a15      	ldr	r2, [pc, #84]	; (80046ac <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8004656:	601a      	str	r2, [r3, #0]
      break;
 8004658:	e01f      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 800465e:	601a      	str	r2, [r3, #0]
      break;
 8004660:	e01b      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8004666:	601a      	str	r2, [r3, #0]
      break;
 8004668:	e017      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 800466e:	601a      	str	r2, [r3, #0]
      break;
 8004670:	e013      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	4a11      	ldr	r2, [pc, #68]	; (80046bc <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8004676:	601a      	str	r2, [r3, #0]
      break;
 8004678:	e00f      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 800467e:	601a      	str	r2, [r3, #0]
      break;
 8004680:	e00b      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	4a0f      	ldr	r2, [pc, #60]	; (80046c4 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8004686:	601a      	str	r2, [r3, #0]
      break;
 8004688:	e007      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 800468e:	601a      	str	r2, [r3, #0]
      break;
 8004690:	e003      	b.n	800469a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	60fb      	str	r3, [r7, #12]
      break;
 8004698:	bf00      	nop
  }

  return ret;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	41480000 	.word	0x41480000
 80046a8:	41d00000 	.word	0x41d00000
 80046ac:	42500000 	.word	0x42500000
 80046b0:	42d00000 	.word	0x42d00000
 80046b4:	43500000 	.word	0x43500000
 80046b8:	43d00000 	.word	0x43d00000
 80046bc:	44504000 	.word	0x44504000
 80046c0:	44d04000 	.word	0x44d04000
 80046c4:	45504000 	.word	0x45504000
 80046c8:	45d05800 	.word	0x45d05800

080046cc <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d106      	bne.n	80046f0 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80046e2:	ed97 0a00 	vldr	s0, [r7]
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fd5c 	bl	80051a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80046ec:	4603      	mov	r3, r0
 80046ee:	e005      	b.n	80046fc <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80046f0:	ed97 0a00 	vldr	s0, [r7]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fde1 	bl	80052bc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80046fa:	4603      	mov	r3, r0
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3320      	adds	r3, #32
 8004716:	f107 020b 	add.w	r2, r7, #11
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f000 ffe9 	bl	80056f4 <ism330dhcx_xl_full_scale_get>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004728:	f04f 33ff 	mov.w	r3, #4294967295
 800472c:	e023      	b.n	8004776 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800472e:	7afb      	ldrb	r3, [r7, #11]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d81b      	bhi.n	800476c <ISM330DHCX_ACC_GetFullScale+0x68>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <ISM330DHCX_ACC_GetFullScale+0x38>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	0800474d 	.word	0x0800474d
 8004740:	08004765 	.word	0x08004765
 8004744:	08004755 	.word	0x08004755
 8004748:	0800475d 	.word	0x0800475d
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2202      	movs	r2, #2
 8004750:	601a      	str	r2, [r3, #0]
      break;
 8004752:	e00f      	b.n	8004774 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2204      	movs	r2, #4
 8004758:	601a      	str	r2, [r3, #0]
      break;
 800475a:	e00b      	b.n	8004774 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2208      	movs	r2, #8
 8004760:	601a      	str	r2, [r3, #0]
      break;
 8004762:	e007      	b.n	8004774 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2210      	movs	r2, #16
 8004768:	601a      	str	r2, [r3, #0]
      break;
 800476a:	e003      	b.n	8004774 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	60fb      	str	r3, [r7, #12]
      break;
 8004772:	bf00      	nop
  }

  return ret;
 8004774:	68fb      	ldr	r3, [r7, #12]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop

08004780 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b02      	cmp	r3, #2
 800478e:	dd0b      	ble.n	80047a8 <ISM330DHCX_ACC_SetFullScale+0x28>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b04      	cmp	r3, #4
 8004794:	dd06      	ble.n	80047a4 <ISM330DHCX_ACC_SetFullScale+0x24>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b08      	cmp	r3, #8
 800479a:	dc01      	bgt.n	80047a0 <ISM330DHCX_ACC_SetFullScale+0x20>
 800479c:	2303      	movs	r3, #3
 800479e:	e004      	b.n	80047aa <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e002      	b.n	80047aa <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e000      	b.n	80047aa <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047a8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 80047aa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3320      	adds	r3, #32
 80047b0:	7bfa      	ldrb	r2, [r7, #15]
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 ff77 	bl	80056a8 <ism330dhcx_xl_full_scale_set>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
 80047c4:	e000      	b.n	80047c8 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3320      	adds	r3, #32
 80047de:	f107 0208 	add.w	r2, r7, #8
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fc50 	bl	800608a <ism330dhcx_acceleration_raw_get>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295
 80047f4:	e00c      	b.n	8004810 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80047f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80047fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004806:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3320      	adds	r3, #32
 800482c:	f107 0210 	add.w	r2, r7, #16
 8004830:	4611      	mov	r1, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f001 fc29 	bl	800608a <ism330dhcx_acceleration_raw_get>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	e03c      	b.n	80048be <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fe7c 	bl	8004548 <ISM330DHCX_ACC_GetSensitivity>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	e030      	b.n	80048be <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800485c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004868:	edd7 7a03 	vldr	s15, [r7, #12]
 800486c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004874:	ee17 2a90 	vmov	r2, s15
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800487c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004888:	edd7 7a03 	vldr	s15, [r7, #12]
 800488c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004894:	ee17 2a90 	vmov	r2, s15
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800489c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b4:	ee17 2a90 	vmov	r2, s15
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e014      	b.n	8004906 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f103 0220 	add.w	r2, r3, #32
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f001 f98a 	bl	8005c04 <ism330dhcx_gy_data_rate_set>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	e004      	b.n	8004906 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e01f      	b.n	8004964 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f103 0220 	add.w	r2, r3, #32
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3334      	adds	r3, #52	; 0x34
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f001 fad7 	bl	8005ee4 <ism330dhcx_gy_data_rate_get>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
 8004940:	e010      	b.n	8004964 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3320      	adds	r3, #32
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f001 f95b 	bl	8005c04 <ism330dhcx_gy_data_rate_set>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295
 8004958:	e004      	b.n	8004964 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3320      	adds	r3, #32
 800497e:	f107 020b 	add.w	r2, r7, #11
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f8eb 	bl	8005b60 <ism330dhcx_gy_full_scale_get>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	e03d      	b.n	8004a12 <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d835      	bhi.n	8004a08 <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049e1 	.word	0x080049e1
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	08004a09 	.word	0x08004a09
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	08004a09 	.word	0x08004a09
 80049cc:	08004a09 	.word	0x08004a09
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	080049f9 	.word	0x080049f9
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 80049dc:	601a      	str	r2, [r3, #0]
      break;
 80049de:	e017      	b.n	8004a10 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4a0f      	ldr	r2, [pc, #60]	; (8004a20 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 80049e4:	601a      	str	r2, [r3, #0]
      break;
 80049e6:	e013      	b.n	8004a10 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 80049ec:	601a      	str	r2, [r3, #0]
      break;
 80049ee:	e00f      	b.n	8004a10 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 80049f4:	601a      	str	r2, [r3, #0]
      break;
 80049f6:	e00b      	b.n	8004a10 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 80049fc:	601a      	str	r2, [r3, #0]
      break;
 80049fe:	e007      	b.n	8004a10 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 8004a04:	601a      	str	r2, [r3, #0]
      break;
 8004a06:	e003      	b.n	8004a10 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	60fb      	str	r3, [r7, #12]
      break;
 8004a0e:	bf00      	nop
  }

  return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	408c0000 	.word	0x408c0000
 8004a20:	410c0000 	.word	0x410c0000
 8004a24:	418c0000 	.word	0x418c0000
 8004a28:	420c0000 	.word	0x420c0000
 8004a2c:	428c0000 	.word	0x428c0000
 8004a30:	430c0000 	.word	0x430c0000

08004a34 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3320      	adds	r3, #32
 8004a46:	f107 020b 	add.w	r2, r7, #11
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fa49 	bl	8005ee4 <ism330dhcx_gy_data_rate_get>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004a58:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5c:	e04e      	b.n	8004afc <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
 8004a60:	2b0a      	cmp	r3, #10
 8004a62:	d846      	bhi.n	8004af2 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004aa3 	.word	0x08004aa3
 8004a74:	08004aab 	.word	0x08004aab
 8004a78:	08004ab3 	.word	0x08004ab3
 8004a7c:	08004abb 	.word	0x08004abb
 8004a80:	08004ac3 	.word	0x08004ac3
 8004a84:	08004acb 	.word	0x08004acb
 8004a88:	08004ad3 	.word	0x08004ad3
 8004a8c:	08004adb 	.word	0x08004adb
 8004a90:	08004ae3 	.word	0x08004ae3
 8004a94:	08004aeb 	.word	0x08004aeb
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
      break;
 8004aa0:	e02b      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004aa6:	601a      	str	r2, [r3, #0]
      break;
 8004aa8:	e027      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004aae:	601a      	str	r2, [r3, #0]
      break;
 8004ab0:	e023      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8004ab6:	601a      	str	r2, [r3, #0]
      break;
 8004ab8:	e01f      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004abe:	601a      	str	r2, [r3, #0]
      break;
 8004ac0:	e01b      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8004ac6:	601a      	str	r2, [r3, #0]
      break;
 8004ac8:	e017      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8004ace:	601a      	str	r2, [r3, #0]
      break;
 8004ad0:	e013      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8004ad6:	601a      	str	r2, [r3, #0]
      break;
 8004ad8:	e00f      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004ade:	601a      	str	r2, [r3, #0]
      break;
 8004ae0:	e00b      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	; (8004b24 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8004ae6:	601a      	str	r2, [r3, #0]
      break;
 8004ae8:	e007      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004aee:	601a      	str	r2, [r3, #0]
      break;
 8004af0:	e003      	b.n	8004afa <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	60fb      	str	r3, [r7, #12]
      break;
 8004af8:	bf00      	nop
  }

  return ret;
 8004afa:	68fb      	ldr	r3, [r7, #12]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	41480000 	.word	0x41480000
 8004b08:	41d00000 	.word	0x41d00000
 8004b0c:	42500000 	.word	0x42500000
 8004b10:	42d00000 	.word	0x42d00000
 8004b14:	43500000 	.word	0x43500000
 8004b18:	43d00000 	.word	0x43d00000
 8004b1c:	44504000 	.word	0x44504000
 8004b20:	44d04000 	.word	0x44d04000
 8004b24:	45504000 	.word	0x45504000
 8004b28:	45d05800 	.word	0x45d05800

08004b2c <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d106      	bne.n	8004b50 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004b42:	ed97 0a00 	vldr	s0, [r7]
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fc3a 	bl	80053c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	e005      	b.n	8004b5c <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004b50:	ed97 0a00 	vldr	s0, [r7]
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fcbf 	bl	80054d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004b5a:	4603      	mov	r3, r0
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3320      	adds	r3, #32
 8004b76:	f107 020b 	add.w	r2, r7, #11
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 ffef 	bl	8005b60 <ism330dhcx_gy_full_scale_get>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004b88:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8c:	e041      	b.n	8004c12 <ISM330DHCX_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d839      	bhi.n	8004c08 <ISM330DHCX_GYRO_GetFullScale+0xa4>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd9 	.word	0x08004bd9
 8004ba0:	08004bff 	.word	0x08004bff
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004c09 	.word	0x08004c09
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004c09 	.word	0x08004c09
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	08004c09 	.word	0x08004c09
 8004bc4:	08004c09 	.word	0x08004c09
 8004bc8:	08004c09 	.word	0x08004c09
 8004bcc:	08004bf5 	.word	0x08004bf5
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	227d      	movs	r2, #125	; 0x7d
 8004bd4:	601a      	str	r2, [r3, #0]
      break;
 8004bd6:	e01b      	b.n	8004c10 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	22fa      	movs	r2, #250	; 0xfa
 8004bdc:	601a      	str	r2, [r3, #0]
      break;
 8004bde:	e017      	b.n	8004c10 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004be6:	601a      	str	r2, [r3, #0]
      break;
 8004be8:	e012      	b.n	8004c10 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bf0:	601a      	str	r2, [r3, #0]
      break;
 8004bf2:	e00d      	b.n	8004c10 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bfa:	601a      	str	r2, [r3, #0]
      break;
 8004bfc:	e008      	b.n	8004c10 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_4000dps:
      *FullScale = 4000;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004c04:	601a      	str	r2, [r3, #0]
      break;
 8004c06:	e003      	b.n	8004c10 <ISM330DHCX_GYRO_GetFullScale+0xac>

    default:
      ret = ISM330DHCX_ERROR;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	60fb      	str	r3, [r7, #12]
      break;
 8004c0e:	bf00      	nop
  }

  return ret;
 8004c10:	68fb      	ldr	r3, [r7, #12]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b7d      	cmp	r3, #125	; 0x7d
 8004c2a:	dd18      	ble.n	8004c5e <ISM330DHCX_GYRO_SetFullScale+0x42>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2bfa      	cmp	r3, #250	; 0xfa
 8004c30:	dd13      	ble.n	8004c5a <ISM330DHCX_GYRO_SetFullScale+0x3e>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c38:	dd0d      	ble.n	8004c56 <ISM330DHCX_GYRO_SetFullScale+0x3a>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c40:	dd07      	ble.n	8004c52 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c48:	dc01      	bgt.n	8004c4e <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	e008      	b.n	8004c60 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e006      	b.n	8004c60 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004c52:	2308      	movs	r3, #8
 8004c54:	e004      	b.n	8004c60 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004c56:	2304      	movs	r3, #4
 8004c58:	e002      	b.n	8004c60 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004c5e:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004c60:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3320      	adds	r3, #32
 8004c66:	7bfa      	ldrb	r2, [r7, #15]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 ff52 	bl	8005b14 <ism330dhcx_gy_full_scale_set>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	e000      	b.n	8004c7e <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3320      	adds	r3, #32
 8004c94:	f107 0208 	add.w	r2, r7, #8
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 f9aa 	bl	8005ff4 <ism330dhcx_angular_rate_raw_get>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	e00c      	b.n	8004cc6 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004cb4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004cbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3320      	adds	r3, #32
 8004cdc:	f107 0210 	add.w	r2, r7, #16
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f986 	bl	8005ff4 <ism330dhcx_angular_rate_raw_get>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf2:	e03c      	b.n	8004d6e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004cf4:	f107 030c 	add.w	r3, r7, #12
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fe36 	bl	800496c <ISM330DHCX_GYRO_GetSensitivity>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e030      	b.n	8004d6e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d24:	ee17 2a90 	vmov	r2, s15
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d44:	ee17 2a90 	vmov	r2, s15
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d64:	ee17 2a90 	vmov	r2, s15
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70fb      	strb	r3, [r7, #3]
 8004d82:	4613      	mov	r3, r2
 8004d84:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f103 0020 	add.w	r0, r3, #32
 8004d8c:	1cba      	adds	r2, r7, #2
 8004d8e:	78f9      	ldrb	r1, [r7, #3]
 8004d90:	2301      	movs	r3, #1
 8004d92:	f000 fc71 	bl	8005678 <ism330dhcx_write_reg>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004da0:	e000      	b.n	8004da4 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <ISM330DHCX_FIFO_ACC_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_ACC_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_xl_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 8004db8:	edd7 7a00 	vldr	s15, [r7]
 8004dbc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc8:	d801      	bhi.n	8004dce <ISM330DHCX_FIFO_ACC_Set_BDR+0x22>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e058      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004dce:	edd7 7a00 	vldr	s15, [r7]
 8004dd2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d801      	bhi.n	8004de4 <ISM330DHCX_FIFO_ACC_Set_BDR+0x38>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e04d      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004de4:	edd7 7a00 	vldr	s15, [r7]
 8004de8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004ea8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xfc>
 8004dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df4:	d801      	bhi.n	8004dfa <ISM330DHCX_FIFO_ACC_Set_BDR+0x4e>
 8004df6:	2303      	movs	r3, #3
 8004df8:	e042      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004dfa:	edd7 7a00 	vldr	s15, [r7]
 8004dfe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004eac <ISM330DHCX_FIFO_ACC_Set_BDR+0x100>
 8004e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0a:	d801      	bhi.n	8004e10 <ISM330DHCX_FIFO_ACC_Set_BDR+0x64>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	e037      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e10:	edd7 7a00 	vldr	s15, [r7]
 8004e14:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004eb0 <ISM330DHCX_FIFO_ACC_Set_BDR+0x104>
 8004e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e20:	d801      	bhi.n	8004e26 <ISM330DHCX_FIFO_ACC_Set_BDR+0x7a>
 8004e22:	2305      	movs	r3, #5
 8004e24:	e02c      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e26:	edd7 7a00 	vldr	s15, [r7]
 8004e2a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004eb4 <ISM330DHCX_FIFO_ACC_Set_BDR+0x108>
 8004e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	d801      	bhi.n	8004e3c <ISM330DHCX_FIFO_ACC_Set_BDR+0x90>
 8004e38:	2306      	movs	r3, #6
 8004e3a:	e021      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e3c:	edd7 7a00 	vldr	s15, [r7]
 8004e40:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004eb8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x10c>
 8004e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4c:	d801      	bhi.n	8004e52 <ISM330DHCX_FIFO_ACC_Set_BDR+0xa6>
 8004e4e:	2307      	movs	r3, #7
 8004e50:	e016      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e52:	edd7 7a00 	vldr	s15, [r7]
 8004e56:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ebc <ISM330DHCX_FIFO_ACC_Set_BDR+0x110>
 8004e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	d801      	bhi.n	8004e68 <ISM330DHCX_FIFO_ACC_Set_BDR+0xbc>
 8004e64:	2308      	movs	r3, #8
 8004e66:	e00b      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e68:	edd7 7a00 	vldr	s15, [r7]
 8004e6c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ec0 <ISM330DHCX_FIFO_ACC_Set_BDR+0x114>
 8004e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e78:	d801      	bhi.n	8004e7e <ISM330DHCX_FIFO_ACC_Set_BDR+0xd2>
 8004e7a:	2309      	movs	r3, #9
 8004e7c:	e000      	b.n	8004e80 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e7e:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
 8004e80:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_XL_BATCHED_AT_3333Hz
            :                    ISM330DHCX_XL_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3320      	adds	r3, #32
 8004e86:	7bfa      	ldrb	r2, [r7, #15]
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 fa5e 	bl	800634c <ism330dhcx_fifo_xl_batch_set>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <ISM330DHCX_FIFO_ACC_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	e000      	b.n	8004e9e <ISM330DHCX_FIFO_ACC_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	42500000 	.word	0x42500000
 8004eac:	42d00000 	.word	0x42d00000
 8004eb0:	43500000 	.word	0x43500000
 8004eb4:	43d08000 	.word	0x43d08000
 8004eb8:	44504000 	.word	0x44504000
 8004ebc:	44d06000 	.word	0x44d06000
 8004ec0:	45505000 	.word	0x45505000

08004ec4 <ISM330DHCX_FIFO_GYRO_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_GYRO_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_gy_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 8004ed0:	edd7 7a00 	vldr	s15, [r7]
 8004ed4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee0:	d801      	bhi.n	8004ee6 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x22>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e058      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004ee6:	edd7 7a00 	vldr	s15, [r7]
 8004eea:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef6:	d801      	bhi.n	8004efc <ISM330DHCX_FIFO_GYRO_Set_BDR+0x38>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e04d      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004efc:	edd7 7a00 	vldr	s15, [r7]
 8004f00:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004fc0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xfc>
 8004f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	d801      	bhi.n	8004f12 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x4e>
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e042      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f12:	edd7 7a00 	vldr	s15, [r7]
 8004f16:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004fc4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x100>
 8004f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f22:	d801      	bhi.n	8004f28 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x64>
 8004f24:	2304      	movs	r3, #4
 8004f26:	e037      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f28:	edd7 7a00 	vldr	s15, [r7]
 8004f2c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004fc8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x104>
 8004f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f38:	d801      	bhi.n	8004f3e <ISM330DHCX_FIFO_GYRO_Set_BDR+0x7a>
 8004f3a:	2305      	movs	r3, #5
 8004f3c:	e02c      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f3e:	edd7 7a00 	vldr	s15, [r7]
 8004f42:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004fcc <ISM330DHCX_FIFO_GYRO_Set_BDR+0x108>
 8004f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	d801      	bhi.n	8004f54 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x90>
 8004f50:	2306      	movs	r3, #6
 8004f52:	e021      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f54:	edd7 7a00 	vldr	s15, [r7]
 8004f58:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004fd0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x10c>
 8004f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f64:	d801      	bhi.n	8004f6a <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa6>
 8004f66:	2307      	movs	r3, #7
 8004f68:	e016      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f6a:	edd7 7a00 	vldr	s15, [r7]
 8004f6e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004fd4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x110>
 8004f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7a:	d801      	bhi.n	8004f80 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xbc>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	e00b      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f80:	edd7 7a00 	vldr	s15, [r7]
 8004f84:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004fd8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x114>
 8004f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	d801      	bhi.n	8004f96 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd2>
 8004f92:	2309      	movs	r3, #9
 8004f94:	e000      	b.n	8004f98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f96:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
 8004f98:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_GY_BATCHED_AT_3333Hz
            :                    ISM330DHCX_GY_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_gy_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3320      	adds	r3, #32
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f9f8 	bl	8006398 <ism330dhcx_fifo_gy_batch_set>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004fae:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb2:	e000      	b.n	8004fb6 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	42500000 	.word	0x42500000
 8004fc4:	42d00000 	.word	0x42d00000
 8004fc8:	43500000 	.word	0x43500000
 8004fcc:	43d08000 	.word	0x43d08000
 8004fd0:	44504000 	.word	0x44504000
 8004fd4:	44d06000 	.word	0x44d06000
 8004fd8:	45505000 	.word	0x45505000

08004fdc <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>:
  * @param  pObj the device pObj
  * @param  Status FIFO full interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_reg_t reg;

  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f103 0020 	add.w	r0, r3, #32
 8004fee:	f107 020c 	add.w	r2, r7, #12
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	210d      	movs	r1, #13
 8004ff6:	f000 fb27 	bl	8005648 <ism330dhcx_read_reg>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return ISM330DHCX_ERROR;
 8005000:	f04f 33ff 	mov.w	r3, #4294967295
 8005004:	e017      	b.n	8005036 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_fifo_full = Status;
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	b2da      	uxtb	r2, r3
 800500e:	7b3b      	ldrb	r3, [r7, #12]
 8005010:	f362 1345 	bfi	r3, r2, #5, #1
 8005014:	733b      	strb	r3, [r7, #12]

  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f103 0020 	add.w	r0, r3, #32
 800501c:	f107 020c 	add.w	r2, r7, #12
 8005020:	2301      	movs	r3, #1
 8005022:	210d      	movs	r1, #13
 8005024:	f000 fb28 	bl	8005678 <ism330dhcx_write_reg>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return ISM330DHCX_ERROR;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	e000      	b.n	8005036 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return ISM330DHCX_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <ISM330DHCX_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Watermark_Level(ISM330DHCX_Object_t *pObj, uint16_t Watermark)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	807b      	strh	r3, [r7, #2]
  if (ism330dhcx_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DHCX_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3320      	adds	r3, #32
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f91e 	bl	8006294 <ism330dhcx_fifo_watermark_set>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <ISM330DHCX_FIFO_Set_Watermark_Level+0x26>
  {
    return ISM330DHCX_ERROR;
 800505e:	f04f 33ff 	mov.w	r3, #4294967295
 8005062:	e000      	b.n	8005066 <ISM330DHCX_FIFO_Set_Watermark_Level+0x28>
  }

  return ISM330DHCX_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <ISM330DHCX_FIFO_Set_Stop_On_Fth>:
  * @param  pObj the device pObj
  * @param  Status FIFO stop on watermark status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Stop_On_Fth(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	70fb      	strb	r3, [r7, #3]
  if (ism330dhcx_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DHCX_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3320      	adds	r3, #32
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f93c 	bl	8006300 <ism330dhcx_fifo_stop_on_wtm_set>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x26>
  {
    return ISM330DHCX_ERROR;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	e000      	b.n	8005096 <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x28>
  }

  return ISM330DHCX_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <ISM330DHCX_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Mode(ISM330DHCX_Object_t *pObj, uint8_t Mode)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330DHCX_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((ism330dhcx_fifo_mode_t)Mode)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	bf8c      	ite	hi
 80050b4:	2201      	movhi	r2, #1
 80050b6:	2200      	movls	r2, #0
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	2a00      	cmp	r2, #0
 80050bc:	d10b      	bne.n	80050d6 <ISM330DHCX_FIFO_Set_Mode+0x38>
 80050be:	2201      	movs	r2, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <ISM330DHCX_FIFO_Set_Mode+0x40>
    case ISM330DHCX_BYPASS_TO_STREAM_MODE:
    case ISM330DHCX_STREAM_MODE:
      break;

    default:
      ret = ISM330DHCX_ERROR;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	60fb      	str	r3, [r7, #12]
      break;
 80050dc:	e000      	b.n	80050e0 <ISM330DHCX_FIFO_Set_Mode+0x42>
      break;
 80050de:	bf00      	nop
  }

  if (ret == ISM330DHCX_ERROR)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d101      	bne.n	80050ec <ISM330DHCX_FIFO_Set_Mode+0x4e>
  {
    return ret;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	e00d      	b.n	8005108 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), (ism330dhcx_fifo_mode_t)Mode) != ISM330DHCX_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3320      	adds	r3, #32
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 f975 	bl	80063e4 <ism330dhcx_fifo_mode_set>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <ISM330DHCX_FIFO_Set_Mode+0x68>
  {
    return ISM330DHCX_ERROR;
 8005100:	f04f 33ff 	mov.w	r3, #4294967295
 8005104:	e000      	b.n	8005108 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8005106:	68fb      	ldr	r3, [r7, #12]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <ISM330DHCX_FIFO_Get_Data>:
  * @param  pObj the device pObj
  * @param  Data FIFO raw data array [6]
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data(ISM330DHCX_Object_t *pObj, uint8_t *Data)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_out_raw_get(&(pObj->Ctx), Data) != ISM330DHCX_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3320      	adds	r3, #32
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fffd 	bl	8006120 <ism330dhcx_fifo_out_raw_get>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <ISM330DHCX_FIFO_Get_Data+0x22>
  {
    return ISM330DHCX_ERROR;
 800512c:	f04f 33ff 	mov.w	r3, #4294967295
 8005130:	e000      	b.n	8005134 <ISM330DHCX_FIFO_Get_Data+0x24>
  }

  return ISM330DHCX_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <ISM330DHCX_FIFO_Get_Data_Word>:
  * @param  pObj the device pObj
  * @param  Acceleration FIFO single data
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data_Word(ISM330DHCX_Object_t *pObj, int16_t *data_raw)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  if (ISM330DHCX_FIFO_Get_Data(pObj, data) != ISM330DHCX_OK)
 8005146:	f107 0308 	add.w	r3, r7, #8
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ffdf 	bl	8005110 <ISM330DHCX_FIFO_Get_Data>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <ISM330DHCX_FIFO_Get_Data_Word+0x22>
  {
    return ISM330DHCX_ERROR;
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	e01d      	b.n	800519a <ISM330DHCX_FIFO_Get_Data_Word+0x5e>
  }

  data_raw[0] = ((int16_t)data[1] << 8) | data[0];
 800515e:	7a7b      	ldrb	r3, [r7, #9]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	b21a      	sxth	r2, r3
 8005164:	7a3b      	ldrb	r3, [r7, #8]
 8005166:	b21b      	sxth	r3, r3
 8005168:	4313      	orrs	r3, r2
 800516a:	b21a      	sxth	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	801a      	strh	r2, [r3, #0]
  data_raw[1] = ((int16_t)data[3] << 8) | data[2];
 8005170:	7afb      	ldrb	r3, [r7, #11]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	b219      	sxth	r1, r3
 8005176:	7abb      	ldrb	r3, [r7, #10]
 8005178:	b21a      	sxth	r2, r3
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	3302      	adds	r3, #2
 800517e:	430a      	orrs	r2, r1
 8005180:	b212      	sxth	r2, r2
 8005182:	801a      	strh	r2, [r3, #0]
  data_raw[2] = ((int16_t)data[5] << 8) | data[4];
 8005184:	7b7b      	ldrb	r3, [r7, #13]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	b219      	sxth	r1, r3
 800518a:	7b3b      	ldrb	r3, [r7, #12]
 800518c:	b21a      	sxth	r2, r3
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	3304      	adds	r3, #4
 8005192:	430a      	orrs	r2, r1
 8005194:	b212      	sxth	r2, r2
 8005196:	801a      	strh	r2, [r3, #0]

  return ISM330DHCX_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80051b0:	edd7 7a00 	vldr	s15, [r7]
 80051b4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80051b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	d801      	bhi.n	80051c6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e058      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80051c6:	edd7 7a00 	vldr	s15, [r7]
 80051ca:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80051ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	d801      	bhi.n	80051dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80051d8:	2302      	movs	r3, #2
 80051da:	e04d      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80051dc:	edd7 7a00 	vldr	s15, [r7]
 80051e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80052a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80051e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	d801      	bhi.n	80051f2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80051ee:	2303      	movs	r3, #3
 80051f0:	e042      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80051f2:	edd7 7a00 	vldr	s15, [r7]
 80051f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80052a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80051fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005202:	d801      	bhi.n	8005208 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005204:	2304      	movs	r3, #4
 8005206:	e037      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005208:	edd7 7a00 	vldr	s15, [r7]
 800520c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80052a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	d801      	bhi.n	800521e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800521a:	2305      	movs	r3, #5
 800521c:	e02c      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800521e:	edd7 7a00 	vldr	s15, [r7]
 8005222:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80052ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	d801      	bhi.n	8005234 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005230:	2306      	movs	r3, #6
 8005232:	e021      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005234:	edd7 7a00 	vldr	s15, [r7]
 8005238:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80052b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800523c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005244:	d801      	bhi.n	800524a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005246:	2307      	movs	r3, #7
 8005248:	e016      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800524a:	edd7 7a00 	vldr	s15, [r7]
 800524e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80052b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525a:	d801      	bhi.n	8005260 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800525c:	2308      	movs	r3, #8
 800525e:	e00b      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005260:	edd7 7a00 	vldr	s15, [r7]
 8005264:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80052b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	d801      	bhi.n	8005276 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005272:	2309      	movs	r3, #9
 8005274:	e000      	b.n	8005278 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005276:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005278:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3320      	adds	r3, #32
 800527e:	7bfa      	ldrb	r2, [r7, #15]
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fa6e 	bl	8005764 <ism330dhcx_xl_data_rate_set>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	e000      	b.n	8005296 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	42500000 	.word	0x42500000
 80052a4:	42d00000 	.word	0x42d00000
 80052a8:	43500000 	.word	0x43500000
 80052ac:	43d00000 	.word	0x43d00000
 80052b0:	44504000 	.word	0x44504000
 80052b4:	44d04000 	.word	0x44d04000
 80052b8:	45504000 	.word	0x45504000

080052bc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80052c8:	edd7 7a00 	vldr	s15, [r7]
 80052cc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80052d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d8:	d801      	bhi.n	80052de <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80052da:	2301      	movs	r3, #1
 80052dc:	e058      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80052de:	edd7 7a00 	vldr	s15, [r7]
 80052e2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80052e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	d801      	bhi.n	80052f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e04d      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80052f4:	edd7 7a00 	vldr	s15, [r7]
 80052f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80053a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80052fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005304:	d801      	bhi.n	800530a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005306:	2303      	movs	r3, #3
 8005308:	e042      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800530a:	edd7 7a00 	vldr	s15, [r7]
 800530e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80053a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531a:	d801      	bhi.n	8005320 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 800531c:	2304      	movs	r3, #4
 800531e:	e037      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005320:	edd7 7a00 	vldr	s15, [r7]
 8005324:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80053ac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800532c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005330:	d801      	bhi.n	8005336 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005332:	2305      	movs	r3, #5
 8005334:	e02c      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005336:	edd7 7a00 	vldr	s15, [r7]
 800533a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80053b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800533e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005346:	d801      	bhi.n	800534c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005348:	2306      	movs	r3, #6
 800534a:	e021      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800534c:	edd7 7a00 	vldr	s15, [r7]
 8005350:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80053b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535c:	d801      	bhi.n	8005362 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800535e:	2307      	movs	r3, #7
 8005360:	e016      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005362:	edd7 7a00 	vldr	s15, [r7]
 8005366:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80053b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800536a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800536e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005372:	d801      	bhi.n	8005378 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005374:	2308      	movs	r3, #8
 8005376:	e00b      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005378:	edd7 7a00 	vldr	s15, [r7]
 800537c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80053bc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005388:	d801      	bhi.n	800538e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800538a:	2309      	movs	r3, #9
 800538c:	e000      	b.n	8005390 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800538e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	42500000 	.word	0x42500000
 80053a8:	42d00000 	.word	0x42d00000
 80053ac:	43500000 	.word	0x43500000
 80053b0:	43d00000 	.word	0x43d00000
 80053b4:	44504000 	.word	0x44504000
 80053b8:	44d04000 	.word	0x44d04000
 80053bc:	45504000 	.word	0x45504000

080053c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80053cc:	edd7 7a00 	vldr	s15, [r7]
 80053d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80053d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	d801      	bhi.n	80053e2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80053de:	2301      	movs	r3, #1
 80053e0:	e058      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80053e2:	edd7 7a00 	vldr	s15, [r7]
 80053e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80053ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f2:	d801      	bhi.n	80053f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e04d      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80053f8:	edd7 7a00 	vldr	s15, [r7]
 80053fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80054bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005408:	d801      	bhi.n	800540e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800540a:	2303      	movs	r3, #3
 800540c:	e042      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800540e:	edd7 7a00 	vldr	s15, [r7]
 8005412:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80054c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	d801      	bhi.n	8005424 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005420:	2304      	movs	r3, #4
 8005422:	e037      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005424:	edd7 7a00 	vldr	s15, [r7]
 8005428:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80054c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800542c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005434:	d801      	bhi.n	800543a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005436:	2305      	movs	r3, #5
 8005438:	e02c      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800543a:	edd7 7a00 	vldr	s15, [r7]
 800543e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80054c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	d801      	bhi.n	8005450 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800544c:	2306      	movs	r3, #6
 800544e:	e021      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005450:	edd7 7a00 	vldr	s15, [r7]
 8005454:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80054cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800545c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005460:	d801      	bhi.n	8005466 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005462:	2307      	movs	r3, #7
 8005464:	e016      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005466:	edd7 7a00 	vldr	s15, [r7]
 800546a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80054d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800546e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005476:	d801      	bhi.n	800547c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005478:	2308      	movs	r3, #8
 800547a:	e00b      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800547c:	edd7 7a00 	vldr	s15, [r7]
 8005480:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80054d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548c:	d801      	bhi.n	8005492 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800548e:	2309      	movs	r3, #9
 8005490:	e000      	b.n	8005494 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005492:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8005494:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3320      	adds	r3, #32
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	4611      	mov	r1, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fbb0 	bl	8005c04 <ism330dhcx_gy_data_rate_set>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	e000      	b.n	80054b2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	42500000 	.word	0x42500000
 80054c0:	42d00000 	.word	0x42d00000
 80054c4:	43500000 	.word	0x43500000
 80054c8:	43d00000 	.word	0x43d00000
 80054cc:	44504000 	.word	0x44504000
 80054d0:	44d04000 	.word	0x44d04000
 80054d4:	45504000 	.word	0x45504000

080054d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80054e4:	edd7 7a00 	vldr	s15, [r7]
 80054e8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80054ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	d801      	bhi.n	80054fa <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e058      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80054fa:	edd7 7a00 	vldr	s15, [r7]
 80054fe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	d801      	bhi.n	8005510 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800550c:	2302      	movs	r3, #2
 800550e:	e04d      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005510:	edd7 7a00 	vldr	s15, [r7]
 8005514:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80055c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	d801      	bhi.n	8005526 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005522:	2303      	movs	r3, #3
 8005524:	e042      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005526:	edd7 7a00 	vldr	s15, [r7]
 800552a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80055c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800552e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005536:	d801      	bhi.n	800553c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005538:	2304      	movs	r3, #4
 800553a:	e037      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800553c:	edd7 7a00 	vldr	s15, [r7]
 8005540:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80055c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	d801      	bhi.n	8005552 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800554e:	2305      	movs	r3, #5
 8005550:	e02c      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005552:	edd7 7a00 	vldr	s15, [r7]
 8005556:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80055cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800555a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005562:	d801      	bhi.n	8005568 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005564:	2306      	movs	r3, #6
 8005566:	e021      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005568:	edd7 7a00 	vldr	s15, [r7]
 800556c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80055d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005578:	d801      	bhi.n	800557e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800557a:	2307      	movs	r3, #7
 800557c:	e016      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800557e:	edd7 7a00 	vldr	s15, [r7]
 8005582:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80055d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d801      	bhi.n	8005594 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005590:	2308      	movs	r3, #8
 8005592:	e00b      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005594:	edd7 7a00 	vldr	s15, [r7]
 8005598:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80055d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800559c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a4:	d801      	bhi.n	80055aa <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80055a6:	2309      	movs	r3, #9
 80055a8:	e000      	b.n	80055ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055aa:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	42500000 	.word	0x42500000
 80055c4:	42d00000 	.word	0x42d00000
 80055c8:	43500000 	.word	0x43500000
 80055cc:	43d00000 	.word	0x43d00000
 80055d0:	44504000 	.word	0x44504000
 80055d4:	44d04000 	.word	0x44d04000
 80055d8:	45504000 	.word	0x45504000

080055dc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	461a      	mov	r2, r3
 80055e8:	460b      	mov	r3, r1
 80055ea:	72fb      	strb	r3, [r7, #11]
 80055ec:	4613      	mov	r3, r2
 80055ee:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	695c      	ldr	r4, [r3, #20]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	7b1b      	ldrb	r3, [r3, #12]
 80055fc:	b298      	uxth	r0, r3
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	b299      	uxth	r1, r3
 8005602:	893b      	ldrh	r3, [r7, #8]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	47a0      	blx	r4
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}

08005612 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005612:	b590      	push	{r4, r7, lr}
 8005614:	b087      	sub	sp, #28
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	461a      	mov	r2, r3
 800561e:	460b      	mov	r3, r1
 8005620:	72fb      	strb	r3, [r7, #11]
 8005622:	4613      	mov	r3, r2
 8005624:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	691c      	ldr	r4, [r3, #16]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	7b1b      	ldrb	r3, [r3, #12]
 8005632:	b298      	uxth	r0, r3
 8005634:	7afb      	ldrb	r3, [r7, #11]
 8005636:	b299      	uxth	r1, r3
 8005638:	893b      	ldrh	r3, [r7, #8]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	47a0      	blx	r4
 800563e:	4603      	mov	r3, r0
}
 8005640:	4618      	mov	r0, r3
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd90      	pop	{r4, r7, pc}

08005648 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	461a      	mov	r2, r3
 8005654:	460b      	mov	r3, r1
 8005656:	72fb      	strb	r3, [r7, #11]
 8005658:	4613      	mov	r3, r2
 800565a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685c      	ldr	r4, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68d8      	ldr	r0, [r3, #12]
 8005664:	893b      	ldrh	r3, [r7, #8]
 8005666:	7af9      	ldrb	r1, [r7, #11]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	47a0      	blx	r4
 800566c:	6178      	str	r0, [r7, #20]

  return ret;
 800566e:	697b      	ldr	r3, [r7, #20]
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	bd90      	pop	{r4, r7, pc}

08005678 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	461a      	mov	r2, r3
 8005684:	460b      	mov	r3, r1
 8005686:	72fb      	strb	r3, [r7, #11]
 8005688:	4613      	mov	r3, r2
 800568a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681c      	ldr	r4, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68d8      	ldr	r0, [r3, #12]
 8005694:	893b      	ldrh	r3, [r7, #8]
 8005696:	7af9      	ldrb	r1, [r7, #11]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	47a0      	blx	r4
 800569c:	6178      	str	r0, [r7, #20]

  return ret;
 800569e:	697b      	ldr	r3, [r7, #20]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd90      	pop	{r4, r7, pc}

080056a8 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80056b4:	f107 0208 	add.w	r2, r7, #8
 80056b8:	2301      	movs	r3, #1
 80056ba:	2110      	movs	r1, #16
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ffc3 	bl	8005648 <ism330dhcx_read_reg>
 80056c2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	7a3b      	ldrb	r3, [r7, #8]
 80056d4:	f362 0383 	bfi	r3, r2, #2, #2
 80056d8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80056da:	f107 0208 	add.w	r2, r7, #8
 80056de:	2301      	movs	r3, #1
 80056e0:	2110      	movs	r1, #16
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff ffc8 	bl	8005678 <ism330dhcx_write_reg>
 80056e8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80056fe:	f107 0208 	add.w	r2, r7, #8
 8005702:	2301      	movs	r3, #1
 8005704:	2110      	movs	r1, #16
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ff9e 	bl	8005648 <ism330dhcx_read_reg>
 800570c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 800570e:	7a3b      	ldrb	r3, [r7, #8]
 8005710:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b03      	cmp	r3, #3
 8005718:	d81a      	bhi.n	8005750 <ism330dhcx_xl_full_scale_get+0x5c>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <ism330dhcx_xl_full_scale_get+0x2c>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005731 	.word	0x08005731
 8005724:	08005739 	.word	0x08005739
 8005728:	08005741 	.word	0x08005741
 800572c:	08005749 	.word	0x08005749
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
      break;
 8005736:	e00f      	b.n	8005758 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
      break;
 800573e:	e00b      	b.n	8005758 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2202      	movs	r2, #2
 8005744:	701a      	strb	r2, [r3, #0]
      break;
 8005746:	e007      	b.n	8005758 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2203      	movs	r2, #3
 800574c:	701a      	strb	r2, [r3, #0]
      break;
 800574e:	e003      	b.n	8005758 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	bf00      	nop
  }

  return ret;
 8005758:	68fb      	ldr	r3, [r7, #12]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop

08005764 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005774:	f107 030c 	add.w	r3, r7, #12
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fe58 	bl	8006430 <ism330dhcx_fsm_enable_get>
 8005780:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 80c4 	bne.w	8005912 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800578a:	7b3b      	ldrb	r3, [r7, #12]
 800578c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005790:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005792:	7b3b      	ldrb	r3, [r7, #12]
 8005794:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005798:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800579a:	4313      	orrs	r3, r2
 800579c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800579e:	7b3b      	ldrb	r3, [r7, #12]
 80057a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80057a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80057aa:	7b3b      	ldrb	r3, [r7, #12]
 80057ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80057b2:	4313      	orrs	r3, r2
 80057b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80057b6:	7b3b      	ldrb	r3, [r7, #12]
 80057b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80057be:	4313      	orrs	r3, r2
 80057c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80057c2:	7b3b      	ldrb	r3, [r7, #12]
 80057c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80057c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80057ce:	7b3b      	ldrb	r3, [r7, #12]
 80057d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80057d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80057da:	7b3b      	ldrb	r3, [r7, #12]
 80057dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80057e2:	4313      	orrs	r3, r2
 80057e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80057e6:	7b7b      	ldrb	r3, [r7, #13]
 80057e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80057ee:	4313      	orrs	r3, r2
 80057f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80057f2:	7b7b      	ldrb	r3, [r7, #13]
 80057f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80057fa:	4313      	orrs	r3, r2
 80057fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80057fe:	7b7b      	ldrb	r3, [r7, #13]
 8005800:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005806:	4313      	orrs	r3, r2
 8005808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800580a:	7b7b      	ldrb	r3, [r7, #13]
 800580c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005812:	4313      	orrs	r3, r2
 8005814:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005816:	7b7b      	ldrb	r3, [r7, #13]
 8005818:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800581c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800581e:	4313      	orrs	r3, r2
 8005820:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005822:	7b7b      	ldrb	r3, [r7, #13]
 8005824:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005828:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800582a:	4313      	orrs	r3, r2
 800582c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800582e:	7b7b      	ldrb	r3, [r7, #13]
 8005830:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005834:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005836:	4313      	orrs	r3, r2
 8005838:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800583a:	7b7b      	ldrb	r3, [r7, #13]
 800583c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005840:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005842:	4313      	orrs	r3, r2
 8005844:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005846:	2b01      	cmp	r3, #1
 8005848:	d163      	bne.n	8005912 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800584a:	f107 030b 	add.w	r3, r7, #11
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fe19 	bl	8006488 <ism330dhcx_fsm_data_rate_get>
 8005856:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d159      	bne.n	8005912 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800585e:	7afb      	ldrb	r3, [r7, #11]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d853      	bhi.n	800590c <ism330dhcx_xl_data_rate_set+0x1a8>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <ism330dhcx_xl_data_rate_set+0x108>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	0800587d 	.word	0x0800587d
 8005870:	0800588f 	.word	0x0800588f
 8005874:	080058ad 	.word	0x080058ad
 8005878:	080058d7 	.word	0x080058d7
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8005882:	2301      	movs	r3, #1
 8005884:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005886:	e045      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	75fb      	strb	r3, [r7, #23]
            break;
 800588c:	e042      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005894:	2302      	movs	r3, #2
 8005896:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005898:	e03c      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d102      	bne.n	80058a6 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80058a0:	2302      	movs	r3, #2
 80058a2:	75fb      	strb	r3, [r7, #23]
            break;
 80058a4:	e036      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	75fb      	strb	r3, [r7, #23]
            break;
 80058aa:	e033      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80058b2:	2303      	movs	r3, #3
 80058b4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80058b6:	e02d      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d102      	bne.n	80058c4 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80058be:	2303      	movs	r3, #3
 80058c0:	75fb      	strb	r3, [r7, #23]
            break;
 80058c2:	e027      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d102      	bne.n	80058d0 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80058ca:	2303      	movs	r3, #3
 80058cc:	75fb      	strb	r3, [r7, #23]
            break;
 80058ce:	e021      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	75fb      	strb	r3, [r7, #23]
            break;
 80058d4:	e01e      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80058dc:	2304      	movs	r3, #4
 80058de:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80058e0:	e018      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d102      	bne.n	80058ee <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80058e8:	2304      	movs	r3, #4
 80058ea:	75fb      	strb	r3, [r7, #23]
            break;
 80058ec:	e012      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d102      	bne.n	80058fa <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80058f4:	2304      	movs	r3, #4
 80058f6:	75fb      	strb	r3, [r7, #23]
            break;
 80058f8:	e00c      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d102      	bne.n	8005906 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005900:	2304      	movs	r3, #4
 8005902:	75fb      	strb	r3, [r7, #23]
            break;
 8005904:	e006      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	75fb      	strb	r3, [r7, #23]
            break;
 800590a:	e003      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	75fb      	strb	r3, [r7, #23]
            break;
 8005910:	e000      	b.n	8005914 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8005912:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005914:	2300      	movs	r3, #0
 8005916:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d16d      	bne.n	80059fa <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800591e:	f107 030a 	add.w	r3, r7, #10
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fdf7 	bl	8006518 <ism330dhcx_mlc_get>
 800592a:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800592c:	7abb      	ldrb	r3, [r7, #10]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d163      	bne.n	80059fa <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005932:	f107 0309 	add.w	r3, r7, #9
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fe17 	bl	800656c <ism330dhcx_mlc_data_rate_get>
 800593e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d159      	bne.n	80059fa <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8005946:	7a7b      	ldrb	r3, [r7, #9]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d853      	bhi.n	80059f4 <ism330dhcx_xl_data_rate_set+0x290>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <ism330dhcx_xl_data_rate_set+0x1f0>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005965 	.word	0x08005965
 8005958:	08005977 	.word	0x08005977
 800595c:	08005995 	.word	0x08005995
 8005960:	080059bf 	.word	0x080059bf
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800596e:	e045      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	75fb      	strb	r3, [r7, #23]
            break;
 8005974:	e042      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800597c:	2302      	movs	r3, #2
 800597e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005980:	e03c      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d102      	bne.n	800598e <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005988:	2302      	movs	r3, #2
 800598a:	75fb      	strb	r3, [r7, #23]
            break;
 800598c:	e036      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	75fb      	strb	r3, [r7, #23]
            break;
 8005992:	e033      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800599a:	2303      	movs	r3, #3
 800599c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800599e:	e02d      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d102      	bne.n	80059ac <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80059a6:	2303      	movs	r3, #3
 80059a8:	75fb      	strb	r3, [r7, #23]
            break;
 80059aa:	e027      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d102      	bne.n	80059b8 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80059b2:	2303      	movs	r3, #3
 80059b4:	75fb      	strb	r3, [r7, #23]
            break;
 80059b6:	e021      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	75fb      	strb	r3, [r7, #23]
            break;
 80059bc:	e01e      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059c4:	2304      	movs	r3, #4
 80059c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80059c8:	e018      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059d0:	2304      	movs	r3, #4
 80059d2:	75fb      	strb	r3, [r7, #23]
            break;
 80059d4:	e012      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d102      	bne.n	80059e2 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059dc:	2304      	movs	r3, #4
 80059de:	75fb      	strb	r3, [r7, #23]
            break;
 80059e0:	e00c      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d102      	bne.n	80059ee <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80059e8:	2304      	movs	r3, #4
 80059ea:	75fb      	strb	r3, [r7, #23]
            break;
 80059ec:	e006      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	75fb      	strb	r3, [r7, #23]
            break;
 80059f2:	e003      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	75fb      	strb	r3, [r7, #23]
            break;
 80059f8:	e000      	b.n	80059fc <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 80059fa:	bf00      	nop
    }
  }

  if (ret == 0)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d107      	bne.n	8005a12 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005a02:	f107 0208 	add.w	r2, r7, #8
 8005a06:	2301      	movs	r3, #1
 8005a08:	2110      	movs	r1, #16
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fe1c 	bl	8005648 <ism330dhcx_read_reg>
 8005a10:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10f      	bne.n	8005a38 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	7a3b      	ldrb	r3, [r7, #8]
 8005a22:	f362 1307 	bfi	r3, r2, #4, #4
 8005a26:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005a28:	f107 0208 	add.w	r2, r7, #8
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	2110      	movs	r1, #16
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fe21 	bl	8005678 <ism330dhcx_write_reg>
 8005a36:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005a38:	693b      	ldr	r3, [r7, #16]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop

08005a44 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005a4e:	f107 0208 	add.w	r2, r7, #8
 8005a52:	2301      	movs	r3, #1
 8005a54:	2110      	movs	r1, #16
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff fdf6 	bl	8005648 <ism330dhcx_read_reg>
 8005a5c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8005a5e:	7a3b      	ldrb	r3, [r7, #8]
 8005a60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b0b      	cmp	r3, #11
 8005a68:	d84a      	bhi.n	8005b00 <ism330dhcx_xl_data_rate_get+0xbc>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <ism330dhcx_xl_data_rate_get+0x2c>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aa9 	.word	0x08005aa9
 8005a78:	08005ab1 	.word	0x08005ab1
 8005a7c:	08005ab9 	.word	0x08005ab9
 8005a80:	08005ac1 	.word	0x08005ac1
 8005a84:	08005ac9 	.word	0x08005ac9
 8005a88:	08005ad1 	.word	0x08005ad1
 8005a8c:	08005ad9 	.word	0x08005ad9
 8005a90:	08005ae1 	.word	0x08005ae1
 8005a94:	08005ae9 	.word	0x08005ae9
 8005a98:	08005af1 	.word	0x08005af1
 8005a9c:	08005af9 	.word	0x08005af9
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
      break;
 8005aa6:	e02f      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
      break;
 8005aae:	e02b      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	701a      	strb	r2, [r3, #0]
      break;
 8005ab6:	e027      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2203      	movs	r2, #3
 8005abc:	701a      	strb	r2, [r3, #0]
      break;
 8005abe:	e023      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	701a      	strb	r2, [r3, #0]
      break;
 8005ac6:	e01f      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2205      	movs	r2, #5
 8005acc:	701a      	strb	r2, [r3, #0]
      break;
 8005ace:	e01b      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2206      	movs	r2, #6
 8005ad4:	701a      	strb	r2, [r3, #0]
      break;
 8005ad6:	e017      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2207      	movs	r2, #7
 8005adc:	701a      	strb	r2, [r3, #0]
      break;
 8005ade:	e013      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	701a      	strb	r2, [r3, #0]
      break;
 8005ae6:	e00f      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2209      	movs	r2, #9
 8005aec:	701a      	strb	r2, [r3, #0]
      break;
 8005aee:	e00b      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	220a      	movs	r2, #10
 8005af4:	701a      	strb	r2, [r3, #0]
      break;
 8005af6:	e007      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	220b      	movs	r2, #11
 8005afc:	701a      	strb	r2, [r3, #0]
      break;
 8005afe:	e003      	b.n	8005b08 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
      break;
 8005b06:	bf00      	nop
  }

  return ret;
 8005b08:	68fb      	ldr	r3, [r7, #12]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop

08005b14 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005b20:	f107 0208 	add.w	r2, r7, #8
 8005b24:	2301      	movs	r3, #1
 8005b26:	2111      	movs	r1, #17
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fd8d 	bl	8005648 <ism330dhcx_read_reg>
 8005b2e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	7a3b      	ldrb	r3, [r7, #8]
 8005b40:	f362 0303 	bfi	r3, r2, #0, #4
 8005b44:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005b46:	f107 0208 	add.w	r2, r7, #8
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	2111      	movs	r1, #17
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fd92 	bl	8005678 <ism330dhcx_write_reg>
 8005b54:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005b56:	68fb      	ldr	r3, [r7, #12]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005b6a:	f107 0208 	add.w	r2, r7, #8
 8005b6e:	2301      	movs	r3, #1
 8005b70:	2111      	movs	r1, #17
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fd68 	bl	8005648 <ism330dhcx_read_reg>
 8005b78:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8005b7a:	7a3b      	ldrb	r3, [r7, #8]
 8005b7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d834      	bhi.n	8005bf0 <ism330dhcx_gy_full_scale_get+0x90>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <ism330dhcx_gy_full_scale_get+0x2c>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005bc9 	.word	0x08005bc9
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005bf1 	.word	0x08005bf1
 8005ba8:	08005bf1 	.word	0x08005bf1
 8005bac:	08005bd9 	.word	0x08005bd9
 8005bb0:	08005bf1 	.word	0x08005bf1
 8005bb4:	08005bf1 	.word	0x08005bf1
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005be1 	.word	0x08005be1
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	701a      	strb	r2, [r3, #0]
      break;
 8005bc6:	e017      	b.n	8005bf8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
      break;
 8005bce:	e013      	b.n	8005bf8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	701a      	strb	r2, [r3, #0]
      break;
 8005bd6:	e00f      	b.n	8005bf8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2208      	movs	r2, #8
 8005bdc:	701a      	strb	r2, [r3, #0]
      break;
 8005bde:	e00b      	b.n	8005bf8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	220c      	movs	r2, #12
 8005be4:	701a      	strb	r2, [r3, #0]
      break;
 8005be6:	e007      	b.n	8005bf8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
      break;
 8005bee:	e003      	b.n	8005bf8 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	701a      	strb	r2, [r3, #0]
      break;
 8005bf6:	bf00      	nop
  }

  return ret;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop

08005c04 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fc08 	bl	8006430 <ism330dhcx_fsm_enable_get>
 8005c20:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 80c4 	bne.w	8005db2 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005c2a:	7b3b      	ldrb	r3, [r7, #12]
 8005c2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005c32:	7b3b      	ldrb	r3, [r7, #12]
 8005c34:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c38:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005c3e:	7b3b      	ldrb	r3, [r7, #12]
 8005c40:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005c4a:	7b3b      	ldrb	r3, [r7, #12]
 8005c4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005c52:	4313      	orrs	r3, r2
 8005c54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005c56:	7b3b      	ldrb	r3, [r7, #12]
 8005c58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005c62:	7b3b      	ldrb	r3, [r7, #12]
 8005c64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005c6e:	7b3b      	ldrb	r3, [r7, #12]
 8005c70:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005c74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005c76:	4313      	orrs	r3, r2
 8005c78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005c7a:	7b3b      	ldrb	r3, [r7, #12]
 8005c7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005c86:	7b7b      	ldrb	r3, [r7, #13]
 8005c88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005c92:	7b7b      	ldrb	r3, [r7, #13]
 8005c94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005c9e:	7b7b      	ldrb	r3, [r7, #13]
 8005ca0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ca4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005caa:	7b7b      	ldrb	r3, [r7, #13]
 8005cac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005cb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005cb6:	7b7b      	ldrb	r3, [r7, #13]
 8005cb8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005cbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005cc2:	7b7b      	ldrb	r3, [r7, #13]
 8005cc4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005cc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005cce:	7b7b      	ldrb	r3, [r7, #13]
 8005cd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005cd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005cda:	7b7b      	ldrb	r3, [r7, #13]
 8005cdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005ce0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d163      	bne.n	8005db2 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005cea:	f107 030b 	add.w	r3, r7, #11
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fbc9 	bl	8006488 <ism330dhcx_fsm_data_rate_get>
 8005cf6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d159      	bne.n	8005db2 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d853      	bhi.n	8005dac <ism330dhcx_gy_data_rate_set+0x1a8>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <ism330dhcx_gy_data_rate_set+0x108>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d2f 	.word	0x08005d2f
 8005d14:	08005d4d 	.word	0x08005d4d
 8005d18:	08005d77 	.word	0x08005d77
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d26:	e045      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005d2c:	e042      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005d34:	2302      	movs	r3, #2
 8005d36:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d38:	e03c      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d102      	bne.n	8005d46 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005d40:	2302      	movs	r3, #2
 8005d42:	75fb      	strb	r3, [r7, #23]
            break;
 8005d44:	e036      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	75fb      	strb	r3, [r7, #23]
            break;
 8005d4a:	e033      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d102      	bne.n	8005d58 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005d52:	2303      	movs	r3, #3
 8005d54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d56:	e02d      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	75fb      	strb	r3, [r7, #23]
            break;
 8005d62:	e027      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d102      	bne.n	8005d70 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	75fb      	strb	r3, [r7, #23]
            break;
 8005d6e:	e021      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	75fb      	strb	r3, [r7, #23]
            break;
 8005d74:	e01e      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d80:	e018      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005d88:	2304      	movs	r3, #4
 8005d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8005d8c:	e012      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d102      	bne.n	8005d9a <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005d94:	2304      	movs	r3, #4
 8005d96:	75fb      	strb	r3, [r7, #23]
            break;
 8005d98:	e00c      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d102      	bne.n	8005da6 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005da0:	2304      	movs	r3, #4
 8005da2:	75fb      	strb	r3, [r7, #23]
            break;
 8005da4:	e006      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	75fb      	strb	r3, [r7, #23]
            break;
 8005daa:	e003      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	75fb      	strb	r3, [r7, #23]
            break;
 8005db0:	e000      	b.n	8005db4 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8005db2:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d16d      	bne.n	8005e9a <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005dbe:	f107 030a 	add.w	r3, r7, #10
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fba7 	bl	8006518 <ism330dhcx_mlc_get>
 8005dca:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005dcc:	7abb      	ldrb	r3, [r7, #10]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d163      	bne.n	8005e9a <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005dd2:	f107 0309 	add.w	r3, r7, #9
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fbc7 	bl	800656c <ism330dhcx_mlc_data_rate_get>
 8005dde:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d159      	bne.n	8005e9a <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8005de6:	7a7b      	ldrb	r3, [r7, #9]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d853      	bhi.n	8005e94 <ism330dhcx_gy_data_rate_set+0x290>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <ism330dhcx_gy_data_rate_set+0x1f0>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e17 	.word	0x08005e17
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e5f 	.word	0x08005e5f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e0e:	e045      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	75fb      	strb	r3, [r7, #23]
            break;
 8005e14:	e042      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e20:	e03c      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e2c:	e036      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	75fb      	strb	r3, [r7, #23]
            break;
 8005e32:	e033      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e3e:	e02d      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d102      	bne.n	8005e4c <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e46:	2303      	movs	r3, #3
 8005e48:	75fb      	strb	r3, [r7, #23]
            break;
 8005e4a:	e027      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d102      	bne.n	8005e58 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e52:	2303      	movs	r3, #3
 8005e54:	75fb      	strb	r3, [r7, #23]
            break;
 8005e56:	e021      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e5c:	e01e      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e64:	2304      	movs	r3, #4
 8005e66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e68:	e018      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d102      	bne.n	8005e76 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e70:	2304      	movs	r3, #4
 8005e72:	75fb      	strb	r3, [r7, #23]
            break;
 8005e74:	e012      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d102      	bne.n	8005e82 <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e80:	e00c      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d102      	bne.n	8005e8e <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005e88:	2304      	movs	r3, #4
 8005e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e8c:	e006      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	75fb      	strb	r3, [r7, #23]
            break;
 8005e92:	e003      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	75fb      	strb	r3, [r7, #23]
            break;
 8005e98:	e000      	b.n	8005e9c <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8005e9a:	bf00      	nop
    }
  }

  if (ret == 0)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d107      	bne.n	8005eb2 <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005ea2:	f107 0208 	add.w	r2, r7, #8
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	2111      	movs	r1, #17
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fbcc 	bl	8005648 <ism330dhcx_read_reg>
 8005eb0:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10f      	bne.n	8005ed8 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	7a3b      	ldrb	r3, [r7, #8]
 8005ec2:	f362 1307 	bfi	r3, r2, #4, #4
 8005ec6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005ec8:	f107 0208 	add.w	r2, r7, #8
 8005ecc:	2301      	movs	r3, #1
 8005ece:	2111      	movs	r1, #17
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fbd1 	bl	8005678 <ism330dhcx_write_reg>
 8005ed6:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005ed8:	693b      	ldr	r3, [r7, #16]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop

08005ee4 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005eee:	f107 0208 	add.w	r2, r7, #8
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	2111      	movs	r1, #17
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fba6 	bl	8005648 <ism330dhcx_read_reg>
 8005efc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8005efe:	7a3b      	ldrb	r3, [r7, #8]
 8005f00:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b0a      	cmp	r3, #10
 8005f08:	d844      	bhi.n	8005f94 <ism330dhcx_gy_data_rate_get+0xb0>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <ism330dhcx_gy_data_rate_get+0x2c>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f3d 	.word	0x08005f3d
 8005f14:	08005f45 	.word	0x08005f45
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08005f55 	.word	0x08005f55
 8005f20:	08005f5d 	.word	0x08005f5d
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f75 	.word	0x08005f75
 8005f30:	08005f7d 	.word	0x08005f7d
 8005f34:	08005f85 	.word	0x08005f85
 8005f38:	08005f8d 	.word	0x08005f8d
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	701a      	strb	r2, [r3, #0]
      break;
 8005f42:	e02b      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
      break;
 8005f4a:	e027      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
      break;
 8005f52:	e023      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2203      	movs	r2, #3
 8005f58:	701a      	strb	r2, [r3, #0]
      break;
 8005f5a:	e01f      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	701a      	strb	r2, [r3, #0]
      break;
 8005f62:	e01b      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2205      	movs	r2, #5
 8005f68:	701a      	strb	r2, [r3, #0]
      break;
 8005f6a:	e017      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2206      	movs	r2, #6
 8005f70:	701a      	strb	r2, [r3, #0]
      break;
 8005f72:	e013      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2207      	movs	r2, #7
 8005f78:	701a      	strb	r2, [r3, #0]
      break;
 8005f7a:	e00f      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2208      	movs	r2, #8
 8005f80:	701a      	strb	r2, [r3, #0]
      break;
 8005f82:	e00b      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2209      	movs	r2, #9
 8005f88:	701a      	strb	r2, [r3, #0]
      break;
 8005f8a:	e007      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	220a      	movs	r2, #10
 8005f90:	701a      	strb	r2, [r3, #0]
      break;
 8005f92:	e003      	b.n	8005f9c <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
      break;
 8005f9a:	bf00      	nop
  }

  return ret;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop

08005fa8 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005fb4:	f107 0208 	add.w	r2, r7, #8
 8005fb8:	2301      	movs	r3, #1
 8005fba:	2112      	movs	r1, #18
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fb43 	bl	8005648 <ism330dhcx_read_reg>
 8005fc2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	7a3b      	ldrb	r3, [r7, #8]
 8005fd4:	f362 1386 	bfi	r3, r2, #6, #1
 8005fd8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005fda:	f107 0208 	add.w	r2, r7, #8
 8005fde:	2301      	movs	r3, #1
 8005fe0:	2112      	movs	r1, #18
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff fb48 	bl	8005678 <ism330dhcx_write_reg>
 8005fe8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005ffe:	f107 020c 	add.w	r2, r7, #12
 8006002:	2306      	movs	r3, #6
 8006004:	2122      	movs	r1, #34	; 0x22
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fb1e 	bl	8005648 <ism330dhcx_read_reg>
 800600c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800600e:	7b7b      	ldrb	r3, [r7, #13]
 8006010:	b21a      	sxth	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800601c:	b29b      	uxth	r3, r3
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	b29a      	uxth	r2, r3
 8006022:	7b3b      	ldrb	r3, [r7, #12]
 8006024:	b29b      	uxth	r3, r3
 8006026:	4413      	add	r3, r2
 8006028:	b29b      	uxth	r3, r3
 800602a:	b21a      	sxth	r2, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006030:	7bfa      	ldrb	r2, [r7, #15]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	3302      	adds	r3, #2
 8006036:	b212      	sxth	r2, r2
 8006038:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	3302      	adds	r3, #2
 800603e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006042:	b29b      	uxth	r3, r3
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	b29a      	uxth	r2, r3
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	b29b      	uxth	r3, r3
 800604c:	4413      	add	r3, r2
 800604e:	b29a      	uxth	r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	3302      	adds	r3, #2
 8006054:	b212      	sxth	r2, r2
 8006056:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006058:	7c7a      	ldrb	r2, [r7, #17]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	3304      	adds	r3, #4
 800605e:	b212      	sxth	r2, r2
 8006060:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	3304      	adds	r3, #4
 8006066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800606a:	b29b      	uxth	r3, r3
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	b29a      	uxth	r2, r3
 8006070:	7c3b      	ldrb	r3, [r7, #16]
 8006072:	b29b      	uxth	r3, r3
 8006074:	4413      	add	r3, r2
 8006076:	b29a      	uxth	r2, r3
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	3304      	adds	r3, #4
 800607c:	b212      	sxth	r2, r2
 800607e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006080:	697b      	ldr	r3, [r7, #20]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8006094:	f107 020c 	add.w	r2, r7, #12
 8006098:	2306      	movs	r3, #6
 800609a:	2128      	movs	r1, #40	; 0x28
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fad3 	bl	8005648 <ism330dhcx_read_reg>
 80060a2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80060a4:	7b7b      	ldrb	r3, [r7, #13]
 80060a6:	b21a      	sxth	r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	7b3b      	ldrb	r3, [r7, #12]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	4413      	add	r3, r2
 80060be:	b29b      	uxth	r3, r3
 80060c0:	b21a      	sxth	r2, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	3302      	adds	r3, #2
 80060cc:	b212      	sxth	r2, r2
 80060ce:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	3302      	adds	r3, #2
 80060d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	b29a      	uxth	r2, r3
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	3302      	adds	r3, #2
 80060ea:	b212      	sxth	r2, r2
 80060ec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80060ee:	7c7a      	ldrb	r2, [r7, #17]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	3304      	adds	r3, #4
 80060f4:	b212      	sxth	r2, r2
 80060f6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	3304      	adds	r3, #4
 80060fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006100:	b29b      	uxth	r3, r3
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	b29a      	uxth	r2, r3
 8006106:	7c3b      	ldrb	r3, [r7, #16]
 8006108:	b29b      	uxth	r3, r3
 800610a:	4413      	add	r3, r2
 800610c:	b29a      	uxth	r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	3304      	adds	r3, #4
 8006112:	b212      	sxth	r2, r2
 8006114:	801a      	strh	r2, [r3, #0]

  return ret;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <ism330dhcx_fifo_out_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_out_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_X_L, buff, 6);
 800612a:	2306      	movs	r3, #6
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	2179      	movs	r1, #121	; 0x79
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fa89 	bl	8005648 <ism330dhcx_read_reg>
 8006136:	60f8      	str	r0, [r7, #12]

  return ret;
 8006138:	68fb      	ldr	r3, [r7, #12]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 800614e:	f107 0208 	add.w	r2, r7, #8
 8006152:	2301      	movs	r3, #1
 8006154:	2118      	movs	r1, #24
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fa76 	bl	8005648 <ism330dhcx_read_reg>
 800615c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	b2da      	uxtb	r2, r3
 800616c:	7a3b      	ldrb	r3, [r7, #8]
 800616e:	f362 0341 	bfi	r3, r2, #1, #1
 8006172:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8006174:	f107 0208 	add.w	r2, r7, #8
 8006178:	2301      	movs	r3, #1
 800617a:	2118      	movs	r1, #24
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fa7b 	bl	8005678 <ism330dhcx_write_reg>
 8006182:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8006184:	68fb      	ldr	r3, [r7, #12]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800619a:	f107 0208 	add.w	r2, r7, #8
 800619e:	2301      	movs	r3, #1
 80061a0:	2101      	movs	r1, #1
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fa50 	bl	8005648 <ism330dhcx_read_reg>
 80061a8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10f      	bne.n	80061d0 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	7a3b      	ldrb	r3, [r7, #8]
 80061ba:	f362 1387 	bfi	r3, r2, #6, #2
 80061be:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80061c0:	f107 0208 	add.w	r2, r7, #8
 80061c4:	2301      	movs	r3, #1
 80061c6:	2101      	movs	r1, #1
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fa55 	bl	8005678 <ism330dhcx_write_reg>
 80061ce:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80061d0:	68fb      	ldr	r3, [r7, #12]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80061e4:	2301      	movs	r3, #1
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	210f      	movs	r1, #15
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fa2c 	bl	8005648 <ism330dhcx_read_reg>
 80061f0:	60f8      	str	r0, [r7, #12]

  return ret;
 80061f2:	68fb      	ldr	r3, [r7, #12]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8006208:	f107 0208 	add.w	r2, r7, #8
 800620c:	2301      	movs	r3, #1
 800620e:	2112      	movs	r1, #18
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fa19 	bl	8005648 <ism330dhcx_read_reg>
 8006216:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	7a3b      	ldrb	r3, [r7, #8]
 8006228:	f362 0300 	bfi	r3, r2, #0, #1
 800622c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800622e:	f107 0208 	add.w	r2, r7, #8
 8006232:	2301      	movs	r3, #1
 8006234:	2112      	movs	r1, #18
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fa1e 	bl	8005678 <ism330dhcx_write_reg>
 800623c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8006254:	f107 0208 	add.w	r2, r7, #8
 8006258:	2301      	movs	r3, #1
 800625a:	2112      	movs	r1, #18
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff f9f3 	bl	8005648 <ism330dhcx_read_reg>
 8006262:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10f      	bne.n	800628a <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	b2da      	uxtb	r2, r3
 8006272:	7a3b      	ldrb	r3, [r7, #8]
 8006274:	f362 0382 	bfi	r3, r2, #2, #1
 8006278:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800627a:	f107 0208 	add.w	r2, r7, #8
 800627e:	2301      	movs	r3, #1
 8006280:	2112      	movs	r1, #18
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff f9f8 	bl	8005678 <ism330dhcx_write_reg>
 8006288:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800628a:	68fb      	ldr	r3, [r7, #12]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80062a0:	f107 020c 	add.w	r2, r7, #12
 80062a4:	2301      	movs	r3, #1
 80062a6:	2108      	movs	r1, #8
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff f9cd 	bl	8005648 <ism330dhcx_read_reg>
 80062ae:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d111      	bne.n	80062da <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 80062b6:	887b      	ldrh	r3, [r7, #2]
 80062b8:	0a1b      	lsrs	r3, r3, #8
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	7b3b      	ldrb	r3, [r7, #12]
 80062c4:	f362 0300 	bfi	r3, r2, #0, #1
 80062c8:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80062ca:	f107 020c 	add.w	r2, r7, #12
 80062ce:	2301      	movs	r3, #1
 80062d0:	2108      	movs	r1, #8
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff f9d0 	bl	8005678 <ism330dhcx_write_reg>
 80062d8:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 80062e6:	f107 0210 	add.w	r2, r7, #16
 80062ea:	2301      	movs	r3, #1
 80062ec:	2107      	movs	r1, #7
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff f9c2 	bl	8005678 <ism330dhcx_write_reg>
 80062f4:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 80062f6:	697b      	ldr	r3, [r7, #20]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <ism330dhcx_fifo_stop_on_wtm_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800630c:	f107 0208 	add.w	r2, r7, #8
 8006310:	2301      	movs	r3, #1
 8006312:	2108      	movs	r1, #8
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff f997 	bl	8005648 <ism330dhcx_read_reg>
 800631a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <ism330dhcx_fifo_stop_on_wtm_set+0x42>
  {
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	b2da      	uxtb	r2, r3
 800632a:	7a3b      	ldrb	r3, [r7, #8]
 800632c:	f362 13c7 	bfi	r3, r2, #7, #1
 8006330:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8006332:	f107 0208 	add.w	r2, r7, #8
 8006336:	2301      	movs	r3, #1
 8006338:	2108      	movs	r1, #8
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff f99c 	bl	8005678 <ism330dhcx_write_reg>
 8006340:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8006358:	f107 0208 	add.w	r2, r7, #8
 800635c:	2301      	movs	r3, #1
 800635e:	2109      	movs	r1, #9
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff f971 	bl	8005648 <ism330dhcx_read_reg>
 8006366:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10f      	bne.n	800638e <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	b2da      	uxtb	r2, r3
 8006376:	7a3b      	ldrb	r3, [r7, #8]
 8006378:	f362 0303 	bfi	r3, r2, #0, #4
 800637c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800637e:	f107 0208 	add.w	r2, r7, #8
 8006382:	2301      	movs	r3, #1
 8006384:	2109      	movs	r1, #9
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff f976 	bl	8005678 <ism330dhcx_write_reg>
 800638c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 800638e:	68fb      	ldr	r3, [r7, #12]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80063a4:	f107 0208 	add.w	r2, r7, #8
 80063a8:	2301      	movs	r3, #1
 80063aa:	2109      	movs	r1, #9
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff f94b 	bl	8005648 <ism330dhcx_read_reg>
 80063b2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10f      	bne.n	80063da <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	7a3b      	ldrb	r3, [r7, #8]
 80063c4:	f362 1307 	bfi	r3, r2, #4, #4
 80063c8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80063ca:	f107 0208 	add.w	r2, r7, #8
 80063ce:	2301      	movs	r3, #1
 80063d0:	2109      	movs	r1, #9
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff f950 	bl	8005678 <ism330dhcx_write_reg>
 80063d8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 80063da:	68fb      	ldr	r3, [r7, #12]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80063f0:	f107 0208 	add.w	r2, r7, #8
 80063f4:	2301      	movs	r3, #1
 80063f6:	210a      	movs	r1, #10
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff f925 	bl	8005648 <ism330dhcx_read_reg>
 80063fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10f      	bne.n	8006426 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	b2da      	uxtb	r2, r3
 800640e:	7a3b      	ldrb	r3, [r7, #8]
 8006410:	f362 0302 	bfi	r3, r2, #0, #3
 8006414:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006416:	f107 0208 	add.w	r2, r7, #8
 800641a:	2301      	movs	r3, #1
 800641c:	210a      	movs	r1, #10
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff f92a 	bl	8005678 <ism330dhcx_write_reg>
 8006424:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800643a:	2102      	movs	r1, #2
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fea6 	bl	800618e <ism330dhcx_mem_bank_set>
 8006442:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800644a:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800644c:	2301      	movs	r3, #1
 800644e:	2146      	movs	r1, #70	; 0x46
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff f8f9 	bl	8005648 <ism330dhcx_read_reg>
 8006456:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8006462:	2301      	movs	r3, #1
 8006464:	2147      	movs	r1, #71	; 0x47
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff f8ee 	bl	8005648 <ism330dhcx_read_reg>
 800646c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006474:	2100      	movs	r1, #0
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fe89 	bl	800618e <ism330dhcx_mem_bank_set>
 800647c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006492:	2102      	movs	r1, #2
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fe7a 	bl	800618e <ism330dhcx_mem_bank_set>
 800649a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80064a2:	f107 0208 	add.w	r2, r7, #8
 80064a6:	2301      	movs	r3, #1
 80064a8:	215f      	movs	r1, #95	; 0x5f
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff f8cc 	bl	8005648 <ism330dhcx_read_reg>
 80064b0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80064b8:	2100      	movs	r1, #0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fe67 	bl	800618e <ism330dhcx_mem_bank_set>
 80064c0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80064c2:	7a3b      	ldrb	r3, [r7, #8]
 80064c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d81a      	bhi.n	8006504 <ism330dhcx_fsm_data_rate_get+0x7c>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <ism330dhcx_fsm_data_rate_get+0x4c>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	080064e5 	.word	0x080064e5
 80064d8:	080064ed 	.word	0x080064ed
 80064dc:	080064f5 	.word	0x080064f5
 80064e0:	080064fd 	.word	0x080064fd
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
      break;
 80064ea:	e00f      	b.n	800650c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
      break;
 80064f2:	e00b      	b.n	800650c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2202      	movs	r2, #2
 80064f8:	701a      	strb	r2, [r3, #0]
      break;
 80064fa:	e007      	b.n	800650c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2203      	movs	r2, #3
 8006500:	701a      	strb	r2, [r3, #0]
      break;
 8006502:	e003      	b.n	800650c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
      break;
 800650a:	bf00      	nop
  }

  return ret;
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop

08006518 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006522:	2102      	movs	r1, #2
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fe32 	bl	800618e <ism330dhcx_mem_bank_set>
 800652a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8006532:	f107 0208 	add.w	r2, r7, #8
 8006536:	2301      	movs	r3, #1
 8006538:	2105      	movs	r1, #5
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff f884 	bl	8005648 <ism330dhcx_read_reg>
 8006540:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006548:	2100      	movs	r1, #0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fe1f 	bl	800618e <ism330dhcx_mem_bank_set>
 8006550:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8006552:	7a3b      	ldrb	r3, [r7, #8]
 8006554:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	461a      	mov	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006560:	68fb      	ldr	r3, [r7, #12]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006576:	2102      	movs	r1, #2
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fe08 	bl	800618e <ism330dhcx_mem_bank_set>
 800657e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8006586:	f107 0208 	add.w	r2, r7, #8
 800658a:	2301      	movs	r3, #1
 800658c:	2160      	movs	r1, #96	; 0x60
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff f85a 	bl	8005648 <ism330dhcx_read_reg>
 8006594:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d12a      	bne.n	80065f2 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 800659c:	7a3b      	ldrb	r3, [r7, #8]
 800659e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d81b      	bhi.n	80065e0 <ism330dhcx_mlc_data_rate_get+0x74>
 80065a8:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <ism330dhcx_mlc_data_rate_get+0x44>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065c9 	.word	0x080065c9
 80065b8:	080065d1 	.word	0x080065d1
 80065bc:	080065d9 	.word	0x080065d9
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
        break;
 80065c6:	e00f      	b.n	80065e8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]
        break;
 80065ce:	e00b      	b.n	80065e8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2202      	movs	r2, #2
 80065d4:	701a      	strb	r2, [r3, #0]
        break;
 80065d6:	e007      	b.n	80065e8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2203      	movs	r2, #3
 80065dc:	701a      	strb	r2, [r3, #0]
        break;
 80065de:	e003      	b.n	80065e8 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
        break;
 80065e6:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80065e8:	2100      	movs	r1, #0
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fdcf 	bl	800618e <ism330dhcx_mem_bank_set>
 80065f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006602:	2300      	movs	r3, #0
 8006604:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <BSP_SPI2_Init+0x54>)
 8006608:	4a12      	ldr	r2, [pc, #72]	; (8006654 <BSP_SPI2_Init+0x58>)
 800660a:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 800660c:	4b12      	ldr	r3, [pc, #72]	; (8006658 <BSP_SPI2_Init+0x5c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	4911      	ldr	r1, [pc, #68]	; (8006658 <BSP_SPI2_Init+0x5c>)
 8006614:	600a      	str	r2, [r1, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d114      	bne.n	8006644 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 800661a:	480d      	ldr	r0, [pc, #52]	; (8006650 <BSP_SPI2_Init+0x54>)
 800661c:	f009 f82c 	bl	800f678 <HAL_SPI_GetState>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10e      	bne.n	8006644 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8006626:	480a      	ldr	r0, [pc, #40]	; (8006650 <BSP_SPI2_Init+0x54>)
 8006628:	f000 f8f6 	bl	8006818 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d108      	bne.n	8006644 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8006632:	4807      	ldr	r0, [pc, #28]	; (8006650 <BSP_SPI2_Init+0x54>)
 8006634:	f000 f87a 	bl	800672c <MX_SPI2_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800663e:	f06f 0307 	mvn.w	r3, #7
 8006642:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8006644:	687b      	ldr	r3, [r7, #4]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200027c8 	.word	0x200027c8
 8006654:	40003800 	.word	0x40003800
 8006658:	20002858 	.word	0x20002858

0800665c <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8006662:	f06f 0307 	mvn.w	r3, #7
 8006666:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <BSP_SPI2_DeInit+0x48>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d013      	beq.n	8006698 <BSP_SPI2_DeInit+0x3c>
  {
    if (--SPI2InitCounter == 0)
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <BSP_SPI2_DeInit+0x48>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3b01      	subs	r3, #1
 8006676:	4a0b      	ldr	r2, [pc, #44]	; (80066a4 <BSP_SPI2_DeInit+0x48>)
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <BSP_SPI2_DeInit+0x48>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <BSP_SPI2_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI2_MspDeInit(&hspi2);
 8006682:	4809      	ldr	r0, [pc, #36]	; (80066a8 <BSP_SPI2_DeInit+0x4c>)
 8006684:	f000 f960 	bl	8006948 <SPI2_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8006688:	4807      	ldr	r0, [pc, #28]	; (80066a8 <BSP_SPI2_DeInit+0x4c>)
 800668a:	f007 ffb7 	bl	800e5fc <HAL_SPI_DeInit>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <BSP_SPI2_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8006694:	2300      	movs	r3, #0
 8006696:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8006698:	687b      	ldr	r3, [r7, #4]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20002858 	.word	0x20002858
 80066a8:	200027c8 	.word	0x200027c8

080066ac <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 80066bc:	887a      	ldrh	r2, [r7, #2]
 80066be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4806      	ldr	r0, [pc, #24]	; (80066e0 <BSP_SPI2_Send+0x34>)
 80066c6:	f007 ffc3 	bl	800e650 <HAL_SPI_Transmit>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80066d0:	f06f 0305 	mvn.w	r3, #5
 80066d4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	200027c8 	.word	0x200027c8

080066e4 <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 80066f4:	887a      	ldrh	r2, [r7, #2]
 80066f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4806      	ldr	r0, [pc, #24]	; (8006718 <BSP_SPI2_Recv+0x34>)
 80066fe:	f008 f9b9 	bl	800ea74 <HAL_SPI_Receive>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006708:	f06f 0305 	mvn.w	r3, #5
 800670c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800670e:	68fb      	ldr	r3, [r7, #12]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	200027c8 	.word	0x200027c8

0800671c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006720:	f000 f9b0 	bl	8006a84 <HAL_GetTick>
 8006724:	4603      	mov	r3, r0
}
 8006726:	4618      	mov	r0, r3
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	75fb      	strb	r3, [r7, #23]
  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	609a      	str	r2, [r3, #8]

  hspi->Instance = SPI2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a32      	ldr	r2, [pc, #200]	; (8006810 <MX_SPI2_Init+0xe4>)
 8006748:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006750:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2207      	movs	r2, #7
 800675c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006764:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800676c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006774:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800677c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 0x7;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2207      	movs	r2, #7
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	659a      	str	r2, [r3, #88]	; 0x58
  hspi->Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f007 fe1a 	bl	800e40c <HAL_SPI_Init>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <MX_SPI2_Init+0xb6>
  {
    ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
  }

  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <MX_SPI2_Init+0xe8>)
 80067e8:	60fb      	str	r3, [r7, #12]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
  if (HAL_SPIEx_SetConfigAutonomousMode(hspi, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f009 f850 	bl	800f89a <HAL_SPIEx_SetConfigAutonomousMode>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <MX_SPI2_Init+0xd8>
  {
    ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40003800 	.word	0x40003800
 8006814:	10010000 	.word	0x10010000

08006818 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b0be      	sub	sp, #248	; 0xf8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006820:	f107 0318 	add.w	r3, r7, #24
 8006824:	22c8      	movs	r2, #200	; 0xc8
 8006826:	2100      	movs	r1, #0
 8006828:	4618      	mov	r0, r3
 800682a:	f012 fffa 	bl	8019822 <memset>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800682e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 800683a:	2300      	movs	r3, #0
 800683c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8006840:	f107 0318 	add.w	r3, r7, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f004 fd73 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800684a:	4b3c      	ldr	r3, [pc, #240]	; (800693c <SPI2_MspInit+0x124>)
 800684c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006850:	4a3a      	ldr	r2, [pc, #232]	; (800693c <SPI2_MspInit+0x124>)
 8006852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006856:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800685a:	4b38      	ldr	r3, [pc, #224]	; (800693c <SPI2_MspInit+0x124>)
 800685c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006868:	4b34      	ldr	r3, [pc, #208]	; (800693c <SPI2_MspInit+0x124>)
 800686a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800686e:	4a33      	ldr	r2, [pc, #204]	; (800693c <SPI2_MspInit+0x124>)
 8006870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006874:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006878:	4b30      	ldr	r3, [pc, #192]	; (800693c <SPI2_MspInit+0x124>)
 800687a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006886:	4b2d      	ldr	r3, [pc, #180]	; (800693c <SPI2_MspInit+0x124>)
 8006888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800688c:	4a2b      	ldr	r2, [pc, #172]	; (800693c <SPI2_MspInit+0x124>)
 800688e:	f043 0308 	orr.w	r3, r3, #8
 8006892:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006896:	4b29      	ldr	r3, [pc, #164]	; (800693c <SPI2_MspInit+0x124>)
 8006898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 80068a4:	2302      	movs	r3, #2
 80068a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068aa:	2302      	movs	r3, #2
 80068ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 80068bc:	2305      	movs	r3, #5
 80068be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80068c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80068c6:	4619      	mov	r1, r3
 80068c8:	481d      	ldr	r0, [pc, #116]	; (8006940 <SPI2_MspInit+0x128>)
 80068ca:	f001 f8ff 	bl	8007acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 80068ce:	2308      	movs	r3, #8
 80068d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d4:	2302      	movs	r3, #2
 80068d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 80068e6:	2305      	movs	r3, #5
 80068e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 80068ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80068f0:	4619      	mov	r1, r3
 80068f2:	4814      	ldr	r0, [pc, #80]	; (8006944 <SPI2_MspInit+0x12c>)
 80068f4:	f001 f8ea 	bl	8007acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 80068f8:	2308      	movs	r3, #8
 80068fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fe:	2302      	movs	r3, #2
 8006900:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006904:	2300      	movs	r3, #0
 8006906:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800690a:	2300      	movs	r3, #0
 800690c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8006910:	2305      	movs	r3, #5
 8006912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006916:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800691a:	4619      	mov	r1, r3
 800691c:	4808      	ldr	r0, [pc, #32]	; (8006940 <SPI2_MspInit+0x128>)
 800691e:	f001 f8d5 	bl	8007acc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006922:	2200      	movs	r2, #0
 8006924:	2100      	movs	r1, #0
 8006926:	203c      	movs	r0, #60	; 0x3c
 8006928:	f000 fd8d 	bl	8007446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800692c:	203c      	movs	r0, #60	; 0x3c
 800692e:	f000 fda4 	bl	800747a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8006932:	bf00      	nop
 8006934:	37f8      	adds	r7, #248	; 0xf8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	46020c00 	.word	0x46020c00
 8006940:	42022000 	.word	0x42022000
 8006944:	42020c00 	.word	0x42020c00

08006948 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <SPI2_MspDeInit+0x40>)
 8006952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006956:	4a0c      	ldr	r2, [pc, #48]	; (8006988 <SPI2_MspDeInit+0x40>)
 8006958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800695c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 8006960:	2102      	movs	r1, #2
 8006962:	480a      	ldr	r0, [pc, #40]	; (800698c <SPI2_MspDeInit+0x44>)
 8006964:	f001 fa8a 	bl	8007e7c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8006968:	2108      	movs	r1, #8
 800696a:	4809      	ldr	r0, [pc, #36]	; (8006990 <SPI2_MspDeInit+0x48>)
 800696c:	f001 fa86 	bl	8007e7c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8006970:	2108      	movs	r1, #8
 8006972:	4806      	ldr	r0, [pc, #24]	; (800698c <SPI2_MspDeInit+0x44>)
 8006974:	f001 fa82 	bl	8007e7c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8006978:	203c      	movs	r0, #60	; 0x3c
 800697a:	f000 fd8c 	bl	8007496 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	46020c00 	.word	0x46020c00
 800698c:	42022000 	.word	0x42022000
 8006990:	42020c00 	.word	0x42020c00

08006994 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <HAL_Init+0x4c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <HAL_Init+0x4c>)
 800699e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069a4:	2003      	movs	r0, #3
 80069a6:	f000 fd43 	bl	8007430 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80069aa:	f004 fadd 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <HAL_Init+0x50>)
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	490b      	ldr	r1, [pc, #44]	; (80069e8 <HAL_Init+0x54>)
 80069ba:	5ccb      	ldrb	r3, [r1, r3]
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <HAL_Init+0x58>)
 80069c2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069c4:	200f      	movs	r0, #15
 80069c6:	f000 f813 	bl	80069f0 <HAL_InitTick>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e002      	b.n	80069da <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80069d4:	f7fb fd44 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40022000 	.word	0x40022000
 80069e4:	46020c00 	.word	0x46020c00
 80069e8:	0801ea0c 	.word	0x0801ea0c
 80069ec:	20000000 	.word	0x20000000

080069f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80069f8:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <HAL_InitTick+0x60>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e021      	b.n	8006a48 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006a04:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <HAL_InitTick+0x64>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <HAL_InitTick+0x60>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fd49 	bl	80074b2 <HAL_SYSTICK_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e00e      	b.n	8006a48 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b0f      	cmp	r3, #15
 8006a2e:	d80a      	bhi.n	8006a46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a30:	2200      	movs	r2, #0
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	f000 fd05 	bl	8007446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a3c:	4a06      	ldr	r2, [pc, #24]	; (8006a58 <HAL_InitTick+0x68>)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e000      	b.n	8006a48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000060 	.word	0x20000060
 8006a54:	20000000 	.word	0x20000000
 8006a58:	2000005c 	.word	0x2000005c

08006a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <HAL_IncTick+0x20>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <HAL_IncTick+0x24>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	4a04      	ldr	r2, [pc, #16]	; (8006a80 <HAL_IncTick+0x24>)
 8006a6e:	6013      	str	r3, [r2, #0]
}
 8006a70:	bf00      	nop
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000060 	.word	0x20000060
 8006a80:	2000285c 	.word	0x2000285c

08006a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return uwTick;
 8006a88:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <HAL_GetTick+0x14>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	2000285c 	.word	0x2000285c

08006a9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	601a      	str	r2, [r3, #0]
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	d002      	beq.n	8006af4 <LL_ADC_SetGainCompensation+0x32>
 8006aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006af2:	e000      	b.n	8006af6 <LL_ADC_SetGainCompensation+0x34>
 8006af4:	2200      	movs	r2, #0
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2107      	movs	r1, #7
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	401a      	ands	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006b56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6093      	str	r3, [r2, #8]
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7e:	d101      	bne.n	8006b84 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006ba2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ba6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bce:	d101      	bne.n	8006bd4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <LL_ADC_IsEnabled+0x18>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <LL_ADC_IsEnabled+0x1a>
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d101      	bne.n	8006c20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d101      	bne.n	8006c46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e2e3      	b.n	800723c <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a92      	ldr	r2, [pc, #584]	; (8006ecc <HAL_ADC_Init+0x278>)
 8006c82:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fb fc01 	bl	8002494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ff60 	bl	8006b6a <LL_ADC_IsDeepPowerDownEnabled>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d004      	beq.n	8006cba <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff ff46 	bl	8006b46 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff ff7b 	bl	8006bba <LL_ADC_IsInternalRegulatorEnabled>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d115      	bne.n	8006cf6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff ff5f 	bl	8006b92 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006cd4:	4b7e      	ldr	r3, [pc, #504]	; (8006ed0 <HAL_ADC_Init+0x27c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	099b      	lsrs	r3, r3, #6
 8006cda:	4a7e      	ldr	r2, [pc, #504]	; (8006ed4 <HAL_ADC_Init+0x280>)
 8006cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce0:	099b      	lsrs	r3, r3, #6
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ce8:	e002      	b.n	8006cf0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f9      	bne.n	8006cea <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff ff5d 	bl	8006bba <LL_ADC_IsInternalRegulatorEnabled>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10e      	bne.n	8006d24 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d0a:	f043 0210 	orr.w	r2, r3, #16
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d16:	f043 0201 	orr.w	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ff6d 	bl	8006c08 <LL_ADC_REG_IsConversionOngoing>
 8006d2e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f040 8274 	bne.w	8007226 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8270 	bne.w	8007226 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d4a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006d4e:	f043 0202 	orr.w	r2, r3, #2
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff ff41 	bl	8006be2 <LL_ADC_IsEnabled>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d14e      	bne.n	8006e04 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a58      	ldr	r2, [pc, #352]	; (8006ecc <HAL_ADC_Init+0x278>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d028      	beq.n	8006dc2 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a58      	ldr	r2, [pc, #352]	; (8006ed8 <HAL_ADC_Init+0x284>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d109      	bne.n	8006d8e <HAL_ADC_Init+0x13a>
 8006d7a:	4857      	ldr	r0, [pc, #348]	; (8006ed8 <HAL_ADC_Init+0x284>)
 8006d7c:	f7ff ff31 	bl	8006be2 <LL_ADC_IsEnabled>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bf0c      	ite	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	2300      	movne	r3, #0
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e008      	b.n	8006da0 <HAL_ADC_Init+0x14c>
 8006d8e:	484f      	ldr	r0, [pc, #316]	; (8006ecc <HAL_ADC_Init+0x278>)
 8006d90:	f7ff ff27 	bl	8006be2 <LL_ADC_IsEnabled>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf0c      	ite	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	2300      	movne	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02f      	beq.n	8006e04 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a4b      	ldr	r2, [pc, #300]	; (8006ed8 <HAL_ADC_Init+0x284>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d101      	bne.n	8006db2 <HAL_ADC_Init+0x15e>
 8006dae:	4a4b      	ldr	r2, [pc, #300]	; (8006edc <HAL_ADC_Init+0x288>)
 8006db0:	e000      	b.n	8006db4 <HAL_ADC_Init+0x160>
 8006db2:	4a4b      	ldr	r2, [pc, #300]	; (8006ee0 <HAL_ADC_Init+0x28c>)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7ff fe6e 	bl	8006a9c <LL_ADC_SetCommonClock>
 8006dc0:	e020      	b.n	8006e04 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f023 010c 	bic.w	r1, r3, #12
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d005      	beq.n	8006de4 <HAL_ADC_Init+0x190>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	e000      	b.n	8006de6 <HAL_ADC_Init+0x192>
 8006de4:	230c      	movs	r3, #12
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	430b      	orrs	r3, r1
 8006dec:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8006dee:	4b3c      	ldr	r3, [pc, #240]	; (8006ee0 <HAL_ADC_Init+0x28c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006dfe:	4938      	ldr	r1, [pc, #224]	; (8006ee0 <HAL_ADC_Init+0x28c>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a30      	ldr	r2, [pc, #192]	; (8006ecc <HAL_ADC_Init+0x278>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d010      	beq.n	8006e30 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e14:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006e1a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8006e20:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e28:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	623b      	str	r3, [r7, #32]
 8006e2e:	e030      	b.n	8006e92 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7f1b      	ldrb	r3, [r3, #28]
 8006e34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e3c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e3e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	d002      	beq.n	8006e4e <HAL_ADC_Init+0x1fa>
 8006e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e4c:	e000      	b.n	8006e50 <HAL_ADC_Init+0x1fc>
 8006e4e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006e50:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8006e56:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	da04      	bge.n	8006e6a <HAL_ADC_Init+0x216>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e68:	e001      	b.n	8006e6e <HAL_ADC_Init+0x21a>
 8006e6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8006e6e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4918      	ldr	r1, [pc, #96]	; (8006ed8 <HAL_ADC_Init+0x284>)
 8006e76:	428b      	cmp	r3, r1
 8006e78:	d103      	bne.n	8006e82 <HAL_ADC_Init+0x22e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e80:	e003      	b.n	8006e8a <HAL_ADC_Init+0x236>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e88:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8006e8a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d12f      	bne.n	8006efc <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <HAL_ADC_Init+0x278>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d007      	beq.n	8006eb6 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	045b      	lsls	r3, r3, #17
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	623b      	str	r3, [r7, #32]
 8006eb4:	e022      	b.n	8006efc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d111      	bne.n	8006ee4 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec6:	623b      	str	r3, [r7, #32]
 8006ec8:	e018      	b.n	8006efc <HAL_ADC_Init+0x2a8>
 8006eca:	bf00      	nop
 8006ecc:	46021000 	.word	0x46021000
 8006ed0:	20000000 	.word	0x20000000
 8006ed4:	053e2d63 	.word	0x053e2d63
 8006ed8:	42028000 	.word	0x42028000
 8006edc:	42028308 	.word	0x42028308
 8006ee0:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ee8:	f043 0220 	orr.w	r2, r3, #32
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef4:	f043 0201 	orr.w	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a93      	ldr	r2, [pc, #588]	; (8007150 <HAL_ADC_Init+0x4fc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d018      	beq.n	8006f38 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	4b8a      	ldr	r3, [pc, #552]	; (8007154 <HAL_ADC_Init+0x500>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	6a39      	ldr	r1, [r7, #32]
 8006f32:	430b      	orrs	r3, r1
 8006f34:	60d3      	str	r3, [r2, #12]
 8006f36:	e033      	b.n	8006fa0 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f44:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	6a3a      	ldr	r2, [r7, #32]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8006f5e:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	6a39      	ldr	r1, [r7, #32]
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d008      	beq.n	8006f86 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a6a      	ldr	r2, [pc, #424]	; (8007150 <HAL_ADC_Init+0x4fc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	f000 8093 	beq.w	80070d2 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fe29 	bl	8006c08 <LL_ADC_REG_IsConversionOngoing>
 8006fb6:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff fe36 	bl	8006c2e <LL_ADC_INJ_IsConversionOngoing>
 8006fc2:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d161      	bne.n	800708e <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d15e      	bne.n	800708e <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7f1b      	ldrb	r3, [r3, #28]
 8006fd4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	495f      	ldr	r1, [pc, #380]	; (8007158 <HAL_ADC_Init+0x504>)
 8006fdc:	428b      	cmp	r3, r1
 8006fde:	d102      	bne.n	8006fe6 <HAL_ADC_Init+0x392>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe4:	e002      	b.n	8006fec <HAL_ADC_Init+0x398>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006fec:	4313      	orrs	r3, r2
 8006fee:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	6a39      	ldr	r1, [r7, #32]
 8007004:	430b      	orrs	r3, r1
 8007006:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7ff fd51 	bl	8006ac2 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007026:	2b01      	cmp	r3, #1
 8007028:	d11e      	bne.n	8007068 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	4b49      	ldr	r3, [pc, #292]	; (800715c <HAL_ADC_Init+0x508>)
 8007038:	4013      	ands	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800703e:	0411      	lsls	r1, r2, #16
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007044:	4311      	orrs	r1, r2
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800704a:	4311      	orrs	r1, r2
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007050:	4311      	orrs	r1, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007056:	0892      	lsrs	r2, r2, #2
 8007058:	430a      	orrs	r2, r1
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
 8007064:	611a      	str	r2, [r3, #16]
 8007066:	e007      	b.n	8007078 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0201 	bic.w	r2, r2, #1
 8007076:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10c      	bne.n	80070b0 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	f023 010f 	bic.w	r1, r3, #15
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	1e5a      	subs	r2, r3, #1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30
 80070ae:	e007      	b.n	80070c0 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 020f 	bic.w	r2, r2, #15
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c4:	f023 0303 	bic.w	r3, r3, #3
 80070c8:	f043 0201 	orr.w	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80070d0:	e0b2      	b.n	8007238 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80070da:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 80070e0:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 80070e6:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d103      	bne.n	8007100 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	4b16      	ldr	r3, [pc, #88]	; (8007160 <HAL_ADC_Init+0x50c>)
 8007108:	4013      	ands	r3, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	69f9      	ldr	r1, [r7, #28]
 8007110:	430b      	orrs	r3, r1
 8007112:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711c:	461a      	mov	r2, r3
 800711e:	2100      	movs	r1, #0
 8007120:	f7ff fcf2 	bl	8006b08 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712c:	461a      	mov	r2, r3
 800712e:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8007132:	f7ff fce9 	bl	8006b08 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d112      	bne.n	8007164 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f062 020f 	orn	r2, r2, #15
 800714c:	629a      	str	r2, [r3, #40]	; 0x28
 800714e:	e044      	b.n	80071da <HAL_ADC_Init+0x586>
 8007150:	46021000 	.word	0x46021000
 8007154:	fff0c013 	.word	0xfff0c013
 8007158:	42028000 	.word	0x42028000
 800715c:	fc00f81e 	.word	0xfc00f81e
 8007160:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800716c:	d135      	bne.n	80071da <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 800716e:	2300      	movs	r3, #0
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	e00d      	b.n	8007190 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	2b0f      	cmp	r3, #15
 8007188:	d006      	beq.n	8007198 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	3301      	adds	r3, #1
 800718e:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b07      	cmp	r3, #7
 8007194:	d9ee      	bls.n	8007174 <HAL_ADC_Init+0x520>
 8007196:	e000      	b.n	800719a <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8007198:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d108      	bne.n	80071b2 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f062 020f 	orn	r2, r2, #15
 80071ae:	629a      	str	r2, [r3, #40]	; 0x28
 80071b0:	e013      	b.n	80071da <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	3b01      	subs	r3, #1
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	f003 031c 	and.w	r3, r3, #28
 80071c4:	f06f 020f 	mvn.w	r2, #15
 80071c8:	fa02 f103 	lsl.w	r1, r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	4b18      	ldr	r3, [pc, #96]	; (8007244 <HAL_ADC_Init+0x5f0>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d10b      	bne.n	8007202 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f4:	f023 0303 	bic.w	r3, r3, #3
 80071f8:	f043 0201 	orr.w	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007200:	e01a      	b.n	8007238 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007206:	f023 0312 	bic.w	r3, r3, #18
 800720a:	f043 0210 	orr.w	r2, r3, #16
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007216:	f043 0201 	orr.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007224:	e008      	b.n	8007238 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800722a:	f043 0210 	orr.w	r2, r3, #16
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8007238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800723c:	4618      	mov	r0, r3
 800723e:	3728      	adds	r7, #40	; 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	833ffff3 	.word	0x833ffff3

08007248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <__NVIC_SetPriorityGrouping+0x44>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007264:	4013      	ands	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800727a:	4a04      	ldr	r2, [pc, #16]	; (800728c <__NVIC_SetPriorityGrouping+0x44>)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	60d3      	str	r3, [r2, #12]
}
 8007280:	bf00      	nop
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	e000ed00 	.word	0xe000ed00

08007290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007294:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <__NVIC_GetPriorityGrouping+0x18>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	f003 0307 	and.w	r3, r3, #7
}
 800729e:	4618      	mov	r0, r3
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	e000ed00 	.word	0xe000ed00

080072ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	db0b      	blt.n	80072d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	f003 021f 	and.w	r2, r3, #31
 80072c4:	4907      	ldr	r1, [pc, #28]	; (80072e4 <__NVIC_EnableIRQ+0x38>)
 80072c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	2001      	movs	r0, #1
 80072ce:	fa00 f202 	lsl.w	r2, r0, r2
 80072d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	e000e100 	.word	0xe000e100

080072e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	db12      	blt.n	8007320 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	f003 021f 	and.w	r2, r3, #31
 8007300:	490a      	ldr	r1, [pc, #40]	; (800732c <__NVIC_DisableIRQ+0x44>)
 8007302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	2001      	movs	r0, #1
 800730a:	fa00 f202 	lsl.w	r2, r0, r2
 800730e:	3320      	adds	r3, #32
 8007310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007314:	f3bf 8f4f 	dsb	sy
}
 8007318:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800731a:	f3bf 8f6f 	isb	sy
}
 800731e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	e000e100 	.word	0xe000e100

08007330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	6039      	str	r1, [r7, #0]
 800733a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800733c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007340:	2b00      	cmp	r3, #0
 8007342:	db0a      	blt.n	800735a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	b2da      	uxtb	r2, r3
 8007348:	490c      	ldr	r1, [pc, #48]	; (800737c <__NVIC_SetPriority+0x4c>)
 800734a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734e:	0112      	lsls	r2, r2, #4
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	440b      	add	r3, r1
 8007354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007358:	e00a      	b.n	8007370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	b2da      	uxtb	r2, r3
 800735e:	4908      	ldr	r1, [pc, #32]	; (8007380 <__NVIC_SetPriority+0x50>)
 8007360:	79fb      	ldrb	r3, [r7, #7]
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	3b04      	subs	r3, #4
 8007368:	0112      	lsls	r2, r2, #4
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	440b      	add	r3, r1
 800736e:	761a      	strb	r2, [r3, #24]
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	e000e100 	.word	0xe000e100
 8007380:	e000ed00 	.word	0xe000ed00

08007384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007384:	b480      	push	{r7}
 8007386:	b089      	sub	sp, #36	; 0x24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f1c3 0307 	rsb	r3, r3, #7
 800739e:	2b04      	cmp	r3, #4
 80073a0:	bf28      	it	cs
 80073a2:	2304      	movcs	r3, #4
 80073a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	3304      	adds	r3, #4
 80073aa:	2b06      	cmp	r3, #6
 80073ac:	d902      	bls.n	80073b4 <NVIC_EncodePriority+0x30>
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	3b03      	subs	r3, #3
 80073b2:	e000      	b.n	80073b6 <NVIC_EncodePriority+0x32>
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073b8:	f04f 32ff 	mov.w	r2, #4294967295
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	43da      	mvns	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	401a      	ands	r2, r3
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073cc:	f04f 31ff 	mov.w	r1, #4294967295
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	43d9      	mvns	r1, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073dc:	4313      	orrs	r3, r2
         );
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3724      	adds	r7, #36	; 0x24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073fc:	d301      	bcc.n	8007402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073fe:	2301      	movs	r3, #1
 8007400:	e00f      	b.n	8007422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007402:	4a0a      	ldr	r2, [pc, #40]	; (800742c <SysTick_Config+0x40>)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3b01      	subs	r3, #1
 8007408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800740a:	210f      	movs	r1, #15
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	f7ff ff8e 	bl	8007330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <SysTick_Config+0x40>)
 8007416:	2200      	movs	r2, #0
 8007418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800741a:	4b04      	ldr	r3, [pc, #16]	; (800742c <SysTick_Config+0x40>)
 800741c:	2207      	movs	r2, #7
 800741e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	e000e010 	.word	0xe000e010

08007430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff ff05 	bl	8007248 <__NVIC_SetPriorityGrouping>
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b086      	sub	sp, #24
 800744a:	af00      	add	r7, sp, #0
 800744c:	4603      	mov	r3, r0
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007454:	f7ff ff1c 	bl	8007290 <__NVIC_GetPriorityGrouping>
 8007458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	6978      	ldr	r0, [r7, #20]
 8007460:	f7ff ff90 	bl	8007384 <NVIC_EncodePriority>
 8007464:	4602      	mov	r2, r0
 8007466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff ff5f 	bl	8007330 <__NVIC_SetPriority>
}
 8007472:	bf00      	nop
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	4603      	mov	r3, r0
 8007482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff ff0f 	bl	80072ac <__NVIC_EnableIRQ>
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	4603      	mov	r3, r0
 800749e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80074a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff ff1f 	bl	80072e8 <__NVIC_DisableIRQ>
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff ff96 	bl	80073ec <SysTick_Config>
 80074c0:	4603      	mov	r3, r0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e054      	b.n	8007588 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7f5b      	ldrb	r3, [r3, #29]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fb f8bc 	bl	800266c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10c      	bne.n	800751c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a22      	ldr	r2, [pc, #136]	; (8007590 <HAL_CRC_Init+0xc4>)
 8007508:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0218 	bic.w	r2, r2, #24
 8007518:	609a      	str	r2, [r3, #8]
 800751a:	e00c      	b.n	8007536 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6899      	ldr	r1, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	461a      	mov	r2, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f834 	bl	8007594 <HAL_CRCEx_Polynomial_Set>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e028      	b.n	8007588 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	795b      	ldrb	r3, [r3, #5]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d105      	bne.n	800754a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f04f 32ff 	mov.w	r2, #4294967295
 8007546:	611a      	str	r2, [r3, #16]
 8007548:	e004      	b.n	8007554 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6912      	ldr	r2, [r2, #16]
 8007552:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695a      	ldr	r2, [r3, #20]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	04c11db7 	.word	0x04c11db7

08007594 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80075a4:	231f      	movs	r3, #31
 80075a6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80075a8:	bf00      	nop
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1e5a      	subs	r2, r3, #1
 80075ae:	613a      	str	r2, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <HAL_CRCEx_Polynomial_Set+0x34>
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	fa22 f303 	lsr.w	r3, r2, r3
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b18      	cmp	r3, #24
 80075cc:	d846      	bhi.n	800765c <HAL_CRCEx_Polynomial_Set+0xc8>
 80075ce:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	08007663 	.word	0x08007663
 80075d8:	0800765d 	.word	0x0800765d
 80075dc:	0800765d 	.word	0x0800765d
 80075e0:	0800765d 	.word	0x0800765d
 80075e4:	0800765d 	.word	0x0800765d
 80075e8:	0800765d 	.word	0x0800765d
 80075ec:	0800765d 	.word	0x0800765d
 80075f0:	0800765d 	.word	0x0800765d
 80075f4:	08007651 	.word	0x08007651
 80075f8:	0800765d 	.word	0x0800765d
 80075fc:	0800765d 	.word	0x0800765d
 8007600:	0800765d 	.word	0x0800765d
 8007604:	0800765d 	.word	0x0800765d
 8007608:	0800765d 	.word	0x0800765d
 800760c:	0800765d 	.word	0x0800765d
 8007610:	0800765d 	.word	0x0800765d
 8007614:	08007645 	.word	0x08007645
 8007618:	0800765d 	.word	0x0800765d
 800761c:	0800765d 	.word	0x0800765d
 8007620:	0800765d 	.word	0x0800765d
 8007624:	0800765d 	.word	0x0800765d
 8007628:	0800765d 	.word	0x0800765d
 800762c:	0800765d 	.word	0x0800765d
 8007630:	0800765d 	.word	0x0800765d
 8007634:	08007639 	.word	0x08007639
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b06      	cmp	r3, #6
 800763c:	d913      	bls.n	8007666 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007642:	e010      	b.n	8007666 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b07      	cmp	r3, #7
 8007648:	d90f      	bls.n	800766a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800764e:	e00c      	b.n	800766a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b0f      	cmp	r3, #15
 8007654:	d90b      	bls.n	800766e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800765a:	e008      	b.n	800766e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
      break;
 8007660:	e006      	b.n	8007670 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007662:	bf00      	nop
 8007664:	e004      	b.n	8007670 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007666:	bf00      	nop
 8007668:	e002      	b.n	8007670 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800766a:	bf00      	nop
 800766c:	e000      	b.n	8007670 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800766e:	bf00      	nop
  }
  if (status == HAL_OK)
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10d      	bne.n	8007692 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f023 0118 	bic.w	r1, r3, #24
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
}
 8007694:	4618      	mov	r0, r3
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e014      	b.n	80076dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fa fff4 	bl	80026b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	795b      	ldrb	r3, [r3, #5]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_DAC_ConfigChannel+0x18>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e185      	b.n	8007a08 <HAL_DAC_ConfigChannel+0x324>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2202      	movs	r2, #2
 8007706:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b04      	cmp	r3, #4
 800770e:	f040 8081 	bne.w	8007814 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007712:	f7ff f9b7 	bl	8006a84 <HAL_GetTick>
 8007716:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d140      	bne.n	80077a0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800771e:	e018      	b.n	8007752 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007720:	f7ff f9b0 	bl	8006a84 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b01      	cmp	r3, #1
 800772c:	d911      	bls.n	8007752 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f043 0208 	orr.w	r2, r3, #8
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2203      	movs	r2, #3
 800774c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e15a      	b.n	8007a08 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1df      	bne.n	8007720 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8007760:	2001      	movs	r0, #1
 8007762:	f00c fed7 	bl	8014514 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800776e:	641a      	str	r2, [r3, #64]	; 0x40
 8007770:	e023      	b.n	80077ba <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007772:	f7ff f987 	bl	8006a84 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d90f      	bls.n	80077a0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007786:	2b00      	cmp	r3, #0
 8007788:	da0a      	bge.n	80077a0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f043 0208 	orr.w	r2, r3, #8
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2203      	movs	r2, #3
 800779a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e133      	b.n	8007a08 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dbe3      	blt.n	8007772 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80077aa:	2001      	movs	r0, #1
 80077ac:	f00c feb2 	bl	8014514 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077b8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0310 	and.w	r3, r3, #16
 80077c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	ea02 0103 	and.w	r1, r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	409a      	lsls	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	21ff      	movs	r1, #255	; 0xff
 80077f6:	fa01 f303 	lsl.w	r3, r1, r3
 80077fa:	43db      	mvns	r3, r3
 80077fc:	ea02 0103 	and.w	r1, r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f003 0310 	and.w	r3, r3, #16
 800780a:	409a      	lsls	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d11d      	bne.n	800786e <HAL_DAC_ConfigChannel+0x18a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	221f      	movs	r2, #31
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	43db      	mvns	r3, r3
 8007848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784a:	4013      	ands	r3, r2
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	4313      	orrs	r3, r2
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2207      	movs	r2, #7
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	43db      	mvns	r3, r3
 8007884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007886:	4013      	ands	r3, r2
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d102      	bne.n	8007898 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = 0x00000000UL;
 8007892:	2300      	movs	r3, #0
 8007894:	623b      	str	r3, [r7, #32]
 8007896:	e00f      	b.n	80078b8 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d102      	bne.n	80078a6 <HAL_DAC_ConfigChannel+0x1c2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80078a0:	2301      	movs	r3, #1
 80078a2:	623b      	str	r3, [r7, #32]
 80078a4:	e008      	b.n	80078b8 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <HAL_DAC_ConfigChannel+0x1d0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80078ae:	2301      	movs	r3, #1
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	e001      	b.n	80078b8 <HAL_DAC_ConfigChannel+0x1d4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	43db      	mvns	r3, r3
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	4013      	ands	r3, r2
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	7a1b      	ldrb	r3, [r3, #8]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d102      	bne.n	80078ec <HAL_DAC_ConfigChannel+0x208>
 80078e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ea:	e000      	b.n	80078ee <HAL_DAC_ConfigChannel+0x20a>
 80078ec:	2300      	movs	r3, #0
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	43db      	mvns	r3, r3
 8007904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007906:	4013      	ands	r3, r2
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	7a5b      	ldrb	r3, [r3, #9]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d102      	bne.n	8007918 <HAL_DAC_ConfigChannel+0x234>
 8007912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007916:	e000      	b.n	800791a <HAL_DAC_ConfigChannel+0x236>
 8007918:	2300      	movs	r3, #0
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	4313      	orrs	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d114      	bne.n	800795a <HAL_DAC_ConfigChannel+0x276>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007930:	f003 fc22 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 8007934:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	4a35      	ldr	r2, [pc, #212]	; (8007a10 <HAL_DAC_ConfigChannel+0x32c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d904      	bls.n	8007948 <HAL_DAC_ConfigChannel+0x264>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
 8007946:	e00f      	b.n	8007968 <HAL_DAC_ConfigChannel+0x284>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	4a32      	ldr	r2, [pc, #200]	; (8007a14 <HAL_DAC_ConfigChannel+0x330>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d90a      	bls.n	8007966 <HAL_DAC_ConfigChannel+0x282>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
 8007958:	e006      	b.n	8007968 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007960:	4313      	orrs	r3, r2
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
 8007964:	e000      	b.n	8007968 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007966:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007976:	4313      	orrs	r3, r2
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	43da      	mvns	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	400a      	ands	r2, r1
 800799e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ba:	4013      	ands	r3, r2
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d2:	4313      	orrs	r3, r2
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079dc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	22c0      	movs	r2, #192	; 0xc0
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	43da      	mvns	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	400a      	ands	r2, r1
 80079f8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3728      	adds	r7, #40	; 0x28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	09896800 	.word	0x09896800
 8007a14:	04c4b400 	.word	0x04c4b400

08007a18 <HAL_DACEx_SetConfigAutonomousMode>:
  *        the configuration information for the specified DAC.
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac, DAC_AutonomousModeConfTypeDef *sConfig)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	791b      	ldrb	r3, [r3, #4]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d11e      	bne.n	8007a6a <HAL_DACEx_SetConfigAutonomousMode+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	795b      	ldrb	r3, [r3, #5]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_DACEx_SetConfigAutonomousMode+0x20>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e019      	b.n	8007a6c <HAL_DACEx_SetConfigAutonomousMode+0x54>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2202      	movs	r2, #2
 8007a42:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <HAL_DACEx_SetConfigAutonomousMode+0x54>
  }
  else
  {
    return HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e019      	b.n	8007abe <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d004      	beq.n	8007aa0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e00e      	b.n	8007abe <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ab6:	f043 0304 	orr.w	r3, r3, #4
 8007aba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b089      	sub	sp, #36	; 0x24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007ade:	e1ba      	b.n	8007e56 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aec:	4013      	ands	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 81aa 	beq.w	8007e50 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a55      	ldr	r2, [pc, #340]	; (8007c54 <HAL_GPIO_Init+0x188>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d15d      	bne.n	8007bc0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	43db      	mvns	r3, r3
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	4013      	ands	r3, r2
 8007b18:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f003 0201 	and.w	r2, r3, #1
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007b34:	4a48      	ldr	r2, [pc, #288]	; (8007c58 <HAL_GPIO_Init+0x18c>)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b3c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007b3e:	4a46      	ldr	r2, [pc, #280]	; (8007c58 <HAL_GPIO_Init+0x18c>)
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4413      	add	r3, r2
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	08da      	lsrs	r2, r3, #3
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	3208      	adds	r2, #8
 8007b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b56:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	220f      	movs	r2, #15
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	43db      	mvns	r3, r3
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	220b      	movs	r2, #11
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	08da      	lsrs	r2, r3, #3
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	3208      	adds	r2, #8
 8007b8a:	69f9      	ldr	r1, [r7, #28]
 8007b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	2202      	movs	r2, #2
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e067      	b.n	8007c90 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d003      	beq.n	8007bd0 <HAL_GPIO_Init+0x104>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b12      	cmp	r3, #18
 8007bce:	d145      	bne.n	8007c5c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	08da      	lsrs	r2, r3, #3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3208      	adds	r2, #8
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	220f      	movs	r2, #15
 8007be8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bec:	43db      	mvns	r3, r3
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	08da      	lsrs	r2, r3, #3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3208      	adds	r2, #8
 8007c16:	69f9      	ldr	r1, [r7, #28]
 8007c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	2203      	movs	r2, #3
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	4013      	ands	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f003 0203 	and.w	r2, r3, #3
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	69fa      	ldr	r2, [r7, #28]
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	e01e      	b.n	8007c90 <HAL_GPIO_Init+0x1c4>
 8007c52:	bf00      	nop
 8007c54:	46020000 	.word	0x46020000
 8007c58:	0801ea64 	.word	0x0801ea64
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	2203      	movs	r2, #3
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	4013      	ands	r3, r2
 8007c72:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 0203 	and.w	r2, r3, #3
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d00b      	beq.n	8007cb0 <HAL_GPIO_Init+0x1e4>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d007      	beq.n	8007cb0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ca4:	2b11      	cmp	r3, #17
 8007ca6:	d003      	beq.n	8007cb0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2b12      	cmp	r3, #18
 8007cae:	d130      	bne.n	8007d12 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	2203      	movs	r2, #3
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	f003 0201 	and.w	r2, r3, #1
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	fa02 f303 	lsl.w	r3, r2, r3
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d017      	beq.n	8007d4a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	2203      	movs	r2, #3
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	69fa      	ldr	r2, [r7, #28]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d07c      	beq.n	8007e50 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007d56:	4a47      	ldr	r2, [pc, #284]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	089b      	lsrs	r3, r3, #2
 8007d5c:	3318      	adds	r3, #24
 8007d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d62:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	220f      	movs	r2, #15
 8007d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d72:	43db      	mvns	r3, r3
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	4013      	ands	r3, r2
 8007d78:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	0a9a      	lsrs	r2, r3, #10
 8007d7e:	4b3e      	ldr	r3, [pc, #248]	; (8007e78 <HAL_GPIO_Init+0x3ac>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	f002 0203 	and.w	r2, r2, #3
 8007d88:	00d2      	lsls	r2, r2, #3
 8007d8a:	4093      	lsls	r3, r2
 8007d8c:	69fa      	ldr	r2, [r7, #28]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007d92:	4938      	ldr	r1, [pc, #224]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	089b      	lsrs	r3, r3, #2
 8007d98:	3318      	adds	r3, #24
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007da0:	4b34      	ldr	r3, [pc, #208]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	43db      	mvns	r3, r3
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	4013      	ands	r3, r2
 8007dae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007dc4:	4a2b      	ldr	r2, [pc, #172]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007dca:	4b2a      	ldr	r3, [pc, #168]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	69fa      	ldr	r2, [r7, #28]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007dee:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007df4:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	4013      	ands	r3, r2
 8007e04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007e1a:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8007e22:	4b14      	ldr	r3, [pc, #80]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e28:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	4013      	ands	r3, r2
 8007e32:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007e48:	4a0a      	ldr	r2, [pc, #40]	; (8007e74 <HAL_GPIO_Init+0x3a8>)
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	3301      	adds	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f47f ae3d 	bne.w	8007ae0 <HAL_GPIO_Init+0x14>
  }
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	3724      	adds	r7, #36	; 0x24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	46022000 	.word	0x46022000
 8007e78:	002f7f7f 	.word	0x002f7f7f

08007e7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b089      	sub	sp, #36	; 0x24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007e8e:	e0bc      	b.n	800800a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007e90:	2201      	movs	r2, #1
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 80ad 	beq.w	8008004 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a5e      	ldr	r2, [pc, #376]	; (8008028 <HAL_GPIO_DeInit+0x1ac>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d115      	bne.n	8007ede <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8007eb2:	4a5e      	ldr	r2, [pc, #376]	; (800802c <HAL_GPIO_DeInit+0x1b0>)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007eba:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007ebc:	4a5b      	ldr	r2, [pc, #364]	; (800802c <HAL_GPIO_DeInit+0x1b0>)
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8007ec8:	4b57      	ldr	r3, [pc, #348]	; (8008028 <HAL_GPIO_DeInit+0x1ac>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	2101      	movs	r1, #1
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed4:	43db      	mvns	r3, r3
 8007ed6:	4954      	ldr	r1, [pc, #336]	; (8008028 <HAL_GPIO_DeInit+0x1ac>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	600b      	str	r3, [r1, #0]
 8007edc:	e053      	b.n	8007f86 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8007ede:	4a54      	ldr	r2, [pc, #336]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	3318      	adds	r3, #24
 8007ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eea:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	220f      	movs	r2, #15
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	0a9a      	lsrs	r2, r3, #10
 8007f04:	4b4b      	ldr	r3, [pc, #300]	; (8008034 <HAL_GPIO_DeInit+0x1b8>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	f002 0203 	and.w	r2, r2, #3
 8007f0e:	00d2      	lsls	r2, r2, #3
 8007f10:	4093      	lsls	r3, r2
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d136      	bne.n	8007f86 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8007f18:	4b45      	ldr	r3, [pc, #276]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	4943      	ldr	r1, [pc, #268]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8007f2a:	4b41      	ldr	r3, [pc, #260]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	43db      	mvns	r3, r3
 8007f34:	493e      	ldr	r1, [pc, #248]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8007f3c:	4b3c      	ldr	r3, [pc, #240]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	43db      	mvns	r3, r3
 8007f44:	493a      	ldr	r1, [pc, #232]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8007f4a:	4b39      	ldr	r3, [pc, #228]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	43db      	mvns	r3, r3
 8007f52:	4937      	ldr	r1, [pc, #220]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	220f      	movs	r2, #15
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8007f68:	4a31      	ldr	r2, [pc, #196]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	089b      	lsrs	r3, r3, #2
 8007f6e:	3318      	adds	r3, #24
 8007f70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	43da      	mvns	r2, r3
 8007f78:	482d      	ldr	r0, [pc, #180]	; (8008030 <HAL_GPIO_DeInit+0x1b4>)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	089b      	lsrs	r3, r3, #2
 8007f7e:	400a      	ands	r2, r1
 8007f80:	3318      	adds	r3, #24
 8007f82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	2103      	movs	r1, #3
 8007f90:	fa01 f303 	lsl.w	r3, r1, r3
 8007f94:	431a      	orrs	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	08da      	lsrs	r2, r3, #3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	3208      	adds	r2, #8
 8007fa2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	220f      	movs	r2, #15
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	08d2      	lsrs	r2, r2, #3
 8007fba:	4019      	ands	r1, r3
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	3208      	adds	r2, #8
 8007fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	2103      	movs	r1, #3
 8007fce:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	401a      	ands	r2, r3
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	2101      	movs	r1, #1
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	401a      	ands	r2, r3
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	2103      	movs	r1, #3
 8007ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	401a      	ands	r2, r3
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	3301      	adds	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	fa22 f303 	lsr.w	r3, r2, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	f47f af3c 	bne.w	8007e90 <HAL_GPIO_DeInit+0x14>
  }
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	3724      	adds	r7, #36	; 0x24
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	46020000 	.word	0x46020000
 800802c:	0801ea64 	.word	0x0801ea64
 8008030:	46022000 	.word	0x46022000
 8008034:	002f7f7f 	.word	0x002f7f7f

08008038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	807b      	strh	r3, [r7, #2]
 8008044:	4613      	mov	r3, r2
 8008046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008048:	787b      	ldrb	r3, [r7, #1]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800804e:	887a      	ldrh	r2, [r7, #2]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8008054:	e002      	b.n	800805c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8008056:	887a      	ldrh	r2, [r7, #2]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	88fb      	ldrh	r3, [r7, #6]
 8008078:	4013      	ands	r3, r2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d006      	beq.n	800808c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800807e:	4a0c      	ldr	r2, [pc, #48]	; (80080b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	4618      	mov	r0, r3
 8008088:	f7f8 ffc8 	bl	800101c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800808c:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d006      	beq.n	80080a6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008098:	4a05      	ldr	r2, [pc, #20]	; (80080b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f807 	bl	80080b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	46022000 	.word	0x46022000

080080b4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e081      	b.n	80081e0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fa fb41 	bl	8002778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2224      	movs	r2, #36	; 0x24
 80080fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0201 	bic.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800811a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689a      	ldr	r2, [r3, #8]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800812a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d107      	bne.n	8008144 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	e006      	b.n	8008152 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008150:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d104      	bne.n	8008164 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008162:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008176:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008186:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69d9      	ldr	r1, [r3, #28]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1a      	ldr	r2, [r3, #32]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d138      	bne.n	8008270 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008208:	2302      	movs	r3, #2
 800820a:	e032      	b.n	8008272 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2224      	movs	r2, #36	; 0x24
 8008218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800823a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6819      	ldr	r1, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0201 	orr.w	r2, r2, #1
 800825a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	e000      	b.n	8008272 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008270:	2302      	movs	r3, #2
  }
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b20      	cmp	r3, #32
 8008292:	d139      	bne.n	8008308 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800829e:	2302      	movs	r3, #2
 80082a0:	e033      	b.n	800830a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2224      	movs	r2, #36	; 0x24
 80082ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0201 	bic.w	r2, r2, #1
 80082c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	e000      	b.n	800830a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008308:	2302      	movs	r3, #2
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
 8008334:	e007      	b.n	8008346 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008336:	4b07      	ldr	r3, [pc, #28]	; (8008354 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f023 0204 	bic.w	r2, r3, #4
 800833e:	4905      	ldr	r1, [pc, #20]	; (8008354 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4313      	orrs	r3, r2
 8008344:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	40030400 	.word	0x40030400

08008358 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <HAL_ICACHE_Enable+0x1c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a04      	ldr	r2, [pc, #16]	; (8008374 <HAL_ICACHE_Enable+0x1c>)
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40030400 	.word	0x40030400

08008378 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	73fb      	strb	r3, [r7, #15]
 800838e:	e141      	b.n	8008614 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f947 	bl	8008628 <MDF_GetHandleNumberFromInstance>
 800839a:	4603      	mov	r3, r0
 800839c:	4a86      	ldr	r2, [pc, #536]	; (80085b8 <HAL_MDF_Init+0x240>)
 800839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	73fb      	strb	r3, [r7, #15]
 80083aa:	e133      	b.n	8008614 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fa f8b7 	bl	8002520 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80083b2:	4b82      	ldr	r3, [pc, #520]	; (80085bc <HAL_MDF_Init+0x244>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d11d      	bne.n	80083f6 <HAL_MDF_Init+0x7e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a80      	ldr	r2, [pc, #512]	; (80085c0 <HAL_MDF_Init+0x248>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d023      	beq.n	800840c <HAL_MDF_Init+0x94>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a7e      	ldr	r2, [pc, #504]	; (80085c4 <HAL_MDF_Init+0x24c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d01e      	beq.n	800840c <HAL_MDF_Init+0x94>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a7d      	ldr	r2, [pc, #500]	; (80085c8 <HAL_MDF_Init+0x250>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d019      	beq.n	800840c <HAL_MDF_Init+0x94>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a7b      	ldr	r2, [pc, #492]	; (80085cc <HAL_MDF_Init+0x254>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d014      	beq.n	800840c <HAL_MDF_Init+0x94>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a7a      	ldr	r2, [pc, #488]	; (80085d0 <HAL_MDF_Init+0x258>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00f      	beq.n	800840c <HAL_MDF_Init+0x94>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a78      	ldr	r2, [pc, #480]	; (80085d4 <HAL_MDF_Init+0x25c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00a      	beq.n	800840c <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 80083f6:	4b78      	ldr	r3, [pc, #480]	; (80085d8 <HAL_MDF_Init+0x260>)
 80083f8:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 8090 	bne.w	8008520 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a75      	ldr	r2, [pc, #468]	; (80085dc <HAL_MDF_Init+0x264>)
 8008406:	4293      	cmp	r3, r2
 8008408:	f040 808a 	bne.w	8008520 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a72      	ldr	r2, [pc, #456]	; (80085dc <HAL_MDF_Init+0x264>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d101      	bne.n	800841a <HAL_MDF_Init+0xa2>
 8008416:	4b72      	ldr	r3, [pc, #456]	; (80085e0 <HAL_MDF_Init+0x268>)
 8008418:	e000      	b.n	800841c <HAL_MDF_Init+0xa4>
 800841a:	4b72      	ldr	r3, [pc, #456]	; (80085e4 <HAL_MDF_Init+0x26c>)
 800841c:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	da02      	bge.n	800842c <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	73fb      	strb	r3, [r7, #15]
 800842a:	e079      	b.n	8008520 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a63      	ldr	r2, [pc, #396]	; (80085c0 <HAL_MDF_Init+0x248>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d018      	beq.n	8008468 <HAL_MDF_Init+0xf0>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a62      	ldr	r2, [pc, #392]	; (80085c4 <HAL_MDF_Init+0x24c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d013      	beq.n	8008468 <HAL_MDF_Init+0xf0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a60      	ldr	r2, [pc, #384]	; (80085c8 <HAL_MDF_Init+0x250>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00e      	beq.n	8008468 <HAL_MDF_Init+0xf0>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a5f      	ldr	r2, [pc, #380]	; (80085cc <HAL_MDF_Init+0x254>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d009      	beq.n	8008468 <HAL_MDF_Init+0xf0>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a5d      	ldr	r2, [pc, #372]	; (80085d0 <HAL_MDF_Init+0x258>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d004      	beq.n	8008468 <HAL_MDF_Init+0xf0>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a5c      	ldr	r2, [pc, #368]	; (80085d4 <HAL_MDF_Init+0x25c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d10d      	bne.n	8008484 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	431a      	orrs	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	3b01      	subs	r3, #1
 8008494:	061b      	lsls	r3, r3, #24
 8008496:	431a      	orrs	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7b1b      	ldrb	r3, [r3, #12]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d137      	bne.n	8008514 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80084b4:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80084bc:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80084be:	431a      	orrs	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7e1b      	ldrb	r3, [r3, #24]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d123      	bne.n	8008514 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a3b      	ldr	r2, [pc, #236]	; (80085c0 <HAL_MDF_Init+0x248>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d012      	beq.n	80084fc <HAL_MDF_Init+0x184>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a3a      	ldr	r2, [pc, #232]	; (80085c4 <HAL_MDF_Init+0x24c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00d      	beq.n	80084fc <HAL_MDF_Init+0x184>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a38      	ldr	r2, [pc, #224]	; (80085c8 <HAL_MDF_Init+0x250>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d008      	beq.n	80084fc <HAL_MDF_Init+0x184>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a37      	ldr	r2, [pc, #220]	; (80085cc <HAL_MDF_Init+0x254>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d003      	beq.n	80084fc <HAL_MDF_Init+0x184>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a35      	ldr	r2, [pc, #212]	; (80085d0 <HAL_MDF_Init+0x258>)
 80084fa:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8008508:	430b      	orrs	r3, r1
 800850a:	4313      	orrs	r3, r2
 800850c:	f043 0210 	orr.w	r2, r3, #16
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f043 0201 	orr.w	r2, r3, #1
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d128      	bne.n	8008578 <HAL_MDF_Init+0x200>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800852c:	2b01      	cmp	r3, #1
 800852e:	d123      	bne.n	8008578 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	da02      	bge.n	8008540 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
 800853e:	e01b      	b.n	8008578 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6819      	ldr	r1, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8008558:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d14a      	bne.n	8008614 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 021f 	bic.w	r2, r2, #31
 800858c:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6859      	ldr	r1, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a0d      	ldr	r2, [pc, #52]	; (80085dc <HAL_MDF_Init+0x264>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d11e      	bne.n	80085e8 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <HAL_MDF_Init+0x260>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3301      	adds	r3, #1
 80085b0:	4a09      	ldr	r2, [pc, #36]	; (80085d8 <HAL_MDF_Init+0x260>)
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	e01d      	b.n	80085f2 <HAL_MDF_Init+0x27a>
 80085b6:	bf00      	nop
 80085b8:	20002868 	.word	0x20002868
 80085bc:	20002860 	.word	0x20002860
 80085c0:	40025080 	.word	0x40025080
 80085c4:	40025100 	.word	0x40025100
 80085c8:	40025180 	.word	0x40025180
 80085cc:	40025200 	.word	0x40025200
 80085d0:	40025280 	.word	0x40025280
 80085d4:	40025300 	.word	0x40025300
 80085d8:	20002864 	.word	0x20002864
 80085dc:	46024080 	.word	0x46024080
 80085e0:	46024000 	.word	0x46024000
 80085e4:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 80085e8:	4b0d      	ldr	r3, [pc, #52]	; (8008620 <HAL_MDF_Init+0x2a8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	4a0c      	ldr	r2, [pc, #48]	; (8008620 <HAL_MDF_Init+0x2a8>)
 80085f0:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f816 	bl	8008628 <MDF_GetHandleNumberFromInstance>
 80085fc:	4602      	mov	r2, r0
 80085fe:	4909      	ldr	r1, [pc, #36]	; (8008624 <HAL_MDF_Init+0x2ac>)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20002860 	.word	0x20002860
 8008624:	20002868 	.word	0x20002868

08008628 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a19      	ldr	r2, [pc, #100]	; (8008698 <MDF_GetHandleNumberFromInstance+0x70>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d102      	bne.n	800863e <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e024      	b.n	8008688 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a16      	ldr	r2, [pc, #88]	; (800869c <MDF_GetHandleNumberFromInstance+0x74>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d102      	bne.n	800864c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8008646:	2301      	movs	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	e01d      	b.n	8008688 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a14      	ldr	r2, [pc, #80]	; (80086a0 <MDF_GetHandleNumberFromInstance+0x78>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d102      	bne.n	800865a <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8008654:	2302      	movs	r3, #2
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e016      	b.n	8008688 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a11      	ldr	r2, [pc, #68]	; (80086a4 <MDF_GetHandleNumberFromInstance+0x7c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d102      	bne.n	8008668 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8008662:	2303      	movs	r3, #3
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	e00f      	b.n	8008688 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a0f      	ldr	r2, [pc, #60]	; (80086a8 <MDF_GetHandleNumberFromInstance+0x80>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d102      	bne.n	8008676 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8008670:	2304      	movs	r3, #4
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e008      	b.n	8008688 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a0c      	ldr	r2, [pc, #48]	; (80086ac <MDF_GetHandleNumberFromInstance+0x84>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d102      	bne.n	8008684 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 800867e:	2305      	movs	r3, #5
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	e001      	b.n	8008688 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8008684:	2306      	movs	r3, #6
 8008686:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 8008688:	68fb      	ldr	r3, [r7, #12]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40025080 	.word	0x40025080
 800869c:	40025100 	.word	0x40025100
 80086a0:	40025180 	.word	0x40025180
 80086a4:	40025200 	.word	0x40025200
 80086a8:	40025280 	.word	0x40025280
 80086ac:	40025300 	.word	0x40025300

080086b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b2:	b08f      	sub	sp, #60	; 0x3c
 80086b4:	af0a      	add	r7, sp, #40	; 0x28
 80086b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e116      	b.n	80088f0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7fa fc41 	bl	8002f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2203      	movs	r2, #3
 80086e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d102      	bne.n	80086fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f008 fa90 	bl	8010c26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	687e      	ldr	r6, [r7, #4]
 800870e:	466d      	mov	r5, sp
 8008710:	f106 0410 	add.w	r4, r6, #16
 8008714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800871a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800871c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008720:	e885 0003 	stmia.w	r5, {r0, r1}
 8008724:	1d33      	adds	r3, r6, #4
 8008726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008728:	6838      	ldr	r0, [r7, #0]
 800872a:	f008 f99d 	bl	8010a68 <USB_CoreInit>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0d7      	b.n	80088f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2100      	movs	r1, #0
 8008746:	4618      	mov	r0, r3
 8008748:	f008 fa7e 	bl	8010c48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
 8008750:	e04a      	b.n	80087e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008752:	7bfa      	ldrb	r2, [r7, #15]
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	333d      	adds	r3, #61	; 0x3d
 8008762:	2201      	movs	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008766:	7bfa      	ldrb	r2, [r7, #15]
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	333c      	adds	r3, #60	; 0x3c
 8008776:	7bfa      	ldrb	r2, [r7, #15]
 8008778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800877a:	7bfa      	ldrb	r2, [r7, #15]
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	b298      	uxth	r0, r3
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	3344      	adds	r3, #68	; 0x44
 800878e:	4602      	mov	r2, r0
 8008790:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008792:	7bfa      	ldrb	r2, [r7, #15]
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	3340      	adds	r3, #64	; 0x40
 80087a2:	2200      	movs	r2, #0
 80087a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087a6:	7bfa      	ldrb	r2, [r7, #15]
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	3348      	adds	r3, #72	; 0x48
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087ba:	7bfa      	ldrb	r2, [r7, #15]
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	334c      	adds	r3, #76	; 0x4c
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80087ce:	7bfa      	ldrb	r2, [r7, #15]
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	3354      	adds	r3, #84	; 0x54
 80087de:	2200      	movs	r2, #0
 80087e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	3301      	adds	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d3af      	bcc.n	8008752 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	e044      	b.n	8008882 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80087f8:	7bfa      	ldrb	r2, [r7, #15]
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	4613      	mov	r3, r2
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	440b      	add	r3, r1
 8008806:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800880e:	7bfa      	ldrb	r2, [r7, #15]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008820:	7bfa      	ldrb	r2, [r7, #15]
 8008822:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008824:	7bfa      	ldrb	r2, [r7, #15]
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4613      	mov	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	440b      	add	r3, r1
 8008832:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800883a:	7bfa      	ldrb	r2, [r7, #15]
 800883c:	6879      	ldr	r1, [r7, #4]
 800883e:	4613      	mov	r3, r2
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	440b      	add	r3, r1
 8008848:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008850:	7bfa      	ldrb	r2, [r7, #15]
 8008852:	6879      	ldr	r1, [r7, #4]
 8008854:	4613      	mov	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008866:	7bfa      	ldrb	r2, [r7, #15]
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4613      	mov	r3, r2
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	3301      	adds	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	7bfa      	ldrb	r2, [r7, #15]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d3b5      	bcc.n	80087f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	687e      	ldr	r6, [r7, #4]
 8008894:	466d      	mov	r5, sp
 8008896:	f106 0410 	add.w	r4, r6, #16
 800889a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800889c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800889e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80088aa:	1d33      	adds	r3, r6, #4
 80088ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088ae:	6838      	ldr	r0, [r7, #0]
 80088b0:	f008 fa16 	bl	8010ce0 <USB_DevInit>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2202      	movs	r2, #2
 80088be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e014      	b.n	80088f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d102      	bne.n	80088e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 f988 	bl	8009bf4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f009 fb48 	bl	8011f7e <USB_DevDisconnect>

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_PCD_Start+0x1c>
 8008910:	2302      	movs	r3, #2
 8008912:	e01c      	b.n	800894e <HAL_PCD_Start+0x56>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	2b01      	cmp	r3, #1
 8008922:	d105      	bne.n	8008930 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f008 f965 	bl	8010c04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f009 fafc 	bl	8011f3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008956:	b590      	push	{r4, r7, lr}
 8008958:	b08d      	sub	sp, #52	; 0x34
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4618      	mov	r0, r3
 800896e:	f009 fbba 	bl	80120e6 <USB_GetMode>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	f040 84b7 	bne.w	80092e8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f009 fb1e 	bl	8011fc0 <USB_ReadInterrupts>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 84ad 	beq.w	80092e6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	0a1b      	lsrs	r3, r3, #8
 8008996:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f009 fb0b 	bl	8011fc0 <USB_ReadInterrupts>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f003 0302 	and.w	r3, r3, #2
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d107      	bne.n	80089c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695a      	ldr	r2, [r3, #20]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f002 0202 	and.w	r2, r2, #2
 80089c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f009 faf9 	bl	8011fc0 <USB_ReadInterrupts>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	d161      	bne.n	8008a9c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0210 	bic.w	r2, r2, #16
 80089e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	4613      	mov	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	0c5b      	lsrs	r3, r3, #17
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d124      	bne.n	8008a5e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d035      	beq.n	8008a8c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	091b      	lsrs	r3, r3, #4
 8008a28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	6a38      	ldr	r0, [r7, #32]
 8008a34:	f009 f930 	bl	8011c98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	091b      	lsrs	r3, r3, #4
 8008a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a44:	441a      	add	r2, r3
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	6a1a      	ldr	r2, [r3, #32]
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	091b      	lsrs	r3, r3, #4
 8008a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a56:	441a      	add	r2, r3
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	621a      	str	r2, [r3, #32]
 8008a5c:	e016      	b.n	8008a8c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	0c5b      	lsrs	r3, r3, #17
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	2b06      	cmp	r3, #6
 8008a68:	d110      	bne.n	8008a8c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a70:	2208      	movs	r2, #8
 8008a72:	4619      	mov	r1, r3
 8008a74:	6a38      	ldr	r0, [r7, #32]
 8008a76:	f009 f90f 	bl	8011c98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6a1a      	ldr	r2, [r3, #32]
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	091b      	lsrs	r3, r3, #4
 8008a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a86:	441a      	add	r2, r3
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0210 	orr.w	r2, r2, #16
 8008a9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f009 fa8d 	bl	8011fc0 <USB_ReadInterrupts>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ab0:	f040 80a7 	bne.w	8008c02 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f009 fa92 	bl	8011fe6 <USB_ReadDevAllOutEpInterrupt>
 8008ac2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008ac4:	e099      	b.n	8008bfa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 808e 	beq.w	8008bee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	b2d2      	uxtb	r2, r2
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f009 fab6 	bl	801204e <USB_ReadDevOutEPInterrupt>
 8008ae2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00c      	beq.n	8008b08 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	461a      	mov	r2, r3
 8008afc:	2301      	movs	r3, #1
 8008afe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fef0 	bl	80098e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00c      	beq.n	8008b2c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2308      	movs	r3, #8
 8008b22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 ffc6 	bl	8009ab8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f003 0310 	and.w	r3, r3, #16
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d008      	beq.n	8008b48 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b42:	461a      	mov	r2, r3
 8008b44:	2310      	movs	r3, #16
 8008b46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d030      	beq.n	8008bb4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5a:	2b80      	cmp	r3, #128	; 0x80
 8008b5c:	d109      	bne.n	8008b72 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b70:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b74:	4613      	mov	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	78db      	ldrb	r3, [r3, #3]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d108      	bne.n	8008ba2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2200      	movs	r2, #0
 8008b94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f00b fad3 	bl	8014148 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bae:	461a      	mov	r2, r3
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d008      	beq.n	8008bd0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bca:	461a      	mov	r2, r3
 8008bcc:	2320      	movs	r3, #32
 8008bce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	461a      	mov	r2, r3
 8008be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f47f af62 	bne.w	8008ac6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f009 f9da 	bl	8011fc0 <USB_ReadInterrupts>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c16:	f040 80db 	bne.w	8008dd0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f009 f9fb 	bl	801201a <USB_ReadDevAllInEpInterrupt>
 8008c24:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c2a:	e0cd      	b.n	8008dc8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 80c2 	beq.w	8008dbc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3e:	b2d2      	uxtb	r2, r2
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f009 fa21 	bl	801208a <USB_ReadDevInEPInterrupt>
 8008c48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d057      	beq.n	8008d04 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	69f9      	ldr	r1, [r7, #28]
 8008c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c74:	4013      	ands	r3, r2
 8008c76:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	461a      	mov	r2, r3
 8008c86:	2301      	movs	r3, #1
 8008c88:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d132      	bne.n	8008cf8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c96:	4613      	mov	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	334c      	adds	r3, #76	; 0x4c
 8008ca2:	6819      	ldr	r1, [r3, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca8:	4613      	mov	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4403      	add	r3, r0
 8008cb2:	3348      	adds	r3, #72	; 0x48
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4419      	add	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4403      	add	r3, r0
 8008cc6:	334c      	adds	r3, #76	; 0x4c
 8008cc8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d113      	bne.n	8008cf8 <HAL_PCD_IRQHandler+0x3a2>
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	3354      	adds	r3, #84	; 0x54
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d108      	bne.n	8008cf8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	f009 fa28 	bl	8012148 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f00b f96f 	bl	8013fe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f003 0308 	and.w	r3, r3, #8
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	2308      	movs	r3, #8
 8008d1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f003 0310 	and.w	r3, r3, #16
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d008      	beq.n	8008d3c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d36:	461a      	mov	r2, r3
 8008d38:	2310      	movs	r3, #16
 8008d3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	461a      	mov	r2, r3
 8008d54:	2340      	movs	r3, #64	; 0x40
 8008d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d023      	beq.n	8008daa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d64:	6a38      	ldr	r0, [r7, #32]
 8008d66:	f008 f909 	bl	8010f7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	3338      	adds	r3, #56	; 0x38
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	4413      	add	r3, r2
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	78db      	ldrb	r3, [r3, #3]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d108      	bne.n	8008d98 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f00b f9ea 	bl	801416c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da4:	461a      	mov	r2, r3
 8008da6:	2302      	movs	r3, #2
 8008da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fd08 	bl	80097cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	085b      	lsrs	r3, r3, #1
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f47f af2e 	bne.w	8008c2c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f009 f8f3 	bl	8011fc0 <USB_ReadInterrupts>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de4:	d122      	bne.n	8008e2c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008df4:	f023 0301 	bic.w	r3, r3, #1
 8008df8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d108      	bne.n	8008e16 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 ff14 	bl	8009c3c <HAL_PCDEx_LPM_Callback>
 8008e14:	e002      	b.n	8008e1c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f00b f96e 	bl	80140f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	695a      	ldr	r2, [r3, #20]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f009 f8c5 	bl	8011fc0 <USB_ReadInterrupts>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e40:	d112      	bne.n	8008e68 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d102      	bne.n	8008e58 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f00b f90c 	bl	8014070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f009 f8a7 	bl	8011fc0 <USB_ReadInterrupts>
 8008e72:	4603      	mov	r3, r0
 8008e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e7c:	d121      	bne.n	8008ec2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695a      	ldr	r2, [r3, #20]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008e8c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d111      	bne.n	8008ebc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea6:	089b      	lsrs	r3, r3, #2
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fec1 	bl	8009c3c <HAL_PCDEx_LPM_Callback>
 8008eba:	e002      	b.n	8008ec2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f00b f8d7 	bl	8014070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f009 f87a 	bl	8011fc0 <USB_ReadInterrupts>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed6:	f040 80b7 	bne.w	8009048 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2110      	movs	r1, #16
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f008 f841 	bl	8010f7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008efa:	2300      	movs	r3, #0
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efe:	e046      	b.n	8008f8e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f40:	461a      	mov	r2, r3
 8008f42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f58:	0151      	lsls	r1, r2, #5
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	440a      	add	r2, r1
 8008f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f78:	0151      	lsls	r1, r2, #5
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	440a      	add	r2, r1
 8008f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d3b3      	bcc.n	8008f00 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008faa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d016      	beq.n	8008fe2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fbe:	69fa      	ldr	r2, [r7, #28]
 8008fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc4:	f043 030b 	orr.w	r3, r3, #11
 8008fc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fda:	f043 030b 	orr.w	r3, r3, #11
 8008fde:	6453      	str	r3, [r2, #68]	; 0x44
 8008fe0:	e015      	b.n	800900e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ff4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008ff8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009008:	f043 030b 	orr.w	r3, r3, #11
 800900c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800901c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009020:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009032:	461a      	mov	r2, r3
 8009034:	f009 f888 	bl	8012148 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	695a      	ldr	r2, [r3, #20]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	f008 ffb7 	bl	8011fc0 <USB_ReadInterrupts>
 8009052:	4603      	mov	r3, r0
 8009054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800905c:	d124      	bne.n	80090a8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4618      	mov	r0, r3
 8009064:	f009 f84d 	bl	8012102 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f008 f802 	bl	8011076 <USB_GetDevSpeed>
 8009072:	4603      	mov	r3, r0
 8009074:	461a      	mov	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681c      	ldr	r4, [r3, #0]
 800907e:	f002 f87b 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 8009082:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009088:	b2db      	uxtb	r3, r3
 800908a:	461a      	mov	r2, r3
 800908c:	4620      	mov	r0, r4
 800908e:	f007 fd17 	bl	8010ac0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f00a ffcd 	bl	8014032 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	695a      	ldr	r2, [r3, #20]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80090a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f008 ff87 	bl	8011fc0 <USB_ReadInterrupts>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d10a      	bne.n	80090d2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f00a ffaa 	bl	8014016 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695a      	ldr	r2, [r3, #20]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f002 0208 	and.w	r2, r2, #8
 80090d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f008 ff72 	bl	8011fc0 <USB_ReadInterrupts>
 80090dc:	4603      	mov	r3, r0
 80090de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e2:	2b80      	cmp	r3, #128	; 0x80
 80090e4:	d122      	bne.n	800912c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090f2:	2301      	movs	r3, #1
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
 80090f6:	e014      	b.n	8009122 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d105      	bne.n	800911c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	b2db      	uxtb	r3, r3
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fb27 	bl	800976a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	3301      	adds	r3, #1
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009128:	429a      	cmp	r2, r3
 800912a:	d3e5      	bcc.n	80090f8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	f008 ff45 	bl	8011fc0 <USB_ReadInterrupts>
 8009136:	4603      	mov	r3, r0
 8009138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800913c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009140:	d13b      	bne.n	80091ba <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009142:	2301      	movs	r3, #1
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
 8009146:	e02b      	b.n	80091a0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915c:	4613      	mov	r3, r2
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	3340      	adds	r3, #64	; 0x40
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d115      	bne.n	800919a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800916e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009170:	2b00      	cmp	r3, #0
 8009172:	da12      	bge.n	800919a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009174:	6879      	ldr	r1, [r7, #4]
 8009176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009178:	4613      	mov	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	333f      	adds	r3, #63	; 0x3f
 8009184:	2201      	movs	r2, #1
 8009186:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	b2db      	uxtb	r3, r3
 800918c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009190:	b2db      	uxtb	r3, r3
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fae8 	bl	800976a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	3301      	adds	r3, #1
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d3ce      	bcc.n	8009148 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	695a      	ldr	r2, [r3, #20]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80091b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f008 fefe 	bl	8011fc0 <USB_ReadInterrupts>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091ce:	d155      	bne.n	800927c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091d0:	2301      	movs	r3, #1
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
 80091d4:	e045      	b.n	8009262 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d12e      	bne.n	800925c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80091fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009200:	2b00      	cmp	r3, #0
 8009202:	da2b      	bge.n	800925c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009210:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009214:	429a      	cmp	r2, r3
 8009216:	d121      	bne.n	800925c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800921c:	4613      	mov	r3, r2
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800922a:	2201      	movs	r2, #1
 800922c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009258:	6053      	str	r3, [r2, #4]
            break;
 800925a:	e007      	b.n	800926c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	3301      	adds	r3, #1
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009268:	429a      	cmp	r2, r3
 800926a:	d3b4      	bcc.n	80091d6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	695a      	ldr	r2, [r3, #20]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800927a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	f008 fe9d 	bl	8011fc0 <USB_ReadInterrupts>
 8009286:	4603      	mov	r3, r0
 8009288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800928c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009290:	d10a      	bne.n	80092a8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f00a ff7c 	bl	8014190 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	695a      	ldr	r2, [r3, #20]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80092a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f008 fe87 	bl	8011fc0 <USB_ReadInterrupts>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b04      	cmp	r3, #4
 80092ba:	d115      	bne.n	80092e8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f00a ff6c 	bl	80141ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6859      	ldr	r1, [r3, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
 80092e4:	e000      	b.n	80092e8 <HAL_PCD_IRQHandler+0x992>
      return;
 80092e6:	bf00      	nop
    }
  }
}
 80092e8:	3734      	adds	r7, #52	; 0x34
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd90      	pop	{r4, r7, pc}

080092ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_PCD_SetAddress+0x1a>
 8009304:	2302      	movs	r3, #2
 8009306:	e013      	b.n	8009330 <HAL_PCD_SetAddress+0x42>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	78fa      	ldrb	r2, [r7, #3]
 8009314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f008 fde5 	bl	8011ef0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4603      	mov	r3, r0
 8009348:	70fb      	strb	r3, [r7, #3]
 800934a:	460b      	mov	r3, r1
 800934c:	803b      	strh	r3, [r7, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800935a:	2b00      	cmp	r3, #0
 800935c:	da0f      	bge.n	800937e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	f003 020f 	and.w	r2, r3, #15
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	3338      	adds	r3, #56	; 0x38
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	4413      	add	r3, r2
 8009372:	3304      	adds	r3, #4
 8009374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	705a      	strb	r2, [r3, #1]
 800937c:	e00f      	b.n	800939e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	f003 020f 	and.w	r2, r3, #15
 8009384:	4613      	mov	r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	4413      	add	r3, r2
 8009394:	3304      	adds	r3, #4
 8009396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80093aa:	883a      	ldrh	r2, [r7, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	78ba      	ldrb	r2, [r7, #2]
 80093b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d004      	beq.n	80093c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80093c8:	78bb      	ldrb	r3, [r7, #2]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d102      	bne.n	80093d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d101      	bne.n	80093e2 <HAL_PCD_EP_Open+0xaa>
 80093de:	2302      	movs	r3, #2
 80093e0:	e00e      	b.n	8009400 <HAL_PCD_EP_Open+0xc8>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f007 fe65 	bl	80110c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80093fe:	7afb      	ldrb	r3, [r7, #11]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009418:	2b00      	cmp	r3, #0
 800941a:	da0f      	bge.n	800943c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	f003 020f 	and.w	r2, r3, #15
 8009422:	4613      	mov	r3, r2
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	3338      	adds	r3, #56	; 0x38
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	4413      	add	r3, r2
 8009430:	3304      	adds	r3, #4
 8009432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2201      	movs	r2, #1
 8009438:	705a      	strb	r2, [r3, #1]
 800943a:	e00f      	b.n	800945c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	f003 020f 	and.w	r2, r3, #15
 8009442:	4613      	mov	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	4413      	add	r3, r2
 8009452:	3304      	adds	r3, #4
 8009454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	b2da      	uxtb	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <HAL_PCD_EP_Close+0x6e>
 8009472:	2302      	movs	r3, #2
 8009474:	e00e      	b.n	8009494 <HAL_PCD_EP_Close+0x8c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	4618      	mov	r0, r3
 8009486:	f007 fea3 	bl	80111d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	607a      	str	r2, [r7, #4]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	460b      	mov	r3, r1
 80094aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094ac:	7afb      	ldrb	r3, [r7, #11]
 80094ae:	f003 020f 	and.w	r2, r3, #15
 80094b2:	4613      	mov	r3, r2
 80094b4:	00db      	lsls	r3, r3, #3
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2200      	movs	r2, #0
 80094d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2200      	movs	r2, #0
 80094dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094de:	7afb      	ldrb	r3, [r7, #11]
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d102      	bne.n	80094f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80094f8:	7afb      	ldrb	r3, [r7, #11]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	461a      	mov	r2, r3
 800950e:	6979      	ldr	r1, [r7, #20]
 8009510:	f008 f982 	bl	8011818 <USB_EP0StartXfer>
 8009514:	e008      	b.n	8009528 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	b2db      	uxtb	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	6979      	ldr	r1, [r7, #20]
 8009524:	f007 ff30 	bl	8011388 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	460b      	mov	r3, r1
 800953c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	f003 020f 	and.w	r2, r3, #15
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4613      	mov	r3, r2
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	440b      	add	r3, r1
 8009550:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009554:	681b      	ldr	r3, [r3, #0]
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b086      	sub	sp, #24
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
 800956e:	460b      	mov	r3, r1
 8009570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009572:	7afb      	ldrb	r3, [r7, #11]
 8009574:	f003 020f 	and.w	r2, r3, #15
 8009578:	4613      	mov	r3, r2
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	3338      	adds	r3, #56	; 0x38
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	3304      	adds	r3, #4
 8009588:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2200      	movs	r2, #0
 800959a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2201      	movs	r2, #1
 80095a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d102      	bne.n	80095bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	f003 030f 	and.w	r3, r3, #15
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	461a      	mov	r2, r3
 80095d2:	6979      	ldr	r1, [r7, #20]
 80095d4:	f008 f920 	bl	8011818 <USB_EP0StartXfer>
 80095d8:	e008      	b.n	80095ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	6979      	ldr	r1, [r7, #20]
 80095e8:	f007 fece 	bl	8011388 <USB_EPStartXfer>
  }

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	f003 020f 	and.w	r2, r3, #15
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d901      	bls.n	8009614 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e050      	b.n	80096b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009618:	2b00      	cmp	r3, #0
 800961a:	da0f      	bge.n	800963c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	f003 020f 	and.w	r2, r3, #15
 8009622:	4613      	mov	r3, r2
 8009624:	00db      	lsls	r3, r3, #3
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	3338      	adds	r3, #56	; 0x38
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	4413      	add	r3, r2
 8009630:	3304      	adds	r3, #4
 8009632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	705a      	strb	r2, [r3, #1]
 800963a:	e00d      	b.n	8009658 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800963c:	78fa      	ldrb	r2, [r7, #3]
 800963e:	4613      	mov	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	3304      	adds	r3, #4
 8009650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2201      	movs	r2, #1
 800965c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800965e:	78fb      	ldrb	r3, [r7, #3]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	b2da      	uxtb	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009670:	2b01      	cmp	r3, #1
 8009672:	d101      	bne.n	8009678 <HAL_PCD_EP_SetStall+0x82>
 8009674:	2302      	movs	r3, #2
 8009676:	e01e      	b.n	80096b6 <HAL_PCD_EP_SetStall+0xc0>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68f9      	ldr	r1, [r7, #12]
 8009686:	4618      	mov	r0, r3
 8009688:	f008 fb5e 	bl	8011d48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	f003 030f 	and.w	r3, r3, #15
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10a      	bne.n	80096ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	b2d9      	uxtb	r1, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096a6:	461a      	mov	r2, r3
 80096a8:	f008 fd4e 	bl	8012148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	f003 020f 	and.w	r2, r3, #15
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d901      	bls.n	80096dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e042      	b.n	8009762 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	da0f      	bge.n	8009704 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	f003 020f 	and.w	r2, r3, #15
 80096ea:	4613      	mov	r3, r2
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	3338      	adds	r3, #56	; 0x38
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	4413      	add	r3, r2
 80096f8:	3304      	adds	r3, #4
 80096fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2201      	movs	r2, #1
 8009700:	705a      	strb	r2, [r3, #1]
 8009702:	e00f      	b.n	8009724 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	f003 020f 	and.w	r2, r3, #15
 800970a:	4613      	mov	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4413      	add	r3, r2
 800971a:	3304      	adds	r3, #4
 800971c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	b2da      	uxtb	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_PCD_EP_ClrStall+0x86>
 8009740:	2302      	movs	r3, #2
 8009742:	e00e      	b.n	8009762 <HAL_PCD_EP_ClrStall+0xa4>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68f9      	ldr	r1, [r7, #12]
 8009752:	4618      	mov	r0, r3
 8009754:	f008 fb66 	bl	8011e24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800977a:	2b00      	cmp	r3, #0
 800977c:	da0c      	bge.n	8009798 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	4613      	mov	r3, r2
 8009786:	00db      	lsls	r3, r3, #3
 8009788:	4413      	add	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	3338      	adds	r3, #56	; 0x38
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	4413      	add	r3, r2
 8009792:	3304      	adds	r3, #4
 8009794:	60fb      	str	r3, [r7, #12]
 8009796:	e00c      	b.n	80097b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	f003 020f 	and.w	r2, r3, #15
 800979e:	4613      	mov	r3, r2
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	4413      	add	r3, r2
 80097ae:	3304      	adds	r3, #4
 80097b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f008 f985 	bl	8011ac8 <USB_EPStopXfer>
 80097be:	4603      	mov	r3, r0
 80097c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80097c2:	7afb      	ldrb	r3, [r7, #11]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08a      	sub	sp, #40	; 0x28
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	4613      	mov	r3, r2
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	3338      	adds	r3, #56	; 0x38
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d901      	bls.n	8009804 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e06c      	b.n	80098de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	699a      	ldr	r2, [r3, #24]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	429a      	cmp	r2, r3
 8009818:	d902      	bls.n	8009820 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	3303      	adds	r3, #3
 8009824:	089b      	lsrs	r3, r3, #2
 8009826:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009828:	e02b      	b.n	8009882 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	429a      	cmp	r2, r3
 800983e:	d902      	bls.n	8009846 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	3303      	adds	r3, #3
 800984a:	089b      	lsrs	r3, r3, #2
 800984c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6919      	ldr	r1, [r3, #16]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	b2da      	uxtb	r2, r3
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800985e:	b2db      	uxtb	r3, r3
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	4603      	mov	r3, r0
 8009864:	6978      	ldr	r0, [r7, #20]
 8009866:	f008 f9d9 	bl	8011c1c <USB_WritePacket>

    ep->xfer_buff  += len;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6a1a      	ldr	r2, [r3, #32]
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	441a      	add	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	b29b      	uxth	r3, r3
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	429a      	cmp	r2, r3
 8009896:	d809      	bhi.n	80098ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1a      	ldr	r2, [r3, #32]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d203      	bcs.n	80098ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1be      	bne.n	800982a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	699a      	ldr	r2, [r3, #24]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d811      	bhi.n	80098dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	2201      	movs	r2, #1
 80098c0:	fa02 f303 	lsl.w	r3, r2, r3
 80098c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	43db      	mvns	r3, r3
 80098d2:	6939      	ldr	r1, [r7, #16]
 80098d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098d8:	4013      	ands	r3, r2
 80098da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3720      	adds	r7, #32
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	333c      	adds	r3, #60	; 0x3c
 8009900:	3304      	adds	r3, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d17b      	bne.n	8009a16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f003 0308 	and.w	r3, r3, #8
 8009924:	2b00      	cmp	r3, #0
 8009926:	d015      	beq.n	8009954 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4a61      	ldr	r2, [pc, #388]	; (8009ab0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	f240 80b9 	bls.w	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80b3 	beq.w	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	461a      	mov	r2, r3
 800994c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009950:	6093      	str	r3, [r2, #8]
 8009952:	e0a7      	b.n	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996a:	461a      	mov	r2, r3
 800996c:	2320      	movs	r3, #32
 800996e:	6093      	str	r3, [r2, #8]
 8009970:	e098      	b.n	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009978:	2b00      	cmp	r3, #0
 800997a:	f040 8093 	bne.w	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4a4b      	ldr	r2, [pc, #300]	; (8009ab0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d90f      	bls.n	80099a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00a      	beq.n	80099a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999c:	461a      	mov	r2, r3
 800999e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a2:	6093      	str	r3, [r2, #8]
 80099a4:	e07e      	b.n	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	4613      	mov	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	4413      	add	r3, r2
 80099b8:	3304      	adds	r3, #4
 80099ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	69da      	ldr	r2, [r3, #28]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	0159      	lsls	r1, r3, #5
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	440b      	add	r3, r1
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d2:	1ad2      	subs	r2, r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d114      	bne.n	8009a08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d109      	bne.n	80099fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099f0:	461a      	mov	r2, r3
 80099f2:	2101      	movs	r1, #1
 80099f4:	f008 fba8 	bl	8012148 <USB_EP0_OutStart>
 80099f8:	e006      	b.n	8009a08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	441a      	add	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f00a facc 	bl	8013fac <HAL_PCD_DataOutStageCallback>
 8009a14:	e046      	b.n	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4a26      	ldr	r2, [pc, #152]	; (8009ab4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d124      	bne.n	8009a68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00a      	beq.n	8009a3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a34:	461a      	mov	r2, r3
 8009a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a3a:	6093      	str	r3, [r2, #8]
 8009a3c:	e032      	b.n	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d008      	beq.n	8009a5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a54:	461a      	mov	r2, r3
 8009a56:	2320      	movs	r3, #32
 8009a58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f00a faa3 	bl	8013fac <HAL_PCD_DataOutStageCallback>
 8009a66:	e01d      	b.n	8009aa4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d114      	bne.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	4613      	mov	r3, r2
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d108      	bne.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6818      	ldr	r0, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a90:	461a      	mov	r2, r3
 8009a92:	2100      	movs	r1, #0
 8009a94:	f008 fb58 	bl	8012148 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f00a fa84 	bl	8013fac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3720      	adds	r7, #32
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	4f54300a 	.word	0x4f54300a
 8009ab4:	4f54310a 	.word	0x4f54310a

08009ab8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	333c      	adds	r3, #60	; 0x3c
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4a15      	ldr	r2, [pc, #84]	; (8009b40 <PCD_EP_OutSetupPacket_int+0x88>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d90e      	bls.n	8009b0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d009      	beq.n	8009b0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b04:	461a      	mov	r2, r3
 8009b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f00a fa3b 	bl	8013f88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4a0a      	ldr	r2, [pc, #40]	; (8009b40 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d90c      	bls.n	8009b34 <PCD_EP_OutSetupPacket_int+0x7c>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d108      	bne.n	8009b34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	2101      	movs	r1, #1
 8009b30:	f008 fb0a 	bl	8012148 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	4f54300a 	.word	0x4f54300a

08009b44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
 8009b50:	4613      	mov	r3, r2
 8009b52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d107      	bne.n	8009b72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009b62:	883b      	ldrh	r3, [r7, #0]
 8009b64:	0419      	lsls	r1, r3, #16
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8009b70:	e028      	b.n	8009bc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	0c1b      	lsrs	r3, r3, #16
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]
 8009b84:	e00d      	b.n	8009ba2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	3340      	adds	r3, #64	; 0x40
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	0c1b      	lsrs	r3, r3, #16
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	73fb      	strb	r3, [r7, #15]
 8009ba2:	7bfa      	ldrb	r2, [r7, #15]
 8009ba4:	78fb      	ldrb	r3, [r7, #3]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d3ec      	bcc.n	8009b86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009bac:	883b      	ldrh	r3, [r7, #0]
 8009bae:	0418      	lsls	r0, r3, #16
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6819      	ldr	r1, [r3, #0]
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	4302      	orrs	r2, r0
 8009bbc:	3340      	adds	r3, #64	; 0x40
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	440b      	add	r3, r1
 8009bc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	887a      	ldrh	r2, [r7, #2]
 8009be4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c26:	f043 0303 	orr.w	r3, r3, #3
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-M33 System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009c5e:	f043 0302 	orr.w	r3, r3, #2
 8009c62:	6113      	str	r3, [r2, #16]
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	e000ed00 	.word	0xe000ed00

08009c74 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009c7c:	4b34      	ldr	r3, [pc, #208]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c84:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d101      	bne.n	8009c92 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e057      	b.n	8009d42 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c98:	d90a      	bls.n	8009cb0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009c9a:	4b2d      	ldr	r3, [pc, #180]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	4a2a      	ldr	r2, [pc, #168]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cac:	60d3      	str	r3, [r2, #12]
 8009cae:	e007      	b.n	8009cc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009cb0:	4b27      	ldr	r3, [pc, #156]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009cb8:	4925      	ldr	r1, [pc, #148]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009cc0:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a24      	ldr	r2, [pc, #144]	; (8009d58 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cca:	099b      	lsrs	r3, r3, #6
 8009ccc:	2232      	movs	r2, #50	; 0x32
 8009cce:	fb02 f303 	mul.w	r3, r2, r3
 8009cd2:	4a21      	ldr	r2, [pc, #132]	; (8009d58 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd8:	099b      	lsrs	r3, r3, #6
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009cde:	e002      	b.n	8009ce6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009ce6:	4b1a      	ldr	r3, [pc, #104]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <HAL_PWREx_ControlVoltageScaling+0x84>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f3      	bne.n	8009ce0 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01b      	beq.n	8009d36 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009cfe:	4b15      	ldr	r3, [pc, #84]	; (8009d54 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009d04:	fba2 2303 	umull	r2, r3, r2, r3
 8009d08:	099b      	lsrs	r3, r3, #6
 8009d0a:	2232      	movs	r2, #50	; 0x32
 8009d0c:	fb02 f303 	mul.w	r3, r2, r3
 8009d10:	4a11      	ldr	r2, [pc, #68]	; (8009d58 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009d12:	fba2 2303 	umull	r2, r3, r2, r3
 8009d16:	099b      	lsrs	r3, r3, #6
 8009d18:	3301      	adds	r3, #1
 8009d1a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009d1c:	e002      	b.n	8009d24 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d102      	bne.n	8009d36 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1f3      	bne.n	8009d1e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e000      	b.n	8009d42 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	46020800 	.word	0x46020800
 8009d54:	20000000 	.word	0x20000000
 8009d58:	10624dd3 	.word	0x10624dd3

08009d5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009d60:	4b04      	ldr	r3, [pc, #16]	; (8009d74 <HAL_PWREx_GetVoltageRange+0x18>)
 8009d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	46020800 	.word	0x46020800

08009d78 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009d7c:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	4a04      	ldr	r2, [pc, #16]	; (8009d94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d86:	6113      	str	r3, [r2, #16]
}
 8009d88:	bf00      	nop
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	46020800 	.word	0x46020800

08009d98 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009d9c:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	4a04      	ldr	r2, [pc, #16]	; (8009db4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009da6:	6113      	str	r3, [r2, #16]
}
 8009da8:	bf00      	nop
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	46020800 	.word	0x46020800

08009db8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8009dbc:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	4a04      	ldr	r2, [pc, #16]	; (8009dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8009dc8:	bf00      	nop
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	46020800 	.word	0x46020800

08009dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08e      	sub	sp, #56	; 0x38
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009de0:	2300      	movs	r3, #0
 8009de2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f000 bec3 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009df2:	4b9c      	ldr	r3, [pc, #624]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f003 030c 	and.w	r3, r3, #12
 8009dfa:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009dfc:	4b99      	ldr	r3, [pc, #612]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e00:	f003 0303 	and.w	r3, r3, #3
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0310 	and.w	r3, r3, #16
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 8172 	beq.w	800a0f8 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d007      	beq.n	8009e2a <HAL_RCC_OscConfig+0x52>
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	2b0c      	cmp	r3, #12
 8009e1e:	f040 80e4 	bne.w	8009fea <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	f040 80e0 	bne.w	8009fea <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009e2a:	4b8e      	ldr	r3, [pc, #568]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0304 	and.w	r3, r3, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d006      	beq.n	8009e44 <HAL_RCC_OscConfig+0x6c>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d102      	bne.n	8009e44 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f000 be9a 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e48:	4b86      	ldr	r3, [pc, #536]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <HAL_RCC_OscConfig+0x86>
 8009e54:	4b83      	ldr	r3, [pc, #524]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009e5c:	e005      	b.n	8009e6a <HAL_RCC_OscConfig+0x92>
 8009e5e:	4b81      	ldr	r3, [pc, #516]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e64:	041b      	lsls	r3, r3, #16
 8009e66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d255      	bcs.n	8009f1a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 f9d3 	bl	800b224 <RCC_SetFlashLatencyFromMSIRange>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f000 be77 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009e8a:	4b76      	ldr	r3, [pc, #472]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	4a75      	ldr	r2, [pc, #468]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e94:	6093      	str	r3, [r2, #8]
 8009e96:	4b73      	ldr	r3, [pc, #460]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	4970      	ldr	r1, [pc, #448]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009eb0:	d309      	bcc.n	8009ec6 <HAL_RCC_OscConfig+0xee>
 8009eb2:	4b6c      	ldr	r3, [pc, #432]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f023 021f 	bic.w	r2, r3, #31
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	4969      	ldr	r1, [pc, #420]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60cb      	str	r3, [r1, #12]
 8009ec4:	e07e      	b.n	8009fc4 <HAL_RCC_OscConfig+0x1ec>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	da0a      	bge.n	8009ee4 <HAL_RCC_OscConfig+0x10c>
 8009ece:	4b65      	ldr	r3, [pc, #404]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	015b      	lsls	r3, r3, #5
 8009edc:	4961      	ldr	r1, [pc, #388]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60cb      	str	r3, [r1, #12]
 8009ee2:	e06f      	b.n	8009fc4 <HAL_RCC_OscConfig+0x1ec>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eec:	d30a      	bcc.n	8009f04 <HAL_RCC_OscConfig+0x12c>
 8009eee:	4b5d      	ldr	r3, [pc, #372]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	029b      	lsls	r3, r3, #10
 8009efc:	4959      	ldr	r1, [pc, #356]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60cb      	str	r3, [r1, #12]
 8009f02:	e05f      	b.n	8009fc4 <HAL_RCC_OscConfig+0x1ec>
 8009f04:	4b57      	ldr	r3, [pc, #348]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	03db      	lsls	r3, r3, #15
 8009f12:	4954      	ldr	r1, [pc, #336]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60cb      	str	r3, [r1, #12]
 8009f18:	e054      	b.n	8009fc4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009f1a:	4b52      	ldr	r3, [pc, #328]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	4a51      	ldr	r2, [pc, #324]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f24:	6093      	str	r3, [r2, #8]
 8009f26:	4b4f      	ldr	r3, [pc, #316]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	494c      	ldr	r1, [pc, #304]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009f40:	d309      	bcc.n	8009f56 <HAL_RCC_OscConfig+0x17e>
 8009f42:	4b48      	ldr	r3, [pc, #288]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f023 021f 	bic.w	r2, r3, #31
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	4945      	ldr	r1, [pc, #276]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60cb      	str	r3, [r1, #12]
 8009f54:	e028      	b.n	8009fa8 <HAL_RCC_OscConfig+0x1d0>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	da0a      	bge.n	8009f74 <HAL_RCC_OscConfig+0x19c>
 8009f5e:	4b41      	ldr	r3, [pc, #260]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	015b      	lsls	r3, r3, #5
 8009f6c:	493d      	ldr	r1, [pc, #244]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60cb      	str	r3, [r1, #12]
 8009f72:	e019      	b.n	8009fa8 <HAL_RCC_OscConfig+0x1d0>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f7c:	d30a      	bcc.n	8009f94 <HAL_RCC_OscConfig+0x1bc>
 8009f7e:	4b39      	ldr	r3, [pc, #228]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	029b      	lsls	r3, r3, #10
 8009f8c:	4935      	ldr	r1, [pc, #212]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60cb      	str	r3, [r1, #12]
 8009f92:	e009      	b.n	8009fa8 <HAL_RCC_OscConfig+0x1d0>
 8009f94:	4b33      	ldr	r3, [pc, #204]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	03db      	lsls	r3, r3, #15
 8009fa2:	4930      	ldr	r1, [pc, #192]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 f936 	bl	800b224 <RCC_SetFlashLatencyFromMSIRange>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f000 bdda 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009fc4:	f001 f8d8 	bl	800b178 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009fc8:	4b27      	ldr	r3, [pc, #156]	; (800a068 <HAL_RCC_OscConfig+0x290>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fc fd0f 	bl	80069f0 <HAL_InitTick>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8009fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f000 808a 	beq.w	800a0f6 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8009fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe6:	f000 bdc7 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d066      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a1b      	ldr	r2, [pc, #108]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 8009ff8:	f043 0301 	orr.w	r3, r3, #1
 8009ffc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ffe:	f7fc fd41 	bl	8006a84 <HAL_GetTick>
 800a002:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a004:	e009      	b.n	800a01a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a006:	f7fc fd3d 	bl	8006a84 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	2b02      	cmp	r3, #2
 800a012:	d902      	bls.n	800a01a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	f000 bdaf 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a01a:	4b12      	ldr	r3, [pc, #72]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0304 	and.w	r3, r3, #4
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0ef      	beq.n	800a006 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a026:	4b0f      	ldr	r3, [pc, #60]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4a0e      	ldr	r2, [pc, #56]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 800a02c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a030:	6093      	str	r3, [r2, #8]
 800a032:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03e:	4909      	ldr	r1, [pc, #36]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 800a040:	4313      	orrs	r3, r2
 800a042:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a04c:	d30e      	bcc.n	800a06c <HAL_RCC_OscConfig+0x294>
 800a04e:	4b05      	ldr	r3, [pc, #20]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f023 021f 	bic.w	r2, r3, #31
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	4902      	ldr	r1, [pc, #8]	; (800a064 <HAL_RCC_OscConfig+0x28c>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60cb      	str	r3, [r1, #12]
 800a060:	e04a      	b.n	800a0f8 <HAL_RCC_OscConfig+0x320>
 800a062:	bf00      	nop
 800a064:	46020c00 	.word	0x46020c00
 800a068:	2000005c 	.word	0x2000005c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	da0a      	bge.n	800a08a <HAL_RCC_OscConfig+0x2b2>
 800a074:	4b9b      	ldr	r3, [pc, #620]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	015b      	lsls	r3, r3, #5
 800a082:	4998      	ldr	r1, [pc, #608]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	60cb      	str	r3, [r1, #12]
 800a088:	e036      	b.n	800a0f8 <HAL_RCC_OscConfig+0x320>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a092:	d30a      	bcc.n	800a0aa <HAL_RCC_OscConfig+0x2d2>
 800a094:	4b93      	ldr	r3, [pc, #588]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	029b      	lsls	r3, r3, #10
 800a0a2:	4990      	ldr	r1, [pc, #576]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60cb      	str	r3, [r1, #12]
 800a0a8:	e026      	b.n	800a0f8 <HAL_RCC_OscConfig+0x320>
 800a0aa:	4b8e      	ldr	r3, [pc, #568]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	03db      	lsls	r3, r3, #15
 800a0b8:	498a      	ldr	r1, [pc, #552]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60cb      	str	r3, [r1, #12]
 800a0be:	e01b      	b.n	800a0f8 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a0c0:	4b88      	ldr	r3, [pc, #544]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a87      	ldr	r2, [pc, #540]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a0cc:	f7fc fcda 	bl	8006a84 <HAL_GetTick>
 800a0d0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a0d2:	e009      	b.n	800a0e8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a0d4:	f7fc fcd6 	bl	8006a84 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d902      	bls.n	800a0e8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	f000 bd48 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a0e8:	4b7e      	ldr	r3, [pc, #504]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1ef      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x2fc>
 800a0f4:	e000      	b.n	800a0f8 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a0f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 8094 	beq.w	800a22e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	2b08      	cmp	r3, #8
 800a10a:	d005      	beq.n	800a118 <HAL_RCC_OscConfig+0x340>
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	2b0c      	cmp	r3, #12
 800a110:	d110      	bne.n	800a134 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	2b03      	cmp	r3, #3
 800a116:	d10d      	bne.n	800a134 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a118:	4b72      	ldr	r3, [pc, #456]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 8083 	beq.w	800a22c <HAL_RCC_OscConfig+0x454>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d17e      	bne.n	800a22c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f000 bd22 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a13c:	d106      	bne.n	800a14c <HAL_RCC_OscConfig+0x374>
 800a13e:	4b69      	ldr	r3, [pc, #420]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a68      	ldr	r2, [pc, #416]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	e041      	b.n	800a1d0 <HAL_RCC_OscConfig+0x3f8>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a154:	d112      	bne.n	800a17c <HAL_RCC_OscConfig+0x3a4>
 800a156:	4b63      	ldr	r3, [pc, #396]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a62      	ldr	r2, [pc, #392]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a15c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	4b60      	ldr	r3, [pc, #384]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a5f      	ldr	r2, [pc, #380]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a168:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	4b5d      	ldr	r3, [pc, #372]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a5c      	ldr	r2, [pc, #368]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	e029      	b.n	800a1d0 <HAL_RCC_OscConfig+0x3f8>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a184:	d112      	bne.n	800a1ac <HAL_RCC_OscConfig+0x3d4>
 800a186:	4b57      	ldr	r3, [pc, #348]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a56      	ldr	r2, [pc, #344]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a18c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	4b54      	ldr	r3, [pc, #336]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a53      	ldr	r2, [pc, #332]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	4b51      	ldr	r3, [pc, #324]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a50      	ldr	r2, [pc, #320]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	e011      	b.n	800a1d0 <HAL_RCC_OscConfig+0x3f8>
 800a1ac:	4b4d      	ldr	r3, [pc, #308]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a4c      	ldr	r2, [pc, #304]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	4b4a      	ldr	r3, [pc, #296]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a49      	ldr	r2, [pc, #292]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	4b47      	ldr	r3, [pc, #284]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a46      	ldr	r2, [pc, #280]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d014      	beq.n	800a202 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800a1d8:	f7fc fc54 	bl	8006a84 <HAL_GetTick>
 800a1dc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1de:	e009      	b.n	800a1f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1e0:	f7fc fc50 	bl	8006a84 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b64      	cmp	r3, #100	; 0x64
 800a1ec:	d902      	bls.n	800a1f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	f000 bcc2 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1f4:	4b3b      	ldr	r3, [pc, #236]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0ef      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x408>
 800a200:	e015      	b.n	800a22e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a202:	f7fc fc3f 	bl	8006a84 <HAL_GetTick>
 800a206:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a208:	e009      	b.n	800a21e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a20a:	f7fc fc3b 	bl	8006a84 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b64      	cmp	r3, #100	; 0x64
 800a216:	d902      	bls.n	800a21e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	f000 bcad 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a21e:	4b31      	ldr	r3, [pc, #196]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1ef      	bne.n	800a20a <HAL_RCC_OscConfig+0x432>
 800a22a:	e000      	b.n	800a22e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a22c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d066      	beq.n	800a308 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d005      	beq.n	800a24c <HAL_RCC_OscConfig+0x474>
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	2b0c      	cmp	r3, #12
 800a244:	d11a      	bne.n	800a27c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d117      	bne.n	800a27c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a24c:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a254:	2b00      	cmp	r3, #0
 800a256:	d006      	beq.n	800a266 <HAL_RCC_OscConfig+0x48e>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	f000 bc89 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a266:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	491b      	ldr	r1, [pc, #108]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a276:	4313      	orrs	r3, r2
 800a278:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a27a:	e045      	b.n	800a308 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d024      	beq.n	800a2ce <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a284:	4b17      	ldr	r3, [pc, #92]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a16      	ldr	r2, [pc, #88]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a28a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a28e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a290:	f7fc fbf8 	bl	8006a84 <HAL_GetTick>
 800a294:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a296:	e009      	b.n	800a2ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a298:	f7fc fbf4 	bl	8006a84 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d902      	bls.n	800a2ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	f000 bc66 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0ef      	beq.n	800a298 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	041b      	lsls	r3, r3, #16
 800a2c6:	4907      	ldr	r1, [pc, #28]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	610b      	str	r3, [r1, #16]
 800a2cc:	e01c      	b.n	800a308 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a04      	ldr	r2, [pc, #16]	; (800a2e4 <HAL_RCC_OscConfig+0x50c>)
 800a2d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a2da:	f7fc fbd3 	bl	8006a84 <HAL_GetTick>
 800a2de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a2e0:	e00c      	b.n	800a2fc <HAL_RCC_OscConfig+0x524>
 800a2e2:	bf00      	nop
 800a2e4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2e8:	f7fc fbcc 	bl	8006a84 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d902      	bls.n	800a2fc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	f000 bc3e 	b.w	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a2fc:	4baf      	ldr	r3, [pc, #700]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1ef      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0308 	and.w	r3, r3, #8
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80c7 	beq.w	800a4a4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a316:	2300      	movs	r3, #0
 800a318:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a31c:	4ba7      	ldr	r3, [pc, #668]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a31e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d111      	bne.n	800a34e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a32a:	4ba4      	ldr	r3, [pc, #656]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a32c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a330:	4aa2      	ldr	r2, [pc, #648]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a332:	f043 0304 	orr.w	r3, r3, #4
 800a336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a33a:	4ba0      	ldr	r3, [pc, #640]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	617b      	str	r3, [r7, #20]
 800a346:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a34e:	4b9c      	ldr	r3, [pc, #624]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d118      	bne.n	800a38c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a35a:	4b99      	ldr	r3, [pc, #612]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	4a98      	ldr	r2, [pc, #608]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a360:	f043 0301 	orr.w	r3, r3, #1
 800a364:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a366:	f7fc fb8d 	bl	8006a84 <HAL_GetTick>
 800a36a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a36c:	e008      	b.n	800a380 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a36e:	f7fc fb89 	bl	8006a84 <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d901      	bls.n	800a380 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e3fb      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a380:	4b8f      	ldr	r3, [pc, #572]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0f0      	beq.n	800a36e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d05f      	beq.n	800a454 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a394:	4b89      	ldr	r3, [pc, #548]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a39a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	699a      	ldr	r2, [r3, #24]
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d037      	beq.n	800a41a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d006      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e3da      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01b      	beq.n	800a404 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800a3cc:	4b7b      	ldr	r3, [pc, #492]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a3ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3d2:	4a7a      	ldr	r2, [pc, #488]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a3d4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a3d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800a3dc:	f7fc fb52 	bl	8006a84 <HAL_GetTick>
 800a3e0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a3e2:	e008      	b.n	800a3f6 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3e4:	f7fc fb4e 	bl	8006a84 <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d901      	bls.n	800a3f6 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e3c0      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a3f6:	4b71      	ldr	r3, [pc, #452]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a3f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1ef      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a404:	4b6d      	ldr	r3, [pc, #436]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a40a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	496a      	ldr	r1, [pc, #424]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a414:	4313      	orrs	r3, r2
 800a416:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a41a:	4b68      	ldr	r3, [pc, #416]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a41c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a420:	4a66      	ldr	r2, [pc, #408]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a426:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a42a:	f7fc fb2b 	bl	8006a84 <HAL_GetTick>
 800a42e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a430:	e008      	b.n	800a444 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a432:	f7fc fb27 	bl	8006a84 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e399      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a444:	4b5d      	ldr	r3, [pc, #372]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a44a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0ef      	beq.n	800a432 <HAL_RCC_OscConfig+0x65a>
 800a452:	e01b      	b.n	800a48c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a454:	4b59      	ldr	r3, [pc, #356]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a45a:	4a58      	ldr	r2, [pc, #352]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a45c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a460:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a464:	f7fc fb0e 	bl	8006a84 <HAL_GetTick>
 800a468:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a46c:	f7fc fb0a 	bl	8006a84 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e37c      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a47e:	4b4f      	ldr	r3, [pc, #316]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1ef      	bne.n	800a46c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a48c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a490:	2b01      	cmp	r3, #1
 800a492:	d107      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a494:	4b49      	ldr	r3, [pc, #292]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a49a:	4a48      	ldr	r2, [pc, #288]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a49c:	f023 0304 	bic.w	r3, r3, #4
 800a4a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 8112 	beq.w	800a6d6 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4b8:	4b40      	ldr	r3, [pc, #256]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d111      	bne.n	800a4ea <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4c6:	4b3d      	ldr	r3, [pc, #244]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a4c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4cc:	4a3b      	ldr	r2, [pc, #236]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a4ce:	f043 0304 	orr.w	r3, r3, #4
 800a4d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a4d6:	4b39      	ldr	r3, [pc, #228]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a4d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	613b      	str	r3, [r7, #16]
 800a4e2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a4ea:	4b35      	ldr	r3, [pc, #212]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d118      	bne.n	800a528 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a4f6:	4b32      	ldr	r3, [pc, #200]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	4a31      	ldr	r2, [pc, #196]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a4fc:	f043 0301 	orr.w	r3, r3, #1
 800a500:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a502:	f7fc fabf 	bl	8006a84 <HAL_GetTick>
 800a506:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a508:	e008      	b.n	800a51c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a50a:	f7fc fabb 	bl	8006a84 <HAL_GetTick>
 800a50e:	4602      	mov	r2, r0
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	2b02      	cmp	r3, #2
 800a516:	d901      	bls.n	800a51c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e32d      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a51c:	4b28      	ldr	r3, [pc, #160]	; (800a5c0 <HAL_RCC_OscConfig+0x7e8>)
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0f0      	beq.n	800a50a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01f      	beq.n	800a574 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f003 0304 	and.w	r3, r3, #4
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d010      	beq.n	800a562 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a540:	4b1e      	ldr	r3, [pc, #120]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a546:	4a1d      	ldr	r2, [pc, #116]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a548:	f043 0304 	orr.w	r3, r3, #4
 800a54c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a550:	4b1a      	ldr	r3, [pc, #104]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a556:	4a19      	ldr	r2, [pc, #100]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a558:	f043 0301 	orr.w	r3, r3, #1
 800a55c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a560:	e018      	b.n	800a594 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a568:	4a14      	ldr	r2, [pc, #80]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a56a:	f043 0301 	orr.w	r3, r3, #1
 800a56e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a572:	e00f      	b.n	800a594 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a574:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a57a:	4a10      	ldr	r2, [pc, #64]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a584:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a58a:	4a0c      	ldr	r2, [pc, #48]	; (800a5bc <HAL_RCC_OscConfig+0x7e4>)
 800a58c:	f023 0304 	bic.w	r3, r3, #4
 800a590:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d058      	beq.n	800a64e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800a59c:	f7fc fa72 	bl	8006a84 <HAL_GetTick>
 800a5a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5a2:	e00f      	b.n	800a5c4 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5a4:	f7fc fa6e 	bl	8006a84 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d906      	bls.n	800a5c4 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e2de      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
 800a5ba:	bf00      	nop
 800a5bc:	46020c00 	.word	0x46020c00
 800a5c0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5c4:	4b9c      	ldr	r3, [pc, #624]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a5c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0e8      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01b      	beq.n	800a616 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a5de:	4b96      	ldr	r3, [pc, #600]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a5e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5e4:	4a94      	ldr	r2, [pc, #592]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a5ee:	e00a      	b.n	800a606 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5f0:	f7fc fa48 	bl	8006a84 <HAL_GetTick>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e2b8      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a606:	4b8c      	ldr	r3, [pc, #560]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a60c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0ed      	beq.n	800a5f0 <HAL_RCC_OscConfig+0x818>
 800a614:	e053      	b.n	800a6be <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a616:	4b88      	ldr	r3, [pc, #544]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a61c:	4a86      	ldr	r2, [pc, #536]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a61e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a622:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a626:	e00a      	b.n	800a63e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a628:	f7fc fa2c 	bl	8006a84 <HAL_GetTick>
 800a62c:	4602      	mov	r2, r0
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	f241 3288 	movw	r2, #5000	; 0x1388
 800a636:	4293      	cmp	r3, r2
 800a638:	d901      	bls.n	800a63e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e29c      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a63e:	4b7e      	ldr	r3, [pc, #504]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1ed      	bne.n	800a628 <HAL_RCC_OscConfig+0x850>
 800a64c:	e037      	b.n	800a6be <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a64e:	f7fc fa19 	bl	8006a84 <HAL_GetTick>
 800a652:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a654:	e00a      	b.n	800a66c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a656:	f7fc fa15 	bl	8006a84 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	f241 3288 	movw	r2, #5000	; 0x1388
 800a664:	4293      	cmp	r3, r2
 800a666:	d901      	bls.n	800a66c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e285      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a66c:	4b72      	ldr	r3, [pc, #456]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a66e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1ed      	bne.n	800a656 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a67a:	4b6f      	ldr	r3, [pc, #444]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a67c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01a      	beq.n	800a6be <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a688:	4b6b      	ldr	r3, [pc, #428]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a68a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a68e:	4a6a      	ldr	r2, [pc, #424]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a694:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a698:	e00a      	b.n	800a6b0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a69a:	f7fc f9f3 	bl	8006a84 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d901      	bls.n	800a6b0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e263      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a6b0:	4b61      	ldr	r3, [pc, #388]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a6b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1ed      	bne.n	800a69a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a6be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d107      	bne.n	800a6d6 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6c6:	4b5c      	ldr	r3, [pc, #368]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a6c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6cc:	4a5a      	ldr	r2, [pc, #360]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a6ce:	f023 0304 	bic.w	r3, r3, #4
 800a6d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d036      	beq.n	800a750 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d019      	beq.n	800a71e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a6ea:	4b53      	ldr	r3, [pc, #332]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a52      	ldr	r2, [pc, #328]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a6f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a6f6:	f7fc f9c5 	bl	8006a84 <HAL_GetTick>
 800a6fa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a6fc:	e008      	b.n	800a710 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6fe:	f7fc f9c1 	bl	8006a84 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d901      	bls.n	800a710 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e233      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a710:	4b49      	ldr	r3, [pc, #292]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0f0      	beq.n	800a6fe <HAL_RCC_OscConfig+0x926>
 800a71c:	e018      	b.n	800a750 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a71e:	4b46      	ldr	r3, [pc, #280]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a45      	ldr	r2, [pc, #276]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a728:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a72a:	f7fc f9ab 	bl	8006a84 <HAL_GetTick>
 800a72e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a730:	e008      	b.n	800a744 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a732:	f7fc f9a7 	bl	8006a84 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e219      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a744:	4b3c      	ldr	r3, [pc, #240]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f0      	bne.n	800a732 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d036      	beq.n	800a7ca <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a760:	2b00      	cmp	r3, #0
 800a762:	d019      	beq.n	800a798 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a764:	4b34      	ldr	r3, [pc, #208]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a33      	ldr	r2, [pc, #204]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a76a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a76e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a770:	f7fc f988 	bl	8006a84 <HAL_GetTick>
 800a774:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a776:	e008      	b.n	800a78a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a778:	f7fc f984 	bl	8006a84 <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d901      	bls.n	800a78a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e1f6      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a78a:	4b2b      	ldr	r3, [pc, #172]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0f0      	beq.n	800a778 <HAL_RCC_OscConfig+0x9a0>
 800a796:	e018      	b.n	800a7ca <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a798:	4b27      	ldr	r3, [pc, #156]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a26      	ldr	r2, [pc, #152]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a79e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a7a4:	f7fc f96e 	bl	8006a84 <HAL_GetTick>
 800a7a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a7aa:	e008      	b.n	800a7be <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a7ac:	f7fc f96a 	bl	8006a84 <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d901      	bls.n	800a7be <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e1dc      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a7be:	4b1e      	ldr	r3, [pc, #120]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f0      	bne.n	800a7ac <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d07f      	beq.n	800a8d6 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d062      	beq.n	800a8a4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a7de:	4b16      	ldr	r3, [pc, #88]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	4a15      	ldr	r2, [pc, #84]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a7e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7e8:	6093      	str	r3, [r2, #8]
 800a7ea:	4b13      	ldr	r3, [pc, #76]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f6:	4910      	ldr	r1, [pc, #64]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a804:	d309      	bcc.n	800a81a <HAL_RCC_OscConfig+0xa42>
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	f023 021f 	bic.w	r2, r3, #31
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	4909      	ldr	r1, [pc, #36]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a814:	4313      	orrs	r3, r2
 800a816:	60cb      	str	r3, [r1, #12]
 800a818:	e02a      	b.n	800a870 <HAL_RCC_OscConfig+0xa98>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	da0c      	bge.n	800a83c <HAL_RCC_OscConfig+0xa64>
 800a822:	4b05      	ldr	r3, [pc, #20]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	015b      	lsls	r3, r3, #5
 800a830:	4901      	ldr	r1, [pc, #4]	; (800a838 <HAL_RCC_OscConfig+0xa60>)
 800a832:	4313      	orrs	r3, r2
 800a834:	60cb      	str	r3, [r1, #12]
 800a836:	e01b      	b.n	800a870 <HAL_RCC_OscConfig+0xa98>
 800a838:	46020c00 	.word	0x46020c00
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a844:	d30a      	bcc.n	800a85c <HAL_RCC_OscConfig+0xa84>
 800a846:	4ba5      	ldr	r3, [pc, #660]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	029b      	lsls	r3, r3, #10
 800a854:	49a1      	ldr	r1, [pc, #644]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a856:	4313      	orrs	r3, r2
 800a858:	60cb      	str	r3, [r1, #12]
 800a85a:	e009      	b.n	800a870 <HAL_RCC_OscConfig+0xa98>
 800a85c:	4b9f      	ldr	r3, [pc, #636]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	03db      	lsls	r3, r3, #15
 800a86a:	499c      	ldr	r1, [pc, #624]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a870:	4b9a      	ldr	r3, [pc, #616]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a99      	ldr	r2, [pc, #612]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a876:	f043 0310 	orr.w	r3, r3, #16
 800a87a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a87c:	f7fc f902 	bl	8006a84 <HAL_GetTick>
 800a880:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a882:	e008      	b.n	800a896 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a884:	f7fc f8fe 	bl	8006a84 <HAL_GetTick>
 800a888:	4602      	mov	r2, r0
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d901      	bls.n	800a896 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e170      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a896:	4b91      	ldr	r3, [pc, #580]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0f0      	beq.n	800a884 <HAL_RCC_OscConfig+0xaac>
 800a8a2:	e018      	b.n	800a8d6 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a8a4:	4b8d      	ldr	r3, [pc, #564]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a8c      	ldr	r2, [pc, #560]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a8aa:	f023 0310 	bic.w	r3, r3, #16
 800a8ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a8b0:	f7fc f8e8 	bl	8006a84 <HAL_GetTick>
 800a8b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a8b6:	e008      	b.n	800a8ca <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a8b8:	f7fc f8e4 	bl	8006a84 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d901      	bls.n	800a8ca <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e156      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a8ca:	4b84      	ldr	r3, [pc, #528]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 0320 	and.w	r3, r3, #32
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1f0      	bne.n	800a8b8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 814b 	beq.w	800ab76 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8e6:	4b7d      	ldr	r3, [pc, #500]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	f003 030c 	and.w	r3, r3, #12
 800a8ee:	2b0c      	cmp	r3, #12
 800a8f0:	f000 80fa 	beq.w	800aae8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	f040 80cc 	bne.w	800aa96 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a8fe:	4b77      	ldr	r3, [pc, #476]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a76      	ldr	r2, [pc, #472]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a908:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a90a:	f7fc f8bb 	bl	8006a84 <HAL_GetTick>
 800a90e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a910:	e008      	b.n	800a924 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a912:	f7fc f8b7 	bl	8006a84 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d901      	bls.n	800a924 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800a920:	2303      	movs	r3, #3
 800a922:	e129      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a924:	4b6d      	ldr	r3, [pc, #436]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1f0      	bne.n	800a912 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a930:	4b6a      	ldr	r3, [pc, #424]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d111      	bne.n	800a962 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a93e:	4b67      	ldr	r3, [pc, #412]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a944:	4a65      	ldr	r2, [pc, #404]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a946:	f043 0304 	orr.w	r3, r3, #4
 800a94a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a94e:	4b63      	ldr	r3, [pc, #396]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a95c:	2301      	movs	r3, #1
 800a95e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a962:	4b5f      	ldr	r3, [pc, #380]	; (800aae0 <HAL_RCC_OscConfig+0xd08>)
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a96a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a96e:	d102      	bne.n	800a976 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800a970:	2301      	movs	r3, #1
 800a972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a976:	4b5a      	ldr	r3, [pc, #360]	; (800aae0 <HAL_RCC_OscConfig+0xd08>)
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	4a59      	ldr	r2, [pc, #356]	; (800aae0 <HAL_RCC_OscConfig+0xd08>)
 800a97c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a980:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a982:	4b56      	ldr	r3, [pc, #344]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a98a:	f023 0303 	bic.w	r3, r3, #3
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a996:	3a01      	subs	r2, #1
 800a998:	0212      	lsls	r2, r2, #8
 800a99a:	4311      	orrs	r1, r2
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	494e      	ldr	r1, [pc, #312]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	628b      	str	r3, [r1, #40]	; 0x28
 800a9a8:	4b4c      	ldr	r3, [pc, #304]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a9aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9ac:	4b4d      	ldr	r3, [pc, #308]	; (800aae4 <HAL_RCC_OscConfig+0xd0c>)
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9b4:	3a01      	subs	r2, #1
 800a9b6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a9be:	3a01      	subs	r2, #1
 800a9c0:	0252      	lsls	r2, r2, #9
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	4311      	orrs	r1, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a9ca:	3a01      	subs	r2, #1
 800a9cc:	0412      	lsls	r2, r2, #16
 800a9ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a9d2:	4311      	orrs	r1, r2
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a9d8:	3a01      	subs	r2, #1
 800a9da:	0612      	lsls	r2, r2, #24
 800a9dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	493e      	ldr	r1, [pc, #248]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a9e8:	4b3c      	ldr	r3, [pc, #240]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ec:	4a3b      	ldr	r2, [pc, #236]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a9ee:	f023 0310 	bic.w	r3, r3, #16
 800a9f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a9f4:	4b39      	ldr	r3, [pc, #228]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa04:	00d2      	lsls	r2, r2, #3
 800aa06:	4935      	ldr	r1, [pc, #212]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aa0c:	4b33      	ldr	r3, [pc, #204]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa10:	4a32      	ldr	r2, [pc, #200]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa12:	f043 0310 	orr.w	r3, r3, #16
 800aa16:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800aa18:	4b30      	ldr	r3, [pc, #192]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1c:	f023 020c 	bic.w	r2, r3, #12
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa24:	492d      	ldr	r1, [pc, #180]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa26:	4313      	orrs	r3, r2
 800aa28:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800aa2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d105      	bne.n	800aa3e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800aa32:	4b2b      	ldr	r3, [pc, #172]	; (800aae0 <HAL_RCC_OscConfig+0xd08>)
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	4a2a      	ldr	r2, [pc, #168]	; (800aae0 <HAL_RCC_OscConfig+0xd08>)
 800aa38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa3c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800aa3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d107      	bne.n	800aa56 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800aa46:	4b25      	ldr	r3, [pc, #148]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa4c:	4a23      	ldr	r2, [pc, #140]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa4e:	f023 0304 	bic.w	r3, r3, #4
 800aa52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aa56:	4b21      	ldr	r3, [pc, #132]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5a:	4a20      	ldr	r2, [pc, #128]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa60:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800aa62:	4b1e      	ldr	r3, [pc, #120]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a1d      	ldr	r2, [pc, #116]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa6c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aa6e:	f7fc f809 	bl	8006a84 <HAL_GetTick>
 800aa72:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aa74:	e008      	b.n	800aa88 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa76:	f7fc f805 	bl	8006a84 <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d901      	bls.n	800aa88 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e077      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aa88:	4b14      	ldr	r3, [pc, #80]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0f0      	beq.n	800aa76 <HAL_RCC_OscConfig+0xc9e>
 800aa94:	e06f      	b.n	800ab76 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800aa96:	4b11      	ldr	r3, [pc, #68]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a10      	ldr	r2, [pc, #64]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aa9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaa0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aaa2:	f7fb ffef 	bl	8006a84 <HAL_GetTick>
 800aaa6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aaa8:	e008      	b.n	800aabc <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaaa:	f7fb ffeb 	bl	8006a84 <HAL_GetTick>
 800aaae:	4602      	mov	r2, r0
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d901      	bls.n	800aabc <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e05d      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aabc:	4b07      	ldr	r3, [pc, #28]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1f0      	bne.n	800aaaa <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800aac8:	4b04      	ldr	r3, [pc, #16]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aacc:	4a03      	ldr	r2, [pc, #12]	; (800aadc <HAL_RCC_OscConfig+0xd04>)
 800aace:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800aad2:	f023 0303 	bic.w	r3, r3, #3
 800aad6:	6293      	str	r3, [r2, #40]	; 0x28
 800aad8:	e04d      	b.n	800ab76 <HAL_RCC_OscConfig+0xd9e>
 800aada:	bf00      	nop
 800aadc:	46020c00 	.word	0x46020c00
 800aae0:	46020800 	.word	0x46020800
 800aae4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800aae8:	4b25      	ldr	r3, [pc, #148]	; (800ab80 <HAL_RCC_OscConfig+0xda8>)
 800aaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <HAL_RCC_OscConfig+0xda8>)
 800aaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d03a      	beq.n	800ab72 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	f003 0203 	and.w	r2, r3, #3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d133      	bne.n	800ab72 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	0a1b      	lsrs	r3, r3, #8
 800ab0e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab16:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d12a      	bne.n	800ab72 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	0b1b      	lsrs	r3, r3, #12
 800ab20:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d122      	bne.n	800ab72 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab36:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d11a      	bne.n	800ab72 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	0a5b      	lsrs	r3, r3, #9
 800ab40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab48:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d111      	bne.n	800ab72 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	0c1b      	lsrs	r3, r3, #16
 800ab52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab5a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d108      	bne.n	800ab72 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	0e1b      	lsrs	r3, r3, #24
 800ab64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab6c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d001      	beq.n	800ab76 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e000      	b.n	800ab78 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3738      	adds	r7, #56	; 0x38
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	46020c00 	.word	0x46020c00

0800ab84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e1d9      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab98:	4b9b      	ldr	r3, [pc, #620]	; (800ae08 <HAL_RCC_ClockConfig+0x284>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d910      	bls.n	800abc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aba6:	4b98      	ldr	r3, [pc, #608]	; (800ae08 <HAL_RCC_ClockConfig+0x284>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f023 020f 	bic.w	r2, r3, #15
 800abae:	4996      	ldr	r1, [pc, #600]	; (800ae08 <HAL_RCC_ClockConfig+0x284>)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abb6:	4b94      	ldr	r3, [pc, #592]	; (800ae08 <HAL_RCC_ClockConfig+0x284>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 030f 	and.w	r3, r3, #15
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d001      	beq.n	800abc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e1c1      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d010      	beq.n	800abf6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	695a      	ldr	r2, [r3, #20]
 800abd8:	4b8c      	ldr	r3, [pc, #560]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d908      	bls.n	800abf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800abe4:	4b89      	ldr	r3, [pc, #548]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	695b      	ldr	r3, [r3, #20]
 800abf0:	4986      	ldr	r1, [pc, #536]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d012      	beq.n	800ac28 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691a      	ldr	r2, [r3, #16]
 800ac06:	4b81      	ldr	r3, [pc, #516]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	091b      	lsrs	r3, r3, #4
 800ac0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d909      	bls.n	800ac28 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800ac14:	4b7d      	ldr	r3, [pc, #500]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	011b      	lsls	r3, r3, #4
 800ac22:	497a      	ldr	r1, [pc, #488]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d010      	beq.n	800ac56 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	4b74      	ldr	r3, [pc, #464]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d908      	bls.n	800ac56 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800ac44:	4b71      	ldr	r3, [pc, #452]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	496e      	ldr	r1, [pc, #440]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d010      	beq.n	800ac84 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689a      	ldr	r2, [r3, #8]
 800ac66:	4b69      	ldr	r3, [pc, #420]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f003 030f 	and.w	r3, r3, #15
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d908      	bls.n	800ac84 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ac72:	4b66      	ldr	r3, [pc, #408]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	f023 020f 	bic.w	r2, r3, #15
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	4963      	ldr	r1, [pc, #396]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ac80:	4313      	orrs	r3, r2
 800ac82:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 80d2 	beq.w	800ae36 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800ac92:	2300      	movs	r3, #0
 800ac94:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d143      	bne.n	800ad26 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac9e:	4b5b      	ldr	r3, [pc, #364]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800aca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d110      	bne.n	800acce <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800acac:	4b57      	ldr	r3, [pc, #348]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800acae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acb2:	4a56      	ldr	r2, [pc, #344]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800acb4:	f043 0304 	orr.w	r3, r3, #4
 800acb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800acbc:	4b53      	ldr	r3, [pc, #332]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800acbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acc2:	f003 0304 	and.w	r3, r3, #4
 800acc6:	60bb      	str	r3, [r7, #8]
 800acc8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800acca:	2301      	movs	r3, #1
 800accc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800acce:	f7fb fed9 	bl	8006a84 <HAL_GetTick>
 800acd2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800acd4:	4b4e      	ldr	r3, [pc, #312]	; (800ae10 <HAL_RCC_ClockConfig+0x28c>)
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00f      	beq.n	800ad00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ace0:	e008      	b.n	800acf4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800ace2:	f7fb fecf 	bl	8006a84 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b02      	cmp	r3, #2
 800acee:	d901      	bls.n	800acf4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e12b      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800acf4:	4b46      	ldr	r3, [pc, #280]	; (800ae10 <HAL_RCC_ClockConfig+0x28c>)
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0f0      	beq.n	800ace2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d107      	bne.n	800ad16 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800ad06:	4b41      	ldr	r3, [pc, #260]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad0c:	4a3f      	ldr	r2, [pc, #252]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad0e:	f023 0304 	bic.w	r3, r3, #4
 800ad12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ad16:	4b3d      	ldr	r3, [pc, #244]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d121      	bne.n	800ad66 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e112      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d107      	bne.n	800ad3e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad2e:	4b37      	ldr	r3, [pc, #220]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d115      	bne.n	800ad66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e106      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d107      	bne.n	800ad56 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ad46:	4b31      	ldr	r3, [pc, #196]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0304 	and.w	r3, r3, #4
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e0fa      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad56:	4b2d      	ldr	r3, [pc, #180]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e0f2      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800ad66:	4b29      	ldr	r3, [pc, #164]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	f023 0203 	bic.w	r2, r3, #3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	4926      	ldr	r1, [pc, #152]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800ad78:	f7fb fe84 	bl	8006a84 <HAL_GetTick>
 800ad7c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d112      	bne.n	800adac <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad86:	e00a      	b.n	800ad9e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad88:	f7fb fe7c 	bl	8006a84 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d901      	bls.n	800ad9e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e0d6      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad9e:	4b1b      	ldr	r3, [pc, #108]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f003 030c 	and.w	r3, r3, #12
 800ada6:	2b0c      	cmp	r3, #12
 800ada8:	d1ee      	bne.n	800ad88 <HAL_RCC_ClockConfig+0x204>
 800adaa:	e044      	b.n	800ae36 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d112      	bne.n	800adda <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800adb4:	e00a      	b.n	800adcc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb6:	f7fb fe65 	bl	8006a84 <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d901      	bls.n	800adcc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e0bf      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800adcc:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f003 030c 	and.w	r3, r3, #12
 800add4:	2b08      	cmp	r3, #8
 800add6:	d1ee      	bne.n	800adb6 <HAL_RCC_ClockConfig+0x232>
 800add8:	e02d      	b.n	800ae36 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d123      	bne.n	800ae2a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ade2:	e00a      	b.n	800adfa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ade4:	f7fb fe4e 	bl	8006a84 <HAL_GetTick>
 800ade8:	4602      	mov	r2, r0
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d901      	bls.n	800adfa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e0a8      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800adfa:	4b04      	ldr	r3, [pc, #16]	; (800ae0c <HAL_RCC_ClockConfig+0x288>)
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f003 030c 	and.w	r3, r3, #12
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1ee      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x260>
 800ae06:	e016      	b.n	800ae36 <HAL_RCC_ClockConfig+0x2b2>
 800ae08:	40022000 	.word	0x40022000
 800ae0c:	46020c00 	.word	0x46020c00
 800ae10:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae14:	f7fb fe36 	bl	8006a84 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d901      	bls.n	800ae2a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e090      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ae2a:	4b4a      	ldr	r3, [pc, #296]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	f003 030c 	and.w	r3, r3, #12
 800ae32:	2b04      	cmp	r3, #4
 800ae34:	d1ee      	bne.n	800ae14 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d010      	beq.n	800ae64 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	4b43      	ldr	r3, [pc, #268]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	f003 030f 	and.w	r3, r3, #15
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d208      	bcs.n	800ae64 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ae52:	4b40      	ldr	r3, [pc, #256]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	f023 020f 	bic.w	r2, r3, #15
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	493d      	ldr	r1, [pc, #244]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae64:	4b3c      	ldr	r3, [pc, #240]	; (800af58 <HAL_RCC_ClockConfig+0x3d4>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 030f 	and.w	r3, r3, #15
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d210      	bcs.n	800ae94 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae72:	4b39      	ldr	r3, [pc, #228]	; (800af58 <HAL_RCC_ClockConfig+0x3d4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f023 020f 	bic.w	r2, r3, #15
 800ae7a:	4937      	ldr	r1, [pc, #220]	; (800af58 <HAL_RCC_ClockConfig+0x3d4>)
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae82:	4b35      	ldr	r3, [pc, #212]	; (800af58 <HAL_RCC_ClockConfig+0x3d4>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d001      	beq.n	800ae94 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e05b      	b.n	800af4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0304 	and.w	r3, r3, #4
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d010      	beq.n	800aec2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68da      	ldr	r2, [r3, #12]
 800aea4:	4b2b      	ldr	r3, [pc, #172]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d208      	bcs.n	800aec2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aeb0:	4b28      	ldr	r3, [pc, #160]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	4925      	ldr	r1, [pc, #148]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800aebe:	4313      	orrs	r3, r2
 800aec0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0308 	and.w	r3, r3, #8
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d012      	beq.n	800aef4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	691a      	ldr	r2, [r3, #16]
 800aed2:	4b20      	ldr	r3, [pc, #128]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	091b      	lsrs	r3, r3, #4
 800aed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aedc:	429a      	cmp	r2, r3
 800aede:	d209      	bcs.n	800aef4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aee0:	4b1c      	ldr	r3, [pc, #112]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	4919      	ldr	r1, [pc, #100]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800aef0:	4313      	orrs	r3, r2
 800aef2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0310 	and.w	r3, r3, #16
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d010      	beq.n	800af22 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	695a      	ldr	r2, [r3, #20]
 800af04:	4b13      	ldr	r3, [pc, #76]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d208      	bcs.n	800af22 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800af10:	4b10      	ldr	r3, [pc, #64]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	490d      	ldr	r1, [pc, #52]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800af1e:	4313      	orrs	r3, r2
 800af20:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800af22:	f000 f821 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800af26:	4602      	mov	r2, r0
 800af28:	4b0a      	ldr	r3, [pc, #40]	; (800af54 <HAL_RCC_ClockConfig+0x3d0>)
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	f003 030f 	and.w	r3, r3, #15
 800af30:	490a      	ldr	r1, [pc, #40]	; (800af5c <HAL_RCC_ClockConfig+0x3d8>)
 800af32:	5ccb      	ldrb	r3, [r1, r3]
 800af34:	fa22 f303 	lsr.w	r3, r2, r3
 800af38:	4a09      	ldr	r2, [pc, #36]	; (800af60 <HAL_RCC_ClockConfig+0x3dc>)
 800af3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800af3c:	4b09      	ldr	r3, [pc, #36]	; (800af64 <HAL_RCC_ClockConfig+0x3e0>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4618      	mov	r0, r3
 800af42:	f7fb fd55 	bl	80069f0 <HAL_InitTick>
 800af46:	4603      	mov	r3, r0
 800af48:	73fb      	strb	r3, [r7, #15]

  return status;
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3718      	adds	r7, #24
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	46020c00 	.word	0x46020c00
 800af58:	40022000 	.word	0x40022000
 800af5c:	0801ea0c 	.word	0x0801ea0c
 800af60:	20000000 	.word	0x20000000
 800af64:	2000005c 	.word	0x2000005c

0800af68 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af68:	b480      	push	{r7}
 800af6a:	b08b      	sub	sp, #44	; 0x2c
 800af6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af76:	4b7b      	ldr	r3, [pc, #492]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	f003 030c 	and.w	r3, r3, #12
 800af7e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af80:	4b78      	ldr	r3, [pc, #480]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800af82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af84:	f003 0303 	and.w	r3, r3, #3
 800af88:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <HAL_RCC_GetSysClockFreq+0x34>
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b0c      	cmp	r3, #12
 800af94:	d121      	bne.n	800afda <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d11e      	bne.n	800afda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800af9c:	4b71      	ldr	r3, [pc, #452]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d107      	bne.n	800afb8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800afa8:	4b6e      	ldr	r3, [pc, #440]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800afaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afae:	0b1b      	lsrs	r3, r3, #12
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	627b      	str	r3, [r7, #36]	; 0x24
 800afb6:	e005      	b.n	800afc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800afb8:	4b6a      	ldr	r3, [pc, #424]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	0f1b      	lsrs	r3, r3, #28
 800afbe:	f003 030f 	and.w	r3, r3, #15
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800afc4:	4a68      	ldr	r2, [pc, #416]	; (800b168 <HAL_RCC_GetSysClockFreq+0x200>)
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d110      	bne.n	800aff6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800afd8:	e00d      	b.n	800aff6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800afda:	4b62      	ldr	r3, [pc, #392]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	f003 030c 	and.w	r3, r3, #12
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d102      	bne.n	800afec <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800afe6:	4b61      	ldr	r3, [pc, #388]	; (800b16c <HAL_RCC_GetSysClockFreq+0x204>)
 800afe8:	623b      	str	r3, [r7, #32]
 800afea:	e004      	b.n	800aff6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	2b08      	cmp	r3, #8
 800aff0:	d101      	bne.n	800aff6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aff2:	4b5e      	ldr	r3, [pc, #376]	; (800b16c <HAL_RCC_GetSysClockFreq+0x204>)
 800aff4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b0c      	cmp	r3, #12
 800affa:	f040 80ac 	bne.w	800b156 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800affe:	4b59      	ldr	r3, [pc, #356]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b002:	f003 0303 	and.w	r3, r3, #3
 800b006:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b008:	4b56      	ldr	r3, [pc, #344]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00c:	0a1b      	lsrs	r3, r3, #8
 800b00e:	f003 030f 	and.w	r3, r3, #15
 800b012:	3301      	adds	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b016:	4b53      	ldr	r3, [pc, #332]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	091b      	lsrs	r3, r3, #4
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b022:	4b50      	ldr	r3, [pc, #320]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	08db      	lsrs	r3, r3, #3
 800b028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	fb02 f303 	mul.w	r3, r2, r3
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 8086 	beq.w	800b152 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d003      	beq.n	800b054 <HAL_RCC_GetSysClockFreq+0xec>
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d022      	beq.n	800b098 <HAL_RCC_GetSysClockFreq+0x130>
 800b052:	e043      	b.n	800b0dc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	ee07 3a90 	vmov	s15, r3
 800b05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05e:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b170 <HAL_RCC_GetSysClockFreq+0x208>
 800b062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b066:	4b3f      	ldr	r3, [pc, #252]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06e:	ee07 3a90 	vmov	s15, r3
 800b072:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b076:	ed97 6a01 	vldr	s12, [r7, #4]
 800b07a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b174 <HAL_RCC_GetSysClockFreq+0x20c>
 800b07e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b082:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b08a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b092:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b096:	e046      	b.n	800b126 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	ee07 3a90 	vmov	s15, r3
 800b09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a2:	eddf 6a33 	vldr	s13, [pc, #204]	; 800b170 <HAL_RCC_GetSysClockFreq+0x208>
 800b0a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0aa:	4b2e      	ldr	r3, [pc, #184]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b0ba:	ed97 6a01 	vldr	s12, [r7, #4]
 800b0be:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800b174 <HAL_RCC_GetSysClockFreq+0x20c>
 800b0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b0ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b0da:	e024      	b.n	800b126 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	ee07 3a90 	vmov	s15, r3
 800b0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f4:	4b1b      	ldr	r3, [pc, #108]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b104:	ed97 6a01 	vldr	s12, [r7, #4]
 800b108:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800b174 <HAL_RCC_GetSysClockFreq+0x20c>
 800b10c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b110:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b118:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b120:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b124:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b126:	4b0f      	ldr	r3, [pc, #60]	; (800b164 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12a:	0e1b      	lsrs	r3, r3, #24
 800b12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b130:	3301      	adds	r3, #1
 800b132:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b13e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b14a:	ee17 3a90 	vmov	r3, s15
 800b14e:	623b      	str	r3, [r7, #32]
 800b150:	e001      	b.n	800b156 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800b156:	6a3b      	ldr	r3, [r7, #32]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	372c      	adds	r7, #44	; 0x2c
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	46020c00 	.word	0x46020c00
 800b168:	0801ea24 	.word	0x0801ea24
 800b16c:	00f42400 	.word	0x00f42400
 800b170:	4b742400 	.word	0x4b742400
 800b174:	46000000 	.word	0x46000000

0800b178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b17c:	f7ff fef4 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800b180:	4602      	mov	r2, r0
 800b182:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <HAL_RCC_GetHCLKFreq+0x28>)
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	f003 030f 	and.w	r3, r3, #15
 800b18a:	4906      	ldr	r1, [pc, #24]	; (800b1a4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800b18c:	5ccb      	ldrb	r3, [r1, r3]
 800b18e:	fa22 f303 	lsr.w	r3, r2, r3
 800b192:	4a05      	ldr	r2, [pc, #20]	; (800b1a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800b194:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b196:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800b198:	681b      	ldr	r3, [r3, #0]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	46020c00 	.word	0x46020c00
 800b1a4:	0801ea0c 	.word	0x0801ea0c
 800b1a8:	20000000 	.word	0x20000000

0800b1ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b1b0:	f7ff ffe2 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	091b      	lsrs	r3, r3, #4
 800b1bc:	f003 0307 	and.w	r3, r3, #7
 800b1c0:	4903      	ldr	r1, [pc, #12]	; (800b1d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1c2:	5ccb      	ldrb	r3, [r1, r3]
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	46020c00 	.word	0x46020c00
 800b1d0:	0801ea1c 	.word	0x0801ea1c

0800b1d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b1d8:	f7ff ffce 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	0a1b      	lsrs	r3, r3, #8
 800b1e4:	f003 0307 	and.w	r3, r3, #7
 800b1e8:	4903      	ldr	r1, [pc, #12]	; (800b1f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b1ea:	5ccb      	ldrb	r3, [r1, r3]
 800b1ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	46020c00 	.word	0x46020c00
 800b1f8:	0801ea1c 	.word	0x0801ea1c

0800b1fc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b200:	f7ff ffba 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800b204:	4602      	mov	r2, r0
 800b206:	4b05      	ldr	r3, [pc, #20]	; (800b21c <HAL_RCC_GetPCLK3Freq+0x20>)
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	091b      	lsrs	r3, r3, #4
 800b20c:	f003 0307 	and.w	r3, r3, #7
 800b210:	4903      	ldr	r1, [pc, #12]	; (800b220 <HAL_RCC_GetPCLK3Freq+0x24>)
 800b212:	5ccb      	ldrb	r3, [r1, r3]
 800b214:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b218:	4618      	mov	r0, r3
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	46020c00 	.word	0x46020c00
 800b220:	0801ea1c 	.word	0x0801ea1c

0800b224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b22c:	4b3e      	ldr	r3, [pc, #248]	; (800b328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b22e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b232:	f003 0304 	and.w	r3, r3, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b23a:	f7fe fd8f 	bl	8009d5c <HAL_PWREx_GetVoltageRange>
 800b23e:	6178      	str	r0, [r7, #20]
 800b240:	e019      	b.n	800b276 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b242:	4b39      	ldr	r3, [pc, #228]	; (800b328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b248:	4a37      	ldr	r2, [pc, #220]	; (800b328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b24a:	f043 0304 	orr.w	r3, r3, #4
 800b24e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b252:	4b35      	ldr	r3, [pc, #212]	; (800b328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b258:	f003 0304 	and.w	r3, r3, #4
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b260:	f7fe fd7c 	bl	8009d5c <HAL_PWREx_GetVoltageRange>
 800b264:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b266:	4b30      	ldr	r3, [pc, #192]	; (800b328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b26c:	4a2e      	ldr	r2, [pc, #184]	; (800b328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b26e:	f023 0304 	bic.w	r3, r3, #4
 800b272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b27c:	d003      	beq.n	800b286 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b284:	d109      	bne.n	800b29a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b28c:	d202      	bcs.n	800b294 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b28e:	2301      	movs	r3, #1
 800b290:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b292:	e033      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b294:	2300      	movs	r3, #0
 800b296:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b298:	e030      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2a0:	d208      	bcs.n	800b2b4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a8:	d102      	bne.n	800b2b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	613b      	str	r3, [r7, #16]
 800b2ae:	e025      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e035      	b.n	800b320 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ba:	d90f      	bls.n	800b2dc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d109      	bne.n	800b2d6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2c8:	d902      	bls.n	800b2d0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	613b      	str	r3, [r7, #16]
 800b2ce:	e015      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	613b      	str	r3, [r7, #16]
 800b2d4:	e012      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	613b      	str	r3, [r7, #16]
 800b2da:	e00f      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2e2:	d109      	bne.n	800b2f8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ea:	d102      	bne.n	800b2f2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	613b      	str	r3, [r7, #16]
 800b2f0:	e004      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	613b      	str	r3, [r7, #16]
 800b2f6:	e001      	b.n	800b2fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b2fc:	4b0b      	ldr	r3, [pc, #44]	; (800b32c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f023 020f 	bic.w	r2, r3, #15
 800b304:	4909      	ldr	r1, [pc, #36]	; (800b32c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	4313      	orrs	r3, r2
 800b30a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b30c:	4b07      	ldr	r3, [pc, #28]	; (800b32c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 030f 	and.w	r3, r3, #15
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	429a      	cmp	r2, r3
 800b318:	d001      	beq.n	800b31e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e000      	b.n	800b320 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	46020c00 	.word	0x46020c00
 800b32c:	40022000 	.word	0x40022000

0800b330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b334:	b0ba      	sub	sp, #232	; 0xe8
 800b336:	af00      	add	r7, sp, #0
 800b338:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b342:	2300      	movs	r3, #0
 800b344:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f002 0401 	and.w	r4, r2, #1
 800b354:	2500      	movs	r5, #0
 800b356:	ea54 0305 	orrs.w	r3, r4, r5
 800b35a:	d00b      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b35c:	4bcb      	ldr	r3, [pc, #812]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b35e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b362:	f023 0103 	bic.w	r1, r3, #3
 800b366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36c:	4ac7      	ldr	r2, [pc, #796]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b36e:	430b      	orrs	r3, r1
 800b370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f002 0802 	and.w	r8, r2, #2
 800b380:	f04f 0900 	mov.w	r9, #0
 800b384:	ea58 0309 	orrs.w	r3, r8, r9
 800b388:	d00b      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b38a:	4bc0      	ldr	r3, [pc, #768]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b38c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b390:	f023 010c 	bic.w	r1, r3, #12
 800b394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39a:	4abc      	ldr	r2, [pc, #752]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b39c:	430b      	orrs	r3, r1
 800b39e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b3a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f002 0a04 	and.w	sl, r2, #4
 800b3ae:	f04f 0b00 	mov.w	fp, #0
 800b3b2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b3b6:	d00b      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b3b8:	4bb4      	ldr	r3, [pc, #720]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b3ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3be:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c8:	4ab0      	ldr	r2, [pc, #704]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b3d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f002 0308 	and.w	r3, r2, #8
 800b3dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	d00b      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b3f0:	4ba6      	ldr	r3, [pc, #664]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b3f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b3fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b400:	4aa2      	ldr	r2, [pc, #648]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b402:	430b      	orrs	r3, r1
 800b404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f002 0310 	and.w	r3, r2, #16
 800b414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b418:	2300      	movs	r3, #0
 800b41a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b41e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b422:	460b      	mov	r3, r1
 800b424:	4313      	orrs	r3, r2
 800b426:	d00b      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b428:	4b98      	ldr	r3, [pc, #608]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b42a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b42e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b438:	4a94      	ldr	r2, [pc, #592]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b43a:	430b      	orrs	r3, r1
 800b43c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f002 0320 	and.w	r3, r2, #32
 800b44c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b450:	2300      	movs	r3, #0
 800b452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b456:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b45a:	460b      	mov	r3, r1
 800b45c:	4313      	orrs	r3, r2
 800b45e:	d00b      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b460:	4b8a      	ldr	r3, [pc, #552]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b466:	f023 0107 	bic.w	r1, r3, #7
 800b46a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b470:	4a86      	ldr	r2, [pc, #536]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b472:	430b      	orrs	r3, r1
 800b474:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b488:	2300      	movs	r3, #0
 800b48a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b48e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b492:	460b      	mov	r3, r1
 800b494:	4313      	orrs	r3, r2
 800b496:	d00b      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b498:	4b7c      	ldr	r3, [pc, #496]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b49a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b49e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800b4a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4a8:	4a78      	ldr	r2, [pc, #480]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b4aa:	430b      	orrs	r3, r1
 800b4ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b4b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b4bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d00b      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b4d0:	4b6e      	ldr	r3, [pc, #440]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b4d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e0:	4a6a      	ldr	r2, [pc, #424]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b4e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800b4f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4fe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b502:	460b      	mov	r3, r1
 800b504:	4313      	orrs	r3, r2
 800b506:	d00b      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b508:	4b60      	ldr	r3, [pc, #384]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b50a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b50e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b518:	4a5c      	ldr	r2, [pc, #368]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b51a:	430b      	orrs	r3, r1
 800b51c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b52c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b530:	2300      	movs	r3, #0
 800b532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b536:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b53a:	460b      	mov	r3, r1
 800b53c:	4313      	orrs	r3, r2
 800b53e:	d00b      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b540:	4b52      	ldr	r3, [pc, #328]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b546:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800b54a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b54e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b550:	4a4e      	ldr	r2, [pc, #312]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b552:	430b      	orrs	r3, r1
 800b554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800b564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b56e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b572:	460b      	mov	r3, r1
 800b574:	4313      	orrs	r3, r2
 800b576:	d00b      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b578:	4b44      	ldr	r3, [pc, #272]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b57a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b57e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800b582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b588:	4a40      	ldr	r2, [pc, #256]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b58a:	430b      	orrs	r3, r1
 800b58c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b59c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	d00b      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b5b0:	4b36      	ldr	r3, [pc, #216]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5b6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800b5ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5c0:	4a32      	ldr	r2, [pc, #200]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5c2:	430b      	orrs	r3, r1
 800b5c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b5c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b5d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	d00c      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b5e8:	4b28      	ldr	r3, [pc, #160]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b5ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5fa:	4a24      	ldr	r2, [pc, #144]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b60e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b610:	2300      	movs	r3, #0
 800b612:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b614:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b618:	460b      	mov	r3, r1
 800b61a:	4313      	orrs	r3, r2
 800b61c:	d04f      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b61e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b626:	2b80      	cmp	r3, #128	; 0x80
 800b628:	d02d      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800b62a:	2b80      	cmp	r3, #128	; 0x80
 800b62c:	d827      	bhi.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b62e:	2b60      	cmp	r3, #96	; 0x60
 800b630:	d02e      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b632:	2b60      	cmp	r3, #96	; 0x60
 800b634:	d823      	bhi.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b636:	2b40      	cmp	r3, #64	; 0x40
 800b638:	d006      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800b63a:	2b40      	cmp	r3, #64	; 0x40
 800b63c:	d81f      	bhi.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d009      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800b642:	2b20      	cmp	r3, #32
 800b644:	d011      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800b646:	e01a      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b648:	4b10      	ldr	r3, [pc, #64]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64c:	4a0f      	ldr	r2, [pc, #60]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b64e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b652:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b654:	e01d      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b65a:	3308      	adds	r3, #8
 800b65c:	4618      	mov	r0, r3
 800b65e:	f002 f9c3 	bl	800d9e8 <RCCEx_PLL2_Config>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b668:	e013      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b66a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b66e:	332c      	adds	r3, #44	; 0x2c
 800b670:	4618      	mov	r0, r3
 800b672:	f002 fa51 	bl	800db18 <RCCEx_PLL3_Config>
 800b676:	4603      	mov	r3, r0
 800b678:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b67c:	e009      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b684:	e005      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800b686:	bf00      	nop
 800b688:	e003      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b68a:	bf00      	nop
 800b68c:	46020c00 	.word	0x46020c00
        break;
 800b690:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b692:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10d      	bne.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b69a:	4bb6      	ldr	r3, [pc, #728]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b69c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b6a0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800b6a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ac:	4ab1      	ldr	r2, [pc, #708]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b6ae:	430b      	orrs	r3, r1
 800b6b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b6b4:	e003      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b6ba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b6be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b6ca:	673b      	str	r3, [r7, #112]	; 0x70
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	677b      	str	r3, [r7, #116]	; 0x74
 800b6d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	d053      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b6da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e6:	d033      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b6e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6ec:	d82c      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b6ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6f2:	d02f      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800b6f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6f8:	d826      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b6fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6fe:	d008      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800b700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b704:	d820      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800b70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70e:	d011      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b710:	e01a      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b712:	4b98      	ldr	r3, [pc, #608]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b716:	4a97      	ldr	r2, [pc, #604]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b71c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b71e:	e01a      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b720:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b724:	3308      	adds	r3, #8
 800b726:	4618      	mov	r0, r3
 800b728:	f002 f95e 	bl	800d9e8 <RCCEx_PLL2_Config>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b732:	e010      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b738:	332c      	adds	r3, #44	; 0x2c
 800b73a:	4618      	mov	r0, r3
 800b73c:	f002 f9ec 	bl	800db18 <RCCEx_PLL3_Config>
 800b740:	4603      	mov	r3, r0
 800b742:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b746:	e006      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b74e:	e002      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800b750:	bf00      	nop
 800b752:	e000      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800b754:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b756:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10d      	bne.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b75e:	4b85      	ldr	r3, [pc, #532]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b764:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800b768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b76c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b770:	4a80      	ldr	r2, [pc, #512]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b772:	430b      	orrs	r3, r1
 800b774:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b778:	e003      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b77e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b78e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b790:	2300      	movs	r3, #0
 800b792:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b794:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b798:	460b      	mov	r3, r1
 800b79a:	4313      	orrs	r3, r2
 800b79c:	d046      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b79e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b7a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b7aa:	d028      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b7ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b7b0:	d821      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b7b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b6:	d022      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b7b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7bc:	d81b      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b7be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7c2:	d01c      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b7c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7c8:	d815      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b7ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ce:	d008      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b7d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d4:	d80f      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d011      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7de:	d00e      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b7e0:	e009      	b.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b7e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 f8fd 	bl	800d9e8 <RCCEx_PLL2_Config>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b7f4:	e004      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b7fc:	e000      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800b7fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b800:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10d      	bne.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b808:	4b5a      	ldr	r3, [pc, #360]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b80a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b80e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b81a:	4a56      	ldr	r2, [pc, #344]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b81c:	430b      	orrs	r3, r1
 800b81e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b822:	e003      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b824:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b828:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b82c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b838:	663b      	str	r3, [r7, #96]	; 0x60
 800b83a:	2300      	movs	r3, #0
 800b83c:	667b      	str	r3, [r7, #100]	; 0x64
 800b83e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b842:	460b      	mov	r3, r1
 800b844:	4313      	orrs	r3, r2
 800b846:	d03f      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b850:	2b04      	cmp	r3, #4
 800b852:	d81e      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800b854:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b89b 	.word	0x0800b89b
 800b860:	0800b871 	.word	0x0800b871
 800b864:	0800b87f 	.word	0x0800b87f
 800b868:	0800b89b 	.word	0x0800b89b
 800b86c:	0800b89b 	.word	0x0800b89b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b870:	4b40      	ldr	r3, [pc, #256]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	4a3f      	ldr	r2, [pc, #252]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b87a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800b87c:	e00e      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b87e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b882:	332c      	adds	r3, #44	; 0x2c
 800b884:	4618      	mov	r0, r3
 800b886:	f002 f947 	bl	800db18 <RCCEx_PLL3_Config>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b890:	e004      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b898:	e000      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800b89a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b89c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10d      	bne.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b8a4:	4b33      	ldr	r3, [pc, #204]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b8a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b8aa:	f023 0107 	bic.w	r1, r3, #7
 800b8ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b6:	4a2f      	ldr	r2, [pc, #188]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b8be:	e003      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b8c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b8c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b8d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	d04d      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b8e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8f0:	d028      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800b8f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8f6:	d821      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800b8f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8fc:	d024      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800b8fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b902:	d81b      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800b904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b908:	d00e      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800b90a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b90e:	d815      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d01b      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800b914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b918:	d110      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b91a:	4b16      	ldr	r3, [pc, #88]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91e:	4a15      	ldr	r2, [pc, #84]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b924:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800b926:	e012      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b92c:	332c      	adds	r3, #44	; 0x2c
 800b92e:	4618      	mov	r0, r3
 800b930:	f002 f8f2 	bl	800db18 <RCCEx_PLL3_Config>
 800b934:	4603      	mov	r3, r0
 800b936:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b93a:	e008      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b942:	e004      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800b944:	bf00      	nop
 800b946:	e002      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800b948:	bf00      	nop
 800b94a:	e000      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800b94c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b94e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d110      	bne.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b956:	4b07      	ldr	r3, [pc, #28]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b95c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b960:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b968:	4a02      	ldr	r2, [pc, #8]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b96a:	430b      	orrs	r3, r1
 800b96c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b970:	e006      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800b972:	bf00      	nop
 800b974:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b978:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b97c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b98c:	653b      	str	r3, [r7, #80]	; 0x50
 800b98e:	2300      	movs	r3, #0
 800b990:	657b      	str	r3, [r7, #84]	; 0x54
 800b992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b996:	460b      	mov	r3, r1
 800b998:	4313      	orrs	r3, r2
 800b99a:	f000 80b5 	beq.w	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9a4:	4b9d      	ldr	r3, [pc, #628]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800b9a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9aa:	f003 0304 	and.w	r3, r3, #4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d113      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9b2:	4b9a      	ldr	r3, [pc, #616]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800b9b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9b8:	4a98      	ldr	r2, [pc, #608]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800b9ba:	f043 0304 	orr.w	r3, r3, #4
 800b9be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b9c2:	4b96      	ldr	r3, [pc, #600]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800b9c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b9da:	4b91      	ldr	r3, [pc, #580]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	4a90      	ldr	r2, [pc, #576]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800b9e0:	f043 0301 	orr.w	r3, r3, #1
 800b9e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b9e6:	f7fb f84d 	bl	8006a84 <HAL_GetTick>
 800b9ea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b9ee:	e00b      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9f0:	f7fb f848 	bl	8006a84 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d903      	bls.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ba06:	e005      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ba08:	4b85      	ldr	r3, [pc, #532]	; (800bc20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0ed      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800ba14:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d165      	bne.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ba1c:	4b7f      	ldr	r3, [pc, #508]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ba1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800ba2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d023      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800ba32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800ba3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d01b      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ba42:	4b76      	ldr	r3, [pc, #472]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ba44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba50:	4b72      	ldr	r3, [pc, #456]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ba52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba56:	4a71      	ldr	r2, [pc, #452]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ba58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba60:	4b6e      	ldr	r3, [pc, #440]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ba62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba66:	4a6d      	ldr	r2, [pc, #436]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ba68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ba70:	4a6a      	ldr	r2, [pc, #424]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ba7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d019      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba86:	f7fa fffd 	bl	8006a84 <HAL_GetTick>
 800ba8a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba8e:	e00d      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba90:	f7fa fff8 	bl	8006a84 <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9a:	1ad2      	subs	r2, r2, r3
 800ba9c:	f241 3388 	movw	r3, #5000	; 0x1388
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d903      	bls.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800baa4:	2303      	movs	r3, #3
 800baa6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800baaa:	e006      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baac:	4b5b      	ldr	r3, [pc, #364]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800baae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0ea      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800baba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10d      	bne.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800bac2:	4b56      	ldr	r3, [pc, #344]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bac8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bacc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bad0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bad4:	4a51      	ldr	r2, [pc, #324]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bad6:	430b      	orrs	r3, r1
 800bad8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800badc:	e008      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bade:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bae2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800bae6:	e003      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800baec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800baf0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d107      	bne.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800baf8:	4b48      	ldr	r3, [pc, #288]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bafa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bafe:	4a47      	ldr	r2, [pc, #284]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb00:	f023 0304 	bic.w	r3, r3, #4
 800bb04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800bb08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bb14:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb16:	2300      	movs	r3, #0
 800bb18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4313      	orrs	r3, r2
 800bb22:	d042      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800bb24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bb30:	d022      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800bb32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bb36:	d81b      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800bb38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb3c:	d011      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800bb3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb42:	d815      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d019      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800bb48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb4c:	d110      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb52:	3308      	adds	r3, #8
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 ff47 	bl	800d9e8 <RCCEx_PLL2_Config>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bb60:	e00d      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb62:	4b2e      	ldr	r3, [pc, #184]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb66:	4a2d      	ldr	r2, [pc, #180]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb6c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800bb6e:	e006      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bb76:	e002      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800bb78:	bf00      	nop
 800bb7a:	e000      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800bb7c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10d      	bne.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800bb86:	4b25      	ldr	r3, [pc, #148]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb8c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800bb90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb98:	4a20      	ldr	r2, [pc, #128]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bba0:	e003      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bba2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bba6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bbaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bbb6:	643b      	str	r3, [r7, #64]	; 0x40
 800bbb8:	2300      	movs	r3, #0
 800bbba:	647b      	str	r3, [r7, #68]	; 0x44
 800bbbc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	d032      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800bbc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd2:	d00b      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800bbd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd8:	d804      	bhi.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d008      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800bbde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe2:	d007      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bbea:	e004      	b.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bbec:	bf00      	nop
 800bbee:	e002      	b.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bbf0:	bf00      	nop
 800bbf2:	e000      	b.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bbf4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bbf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d112      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800bbfe:	4b07      	ldr	r3, [pc, #28]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc10:	4a02      	ldr	r2, [pc, #8]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc12:	430b      	orrs	r3, r1
 800bc14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bc18:	e008      	b.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800bc1a:	bf00      	nop
 800bc1c:	46020c00 	.word	0x46020c00
 800bc20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc24:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bc28:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800bc2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bc38:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bc42:	460b      	mov	r3, r1
 800bc44:	4313      	orrs	r3, r2
 800bc46:	d00c      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800bc48:	4b98      	ldr	r3, [pc, #608]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bc4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc4e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800bc52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc5a:	4a94      	ldr	r2, [pc, #592]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800bc62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bc6e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc70:	2300      	movs	r3, #0
 800bc72:	637b      	str	r3, [r7, #52]	; 0x34
 800bc74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	d019      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800bc7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc8a:	d105      	bne.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc8c:	4b87      	ldr	r3, [pc, #540]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	4a86      	ldr	r2, [pc, #536]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bc92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc96:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800bc98:	4b84      	ldr	r3, [pc, #528]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bc9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc9e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcaa:	4a80      	ldr	r2, [pc, #512]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bcac:	430b      	orrs	r3, r1
 800bcae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800bcb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bcbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4313      	orrs	r3, r2
 800bccc:	d00c      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800bcce:	4b77      	ldr	r3, [pc, #476]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bcd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bce0:	4972      	ldr	r1, [pc, #456]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bce2:	4313      	orrs	r3, r2
 800bce4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800bce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bcf4:	623b      	str	r3, [r7, #32]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcfa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4313      	orrs	r3, r2
 800bd02:	d00c      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800bd04:	4b69      	ldr	r3, [pc, #420]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bd06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bd16:	4965      	ldr	r1, [pc, #404]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800bd1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bd2a:	61bb      	str	r3, [r7, #24]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	61fb      	str	r3, [r7, #28]
 800bd30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd34:	460b      	mov	r3, r1
 800bd36:	4313      	orrs	r3, r2
 800bd38:	d00c      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800bd3a:	4b5c      	ldr	r3, [pc, #368]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bd3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd40:	f023 0218 	bic.w	r2, r3, #24
 800bd44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bd4c:	4957      	ldr	r1, [pc, #348]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bd54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800bd60:	613b      	str	r3, [r7, #16]
 800bd62:	2300      	movs	r3, #0
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	d032      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800bd70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd7c:	d105      	bne.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd7e:	4b4b      	ldr	r3, [pc, #300]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	4a4a      	ldr	r2, [pc, #296]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bd84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd88:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800bd8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd96:	d108      	bne.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 fe22 	bl	800d9e8 <RCCEx_PLL2_Config>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800bdaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10d      	bne.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800bdb2:	4b3e      	ldr	r3, [pc, #248]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bdb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bdb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdc4:	4939      	ldr	r1, [pc, #228]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800bdcc:	e003      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bdd2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800bdd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800bde2:	60bb      	str	r3, [r7, #8]
 800bde4:	2300      	movs	r3, #0
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bdec:	460b      	mov	r3, r1
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	d03a      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bdf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdfe:	d00e      	beq.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800be00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be04:	d815      	bhi.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d017      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800be0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be0e:	d110      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be10:	4b26      	ldr	r3, [pc, #152]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be14:	4a25      	ldr	r2, [pc, #148]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be1a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800be1c:	e00e      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be22:	3308      	adds	r3, #8
 800be24:	4618      	mov	r0, r3
 800be26:	f001 fddf 	bl	800d9e8 <RCCEx_PLL2_Config>
 800be2a:	4603      	mov	r3, r0
 800be2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800be30:	e004      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800be38:	e000      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800be3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800be3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10d      	bne.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800be44:	4b19      	ldr	r3, [pc, #100]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800be4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be56:	4915      	ldr	r1, [pc, #84]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800be5e:	e003      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be60:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800be64:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800be68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800be74:	603b      	str	r3, [r7, #0]
 800be76:	2300      	movs	r3, #0
 800be78:	607b      	str	r3, [r7, #4]
 800be7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be7e:	460b      	mov	r3, r1
 800be80:	4313      	orrs	r3, r2
 800be82:	d00c      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800be84:	4b09      	ldr	r3, [pc, #36]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800be8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800be8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be96:	4905      	ldr	r1, [pc, #20]	; (800beac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be98:	4313      	orrs	r3, r2
 800be9a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800be9e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	37e8      	adds	r7, #232	; 0xe8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800beac:	46020c00 	.word	0x46020c00

0800beb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b089      	sub	sp, #36	; 0x24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800beb8:	4bac      	ldr	r3, [pc, #688]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800beba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bec2:	4baa      	ldr	r3, [pc, #680]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec6:	f003 0303 	and.w	r3, r3, #3
 800beca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800becc:	4ba7      	ldr	r3, [pc, #668]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed0:	0a1b      	lsrs	r3, r3, #8
 800bed2:	f003 030f 	and.w	r3, r3, #15
 800bed6:	3301      	adds	r3, #1
 800bed8:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800beda:	4ba4      	ldr	r3, [pc, #656]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bede:	f003 0310 	and.w	r3, r3, #16
 800bee2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bee4:	4ba1      	ldr	r3, [pc, #644]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee8:	08db      	lsrs	r3, r3, #3
 800beea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	fb02 f303 	mul.w	r3, r2, r3
 800bef4:	ee07 3a90 	vmov	s15, r3
 800bef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 8123 	beq.w	800c14e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d062      	beq.n	800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	f200 8081 	bhi.w	800c018 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d024      	beq.n	800bf66 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d17a      	bne.n	800c018 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	ee07 3a90 	vmov	s15, r3
 800bf28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2c:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800bf30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf34:	4b8d      	ldr	r3, [pc, #564]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bf36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf3c:	ee07 3a90 	vmov	s15, r3
 800bf40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf44:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf48:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800bf4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf58:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bf5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf64:	e08f      	b.n	800c086 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bf66:	4b81      	ldr	r3, [pc, #516]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d005      	beq.n	800bf7e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800bf72:	4b7e      	ldr	r3, [pc, #504]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	0f1b      	lsrs	r3, r3, #28
 800bf78:	f003 030f 	and.w	r3, r3, #15
 800bf7c:	e006      	b.n	800bf8c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800bf7e:	4b7b      	ldr	r3, [pc, #492]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bf80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf84:	041b      	lsls	r3, r3, #16
 800bf86:	0f1b      	lsrs	r3, r3, #28
 800bf88:	f003 030f 	and.w	r3, r3, #15
 800bf8c:	4a7a      	ldr	r2, [pc, #488]	; (800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800bf8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf92:	ee07 3a90 	vmov	s15, r3
 800bf96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	ee07 3a90 	vmov	s15, r3
 800bfa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfb6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800bfba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bfca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfd2:	e058      	b.n	800c086 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eddf 6a64 	vldr	s13, [pc, #400]	; 800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800bfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe6:	4b61      	ldr	r3, [pc, #388]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800bfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800bff6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bffa:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800bffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c002:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c016:	e036      	b.n	800c086 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c018:	4b54      	ldr	r3, [pc, #336]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800c024:	4b51      	ldr	r3, [pc, #324]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	0f1b      	lsrs	r3, r3, #28
 800c02a:	f003 030f 	and.w	r3, r3, #15
 800c02e:	e006      	b.n	800c03e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800c030:	4b4e      	ldr	r3, [pc, #312]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c036:	041b      	lsls	r3, r3, #16
 800c038:	0f1b      	lsrs	r3, r3, #28
 800c03a:	f003 030f 	and.w	r3, r3, #15
 800c03e:	4a4e      	ldr	r2, [pc, #312]	; (800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c044:	ee07 3a90 	vmov	s15, r3
 800c048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	ee07 3a90 	vmov	s15, r3
 800c060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c064:	ed97 6a02 	vldr	s12, [r7, #8]
 800c068:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800c06c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c078:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c084:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c086:	4b39      	ldr	r3, [pc, #228]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d017      	beq.n	800c0c2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c092:	4b36      	ldr	r3, [pc, #216]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c096:	0a5b      	lsrs	r3, r3, #9
 800c098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c09c:	ee07 3a90 	vmov	s15, r3
 800c0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c0a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0a8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c0ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b8:	ee17 2a90 	vmov	r2, s15
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	e002      	b.n	800c0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c0c8:	4b28      	ldr	r3, [pc, #160]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d017      	beq.n	800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c0d4:	4b25      	ldr	r3, [pc, #148]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d8:	0c1b      	lsrs	r3, r3, #16
 800c0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0de:	ee07 3a90 	vmov	s15, r3
 800c0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c0e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0ea:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c0ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0fa:	ee17 2a90 	vmov	r2, s15
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	605a      	str	r2, [r3, #4]
 800c102:	e002      	b.n	800c10a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c10a:	4b18      	ldr	r3, [pc, #96]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d017      	beq.n	800c146 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c116:	4b15      	ldr	r3, [pc, #84]	; (800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800c118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c11a:	0e1b      	lsrs	r3, r3, #24
 800c11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c120:	ee07 3a90 	vmov	s15, r3
 800c124:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800c128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c12c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c130:	edd7 6a07 	vldr	s13, [r7, #28]
 800c134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c13c:	ee17 2a90 	vmov	r2, s15
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c144:	e00c      	b.n	800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	609a      	str	r2, [r3, #8]
}
 800c14c:	e008      	b.n	800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	609a      	str	r2, [r3, #8]
}
 800c160:	bf00      	nop
 800c162:	3724      	adds	r7, #36	; 0x24
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	46020c00 	.word	0x46020c00
 800c170:	4b742400 	.word	0x4b742400
 800c174:	46000000 	.word	0x46000000
 800c178:	0801ea24 	.word	0x0801ea24

0800c17c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b089      	sub	sp, #36	; 0x24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c184:	4bac      	ldr	r3, [pc, #688]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c18e:	4baa      	ldr	r3, [pc, #680]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c192:	f003 0303 	and.w	r3, r3, #3
 800c196:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c198:	4ba7      	ldr	r3, [pc, #668]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	0a1b      	lsrs	r3, r3, #8
 800c19e:	f003 030f 	and.w	r3, r3, #15
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800c1a6:	4ba4      	ldr	r3, [pc, #656]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	f003 0310 	and.w	r3, r3, #16
 800c1ae:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c1b0:	4ba1      	ldr	r3, [pc, #644]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b4:	08db      	lsrs	r3, r3, #3
 800c1b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	fb02 f303 	mul.w	r3, r2, r3
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 8123 	beq.w	800c41a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d062      	beq.n	800c2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	f200 8081 	bhi.w	800c2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d024      	beq.n	800c232 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d17a      	bne.n	800c2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	ee07 3a90 	vmov	s15, r3
 800c1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f8:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800c1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c200:	4b8d      	ldr	r3, [pc, #564]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c208:	ee07 3a90 	vmov	s15, r3
 800c20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800c210:	ed97 6a02 	vldr	s12, [r7, #8]
 800c214:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800c440 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800c218:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800c220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c224:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c230:	e08f      	b.n	800c352 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c232:	4b81      	ldr	r3, [pc, #516]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800c23e:	4b7e      	ldr	r3, [pc, #504]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	0f1b      	lsrs	r3, r3, #28
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	e006      	b.n	800c258 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800c24a:	4b7b      	ldr	r3, [pc, #492]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c24c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c250:	041b      	lsls	r3, r3, #16
 800c252:	0f1b      	lsrs	r3, r3, #28
 800c254:	f003 030f 	and.w	r3, r3, #15
 800c258:	4a7a      	ldr	r2, [pc, #488]	; (800c444 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c25e:	ee07 3a90 	vmov	s15, r3
 800c262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	ee07 3a90 	vmov	s15, r3
 800c27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c27e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c282:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800c440 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800c286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c292:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c29a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c29e:	e058      	b.n	800c352 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	ee07 3a90 	vmov	s15, r3
 800c2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2aa:	eddf 6a64 	vldr	s13, [pc, #400]	; 800c43c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800c2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2b2:	4b61      	ldr	r3, [pc, #388]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ba:	ee07 3a90 	vmov	s15, r3
 800c2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2c6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800c440 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800c2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2e2:	e036      	b.n	800c352 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c2e4:	4b54      	ldr	r3, [pc, #336]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d005      	beq.n	800c2fc <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800c2f0:	4b51      	ldr	r3, [pc, #324]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	0f1b      	lsrs	r3, r3, #28
 800c2f6:	f003 030f 	and.w	r3, r3, #15
 800c2fa:	e006      	b.n	800c30a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800c2fc:	4b4e      	ldr	r3, [pc, #312]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c2fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c302:	041b      	lsls	r3, r3, #16
 800c304:	0f1b      	lsrs	r3, r3, #28
 800c306:	f003 030f 	and.w	r3, r3, #15
 800c30a:	4a4e      	ldr	r2, [pc, #312]	; (800c444 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c310:	ee07 3a90 	vmov	s15, r3
 800c314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	ee07 3a90 	vmov	s15, r3
 800c31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	ee07 3a90 	vmov	s15, r3
 800c32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c330:	ed97 6a02 	vldr	s12, [r7, #8]
 800c334:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c440 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800c338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c33c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c340:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c344:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c350:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c352:	4b39      	ldr	r3, [pc, #228]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d017      	beq.n	800c38e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c35e:	4b36      	ldr	r3, [pc, #216]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c362:	0a5b      	lsrs	r3, r3, #9
 800c364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c368:	ee07 3a90 	vmov	s15, r3
 800c36c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c374:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c378:	edd7 6a07 	vldr	s13, [r7, #28]
 800c37c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c384:	ee17 2a90 	vmov	r2, s15
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	e002      	b.n	800c394 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c394:	4b28      	ldr	r3, [pc, #160]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d017      	beq.n	800c3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c3a0:	4b25      	ldr	r3, [pc, #148]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a4:	0c1b      	lsrs	r3, r3, #16
 800c3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3b6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c3ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3c6:	ee17 2a90 	vmov	r2, s15
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	605a      	str	r2, [r3, #4]
 800c3ce:	e002      	b.n	800c3d6 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c3d6:	4b18      	ldr	r3, [pc, #96]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d017      	beq.n	800c412 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c3e2:	4b15      	ldr	r3, [pc, #84]	; (800c438 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800c3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e6:	0e1b      	lsrs	r3, r3, #24
 800c3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ec:	ee07 3a90 	vmov	s15, r3
 800c3f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c3f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3f8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c3fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c408:	ee17 2a90 	vmov	r2, s15
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c410:	e00c      	b.n	800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	609a      	str	r2, [r3, #8]
}
 800c418:	e008      	b.n	800c42c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	609a      	str	r2, [r3, #8]
}
 800c42c:	bf00      	nop
 800c42e:	3724      	adds	r7, #36	; 0x24
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr
 800c438:	46020c00 	.word	0x46020c00
 800c43c:	4b742400 	.word	0x4b742400
 800c440:	46000000 	.word	0x46000000
 800c444:	0801ea24 	.word	0x0801ea24

0800c448 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c448:	b480      	push	{r7}
 800c44a:	b089      	sub	sp, #36	; 0x24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c450:	4bac      	ldr	r3, [pc, #688]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c458:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c45a:	4baa      	ldr	r3, [pc, #680]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c464:	4ba7      	ldr	r3, [pc, #668]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c468:	0a1b      	lsrs	r3, r3, #8
 800c46a:	f003 030f 	and.w	r3, r3, #15
 800c46e:	3301      	adds	r3, #1
 800c470:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800c472:	4ba4      	ldr	r3, [pc, #656]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c476:	f003 0310 	and.w	r3, r3, #16
 800c47a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c47c:	4ba1      	ldr	r3, [pc, #644]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c47e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c480:	08db      	lsrs	r3, r3, #3
 800c482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	fb02 f303 	mul.w	r3, r2, r3
 800c48c:	ee07 3a90 	vmov	s15, r3
 800c490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c494:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 8123 	beq.w	800c6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d062      	beq.n	800c56c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	f200 8081 	bhi.w	800c5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d024      	beq.n	800c4fe <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d17a      	bne.n	800c5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	ee07 3a90 	vmov	s15, r3
 800c4c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4c4:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800c4c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4cc:	4b8d      	ldr	r3, [pc, #564]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4d4:	ee07 3a90 	vmov	s15, r3
 800c4d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4dc:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4e0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800c70c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800c4e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c4f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4f8:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800c4fc:	e08f      	b.n	800c61e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c4fe:	4b81      	ldr	r3, [pc, #516]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d005      	beq.n	800c516 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800c50a:	4b7e      	ldr	r3, [pc, #504]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	0f1b      	lsrs	r3, r3, #28
 800c510:	f003 030f 	and.w	r3, r3, #15
 800c514:	e006      	b.n	800c524 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800c516:	4b7b      	ldr	r3, [pc, #492]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c51c:	041b      	lsls	r3, r3, #16
 800c51e:	0f1b      	lsrs	r3, r3, #28
 800c520:	f003 030f 	and.w	r3, r3, #15
 800c524:	4a7a      	ldr	r2, [pc, #488]	; (800c710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800c526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c52a:	ee07 3a90 	vmov	s15, r3
 800c52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	ee07 3a90 	vmov	s15, r3
 800c538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	ee07 3a90 	vmov	s15, r3
 800c546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c54a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c54e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800c70c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800c552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c55a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c56a:	e058      	b.n	800c61e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	ee07 3a90 	vmov	s15, r3
 800c572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c576:	eddf 6a64 	vldr	s13, [pc, #400]	; 800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800c57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c57e:	4b61      	ldr	r3, [pc, #388]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c586:	ee07 3a90 	vmov	s15, r3
 800c58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800c58e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c592:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800c70c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800c596:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800c59e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ae:	e036      	b.n	800c61e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c5b0:	4b54      	ldr	r3, [pc, #336]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d005      	beq.n	800c5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800c5bc:	4b51      	ldr	r3, [pc, #324]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	0f1b      	lsrs	r3, r3, #28
 800c5c2:	f003 030f 	and.w	r3, r3, #15
 800c5c6:	e006      	b.n	800c5d6 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800c5c8:	4b4e      	ldr	r3, [pc, #312]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c5ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c5ce:	041b      	lsls	r3, r3, #16
 800c5d0:	0f1b      	lsrs	r3, r3, #28
 800c5d2:	f003 030f 	and.w	r3, r3, #15
 800c5d6:	4a4e      	ldr	r2, [pc, #312]	; (800c710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800c5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5dc:	ee07 3a90 	vmov	s15, r3
 800c5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	ee07 3a90 	vmov	s15, r3
 800c5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800c600:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c70c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800c604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c610:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c61c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c61e:	4b39      	ldr	r3, [pc, #228]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c626:	2b00      	cmp	r3, #0
 800c628:	d017      	beq.n	800c65a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c62a:	4b36      	ldr	r3, [pc, #216]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c62e:	0a5b      	lsrs	r3, r3, #9
 800c630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c634:	ee07 3a90 	vmov	s15, r3
 800c638:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c63c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c640:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c644:	edd7 6a07 	vldr	s13, [r7, #28]
 800c648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c64c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c650:	ee17 2a90 	vmov	r2, s15
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	601a      	str	r2, [r3, #0]
 800c658:	e002      	b.n	800c660 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c660:	4b28      	ldr	r3, [pc, #160]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d017      	beq.n	800c69c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c66c:	4b25      	ldr	r3, [pc, #148]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c670:	0c1b      	lsrs	r3, r3, #16
 800c672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c676:	ee07 3a90 	vmov	s15, r3
 800c67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c682:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c686:	edd7 6a07 	vldr	s13, [r7, #28]
 800c68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c692:	ee17 2a90 	vmov	r2, s15
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	605a      	str	r2, [r3, #4]
 800c69a:	e002      	b.n	800c6a2 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c6a2:	4b18      	ldr	r3, [pc, #96]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d017      	beq.n	800c6de <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c6ae:	4b15      	ldr	r3, [pc, #84]	; (800c704 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800c6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b2:	0e1b      	lsrs	r3, r3, #24
 800c6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b8:	ee07 3a90 	vmov	s15, r3
 800c6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c6c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6c4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c6c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6d4:	ee17 2a90 	vmov	r2, s15
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800c6dc:	e00c      	b.n	800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	609a      	str	r2, [r3, #8]
}
 800c6e4:	e008      	b.n	800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	609a      	str	r2, [r3, #8]
}
 800c6f8:	bf00      	nop
 800c6fa:	3724      	adds	r7, #36	; 0x24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	46020c00 	.word	0x46020c00
 800c708:	4b742400 	.word	0x4b742400
 800c70c:	46000000 	.word	0x46000000
 800c710:	0801ea24 	.word	0x0801ea24

0800c714 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b08e      	sub	sp, #56	; 0x38
 800c718:	af00      	add	r7, sp, #0
 800c71a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c71e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c722:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800c726:	430b      	orrs	r3, r1
 800c728:	d145      	bne.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c72a:	4ba7      	ldr	r3, [pc, #668]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c72c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c734:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c736:	4ba4      	ldr	r3, [pc, #656]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b02      	cmp	r3, #2
 800c742:	d108      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c74a:	d104      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c74c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c750:	637b      	str	r3, [r7, #52]	; 0x34
 800c752:	f001 b8fc 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c756:	4b9c      	ldr	r3, [pc, #624]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c75c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c764:	d114      	bne.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c76c:	d110      	bne.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c76e:	4b96      	ldr	r3, [pc, #600]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c77c:	d103      	bne.n	800c786 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c77e:	23fa      	movs	r3, #250	; 0xfa
 800c780:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c782:	f001 b8e4 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800c786:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c78a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c78c:	f001 b8df 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c790:	4b8d      	ldr	r3, [pc, #564]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c79c:	d107      	bne.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7a4:	d103      	bne.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c7a6:	4b89      	ldr	r3, [pc, #548]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c7aa:	f001 b8d0 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c7b2:	f001 b8cc 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c7b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ba:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c7be:	430b      	orrs	r3, r1
 800c7c0:	d151      	bne.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c7c2:	4b81      	ldr	r3, [pc, #516]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c7c8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800c7cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d0:	2b80      	cmp	r3, #128	; 0x80
 800c7d2:	d035      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	2b80      	cmp	r3, #128	; 0x80
 800c7d8:	d841      	bhi.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	2b60      	cmp	r3, #96	; 0x60
 800c7de:	d02a      	beq.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	2b60      	cmp	r3, #96	; 0x60
 800c7e4:	d83b      	bhi.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	2b40      	cmp	r3, #64	; 0x40
 800c7ea:	d009      	beq.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ee:	2b40      	cmp	r3, #64	; 0x40
 800c7f0:	d835      	bhi.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00c      	beq.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	2b20      	cmp	r3, #32
 800c7fc:	d012      	beq.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c7fe:	e02e      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c804:	4618      	mov	r0, r3
 800c806:	f7ff fb53 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c80e:	f001 b89e 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c812:	f107 0318 	add.w	r3, r7, #24
 800c816:	4618      	mov	r0, r3
 800c818:	f7ff fcb0 	bl	800c17c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c820:	f001 b895 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c824:	f107 030c 	add.w	r3, r7, #12
 800c828:	4618      	mov	r0, r3
 800c82a:	f7ff fe0d 	bl	800c448 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c832:	f001 b88c 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c836:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c83a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c83c:	f001 b887 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c840:	4b61      	ldr	r3, [pc, #388]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c84c:	d103      	bne.n	800c856 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c84e:	4b60      	ldr	r3, [pc, #384]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c850:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c852:	f001 b87c 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800c856:	2300      	movs	r3, #0
 800c858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c85a:	f001 b878 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800c85e:	2300      	movs	r3, #0
 800c860:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c862:	f001 b874 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c86a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c86e:	430b      	orrs	r3, r1
 800c870:	d158      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c872:	4b55      	ldr	r3, [pc, #340]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c87c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c884:	d03b      	beq.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c88c:	d846      	bhi.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c894:	d02e      	beq.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c89c:	d83e      	bhi.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8a4:	d00b      	beq.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ac:	d836      	bhi.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00d      	beq.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ba:	d012      	beq.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c8bc:	e02e      	b.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff faf4 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c8cc:	f001 b83f 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8d0:	f107 0318 	add.w	r3, r7, #24
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff fc51 	bl	800c17c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c8de:	f001 b836 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8e2:	f107 030c 	add.w	r3, r7, #12
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fdae 	bl	800c448 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c8f0:	f001 b82d 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c8f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c8f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c8fa:	f001 b828 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8fe:	4b32      	ldr	r3, [pc, #200]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c90a:	d103      	bne.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c90c:	4b30      	ldr	r3, [pc, #192]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c90e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c910:	f001 b81d 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800c914:	2300      	movs	r3, #0
 800c916:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c918:	f001 b819 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c920:	f001 b815 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c924:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c928:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c92c:	430b      	orrs	r3, r1
 800c92e:	d126      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c930:	4b25      	ldr	r3, [pc, #148]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c932:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c93a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c93c:	4b22      	ldr	r3, [pc, #136]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c948:	d106      	bne.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d103      	bne.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c950:	4b1f      	ldr	r3, [pc, #124]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c952:	637b      	str	r3, [r7, #52]	; 0x34
 800c954:	f000 bffb 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c958:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c964:	d107      	bne.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c96c:	d103      	bne.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c96e:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c970:	637b      	str	r3, [r7, #52]	; 0x34
 800c972:	f000 bfec 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c976:	2300      	movs	r3, #0
 800c978:	637b      	str	r3, [r7, #52]	; 0x34
 800c97a:	f000 bfe8 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c97e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c982:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800c986:	430b      	orrs	r3, r1
 800c988:	d164      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c98a:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c990:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c994:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c99c:	d03d      	beq.n	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c9a4:	d852      	bhi.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9ac:	d014      	beq.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9b4:	d84a      	bhi.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01f      	beq.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9c2:	d012      	beq.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c9c4:	e042      	b.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c9c6:	bf00      	nop
 800c9c8:	46020c00 	.word	0x46020c00
 800c9cc:	0007a120 	.word	0x0007a120
 800c9d0:	00f42400 	.word	0x00f42400
 800c9d4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7ff fa67 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c9e6:	f000 bfb2 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ea:	f107 0318 	add.w	r3, r7, #24
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fbc4 	bl	800c17c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c9f8:	f000 bfa9 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c9fc:	4bab      	ldr	r3, [pc, #684]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca08:	d103      	bne.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800ca0a:	4ba9      	ldr	r3, [pc, #676]	; (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ca0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ca0e:	f000 bf9e 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca16:	f000 bf9a 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca1a:	4ba4      	ldr	r3, [pc, #656]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d005      	beq.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ca26:	4ba1      	ldr	r3, [pc, #644]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	0e1b      	lsrs	r3, r3, #24
 800ca2c:	f003 030f 	and.w	r3, r3, #15
 800ca30:	e006      	b.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800ca32:	4b9e      	ldr	r3, [pc, #632]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ca34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ca38:	041b      	lsls	r3, r3, #16
 800ca3a:	0e1b      	lsrs	r3, r3, #24
 800ca3c:	f003 030f 	and.w	r3, r3, #15
 800ca40:	4a9c      	ldr	r2, [pc, #624]	; (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800ca42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca48:	f000 bf81 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca50:	f000 bf7d 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ca54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca58:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800ca5c:	430b      	orrs	r3, r1
 800ca5e:	d175      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ca60:	4b92      	ldr	r3, [pc, #584]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ca62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ca66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca6a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d15b      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ca72:	4b8e      	ldr	r3, [pc, #568]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ca74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca78:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ca7c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ca84:	d034      	beq.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ca8c:	d849      	bhi.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca94:	d00b      	beq.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca9c:	d841      	bhi.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d016      	beq.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800caaa:	d009      	beq.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800caac:	e039      	b.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800caae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7ff f9fc 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800cabc:	f000 bf47 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cac0:	f107 0318 	add.w	r3, r7, #24
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff fb59 	bl	800c17c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800cace:	f000 bf3e 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800cad2:	4b76      	ldr	r3, [pc, #472]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cade:	d103      	bne.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800cae0:	4b73      	ldr	r3, [pc, #460]	; (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800cae2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800cae4:	f000 bf33 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800caec:	f000 bf2f 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800caf0:	4b6e      	ldr	r3, [pc, #440]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d005      	beq.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800cafc:	4b6b      	ldr	r3, [pc, #428]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	0e1b      	lsrs	r3, r3, #24
 800cb02:	f003 030f 	and.w	r3, r3, #15
 800cb06:	e006      	b.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800cb08:	4b68      	ldr	r3, [pc, #416]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cb0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cb0e:	041b      	lsls	r3, r3, #16
 800cb10:	0e1b      	lsrs	r3, r3, #24
 800cb12:	f003 030f 	and.w	r3, r3, #15
 800cb16:	4a67      	ldr	r2, [pc, #412]	; (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800cb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800cb1e:	f000 bf16 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800cb22:	2300      	movs	r3, #0
 800cb24:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800cb26:	f000 bf12 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb30:	d108      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff f9ba 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb40:	f000 bf05 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800cb44:	2300      	movs	r3, #0
 800cb46:	637b      	str	r3, [r7, #52]	; 0x34
 800cb48:	f000 bf01 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800cb4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb50:	1e51      	subs	r1, r2, #1
 800cb52:	430b      	orrs	r3, r1
 800cb54:	d136      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800cb56:	4b55      	ldr	r3, [pc, #340]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cb58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb5c:	f003 0303 	and.w	r3, r3, #3
 800cb60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d104      	bne.n	800cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800cb68:	f7fe fb34 	bl	800b1d4 <HAL_RCC_GetPCLK2Freq>
 800cb6c:	6378      	str	r0, [r7, #52]	; 0x34
 800cb6e:	f000 beee 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800cb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d104      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb78:	f7fe f9f6 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800cb7c:	6378      	str	r0, [r7, #52]	; 0x34
 800cb7e:	f000 bee6 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800cb82:	4b4a      	ldr	r3, [pc, #296]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb8e:	d106      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d103      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800cb96:	4b48      	ldr	r3, [pc, #288]	; (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800cb98:	637b      	str	r3, [r7, #52]	; 0x34
 800cb9a:	f000 bed8 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800cb9e:	4b43      	ldr	r3, [pc, #268]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d107      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d104      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800cbb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbb6:	637b      	str	r3, [r7, #52]	; 0x34
 800cbb8:	f000 bec9 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	637b      	str	r3, [r7, #52]	; 0x34
 800cbc0:	f000 bec5 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800cbc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc8:	1e91      	subs	r1, r2, #2
 800cbca:	430b      	orrs	r3, r1
 800cbcc:	d136      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800cbce:	4b37      	ldr	r3, [pc, #220]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cbd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbd4:	f003 030c 	and.w	r3, r3, #12
 800cbd8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d104      	bne.n	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbe0:	f7fe fae4 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800cbe4:	6378      	str	r0, [r7, #52]	; 0x34
 800cbe6:	f000 beb2 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800cbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbec:	2b04      	cmp	r3, #4
 800cbee:	d104      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbf0:	f7fe f9ba 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800cbf4:	6378      	str	r0, [r7, #52]	; 0x34
 800cbf6:	f000 beaa 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800cbfa:	4b2c      	ldr	r3, [pc, #176]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc06:	d106      	bne.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	2b08      	cmp	r3, #8
 800cc0c:	d103      	bne.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800cc0e:	4b2a      	ldr	r3, [pc, #168]	; (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800cc10:	637b      	str	r3, [r7, #52]	; 0x34
 800cc12:	f000 be9c 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800cc16:	4b25      	ldr	r3, [pc, #148]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cc18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc1c:	f003 0302 	and.w	r3, r3, #2
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d107      	bne.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	2b0c      	cmp	r3, #12
 800cc28:	d104      	bne.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800cc2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc2e:	637b      	str	r3, [r7, #52]	; 0x34
 800cc30:	f000 be8d 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	637b      	str	r3, [r7, #52]	; 0x34
 800cc38:	f000 be89 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800cc3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc40:	1f11      	subs	r1, r2, #4
 800cc42:	430b      	orrs	r3, r1
 800cc44:	d13e      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800cc46:	4b19      	ldr	r3, [pc, #100]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cc48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cc50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d104      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc58:	f7fe faa8 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800cc5c:	6378      	str	r0, [r7, #52]	; 0x34
 800cc5e:	f000 be76 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800cc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc64:	2b10      	cmp	r3, #16
 800cc66:	d104      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc68:	f7fe f97e 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800cc6c:	6378      	str	r0, [r7, #52]	; 0x34
 800cc6e:	f000 be6e 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cc72:	4b0e      	ldr	r3, [pc, #56]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc7e:	d106      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	2b20      	cmp	r3, #32
 800cc84:	d103      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800cc86:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800cc88:	637b      	str	r3, [r7, #52]	; 0x34
 800cc8a:	f000 be60 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800cc8e:	4b07      	ldr	r3, [pc, #28]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cc90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc94:	f003 0302 	and.w	r3, r3, #2
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d10f      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	2b30      	cmp	r3, #48	; 0x30
 800cca0:	d10c      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800cca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cca6:	637b      	str	r3, [r7, #52]	; 0x34
 800cca8:	f000 be51 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800ccac:	46020c00 	.word	0x46020c00
 800ccb0:	02dc6c00 	.word	0x02dc6c00
 800ccb4:	0801ea24 	.word	0x0801ea24
 800ccb8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc0:	f000 be45 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ccc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccc8:	f1a2 0108 	sub.w	r1, r2, #8
 800cccc:	430b      	orrs	r3, r1
 800ccce:	d136      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ccd0:	4b9f      	ldr	r3, [pc, #636]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ccda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d104      	bne.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cce2:	f7fe fa63 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800cce6:	6378      	str	r0, [r7, #52]	; 0x34
 800cce8:	f000 be31 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	2b40      	cmp	r3, #64	; 0x40
 800ccf0:	d104      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccf2:	f7fe f939 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800ccf6:	6378      	str	r0, [r7, #52]	; 0x34
 800ccf8:	f000 be29 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ccfc:	4b94      	ldr	r3, [pc, #592]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd08:	d106      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	2b80      	cmp	r3, #128	; 0x80
 800cd0e:	d103      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800cd10:	4b90      	ldr	r3, [pc, #576]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd12:	637b      	str	r3, [r7, #52]	; 0x34
 800cd14:	f000 be1b 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cd18:	4b8d      	ldr	r3, [pc, #564]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd1e:	f003 0302 	and.w	r3, r3, #2
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d107      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	2bc0      	cmp	r3, #192	; 0xc0
 800cd2a:	d104      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800cd2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd30:	637b      	str	r3, [r7, #52]	; 0x34
 800cd32:	f000 be0c 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cd36:	2300      	movs	r3, #0
 800cd38:	637b      	str	r3, [r7, #52]	; 0x34
 800cd3a:	f000 be08 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cd3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd42:	f1a2 0110 	sub.w	r1, r2, #16
 800cd46:	430b      	orrs	r3, r1
 800cd48:	d139      	bne.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cd4a:	4b81      	ldr	r3, [pc, #516]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd54:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d104      	bne.n	800cd66 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd5c:	f7fe fa26 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800cd60:	6378      	str	r0, [r7, #52]	; 0x34
 800cd62:	f000 bdf4 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd6c:	d104      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd6e:	f7fe f8fb 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800cd72:	6378      	str	r0, [r7, #52]	; 0x34
 800cd74:	f000 bdeb 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cd78:	4b75      	ldr	r3, [pc, #468]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd84:	d107      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd8c:	d103      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800cd8e:	4b71      	ldr	r3, [pc, #452]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd90:	637b      	str	r3, [r7, #52]	; 0x34
 800cd92:	f000 bddc 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cd96:	4b6e      	ldr	r3, [pc, #440]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd9c:	f003 0302 	and.w	r3, r3, #2
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d108      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdaa:	d104      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800cdac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdb0:	637b      	str	r3, [r7, #52]	; 0x34
 800cdb2:	f000 bdcc 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdba:	f000 bdc8 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cdbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdc2:	f1a2 0120 	sub.w	r1, r2, #32
 800cdc6:	430b      	orrs	r3, r1
 800cdc8:	d158      	bne.n	800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cdca:	4b61      	ldr	r3, [pc, #388]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cdd0:	f003 0307 	and.w	r3, r3, #7
 800cdd4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d104      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cddc:	f7fe fa0e 	bl	800b1fc <HAL_RCC_GetPCLK3Freq>
 800cde0:	6378      	str	r0, [r7, #52]	; 0x34
 800cde2:	f000 bdb4 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d104      	bne.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cdec:	f7fe f8bc 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800cdf0:	6378      	str	r0, [r7, #52]	; 0x34
 800cdf2:	f000 bdac 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800cdf6:	4b56      	ldr	r3, [pc, #344]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce02:	d106      	bne.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d103      	bne.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800ce0a:	4b52      	ldr	r3, [pc, #328]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce0e:	f000 bd9e 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ce12:	4b4f      	ldr	r3, [pc, #316]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d107      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	2b03      	cmp	r3, #3
 800ce24:	d104      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800ce26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce2c:	f000 bd8f 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ce30:	4b47      	ldr	r3, [pc, #284]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0320 	and.w	r3, r3, #32
 800ce38:	2b20      	cmp	r3, #32
 800ce3a:	d11b      	bne.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	2b04      	cmp	r3, #4
 800ce40:	d118      	bne.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce42:	4b43      	ldr	r3, [pc, #268]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d005      	beq.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800ce4e:	4b40      	ldr	r3, [pc, #256]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	0e1b      	lsrs	r3, r3, #24
 800ce54:	f003 030f 	and.w	r3, r3, #15
 800ce58:	e006      	b.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800ce5a:	4b3d      	ldr	r3, [pc, #244]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ce60:	041b      	lsls	r3, r3, #16
 800ce62:	0e1b      	lsrs	r3, r3, #24
 800ce64:	f003 030f 	and.w	r3, r3, #15
 800ce68:	4a3b      	ldr	r2, [pc, #236]	; (800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ce6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce70:	f000 bd6d 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ce74:	2300      	movs	r3, #0
 800ce76:	637b      	str	r3, [r7, #52]	; 0x34
 800ce78:	f000 bd69 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ce7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce80:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ce84:	430b      	orrs	r3, r1
 800ce86:	d169      	bne.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ce88:	4b31      	ldr	r3, [pc, #196]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ce92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ce94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce9a:	d104      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ce9c:	f7fe f864 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800cea0:	6378      	str	r0, [r7, #52]	; 0x34
 800cea2:	f000 bd54 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceac:	d108      	bne.n	800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceae:	f107 0318 	add.w	r3, r7, #24
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff f962 	bl	800c17c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	637b      	str	r3, [r7, #52]	; 0x34
 800cebc:	f000 bd47 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d104      	bne.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cec6:	f7fe f957 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800ceca:	6378      	str	r0, [r7, #52]	; 0x34
 800cecc:	f000 bd3f 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ced6:	d118      	bne.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800ced8:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d005      	beq.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800cee4:	4b1a      	ldr	r3, [pc, #104]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	0f1b      	lsrs	r3, r3, #28
 800ceea:	f003 030f 	and.w	r3, r3, #15
 800ceee:	e006      	b.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800cef0:	4b17      	ldr	r3, [pc, #92]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cef6:	041b      	lsls	r3, r3, #16
 800cef8:	0f1b      	lsrs	r3, r3, #28
 800cefa:	f003 030f 	and.w	r3, r3, #15
 800cefe:	4a16      	ldr	r2, [pc, #88]	; (800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cf00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf04:	637b      	str	r3, [r7, #52]	; 0x34
 800cf06:	f000 bd22 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cf0a:	4b11      	ldr	r3, [pc, #68]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf16:	d107      	bne.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cf1e:	d103      	bne.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800cf20:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf22:	637b      	str	r3, [r7, #52]	; 0x34
 800cf24:	f000 bd13 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800cf28:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf34:	d107      	bne.n	800cf46 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf3c:	d103      	bne.n	800cf46 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf40:	637b      	str	r3, [r7, #52]	; 0x34
 800cf42:	f000 bd04 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800cf46:	2300      	movs	r3, #0
 800cf48:	637b      	str	r3, [r7, #52]	; 0x34
 800cf4a:	f000 bd00 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800cf4e:	bf00      	nop
 800cf50:	46020c00 	.word	0x46020c00
 800cf54:	00f42400 	.word	0x00f42400
 800cf58:	0801ea24 	.word	0x0801ea24
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800cf5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf60:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cf64:	430b      	orrs	r3, r1
 800cf66:	d14e      	bne.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cf68:	4ba8      	ldr	r3, [pc, #672]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cf6e:	f003 0307 	and.w	r3, r3, #7
 800cf72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800cf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf76:	2b04      	cmp	r3, #4
 800cf78:	d841      	bhi.n	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800cf7a:	a201      	add	r2, pc, #4	; (adr r2, 800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800cf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf80:	0800cfb9 	.word	0x0800cfb9
 800cf84:	0800cf95 	.word	0x0800cf95
 800cf88:	0800cfa7 	.word	0x0800cfa7
 800cf8c:	0800cfc3 	.word	0x0800cfc3
 800cf90:	0800cfcd 	.word	0x0800cfcd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe ff89 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cfa2:	f000 bcd4 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfa6:	f107 030c 	add.w	r3, r7, #12
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff fa4c 	bl	800c448 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cfb4:	f000 bccb 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cfb8:	f7fe f8de 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800cfbc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800cfbe:	f000 bcc6 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cfc2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800cfc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cfc8:	f000 bcc1 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cfcc:	4b8f      	ldr	r3, [pc, #572]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d005      	beq.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800cfd8:	4b8c      	ldr	r3, [pc, #560]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	0e1b      	lsrs	r3, r3, #24
 800cfde:	f003 030f 	and.w	r3, r3, #15
 800cfe2:	e006      	b.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cfe4:	4b89      	ldr	r3, [pc, #548]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cfe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cfea:	041b      	lsls	r3, r3, #16
 800cfec:	0e1b      	lsrs	r3, r3, #24
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	4a87      	ldr	r2, [pc, #540]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cffa:	f000 bca8 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d002:	f000 bca4 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d00a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800d00e:	430b      	orrs	r3, r1
 800d010:	d15d      	bne.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d012:	4b7e      	ldr	r3, [pc, #504]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d018:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d01c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d024:	d036      	beq.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d02c:	d84b      	bhi.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d034:	d029      	beq.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d03c:	d843      	bhi.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d044:	d013      	beq.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800d046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d04c:	d83b      	bhi.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	2b00      	cmp	r3, #0
 800d052:	d015      	beq.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d05a:	d134      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d05c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d060:	4618      	mov	r0, r3
 800d062:	f7fe ff25 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d06a:	f000 bc70 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d06e:	f107 030c 	add.w	r3, r7, #12
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff f9e8 	bl	800c448 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d07c:	f000 bc67 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d080:	f7fe f87a 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800d084:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d086:	f000 bc62 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d08a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d08e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d090:	f000 bc5d 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d094:	4b5d      	ldr	r3, [pc, #372]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d005      	beq.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d0a0:	4b5a      	ldr	r3, [pc, #360]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	0e1b      	lsrs	r3, r3, #24
 800d0a6:	f003 030f 	and.w	r3, r3, #15
 800d0aa:	e006      	b.n	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d0ac:	4b57      	ldr	r3, [pc, #348]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d0b2:	041b      	lsls	r3, r3, #16
 800d0b4:	0e1b      	lsrs	r3, r3, #24
 800d0b6:	f003 030f 	and.w	r3, r3, #15
 800d0ba:	4a55      	ldr	r2, [pc, #340]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d0c2:	f000 bc44 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d0ca:	f000 bc40 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0d2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800d0d6:	430b      	orrs	r3, r1
 800d0d8:	d14a      	bne.n	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d0da:	4b4c      	ldr	r3, [pc, #304]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d0e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d104      	bne.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d0ec:	f7fe f85e 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800d0f0:	6378      	str	r0, [r7, #52]	; 0x34
 800d0f2:	f000 bc2c 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0fc:	d104      	bne.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d0fe:	f7fd ff33 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d102:	6378      	str	r0, [r7, #52]	; 0x34
 800d104:	f000 bc23 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d108:	4b40      	ldr	r3, [pc, #256]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d114:	d107      	bne.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d11c:	d103      	bne.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800d11e:	4b3d      	ldr	r3, [pc, #244]	; (800d214 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800d120:	637b      	str	r3, [r7, #52]	; 0x34
 800d122:	f000 bc14 	b.w	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d126:	4b39      	ldr	r3, [pc, #228]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0320 	and.w	r3, r3, #32
 800d12e:	2b20      	cmp	r3, #32
 800d130:	d11b      	bne.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d138:	d117      	bne.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d13a:	4b34      	ldr	r3, [pc, #208]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d005      	beq.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800d146:	4b31      	ldr	r3, [pc, #196]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	0e1b      	lsrs	r3, r3, #24
 800d14c:	f003 030f 	and.w	r3, r3, #15
 800d150:	e006      	b.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800d152:	4b2e      	ldr	r3, [pc, #184]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d158:	041b      	lsls	r3, r3, #16
 800d15a:	0e1b      	lsrs	r3, r3, #24
 800d15c:	f003 030f 	and.w	r3, r3, #15
 800d160:	4a2b      	ldr	r2, [pc, #172]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d166:	637b      	str	r3, [r7, #52]	; 0x34
 800d168:	e3f1      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d16a:	2300      	movs	r3, #0
 800d16c:	637b      	str	r3, [r7, #52]	; 0x34
 800d16e:	e3ee      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d174:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800d178:	430b      	orrs	r3, r1
 800d17a:	d14d      	bne.n	800d218 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d17c:	4b23      	ldr	r3, [pc, #140]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d17e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d182:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d186:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d103      	bne.n	800d196 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d18e:	f7fe f80d 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800d192:	6378      	str	r0, [r7, #52]	; 0x34
 800d194:	e3db      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d19c:	d103      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d19e:	f7fd fee3 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d1a2:	6378      	str	r0, [r7, #52]	; 0x34
 800d1a4:	e3d3      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d1a6:	4b19      	ldr	r3, [pc, #100]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1b2:	d106      	bne.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1ba:	d102      	bne.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800d1bc:	4b15      	ldr	r3, [pc, #84]	; (800d214 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800d1be:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c0:	e3c5      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d1c2:	4b12      	ldr	r3, [pc, #72]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f003 0320 	and.w	r3, r3, #32
 800d1ca:	2b20      	cmp	r3, #32
 800d1cc:	d11b      	bne.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d1d4:	d117      	bne.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1d6:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d005      	beq.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800d1e2:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	0e1b      	lsrs	r3, r3, #24
 800d1e8:	f003 030f 	and.w	r3, r3, #15
 800d1ec:	e006      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800d1ee:	4b07      	ldr	r3, [pc, #28]	; (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d1f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d1f4:	041b      	lsls	r3, r3, #16
 800d1f6:	0e1b      	lsrs	r3, r3, #24
 800d1f8:	f003 030f 	and.w	r3, r3, #15
 800d1fc:	4a04      	ldr	r2, [pc, #16]	; (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d202:	637b      	str	r3, [r7, #52]	; 0x34
 800d204:	e3a3      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	637b      	str	r3, [r7, #52]	; 0x34
 800d20a:	e3a0      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800d20c:	46020c00 	.word	0x46020c00
 800d210:	0801ea24 	.word	0x0801ea24
 800d214:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d21c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800d220:	430b      	orrs	r3, r1
 800d222:	d148      	bne.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d224:	4b9d      	ldr	r3, [pc, #628]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d22a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d22e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	2bc0      	cmp	r3, #192	; 0xc0
 800d234:	d024      	beq.n	800d280 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	2bc0      	cmp	r3, #192	; 0xc0
 800d23a:	d839      	bhi.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	2b80      	cmp	r3, #128	; 0x80
 800d240:	d00d      	beq.n	800d25e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	2b80      	cmp	r3, #128	; 0x80
 800d246:	d833      	bhi.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d003      	beq.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	2b40      	cmp	r3, #64	; 0x40
 800d252:	d011      	beq.n	800d278 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800d254:	e02c      	b.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d256:	f7fd ffd1 	bl	800b1fc <HAL_RCC_GetPCLK3Freq>
 800d25a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d25c:	e377      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d25e:	4b8f      	ldr	r3, [pc, #572]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d26a:	d102      	bne.n	800d272 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800d26c:	4b8c      	ldr	r3, [pc, #560]	; (800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800d26e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d270:	e36d      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d276:	e36a      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d278:	f7fd fe76 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d27c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d27e:	e366      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800d280:	4b86      	ldr	r3, [pc, #536]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d005      	beq.n	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800d28c:	4b83      	ldr	r3, [pc, #524]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	0f1b      	lsrs	r3, r3, #28
 800d292:	f003 030f 	and.w	r3, r3, #15
 800d296:	e006      	b.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800d298:	4b80      	ldr	r3, [pc, #512]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d29a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d29e:	041b      	lsls	r3, r3, #16
 800d2a0:	0f1b      	lsrs	r3, r3, #28
 800d2a2:	f003 030f 	and.w	r3, r3, #15
 800d2a6:	4a7f      	ldr	r2, [pc, #508]	; (800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800d2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d2ae:	e34e      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d2b4:	e34b      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ba:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800d2be:	430b      	orrs	r3, r1
 800d2c0:	d147      	bne.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d2c2:	4b76      	ldr	r3, [pc, #472]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d2c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d2c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d2cc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d103      	bne.n	800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2d4:	f7fd ff6a 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800d2d8:	6378      	str	r0, [r7, #52]	; 0x34
 800d2da:	e338      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2e2:	d103      	bne.n	800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d2e4:	f7fd fe40 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d2e8:	6378      	str	r0, [r7, #52]	; 0x34
 800d2ea:	e330      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d2ec:	4b6b      	ldr	r3, [pc, #428]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2f8:	d106      	bne.n	800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d300:	d102      	bne.n	800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800d302:	4b67      	ldr	r3, [pc, #412]	; (800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800d304:	637b      	str	r3, [r7, #52]	; 0x34
 800d306:	e322      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d308:	4b64      	ldr	r3, [pc, #400]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 0320 	and.w	r3, r3, #32
 800d310:	2b20      	cmp	r3, #32
 800d312:	d11b      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800d314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d316:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d31a:	d117      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d31c:	4b5f      	ldr	r3, [pc, #380]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d005      	beq.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800d328:	4b5c      	ldr	r3, [pc, #368]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	0e1b      	lsrs	r3, r3, #24
 800d32e:	f003 030f 	and.w	r3, r3, #15
 800d332:	e006      	b.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800d334:	4b59      	ldr	r3, [pc, #356]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d33a:	041b      	lsls	r3, r3, #16
 800d33c:	0e1b      	lsrs	r3, r3, #24
 800d33e:	f003 030f 	and.w	r3, r3, #15
 800d342:	4a58      	ldr	r2, [pc, #352]	; (800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800d344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
 800d34a:	e300      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d34c:	2300      	movs	r3, #0
 800d34e:	637b      	str	r3, [r7, #52]	; 0x34
 800d350:	e2fd      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d352:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d356:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800d35a:	430b      	orrs	r3, r1
 800d35c:	d15b      	bne.n	800d416 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d35e:	4b4f      	ldr	r3, [pc, #316]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d368:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d117      	bne.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d370:	4b4a      	ldr	r3, [pc, #296]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d005      	beq.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800d37c:	4b47      	ldr	r3, [pc, #284]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	0e1b      	lsrs	r3, r3, #24
 800d382:	f003 030f 	and.w	r3, r3, #15
 800d386:	e006      	b.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800d388:	4b44      	ldr	r3, [pc, #272]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d38a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d38e:	041b      	lsls	r3, r3, #16
 800d390:	0e1b      	lsrs	r3, r3, #24
 800d392:	f003 030f 	and.w	r3, r3, #15
 800d396:	4a43      	ldr	r2, [pc, #268]	; (800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800d398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d39c:	637b      	str	r3, [r7, #52]	; 0x34
 800d39e:	e2d6      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d3a0:	4b3e      	ldr	r3, [pc, #248]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d3a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d3a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3ae:	d112      	bne.n	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3b6:	d10e      	bne.n	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3b8:	4b38      	ldr	r3, [pc, #224]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d3ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3c6:	d102      	bne.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800d3c8:	23fa      	movs	r3, #250	; 0xfa
 800d3ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3cc:	e2bf      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800d3ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d3d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3d4:	e2bb      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d3d6:	4b31      	ldr	r3, [pc, #196]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3e2:	d106      	bne.n	800d3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3ea:	d102      	bne.n	800d3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800d3ec:	4b2c      	ldr	r3, [pc, #176]	; (800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800d3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d3f0:	e2ad      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d3f2:	4b2a      	ldr	r3, [pc, #168]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d3f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d3f8:	f003 0302 	and.w	r3, r3, #2
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d107      	bne.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d406:	d103      	bne.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800d408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d40c:	637b      	str	r3, [r7, #52]	; 0x34
 800d40e:	e29e      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d410:	2300      	movs	r3, #0
 800d412:	637b      	str	r3, [r7, #52]	; 0x34
 800d414:	e29b      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d41a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800d41e:	430b      	orrs	r3, r1
 800d420:	d162      	bne.n	800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d422:	4b1e      	ldr	r3, [pc, #120]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d42c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	2b00      	cmp	r3, #0
 800d432:	d117      	bne.n	800d464 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d434:	4b19      	ldr	r3, [pc, #100]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d005      	beq.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d440:	4b16      	ldr	r3, [pc, #88]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	0e1b      	lsrs	r3, r3, #24
 800d446:	f003 030f 	and.w	r3, r3, #15
 800d44a:	e006      	b.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d44c:	4b13      	ldr	r3, [pc, #76]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d44e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d452:	041b      	lsls	r3, r3, #16
 800d454:	0e1b      	lsrs	r3, r3, #24
 800d456:	f003 030f 	and.w	r3, r3, #15
 800d45a:	4a12      	ldr	r2, [pc, #72]	; (800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800d45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d460:	637b      	str	r3, [r7, #52]	; 0x34
 800d462:	e274      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d464:	4b0d      	ldr	r3, [pc, #52]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d46a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d46e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d472:	d119      	bne.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d47a:	d115      	bne.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d47c:	4b07      	ldr	r3, [pc, #28]	; (800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800d47e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d48a:	d102      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800d48c:	23fa      	movs	r3, #250	; 0xfa
 800d48e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d490:	e25d      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800d492:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d496:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d498:	e259      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800d49a:	bf00      	nop
 800d49c:	46020c00 	.word	0x46020c00
 800d4a0:	00f42400 	.word	0x00f42400
 800d4a4:	0801ea24 	.word	0x0801ea24
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d4a8:	4b9d      	ldr	r3, [pc, #628]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4b4:	d106      	bne.n	800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4bc:	d102      	bne.n	800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800d4be:	4b99      	ldr	r3, [pc, #612]	; (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800d4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c2:	e244      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d4c4:	4b96      	ldr	r3, [pc, #600]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d4c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4ca:	f003 0302 	and.w	r3, r3, #2
 800d4ce:	2b02      	cmp	r3, #2
 800d4d0:	d107      	bne.n	800d4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4d8:	d103      	bne.n	800d4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800d4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4de:	637b      	str	r3, [r7, #52]	; 0x34
 800d4e0:	e235      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d4e6:	e232      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800d4f0:	430b      	orrs	r3, r1
 800d4f2:	d147      	bne.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d4f4:	4b8a      	ldr	r3, [pc, #552]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d4f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d4fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800d4fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	2b00      	cmp	r3, #0
 800d504:	d103      	bne.n	800d50e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d506:	f7fd fe51 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800d50a:	6378      	str	r0, [r7, #52]	; 0x34
 800d50c:	e21f      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d50e:	4b84      	ldr	r3, [pc, #528]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d51c:	d112      	bne.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d524:	d10e      	bne.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d526:	4b7e      	ldr	r3, [pc, #504]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d52c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d534:	d102      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800d536:	23fa      	movs	r3, #250	; 0xfa
 800d538:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d53a:	e208      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800d53c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d540:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d542:	e204      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d544:	4b76      	ldr	r3, [pc, #472]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d54c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d550:	d106      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800d552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d554:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d558:	d102      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800d55a:	4b72      	ldr	r3, [pc, #456]	; (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800d55c:	637b      	str	r3, [r7, #52]	; 0x34
 800d55e:	e1f6      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d560:	4b6f      	ldr	r3, [pc, #444]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d566:	f003 0302 	and.w	r3, r3, #2
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d107      	bne.n	800d57e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d574:	d103      	bne.n	800d57e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800d576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d57a:	637b      	str	r3, [r7, #52]	; 0x34
 800d57c:	e1e7      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	637b      	str	r3, [r7, #52]	; 0x34
 800d582:	e1e4      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d584:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d588:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800d58c:	430b      	orrs	r3, r1
 800d58e:	d12d      	bne.n	800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d590:	4b63      	ldr	r3, [pc, #396]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d596:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800d59a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d59c:	4b60      	ldr	r3, [pc, #384]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5a8:	d105      	bne.n	800d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d102      	bne.n	800d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800d5b0:	4b5c      	ldr	r3, [pc, #368]	; (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800d5b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5b4:	e1cb      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d5bc:	d107      	bne.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fe fc74 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d5cc:	e1bf      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5d4:	d107      	bne.n	800d5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5d6:	f107 0318 	add.w	r3, r7, #24
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe fdce 	bl	800c17c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5e4:	e1b3      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ea:	e1b0      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d5ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5f0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800d5f4:	430b      	orrs	r3, r1
 800d5f6:	d14d      	bne.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d5f8:	4b49      	ldr	r3, [pc, #292]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d5fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d602:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d60a:	d028      	beq.n	800d65e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d612:	d83c      	bhi.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d61a:	d013      	beq.n	800d644 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800d61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d622:	d834      	bhi.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800d62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d630:	d004      	beq.n	800d63c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800d632:	e02c      	b.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d634:	f7fd fdce 	bl	800b1d4 <HAL_RCC_GetPCLK2Freq>
 800d638:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d63a:	e188      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d63c:	f7fd fc94 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d640:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d642:	e184      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d644:	4b36      	ldr	r3, [pc, #216]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d64c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d650:	d102      	bne.n	800d658 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800d652:	4b34      	ldr	r3, [pc, #208]	; (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800d654:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d656:	e17a      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800d658:	2300      	movs	r3, #0
 800d65a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d65c:	e177      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d65e:	4b30      	ldr	r3, [pc, #192]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d005      	beq.n	800d676 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800d66a:	4b2d      	ldr	r3, [pc, #180]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	0e1b      	lsrs	r3, r3, #24
 800d670:	f003 030f 	and.w	r3, r3, #15
 800d674:	e006      	b.n	800d684 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800d676:	4b2a      	ldr	r3, [pc, #168]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d67c:	041b      	lsls	r3, r3, #16
 800d67e:	0e1b      	lsrs	r3, r3, #24
 800d680:	f003 030f 	and.w	r3, r3, #15
 800d684:	4a28      	ldr	r2, [pc, #160]	; (800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800d686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d68a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d68c:	e15f      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800d68e:	2300      	movs	r3, #0
 800d690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d692:	e15c      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d694:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d698:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800d69c:	430b      	orrs	r3, r1
 800d69e:	d154      	bne.n	800d74a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d6a0:	4b1f      	ldr	r3, [pc, #124]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d6a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d6aa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800d6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d6b2:	d028      	beq.n	800d706 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800d6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d6ba:	d843      	bhi.n	800d744 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6c2:	d013      	beq.n	800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6ca:	d83b      	bhi.n	800d744 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d004      	beq.n	800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6d8:	d004      	beq.n	800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800d6da:	e033      	b.n	800d744 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d6dc:	f7fd fd66 	bl	800b1ac <HAL_RCC_GetPCLK1Freq>
 800d6e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d6e2:	e134      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d6e4:	f7fd fc40 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d6e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d6ea:	e130      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d6ec:	4b0c      	ldr	r3, [pc, #48]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6f8:	d102      	bne.n	800d700 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800d6fa:	4b0a      	ldr	r3, [pc, #40]	; (800d724 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800d6fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d6fe:	e126      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800d700:	2300      	movs	r3, #0
 800d702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d704:	e123      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d706:	4b06      	ldr	r3, [pc, #24]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00c      	beq.n	800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800d712:	4b03      	ldr	r3, [pc, #12]	; (800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	0e1b      	lsrs	r3, r3, #24
 800d718:	f003 030f 	and.w	r3, r3, #15
 800d71c:	e00d      	b.n	800d73a <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800d71e:	bf00      	nop
 800d720:	46020c00 	.word	0x46020c00
 800d724:	00f42400 	.word	0x00f42400
 800d728:	0801ea24 	.word	0x0801ea24
 800d72c:	4b8a      	ldr	r3, [pc, #552]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d72e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d732:	041b      	lsls	r3, r3, #16
 800d734:	0e1b      	lsrs	r3, r3, #24
 800d736:	f003 030f 	and.w	r3, r3, #15
 800d73a:	4a88      	ldr	r2, [pc, #544]	; (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800d73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d742:	e104      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800d744:	2300      	movs	r3, #0
 800d746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d748:	e101      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d74e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800d752:	430b      	orrs	r3, r1
 800d754:	d16e      	bne.n	800d834 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d756:	4b80      	ldr	r3, [pc, #512]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d75c:	f003 0318 	and.w	r3, r3, #24
 800d760:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	2b18      	cmp	r3, #24
 800d766:	d862      	bhi.n	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800d768:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800d76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d7d5 	.word	0x0800d7d5
 800d774:	0800d82f 	.word	0x0800d82f
 800d778:	0800d82f 	.word	0x0800d82f
 800d77c:	0800d82f 	.word	0x0800d82f
 800d780:	0800d82f 	.word	0x0800d82f
 800d784:	0800d82f 	.word	0x0800d82f
 800d788:	0800d82f 	.word	0x0800d82f
 800d78c:	0800d82f 	.word	0x0800d82f
 800d790:	0800d7dd 	.word	0x0800d7dd
 800d794:	0800d82f 	.word	0x0800d82f
 800d798:	0800d82f 	.word	0x0800d82f
 800d79c:	0800d82f 	.word	0x0800d82f
 800d7a0:	0800d82f 	.word	0x0800d82f
 800d7a4:	0800d82f 	.word	0x0800d82f
 800d7a8:	0800d82f 	.word	0x0800d82f
 800d7ac:	0800d82f 	.word	0x0800d82f
 800d7b0:	0800d7e5 	.word	0x0800d7e5
 800d7b4:	0800d82f 	.word	0x0800d82f
 800d7b8:	0800d82f 	.word	0x0800d82f
 800d7bc:	0800d82f 	.word	0x0800d82f
 800d7c0:	0800d82f 	.word	0x0800d82f
 800d7c4:	0800d82f 	.word	0x0800d82f
 800d7c8:	0800d82f 	.word	0x0800d82f
 800d7cc:	0800d82f 	.word	0x0800d82f
 800d7d0:	0800d7ff 	.word	0x0800d7ff
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d7d4:	f7fd fd12 	bl	800b1fc <HAL_RCC_GetPCLK3Freq>
 800d7d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d7da:	e0b8      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d7dc:	f7fd fbc4 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d7e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d7e2:	e0b4      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7e4:	4b5c      	ldr	r3, [pc, #368]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7f0:	d102      	bne.n	800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800d7f2:	4b5b      	ldr	r3, [pc, #364]	; (800d960 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800d7f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d7f6:	e0aa      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d7fc:	e0a7      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7fe:	4b56      	ldr	r3, [pc, #344]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d806:	2b00      	cmp	r3, #0
 800d808:	d005      	beq.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d80a:	4b53      	ldr	r3, [pc, #332]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	0e1b      	lsrs	r3, r3, #24
 800d810:	f003 030f 	and.w	r3, r3, #15
 800d814:	e006      	b.n	800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800d816:	4b50      	ldr	r3, [pc, #320]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d81c:	041b      	lsls	r3, r3, #16
 800d81e:	0e1b      	lsrs	r3, r3, #24
 800d820:	f003 030f 	and.w	r3, r3, #15
 800d824:	4a4d      	ldr	r2, [pc, #308]	; (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800d826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d82a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d82c:	e08f      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800d82e:	2300      	movs	r3, #0
 800d830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d832:	e08c      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d834:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d838:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800d83c:	430b      	orrs	r3, r1
 800d83e:	d14c      	bne.n	800d8da <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d840:	4b45      	ldr	r3, [pc, #276]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d842:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d846:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d84a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d852:	d013      	beq.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d85a:	d83b      	bhi.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d862:	d013      	beq.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d86a:	d833      	bhi.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d014      	beq.n	800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d878:	d014      	beq.n	800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800d87a:	e02b      	b.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d87c:	f107 0318 	add.w	r3, r7, #24
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe fc7b 	bl	800c17c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d88a:	e060      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d88c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fb0d 	bl	800beb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d89a:	e058      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d89c:	f7fd fb64 	bl	800af68 <HAL_RCC_GetSysClockFreq>
 800d8a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800d8a2:	e054      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8a4:	4b2c      	ldr	r3, [pc, #176]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800d8b0:	4b29      	ldr	r3, [pc, #164]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	0e1b      	lsrs	r3, r3, #24
 800d8b6:	f003 030f 	and.w	r3, r3, #15
 800d8ba:	e006      	b.n	800d8ca <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800d8bc:	4b26      	ldr	r3, [pc, #152]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d8be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8c2:	041b      	lsls	r3, r3, #16
 800d8c4:	0e1b      	lsrs	r3, r3, #24
 800d8c6:	f003 030f 	and.w	r3, r3, #15
 800d8ca:	4a24      	ldr	r2, [pc, #144]	; (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800d8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8d2:	e03c      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8d8:	e039      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d8da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8de:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800d8e2:	430b      	orrs	r3, r1
 800d8e4:	d131      	bne.n	800d94a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d8e6:	4b1c      	ldr	r3, [pc, #112]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d8e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d8ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8f0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d8f2:	4b19      	ldr	r3, [pc, #100]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d8f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d8f8:	f003 0302 	and.w	r3, r3, #2
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d106      	bne.n	800d90e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	2b00      	cmp	r3, #0
 800d904:	d103      	bne.n	800d90e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800d906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d90a:	637b      	str	r3, [r7, #52]	; 0x34
 800d90c:	e01f      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d90e:	4b12      	ldr	r3, [pc, #72]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d91c:	d112      	bne.n	800d944 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d924:	d10e      	bne.n	800d944 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d926:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800d928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d92c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d934:	d102      	bne.n	800d93c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800d936:	23fa      	movs	r3, #250	; 0xfa
 800d938:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d93a:	e008      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800d93c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d940:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d942:	e004      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d944:	2300      	movs	r3, #0
 800d946:	637b      	str	r3, [r7, #52]	; 0x34
 800d948:	e001      	b.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800d94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d950:	4618      	mov	r0, r3
 800d952:	3738      	adds	r7, #56	; 0x38
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	46020c00 	.word	0x46020c00
 800d95c:	0801ea24 	.word	0x0801ea24
 800d960:	00f42400 	.word	0x00f42400

0800d964 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d96c:	4b1c      	ldr	r3, [pc, #112]	; (800d9e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800d96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d970:	4a1b      	ldr	r2, [pc, #108]	; (800d9e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800d972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d976:	6753      	str	r3, [r2, #116]	; 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 800d978:	4b19      	ldr	r3, [pc, #100]	; (800d9e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800d97a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d97c:	4a18      	ldr	r2, [pc, #96]	; (800d9e0 <HAL_RCCEx_CRSConfig+0x7c>)
 800d97e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d982:	6753      	str	r3, [r2, #116]	; 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	431a      	orrs	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	4313      	orrs	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	041b      	lsls	r3, r3, #16
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d9ac:	4a0d      	ldr	r2, [pc, #52]	; (800d9e4 <HAL_RCCEx_CRSConfig+0x80>)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d9b2:	4b0c      	ldr	r3, [pc, #48]	; (800d9e4 <HAL_RCCEx_CRSConfig+0x80>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	021b      	lsls	r3, r3, #8
 800d9c0:	4908      	ldr	r1, [pc, #32]	; (800d9e4 <HAL_RCCEx_CRSConfig+0x80>)
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d9c6:	4b07      	ldr	r3, [pc, #28]	; (800d9e4 <HAL_RCCEx_CRSConfig+0x80>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a06      	ldr	r2, [pc, #24]	; (800d9e4 <HAL_RCCEx_CRSConfig+0x80>)
 800d9cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d9d0:	6013      	str	r3, [r2, #0]
}
 800d9d2:	bf00      	nop
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	46020c00 	.word	0x46020c00
 800d9e4:	40006000 	.word	0x40006000

0800d9e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d9f0:	4b47      	ldr	r3, [pc, #284]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a46      	ldr	r2, [pc, #280]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800d9f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d9fc:	f7f9 f842 	bl	8006a84 <HAL_GetTick>
 800da00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800da02:	e008      	b.n	800da16 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da04:	f7f9 f83e 	bl	8006a84 <HAL_GetTick>
 800da08:	4602      	mov	r2, r0
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d901      	bls.n	800da16 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e077      	b.n	800db06 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800da16:	4b3e      	ldr	r3, [pc, #248]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1f0      	bne.n	800da04 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800da22:	4b3b      	ldr	r3, [pc, #236]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800da2a:	f023 0303 	bic.w	r3, r3, #3
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	6811      	ldr	r1, [r2, #0]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	6852      	ldr	r2, [r2, #4]
 800da36:	3a01      	subs	r2, #1
 800da38:	0212      	lsls	r2, r2, #8
 800da3a:	430a      	orrs	r2, r1
 800da3c:	4934      	ldr	r1, [pc, #208]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da3e:	4313      	orrs	r3, r2
 800da40:	62cb      	str	r3, [r1, #44]	; 0x2c
 800da42:	4b33      	ldr	r3, [pc, #204]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da46:	4b33      	ldr	r3, [pc, #204]	; (800db14 <RCCEx_PLL2_Config+0x12c>)
 800da48:	4013      	ands	r3, r2
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	6892      	ldr	r2, [r2, #8]
 800da4e:	3a01      	subs	r2, #1
 800da50:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	68d2      	ldr	r2, [r2, #12]
 800da58:	3a01      	subs	r2, #1
 800da5a:	0252      	lsls	r2, r2, #9
 800da5c:	b292      	uxth	r2, r2
 800da5e:	4311      	orrs	r1, r2
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	6912      	ldr	r2, [r2, #16]
 800da64:	3a01      	subs	r2, #1
 800da66:	0412      	lsls	r2, r2, #16
 800da68:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800da6c:	4311      	orrs	r1, r2
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	6952      	ldr	r2, [r2, #20]
 800da72:	3a01      	subs	r2, #1
 800da74:	0612      	lsls	r2, r2, #24
 800da76:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800da7a:	430a      	orrs	r2, r1
 800da7c:	4924      	ldr	r1, [pc, #144]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da7e:	4313      	orrs	r3, r2
 800da80:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800da82:	4b23      	ldr	r3, [pc, #140]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da86:	f023 020c 	bic.w	r2, r3, #12
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	4920      	ldr	r1, [pc, #128]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da90:	4313      	orrs	r3, r2
 800da92:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800da94:	4b1e      	ldr	r3, [pc, #120]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6a1b      	ldr	r3, [r3, #32]
 800da9c:	491c      	ldr	r1, [pc, #112]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800da9e:	4313      	orrs	r3, r2
 800daa0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800daa2:	4b1b      	ldr	r3, [pc, #108]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800daa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa6:	4a1a      	ldr	r2, [pc, #104]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800daa8:	f023 0310 	bic.w	r3, r3, #16
 800daac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800daae:	4b18      	ldr	r3, [pc, #96]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dab6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	69d2      	ldr	r2, [r2, #28]
 800dabe:	00d2      	lsls	r2, r2, #3
 800dac0:	4913      	ldr	r1, [pc, #76]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800dac2:	4313      	orrs	r3, r2
 800dac4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dac6:	4b12      	ldr	r3, [pc, #72]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daca:	4a11      	ldr	r2, [pc, #68]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800dacc:	f043 0310 	orr.w	r3, r3, #16
 800dad0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a0e      	ldr	r2, [pc, #56]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800dad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dadc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dade:	f7f8 ffd1 	bl	8006a84 <HAL_GetTick>
 800dae2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dae4:	e008      	b.n	800daf8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dae6:	f7f8 ffcd 	bl	8006a84 <HAL_GetTick>
 800daea:	4602      	mov	r2, r0
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d901      	bls.n	800daf8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800daf4:	2303      	movs	r3, #3
 800daf6:	e006      	b.n	800db06 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800daf8:	4b05      	ldr	r3, [pc, #20]	; (800db10 <RCCEx_PLL2_Config+0x128>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d0f0      	beq.n	800dae6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800db04:	2300      	movs	r3, #0

}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	46020c00 	.word	0x46020c00
 800db14:	80800000 	.word	0x80800000

0800db18 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800db20:	4b47      	ldr	r3, [pc, #284]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a46      	ldr	r2, [pc, #280]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800db26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db2a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800db2c:	f7f8 ffaa 	bl	8006a84 <HAL_GetTick>
 800db30:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db32:	e008      	b.n	800db46 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db34:	f7f8 ffa6 	bl	8006a84 <HAL_GetTick>
 800db38:	4602      	mov	r2, r0
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d901      	bls.n	800db46 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800db42:	2303      	movs	r3, #3
 800db44:	e077      	b.n	800dc36 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db46:	4b3e      	ldr	r3, [pc, #248]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1f0      	bne.n	800db34 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800db52:	4b3b      	ldr	r3, [pc, #236]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800db54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800db5a:	f023 0303 	bic.w	r3, r3, #3
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	6811      	ldr	r1, [r2, #0]
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	6852      	ldr	r2, [r2, #4]
 800db66:	3a01      	subs	r2, #1
 800db68:	0212      	lsls	r2, r2, #8
 800db6a:	430a      	orrs	r2, r1
 800db6c:	4934      	ldr	r1, [pc, #208]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800db6e:	4313      	orrs	r3, r2
 800db70:	630b      	str	r3, [r1, #48]	; 0x30
 800db72:	4b33      	ldr	r3, [pc, #204]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800db74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db76:	4b33      	ldr	r3, [pc, #204]	; (800dc44 <RCCEx_PLL3_Config+0x12c>)
 800db78:	4013      	ands	r3, r2
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	6892      	ldr	r2, [r2, #8]
 800db7e:	3a01      	subs	r2, #1
 800db80:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	68d2      	ldr	r2, [r2, #12]
 800db88:	3a01      	subs	r2, #1
 800db8a:	0252      	lsls	r2, r2, #9
 800db8c:	b292      	uxth	r2, r2
 800db8e:	4311      	orrs	r1, r2
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	6912      	ldr	r2, [r2, #16]
 800db94:	3a01      	subs	r2, #1
 800db96:	0412      	lsls	r2, r2, #16
 800db98:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800db9c:	4311      	orrs	r1, r2
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	6952      	ldr	r2, [r2, #20]
 800dba2:	3a01      	subs	r2, #1
 800dba4:	0612      	lsls	r2, r2, #24
 800dba6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	4924      	ldr	r1, [pc, #144]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800dbb2:	4b23      	ldr	r3, [pc, #140]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb6:	f023 020c 	bic.w	r2, r3, #12
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	4920      	ldr	r1, [pc, #128]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800dbc4:	4b1e      	ldr	r3, [pc, #120]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a1b      	ldr	r3, [r3, #32]
 800dbcc:	491c      	ldr	r1, [pc, #112]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800dbd2:	4b1b      	ldr	r3, [pc, #108]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd6:	4a1a      	ldr	r2, [pc, #104]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbd8:	f023 0310 	bic.w	r3, r3, #16
 800dbdc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dbde:	4b18      	ldr	r3, [pc, #96]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbe6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	69d2      	ldr	r2, [r2, #28]
 800dbee:	00d2      	lsls	r2, r2, #3
 800dbf0:	4913      	ldr	r1, [pc, #76]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800dbf6:	4b12      	ldr	r3, [pc, #72]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfa:	4a11      	ldr	r2, [pc, #68]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dbfc:	f043 0310 	orr.w	r3, r3, #16
 800dc00:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800dc02:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a0e      	ldr	r2, [pc, #56]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dc08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc0c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc0e:	f7f8 ff39 	bl	8006a84 <HAL_GetTick>
 800dc12:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc14:	e008      	b.n	800dc28 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc16:	f7f8 ff35 	bl	8006a84 <HAL_GetTick>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d901      	bls.n	800dc28 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e006      	b.n	800dc36 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <RCCEx_PLL3_Config+0x128>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0f0      	beq.n	800dc16 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	46020c00 	.word	0x46020c00
 800dc44:	80800000 	.word	0x80800000

0800dc48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dc50:	2301      	movs	r3, #1
 800dc52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d068      	beq.n	800dd2c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d106      	bne.n	800dc74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7f4 fec4 	bl	80029fc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2202      	movs	r2, #2
 800dc78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc7c:	4b2e      	ldr	r3, [pc, #184]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dc7e:	22ca      	movs	r2, #202	; 0xca
 800dc80:	625a      	str	r2, [r3, #36]	; 0x24
 800dc82:	4b2d      	ldr	r3, [pc, #180]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dc84:	2253      	movs	r2, #83	; 0x53
 800dc86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 f87d 	bl	800dd88 <RTC_EnterInitMode>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d13f      	bne.n	800dd18 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800dc98:	4b27      	ldr	r3, [pc, #156]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	4a26      	ldr	r2, [pc, #152]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dc9e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800dca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dca6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800dca8:	4b23      	ldr	r3, [pc, #140]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dcaa:	699a      	ldr	r2, [r3, #24]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6859      	ldr	r1, [r3, #4]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	4319      	orrs	r1, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	699b      	ldr	r3, [r3, #24]
 800dcba:	430b      	orrs	r3, r1
 800dcbc:	491e      	ldr	r1, [pc, #120]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	68da      	ldr	r2, [r3, #12]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	041b      	lsls	r3, r3, #16
 800dccc:	491a      	ldr	r1, [pc, #104]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800dcd2:	4b19      	ldr	r3, [pc, #100]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce2:	430b      	orrs	r3, r1
 800dce4:	4914      	ldr	r1, [pc, #80]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dce6:	4313      	orrs	r3, r2
 800dce8:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f880 	bl	800ddf0 <RTC_ExitInitMode>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dcf4:	7bfb      	ldrb	r3, [r7, #15]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10e      	bne.n	800dd18 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800dcfa:	4b0f      	ldr	r3, [pc, #60]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dcfc:	699b      	ldr	r3, [r3, #24]
 800dcfe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a19      	ldr	r1, [r3, #32]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	69db      	ldr	r3, [r3, #28]
 800dd0a:	4319      	orrs	r1, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	430b      	orrs	r3, r1
 800dd12:	4909      	ldr	r1, [pc, #36]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dd14:	4313      	orrs	r3, r2
 800dd16:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd18:	4b07      	ldr	r3, [pc, #28]	; (800dd38 <HAL_RTC_Init+0xf0>)
 800dd1a:	22ff      	movs	r2, #255	; 0xff
 800dd1c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800dd1e:	7bfb      	ldrb	r3, [r7, #15]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d103      	bne.n	800dd2c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800dd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	46007800 	.word	0x46007800

0800dd3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dd44:	4b0f      	ldr	r3, [pc, #60]	; (800dd84 <HAL_RTC_WaitForSynchro+0x48>)
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	4a0e      	ldr	r2, [pc, #56]	; (800dd84 <HAL_RTC_WaitForSynchro+0x48>)
 800dd4a:	f023 0320 	bic.w	r3, r3, #32
 800dd4e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dd50:	f7f8 fe98 	bl	8006a84 <HAL_GetTick>
 800dd54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dd56:	e009      	b.n	800dd6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd58:	f7f8 fe94 	bl	8006a84 <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd66:	d901      	bls.n	800dd6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e006      	b.n	800dd7a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dd6c:	4b05      	ldr	r3, [pc, #20]	; (800dd84 <HAL_RTC_WaitForSynchro+0x48>)
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	f003 0320 	and.w	r3, r3, #32
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d0ef      	beq.n	800dd58 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	46007800 	.word	0x46007800

0800dd88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dd94:	4b15      	ldr	r3, [pc, #84]	; (800ddec <RTC_EnterInitMode+0x64>)
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d120      	bne.n	800dde2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dda0:	4b12      	ldr	r3, [pc, #72]	; (800ddec <RTC_EnterInitMode+0x64>)
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	4a11      	ldr	r2, [pc, #68]	; (800ddec <RTC_EnterInitMode+0x64>)
 800dda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddaa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ddac:	f7f8 fe6a 	bl	8006a84 <HAL_GetTick>
 800ddb0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ddb2:	e00d      	b.n	800ddd0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ddb4:	f7f8 fe66 	bl	8006a84 <HAL_GetTick>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddc2:	d905      	bls.n	800ddd0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ddc4:	2303      	movs	r3, #3
 800ddc6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2203      	movs	r2, #3
 800ddcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ddd0:	4b06      	ldr	r3, [pc, #24]	; (800ddec <RTC_EnterInitMode+0x64>)
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d102      	bne.n	800dde2 <RTC_EnterInitMode+0x5a>
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	d1e8      	bne.n	800ddb4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	46007800 	.word	0x46007800

0800ddf0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ddfc:	4b1a      	ldr	r3, [pc, #104]	; (800de68 <RTC_ExitInitMode+0x78>)
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	4a19      	ldr	r2, [pc, #100]	; (800de68 <RTC_ExitInitMode+0x78>)
 800de02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de06:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800de08:	4b17      	ldr	r3, [pc, #92]	; (800de68 <RTC_ExitInitMode+0x78>)
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	f003 0320 	and.w	r3, r3, #32
 800de10:	2b00      	cmp	r3, #0
 800de12:	d10c      	bne.n	800de2e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7ff ff91 	bl	800dd3c <HAL_RTC_WaitForSynchro>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d01e      	beq.n	800de5e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2203      	movs	r2, #3
 800de24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800de28:	2303      	movs	r3, #3
 800de2a:	73fb      	strb	r3, [r7, #15]
 800de2c:	e017      	b.n	800de5e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800de2e:	4b0e      	ldr	r3, [pc, #56]	; (800de68 <RTC_ExitInitMode+0x78>)
 800de30:	699b      	ldr	r3, [r3, #24]
 800de32:	4a0d      	ldr	r2, [pc, #52]	; (800de68 <RTC_ExitInitMode+0x78>)
 800de34:	f023 0320 	bic.w	r3, r3, #32
 800de38:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff ff7e 	bl	800dd3c <HAL_RTC_WaitForSynchro>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d005      	beq.n	800de52 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2203      	movs	r2, #3
 800de4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800de4e:	2303      	movs	r3, #3
 800de50:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800de52:	4b05      	ldr	r3, [pc, #20]	; (800de68 <RTC_ExitInitMode+0x78>)
 800de54:	699b      	ldr	r3, [r3, #24]
 800de56:	4a04      	ldr	r2, [pc, #16]	; (800de68 <RTC_ExitInitMode+0x78>)
 800de58:	f043 0320 	orr.w	r3, r3, #32
 800de5c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	46007800 	.word	0x46007800

0800de6c <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
               || ((sTamper->Filter == RTC_TAMPERFILTER_DISABLE)  && \
                   ((sTamper->Trigger == RTC_TAMPERTRIGGER_RISINGEDGE) || \
                    (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))));

  /* Configuration register 2 */
  tmpreg = READ_REG(TAMP->CR2);
 800de76:	4b35      	ldr	r3, [pc, #212]	; (800df4c <HAL_RTCEx_SetTamper+0xe0>)
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	061a      	lsls	r2, r3, #24
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	041b      	lsls	r3, r3, #16
 800de88:	431a      	orrs	r2, r3
              (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos));
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	681b      	ldr	r3, [r3, #0]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 800de8e:	4313      	orrs	r3, r2
 800de90:	43db      	mvns	r3, r3
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	4013      	ands	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]

  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d003      	beq.n	800dea8 <HAL_RTCEx_SetTamper+0x3c>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d105      	bne.n	800deb4 <HAL_RTCEx_SetTamper+0x48>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos);
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	061b      	lsls	r3, r3, #24
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	4313      	orrs	r3, r2
 800deb2:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d005      	beq.n	800dec8 <HAL_RTCEx_SetTamper+0x5c>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos);
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	041b      	lsls	r3, r3, #16
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	4313      	orrs	r3, r2
 800dec6:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d004      	beq.n	800deda <HAL_RTCEx_SetTamper+0x6e>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	60fb      	str	r3, [r7, #12]
  }
  WRITE_REG(TAMP->CR2, tmpreg);
 800deda:	4a1c      	ldr	r2, [pc, #112]	; (800df4c <HAL_RTCEx_SetTamper+0xe0>)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6053      	str	r3, [r2, #4]

  /* Filter control register */
  WRITE_REG(TAMP->FLTCR, sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | \
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	691a      	ldr	r2, [r3, #16]
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	431a      	orrs	r2, r3
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	699b      	ldr	r3, [r3, #24]
 800deee:	431a      	orrs	r2, r3
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	69db      	ldr	r3, [r3, #28]
 800def4:	4915      	ldr	r1, [pc, #84]	; (800df4c <HAL_RTCEx_SetTamper+0xe0>)
 800def6:	4313      	orrs	r3, r2
 800def8:	60cb      	str	r3, [r1, #12]
            sTamper->TamperPullUp);

  /* Timestamp on tamper */
  if (READ_BIT(RTC->CR, RTC_CR_TAMPTS) != sTamper->TimeStampOnTamperDetection)
 800defa:	4b15      	ldr	r3, [pc, #84]	; (800df50 <HAL_RTCEx_SetTamper+0xe4>)
 800defc:	699b      	ldr	r3, [r3, #24]
 800defe:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	429a      	cmp	r2, r3
 800df08:	d011      	beq.n	800df2e <HAL_RTCEx_SetTamper+0xc2>
  {
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df0a:	4b11      	ldr	r3, [pc, #68]	; (800df50 <HAL_RTCEx_SetTamper+0xe4>)
 800df0c:	22ca      	movs	r2, #202	; 0xca
 800df0e:	625a      	str	r2, [r3, #36]	; 0x24
 800df10:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <HAL_RTCEx_SetTamper+0xe4>)
 800df12:	2253      	movs	r2, #83	; 0x53
 800df14:	625a      	str	r2, [r3, #36]	; 0x24
    MODIFY_REG(RTC->CR, RTC_CR_TAMPTS, sTamper->TimeStampOnTamperDetection);
 800df16:	4b0e      	ldr	r3, [pc, #56]	; (800df50 <HAL_RTCEx_SetTamper+0xe4>)
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	6a1b      	ldr	r3, [r3, #32]
 800df22:	490b      	ldr	r1, [pc, #44]	; (800df50 <HAL_RTCEx_SetTamper+0xe4>)
 800df24:	4313      	orrs	r3, r2
 800df26:	618b      	str	r3, [r1, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df28:	4b09      	ldr	r3, [pc, #36]	; (800df50 <HAL_RTCEx_SetTamper+0xe4>)
 800df2a:	22ff      	movs	r2, #255	; 0xff
 800df2c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Control register 1 */
  SET_BIT(TAMP->CR1, sTamper->Tamper);
 800df2e:	4b07      	ldr	r3, [pc, #28]	; (800df4c <HAL_RTCEx_SetTamper+0xe0>)
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4905      	ldr	r1, [pc, #20]	; (800df4c <HAL_RTCEx_SetTamper+0xe0>)
 800df38:	4313      	orrs	r3, r2
 800df3a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	46007c00 	.word	0x46007c00
 800df50:	46007800 	.word	0x46007800

0800df54 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4910      	ldr	r1, [pc, #64]	; (800dfa8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800df68:	4313      	orrs	r3, r2
 800df6a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	689a      	ldr	r2, [r3, #8]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	431a      	orrs	r2, r3
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	490c      	ldr	r1, [pc, #48]	; (800dfac <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800df7c:	4313      	orrs	r3, r2
 800df7e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800df80:	4b0a      	ldr	r3, [pc, #40]	; (800dfac <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800df82:	6a1b      	ldr	r3, [r3, #32]
 800df84:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	6919      	ldr	r1, [r3, #16]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	695b      	ldr	r3, [r3, #20]
 800df90:	041b      	lsls	r3, r3, #16
 800df92:	430b      	orrs	r3, r1
 800df94:	4905      	ldr	r1, [pc, #20]	; (800dfac <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800df96:	4313      	orrs	r3, r2
 800df98:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	46007800 	.word	0x46007800
 800dfac:	46007c00 	.word	0x46007c00

0800dfb0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b08a      	sub	sp, #40	; 0x28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e1de      	b.n	800e380 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d10e      	bne.n	800dfea <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a89      	ldr	r2, [pc, #548]	; (800e1f8 <HAL_SAI_Init+0x248>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d107      	bne.n	800dfe6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d103      	bne.n	800dfe6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e1ca      	b.n	800e380 <HAL_SAI_Init+0x3d0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d106      	bne.n	800e004 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7f5 f844 	bl	800308c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 f9c7 	bl	800e398 <SAI_Disable>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e010:	2301      	movs	r3, #1
 800e012:	e1b5      	b.n	800e380 <HAL_SAI_Init+0x3d0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2202      	movs	r2, #2
 800e018:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	2b02      	cmp	r3, #2
 800e022:	d00c      	beq.n	800e03e <HAL_SAI_Init+0x8e>
 800e024:	2b02      	cmp	r3, #2
 800e026:	d80d      	bhi.n	800e044 <HAL_SAI_Init+0x94>
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <HAL_SAI_Init+0x82>
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d003      	beq.n	800e038 <HAL_SAI_Init+0x88>
 800e030:	e008      	b.n	800e044 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e032:	2300      	movs	r3, #0
 800e034:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e036:	e008      	b.n	800e04a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e038:	2310      	movs	r3, #16
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e03c:	e005      	b.n	800e04a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e03e:	2320      	movs	r3, #32
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e042:	e002      	b.n	800e04a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e048:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d81d      	bhi.n	800e08e <HAL_SAI_Init+0xde>
 800e052:	a201      	add	r2, pc, #4	; (adr r2, 800e058 <HAL_SAI_Init+0xa8>)
 800e054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e058:	0800e069 	.word	0x0800e069
 800e05c:	0800e06f 	.word	0x0800e06f
 800e060:	0800e077 	.word	0x0800e077
 800e064:	0800e07f 	.word	0x0800e07f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	61fb      	str	r3, [r7, #28]
      break;
 800e06c:	e012      	b.n	800e094 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e072:	61fb      	str	r3, [r7, #28]
      break;
 800e074:	e00e      	b.n	800e094 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e07a:	61fb      	str	r3, [r7, #28]
      break;
 800e07c:	e00a      	b.n	800e094 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e07e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e082:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	f043 0301 	orr.w	r3, r3, #1
 800e08a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e08c:	e002      	b.n	800e094 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	61fb      	str	r3, [r7, #28]
      break;
 800e092:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a57      	ldr	r2, [pc, #348]	; (800e1f8 <HAL_SAI_Init+0x248>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d004      	beq.n	800e0a8 <HAL_SAI_Init+0xf8>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a56      	ldr	r2, [pc, #344]	; (800e1fc <HAL_SAI_Init+0x24c>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d103      	bne.n	800e0b0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e0a8:	4a55      	ldr	r2, [pc, #340]	; (800e200 <HAL_SAI_Init+0x250>)
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	e002      	b.n	800e0b6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e0b0:	4a54      	ldr	r2, [pc, #336]	; (800e204 <HAL_SAI_Init+0x254>)
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 8083 	beq.w	800e1c6 <HAL_SAI_Init+0x216>
  {
    uint32_t freq = 0;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a4b      	ldr	r2, [pc, #300]	; (800e1f8 <HAL_SAI_Init+0x248>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d004      	beq.n	800e0d8 <HAL_SAI_Init+0x128>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4a4a      	ldr	r2, [pc, #296]	; (800e1fc <HAL_SAI_Init+0x24c>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d106      	bne.n	800e0e6 <HAL_SAI_Init+0x136>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e0d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e0dc:	f04f 0100 	mov.w	r1, #0
 800e0e0:	f7fe fb18 	bl	800c714 <HAL_RCCEx_GetPeriphCLKFreq>
 800e0e4:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a47      	ldr	r2, [pc, #284]	; (800e208 <HAL_SAI_Init+0x258>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d004      	beq.n	800e0fa <HAL_SAI_Init+0x14a>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a45      	ldr	r2, [pc, #276]	; (800e20c <HAL_SAI_Init+0x25c>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d106      	bne.n	800e108 <HAL_SAI_Init+0x158>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e0fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e0fe:	f04f 0100 	mov.w	r1, #0
 800e102:	f7fe fb07 	bl	800c714 <HAL_RCCEx_GetPeriphCLKFreq>
 800e106:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e110:	d120      	bne.n	800e154 <HAL_SAI_Init+0x1a4>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e116:	2b04      	cmp	r3, #4
 800e118:	d102      	bne.n	800e120 <HAL_SAI_Init+0x170>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800e11a:	2340      	movs	r3, #64	; 0x40
 800e11c:	613b      	str	r3, [r7, #16]
 800e11e:	e00a      	b.n	800e136 <HAL_SAI_Init+0x186>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e124:	2b08      	cmp	r3, #8
 800e126:	d103      	bne.n	800e130 <HAL_SAI_Init+0x180>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800e128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e12c:	613b      	str	r3, [r7, #16]
 800e12e:	e002      	b.n	800e136 <HAL_SAI_Init+0x186>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e134:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e136:	69ba      	ldr	r2, [r7, #24]
 800e138:	4613      	mov	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	005b      	lsls	r3, r3, #1
 800e140:	4619      	mov	r1, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a1b      	ldr	r3, [r3, #32]
 800e146:	693a      	ldr	r2, [r7, #16]
 800e148:	fb02 f303 	mul.w	r3, r2, r3
 800e14c:	fbb1 f3f3 	udiv	r3, r1, r3
 800e150:	617b      	str	r3, [r7, #20]
 800e152:	e017      	b.n	800e184 <HAL_SAI_Init+0x1d4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e15c:	d101      	bne.n	800e162 <HAL_SAI_Init+0x1b2>
 800e15e:	2302      	movs	r3, #2
 800e160:	e000      	b.n	800e164 <HAL_SAI_Init+0x1b4>
 800e162:	2301      	movs	r3, #1
 800e164:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e166:	69ba      	ldr	r2, [r7, #24]
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	4619      	mov	r1, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a1b      	ldr	r3, [r3, #32]
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	fb02 f303 	mul.w	r3, r2, r3
 800e17c:	021b      	lsls	r3, r3, #8
 800e17e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e182:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	4a22      	ldr	r2, [pc, #136]	; (800e210 <HAL_SAI_Init+0x260>)
 800e188:	fba2 2303 	umull	r2, r3, r2, r3
 800e18c:	08da      	lsrs	r2, r3, #3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e192:	6979      	ldr	r1, [r7, #20]
 800e194:	4b1e      	ldr	r3, [pc, #120]	; (800e210 <HAL_SAI_Init+0x260>)
 800e196:	fba3 2301 	umull	r2, r3, r3, r1
 800e19a:	08da      	lsrs	r2, r3, #3
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	1aca      	subs	r2, r1, r3
 800e1a6:	2a08      	cmp	r2, #8
 800e1a8:	d904      	bls.n	800e1b4 <HAL_SAI_Init+0x204>
    {
      hsai->Init.Mckdiv += 1U;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ae:	1c5a      	adds	r2, r3, #1
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1b8:	2b04      	cmp	r3, #4
 800e1ba:	d104      	bne.n	800e1c6 <HAL_SAI_Init+0x216>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	085a      	lsrs	r2, r3, #1
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <HAL_SAI_Init+0x226>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d109      	bne.n	800e1ea <HAL_SAI_Init+0x23a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d101      	bne.n	800e1e2 <HAL_SAI_Init+0x232>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e001      	b.n	800e1e6 <HAL_SAI_Init+0x236>
 800e1e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1e6:	623b      	str	r3, [r7, #32]
 800e1e8:	e016      	b.n	800e218 <HAL_SAI_Init+0x268>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d110      	bne.n	800e214 <HAL_SAI_Init+0x264>
 800e1f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1f6:	e00e      	b.n	800e216 <HAL_SAI_Init+0x266>
 800e1f8:	40015404 	.word	0x40015404
 800e1fc:	40015424 	.word	0x40015424
 800e200:	40015400 	.word	0x40015400
 800e204:	40015800 	.word	0x40015800
 800e208:	40015804 	.word	0x40015804
 800e20c:	40015824 	.word	0x40015824
 800e210:	cccccccd 	.word	0xcccccccd
 800e214:	2300      	movs	r3, #0
 800e216:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6819      	ldr	r1, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	4b59      	ldr	r3, [pc, #356]	; (800e388 <HAL_SAI_Init+0x3d8>)
 800e224:	400b      	ands	r3, r1
 800e226:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6819      	ldr	r1, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e236:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e23c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e242:	431a      	orrs	r2, r3
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e250:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e25c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e262:	051b      	lsls	r3, r3, #20
 800e264:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e26a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	430a      	orrs	r2, r1
 800e278:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	6812      	ldr	r2, [r2, #0]
 800e284:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e288:	f023 030f 	bic.w	r3, r3, #15
 800e28c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	6859      	ldr	r1, [r3, #4]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	69da      	ldr	r2, [r3, #28]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29c:	431a      	orrs	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a2:	431a      	orrs	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	430a      	orrs	r2, r1
 800e2aa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6899      	ldr	r1, [r3, #8]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	4b35      	ldr	r3, [pc, #212]	; (800e38c <HAL_SAI_Init+0x3dc>)
 800e2b8:	400b      	ands	r3, r1
 800e2ba:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6899      	ldr	r1, [r3, #8]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2c6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e2cc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800e2d2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800e2d8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e2e2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	430a      	orrs	r2, r1
 800e2ea:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68d9      	ldr	r1, [r3, #12]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e2fa:	400b      	ands	r3, r1
 800e2fc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68d9      	ldr	r1, [r3, #12]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e30c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e312:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e314:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31a:	3b01      	subs	r3, #1
 800e31c:	021b      	lsls	r3, r3, #8
 800e31e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	430a      	orrs	r2, r1
 800e326:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a18      	ldr	r2, [pc, #96]	; (800e390 <HAL_SAI_Init+0x3e0>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d119      	bne.n	800e366 <HAL_SAI_Init+0x3b6>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e332:	4b18      	ldr	r3, [pc, #96]	; (800e394 <HAL_SAI_Init+0x3e4>)
 800e334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e336:	4a17      	ldr	r2, [pc, #92]	; (800e394 <HAL_SAI_Init+0x3e4>)
 800e338:	f023 0301 	bic.w	r3, r3, #1
 800e33c:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e344:	2b01      	cmp	r3, #1
 800e346:	d10e      	bne.n	800e366 <HAL_SAI_Init+0x3b6>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e350:	3b01      	subs	r3, #1
 800e352:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e354:	490f      	ldr	r1, [pc, #60]	; (800e394 <HAL_SAI_Init+0x3e4>)
 800e356:	4313      	orrs	r3, r2
 800e358:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e35a:	4b0e      	ldr	r3, [pc, #56]	; (800e394 <HAL_SAI_Init+0x3e4>)
 800e35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e35e:	4a0d      	ldr	r2, [pc, #52]	; (800e394 <HAL_SAI_Init+0x3e4>)
 800e360:	f043 0301 	orr.w	r3, r3, #1
 800e364:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2201      	movs	r2, #1
 800e372:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3728      	adds	r7, #40	; 0x28
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	f005c010 	.word	0xf005c010
 800e38c:	fff88000 	.word	0xfff88000
 800e390:	40015404 	.word	0x40015404
 800e394:	40015400 	.word	0x40015400

0800e398 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e3a0:	4b18      	ldr	r3, [pc, #96]	; (800e404 <SAI_Disable+0x6c>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a18      	ldr	r2, [pc, #96]	; (800e408 <SAI_Disable+0x70>)
 800e3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3aa:	0b1b      	lsrs	r3, r3, #12
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e3c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10a      	bne.n	800e3e0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e3d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	72fb      	strb	r3, [r7, #11]
      break;
 800e3de:	e009      	b.n	800e3f4 <SAI_Disable+0x5c>
    }
    count--;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d1e7      	bne.n	800e3c4 <SAI_Disable+0x2c>

  return status;
 800e3f4:	7afb      	ldrb	r3, [r7, #11]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	20000000 	.word	0x20000000
 800e408:	95cbec1b 	.word	0x95cbec1b

0800e40c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e0dd      	b.n	800e5da <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a70      	ldr	r2, [pc, #448]	; (800e5e4 <HAL_SPI_Init+0x1d8>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d004      	beq.n	800e432 <HAL_SPI_Init+0x26>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a6e      	ldr	r2, [pc, #440]	; (800e5e8 <HAL_SPI_Init+0x1dc>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	e000      	b.n	800e434 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800e432:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a69      	ldr	r2, [pc, #420]	; (800e5e4 <HAL_SPI_Init+0x1d8>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d004      	beq.n	800e44e <HAL_SPI_Init+0x42>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a67      	ldr	r2, [pc, #412]	; (800e5e8 <HAL_SPI_Init+0x1dc>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d105      	bne.n	800e45a <HAL_SPI_Init+0x4e>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	2b0f      	cmp	r3, #15
 800e454:	d901      	bls.n	800e45a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e0bf      	b.n	800e5da <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f001 fa02 	bl	800f864 <SPI_GetPacketSize>
 800e460:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a5f      	ldr	r2, [pc, #380]	; (800e5e4 <HAL_SPI_Init+0x1d8>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d004      	beq.n	800e476 <HAL_SPI_Init+0x6a>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a5d      	ldr	r2, [pc, #372]	; (800e5e8 <HAL_SPI_Init+0x1dc>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d102      	bne.n	800e47c <HAL_SPI_Init+0x70>
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2b08      	cmp	r3, #8
 800e47a:	d816      	bhi.n	800e4aa <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e480:	4a5a      	ldr	r2, [pc, #360]	; (800e5ec <HAL_SPI_Init+0x1e0>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d00e      	beq.n	800e4a4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a59      	ldr	r2, [pc, #356]	; (800e5f0 <HAL_SPI_Init+0x1e4>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d009      	beq.n	800e4a4 <HAL_SPI_Init+0x98>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a57      	ldr	r2, [pc, #348]	; (800e5f4 <HAL_SPI_Init+0x1e8>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d004      	beq.n	800e4a4 <HAL_SPI_Init+0x98>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a56      	ldr	r2, [pc, #344]	; (800e5f8 <HAL_SPI_Init+0x1ec>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d104      	bne.n	800e4ae <HAL_SPI_Init+0xa2>
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b10      	cmp	r3, #16
 800e4a8:	d901      	bls.n	800e4ae <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e095      	b.n	800e5da <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d106      	bne.n	800e4c8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7f4 fade 	bl	8002a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f022 0201 	bic.w	r2, r2, #1
 800e4de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e4ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e4f4:	d119      	bne.n	800e52a <HAL_SPI_Init+0x11e>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4fe:	d103      	bne.n	800e508 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e504:	2b00      	cmp	r3, #0
 800e506:	d008      	beq.n	800e51a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10c      	bne.n	800e52a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e518:	d107      	bne.n	800e52a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e528:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	69da      	ldr	r2, [r3, #28]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e532:	431a      	orrs	r2, r3
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	431a      	orrs	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53c:	ea42 0103 	orr.w	r1, r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	68da      	ldr	r2, [r3, #12]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	430a      	orrs	r2, r1
 800e54a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e554:	431a      	orrs	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e55a:	431a      	orrs	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	699b      	ldr	r3, [r3, #24]
 800e560:	431a      	orrs	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	431a      	orrs	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	431a      	orrs	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	431a      	orrs	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	431a      	orrs	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e57e:	431a      	orrs	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	431a      	orrs	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e58a:	431a      	orrs	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e590:	431a      	orrs	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e596:	ea42 0103 	orr.w	r1, r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	430a      	orrs	r2, r1
 800e5a4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00a      	beq.n	800e5c8 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	430a      	orrs	r2, r1
 800e5c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	46002000 	.word	0x46002000
 800e5e8:	56002000 	.word	0x56002000
 800e5ec:	40013000 	.word	0x40013000
 800e5f0:	50013000 	.word	0x50013000
 800e5f4:	40003800 	.word	0x40003800
 800e5f8:	50003800 	.word	0x50003800

0800e5fc <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e01b      	b.n	800e646 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2202      	movs	r2, #2
 800e612:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f022 0201 	bic.w	r2, r2, #1
 800e624:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f7f4 fb34 	bl	8002c94 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  return HAL_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
	...

0800e650 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08a      	sub	sp, #40	; 0x28
 800e654:	af02      	add	r7, sp, #8
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	603b      	str	r3, [r7, #0]
 800e65c:	4613      	mov	r3, r2
 800e65e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3320      	adds	r3, #32
 800e666:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e672:	2b01      	cmp	r3, #1
 800e674:	d101      	bne.n	800e67a <HAL_SPI_Transmit+0x2a>
 800e676:	2302      	movs	r3, #2
 800e678:	e1f7      	b.n	800ea6a <HAL_SPI_Transmit+0x41a>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e682:	f7f8 f9ff 	bl	8006a84 <HAL_GetTick>
 800e686:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	2b01      	cmp	r3, #1
 800e692:	d007      	beq.n	800e6a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e694:	2302      	movs	r3, #2
 800e696:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800e6a0:	7efb      	ldrb	r3, [r7, #27]
 800e6a2:	e1e2      	b.n	800ea6a <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <HAL_SPI_Transmit+0x60>
 800e6aa:	88fb      	ldrh	r3, [r7, #6]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d107      	bne.n	800e6c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800e6bc:	7efb      	ldrb	r3, [r7, #27]
 800e6be:	e1d4      	b.n	800ea6a <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2203      	movs	r2, #3
 800e6c4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	68ba      	ldr	r2, [r7, #8]
 800e6d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	88fa      	ldrh	r2, [r7, #6]
 800e6da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	88fa      	ldrh	r2, [r7, #6]
 800e6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2200      	movs	r2, #0
 800e700:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e710:	d107      	bne.n	800e722 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e720:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	0c1b      	lsrs	r3, r3, #16
 800e72a:	041b      	lsls	r3, r3, #16
 800e72c:	88f9      	ldrh	r1, [r7, #6]
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	6812      	ldr	r2, [r2, #0]
 800e732:	430b      	orrs	r3, r1
 800e734:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f042 0201 	orr.w	r2, r2, #1
 800e744:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	69db      	ldr	r3, [r3, #28]
 800e74c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10c      	bne.n	800e76e <HAL_SPI_Transmit+0x11e>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e75c:	d107      	bne.n	800e76e <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e76c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	2b0f      	cmp	r3, #15
 800e774:	d95b      	bls.n	800e82e <HAL_SPI_Transmit+0x1de>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a8f      	ldr	r2, [pc, #572]	; (800e9b8 <HAL_SPI_Transmit+0x368>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d04f      	beq.n	800e820 <HAL_SPI_Transmit+0x1d0>
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a8d      	ldr	r2, [pc, #564]	; (800e9bc <HAL_SPI_Transmit+0x36c>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d04a      	beq.n	800e820 <HAL_SPI_Transmit+0x1d0>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a8c      	ldr	r2, [pc, #560]	; (800e9c0 <HAL_SPI_Transmit+0x370>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d045      	beq.n	800e820 <HAL_SPI_Transmit+0x1d0>
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a8a      	ldr	r2, [pc, #552]	; (800e9c4 <HAL_SPI_Transmit+0x374>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d147      	bne.n	800e82e <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e79e:	e03f      	b.n	800e820 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	695b      	ldr	r3, [r3, #20]
 800e7a6:	f003 0302 	and.w	r3, r3, #2
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d114      	bne.n	800e7d8 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	6812      	ldr	r2, [r2, #0]
 800e7b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7be:	1d1a      	adds	r2, r3, #4
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7d6:	e023      	b.n	800e820 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7d8:	f7f8 f954 	bl	8006a84 <HAL_GetTick>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d803      	bhi.n	800e7f0 <HAL_SPI_Transmit+0x1a0>
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ee:	d102      	bne.n	800e7f6 <HAL_SPI_Transmit+0x1a6>
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d114      	bne.n	800e820 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f000 ff66 	bl	800f6c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e80a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2201      	movs	r2, #1
 800e818:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800e81c:	2303      	movs	r3, #3
 800e81e:	e124      	b.n	800ea6a <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e826:	b29b      	uxth	r3, r3
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1b9      	bne.n	800e7a0 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800e82c:	e0f7      	b.n	800ea1e <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	2b07      	cmp	r3, #7
 800e834:	f240 80ec 	bls.w	800ea10 <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e838:	e05d      	b.n	800e8f6 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	f003 0302 	and.w	r3, r3, #2
 800e844:	2b02      	cmp	r3, #2
 800e846:	d132      	bne.n	800e8ae <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e84e:	b29b      	uxth	r3, r3
 800e850:	2b01      	cmp	r3, #1
 800e852:	d918      	bls.n	800e886 <HAL_SPI_Transmit+0x236>
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d014      	beq.n	800e886 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6812      	ldr	r2, [r2, #0]
 800e866:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e86c:	1d1a      	adds	r2, r3, #4
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e878:	b29b      	uxth	r3, r3
 800e87a:	3b02      	subs	r3, #2
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e884:	e037      	b.n	800e8f6 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e88a:	881a      	ldrh	r2, [r3, #0]
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e894:	1c9a      	adds	r2, r3, #2
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8ac:	e023      	b.n	800e8f6 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8ae:	f7f8 f8e9 	bl	8006a84 <HAL_GetTick>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	683a      	ldr	r2, [r7, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d803      	bhi.n	800e8c6 <HAL_SPI_Transmit+0x276>
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c4:	d102      	bne.n	800e8cc <HAL_SPI_Transmit+0x27c>
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d114      	bne.n	800e8f6 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f000 fefb 	bl	800f6c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	e0b9      	b.n	800ea6a <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d19b      	bne.n	800e83a <HAL_SPI_Transmit+0x1ea>
 800e902:	e08c      	b.n	800ea1e <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	695b      	ldr	r3, [r3, #20]
 800e90a:	f003 0302 	and.w	r3, r3, #2
 800e90e:	2b02      	cmp	r3, #2
 800e910:	d15a      	bne.n	800e9c8 <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e918:	b29b      	uxth	r3, r3
 800e91a:	2b03      	cmp	r3, #3
 800e91c:	d918      	bls.n	800e950 <HAL_SPI_Transmit+0x300>
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e922:	2b40      	cmp	r3, #64	; 0x40
 800e924:	d914      	bls.n	800e950 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6812      	ldr	r2, [r2, #0]
 800e930:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e936:	1d1a      	adds	r2, r3, #4
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e942:	b29b      	uxth	r3, r3
 800e944:	3b04      	subs	r3, #4
 800e946:	b29a      	uxth	r2, r3
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e94e:	e05f      	b.n	800ea10 <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e956:	b29b      	uxth	r3, r3
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d917      	bls.n	800e98c <HAL_SPI_Transmit+0x33c>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d013      	beq.n	800e98c <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e968:	881a      	ldrh	r2, [r3, #0]
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e972:	1c9a      	adds	r2, r3, #2
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e97e:	b29b      	uxth	r3, r3
 800e980:	3b02      	subs	r3, #2
 800e982:	b29a      	uxth	r2, r3
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e98a:	e041      	b.n	800ea10 <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	3320      	adds	r3, #32
 800e996:	7812      	ldrb	r2, [r2, #0]
 800e998:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e99e:	1c5a      	adds	r2, r3, #1
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e9b6:	e02b      	b.n	800ea10 <HAL_SPI_Transmit+0x3c0>
 800e9b8:	40013000 	.word	0x40013000
 800e9bc:	50013000 	.word	0x50013000
 800e9c0:	40003800 	.word	0x40003800
 800e9c4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9c8:	f7f8 f85c 	bl	8006a84 <HAL_GetTick>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d803      	bhi.n	800e9e0 <HAL_SPI_Transmit+0x390>
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9de:	d102      	bne.n	800e9e6 <HAL_SPI_Transmit+0x396>
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d114      	bne.n	800ea10 <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f000 fe6e 	bl	800f6c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2201      	movs	r2, #1
 800ea08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800ea0c:	2303      	movs	r3, #3
 800ea0e:	e02c      	b.n	800ea6a <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f47f af73 	bne.w	800e904 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2200      	movs	r2, #0
 800ea26:	2108      	movs	r1, #8
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f000 feed 	bl	800f808 <SPI_WaitOnFlagUntilTimeout>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d007      	beq.n	800ea44 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea3a:	f043 0220 	orr.w	r2, r3, #32
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f000 fe3f 	bl	800f6c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2201      	movs	r2, #1
 800ea56:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 800ea64:	2301      	movs	r3, #1
 800ea66:	e000      	b.n	800ea6a <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 800ea68:	7efb      	ldrb	r3, [r7, #27]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3720      	adds	r7, #32
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop

0800ea74 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08a      	sub	sp, #40	; 0x28
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	603b      	str	r3, [r7, #0]
 800ea80:	4613      	mov	r3, r2
 800ea82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3330      	adds	r3, #48	; 0x30
 800ea8e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea98:	d112      	bne.n	800eac0 <HAL_SPI_Receive+0x4c>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10e      	bne.n	800eac0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800eaaa:	88fa      	ldrh	r2, [r7, #6]
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	4613      	mov	r3, r2
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	68b9      	ldr	r1, [r7, #8]
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f000 f99a 	bl	800edf0 <HAL_SPI_TransmitReceive>
 800eabc:	4603      	mov	r3, r0
 800eabe:	e18a      	b.n	800edd6 <HAL_SPI_Receive+0x362>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d101      	bne.n	800eace <HAL_SPI_Receive+0x5a>
 800eaca:	2302      	movs	r3, #2
 800eacc:	e183      	b.n	800edd6 <HAL_SPI_Receive+0x362>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ead6:	f7f7 ffd5 	bl	8006a84 <HAL_GetTick>
 800eada:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d007      	beq.n	800eaf8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800eae8:	2302      	movs	r3, #2
 800eaea:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800eaf4:	7ffb      	ldrb	r3, [r7, #31]
 800eaf6:	e16e      	b.n	800edd6 <HAL_SPI_Receive+0x362>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <HAL_SPI_Receive+0x90>
 800eafe:	88fb      	ldrh	r3, [r7, #6]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d107      	bne.n	800eb14 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800eb10:	7ffb      	ldrb	r3, [r7, #31]
 800eb12:	e160      	b.n	800edd6 <HAL_SPI_Receive+0x362>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2204      	movs	r2, #4
 800eb18:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	88fa      	ldrh	r2, [r7, #6]
 800eb2e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	88fa      	ldrh	r2, [r7, #6]
 800eb36:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eb64:	d107      	bne.n	800eb76 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb74:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	0c1b      	lsrs	r3, r3, #16
 800eb7e:	041b      	lsls	r3, r3, #16
 800eb80:	88f9      	ldrh	r1, [r7, #6]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	6812      	ldr	r2, [r2, #0]
 800eb86:	430b      	orrs	r3, r1
 800eb88:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f042 0201 	orr.w	r2, r2, #1
 800eb98:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	69db      	ldr	r3, [r3, #28]
 800eba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10c      	bne.n	800ebc2 <HAL_SPI_Receive+0x14e>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebb0:	d107      	bne.n	800ebc2 <HAL_SPI_Receive+0x14e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ebc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	2b0f      	cmp	r3, #15
 800ebc8:	d95c      	bls.n	800ec84 <HAL_SPI_Receive+0x210>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4a84      	ldr	r2, [pc, #528]	; (800ede0 <HAL_SPI_Receive+0x36c>)
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d050      	beq.n	800ec76 <HAL_SPI_Receive+0x202>
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a82      	ldr	r2, [pc, #520]	; (800ede4 <HAL_SPI_Receive+0x370>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d04b      	beq.n	800ec76 <HAL_SPI_Receive+0x202>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4a81      	ldr	r2, [pc, #516]	; (800ede8 <HAL_SPI_Receive+0x374>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d046      	beq.n	800ec76 <HAL_SPI_Receive+0x202>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a7f      	ldr	r2, [pc, #508]	; (800edec <HAL_SPI_Receive+0x378>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d148      	bne.n	800ec84 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ebf2:	e040      	b.n	800ec76 <HAL_SPI_Receive+0x202>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	695a      	ldr	r2, [r3, #20]
 800ebfa:	f248 0308 	movw	r3, #32776	; 0x8008
 800ebfe:	4013      	ands	r3, r2
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d014      	beq.n	800ec2e <HAL_SPI_Receive+0x1ba>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ec0e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec14:	1d1a      	adds	r2, r3, #4
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	3b01      	subs	r3, #1
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800ec2c:	e023      	b.n	800ec76 <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec2e:	f7f7 ff29 	bl	8006a84 <HAL_GetTick>
 800ec32:	4602      	mov	r2, r0
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d803      	bhi.n	800ec46 <HAL_SPI_Receive+0x1d2>
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec44:	d102      	bne.n	800ec4c <HAL_SPI_Receive+0x1d8>
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d114      	bne.n	800ec76 <HAL_SPI_Receive+0x202>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f000 fd3b 	bl	800f6c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e0af      	b.n	800edd6 <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1b8      	bne.n	800ebf4 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ec82:	e095      	b.n	800edb0 <HAL_SPI_Receive+0x33c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	2b07      	cmp	r3, #7
 800ec8a:	f240 808b 	bls.w	800eda4 <HAL_SPI_Receive+0x330>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ec8e:	e03f      	b.n	800ed10 <HAL_SPI_Receive+0x29c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	695b      	ldr	r3, [r3, #20]
 800ec96:	f003 0301 	and.w	r3, r3, #1
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d114      	bne.n	800ecc8 <HAL_SPI_Receive+0x254>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca2:	69ba      	ldr	r2, [r7, #24]
 800eca4:	8812      	ldrh	r2, [r2, #0]
 800eca6:	b292      	uxth	r2, r2
 800eca8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecae:	1c9a      	adds	r2, r3, #2
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800ecc6:	e023      	b.n	800ed10 <HAL_SPI_Receive+0x29c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecc8:	f7f7 fedc 	bl	8006a84 <HAL_GetTick>
 800eccc:	4602      	mov	r2, r0
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	683a      	ldr	r2, [r7, #0]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d803      	bhi.n	800ece0 <HAL_SPI_Receive+0x26c>
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecde:	d102      	bne.n	800ece6 <HAL_SPI_Receive+0x272>
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d114      	bne.n	800ed10 <HAL_SPI_Receive+0x29c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f000 fcee 	bl	800f6c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	e062      	b.n	800edd6 <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1b9      	bne.n	800ec90 <HAL_SPI_Receive+0x21c>
 800ed1c:	e048      	b.n	800edb0 <HAL_SPI_Receive+0x33c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	695b      	ldr	r3, [r3, #20]
 800ed24:	f003 0301 	and.w	r3, r3, #1
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d117      	bne.n	800ed5c <HAL_SPI_Receive+0x2e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed38:	7812      	ldrb	r2, [r2, #0]
 800ed3a:	b2d2      	uxtb	r2, r2
 800ed3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed42:	1c5a      	adds	r2, r3, #1
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	3b01      	subs	r3, #1
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800ed5a:	e023      	b.n	800eda4 <HAL_SPI_Receive+0x330>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed5c:	f7f7 fe92 	bl	8006a84 <HAL_GetTick>
 800ed60:	4602      	mov	r2, r0
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	683a      	ldr	r2, [r7, #0]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d803      	bhi.n	800ed74 <HAL_SPI_Receive+0x300>
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed72:	d102      	bne.n	800ed7a <HAL_SPI_Receive+0x306>
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d114      	bne.n	800eda4 <HAL_SPI_Receive+0x330>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f000 fca4 	bl	800f6c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800eda0:	2303      	movs	r3, #3
 800eda2:	e018      	b.n	800edd6 <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800edaa:	b29b      	uxth	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1b6      	bne.n	800ed1e <HAL_SPI_Receive+0x2aa>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f000 fc89 	bl	800f6c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <HAL_SPI_Receive+0x360>
  {
    return HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e000      	b.n	800edd6 <HAL_SPI_Receive+0x362>
  }
  return errorcode;
 800edd4:	7ffb      	ldrb	r3, [r7, #31]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3720      	adds	r7, #32
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	40013000 	.word	0x40013000
 800ede4:	50013000 	.word	0x50013000
 800ede8:	40003800 	.word	0x40003800
 800edec:	50003800 	.word	0x50003800

0800edf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08e      	sub	sp, #56	; 0x38
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800edfe:	2300      	movs	r3, #0
 800ee00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	3320      	adds	r3, #32
 800ee0a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	3330      	adds	r3, #48	; 0x30
 800ee12:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d101      	bne.n	800ee22 <HAL_SPI_TransmitReceive+0x32>
 800ee1e:	2302      	movs	r3, #2
 800ee20:	e22b      	b.n	800f27a <HAL_SPI_TransmitReceive+0x48a>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2201      	movs	r2, #1
 800ee26:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee2a:	f7f7 fe2b 	bl	8006a84 <HAL_GetTick>
 800ee2e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ee30:	887b      	ldrh	r3, [r7, #2]
 800ee32:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ee34:	887b      	ldrh	r3, [r7, #2]
 800ee36:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ee3e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ee46:	7efb      	ldrb	r3, [r7, #27]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d014      	beq.n	800ee76 <HAL_SPI_TransmitReceive+0x86>
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee52:	d106      	bne.n	800ee62 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d102      	bne.n	800ee62 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ee5c:	7efb      	ldrb	r3, [r7, #27]
 800ee5e:	2b04      	cmp	r3, #4
 800ee60:	d009      	beq.n	800ee76 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800ee62:	2302      	movs	r3, #2
 800ee64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800ee70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee74:	e201      	b.n	800f27a <HAL_SPI_TransmitReceive+0x48a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d005      	beq.n	800ee88 <HAL_SPI_TransmitReceive+0x98>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d002      	beq.n	800ee88 <HAL_SPI_TransmitReceive+0x98>
 800ee82:	887b      	ldrh	r3, [r7, #2]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d109      	bne.n	800ee9c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800ee96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee9a:	e1ee      	b.n	800f27a <HAL_SPI_TransmitReceive+0x48a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	2b04      	cmp	r3, #4
 800eea6:	d003      	beq.n	800eeb0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2205      	movs	r2, #5
 800eeac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	887a      	ldrh	r2, [r7, #2]
 800eec2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	887a      	ldrh	r2, [r7, #2]
 800eeca:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	887a      	ldrh	r2, [r7, #2]
 800eed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	887a      	ldrh	r2, [r7, #2]
 800eee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2200      	movs	r2, #0
 800eeee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	0c1b      	lsrs	r3, r3, #16
 800eef8:	041b      	lsls	r3, r3, #16
 800eefa:	8879      	ldrh	r1, [r7, #2]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	6812      	ldr	r2, [r2, #0]
 800ef00:	430b      	orrs	r3, r1
 800ef02:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f042 0201 	orr.w	r2, r2, #1
 800ef12:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	69db      	ldr	r3, [r3, #28]
 800ef1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d10c      	bne.n	800ef3c <HAL_SPI_TransmitReceive+0x14c>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef2a:	d107      	bne.n	800ef3c <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	2b0f      	cmp	r3, #15
 800ef42:	f240 8085 	bls.w	800f050 <HAL_SPI_TransmitReceive+0x260>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a7b      	ldr	r2, [pc, #492]	; (800f138 <HAL_SPI_TransmitReceive+0x348>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d078      	beq.n	800f042 <HAL_SPI_TransmitReceive+0x252>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a79      	ldr	r2, [pc, #484]	; (800f13c <HAL_SPI_TransmitReceive+0x34c>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d073      	beq.n	800f042 <HAL_SPI_TransmitReceive+0x252>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a78      	ldr	r2, [pc, #480]	; (800f140 <HAL_SPI_TransmitReceive+0x350>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d06e      	beq.n	800f042 <HAL_SPI_TransmitReceive+0x252>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a76      	ldr	r2, [pc, #472]	; (800f144 <HAL_SPI_TransmitReceive+0x354>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d170      	bne.n	800f050 <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ef6e:	e068      	b.n	800f042 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	695b      	ldr	r3, [r3, #20]
 800ef76:	f003 0302 	and.w	r3, r3, #2
 800ef7a:	2b02      	cmp	r3, #2
 800ef7c:	d11a      	bne.n	800efb4 <HAL_SPI_TransmitReceive+0x1c4>
 800ef7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d017      	beq.n	800efb4 <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6812      	ldr	r2, [r2, #0]
 800ef8e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef94:	1d1a      	adds	r2, r3, #4
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	3b01      	subs	r3, #1
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	695a      	ldr	r2, [r3, #20]
 800efba:	f248 0308 	movw	r3, #32776	; 0x8008
 800efbe:	4013      	ands	r3, r2
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d01a      	beq.n	800effa <HAL_SPI_TransmitReceive+0x20a>
 800efc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d017      	beq.n	800effa <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800efd4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efda:	1d1a      	adds	r2, r3, #4
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	3b01      	subs	r3, #1
 800efea:	b29a      	uxth	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800eff8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800effa:	f7f7 fd43 	bl	8006a84 <HAL_GetTick>
 800effe:	4602      	mov	r2, r0
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f006:	429a      	cmp	r2, r3
 800f008:	d803      	bhi.n	800f012 <HAL_SPI_TransmitReceive+0x222>
 800f00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f010:	d102      	bne.n	800f018 <HAL_SPI_TransmitReceive+0x228>
 800f012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f014:	2b00      	cmp	r3, #0
 800f016:	d114      	bne.n	800f042 <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f000 fb55 	bl	800f6c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f02c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2201      	movs	r2, #1
 800f03a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800f03e:	2303      	movs	r3, #3
 800f040:	e11b      	b.n	800f27a <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f042:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f044:	2b00      	cmp	r3, #0
 800f046:	d193      	bne.n	800ef70 <HAL_SPI_TransmitReceive+0x180>
 800f048:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d190      	bne.n	800ef70 <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800f04e:	e0ed      	b.n	800f22c <HAL_SPI_TransmitReceive+0x43c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	2b07      	cmp	r3, #7
 800f056:	f240 80e3 	bls.w	800f220 <HAL_SPI_TransmitReceive+0x430>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f05a:	e066      	b.n	800f12a <HAL_SPI_TransmitReceive+0x33a>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	695b      	ldr	r3, [r3, #20]
 800f062:	f003 0302 	and.w	r3, r3, #2
 800f066:	2b02      	cmp	r3, #2
 800f068:	d119      	bne.n	800f09e <HAL_SPI_TransmitReceive+0x2ae>
 800f06a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d016      	beq.n	800f09e <HAL_SPI_TransmitReceive+0x2ae>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f074:	881a      	ldrh	r2, [r3, #0]
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f07e:	1c9a      	adds	r2, r3, #2
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	3b01      	subs	r3, #1
 800f08e:	b29a      	uxth	r2, r3
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f09c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	695b      	ldr	r3, [r3, #20]
 800f0a4:	f003 0301 	and.w	r3, r3, #1
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d11a      	bne.n	800f0e2 <HAL_SPI_TransmitReceive+0x2f2>
 800f0ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d017      	beq.n	800f0e2 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0b6:	6a3a      	ldr	r2, [r7, #32]
 800f0b8:	8812      	ldrh	r2, [r2, #0]
 800f0ba:	b292      	uxth	r2, r2
 800f0bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c2:	1c9a      	adds	r2, r3, #2
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	3b01      	subs	r3, #1
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800f0e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0e2:	f7f7 fccf 	bl	8006a84 <HAL_GetTick>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d803      	bhi.n	800f0fa <HAL_SPI_TransmitReceive+0x30a>
 800f0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f8:	d102      	bne.n	800f100 <HAL_SPI_TransmitReceive+0x310>
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d114      	bne.n	800f12a <HAL_SPI_TransmitReceive+0x33a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	f000 fae1 	bl	800f6c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2200      	movs	r2, #0
 800f10a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2201      	movs	r2, #1
 800f122:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800f126:	2303      	movs	r3, #3
 800f128:	e0a7      	b.n	800f27a <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f12a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d195      	bne.n	800f05c <HAL_SPI_TransmitReceive+0x26c>
 800f130:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f132:	2b00      	cmp	r3, #0
 800f134:	d192      	bne.n	800f05c <HAL_SPI_TransmitReceive+0x26c>
 800f136:	e079      	b.n	800f22c <HAL_SPI_TransmitReceive+0x43c>
 800f138:	40013000 	.word	0x40013000
 800f13c:	50013000 	.word	0x50013000
 800f140:	40003800 	.word	0x40003800
 800f144:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	695b      	ldr	r3, [r3, #20]
 800f14e:	f003 0302 	and.w	r3, r3, #2
 800f152:	2b02      	cmp	r3, #2
 800f154:	d11b      	bne.n	800f18e <HAL_SPI_TransmitReceive+0x39e>
 800f156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d018      	beq.n	800f18e <HAL_SPI_TransmitReceive+0x39e>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	3320      	adds	r3, #32
 800f166:	7812      	ldrb	r2, [r2, #0]
 800f168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f16e:	1c5a      	adds	r2, r3, #1
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	3b01      	subs	r3, #1
 800f17e:	b29a      	uxth	r2, r3
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f18c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d11d      	bne.n	800f1d8 <HAL_SPI_TransmitReceive+0x3e8>
 800f19c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d01a      	beq.n	800f1d8 <HAL_SPI_TransmitReceive+0x3e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ae:	7812      	ldrb	r2, [r2, #0]
 800f1b0:	b2d2      	uxtb	r2, r2
 800f1b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1b8:	1c5a      	adds	r2, r3, #1
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800f1d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1d8:	f7f7 fc54 	bl	8006a84 <HAL_GetTick>
 800f1dc:	4602      	mov	r2, r0
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d803      	bhi.n	800f1f0 <HAL_SPI_TransmitReceive+0x400>
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ee:	d102      	bne.n	800f1f6 <HAL_SPI_TransmitReceive+0x406>
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d114      	bne.n	800f220 <HAL_SPI_TransmitReceive+0x430>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f000 fa66 	bl	800f6c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2200      	movs	r2, #0
 800f200:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f20a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2201      	movs	r2, #1
 800f218:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800f21c:	2303      	movs	r3, #3
 800f21e:	e02c      	b.n	800f27a <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f220:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f222:	2b00      	cmp	r3, #0
 800f224:	d190      	bne.n	800f148 <HAL_SPI_TransmitReceive+0x358>
 800f226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d18d      	bne.n	800f148 <HAL_SPI_TransmitReceive+0x358>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	2200      	movs	r2, #0
 800f234:	2108      	movs	r1, #8
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f000 fae6 	bl	800f808 <SPI_WaitOnFlagUntilTimeout>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d007      	beq.n	800f252 <HAL_SPI_TransmitReceive+0x462>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f248:	f043 0220 	orr.w	r2, r3, #32
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f000 fa38 	bl	800f6c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2201      	movs	r2, #1
 800f264:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d001      	beq.n	800f276 <HAL_SPI_TransmitReceive+0x486>
  {
    return HAL_ERROR;
 800f272:	2301      	movs	r3, #1
 800f274:	e001      	b.n	800f27a <HAL_SPI_TransmitReceive+0x48a>
  }
  return errorcode;
 800f276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3730      	adds	r7, #48	; 0x30
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop

0800f284 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08a      	sub	sp, #40	; 0x28
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	691b      	ldr	r3, [r3, #16]
 800f292:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800f29c:	6a3a      	ldr	r2, [r7, #32]
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f2b6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	3330      	adds	r3, #48	; 0x30
 800f2be:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d113      	bne.n	800f2f2 <HAL_SPI_IRQHandler+0x6e>
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	f003 0320 	and.w	r3, r3, #32
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10e      	bne.n	800f2f2 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d009      	beq.n	800f2f2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	4798      	blx	r3
    handled = 1UL;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10f      	bne.n	800f31c <HAL_SPI_IRQHandler+0x98>
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	d00a      	beq.n	800f31c <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d105      	bne.n	800f31c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	4798      	blx	r3
    handled = 1UL;
 800f318:	2301      	movs	r3, #1
 800f31a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	f003 0320 	and.w	r3, r3, #32
 800f322:	2b00      	cmp	r3, #0
 800f324:	d10f      	bne.n	800f346 <HAL_SPI_IRQHandler+0xc2>
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	f003 0302 	and.w	r3, r3, #2
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00a      	beq.n	800f346 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f336:	2b00      	cmp	r3, #0
 800f338:	d105      	bne.n	800f346 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	4798      	blx	r3
    handled = 1UL;
 800f342:	2301      	movs	r3, #1
 800f344:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 800f346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f040 8162 	bne.w	800f612 <HAL_SPI_IRQHandler+0x38e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	f003 0308 	and.w	r3, r3, #8
 800f354:	2b00      	cmp	r3, #0
 800f356:	f000 808b 	beq.w	800f470 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	699a      	ldr	r2, [r3, #24]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f042 0208 	orr.w	r2, r2, #8
 800f368:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	699a      	ldr	r2, [r3, #24]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f042 0210 	orr.w	r2, r2, #16
 800f378:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	699a      	ldr	r2, [r3, #24]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f388:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	691a      	ldr	r2, [r3, #16]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f022 0208 	bic.w	r2, r2, #8
 800f398:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d13d      	bne.n	800f424 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800f3a8:	e036      	b.n	800f418 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	2b0f      	cmp	r3, #15
 800f3b0:	d90b      	bls.n	800f3ca <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f3bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c2:	1d1a      	adds	r2, r3, #4
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3c8:	e01d      	b.n	800f406 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	2b07      	cmp	r3, #7
 800f3d0:	d90b      	bls.n	800f3ea <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	8812      	ldrh	r2, [r2, #0]
 800f3da:	b292      	uxth	r2, r2
 800f3dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e2:	1c9a      	adds	r2, r3, #2
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3e8:	e00d      	b.n	800f406 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f6:	7812      	ldrb	r2, [r2, #0]
 800f3f8:	b2d2      	uxtb	r2, r2
 800f3fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	3b01      	subs	r3, #1
 800f410:	b29a      	uxth	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800f41e:	b29b      	uxth	r3, r3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d1c2      	bne.n	800f3aa <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f94f 	bl	800f6c8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2201      	movs	r2, #1
 800f42e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d003      	beq.n	800f444 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f911 	bl	800f664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f442:	e0eb      	b.n	800f61c <HAL_SPI_IRQHandler+0x398>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800f444:	7cfb      	ldrb	r3, [r7, #19]
 800f446:	2b05      	cmp	r3, #5
 800f448:	d103      	bne.n	800f452 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f900 	bl	800f650 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800f450:	e0e1      	b.n	800f616 <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800f452:	7cfb      	ldrb	r3, [r7, #19]
 800f454:	2b04      	cmp	r3, #4
 800f456:	d103      	bne.n	800f460 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 f8ef 	bl	800f63c <HAL_SPI_RxCpltCallback>
    return;
 800f45e:	e0da      	b.n	800f616 <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800f460:	7cfb      	ldrb	r3, [r7, #19]
 800f462:	2b03      	cmp	r3, #3
 800f464:	f040 80d7 	bne.w	800f616 <HAL_SPI_IRQHandler+0x392>
      HAL_SPI_TxCpltCallback(hspi);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 f8dd 	bl	800f628 <HAL_SPI_TxCpltCallback>
    return;
 800f46e:	e0d2      	b.n	800f616 <HAL_SPI_IRQHandler+0x392>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00d      	beq.n	800f496 <HAL_SPI_IRQHandler+0x212>
 800f47a:	6a3b      	ldr	r3, [r7, #32]
 800f47c:	f003 0308 	and.w	r3, r3, #8
 800f480:	2b00      	cmp	r3, #0
 800f482:	d008      	beq.n	800f496 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	699a      	ldr	r2, [r3, #24]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f492:	619a      	str	r2, [r3, #24]

    return;
 800f494:	e0c2      	b.n	800f61c <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f000 80bd 	beq.w	800f61c <HAL_SPI_IRQHandler+0x398>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00f      	beq.n	800f4cc <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4b2:	f043 0204 	orr.w	r2, r3, #4
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	699a      	ldr	r2, [r3, #24]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f4ca:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00f      	beq.n	800f4f6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4dc:	f043 0201 	orr.w	r2, r3, #1
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	699a      	ldr	r2, [r3, #24]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00f      	beq.n	800f520 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f506:	f043 0208 	orr.w	r2, r3, #8
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	699a      	ldr	r2, [r3, #24]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f51e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	f003 0320 	and.w	r3, r3, #32
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00f      	beq.n	800f54a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f530:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	699a      	ldr	r2, [r3, #24]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f042 0220 	orr.w	r2, r2, #32
 800f548:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f550:	2b00      	cmp	r3, #0
 800f552:	d062      	beq.n	800f61a <HAL_SPI_IRQHandler+0x396>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f022 0201 	bic.w	r2, r2, #1
 800f562:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	6812      	ldr	r2, [r2, #0]
 800f56e:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 800f572:	f023 0303 	bic.w	r3, r3, #3
 800f576:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f57e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f582:	d13e      	bne.n	800f602 <HAL_SPI_IRQHandler+0x37e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	689a      	ldr	r2, [r3, #8]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f592:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d015      	beq.n	800f5ca <HAL_SPI_IRQHandler+0x346>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5a4:	4a1f      	ldr	r2, [pc, #124]	; (800f624 <HAL_SPI_IRQHandler+0x3a0>)
 800f5a6:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7f8 fa62 	bl	8007a78 <HAL_DMA_Abort_IT>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d007      	beq.n	800f5ca <HAL_SPI_IRQHandler+0x346>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d022      	beq.n	800f61a <HAL_SPI_IRQHandler+0x396>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5da:	4a12      	ldr	r2, [pc, #72]	; (800f624 <HAL_SPI_IRQHandler+0x3a0>)
 800f5dc:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7f8 fa47 	bl	8007a78 <HAL_DMA_Abort_IT>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d014      	beq.n	800f61a <HAL_SPI_IRQHandler+0x396>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f600:	e00b      	b.n	800f61a <HAL_SPI_IRQHandler+0x396>
        hspi->State = HAL_SPI_STATE_READY;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2201      	movs	r2, #1
 800f606:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f000 f82a 	bl	800f664 <HAL_SPI_ErrorCallback>
    return;
 800f610:	e003      	b.n	800f61a <HAL_SPI_IRQHandler+0x396>
    return;
 800f612:	bf00      	nop
 800f614:	e002      	b.n	800f61c <HAL_SPI_IRQHandler+0x398>
    return;
 800f616:	bf00      	nop
 800f618:	e000      	b.n	800f61c <HAL_SPI_IRQHandler+0x398>
    return;
 800f61a:	bf00      	nop
  }
}
 800f61c:	3728      	adds	r7, #40	; 0x28
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	0800f695 	.word	0x0800f695

0800f628 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800f630:	bf00      	nop
 800f632:	370c      	adds	r7, #12
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr

0800f63c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f644:	bf00      	nop
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f686:	b2db      	uxtb	r3, r3
}
 800f688:	4618      	mov	r0, r3
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f7ff ffd2 	bl	800f664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f6c0:	bf00      	nop
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	695b      	ldr	r3, [r3, #20]
 800f6d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	699a      	ldr	r2, [r3, #24]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f042 0208 	orr.w	r2, r2, #8
 800f6e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	699a      	ldr	r2, [r3, #24]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f042 0210 	orr.w	r2, r2, #16
 800f6f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f022 0201 	bic.w	r2, r2, #1
 800f706:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	691b      	ldr	r3, [r3, #16]
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	6812      	ldr	r2, [r2, #0]
 800f712:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800f716:	f023 0303 	bic.w	r3, r3, #3
 800f71a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	689a      	ldr	r2, [r3, #8]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f72a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f732:	b2db      	uxtb	r3, r3
 800f734:	2b04      	cmp	r3, #4
 800f736:	d014      	beq.n	800f762 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f003 0320 	and.w	r3, r3, #32
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00f      	beq.n	800f762 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	699a      	ldr	r2, [r3, #24]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f042 0220 	orr.w	r2, r2, #32
 800f760:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	2b03      	cmp	r3, #3
 800f76c:	d014      	beq.n	800f798 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00f      	beq.n	800f798 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f77e:	f043 0204 	orr.w	r2, r3, #4
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	699a      	ldr	r2, [r3, #24]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f796:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00f      	beq.n	800f7c2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7a8:	f043 0201 	orr.w	r2, r3, #1
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	699a      	ldr	r2, [r3, #24]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00f      	beq.n	800f7ec <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7d2:	f043 0208 	orr.w	r2, r3, #8
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	699a      	ldr	r2, [r3, #24]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f7ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800f7fc:	bf00      	nop
 800f7fe:	3714      	adds	r7, #20
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	603b      	str	r3, [r7, #0]
 800f814:	4613      	mov	r3, r2
 800f816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f818:	e010      	b.n	800f83c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f81a:	f7f7 f933 	bl	8006a84 <HAL_GetTick>
 800f81e:	4602      	mov	r2, r0
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	1ad3      	subs	r3, r2, r3
 800f824:	69ba      	ldr	r2, [r7, #24]
 800f826:	429a      	cmp	r2, r3
 800f828:	d803      	bhi.n	800f832 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f830:	d102      	bne.n	800f838 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d101      	bne.n	800f83c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f838:	2303      	movs	r3, #3
 800f83a:	e00f      	b.n	800f85c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	695a      	ldr	r2, [r3, #20]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	4013      	ands	r3, r2
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	429a      	cmp	r2, r3
 800f84a:	bf0c      	ite	eq
 800f84c:	2301      	moveq	r3, #1
 800f84e:	2300      	movne	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	461a      	mov	r2, r3
 800f854:	79fb      	ldrb	r3, [r7, #7]
 800f856:	429a      	cmp	r2, r3
 800f858:	d0df      	beq.n	800f81a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f870:	095b      	lsrs	r3, r3, #5
 800f872:	3301      	adds	r3, #1
 800f874:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	3301      	adds	r3, #1
 800f87c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	3307      	adds	r3, #7
 800f882:	08db      	lsrs	r3, r3, #3
 800f884:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3714      	adds	r7, #20
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 800f89a:	b480      	push	{r7}
 800f89c:	b083      	sub	sp, #12
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d12e      	bne.n	800f90e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d101      	bne.n	800f8be <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800f8ba:	2302      	movs	r3, #2
 800f8bc:	e028      	b.n	800f910 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2202      	movs	r2, #2
 800f8ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f022 0201 	bic.w	r2, r2, #1
 800f8dc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800f8ea:	ea42 0103 	orr.w	r1, r2, r3
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	689a      	ldr	r2, [r3, #8]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	430a      	orrs	r2, r1
 800f8f8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f90a:	2300      	movs	r3, #0
 800f90c:	e000      	b.n	800f910 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
  }
}
 800f910:	4618      	mov	r0, r3
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d101      	bne.n	800f92e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f92a:	2301      	movs	r3, #1
 800f92c:	e049      	b.n	800f9c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f7f3 f9e8 	bl	8002d18 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2202      	movs	r2, #2
 800f94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	3304      	adds	r3, #4
 800f958:	4619      	mov	r1, r3
 800f95a:	4610      	mov	r0, r2
 800f95c:	f000 f8d2 	bl	800fb04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2201      	movs	r2, #1
 800f964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2201      	movs	r2, #1
 800f96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2201      	movs	r2, #1
 800f98c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2201      	movs	r2, #1
 800f994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2201      	movs	r2, #1
 800f99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f9c0:	2300      	movs	r3, #0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b086      	sub	sp, #24
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	60f8      	str	r0, [r7, #12]
 800f9d2:	60b9      	str	r1, [r7, #8]
 800f9d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d101      	bne.n	800f9e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	e088      	b.n	800fafa <HAL_TIM_IC_ConfigChannel+0x130>
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d11b      	bne.n	800fa2e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6818      	ldr	r0, [r3, #0]
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	6819      	ldr	r1, [r3, #0]
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	f000 f977 	bl	800fcf8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	699a      	ldr	r2, [r3, #24]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f022 020c 	bic.w	r2, r2, #12
 800fa18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6999      	ldr	r1, [r3, #24]
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	689a      	ldr	r2, [r3, #8]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	430a      	orrs	r2, r1
 800fa2a:	619a      	str	r2, [r3, #24]
 800fa2c:	e060      	b.n	800faf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2b04      	cmp	r3, #4
 800fa32:	d11c      	bne.n	800fa6e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6818      	ldr	r0, [r3, #0]
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	6819      	ldr	r1, [r3, #0]
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	685a      	ldr	r2, [r3, #4]
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	f000 f9ee 	bl	800fe24 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	699a      	ldr	r2, [r3, #24]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fa56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6999      	ldr	r1, [r3, #24]
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	021a      	lsls	r2, r3, #8
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	430a      	orrs	r2, r1
 800fa6a:	619a      	str	r2, [r3, #24]
 800fa6c:	e040      	b.n	800faf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b08      	cmp	r3, #8
 800fa72:	d11b      	bne.n	800faac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6818      	ldr	r0, [r3, #0]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	6819      	ldr	r1, [r3, #0]
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	685a      	ldr	r2, [r3, #4]
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	f000 fa0b 	bl	800fe9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	69da      	ldr	r2, [r3, #28]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f022 020c 	bic.w	r2, r2, #12
 800fa96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	69d9      	ldr	r1, [r3, #28]
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	689a      	ldr	r2, [r3, #8]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	430a      	orrs	r2, r1
 800faa8:	61da      	str	r2, [r3, #28]
 800faaa:	e021      	b.n	800faf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b0c      	cmp	r3, #12
 800fab0:	d11c      	bne.n	800faec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6818      	ldr	r0, [r3, #0]
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	6819      	ldr	r1, [r3, #0]
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	685a      	ldr	r2, [r3, #4]
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	f000 fa28 	bl	800ff16 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	69da      	ldr	r2, [r3, #28]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fad4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	69d9      	ldr	r1, [r3, #28]
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	021a      	lsls	r2, r3, #8
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	430a      	orrs	r2, r1
 800fae8:	61da      	str	r2, [r3, #28]
 800faea:	e001      	b.n	800faf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800faec:	2301      	movs	r3, #1
 800faee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800faf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3718      	adds	r7, #24
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
	...

0800fb04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4a68      	ldr	r2, [pc, #416]	; (800fcb8 <TIM_Base_SetConfig+0x1b4>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d02b      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4a67      	ldr	r2, [pc, #412]	; (800fcbc <TIM_Base_SetConfig+0x1b8>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d027      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb2a:	d023      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fb32:	d01f      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a62      	ldr	r2, [pc, #392]	; (800fcc0 <TIM_Base_SetConfig+0x1bc>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d01b      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a61      	ldr	r2, [pc, #388]	; (800fcc4 <TIM_Base_SetConfig+0x1c0>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d017      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a60      	ldr	r2, [pc, #384]	; (800fcc8 <TIM_Base_SetConfig+0x1c4>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d013      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a5f      	ldr	r2, [pc, #380]	; (800fccc <TIM_Base_SetConfig+0x1c8>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d00f      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a5e      	ldr	r2, [pc, #376]	; (800fcd0 <TIM_Base_SetConfig+0x1cc>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d00b      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a5d      	ldr	r2, [pc, #372]	; (800fcd4 <TIM_Base_SetConfig+0x1d0>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d007      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4a5c      	ldr	r2, [pc, #368]	; (800fcd8 <TIM_Base_SetConfig+0x1d4>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d003      	beq.n	800fb74 <TIM_Base_SetConfig+0x70>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4a5b      	ldr	r2, [pc, #364]	; (800fcdc <TIM_Base_SetConfig+0x1d8>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d108      	bne.n	800fb86 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4a4b      	ldr	r2, [pc, #300]	; (800fcb8 <TIM_Base_SetConfig+0x1b4>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d043      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4a4a      	ldr	r2, [pc, #296]	; (800fcbc <TIM_Base_SetConfig+0x1b8>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d03f      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb9c:	d03b      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fba4:	d037      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4a45      	ldr	r2, [pc, #276]	; (800fcc0 <TIM_Base_SetConfig+0x1bc>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d033      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4a44      	ldr	r2, [pc, #272]	; (800fcc4 <TIM_Base_SetConfig+0x1c0>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d02f      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4a43      	ldr	r2, [pc, #268]	; (800fcc8 <TIM_Base_SetConfig+0x1c4>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d02b      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4a42      	ldr	r2, [pc, #264]	; (800fccc <TIM_Base_SetConfig+0x1c8>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d027      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a41      	ldr	r2, [pc, #260]	; (800fcd0 <TIM_Base_SetConfig+0x1cc>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d023      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a40      	ldr	r2, [pc, #256]	; (800fcd4 <TIM_Base_SetConfig+0x1d0>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d01f      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4a3f      	ldr	r2, [pc, #252]	; (800fcd8 <TIM_Base_SetConfig+0x1d4>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d01b      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4a3e      	ldr	r2, [pc, #248]	; (800fcdc <TIM_Base_SetConfig+0x1d8>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d017      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4a3d      	ldr	r2, [pc, #244]	; (800fce0 <TIM_Base_SetConfig+0x1dc>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d013      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4a3c      	ldr	r2, [pc, #240]	; (800fce4 <TIM_Base_SetConfig+0x1e0>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d00f      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4a3b      	ldr	r2, [pc, #236]	; (800fce8 <TIM_Base_SetConfig+0x1e4>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d00b      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4a3a      	ldr	r2, [pc, #232]	; (800fcec <TIM_Base_SetConfig+0x1e8>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d007      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4a39      	ldr	r2, [pc, #228]	; (800fcf0 <TIM_Base_SetConfig+0x1ec>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d003      	beq.n	800fc16 <TIM_Base_SetConfig+0x112>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a38      	ldr	r2, [pc, #224]	; (800fcf4 <TIM_Base_SetConfig+0x1f0>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d108      	bne.n	800fc28 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	4313      	orrs	r3, r2
 800fc26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	695b      	ldr	r3, [r3, #20]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	68fa      	ldr	r2, [r7, #12]
 800fc3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	689a      	ldr	r2, [r3, #8]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	4a1a      	ldr	r2, [pc, #104]	; (800fcb8 <TIM_Base_SetConfig+0x1b4>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d023      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4a19      	ldr	r2, [pc, #100]	; (800fcbc <TIM_Base_SetConfig+0x1b8>)
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d01f      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	4a1e      	ldr	r2, [pc, #120]	; (800fcd8 <TIM_Base_SetConfig+0x1d4>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d01b      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4a1d      	ldr	r2, [pc, #116]	; (800fcdc <TIM_Base_SetConfig+0x1d8>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d017      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	4a1c      	ldr	r2, [pc, #112]	; (800fce0 <TIM_Base_SetConfig+0x1dc>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d013      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	4a1b      	ldr	r2, [pc, #108]	; (800fce4 <TIM_Base_SetConfig+0x1e0>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d00f      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	4a1a      	ldr	r2, [pc, #104]	; (800fce8 <TIM_Base_SetConfig+0x1e4>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d00b      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4a19      	ldr	r2, [pc, #100]	; (800fcec <TIM_Base_SetConfig+0x1e8>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d007      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4a18      	ldr	r2, [pc, #96]	; (800fcf0 <TIM_Base_SetConfig+0x1ec>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d003      	beq.n	800fc9c <TIM_Base_SetConfig+0x198>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a17      	ldr	r2, [pc, #92]	; (800fcf4 <TIM_Base_SetConfig+0x1f0>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d103      	bne.n	800fca4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	691a      	ldr	r2, [r3, #16]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	615a      	str	r2, [r3, #20]
}
 800fcaa:	bf00      	nop
 800fcac:	3714      	adds	r7, #20
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr
 800fcb6:	bf00      	nop
 800fcb8:	40012c00 	.word	0x40012c00
 800fcbc:	50012c00 	.word	0x50012c00
 800fcc0:	40000400 	.word	0x40000400
 800fcc4:	50000400 	.word	0x50000400
 800fcc8:	40000800 	.word	0x40000800
 800fccc:	50000800 	.word	0x50000800
 800fcd0:	40000c00 	.word	0x40000c00
 800fcd4:	50000c00 	.word	0x50000c00
 800fcd8:	40013400 	.word	0x40013400
 800fcdc:	50013400 	.word	0x50013400
 800fce0:	40014000 	.word	0x40014000
 800fce4:	50014000 	.word	0x50014000
 800fce8:	40014400 	.word	0x40014400
 800fcec:	50014400 	.word	0x50014400
 800fcf0:	40014800 	.word	0x40014800
 800fcf4:	50014800 	.word	0x50014800

0800fcf8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b087      	sub	sp, #28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
 800fd04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	6a1b      	ldr	r3, [r3, #32]
 800fd0a:	f023 0201 	bic.w	r2, r3, #1
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6a1b      	ldr	r3, [r3, #32]
 800fd1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	4a34      	ldr	r2, [pc, #208]	; (800fdf4 <TIM_TI1_SetConfig+0xfc>)
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d033      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4a33      	ldr	r2, [pc, #204]	; (800fdf8 <TIM_TI1_SetConfig+0x100>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d02f      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd34:	d02b      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fd3c:	d027      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	4a2e      	ldr	r2, [pc, #184]	; (800fdfc <TIM_TI1_SetConfig+0x104>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d023      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	4a2d      	ldr	r2, [pc, #180]	; (800fe00 <TIM_TI1_SetConfig+0x108>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d01f      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	4a2c      	ldr	r2, [pc, #176]	; (800fe04 <TIM_TI1_SetConfig+0x10c>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d01b      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	4a2b      	ldr	r2, [pc, #172]	; (800fe08 <TIM_TI1_SetConfig+0x110>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d017      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	4a2a      	ldr	r2, [pc, #168]	; (800fe0c <TIM_TI1_SetConfig+0x114>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d013      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	4a29      	ldr	r2, [pc, #164]	; (800fe10 <TIM_TI1_SetConfig+0x118>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d00f      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	4a28      	ldr	r2, [pc, #160]	; (800fe14 <TIM_TI1_SetConfig+0x11c>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d00b      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	4a27      	ldr	r2, [pc, #156]	; (800fe18 <TIM_TI1_SetConfig+0x120>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d007      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	4a26      	ldr	r2, [pc, #152]	; (800fe1c <TIM_TI1_SetConfig+0x124>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d003      	beq.n	800fd8e <TIM_TI1_SetConfig+0x96>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	4a25      	ldr	r2, [pc, #148]	; (800fe20 <TIM_TI1_SetConfig+0x128>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d101      	bne.n	800fd92 <TIM_TI1_SetConfig+0x9a>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e000      	b.n	800fd94 <TIM_TI1_SetConfig+0x9c>
 800fd92:	2300      	movs	r3, #0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d008      	beq.n	800fdaa <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	f023 0303 	bic.w	r3, r3, #3
 800fd9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fda0:	697a      	ldr	r2, [r7, #20]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4313      	orrs	r3, r2
 800fda6:	617b      	str	r3, [r7, #20]
 800fda8:	e003      	b.n	800fdb2 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f043 0301 	orr.w	r3, r3, #1
 800fdb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fdb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	011b      	lsls	r3, r3, #4
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	697a      	ldr	r2, [r7, #20]
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	f023 030a 	bic.w	r3, r3, #10
 800fdcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	f003 030a 	and.w	r3, r3, #10
 800fdd4:	693a      	ldr	r2, [r7, #16]
 800fdd6:	4313      	orrs	r3, r2
 800fdd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	697a      	ldr	r2, [r7, #20]
 800fdde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	693a      	ldr	r2, [r7, #16]
 800fde4:	621a      	str	r2, [r3, #32]
}
 800fde6:	bf00      	nop
 800fde8:	371c      	adds	r7, #28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	40012c00 	.word	0x40012c00
 800fdf8:	50012c00 	.word	0x50012c00
 800fdfc:	40000400 	.word	0x40000400
 800fe00:	50000400 	.word	0x50000400
 800fe04:	40000800 	.word	0x40000800
 800fe08:	50000800 	.word	0x50000800
 800fe0c:	40000c00 	.word	0x40000c00
 800fe10:	50000c00 	.word	0x50000c00
 800fe14:	40013400 	.word	0x40013400
 800fe18:	50013400 	.word	0x50013400
 800fe1c:	40014000 	.word	0x40014000
 800fe20:	50014000 	.word	0x50014000

0800fe24 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b087      	sub	sp, #28
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
 800fe30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6a1b      	ldr	r3, [r3, #32]
 800fe36:	f023 0210 	bic.w	r2, r3, #16
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	699b      	ldr	r3, [r3, #24]
 800fe42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6a1b      	ldr	r3, [r3, #32]
 800fe48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	021b      	lsls	r3, r3, #8
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	4313      	orrs	r3, r2
 800fe5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	031b      	lsls	r3, r3, #12
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	011b      	lsls	r3, r3, #4
 800fe7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fe80:	693a      	ldr	r2, [r7, #16]
 800fe82:	4313      	orrs	r3, r2
 800fe84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	693a      	ldr	r2, [r7, #16]
 800fe90:	621a      	str	r2, [r3, #32]
}
 800fe92:	bf00      	nop
 800fe94:	371c      	adds	r7, #28
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr

0800fe9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe9e:	b480      	push	{r7}
 800fea0:	b087      	sub	sp, #28
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	60f8      	str	r0, [r7, #12]
 800fea6:	60b9      	str	r1, [r7, #8]
 800fea8:	607a      	str	r2, [r7, #4]
 800feaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	69db      	ldr	r3, [r3, #28]
 800febc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6a1b      	ldr	r3, [r3, #32]
 800fec2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	f023 0303 	bic.w	r3, r3, #3
 800feca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800feda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	011b      	lsls	r3, r3, #4
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	697a      	ldr	r2, [r7, #20]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800feee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	021b      	lsls	r3, r3, #8
 800fef4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fef8:	693a      	ldr	r2, [r7, #16]
 800fefa:	4313      	orrs	r3, r2
 800fefc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	697a      	ldr	r2, [r7, #20]
 800ff02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	693a      	ldr	r2, [r7, #16]
 800ff08:	621a      	str	r2, [r3, #32]
}
 800ff0a:	bf00      	nop
 800ff0c:	371c      	adds	r7, #28
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b087      	sub	sp, #28
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	60f8      	str	r0, [r7, #12]
 800ff1e:	60b9      	str	r1, [r7, #8]
 800ff20:	607a      	str	r2, [r7, #4]
 800ff22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6a1b      	ldr	r3, [r3, #32]
 800ff28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	69db      	ldr	r3, [r3, #28]
 800ff34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	6a1b      	ldr	r3, [r3, #32]
 800ff3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	021b      	lsls	r3, r3, #8
 800ff48:	697a      	ldr	r2, [r7, #20]
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ff54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	031b      	lsls	r3, r3, #12
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	697a      	ldr	r2, [r7, #20]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ff68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	031b      	lsls	r3, r3, #12
 800ff6e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ff72:	693a      	ldr	r2, [r7, #16]
 800ff74:	4313      	orrs	r3, r2
 800ff76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	697a      	ldr	r2, [r7, #20]
 800ff7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	693a      	ldr	r2, [r7, #16]
 800ff82:	621a      	str	r2, [r3, #32]
}
 800ff84:	bf00      	nop
 800ff86:	371c      	adds	r7, #28
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr

0800ff90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b085      	sub	sp, #20
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d101      	bne.n	800ffa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	e097      	b.n	80100d8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2202      	movs	r2, #2
 800ffb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4a45      	ldr	r2, [pc, #276]	; (80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d00e      	beq.n	800fff0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a44      	ldr	r2, [pc, #272]	; (80100e8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d009      	beq.n	800fff0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a42      	ldr	r2, [pc, #264]	; (80100ec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d004      	beq.n	800fff0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a41      	ldr	r2, [pc, #260]	; (80100f0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d108      	bne.n	8010002 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	4313      	orrs	r3, r2
 8010000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8010008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801000c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	4313      	orrs	r3, r2
 8010016:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a2f      	ldr	r2, [pc, #188]	; (80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d040      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a2e      	ldr	r2, [pc, #184]	; (80100e8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d03b      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801003c:	d036      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010046:	d031      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a29      	ldr	r2, [pc, #164]	; (80100f4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d02c      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a28      	ldr	r2, [pc, #160]	; (80100f8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d027      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a26      	ldr	r2, [pc, #152]	; (80100fc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d022      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a25      	ldr	r2, [pc, #148]	; (8010100 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d01d      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a23      	ldr	r2, [pc, #140]	; (8010104 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d018      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a22      	ldr	r2, [pc, #136]	; (8010108 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d013      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a18      	ldr	r2, [pc, #96]	; (80100ec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d00e      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a17      	ldr	r2, [pc, #92]	; (80100f0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d009      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a1b      	ldr	r2, [pc, #108]	; (801010c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d004      	beq.n	80100ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a1a      	ldr	r2, [pc, #104]	; (8010110 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d10c      	bne.n	80100c6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2201      	movs	r2, #1
 80100ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3714      	adds	r7, #20
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	40012c00 	.word	0x40012c00
 80100e8:	50012c00 	.word	0x50012c00
 80100ec:	40013400 	.word	0x40013400
 80100f0:	50013400 	.word	0x50013400
 80100f4:	40000400 	.word	0x40000400
 80100f8:	50000400 	.word	0x50000400
 80100fc:	40000800 	.word	0x40000800
 8010100:	50000800 	.word	0x50000800
 8010104:	40000c00 	.word	0x40000c00
 8010108:	50000c00 	.word	0x50000c00
 801010c:	40014000 	.word	0x40014000
 8010110:	50014000 	.word	0x50014000

08010114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d101      	bne.n	8010126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010122:	2301      	movs	r3, #1
 8010124:	e042      	b.n	80101ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801012c:	2b00      	cmp	r3, #0
 801012e:	d106      	bne.n	801013e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7f2 fe37 	bl	8002dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2224      	movs	r2, #36	; 0x24
 8010142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f022 0201 	bic.w	r2, r2, #1
 8010154:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f82c 	bl	80101b4 <UART_SetConfig>
 801015c:	4603      	mov	r3, r0
 801015e:	2b01      	cmp	r3, #1
 8010160:	d101      	bne.n	8010166 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010162:	2301      	movs	r3, #1
 8010164:	e022      	b.n	80101ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801016a:	2b00      	cmp	r3, #0
 801016c:	d002      	beq.n	8010174 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 f9c2 	bl	80104f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	689a      	ldr	r2, [r3, #8]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f042 0201 	orr.w	r2, r2, #1
 80101a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 fa49 	bl	801063c <UART_CheckIdleState>
 80101aa:	4603      	mov	r3, r0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80101b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101b8:	b094      	sub	sp, #80	; 0x50
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80101c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	4b7e      	ldr	r3, [pc, #504]	; (80103c4 <UART_SetConfig+0x210>)
 80101ca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	689a      	ldr	r2, [r3, #8]
 80101d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	431a      	orrs	r2, r3
 80101d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d8:	695b      	ldr	r3, [r3, #20]
 80101da:	431a      	orrs	r2, r3
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	69db      	ldr	r3, [r3, #28]
 80101e0:	4313      	orrs	r3, r2
 80101e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80101e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4977      	ldr	r1, [pc, #476]	; (80103c8 <UART_SetConfig+0x214>)
 80101ec:	4019      	ands	r1, r3
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101f4:	430b      	orrs	r3, r1
 80101f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80101f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010204:	68d9      	ldr	r1, [r3, #12]
 8010206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	ea40 0301 	orr.w	r3, r0, r1
 801020e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	4b6a      	ldr	r3, [pc, #424]	; (80103c4 <UART_SetConfig+0x210>)
 801021c:	429a      	cmp	r2, r3
 801021e:	d009      	beq.n	8010234 <UART_SetConfig+0x80>
 8010220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	4b69      	ldr	r3, [pc, #420]	; (80103cc <UART_SetConfig+0x218>)
 8010226:	429a      	cmp	r2, r3
 8010228:	d004      	beq.n	8010234 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801022a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022c:	6a1a      	ldr	r2, [r3, #32]
 801022e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010230:	4313      	orrs	r3, r2
 8010232:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	689b      	ldr	r3, [r3, #8]
 801023a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 801023e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8010242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010248:	430b      	orrs	r3, r1
 801024a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010252:	f023 000f 	bic.w	r0, r3, #15
 8010256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010258:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801025a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	ea40 0301 	orr.w	r3, r0, r1
 8010262:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	4b59      	ldr	r3, [pc, #356]	; (80103d0 <UART_SetConfig+0x21c>)
 801026a:	429a      	cmp	r2, r3
 801026c:	d102      	bne.n	8010274 <UART_SetConfig+0xc0>
 801026e:	2301      	movs	r3, #1
 8010270:	64bb      	str	r3, [r7, #72]	; 0x48
 8010272:	e029      	b.n	80102c8 <UART_SetConfig+0x114>
 8010274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	4b56      	ldr	r3, [pc, #344]	; (80103d4 <UART_SetConfig+0x220>)
 801027a:	429a      	cmp	r2, r3
 801027c:	d102      	bne.n	8010284 <UART_SetConfig+0xd0>
 801027e:	2302      	movs	r3, #2
 8010280:	64bb      	str	r3, [r7, #72]	; 0x48
 8010282:	e021      	b.n	80102c8 <UART_SetConfig+0x114>
 8010284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	4b53      	ldr	r3, [pc, #332]	; (80103d8 <UART_SetConfig+0x224>)
 801028a:	429a      	cmp	r2, r3
 801028c:	d102      	bne.n	8010294 <UART_SetConfig+0xe0>
 801028e:	2304      	movs	r3, #4
 8010290:	64bb      	str	r3, [r7, #72]	; 0x48
 8010292:	e019      	b.n	80102c8 <UART_SetConfig+0x114>
 8010294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	4b50      	ldr	r3, [pc, #320]	; (80103dc <UART_SetConfig+0x228>)
 801029a:	429a      	cmp	r2, r3
 801029c:	d102      	bne.n	80102a4 <UART_SetConfig+0xf0>
 801029e:	2308      	movs	r3, #8
 80102a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80102a2:	e011      	b.n	80102c8 <UART_SetConfig+0x114>
 80102a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	4b4d      	ldr	r3, [pc, #308]	; (80103e0 <UART_SetConfig+0x22c>)
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d102      	bne.n	80102b4 <UART_SetConfig+0x100>
 80102ae:	2310      	movs	r3, #16
 80102b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80102b2:	e009      	b.n	80102c8 <UART_SetConfig+0x114>
 80102b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	4b42      	ldr	r3, [pc, #264]	; (80103c4 <UART_SetConfig+0x210>)
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d102      	bne.n	80102c4 <UART_SetConfig+0x110>
 80102be:	2320      	movs	r3, #32
 80102c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80102c2:	e001      	b.n	80102c8 <UART_SetConfig+0x114>
 80102c4:	2300      	movs	r3, #0
 80102c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80102c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	4b3d      	ldr	r3, [pc, #244]	; (80103c4 <UART_SetConfig+0x210>)
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d005      	beq.n	80102de <UART_SetConfig+0x12a>
 80102d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	4b3d      	ldr	r3, [pc, #244]	; (80103cc <UART_SetConfig+0x218>)
 80102d8:	429a      	cmp	r2, r3
 80102da:	f040 8085 	bne.w	80103e8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80102de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102e0:	2200      	movs	r2, #0
 80102e2:	623b      	str	r3, [r7, #32]
 80102e4:	627a      	str	r2, [r7, #36]	; 0x24
 80102e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80102ea:	f7fc fa13 	bl	800c714 <HAL_RCCEx_GetPeriphCLKFreq>
 80102ee:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80102f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 80e8 	beq.w	80104c8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102fc:	4a39      	ldr	r2, [pc, #228]	; (80103e4 <UART_SetConfig+0x230>)
 80102fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010302:	461a      	mov	r2, r3
 8010304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010306:	fbb3 f3f2 	udiv	r3, r3, r2
 801030a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801030c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	4613      	mov	r3, r2
 8010312:	005b      	lsls	r3, r3, #1
 8010314:	4413      	add	r3, r2
 8010316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010318:	429a      	cmp	r2, r3
 801031a:	d305      	bcc.n	8010328 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010324:	429a      	cmp	r2, r3
 8010326:	d903      	bls.n	8010330 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8010328:	2301      	movs	r3, #1
 801032a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801032e:	e048      	b.n	80103c2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010332:	2200      	movs	r2, #0
 8010334:	61bb      	str	r3, [r7, #24]
 8010336:	61fa      	str	r2, [r7, #28]
 8010338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801033c:	4a29      	ldr	r2, [pc, #164]	; (80103e4 <UART_SetConfig+0x230>)
 801033e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010342:	b29b      	uxth	r3, r3
 8010344:	2200      	movs	r2, #0
 8010346:	613b      	str	r3, [r7, #16]
 8010348:	617a      	str	r2, [r7, #20]
 801034a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801034e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010352:	f7f0 fc9d 	bl	8000c90 <__aeabi_uldivmod>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	4610      	mov	r0, r2
 801035c:	4619      	mov	r1, r3
 801035e:	f04f 0200 	mov.w	r2, #0
 8010362:	f04f 0300 	mov.w	r3, #0
 8010366:	020b      	lsls	r3, r1, #8
 8010368:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801036c:	0202      	lsls	r2, r0, #8
 801036e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010370:	6849      	ldr	r1, [r1, #4]
 8010372:	0849      	lsrs	r1, r1, #1
 8010374:	2000      	movs	r0, #0
 8010376:	460c      	mov	r4, r1
 8010378:	4605      	mov	r5, r0
 801037a:	eb12 0804 	adds.w	r8, r2, r4
 801037e:	eb43 0905 	adc.w	r9, r3, r5
 8010382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	60bb      	str	r3, [r7, #8]
 801038a:	60fa      	str	r2, [r7, #12]
 801038c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010390:	4640      	mov	r0, r8
 8010392:	4649      	mov	r1, r9
 8010394:	f7f0 fc7c 	bl	8000c90 <__aeabi_uldivmod>
 8010398:	4602      	mov	r2, r0
 801039a:	460b      	mov	r3, r1
 801039c:	4613      	mov	r3, r2
 801039e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80103a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80103a6:	d308      	bcc.n	80103ba <UART_SetConfig+0x206>
 80103a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103ae:	d204      	bcs.n	80103ba <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80103b6:	60da      	str	r2, [r3, #12]
 80103b8:	e003      	b.n	80103c2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80103ba:	2301      	movs	r3, #1
 80103bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80103c0:	e082      	b.n	80104c8 <UART_SetConfig+0x314>
 80103c2:	e081      	b.n	80104c8 <UART_SetConfig+0x314>
 80103c4:	46002400 	.word	0x46002400
 80103c8:	cfff69f3 	.word	0xcfff69f3
 80103cc:	56002400 	.word	0x56002400
 80103d0:	40013800 	.word	0x40013800
 80103d4:	40004400 	.word	0x40004400
 80103d8:	40004800 	.word	0x40004800
 80103dc:	40004c00 	.word	0x40004c00
 80103e0:	40005000 	.word	0x40005000
 80103e4:	0801eae4 	.word	0x0801eae4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80103e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ea:	69db      	ldr	r3, [r3, #28]
 80103ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103f0:	d13c      	bne.n	801046c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80103f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103f4:	2200      	movs	r2, #0
 80103f6:	603b      	str	r3, [r7, #0]
 80103f8:	607a      	str	r2, [r7, #4]
 80103fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80103fe:	f7fc f989 	bl	800c714 <HAL_RCCEx_GetPeriphCLKFreq>
 8010402:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010406:	2b00      	cmp	r3, #0
 8010408:	d05e      	beq.n	80104c8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040e:	4a39      	ldr	r2, [pc, #228]	; (80104f4 <UART_SetConfig+0x340>)
 8010410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010414:	461a      	mov	r2, r3
 8010416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010418:	fbb3 f3f2 	udiv	r3, r3, r2
 801041c:	005a      	lsls	r2, r3, #1
 801041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	085b      	lsrs	r3, r3, #1
 8010424:	441a      	add	r2, r3
 8010426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	fbb2 f3f3 	udiv	r3, r2, r3
 801042e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010432:	2b0f      	cmp	r3, #15
 8010434:	d916      	bls.n	8010464 <UART_SetConfig+0x2b0>
 8010436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801043c:	d212      	bcs.n	8010464 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801043e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010440:	b29b      	uxth	r3, r3
 8010442:	f023 030f 	bic.w	r3, r3, #15
 8010446:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801044a:	085b      	lsrs	r3, r3, #1
 801044c:	b29b      	uxth	r3, r3
 801044e:	f003 0307 	and.w	r3, r3, #7
 8010452:	b29a      	uxth	r2, r3
 8010454:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010456:	4313      	orrs	r3, r2
 8010458:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 801045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010460:	60da      	str	r2, [r3, #12]
 8010462:	e031      	b.n	80104c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801046a:	e02d      	b.n	80104c8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801046c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801046e:	2200      	movs	r2, #0
 8010470:	469a      	mov	sl, r3
 8010472:	4693      	mov	fp, r2
 8010474:	4650      	mov	r0, sl
 8010476:	4659      	mov	r1, fp
 8010478:	f7fc f94c 	bl	800c714 <HAL_RCCEx_GetPeriphCLKFreq>
 801047c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 801047e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010480:	2b00      	cmp	r3, #0
 8010482:	d021      	beq.n	80104c8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010488:	4a1a      	ldr	r2, [pc, #104]	; (80104f4 <UART_SetConfig+0x340>)
 801048a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801048e:	461a      	mov	r2, r3
 8010490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010492:	fbb3 f2f2 	udiv	r2, r3, r2
 8010496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	085b      	lsrs	r3, r3, #1
 801049c:	441a      	add	r2, r3
 801049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80104a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104aa:	2b0f      	cmp	r3, #15
 80104ac:	d909      	bls.n	80104c2 <UART_SetConfig+0x30e>
 80104ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104b4:	d205      	bcs.n	80104c2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80104b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	60da      	str	r2, [r3, #12]
 80104c0:	e002      	b.n	80104c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80104c2:	2301      	movs	r3, #1
 80104c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80104c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ca:	2201      	movs	r2, #1
 80104cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80104d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d2:	2201      	movs	r2, #1
 80104d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104da:	2200      	movs	r2, #0
 80104dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80104de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e0:	2200      	movs	r2, #0
 80104e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80104e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3750      	adds	r7, #80	; 0x50
 80104ec:	46bd      	mov	sp, r7
 80104ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80104f2:	bf00      	nop
 80104f4:	0801eae4 	.word	0x0801eae4

080104f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010504:	f003 0301 	and.w	r3, r3, #1
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00a      	beq.n	8010522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	430a      	orrs	r2, r1
 8010520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010526:	f003 0302 	and.w	r3, r3, #2
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00a      	beq.n	8010544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	430a      	orrs	r2, r1
 8010542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010548:	f003 0304 	and.w	r3, r3, #4
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00a      	beq.n	8010566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	430a      	orrs	r2, r1
 8010564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801056a:	f003 0308 	and.w	r3, r3, #8
 801056e:	2b00      	cmp	r3, #0
 8010570:	d00a      	beq.n	8010588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	430a      	orrs	r2, r1
 8010586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801058c:	f003 0310 	and.w	r3, r3, #16
 8010590:	2b00      	cmp	r3, #0
 8010592:	d00a      	beq.n	80105aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	689b      	ldr	r3, [r3, #8]
 801059a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	430a      	orrs	r2, r1
 80105a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105ae:	f003 0320 	and.w	r3, r3, #32
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00a      	beq.n	80105cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	430a      	orrs	r2, r1
 80105ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d01a      	beq.n	801060e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	430a      	orrs	r2, r1
 80105ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105f6:	d10a      	bne.n	801060e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	430a      	orrs	r2, r1
 801060c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010616:	2b00      	cmp	r3, #0
 8010618:	d00a      	beq.n	8010630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	430a      	orrs	r2, r1
 801062e:	605a      	str	r2, [r3, #4]
  }
}
 8010630:	bf00      	nop
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af02      	add	r7, sp, #8
 8010642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2200      	movs	r2, #0
 8010648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801064c:	f7f6 fa1a 	bl	8006a84 <HAL_GetTick>
 8010650:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f003 0308 	and.w	r3, r3, #8
 801065c:	2b08      	cmp	r3, #8
 801065e:	d10e      	bne.n	801067e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2200      	movs	r2, #0
 801066a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 f82f 	bl	80106d2 <UART_WaitOnFlagUntilTimeout>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801067a:	2303      	movs	r3, #3
 801067c:	e025      	b.n	80106ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f003 0304 	and.w	r3, r3, #4
 8010688:	2b04      	cmp	r3, #4
 801068a:	d10e      	bne.n	80106aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801068c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2200      	movs	r2, #0
 8010696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 f819 	bl	80106d2 <UART_WaitOnFlagUntilTimeout>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d001      	beq.n	80106aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80106a6:	2303      	movs	r3, #3
 80106a8:	e00f      	b.n	80106ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2220      	movs	r2, #32
 80106ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2220      	movs	r2, #32
 80106b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2200      	movs	r2, #0
 80106be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2200      	movs	r2, #0
 80106c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b09c      	sub	sp, #112	; 0x70
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	60f8      	str	r0, [r7, #12]
 80106da:	60b9      	str	r1, [r7, #8]
 80106dc:	603b      	str	r3, [r7, #0]
 80106de:	4613      	mov	r3, r2
 80106e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106e2:	e0a9      	b.n	8010838 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ea:	f000 80a5 	beq.w	8010838 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106ee:	f7f6 f9c9 	bl	8006a84 <HAL_GetTick>
 80106f2:	4602      	mov	r2, r0
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d302      	bcc.n	8010704 <UART_WaitOnFlagUntilTimeout+0x32>
 80106fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010700:	2b00      	cmp	r3, #0
 8010702:	d140      	bne.n	8010786 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801070c:	e853 3f00 	ldrex	r3, [r3]
 8010710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010718:	667b      	str	r3, [r7, #100]	; 0x64
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	461a      	mov	r2, r3
 8010720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010724:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801072a:	e841 2300 	strex	r3, r2, [r1]
 801072e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1e6      	bne.n	8010704 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	3308      	adds	r3, #8
 801073c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801073e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010740:	e853 3f00 	ldrex	r3, [r3]
 8010744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010748:	f023 0301 	bic.w	r3, r3, #1
 801074c:	663b      	str	r3, [r7, #96]	; 0x60
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	3308      	adds	r3, #8
 8010754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010756:	64ba      	str	r2, [r7, #72]	; 0x48
 8010758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801075c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801075e:	e841 2300 	strex	r3, r2, [r1]
 8010762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1e5      	bne.n	8010736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2220      	movs	r2, #32
 801076e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2220      	movs	r2, #32
 8010776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010782:	2303      	movs	r3, #3
 8010784:	e069      	b.n	801085a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f003 0304 	and.w	r3, r3, #4
 8010790:	2b00      	cmp	r3, #0
 8010792:	d051      	beq.n	8010838 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	69db      	ldr	r3, [r3, #28]
 801079a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801079e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80107a2:	d149      	bne.n	8010838 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80107ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	e853 3f00 	ldrex	r3, [r3]
 80107ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80107c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107cc:	637b      	str	r3, [r7, #52]	; 0x34
 80107ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80107d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107d4:	e841 2300 	strex	r3, r2, [r1]
 80107d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1e6      	bne.n	80107ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	3308      	adds	r3, #8
 80107e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	e853 3f00 	ldrex	r3, [r3]
 80107ee:	613b      	str	r3, [r7, #16]
   return(result);
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	f023 0301 	bic.w	r3, r3, #1
 80107f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	3308      	adds	r3, #8
 80107fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010800:	623a      	str	r2, [r7, #32]
 8010802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010804:	69f9      	ldr	r1, [r7, #28]
 8010806:	6a3a      	ldr	r2, [r7, #32]
 8010808:	e841 2300 	strex	r3, r2, [r1]
 801080c:	61bb      	str	r3, [r7, #24]
   return(result);
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1e5      	bne.n	80107e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2220      	movs	r2, #32
 8010818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2220      	movs	r2, #32
 8010820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2220      	movs	r2, #32
 8010828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010834:	2303      	movs	r3, #3
 8010836:	e010      	b.n	801085a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	69da      	ldr	r2, [r3, #28]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	4013      	ands	r3, r2
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	429a      	cmp	r2, r3
 8010846:	bf0c      	ite	eq
 8010848:	2301      	moveq	r3, #1
 801084a:	2300      	movne	r3, #0
 801084c:	b2db      	uxtb	r3, r3
 801084e:	461a      	mov	r2, r3
 8010850:	79fb      	ldrb	r3, [r7, #7]
 8010852:	429a      	cmp	r2, r3
 8010854:	f43f af46 	beq.w	80106e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3770      	adds	r7, #112	; 0x70
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010862:	b480      	push	{r7}
 8010864:	b085      	sub	sp, #20
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010870:	2b01      	cmp	r3, #1
 8010872:	d101      	bne.n	8010878 <HAL_UARTEx_DisableFifoMode+0x16>
 8010874:	2302      	movs	r3, #2
 8010876:	e027      	b.n	80108c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2201      	movs	r2, #1
 801087c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2224      	movs	r2, #36	; 0x24
 8010884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f022 0201 	bic.w	r2, r2, #1
 801089e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80108a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2220      	movs	r2, #32
 80108ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80108c6:	2300      	movs	r3, #0
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3714      	adds	r7, #20
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d101      	bne.n	80108ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108e8:	2302      	movs	r3, #2
 80108ea:	e02d      	b.n	8010948 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2201      	movs	r2, #1
 80108f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2224      	movs	r2, #36	; 0x24
 80108f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f022 0201 	bic.w	r2, r2, #1
 8010912:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	689b      	ldr	r3, [r3, #8]
 801091a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	683a      	ldr	r2, [r7, #0]
 8010924:	430a      	orrs	r2, r1
 8010926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 f84f 	bl	80109cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2220      	movs	r2, #32
 801093a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2200      	movs	r2, #0
 8010942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010946:	2300      	movs	r3, #0
}
 8010948:	4618      	mov	r0, r3
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010960:	2b01      	cmp	r3, #1
 8010962:	d101      	bne.n	8010968 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010964:	2302      	movs	r3, #2
 8010966:	e02d      	b.n	80109c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2201      	movs	r2, #1
 801096c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2224      	movs	r2, #36	; 0x24
 8010974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f022 0201 	bic.w	r2, r2, #1
 801098e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	683a      	ldr	r2, [r7, #0]
 80109a0:	430a      	orrs	r2, r1
 80109a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 f811 	bl	80109cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	68fa      	ldr	r2, [r7, #12]
 80109b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2220      	movs	r2, #32
 80109b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3710      	adds	r7, #16
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d108      	bne.n	80109ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2201      	movs	r2, #1
 80109e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80109ec:	e031      	b.n	8010a52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80109ee:	2308      	movs	r3, #8
 80109f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80109f2:	2308      	movs	r3, #8
 80109f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	0e5b      	lsrs	r3, r3, #25
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	f003 0307 	and.w	r3, r3, #7
 8010a04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	0f5b      	lsrs	r3, r3, #29
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	f003 0307 	and.w	r3, r3, #7
 8010a14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a16:	7bbb      	ldrb	r3, [r7, #14]
 8010a18:	7b3a      	ldrb	r2, [r7, #12]
 8010a1a:	4911      	ldr	r1, [pc, #68]	; (8010a60 <UARTEx_SetNbDataToProcess+0x94>)
 8010a1c:	5c8a      	ldrb	r2, [r1, r2]
 8010a1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a22:	7b3a      	ldrb	r2, [r7, #12]
 8010a24:	490f      	ldr	r1, [pc, #60]	; (8010a64 <UARTEx_SetNbDataToProcess+0x98>)
 8010a26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a34:	7bfb      	ldrb	r3, [r7, #15]
 8010a36:	7b7a      	ldrb	r2, [r7, #13]
 8010a38:	4909      	ldr	r1, [pc, #36]	; (8010a60 <UARTEx_SetNbDataToProcess+0x94>)
 8010a3a:	5c8a      	ldrb	r2, [r1, r2]
 8010a3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a40:	7b7a      	ldrb	r2, [r7, #13]
 8010a42:	4908      	ldr	r1, [pc, #32]	; (8010a64 <UARTEx_SetNbDataToProcess+0x98>)
 8010a44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a46:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a52:	bf00      	nop
 8010a54:	3714      	adds	r7, #20
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	0801eafc 	.word	0x0801eafc
 8010a64:	0801eb04 	.word	0x0801eb04

08010a68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010a68:	b084      	sub	sp, #16
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
 8010a72:	f107 001c 	add.w	r0, r7, #28
 8010a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f001 fbbc 	bl	8012204 <USB_CoreReset>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d106      	bne.n	8010aa4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8010aa2:	e005      	b.n	8010ab0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8010ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010abc:	b004      	add	sp, #16
 8010abe:	4770      	bx	lr

08010ac0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b087      	sub	sp, #28
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	60b9      	str	r1, [r7, #8]
 8010aca:	4613      	mov	r3, r2
 8010acc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d165      	bne.n	8010ba0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	4a41      	ldr	r2, [pc, #260]	; (8010bdc <USB_SetTurnaroundTime+0x11c>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d906      	bls.n	8010aea <USB_SetTurnaroundTime+0x2a>
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	4a40      	ldr	r2, [pc, #256]	; (8010be0 <USB_SetTurnaroundTime+0x120>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d202      	bcs.n	8010aea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010ae4:	230f      	movs	r3, #15
 8010ae6:	617b      	str	r3, [r7, #20]
 8010ae8:	e062      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	4a3c      	ldr	r2, [pc, #240]	; (8010be0 <USB_SetTurnaroundTime+0x120>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d306      	bcc.n	8010b00 <USB_SetTurnaroundTime+0x40>
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	4a3b      	ldr	r2, [pc, #236]	; (8010be4 <USB_SetTurnaroundTime+0x124>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d202      	bcs.n	8010b00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010afa:	230e      	movs	r3, #14
 8010afc:	617b      	str	r3, [r7, #20]
 8010afe:	e057      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	4a38      	ldr	r2, [pc, #224]	; (8010be4 <USB_SetTurnaroundTime+0x124>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d306      	bcc.n	8010b16 <USB_SetTurnaroundTime+0x56>
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	4a37      	ldr	r2, [pc, #220]	; (8010be8 <USB_SetTurnaroundTime+0x128>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d202      	bcs.n	8010b16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010b10:	230d      	movs	r3, #13
 8010b12:	617b      	str	r3, [r7, #20]
 8010b14:	e04c      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	4a33      	ldr	r2, [pc, #204]	; (8010be8 <USB_SetTurnaroundTime+0x128>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d306      	bcc.n	8010b2c <USB_SetTurnaroundTime+0x6c>
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	4a32      	ldr	r2, [pc, #200]	; (8010bec <USB_SetTurnaroundTime+0x12c>)
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d802      	bhi.n	8010b2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010b26:	230c      	movs	r3, #12
 8010b28:	617b      	str	r3, [r7, #20]
 8010b2a:	e041      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	4a2f      	ldr	r2, [pc, #188]	; (8010bec <USB_SetTurnaroundTime+0x12c>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d906      	bls.n	8010b42 <USB_SetTurnaroundTime+0x82>
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	4a2e      	ldr	r2, [pc, #184]	; (8010bf0 <USB_SetTurnaroundTime+0x130>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d802      	bhi.n	8010b42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010b3c:	230b      	movs	r3, #11
 8010b3e:	617b      	str	r3, [r7, #20]
 8010b40:	e036      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	4a2a      	ldr	r2, [pc, #168]	; (8010bf0 <USB_SetTurnaroundTime+0x130>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d906      	bls.n	8010b58 <USB_SetTurnaroundTime+0x98>
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	4a29      	ldr	r2, [pc, #164]	; (8010bf4 <USB_SetTurnaroundTime+0x134>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d802      	bhi.n	8010b58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010b52:	230a      	movs	r3, #10
 8010b54:	617b      	str	r3, [r7, #20]
 8010b56:	e02b      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	4a26      	ldr	r2, [pc, #152]	; (8010bf4 <USB_SetTurnaroundTime+0x134>)
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d906      	bls.n	8010b6e <USB_SetTurnaroundTime+0xae>
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	4a25      	ldr	r2, [pc, #148]	; (8010bf8 <USB_SetTurnaroundTime+0x138>)
 8010b64:	4293      	cmp	r3, r2
 8010b66:	d202      	bcs.n	8010b6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010b68:	2309      	movs	r3, #9
 8010b6a:	617b      	str	r3, [r7, #20]
 8010b6c:	e020      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	4a21      	ldr	r2, [pc, #132]	; (8010bf8 <USB_SetTurnaroundTime+0x138>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d306      	bcc.n	8010b84 <USB_SetTurnaroundTime+0xc4>
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	4a20      	ldr	r2, [pc, #128]	; (8010bfc <USB_SetTurnaroundTime+0x13c>)
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d802      	bhi.n	8010b84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010b7e:	2308      	movs	r3, #8
 8010b80:	617b      	str	r3, [r7, #20]
 8010b82:	e015      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	4a1d      	ldr	r2, [pc, #116]	; (8010bfc <USB_SetTurnaroundTime+0x13c>)
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	d906      	bls.n	8010b9a <USB_SetTurnaroundTime+0xda>
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	4a1c      	ldr	r2, [pc, #112]	; (8010c00 <USB_SetTurnaroundTime+0x140>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d202      	bcs.n	8010b9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010b94:	2307      	movs	r3, #7
 8010b96:	617b      	str	r3, [r7, #20]
 8010b98:	e00a      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010b9a:	2306      	movs	r3, #6
 8010b9c:	617b      	str	r3, [r7, #20]
 8010b9e:	e007      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010ba0:	79fb      	ldrb	r3, [r7, #7]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d102      	bne.n	8010bac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010ba6:	2309      	movs	r3, #9
 8010ba8:	617b      	str	r3, [r7, #20]
 8010baa:	e001      	b.n	8010bb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010bac:	2309      	movs	r3, #9
 8010bae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	68da      	ldr	r2, [r3, #12]
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	029b      	lsls	r3, r3, #10
 8010bc4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010bc8:	431a      	orrs	r2, r3
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010bce:	2300      	movs	r3, #0
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	371c      	adds	r7, #28
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr
 8010bdc:	00d8acbf 	.word	0x00d8acbf
 8010be0:	00e4e1c0 	.word	0x00e4e1c0
 8010be4:	00f42400 	.word	0x00f42400
 8010be8:	01067380 	.word	0x01067380
 8010bec:	011a499f 	.word	0x011a499f
 8010bf0:	01312cff 	.word	0x01312cff
 8010bf4:	014ca43f 	.word	0x014ca43f
 8010bf8:	016e3600 	.word	0x016e3600
 8010bfc:	01a6ab1f 	.word	0x01a6ab1f
 8010c00:	01e84800 	.word	0x01e84800

08010c04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	f043 0201 	orr.w	r2, r3, #1
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	370c      	adds	r7, #12
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr

08010c26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010c26:	b480      	push	{r7}
 8010c28:	b083      	sub	sp, #12
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	f023 0201 	bic.w	r2, r3, #1
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	460b      	mov	r3, r1
 8010c52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010c54:	2300      	movs	r3, #0
 8010c56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010c64:	78fb      	ldrb	r3, [r7, #3]
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d115      	bne.n	8010c96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010c76:	2001      	movs	r0, #1
 8010c78:	f003 fc4c 	bl	8014514 <HAL_Delay>
      ms++;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f001 fa2f 	bl	80120e6 <USB_GetMode>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b01      	cmp	r3, #1
 8010c8c:	d01e      	beq.n	8010ccc <USB_SetCurrentMode+0x84>
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2b31      	cmp	r3, #49	; 0x31
 8010c92:	d9f0      	bls.n	8010c76 <USB_SetCurrentMode+0x2e>
 8010c94:	e01a      	b.n	8010ccc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010c96:	78fb      	ldrb	r3, [r7, #3]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d115      	bne.n	8010cc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010ca8:	2001      	movs	r0, #1
 8010caa:	f003 fc33 	bl	8014514 <HAL_Delay>
      ms++;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f001 fa16 	bl	80120e6 <USB_GetMode>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d005      	beq.n	8010ccc <USB_SetCurrentMode+0x84>
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2b31      	cmp	r3, #49	; 0x31
 8010cc4:	d9f0      	bls.n	8010ca8 <USB_SetCurrentMode+0x60>
 8010cc6:	e001      	b.n	8010ccc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010cc8:	2301      	movs	r3, #1
 8010cca:	e005      	b.n	8010cd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2b32      	cmp	r3, #50	; 0x32
 8010cd0:	d101      	bne.n	8010cd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e000      	b.n	8010cd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010ce0:	b084      	sub	sp, #16
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b086      	sub	sp, #24
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
 8010cea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	613b      	str	r3, [r7, #16]
 8010cfe:	e009      	b.n	8010d14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	3340      	adds	r3, #64	; 0x40
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	4413      	add	r3, r2
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	3301      	adds	r3, #1
 8010d12:	613b      	str	r3, [r7, #16]
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	2b0e      	cmp	r3, #14
 8010d18:	d9f2      	bls.n	8010d00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d11c      	bne.n	8010d5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d2e:	f043 0302 	orr.w	r3, r3, #2
 8010d32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	601a      	str	r2, [r3, #0]
 8010d58:	e005      	b.n	8010d66 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	2300      	movs	r3, #0
 8010d70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d78:	4619      	mov	r1, r3
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d80:	461a      	mov	r2, r3
 8010d82:	680b      	ldr	r3, [r1, #0]
 8010d84:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010d86:	2103      	movs	r1, #3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f95b 	bl	8011044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010d8e:	2110      	movs	r1, #16
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 f8f3 	bl	8010f7c <USB_FlushTxFifo>
 8010d96:	4603      	mov	r3, r0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d001      	beq.n	8010da0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 f91f 	bl	8010fe4 <USB_FlushRxFifo>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d001      	beq.n	8010db0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010dac:	2301      	movs	r3, #1
 8010dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010db6:	461a      	mov	r2, r3
 8010db8:	2300      	movs	r3, #0
 8010dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dce:	461a      	mov	r2, r3
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	613b      	str	r3, [r7, #16]
 8010dd8:	e043      	b.n	8010e62 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	015a      	lsls	r2, r3, #5
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	4413      	add	r3, r2
 8010de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010df0:	d118      	bne.n	8010e24 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d10a      	bne.n	8010e0e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	015a      	lsls	r2, r3, #5
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	4413      	add	r3, r2
 8010e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e04:	461a      	mov	r2, r3
 8010e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010e0a:	6013      	str	r3, [r2, #0]
 8010e0c:	e013      	b.n	8010e36 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	015a      	lsls	r2, r3, #5
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	4413      	add	r3, r2
 8010e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010e20:	6013      	str	r3, [r2, #0]
 8010e22:	e008      	b.n	8010e36 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	015a      	lsls	r2, r3, #5
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e30:	461a      	mov	r2, r3
 8010e32:	2300      	movs	r3, #0
 8010e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	015a      	lsls	r2, r3, #5
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e42:	461a      	mov	r2, r3
 8010e44:	2300      	movs	r3, #0
 8010e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	015a      	lsls	r2, r3, #5
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	4413      	add	r3, r2
 8010e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e54:	461a      	mov	r2, r3
 8010e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	3301      	adds	r3, #1
 8010e60:	613b      	str	r3, [r7, #16]
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d3b7      	bcc.n	8010dda <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	613b      	str	r3, [r7, #16]
 8010e6e:	e043      	b.n	8010ef8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	015a      	lsls	r2, r3, #5
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	4413      	add	r3, r2
 8010e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e86:	d118      	bne.n	8010eba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d10a      	bne.n	8010ea4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	015a      	lsls	r2, r3, #5
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	4413      	add	r3, r2
 8010e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010ea0:	6013      	str	r3, [r2, #0]
 8010ea2:	e013      	b.n	8010ecc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	015a      	lsls	r2, r3, #5
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	4413      	add	r3, r2
 8010eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010eb6:	6013      	str	r3, [r2, #0]
 8010eb8:	e008      	b.n	8010ecc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	015a      	lsls	r2, r3, #5
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	2300      	movs	r3, #0
 8010eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	015a      	lsls	r2, r3, #5
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ed8:	461a      	mov	r2, r3
 8010eda:	2300      	movs	r3, #0
 8010edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	015a      	lsls	r2, r3, #5
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eea:	461a      	mov	r2, r3
 8010eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	613b      	str	r3, [r7, #16]
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d3b7      	bcc.n	8010e70 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d105      	bne.n	8010f34 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	699b      	ldr	r3, [r3, #24]
 8010f2c:	f043 0210 	orr.w	r2, r3, #16
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	699a      	ldr	r2, [r3, #24]
 8010f38:	4b0f      	ldr	r3, [pc, #60]	; (8010f78 <USB_DevInit+0x298>)
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d005      	beq.n	8010f52 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	699b      	ldr	r3, [r3, #24]
 8010f4a:	f043 0208 	orr.w	r2, r3, #8
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d107      	bne.n	8010f68 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	699b      	ldr	r3, [r3, #24]
 8010f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010f60:	f043 0304 	orr.w	r3, r3, #4
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3718      	adds	r7, #24
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010f74:	b004      	add	sp, #16
 8010f76:	4770      	bx	lr
 8010f78:	803c3800 	.word	0x803c3800

08010f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010f86:	2300      	movs	r3, #0
 8010f88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	4a13      	ldr	r2, [pc, #76]	; (8010fe0 <USB_FlushTxFifo+0x64>)
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d901      	bls.n	8010f9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010f98:	2303      	movs	r3, #3
 8010f9a:	e01b      	b.n	8010fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	691b      	ldr	r3, [r3, #16]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	daf2      	bge.n	8010f8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	019b      	lsls	r3, r3, #6
 8010fac:	f043 0220 	orr.w	r2, r3, #32
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4a08      	ldr	r2, [pc, #32]	; (8010fe0 <USB_FlushTxFifo+0x64>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d901      	bls.n	8010fc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010fc2:	2303      	movs	r3, #3
 8010fc4:	e006      	b.n	8010fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	f003 0320 	and.w	r3, r3, #32
 8010fce:	2b20      	cmp	r3, #32
 8010fd0:	d0f0      	beq.n	8010fb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010fd2:	2300      	movs	r3, #0
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3714      	adds	r7, #20
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr
 8010fe0:	00030d40 	.word	0x00030d40

08010fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010fec:	2300      	movs	r3, #0
 8010fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	4a11      	ldr	r2, [pc, #68]	; (8011040 <USB_FlushRxFifo+0x5c>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d901      	bls.n	8011002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010ffe:	2303      	movs	r3, #3
 8011000:	e018      	b.n	8011034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	2b00      	cmp	r3, #0
 8011008:	daf2      	bge.n	8010ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801100a:	2300      	movs	r3, #0
 801100c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2210      	movs	r2, #16
 8011012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	3301      	adds	r3, #1
 8011018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	4a08      	ldr	r2, [pc, #32]	; (8011040 <USB_FlushRxFifo+0x5c>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d901      	bls.n	8011026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011022:	2303      	movs	r3, #3
 8011024:	e006      	b.n	8011034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	691b      	ldr	r3, [r3, #16]
 801102a:	f003 0310 	and.w	r3, r3, #16
 801102e:	2b10      	cmp	r3, #16
 8011030:	d0f0      	beq.n	8011014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3714      	adds	r7, #20
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	00030d40 	.word	0x00030d40

08011044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	460b      	mov	r3, r1
 801104e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	78fb      	ldrb	r3, [r7, #3]
 801105e:	68f9      	ldr	r1, [r7, #12]
 8011060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011064:	4313      	orrs	r3, r2
 8011066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011068:	2300      	movs	r3, #0
}
 801106a:	4618      	mov	r0, r3
 801106c:	3714      	adds	r7, #20
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr

08011076 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011076:	b480      	push	{r7}
 8011078:	b087      	sub	sp, #28
 801107a:	af00      	add	r7, sp, #0
 801107c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	f003 0306 	and.w	r3, r3, #6
 801108e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d102      	bne.n	801109c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011096:	2300      	movs	r3, #0
 8011098:	75fb      	strb	r3, [r7, #23]
 801109a:	e00a      	b.n	80110b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2b02      	cmp	r3, #2
 80110a0:	d002      	beq.n	80110a8 <USB_GetDevSpeed+0x32>
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2b06      	cmp	r3, #6
 80110a6:	d102      	bne.n	80110ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80110a8:	2302      	movs	r3, #2
 80110aa:	75fb      	strb	r3, [r7, #23]
 80110ac:	e001      	b.n	80110b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80110ae:	230f      	movs	r3, #15
 80110b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80110b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	371c      	adds	r7, #28
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	785b      	ldrb	r3, [r3, #1]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d13a      	bne.n	8011152 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110e2:	69da      	ldr	r2, [r3, #28]
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	f003 030f 	and.w	r3, r3, #15
 80110ec:	2101      	movs	r1, #1
 80110ee:	fa01 f303 	lsl.w	r3, r1, r3
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	68f9      	ldr	r1, [r7, #12]
 80110f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80110fa:	4313      	orrs	r3, r2
 80110fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	015a      	lsls	r2, r3, #5
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	4413      	add	r3, r2
 8011106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011110:	2b00      	cmp	r3, #0
 8011112:	d155      	bne.n	80111c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	015a      	lsls	r2, r3, #5
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	4413      	add	r3, r2
 801111c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	791b      	ldrb	r3, [r3, #4]
 801112e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011130:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	059b      	lsls	r3, r3, #22
 8011136:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011138:	4313      	orrs	r3, r2
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	0151      	lsls	r1, r2, #5
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	440a      	add	r2, r1
 8011142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801114a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801114e:	6013      	str	r3, [r2, #0]
 8011150:	e036      	b.n	80111c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011158:	69da      	ldr	r2, [r3, #28]
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	f003 030f 	and.w	r3, r3, #15
 8011162:	2101      	movs	r1, #1
 8011164:	fa01 f303 	lsl.w	r3, r1, r3
 8011168:	041b      	lsls	r3, r3, #16
 801116a:	68f9      	ldr	r1, [r7, #12]
 801116c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011170:	4313      	orrs	r3, r2
 8011172:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	015a      	lsls	r2, r3, #5
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	4413      	add	r3, r2
 801117c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011186:	2b00      	cmp	r3, #0
 8011188:	d11a      	bne.n	80111c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	015a      	lsls	r2, r3, #5
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	4413      	add	r3, r2
 8011192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	791b      	ldrb	r3, [r3, #4]
 80111a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80111a6:	430b      	orrs	r3, r1
 80111a8:	4313      	orrs	r3, r2
 80111aa:	68ba      	ldr	r2, [r7, #8]
 80111ac:	0151      	lsls	r1, r2, #5
 80111ae:	68fa      	ldr	r2, [r7, #12]
 80111b0:	440a      	add	r2, r1
 80111b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3714      	adds	r7, #20
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr
	...

080111d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	785b      	ldrb	r3, [r3, #1]
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d161      	bne.n	80112b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	015a      	lsls	r2, r3, #5
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	4413      	add	r3, r2
 80111f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80111fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011202:	d11f      	bne.n	8011244 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	015a      	lsls	r2, r3, #5
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	4413      	add	r3, r2
 801120c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	68ba      	ldr	r2, [r7, #8]
 8011214:	0151      	lsls	r1, r2, #5
 8011216:	68fa      	ldr	r2, [r7, #12]
 8011218:	440a      	add	r2, r1
 801121a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801121e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011222:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	015a      	lsls	r2, r3, #5
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	4413      	add	r3, r2
 801122c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	68ba      	ldr	r2, [r7, #8]
 8011234:	0151      	lsls	r1, r2, #5
 8011236:	68fa      	ldr	r2, [r7, #12]
 8011238:	440a      	add	r2, r1
 801123a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801123e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011242:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801124a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	f003 030f 	and.w	r3, r3, #15
 8011254:	2101      	movs	r1, #1
 8011256:	fa01 f303 	lsl.w	r3, r1, r3
 801125a:	b29b      	uxth	r3, r3
 801125c:	43db      	mvns	r3, r3
 801125e:	68f9      	ldr	r1, [r7, #12]
 8011260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011264:	4013      	ands	r3, r2
 8011266:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801126e:	69da      	ldr	r2, [r3, #28]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	f003 030f 	and.w	r3, r3, #15
 8011278:	2101      	movs	r1, #1
 801127a:	fa01 f303 	lsl.w	r3, r1, r3
 801127e:	b29b      	uxth	r3, r3
 8011280:	43db      	mvns	r3, r3
 8011282:	68f9      	ldr	r1, [r7, #12]
 8011284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011288:	4013      	ands	r3, r2
 801128a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	015a      	lsls	r2, r3, #5
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	4413      	add	r3, r2
 8011294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	0159      	lsls	r1, r3, #5
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	440b      	add	r3, r1
 80112a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112a6:	4619      	mov	r1, r3
 80112a8:	4b35      	ldr	r3, [pc, #212]	; (8011380 <USB_DeactivateEndpoint+0x1b0>)
 80112aa:	4013      	ands	r3, r2
 80112ac:	600b      	str	r3, [r1, #0]
 80112ae:	e060      	b.n	8011372 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	015a      	lsls	r2, r3, #5
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	4413      	add	r3, r2
 80112b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80112c6:	d11f      	bne.n	8011308 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	015a      	lsls	r2, r3, #5
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	4413      	add	r3, r2
 80112d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	0151      	lsls	r1, r2, #5
 80112da:	68fa      	ldr	r2, [r7, #12]
 80112dc:	440a      	add	r2, r1
 80112de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80112e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	015a      	lsls	r2, r3, #5
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	4413      	add	r3, r2
 80112f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	68ba      	ldr	r2, [r7, #8]
 80112f8:	0151      	lsls	r1, r2, #5
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	440a      	add	r2, r1
 80112fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011306:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801130e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	f003 030f 	and.w	r3, r3, #15
 8011318:	2101      	movs	r1, #1
 801131a:	fa01 f303 	lsl.w	r3, r1, r3
 801131e:	041b      	lsls	r3, r3, #16
 8011320:	43db      	mvns	r3, r3
 8011322:	68f9      	ldr	r1, [r7, #12]
 8011324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011328:	4013      	ands	r3, r2
 801132a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011332:	69da      	ldr	r2, [r3, #28]
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	f003 030f 	and.w	r3, r3, #15
 801133c:	2101      	movs	r1, #1
 801133e:	fa01 f303 	lsl.w	r3, r1, r3
 8011342:	041b      	lsls	r3, r3, #16
 8011344:	43db      	mvns	r3, r3
 8011346:	68f9      	ldr	r1, [r7, #12]
 8011348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801134c:	4013      	ands	r3, r2
 801134e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	015a      	lsls	r2, r3, #5
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	4413      	add	r3, r2
 8011358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	0159      	lsls	r1, r3, #5
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	440b      	add	r3, r1
 8011366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801136a:	4619      	mov	r1, r3
 801136c:	4b05      	ldr	r3, [pc, #20]	; (8011384 <USB_DeactivateEndpoint+0x1b4>)
 801136e:	4013      	ands	r3, r2
 8011370:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3714      	adds	r7, #20
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	ec337800 	.word	0xec337800
 8011384:	eff37800 	.word	0xeff37800

08011388 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b08a      	sub	sp, #40	; 0x28
 801138c:	af02      	add	r7, sp, #8
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	4613      	mov	r3, r2
 8011394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	785b      	ldrb	r3, [r3, #1]
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	f040 815c 	bne.w	8011662 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	699b      	ldr	r3, [r3, #24]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d132      	bne.n	8011418 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	015a      	lsls	r2, r3, #5
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	4413      	add	r3, r2
 80113ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113be:	691b      	ldr	r3, [r3, #16]
 80113c0:	69ba      	ldr	r2, [r7, #24]
 80113c2:	0151      	lsls	r1, r2, #5
 80113c4:	69fa      	ldr	r2, [r7, #28]
 80113c6:	440a      	add	r2, r1
 80113c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80113d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80113d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	015a      	lsls	r2, r3, #5
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	4413      	add	r3, r2
 80113de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113e2:	691b      	ldr	r3, [r3, #16]
 80113e4:	69ba      	ldr	r2, [r7, #24]
 80113e6:	0151      	lsls	r1, r2, #5
 80113e8:	69fa      	ldr	r2, [r7, #28]
 80113ea:	440a      	add	r2, r1
 80113ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80113f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	015a      	lsls	r2, r3, #5
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	4413      	add	r3, r2
 80113fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011402:	691b      	ldr	r3, [r3, #16]
 8011404:	69ba      	ldr	r2, [r7, #24]
 8011406:	0151      	lsls	r1, r2, #5
 8011408:	69fa      	ldr	r2, [r7, #28]
 801140a:	440a      	add	r2, r1
 801140c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011410:	0cdb      	lsrs	r3, r3, #19
 8011412:	04db      	lsls	r3, r3, #19
 8011414:	6113      	str	r3, [r2, #16]
 8011416:	e074      	b.n	8011502 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	015a      	lsls	r2, r3, #5
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	4413      	add	r3, r2
 8011420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011424:	691b      	ldr	r3, [r3, #16]
 8011426:	69ba      	ldr	r2, [r7, #24]
 8011428:	0151      	lsls	r1, r2, #5
 801142a:	69fa      	ldr	r2, [r7, #28]
 801142c:	440a      	add	r2, r1
 801142e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011432:	0cdb      	lsrs	r3, r3, #19
 8011434:	04db      	lsls	r3, r3, #19
 8011436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	015a      	lsls	r2, r3, #5
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	4413      	add	r3, r2
 8011440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	69ba      	ldr	r2, [r7, #24]
 8011448:	0151      	lsls	r1, r2, #5
 801144a:	69fa      	ldr	r2, [r7, #28]
 801144c:	440a      	add	r2, r1
 801144e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011452:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011456:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801145a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	015a      	lsls	r2, r3, #5
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	4413      	add	r3, r2
 8011464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011468:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	6999      	ldr	r1, [r3, #24]
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	440b      	add	r3, r1
 8011474:	1e59      	subs	r1, r3, #1
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	fbb1 f3f3 	udiv	r3, r1, r3
 801147e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011480:	4b9d      	ldr	r3, [pc, #628]	; (80116f8 <USB_EPStartXfer+0x370>)
 8011482:	400b      	ands	r3, r1
 8011484:	69b9      	ldr	r1, [r7, #24]
 8011486:	0148      	lsls	r0, r1, #5
 8011488:	69f9      	ldr	r1, [r7, #28]
 801148a:	4401      	add	r1, r0
 801148c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011490:	4313      	orrs	r3, r2
 8011492:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	015a      	lsls	r2, r3, #5
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	4413      	add	r3, r2
 801149c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114a0:	691a      	ldr	r2, [r3, #16]
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	699b      	ldr	r3, [r3, #24]
 80114a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80114aa:	69b9      	ldr	r1, [r7, #24]
 80114ac:	0148      	lsls	r0, r1, #5
 80114ae:	69f9      	ldr	r1, [r7, #28]
 80114b0:	4401      	add	r1, r0
 80114b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80114b6:	4313      	orrs	r3, r2
 80114b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	791b      	ldrb	r3, [r3, #4]
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d11f      	bne.n	8011502 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	015a      	lsls	r2, r3, #5
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	4413      	add	r3, r2
 80114ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	69ba      	ldr	r2, [r7, #24]
 80114d2:	0151      	lsls	r1, r2, #5
 80114d4:	69fa      	ldr	r2, [r7, #28]
 80114d6:	440a      	add	r2, r1
 80114d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80114e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	015a      	lsls	r2, r3, #5
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	4413      	add	r3, r2
 80114ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114ee:	691b      	ldr	r3, [r3, #16]
 80114f0:	69ba      	ldr	r2, [r7, #24]
 80114f2:	0151      	lsls	r1, r2, #5
 80114f4:	69fa      	ldr	r2, [r7, #28]
 80114f6:	440a      	add	r2, r1
 80114f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011500:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011502:	79fb      	ldrb	r3, [r7, #7]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d14b      	bne.n	80115a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	695b      	ldr	r3, [r3, #20]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d009      	beq.n	8011524 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	015a      	lsls	r2, r3, #5
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	4413      	add	r3, r2
 8011518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801151c:	461a      	mov	r2, r3
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	695b      	ldr	r3, [r3, #20]
 8011522:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	791b      	ldrb	r3, [r3, #4]
 8011528:	2b01      	cmp	r3, #1
 801152a:	d128      	bne.n	801157e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011538:	2b00      	cmp	r3, #0
 801153a:	d110      	bne.n	801155e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801153c:	69bb      	ldr	r3, [r7, #24]
 801153e:	015a      	lsls	r2, r3, #5
 8011540:	69fb      	ldr	r3, [r7, #28]
 8011542:	4413      	add	r3, r2
 8011544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	69ba      	ldr	r2, [r7, #24]
 801154c:	0151      	lsls	r1, r2, #5
 801154e:	69fa      	ldr	r2, [r7, #28]
 8011550:	440a      	add	r2, r1
 8011552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801155a:	6013      	str	r3, [r2, #0]
 801155c:	e00f      	b.n	801157e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	015a      	lsls	r2, r3, #5
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	4413      	add	r3, r2
 8011566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	69ba      	ldr	r2, [r7, #24]
 801156e:	0151      	lsls	r1, r2, #5
 8011570:	69fa      	ldr	r2, [r7, #28]
 8011572:	440a      	add	r2, r1
 8011574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801157c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	015a      	lsls	r2, r3, #5
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	4413      	add	r3, r2
 8011586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	69ba      	ldr	r2, [r7, #24]
 801158e:	0151      	lsls	r1, r2, #5
 8011590:	69fa      	ldr	r2, [r7, #28]
 8011592:	440a      	add	r2, r1
 8011594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801159c:	6013      	str	r3, [r2, #0]
 801159e:	e133      	b.n	8011808 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	015a      	lsls	r2, r3, #5
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	4413      	add	r3, r2
 80115a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	69ba      	ldr	r2, [r7, #24]
 80115b0:	0151      	lsls	r1, r2, #5
 80115b2:	69fa      	ldr	r2, [r7, #28]
 80115b4:	440a      	add	r2, r1
 80115b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80115be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	791b      	ldrb	r3, [r3, #4]
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d015      	beq.n	80115f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	699b      	ldr	r3, [r3, #24]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f000 811b 	beq.w	8011808 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	f003 030f 	and.w	r3, r3, #15
 80115e2:	2101      	movs	r1, #1
 80115e4:	fa01 f303 	lsl.w	r3, r1, r3
 80115e8:	69f9      	ldr	r1, [r7, #28]
 80115ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115ee:	4313      	orrs	r3, r2
 80115f0:	634b      	str	r3, [r1, #52]	; 0x34
 80115f2:	e109      	b.n	8011808 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115fa:	689b      	ldr	r3, [r3, #8]
 80115fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011600:	2b00      	cmp	r3, #0
 8011602:	d110      	bne.n	8011626 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	015a      	lsls	r2, r3, #5
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	4413      	add	r3, r2
 801160c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	69ba      	ldr	r2, [r7, #24]
 8011614:	0151      	lsls	r1, r2, #5
 8011616:	69fa      	ldr	r2, [r7, #28]
 8011618:	440a      	add	r2, r1
 801161a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801161e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011622:	6013      	str	r3, [r2, #0]
 8011624:	e00f      	b.n	8011646 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011626:	69bb      	ldr	r3, [r7, #24]
 8011628:	015a      	lsls	r2, r3, #5
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	4413      	add	r3, r2
 801162e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	69ba      	ldr	r2, [r7, #24]
 8011636:	0151      	lsls	r1, r2, #5
 8011638:	69fa      	ldr	r2, [r7, #28]
 801163a:	440a      	add	r2, r1
 801163c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011644:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	6919      	ldr	r1, [r3, #16]
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	781a      	ldrb	r2, [r3, #0]
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	699b      	ldr	r3, [r3, #24]
 8011652:	b298      	uxth	r0, r3
 8011654:	79fb      	ldrb	r3, [r7, #7]
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	4603      	mov	r3, r0
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f000 fade 	bl	8011c1c <USB_WritePacket>
 8011660:	e0d2      	b.n	8011808 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	015a      	lsls	r2, r3, #5
 8011666:	69fb      	ldr	r3, [r7, #28]
 8011668:	4413      	add	r3, r2
 801166a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801166e:	691b      	ldr	r3, [r3, #16]
 8011670:	69ba      	ldr	r2, [r7, #24]
 8011672:	0151      	lsls	r1, r2, #5
 8011674:	69fa      	ldr	r2, [r7, #28]
 8011676:	440a      	add	r2, r1
 8011678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801167c:	0cdb      	lsrs	r3, r3, #19
 801167e:	04db      	lsls	r3, r3, #19
 8011680:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	015a      	lsls	r2, r3, #5
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	4413      	add	r3, r2
 801168a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801168e:	691b      	ldr	r3, [r3, #16]
 8011690:	69ba      	ldr	r2, [r7, #24]
 8011692:	0151      	lsls	r1, r2, #5
 8011694:	69fa      	ldr	r2, [r7, #28]
 8011696:	440a      	add	r2, r1
 8011698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801169c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80116a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80116a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d126      	bne.n	80116fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	015a      	lsls	r2, r3, #5
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	4413      	add	r3, r2
 80116b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ba:	691a      	ldr	r2, [r3, #16]
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80116c4:	69b9      	ldr	r1, [r7, #24]
 80116c6:	0148      	lsls	r0, r1, #5
 80116c8:	69f9      	ldr	r1, [r7, #28]
 80116ca:	4401      	add	r1, r0
 80116cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80116d0:	4313      	orrs	r3, r2
 80116d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	015a      	lsls	r2, r3, #5
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	4413      	add	r3, r2
 80116dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116e0:	691b      	ldr	r3, [r3, #16]
 80116e2:	69ba      	ldr	r2, [r7, #24]
 80116e4:	0151      	lsls	r1, r2, #5
 80116e6:	69fa      	ldr	r2, [r7, #28]
 80116e8:	440a      	add	r2, r1
 80116ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116f2:	6113      	str	r3, [r2, #16]
 80116f4:	e03a      	b.n	801176c <USB_EPStartXfer+0x3e4>
 80116f6:	bf00      	nop
 80116f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	699a      	ldr	r2, [r3, #24]
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	4413      	add	r3, r2
 8011706:	1e5a      	subs	r2, r3, #1
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011710:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	68db      	ldr	r3, [r3, #12]
 8011716:	8afa      	ldrh	r2, [r7, #22]
 8011718:	fb03 f202 	mul.w	r2, r3, r2
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	015a      	lsls	r2, r3, #5
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	4413      	add	r3, r2
 8011728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801172c:	691a      	ldr	r2, [r3, #16]
 801172e:	8afb      	ldrh	r3, [r7, #22]
 8011730:	04d9      	lsls	r1, r3, #19
 8011732:	4b38      	ldr	r3, [pc, #224]	; (8011814 <USB_EPStartXfer+0x48c>)
 8011734:	400b      	ands	r3, r1
 8011736:	69b9      	ldr	r1, [r7, #24]
 8011738:	0148      	lsls	r0, r1, #5
 801173a:	69f9      	ldr	r1, [r7, #28]
 801173c:	4401      	add	r1, r0
 801173e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011742:	4313      	orrs	r3, r2
 8011744:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	015a      	lsls	r2, r3, #5
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	4413      	add	r3, r2
 801174e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011752:	691a      	ldr	r2, [r3, #16]
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	69db      	ldr	r3, [r3, #28]
 8011758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801175c:	69b9      	ldr	r1, [r7, #24]
 801175e:	0148      	lsls	r0, r1, #5
 8011760:	69f9      	ldr	r1, [r7, #28]
 8011762:	4401      	add	r1, r0
 8011764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011768:	4313      	orrs	r3, r2
 801176a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801176c:	79fb      	ldrb	r3, [r7, #7]
 801176e:	2b01      	cmp	r3, #1
 8011770:	d10d      	bne.n	801178e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d009      	beq.n	801178e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	6919      	ldr	r1, [r3, #16]
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	015a      	lsls	r2, r3, #5
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	4413      	add	r3, r2
 8011786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801178a:	460a      	mov	r2, r1
 801178c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	791b      	ldrb	r3, [r3, #4]
 8011792:	2b01      	cmp	r3, #1
 8011794:	d128      	bne.n	80117e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011796:	69fb      	ldr	r3, [r7, #28]
 8011798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d110      	bne.n	80117c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	015a      	lsls	r2, r3, #5
 80117aa:	69fb      	ldr	r3, [r7, #28]
 80117ac:	4413      	add	r3, r2
 80117ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	69ba      	ldr	r2, [r7, #24]
 80117b6:	0151      	lsls	r1, r2, #5
 80117b8:	69fa      	ldr	r2, [r7, #28]
 80117ba:	440a      	add	r2, r1
 80117bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117c4:	6013      	str	r3, [r2, #0]
 80117c6:	e00f      	b.n	80117e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	015a      	lsls	r2, r3, #5
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	4413      	add	r3, r2
 80117d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	69ba      	ldr	r2, [r7, #24]
 80117d8:	0151      	lsls	r1, r2, #5
 80117da:	69fa      	ldr	r2, [r7, #28]
 80117dc:	440a      	add	r2, r1
 80117de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	015a      	lsls	r2, r3, #5
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	4413      	add	r3, r2
 80117f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	69ba      	ldr	r2, [r7, #24]
 80117f8:	0151      	lsls	r1, r2, #5
 80117fa:	69fa      	ldr	r2, [r7, #28]
 80117fc:	440a      	add	r2, r1
 80117fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011808:	2300      	movs	r3, #0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3720      	adds	r7, #32
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	1ff80000 	.word	0x1ff80000

08011818 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011818:	b480      	push	{r7}
 801181a:	b087      	sub	sp, #28
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	4613      	mov	r3, r2
 8011824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	785b      	ldrb	r3, [r3, #1]
 8011834:	2b01      	cmp	r3, #1
 8011836:	f040 80ce 	bne.w	80119d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	699b      	ldr	r3, [r3, #24]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d132      	bne.n	80118a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	015a      	lsls	r2, r3, #5
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	4413      	add	r3, r2
 801184a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801184e:	691b      	ldr	r3, [r3, #16]
 8011850:	693a      	ldr	r2, [r7, #16]
 8011852:	0151      	lsls	r1, r2, #5
 8011854:	697a      	ldr	r2, [r7, #20]
 8011856:	440a      	add	r2, r1
 8011858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801185c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	015a      	lsls	r2, r3, #5
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	4413      	add	r3, r2
 801186e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011872:	691b      	ldr	r3, [r3, #16]
 8011874:	693a      	ldr	r2, [r7, #16]
 8011876:	0151      	lsls	r1, r2, #5
 8011878:	697a      	ldr	r2, [r7, #20]
 801187a:	440a      	add	r2, r1
 801187c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	015a      	lsls	r2, r3, #5
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	4413      	add	r3, r2
 801188e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011892:	691b      	ldr	r3, [r3, #16]
 8011894:	693a      	ldr	r2, [r7, #16]
 8011896:	0151      	lsls	r1, r2, #5
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	440a      	add	r2, r1
 801189c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118a0:	0cdb      	lsrs	r3, r3, #19
 80118a2:	04db      	lsls	r3, r3, #19
 80118a4:	6113      	str	r3, [r2, #16]
 80118a6:	e04e      	b.n	8011946 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	015a      	lsls	r2, r3, #5
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	4413      	add	r3, r2
 80118b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118b4:	691b      	ldr	r3, [r3, #16]
 80118b6:	693a      	ldr	r2, [r7, #16]
 80118b8:	0151      	lsls	r1, r2, #5
 80118ba:	697a      	ldr	r2, [r7, #20]
 80118bc:	440a      	add	r2, r1
 80118be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118c2:	0cdb      	lsrs	r3, r3, #19
 80118c4:	04db      	lsls	r3, r3, #19
 80118c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	015a      	lsls	r2, r3, #5
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d4:	691b      	ldr	r3, [r3, #16]
 80118d6:	693a      	ldr	r2, [r7, #16]
 80118d8:	0151      	lsls	r1, r2, #5
 80118da:	697a      	ldr	r2, [r7, #20]
 80118dc:	440a      	add	r2, r1
 80118de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80118e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80118ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	699a      	ldr	r2, [r3, #24]
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d903      	bls.n	8011900 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	68da      	ldr	r2, [r3, #12]
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	015a      	lsls	r2, r3, #5
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	4413      	add	r3, r2
 8011908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801190c:	691b      	ldr	r3, [r3, #16]
 801190e:	693a      	ldr	r2, [r7, #16]
 8011910:	0151      	lsls	r1, r2, #5
 8011912:	697a      	ldr	r2, [r7, #20]
 8011914:	440a      	add	r2, r1
 8011916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801191a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801191e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	015a      	lsls	r2, r3, #5
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	4413      	add	r3, r2
 8011928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801192c:	691a      	ldr	r2, [r3, #16]
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	699b      	ldr	r3, [r3, #24]
 8011932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011936:	6939      	ldr	r1, [r7, #16]
 8011938:	0148      	lsls	r0, r1, #5
 801193a:	6979      	ldr	r1, [r7, #20]
 801193c:	4401      	add	r1, r0
 801193e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011942:	4313      	orrs	r3, r2
 8011944:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011946:	79fb      	ldrb	r3, [r7, #7]
 8011948:	2b01      	cmp	r3, #1
 801194a:	d11e      	bne.n	801198a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	695b      	ldr	r3, [r3, #20]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d009      	beq.n	8011968 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	015a      	lsls	r2, r3, #5
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	4413      	add	r3, r2
 801195c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011960:	461a      	mov	r2, r3
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	695b      	ldr	r3, [r3, #20]
 8011966:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	015a      	lsls	r2, r3, #5
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	4413      	add	r3, r2
 8011970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	693a      	ldr	r2, [r7, #16]
 8011978:	0151      	lsls	r1, r2, #5
 801197a:	697a      	ldr	r2, [r7, #20]
 801197c:	440a      	add	r2, r1
 801197e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011982:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011986:	6013      	str	r3, [r2, #0]
 8011988:	e097      	b.n	8011aba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	015a      	lsls	r2, r3, #5
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	4413      	add	r3, r2
 8011992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	693a      	ldr	r2, [r7, #16]
 801199a:	0151      	lsls	r1, r2, #5
 801199c:	697a      	ldr	r2, [r7, #20]
 801199e:	440a      	add	r2, r1
 80119a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80119a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	699b      	ldr	r3, [r3, #24]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	f000 8083 	beq.w	8011aba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	f003 030f 	and.w	r3, r3, #15
 80119c4:	2101      	movs	r1, #1
 80119c6:	fa01 f303 	lsl.w	r3, r1, r3
 80119ca:	6979      	ldr	r1, [r7, #20]
 80119cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80119d0:	4313      	orrs	r3, r2
 80119d2:	634b      	str	r3, [r1, #52]	; 0x34
 80119d4:	e071      	b.n	8011aba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	015a      	lsls	r2, r3, #5
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	4413      	add	r3, r2
 80119de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119e2:	691b      	ldr	r3, [r3, #16]
 80119e4:	693a      	ldr	r2, [r7, #16]
 80119e6:	0151      	lsls	r1, r2, #5
 80119e8:	697a      	ldr	r2, [r7, #20]
 80119ea:	440a      	add	r2, r1
 80119ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119f0:	0cdb      	lsrs	r3, r3, #19
 80119f2:	04db      	lsls	r3, r3, #19
 80119f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	015a      	lsls	r2, r3, #5
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	4413      	add	r3, r2
 80119fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a02:	691b      	ldr	r3, [r3, #16]
 8011a04:	693a      	ldr	r2, [r7, #16]
 8011a06:	0151      	lsls	r1, r2, #5
 8011a08:	697a      	ldr	r2, [r7, #20]
 8011a0a:	440a      	add	r2, r1
 8011a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011a14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011a18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	699b      	ldr	r3, [r3, #24]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d003      	beq.n	8011a2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	68da      	ldr	r2, [r3, #12]
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	68da      	ldr	r2, [r3, #12]
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	015a      	lsls	r2, r3, #5
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a3e:	691b      	ldr	r3, [r3, #16]
 8011a40:	693a      	ldr	r2, [r7, #16]
 8011a42:	0151      	lsls	r1, r2, #5
 8011a44:	697a      	ldr	r2, [r7, #20]
 8011a46:	440a      	add	r2, r1
 8011a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	015a      	lsls	r2, r3, #5
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	4413      	add	r3, r2
 8011a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a5e:	691a      	ldr	r2, [r3, #16]
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	69db      	ldr	r3, [r3, #28]
 8011a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a68:	6939      	ldr	r1, [r7, #16]
 8011a6a:	0148      	lsls	r0, r1, #5
 8011a6c:	6979      	ldr	r1, [r7, #20]
 8011a6e:	4401      	add	r1, r0
 8011a70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a74:	4313      	orrs	r3, r2
 8011a76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011a78:	79fb      	ldrb	r3, [r7, #7]
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d10d      	bne.n	8011a9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	691b      	ldr	r3, [r3, #16]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d009      	beq.n	8011a9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	6919      	ldr	r1, [r3, #16]
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	015a      	lsls	r2, r3, #5
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	4413      	add	r3, r2
 8011a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a96:	460a      	mov	r2, r1
 8011a98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	015a      	lsls	r2, r3, #5
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	693a      	ldr	r2, [r7, #16]
 8011aaa:	0151      	lsls	r1, r2, #5
 8011aac:	697a      	ldr	r2, [r7, #20]
 8011aae:	440a      	add	r2, r1
 8011ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ab4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ab8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011aba:	2300      	movs	r3, #0
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	371c      	adds	r7, #28
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b087      	sub	sp, #28
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	785b      	ldrb	r3, [r3, #1]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d14a      	bne.n	8011b7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	015a      	lsls	r2, r3, #5
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	4413      	add	r3, r2
 8011af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011afe:	f040 8086 	bne.w	8011c0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	015a      	lsls	r2, r3, #5
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	7812      	ldrb	r2, [r2, #0]
 8011b16:	0151      	lsls	r1, r2, #5
 8011b18:	693a      	ldr	r2, [r7, #16]
 8011b1a:	440a      	add	r2, r1
 8011b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011b24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	015a      	lsls	r2, r3, #5
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	4413      	add	r3, r2
 8011b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	7812      	ldrb	r2, [r2, #0]
 8011b3a:	0151      	lsls	r1, r2, #5
 8011b3c:	693a      	ldr	r2, [r7, #16]
 8011b3e:	440a      	add	r2, r1
 8011b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	f242 7210 	movw	r2, #10000	; 0x2710
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d902      	bls.n	8011b60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8011b5e:	e056      	b.n	8011c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	015a      	lsls	r2, r3, #5
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	4413      	add	r3, r2
 8011b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011b78:	d0e7      	beq.n	8011b4a <USB_EPStopXfer+0x82>
 8011b7a:	e048      	b.n	8011c0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	015a      	lsls	r2, r3, #5
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	4413      	add	r3, r2
 8011b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011b94:	d13b      	bne.n	8011c0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	015a      	lsls	r2, r3, #5
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	683a      	ldr	r2, [r7, #0]
 8011ba8:	7812      	ldrb	r2, [r2, #0]
 8011baa:	0151      	lsls	r1, r2, #5
 8011bac:	693a      	ldr	r2, [r7, #16]
 8011bae:	440a      	add	r2, r1
 8011bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	015a      	lsls	r2, r3, #5
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	7812      	ldrb	r2, [r2, #0]
 8011bce:	0151      	lsls	r1, r2, #5
 8011bd0:	693a      	ldr	r2, [r7, #16]
 8011bd2:	440a      	add	r2, r1
 8011bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011bdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	3301      	adds	r3, #1
 8011be2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f242 7210 	movw	r2, #10000	; 0x2710
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d902      	bls.n	8011bf4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8011bf2:	e00c      	b.n	8011c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	015a      	lsls	r2, r3, #5
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c0c:	d0e7      	beq.n	8011bde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	371c      	adds	r7, #28
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b089      	sub	sp, #36	; 0x24
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	4611      	mov	r1, r2
 8011c28:	461a      	mov	r2, r3
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	71fb      	strb	r3, [r7, #7]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d123      	bne.n	8011c8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011c42:	88bb      	ldrh	r3, [r7, #4]
 8011c44:	3303      	adds	r3, #3
 8011c46:	089b      	lsrs	r3, r3, #2
 8011c48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	61bb      	str	r3, [r7, #24]
 8011c4e:	e018      	b.n	8011c82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011c50:	79fb      	ldrb	r3, [r7, #7]
 8011c52:	031a      	lsls	r2, r3, #12
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	4413      	add	r3, r2
 8011c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011c64:	69fb      	ldr	r3, [r7, #28]
 8011c66:	3301      	adds	r3, #1
 8011c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	3301      	adds	r3, #1
 8011c74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011c7c:	69bb      	ldr	r3, [r7, #24]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	61bb      	str	r3, [r7, #24]
 8011c82:	69ba      	ldr	r2, [r7, #24]
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d3e2      	bcc.n	8011c50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3724      	adds	r7, #36	; 0x24
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b08b      	sub	sp, #44	; 0x2c
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011cae:	88fb      	ldrh	r3, [r7, #6]
 8011cb0:	089b      	lsrs	r3, r3, #2
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011cb6:	88fb      	ldrh	r3, [r7, #6]
 8011cb8:	f003 0303 	and.w	r3, r3, #3
 8011cbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	623b      	str	r3, [r7, #32]
 8011cc2:	e014      	b.n	8011cee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	601a      	str	r2, [r3, #0]
    pDest++;
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd8:	3301      	adds	r3, #1
 8011cda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	3301      	adds	r3, #1
 8011ce0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011ce8:	6a3b      	ldr	r3, [r7, #32]
 8011cea:	3301      	adds	r3, #1
 8011cec:	623b      	str	r3, [r7, #32]
 8011cee:	6a3a      	ldr	r2, [r7, #32]
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d3e6      	bcc.n	8011cc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011cf6:	8bfb      	ldrh	r3, [r7, #30]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d01e      	beq.n	8011d3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d06:	461a      	mov	r2, r3
 8011d08:	f107 0310 	add.w	r3, r7, #16
 8011d0c:	6812      	ldr	r2, [r2, #0]
 8011d0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011d10:	693a      	ldr	r2, [r7, #16]
 8011d12:	6a3b      	ldr	r3, [r7, #32]
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	fa22 f303 	lsr.w	r3, r2, r3
 8011d1c:	b2da      	uxtb	r2, r3
 8011d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d20:	701a      	strb	r2, [r3, #0]
      i++;
 8011d22:	6a3b      	ldr	r3, [r7, #32]
 8011d24:	3301      	adds	r3, #1
 8011d26:	623b      	str	r3, [r7, #32]
      pDest++;
 8011d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8011d2e:	8bfb      	ldrh	r3, [r7, #30]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011d34:	8bfb      	ldrh	r3, [r7, #30]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1ea      	bne.n	8011d10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	372c      	adds	r7, #44	; 0x2c
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b085      	sub	sp, #20
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	785b      	ldrb	r3, [r3, #1]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d12c      	bne.n	8011dbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	015a      	lsls	r2, r3, #5
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	db12      	blt.n	8011d9c <USB_EPSetStall+0x54>
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00f      	beq.n	8011d9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	015a      	lsls	r2, r3, #5
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	4413      	add	r3, r2
 8011d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	68ba      	ldr	r2, [r7, #8]
 8011d8c:	0151      	lsls	r1, r2, #5
 8011d8e:	68fa      	ldr	r2, [r7, #12]
 8011d90:	440a      	add	r2, r1
 8011d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	015a      	lsls	r2, r3, #5
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	4413      	add	r3, r2
 8011da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	68ba      	ldr	r2, [r7, #8]
 8011dac:	0151      	lsls	r1, r2, #5
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	440a      	add	r2, r1
 8011db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011dba:	6013      	str	r3, [r2, #0]
 8011dbc:	e02b      	b.n	8011e16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	015a      	lsls	r2, r3, #5
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	4413      	add	r3, r2
 8011dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	db12      	blt.n	8011df6 <USB_EPSetStall+0xae>
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00f      	beq.n	8011df6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	015a      	lsls	r2, r3, #5
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	4413      	add	r3, r2
 8011dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	68ba      	ldr	r2, [r7, #8]
 8011de6:	0151      	lsls	r1, r2, #5
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	440a      	add	r2, r1
 8011dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011df0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011df4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	015a      	lsls	r2, r3, #5
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	68ba      	ldr	r2, [r7, #8]
 8011e06:	0151      	lsls	r1, r2, #5
 8011e08:	68fa      	ldr	r2, [r7, #12]
 8011e0a:	440a      	add	r2, r1
 8011e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011e14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011e16:	2300      	movs	r3, #0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b085      	sub	sp, #20
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	785b      	ldrb	r3, [r3, #1]
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d128      	bne.n	8011e92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	015a      	lsls	r2, r3, #5
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	4413      	add	r3, r2
 8011e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	0151      	lsls	r1, r2, #5
 8011e52:	68fa      	ldr	r2, [r7, #12]
 8011e54:	440a      	add	r2, r1
 8011e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011e5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	791b      	ldrb	r3, [r3, #4]
 8011e64:	2b03      	cmp	r3, #3
 8011e66:	d003      	beq.n	8011e70 <USB_EPClearStall+0x4c>
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	791b      	ldrb	r3, [r3, #4]
 8011e6c:	2b02      	cmp	r3, #2
 8011e6e:	d138      	bne.n	8011ee2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	015a      	lsls	r2, r3, #5
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	4413      	add	r3, r2
 8011e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	0151      	lsls	r1, r2, #5
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	440a      	add	r2, r1
 8011e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e8e:	6013      	str	r3, [r2, #0]
 8011e90:	e027      	b.n	8011ee2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	015a      	lsls	r2, r3, #5
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	4413      	add	r3, r2
 8011e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	68ba      	ldr	r2, [r7, #8]
 8011ea2:	0151      	lsls	r1, r2, #5
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	440a      	add	r2, r1
 8011ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011eb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	791b      	ldrb	r3, [r3, #4]
 8011eb6:	2b03      	cmp	r3, #3
 8011eb8:	d003      	beq.n	8011ec2 <USB_EPClearStall+0x9e>
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	791b      	ldrb	r3, [r3, #4]
 8011ebe:	2b02      	cmp	r3, #2
 8011ec0:	d10f      	bne.n	8011ee2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	015a      	lsls	r2, r3, #5
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	4413      	add	r3, r2
 8011eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	68ba      	ldr	r2, [r7, #8]
 8011ed2:	0151      	lsls	r1, r2, #5
 8011ed4:	68fa      	ldr	r2, [r7, #12]
 8011ed6:	440a      	add	r2, r1
 8011ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ee0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011ee2:	2300      	movs	r3, #0
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3714      	adds	r7, #20
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr

08011ef0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	460b      	mov	r3, r1
 8011efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011f12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f1a:	681a      	ldr	r2, [r3, #0]
 8011f1c:	78fb      	ldrb	r3, [r7, #3]
 8011f1e:	011b      	lsls	r3, r3, #4
 8011f20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011f24:	68f9      	ldr	r1, [r7, #12]
 8011f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3714      	adds	r7, #20
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr

08011f3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	68fa      	ldr	r2, [r7, #12]
 8011f52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011f56:	f023 0303 	bic.w	r3, r3, #3
 8011f5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f62:	685b      	ldr	r3, [r3, #4]
 8011f64:	68fa      	ldr	r2, [r7, #12]
 8011f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f6a:	f023 0302 	bic.w	r3, r3, #2
 8011f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3714      	adds	r7, #20
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011f7e:	b480      	push	{r7}
 8011f80:	b085      	sub	sp, #20
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011f98:	f023 0303 	bic.w	r3, r3, #3
 8011f9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	68fa      	ldr	r2, [r7, #12]
 8011fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011fac:	f043 0302 	orr.w	r3, r3, #2
 8011fb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011fb2:	2300      	movs	r3, #0
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr

08011fc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b085      	sub	sp, #20
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	695b      	ldr	r3, [r3, #20]
 8011fcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	699b      	ldr	r3, [r3, #24]
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3714      	adds	r7, #20
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011fe6:	b480      	push	{r7}
 8011fe8:	b085      	sub	sp, #20
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ff8:	699b      	ldr	r3, [r3, #24]
 8011ffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012002:	69db      	ldr	r3, [r3, #28]
 8012004:	68ba      	ldr	r2, [r7, #8]
 8012006:	4013      	ands	r3, r2
 8012008:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	0c1b      	lsrs	r3, r3, #16
}
 801200e:	4618      	mov	r0, r3
 8012010:	3714      	adds	r7, #20
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr

0801201a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801201a:	b480      	push	{r7}
 801201c:	b085      	sub	sp, #20
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012036:	69db      	ldr	r3, [r3, #28]
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	4013      	ands	r3, r2
 801203c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	b29b      	uxth	r3, r3
}
 8012042:	4618      	mov	r0, r3
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr

0801204e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801204e:	b480      	push	{r7}
 8012050:	b085      	sub	sp, #20
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	460b      	mov	r3, r1
 8012058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801205e:	78fb      	ldrb	r3, [r7, #3]
 8012060:	015a      	lsls	r2, r3, #5
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	4413      	add	r3, r2
 8012066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801206a:	689b      	ldr	r3, [r3, #8]
 801206c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012074:	695b      	ldr	r3, [r3, #20]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	4013      	ands	r3, r2
 801207a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801207c:	68bb      	ldr	r3, [r7, #8]
}
 801207e:	4618      	mov	r0, r3
 8012080:	3714      	adds	r7, #20
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr

0801208a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801208a:	b480      	push	{r7}
 801208c:	b087      	sub	sp, #28
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	460b      	mov	r3, r1
 8012094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80120ae:	78fb      	ldrb	r3, [r7, #3]
 80120b0:	f003 030f 	and.w	r3, r3, #15
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	fa22 f303 	lsr.w	r3, r2, r3
 80120ba:	01db      	lsls	r3, r3, #7
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	693a      	ldr	r2, [r7, #16]
 80120c0:	4313      	orrs	r3, r2
 80120c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80120c4:	78fb      	ldrb	r3, [r7, #3]
 80120c6:	015a      	lsls	r2, r3, #5
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	4413      	add	r3, r2
 80120cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120d0:	689b      	ldr	r3, [r3, #8]
 80120d2:	693a      	ldr	r2, [r7, #16]
 80120d4:	4013      	ands	r3, r2
 80120d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80120d8:	68bb      	ldr	r3, [r7, #8]
}
 80120da:	4618      	mov	r0, r3
 80120dc:	371c      	adds	r7, #28
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr

080120e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80120e6:	b480      	push	{r7}
 80120e8:	b083      	sub	sp, #12
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	695b      	ldr	r3, [r3, #20]
 80120f2:	f003 0301 	and.w	r3, r3, #1
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012102:	b480      	push	{r7}
 8012104:	b085      	sub	sp, #20
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	68fa      	ldr	r2, [r7, #12]
 8012118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801211c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012120:	f023 0307 	bic.w	r3, r3, #7
 8012124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	68fa      	ldr	r2, [r7, #12]
 8012130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801213a:	2300      	movs	r3, #0
}
 801213c:	4618      	mov	r0, r3
 801213e:	3714      	adds	r7, #20
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012148:	b480      	push	{r7}
 801214a:	b087      	sub	sp, #28
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	460b      	mov	r3, r1
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	333c      	adds	r3, #60	; 0x3c
 801215e:	3304      	adds	r3, #4
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	4a26      	ldr	r2, [pc, #152]	; (8012200 <USB_EP0_OutStart+0xb8>)
 8012168:	4293      	cmp	r3, r2
 801216a:	d90a      	bls.n	8012182 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801217c:	d101      	bne.n	8012182 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801217e:	2300      	movs	r3, #0
 8012180:	e037      	b.n	80121f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012188:	461a      	mov	r2, r3
 801218a:	2300      	movs	r3, #0
 801218c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012194:	691b      	ldr	r3, [r3, #16]
 8012196:	697a      	ldr	r2, [r7, #20]
 8012198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801219c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80121a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	697a      	ldr	r2, [r7, #20]
 80121ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121b0:	f043 0318 	orr.w	r3, r3, #24
 80121b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121bc:	691b      	ldr	r3, [r3, #16]
 80121be:	697a      	ldr	r2, [r7, #20]
 80121c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80121c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80121ca:	7afb      	ldrb	r3, [r7, #11]
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d10f      	bne.n	80121f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121d6:	461a      	mov	r2, r3
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80121ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80121f0:	2300      	movs	r3, #0
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	371c      	adds	r7, #28
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr
 80121fe:	bf00      	nop
 8012200:	4f54300a 	.word	0x4f54300a

08012204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012204:	b480      	push	{r7}
 8012206:	b085      	sub	sp, #20
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801220c:	2300      	movs	r3, #0
 801220e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	3301      	adds	r3, #1
 8012214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	4a13      	ldr	r2, [pc, #76]	; (8012268 <USB_CoreReset+0x64>)
 801221a:	4293      	cmp	r3, r2
 801221c:	d901      	bls.n	8012222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801221e:	2303      	movs	r3, #3
 8012220:	e01b      	b.n	801225a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	691b      	ldr	r3, [r3, #16]
 8012226:	2b00      	cmp	r3, #0
 8012228:	daf2      	bge.n	8012210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801222a:	2300      	movs	r3, #0
 801222c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	691b      	ldr	r3, [r3, #16]
 8012232:	f043 0201 	orr.w	r2, r3, #1
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	3301      	adds	r3, #1
 801223e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	4a09      	ldr	r2, [pc, #36]	; (8012268 <USB_CoreReset+0x64>)
 8012244:	4293      	cmp	r3, r2
 8012246:	d901      	bls.n	801224c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012248:	2303      	movs	r3, #3
 801224a:	e006      	b.n	801225a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	691b      	ldr	r3, [r3, #16]
 8012250:	f003 0301 	and.w	r3, r3, #1
 8012254:	2b01      	cmp	r3, #1
 8012256:	d0f0      	beq.n	801223a <USB_CoreReset+0x36>

  return HAL_OK;
 8012258:	2300      	movs	r3, #0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3714      	adds	r7, #20
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	00030d40 	.word	0x00030d40

0801226c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	460b      	mov	r3, r1
 8012276:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012278:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801227c:	f002 f964 	bl	8014548 <USBD_static_malloc>
 8012280:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d105      	bne.n	8012294 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012290:	2302      	movs	r3, #2
 8012292:	e066      	b.n	8012362 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	7c1b      	ldrb	r3, [r3, #16]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d119      	bne.n	80122d8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80122a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122a8:	2202      	movs	r2, #2
 80122aa:	2181      	movs	r1, #129	; 0x81
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f002 f80e 	bl	80142ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2201      	movs	r2, #1
 80122b6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80122b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122bc:	2202      	movs	r2, #2
 80122be:	2101      	movs	r1, #1
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f002 f804 	bl	80142ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2201      	movs	r2, #1
 80122ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2210      	movs	r2, #16
 80122d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80122d6:	e016      	b.n	8012306 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80122d8:	2340      	movs	r3, #64	; 0x40
 80122da:	2202      	movs	r2, #2
 80122dc:	2181      	movs	r1, #129	; 0x81
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f001 fff5 	bl	80142ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2201      	movs	r2, #1
 80122e8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80122ea:	2340      	movs	r3, #64	; 0x40
 80122ec:	2202      	movs	r2, #2
 80122ee:	2101      	movs	r1, #1
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f001 ffec 	bl	80142ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2201      	movs	r2, #1
 80122fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2210      	movs	r2, #16
 8012302:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012306:	2308      	movs	r3, #8
 8012308:	2203      	movs	r2, #3
 801230a:	2182      	movs	r1, #130	; 0x82
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f001 ffde 	bl	80142ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2201      	movs	r2, #1
 8012316:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2200      	movs	r2, #0
 8012328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2200      	movs	r2, #0
 8012330:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	7c1b      	ldrb	r3, [r3, #16]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d109      	bne.n	8012350 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012346:	2101      	movs	r1, #1
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f002 f8af 	bl	80144ac <USBD_LL_PrepareReceive>
 801234e:	e007      	b.n	8012360 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012356:	2340      	movs	r3, #64	; 0x40
 8012358:	2101      	movs	r1, #1
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f002 f8a6 	bl	80144ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012360:	2300      	movs	r3, #0
}
 8012362:	4618      	mov	r0, r3
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b082      	sub	sp, #8
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
 8012372:	460b      	mov	r3, r1
 8012374:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012376:	2181      	movs	r1, #129	; 0x81
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f001 ffce 	bl	801431a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2200      	movs	r2, #0
 8012382:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012384:	2101      	movs	r1, #1
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f001 ffc7 	bl	801431a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2200      	movs	r2, #0
 8012390:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012394:	2182      	movs	r1, #130	; 0x82
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f001 ffbf 	bl	801431a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d00e      	beq.n	80123d4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123c6:	4618      	mov	r0, r3
 80123c8:	f002 f8cc 	bl	8014564 <USBD_static_free>
    pdev->pClassData = NULL;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2200      	movs	r2, #0
 80123d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3708      	adds	r7, #8
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
	...

080123e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b086      	sub	sp, #24
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80123f2:	2300      	movs	r3, #0
 80123f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80123f6:	2300      	movs	r3, #0
 80123f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80123fa:	2300      	movs	r3, #0
 80123fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d101      	bne.n	8012408 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012404:	2303      	movs	r3, #3
 8012406:	e0af      	b.n	8012568 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012410:	2b00      	cmp	r3, #0
 8012412:	d03f      	beq.n	8012494 <USBD_CDC_Setup+0xb4>
 8012414:	2b20      	cmp	r3, #32
 8012416:	f040 809f 	bne.w	8012558 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	88db      	ldrh	r3, [r3, #6]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d02e      	beq.n	8012480 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	b25b      	sxtb	r3, r3
 8012428:	2b00      	cmp	r3, #0
 801242a:	da16      	bge.n	801245a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	683a      	ldr	r2, [r7, #0]
 8012436:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012438:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	88d2      	ldrh	r2, [r2, #6]
 801243e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	88db      	ldrh	r3, [r3, #6]
 8012444:	2b07      	cmp	r3, #7
 8012446:	bf28      	it	cs
 8012448:	2307      	movcs	r3, #7
 801244a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	89fa      	ldrh	r2, [r7, #14]
 8012450:	4619      	mov	r1, r3
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f001 fae9 	bl	8013a2a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012458:	e085      	b.n	8012566 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	785a      	ldrb	r2, [r3, #1]
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	88db      	ldrh	r3, [r3, #6]
 8012468:	b2da      	uxtb	r2, r3
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012470:	6939      	ldr	r1, [r7, #16]
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	88db      	ldrh	r3, [r3, #6]
 8012476:	461a      	mov	r2, r3
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f001 fb02 	bl	8013a82 <USBD_CtlPrepareRx>
      break;
 801247e:	e072      	b.n	8012566 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	683a      	ldr	r2, [r7, #0]
 801248a:	7850      	ldrb	r0, [r2, #1]
 801248c:	2200      	movs	r2, #0
 801248e:	6839      	ldr	r1, [r7, #0]
 8012490:	4798      	blx	r3
      break;
 8012492:	e068      	b.n	8012566 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	785b      	ldrb	r3, [r3, #1]
 8012498:	2b0b      	cmp	r3, #11
 801249a:	d852      	bhi.n	8012542 <USBD_CDC_Setup+0x162>
 801249c:	a201      	add	r2, pc, #4	; (adr r2, 80124a4 <USBD_CDC_Setup+0xc4>)
 801249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a2:	bf00      	nop
 80124a4:	080124d5 	.word	0x080124d5
 80124a8:	08012551 	.word	0x08012551
 80124ac:	08012543 	.word	0x08012543
 80124b0:	08012543 	.word	0x08012543
 80124b4:	08012543 	.word	0x08012543
 80124b8:	08012543 	.word	0x08012543
 80124bc:	08012543 	.word	0x08012543
 80124c0:	08012543 	.word	0x08012543
 80124c4:	08012543 	.word	0x08012543
 80124c8:	08012543 	.word	0x08012543
 80124cc:	080124ff 	.word	0x080124ff
 80124d0:	08012529 	.word	0x08012529
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b03      	cmp	r3, #3
 80124de:	d107      	bne.n	80124f0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80124e0:	f107 030a 	add.w	r3, r7, #10
 80124e4:	2202      	movs	r2, #2
 80124e6:	4619      	mov	r1, r3
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f001 fa9e 	bl	8013a2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80124ee:	e032      	b.n	8012556 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80124f0:	6839      	ldr	r1, [r7, #0]
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f001 fa28 	bl	8013948 <USBD_CtlError>
            ret = USBD_FAIL;
 80124f8:	2303      	movs	r3, #3
 80124fa:	75fb      	strb	r3, [r7, #23]
          break;
 80124fc:	e02b      	b.n	8012556 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012504:	b2db      	uxtb	r3, r3
 8012506:	2b03      	cmp	r3, #3
 8012508:	d107      	bne.n	801251a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801250a:	f107 030d 	add.w	r3, r7, #13
 801250e:	2201      	movs	r2, #1
 8012510:	4619      	mov	r1, r3
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f001 fa89 	bl	8013a2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012518:	e01d      	b.n	8012556 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801251a:	6839      	ldr	r1, [r7, #0]
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f001 fa13 	bl	8013948 <USBD_CtlError>
            ret = USBD_FAIL;
 8012522:	2303      	movs	r3, #3
 8012524:	75fb      	strb	r3, [r7, #23]
          break;
 8012526:	e016      	b.n	8012556 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801252e:	b2db      	uxtb	r3, r3
 8012530:	2b03      	cmp	r3, #3
 8012532:	d00f      	beq.n	8012554 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012534:	6839      	ldr	r1, [r7, #0]
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f001 fa06 	bl	8013948 <USBD_CtlError>
            ret = USBD_FAIL;
 801253c:	2303      	movs	r3, #3
 801253e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012540:	e008      	b.n	8012554 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012542:	6839      	ldr	r1, [r7, #0]
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f001 f9ff 	bl	8013948 <USBD_CtlError>
          ret = USBD_FAIL;
 801254a:	2303      	movs	r3, #3
 801254c:	75fb      	strb	r3, [r7, #23]
          break;
 801254e:	e002      	b.n	8012556 <USBD_CDC_Setup+0x176>
          break;
 8012550:	bf00      	nop
 8012552:	e008      	b.n	8012566 <USBD_CDC_Setup+0x186>
          break;
 8012554:	bf00      	nop
      }
      break;
 8012556:	e006      	b.n	8012566 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012558:	6839      	ldr	r1, [r7, #0]
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f001 f9f4 	bl	8013948 <USBD_CtlError>
      ret = USBD_FAIL;
 8012560:	2303      	movs	r3, #3
 8012562:	75fb      	strb	r3, [r7, #23]
      break;
 8012564:	bf00      	nop
  }

  return (uint8_t)ret;
 8012566:	7dfb      	ldrb	r3, [r7, #23]
}
 8012568:	4618      	mov	r0, r3
 801256a:	3718      	adds	r7, #24
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	460b      	mov	r3, r1
 801257a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012582:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801258a:	2b00      	cmp	r3, #0
 801258c:	d101      	bne.n	8012592 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801258e:	2303      	movs	r3, #3
 8012590:	e04f      	b.n	8012632 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012598:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801259a:	78fa      	ldrb	r2, [r7, #3]
 801259c:	6879      	ldr	r1, [r7, #4]
 801259e:	4613      	mov	r3, r2
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	4413      	add	r3, r2
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	440b      	add	r3, r1
 80125a8:	3318      	adds	r3, #24
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d029      	beq.n	8012604 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80125b0:	78fa      	ldrb	r2, [r7, #3]
 80125b2:	6879      	ldr	r1, [r7, #4]
 80125b4:	4613      	mov	r3, r2
 80125b6:	009b      	lsls	r3, r3, #2
 80125b8:	4413      	add	r3, r2
 80125ba:	009b      	lsls	r3, r3, #2
 80125bc:	440b      	add	r3, r1
 80125be:	3318      	adds	r3, #24
 80125c0:	681a      	ldr	r2, [r3, #0]
 80125c2:	78f9      	ldrb	r1, [r7, #3]
 80125c4:	68f8      	ldr	r0, [r7, #12]
 80125c6:	460b      	mov	r3, r1
 80125c8:	00db      	lsls	r3, r3, #3
 80125ca:	440b      	add	r3, r1
 80125cc:	009b      	lsls	r3, r3, #2
 80125ce:	4403      	add	r3, r0
 80125d0:	3348      	adds	r3, #72	; 0x48
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80125d8:	fb01 f303 	mul.w	r3, r1, r3
 80125dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d110      	bne.n	8012604 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80125e2:	78fa      	ldrb	r2, [r7, #3]
 80125e4:	6879      	ldr	r1, [r7, #4]
 80125e6:	4613      	mov	r3, r2
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	4413      	add	r3, r2
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	440b      	add	r3, r1
 80125f0:	3318      	adds	r3, #24
 80125f2:	2200      	movs	r2, #0
 80125f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80125f6:	78f9      	ldrb	r1, [r7, #3]
 80125f8:	2300      	movs	r3, #0
 80125fa:	2200      	movs	r2, #0
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f001 ff34 	bl	801446a <USBD_LL_Transmit>
 8012602:	e015      	b.n	8012630 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	2200      	movs	r2, #0
 8012608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012612:	691b      	ldr	r3, [r3, #16]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d00b      	beq.n	8012630 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801261e:	691b      	ldr	r3, [r3, #16]
 8012620:	68ba      	ldr	r2, [r7, #8]
 8012622:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012626:	68ba      	ldr	r2, [r7, #8]
 8012628:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801262c:	78fa      	ldrb	r2, [r7, #3]
 801262e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012630:	2300      	movs	r3, #0
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b084      	sub	sp, #16
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
 8012642:	460b      	mov	r3, r1
 8012644:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801264c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012654:	2b00      	cmp	r3, #0
 8012656:	d101      	bne.n	801265c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012658:	2303      	movs	r3, #3
 801265a:	e015      	b.n	8012688 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801265c:	78fb      	ldrb	r3, [r7, #3]
 801265e:	4619      	mov	r1, r3
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f001 ff44 	bl	80144ee <USBD_LL_GetRxDataSize>
 8012666:	4602      	mov	r2, r0
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012674:	68db      	ldr	r3, [r3, #12]
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801267c:	68fa      	ldr	r2, [r7, #12]
 801267e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012682:	4611      	mov	r1, r2
 8012684:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801269e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d101      	bne.n	80126aa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80126a6:	2303      	movs	r3, #3
 80126a8:	e01b      	b.n	80126e2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d015      	beq.n	80126e0 <USBD_CDC_EP0_RxReady+0x50>
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80126ba:	2bff      	cmp	r3, #255	; 0xff
 80126bc:	d010      	beq.n	80126e0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80126cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80126ce:	68fa      	ldr	r2, [r7, #12]
 80126d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80126d4:	b292      	uxth	r2, r2
 80126d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	22ff      	movs	r2, #255	; 0xff
 80126dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3710      	adds	r7, #16
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
	...

080126ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80126ec:	b480      	push	{r7}
 80126ee:	b083      	sub	sp, #12
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2243      	movs	r2, #67	; 0x43
 80126f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80126fa:	4b03      	ldr	r3, [pc, #12]	; (8012708 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr
 8012708:	200000ec 	.word	0x200000ec

0801270c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2243      	movs	r2, #67	; 0x43
 8012718:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801271a:	4b03      	ldr	r3, [pc, #12]	; (8012728 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801271c:	4618      	mov	r0, r3
 801271e:	370c      	adds	r7, #12
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr
 8012728:	200000a8 	.word	0x200000a8

0801272c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801272c:	b480      	push	{r7}
 801272e:	b083      	sub	sp, #12
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2243      	movs	r2, #67	; 0x43
 8012738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801273a:	4b03      	ldr	r3, [pc, #12]	; (8012748 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801273c:	4618      	mov	r0, r3
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012746:	4770      	bx	lr
 8012748:	20000130 	.word	0x20000130

0801274c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	220a      	movs	r2, #10
 8012758:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801275a:	4b03      	ldr	r3, [pc, #12]	; (8012768 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801275c:	4618      	mov	r0, r3
 801275e:	370c      	adds	r7, #12
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr
 8012768:	20000064 	.word	0x20000064

0801276c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d101      	bne.n	8012780 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801277c:	2303      	movs	r3, #3
 801277e:	e004      	b.n	801278a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	683a      	ldr	r2, [r7, #0]
 8012784:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012788:	2300      	movs	r3, #0
}
 801278a:	4618      	mov	r0, r3
 801278c:	370c      	adds	r7, #12
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr

08012796 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012796:	b480      	push	{r7}
 8012798:	b087      	sub	sp, #28
 801279a:	af00      	add	r7, sp, #0
 801279c:	60f8      	str	r0, [r7, #12]
 801279e:	60b9      	str	r1, [r7, #8]
 80127a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d101      	bne.n	80127b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80127b0:	2303      	movs	r3, #3
 80127b2:	e008      	b.n	80127c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	687a      	ldr	r2, [r7, #4]
 80127c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80127c4:	2300      	movs	r3, #0
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	371c      	adds	r7, #28
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80127d2:	b480      	push	{r7}
 80127d4:	b085      	sub	sp, #20
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
 80127da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d101      	bne.n	80127ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80127ea:	2303      	movs	r3, #3
 80127ec:	e004      	b.n	80127f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	683a      	ldr	r2, [r7, #0]
 80127f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80127f6:	2300      	movs	r3, #0
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3714      	adds	r7, #20
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr

08012804 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012812:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801281a:	2b00      	cmp	r3, #0
 801281c:	d101      	bne.n	8012822 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801281e:	2303      	movs	r3, #3
 8012820:	e016      	b.n	8012850 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	7c1b      	ldrb	r3, [r3, #16]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d109      	bne.n	801283e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012834:	2101      	movs	r1, #1
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f001 fe38 	bl	80144ac <USBD_LL_PrepareReceive>
 801283c:	e007      	b.n	801284e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012844:	2340      	movs	r3, #64	; 0x40
 8012846:	2101      	movs	r1, #1
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f001 fe2f 	bl	80144ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801284e:	2300      	movs	r3, #0
}
 8012850:	4618      	mov	r0, r3
 8012852:	3710      	adds	r7, #16
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b086      	sub	sp, #24
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	4613      	mov	r3, r2
 8012864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d101      	bne.n	8012870 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801286c:	2303      	movs	r3, #3
 801286e:	e01f      	b.n	80128b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2200      	movs	r2, #0
 8012874:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2200      	movs	r2, #0
 801287c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	2200      	movs	r2, #0
 8012884:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d003      	beq.n	8012896 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	2201      	movs	r2, #1
 801289a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	79fa      	ldrb	r2, [r7, #7]
 80128a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	f001 fc8f 	bl	80141c8 <USBD_LL_Init>
 80128aa:	4603      	mov	r3, r0
 80128ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80128ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3718      	adds	r7, #24
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80128c2:	2300      	movs	r3, #0
 80128c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80128cc:	2303      	movs	r3, #3
 80128ce:	e016      	b.n	80128fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	683a      	ldr	r2, [r7, #0]
 80128d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00b      	beq.n	80128fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ec:	f107 020e 	add.w	r2, r7, #14
 80128f0:	4610      	mov	r0, r2
 80128f2:	4798      	blx	r3
 80128f4:	4602      	mov	r2, r0
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b082      	sub	sp, #8
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f001 fcc2 	bl	8014298 <USBD_LL_Start>
 8012914:	4603      	mov	r3, r0
}
 8012916:	4618      	mov	r0, r3
 8012918:	3708      	adds	r7, #8
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}

0801291e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801291e:	b480      	push	{r7}
 8012920:	b083      	sub	sp, #12
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012926:	2300      	movs	r3, #0
}
 8012928:	4618      	mov	r0, r3
 801292a:	370c      	adds	r7, #12
 801292c:	46bd      	mov	sp, r7
 801292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012932:	4770      	bx	lr

08012934 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012940:	2303      	movs	r3, #3
 8012942:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801294a:	2b00      	cmp	r3, #0
 801294c:	d009      	beq.n	8012962 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	78fa      	ldrb	r2, [r7, #3]
 8012958:	4611      	mov	r1, r2
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	4798      	blx	r3
 801295e:	4603      	mov	r3, r0
 8012960:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012962:	7bfb      	ldrb	r3, [r7, #15]
}
 8012964:	4618      	mov	r0, r3
 8012966:	3710      	adds	r7, #16
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}

0801296c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	460b      	mov	r3, r1
 8012976:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801297e:	2b00      	cmp	r3, #0
 8012980:	d007      	beq.n	8012992 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	78fa      	ldrb	r2, [r7, #3]
 801298c:	4611      	mov	r1, r2
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	4798      	blx	r3
  }

  return USBD_OK;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80129ac:	6839      	ldr	r1, [r7, #0]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f000 ff90 	bl	80138d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2201      	movs	r2, #1
 80129b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80129c2:	461a      	mov	r2, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80129d0:	f003 031f 	and.w	r3, r3, #31
 80129d4:	2b02      	cmp	r3, #2
 80129d6:	d01a      	beq.n	8012a0e <USBD_LL_SetupStage+0x72>
 80129d8:	2b02      	cmp	r3, #2
 80129da:	d822      	bhi.n	8012a22 <USBD_LL_SetupStage+0x86>
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d002      	beq.n	80129e6 <USBD_LL_SetupStage+0x4a>
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d00a      	beq.n	80129fa <USBD_LL_SetupStage+0x5e>
 80129e4:	e01d      	b.n	8012a22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80129ec:	4619      	mov	r1, r3
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f000 fa62 	bl	8012eb8 <USBD_StdDevReq>
 80129f4:	4603      	mov	r3, r0
 80129f6:	73fb      	strb	r3, [r7, #15]
      break;
 80129f8:	e020      	b.n	8012a3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012a00:	4619      	mov	r1, r3
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f000 fac6 	bl	8012f94 <USBD_StdItfReq>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8012a0c:	e016      	b.n	8012a3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012a14:	4619      	mov	r1, r3
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f000 fb05 	bl	8013026 <USBD_StdEPReq>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8012a20:	e00c      	b.n	8012a3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	4619      	mov	r1, r3
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f001 fc91 	bl	8014358 <USBD_LL_StallEP>
 8012a36:	4603      	mov	r3, r0
 8012a38:	73fb      	strb	r3, [r7, #15]
      break;
 8012a3a:	bf00      	nop
  }

  return ret;
 8012a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3710      	adds	r7, #16
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}

08012a46 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012a46:	b580      	push	{r7, lr}
 8012a48:	b086      	sub	sp, #24
 8012a4a:	af00      	add	r7, sp, #0
 8012a4c:	60f8      	str	r0, [r7, #12]
 8012a4e:	460b      	mov	r3, r1
 8012a50:	607a      	str	r2, [r7, #4]
 8012a52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012a54:	7afb      	ldrb	r3, [r7, #11]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d138      	bne.n	8012acc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012a60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012a68:	2b03      	cmp	r3, #3
 8012a6a:	d14a      	bne.n	8012b02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	689a      	ldr	r2, [r3, #8]
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d913      	bls.n	8012aa0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	689a      	ldr	r2, [r3, #8]
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	1ad2      	subs	r2, r2, r3
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	68da      	ldr	r2, [r3, #12]
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	bf28      	it	cs
 8012a92:	4613      	movcs	r3, r2
 8012a94:	461a      	mov	r2, r3
 8012a96:	6879      	ldr	r1, [r7, #4]
 8012a98:	68f8      	ldr	r0, [r7, #12]
 8012a9a:	f001 f80f 	bl	8013abc <USBD_CtlContinueRx>
 8012a9e:	e030      	b.n	8012b02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	2b03      	cmp	r3, #3
 8012aaa:	d10b      	bne.n	8012ac4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ab2:	691b      	ldr	r3, [r3, #16]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d005      	beq.n	8012ac4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	68f8      	ldr	r0, [r7, #12]
 8012ac2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012ac4:	68f8      	ldr	r0, [r7, #12]
 8012ac6:	f001 f80a 	bl	8013ade <USBD_CtlSendStatus>
 8012aca:	e01a      	b.n	8012b02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	2b03      	cmp	r3, #3
 8012ad6:	d114      	bne.n	8012b02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ade:	699b      	ldr	r3, [r3, #24]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00e      	beq.n	8012b02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012aea:	699b      	ldr	r3, [r3, #24]
 8012aec:	7afa      	ldrb	r2, [r7, #11]
 8012aee:	4611      	mov	r1, r2
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	4798      	blx	r3
 8012af4:	4603      	mov	r3, r0
 8012af6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012af8:	7dfb      	ldrb	r3, [r7, #23]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d001      	beq.n	8012b02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8012afe:	7dfb      	ldrb	r3, [r7, #23]
 8012b00:	e000      	b.n	8012b04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012b02:	2300      	movs	r3, #0
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3718      	adds	r7, #24
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b086      	sub	sp, #24
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	460b      	mov	r3, r1
 8012b16:	607a      	str	r2, [r7, #4]
 8012b18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012b1a:	7afb      	ldrb	r3, [r7, #11]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d16b      	bne.n	8012bf8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	3314      	adds	r3, #20
 8012b24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	d156      	bne.n	8012bde <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	689a      	ldr	r2, [r3, #8]
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	68db      	ldr	r3, [r3, #12]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d914      	bls.n	8012b66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	689a      	ldr	r2, [r3, #8]
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	1ad2      	subs	r2, r2, r3
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	461a      	mov	r2, r3
 8012b50:	6879      	ldr	r1, [r7, #4]
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f000 ff84 	bl	8013a60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012b58:	2300      	movs	r3, #0
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	68f8      	ldr	r0, [r7, #12]
 8012b60:	f001 fca4 	bl	80144ac <USBD_LL_PrepareReceive>
 8012b64:	e03b      	b.n	8012bde <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	68da      	ldr	r2, [r3, #12]
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d11c      	bne.n	8012bac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	685a      	ldr	r2, [r3, #4]
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d316      	bcc.n	8012bac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	685a      	ldr	r2, [r3, #4]
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d20f      	bcs.n	8012bac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	2100      	movs	r1, #0
 8012b90:	68f8      	ldr	r0, [r7, #12]
 8012b92:	f000 ff65 	bl	8013a60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	68f8      	ldr	r0, [r7, #12]
 8012ba6:	f001 fc81 	bl	80144ac <USBD_LL_PrepareReceive>
 8012baa:	e018      	b.n	8012bde <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	2b03      	cmp	r3, #3
 8012bb6:	d10b      	bne.n	8012bd0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bbe:	68db      	ldr	r3, [r3, #12]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d005      	beq.n	8012bd0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	68f8      	ldr	r0, [r7, #12]
 8012bce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012bd0:	2180      	movs	r1, #128	; 0x80
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f001 fbc0 	bl	8014358 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012bd8:	68f8      	ldr	r0, [r7, #12]
 8012bda:	f000 ff93 	bl	8013b04 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d122      	bne.n	8012c2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f7ff fe98 	bl	801291e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012bf6:	e01a      	b.n	8012c2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	2b03      	cmp	r3, #3
 8012c02:	d114      	bne.n	8012c2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c0a:	695b      	ldr	r3, [r3, #20]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00e      	beq.n	8012c2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c16:	695b      	ldr	r3, [r3, #20]
 8012c18:	7afa      	ldrb	r2, [r7, #11]
 8012c1a:	4611      	mov	r1, r2
 8012c1c:	68f8      	ldr	r0, [r7, #12]
 8012c1e:	4798      	blx	r3
 8012c20:	4603      	mov	r3, r0
 8012c22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012c24:	7dfb      	ldrb	r3, [r7, #23]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d001      	beq.n	8012c2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012c2a:	7dfb      	ldrb	r3, [r7, #23]
 8012c2c:	e000      	b.n	8012c30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012c2e:	2300      	movs	r3, #0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3718      	adds	r7, #24
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2201      	movs	r2, #1
 8012c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2200      	movs	r2, #0
 8012c54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d101      	bne.n	8012c6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012c68:	2303      	movs	r3, #3
 8012c6a:	e02f      	b.n	8012ccc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d00f      	beq.n	8012c96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d009      	beq.n	8012c96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	687a      	ldr	r2, [r7, #4]
 8012c8c:	6852      	ldr	r2, [r2, #4]
 8012c8e:	b2d2      	uxtb	r2, r2
 8012c90:	4611      	mov	r1, r2
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012c96:	2340      	movs	r3, #64	; 0x40
 8012c98:	2200      	movs	r2, #0
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f001 fb16 	bl	80142ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2240      	movs	r2, #64	; 0x40
 8012cae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012cb2:	2340      	movs	r3, #64	; 0x40
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	2180      	movs	r1, #128	; 0x80
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f001 fb08 	bl	80142ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2240      	movs	r2, #64	; 0x40
 8012cc8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012cca:	2300      	movs	r3, #0
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	460b      	mov	r3, r1
 8012cde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	78fa      	ldrb	r2, [r7, #3]
 8012ce4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012ce6:	2300      	movs	r3, #0
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b083      	sub	sp, #12
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2204      	movs	r2, #4
 8012d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012d12:	2300      	movs	r3, #0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr

08012d20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	2b04      	cmp	r3, #4
 8012d32:	d106      	bne.n	8012d42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012d42:	2300      	movs	r3, #0
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012d62:	2303      	movs	r3, #3
 8012d64:	e012      	b.n	8012d8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	2b03      	cmp	r3, #3
 8012d70:	d10b      	bne.n	8012d8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d78:	69db      	ldr	r3, [r3, #28]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d005      	beq.n	8012d8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d84:	69db      	ldr	r3, [r3, #28]
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012d8a:	2300      	movs	r3, #0
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d101      	bne.n	8012dae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012daa:	2303      	movs	r3, #3
 8012dac:	e014      	b.n	8012dd8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	2b03      	cmp	r3, #3
 8012db8:	d10d      	bne.n	8012dd6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dc0:	6a1b      	ldr	r3, [r3, #32]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d007      	beq.n	8012dd6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dcc:	6a1b      	ldr	r3, [r3, #32]
 8012dce:	78fa      	ldrb	r2, [r7, #3]
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012dd6:	2300      	movs	r3, #0
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d101      	bne.n	8012dfa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012df6:	2303      	movs	r3, #3
 8012df8:	e014      	b.n	8012e24 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	2b03      	cmp	r3, #3
 8012e04:	d10d      	bne.n	8012e22 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d007      	beq.n	8012e22 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e1a:	78fa      	ldrb	r2, [r7, #3]
 8012e1c:	4611      	mov	r1, r2
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012e22:	2300      	movs	r3, #0
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012e34:	2300      	movs	r3, #0
}
 8012e36:	4618      	mov	r0, r3
 8012e38:	370c      	adds	r7, #12
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e40:	4770      	bx	lr

08012e42 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b082      	sub	sp, #8
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d009      	beq.n	8012e70 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	6852      	ldr	r2, [r2, #4]
 8012e68:	b2d2      	uxtb	r2, r2
 8012e6a:	4611      	mov	r1, r2
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	4798      	blx	r3
  }

  return USBD_OK;
 8012e70:	2300      	movs	r3, #0
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3708      	adds	r7, #8
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}

08012e7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012e7a:	b480      	push	{r7}
 8012e7c:	b087      	sub	sp, #28
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012e8c:	697b      	ldr	r3, [r7, #20]
 8012e8e:	3301      	adds	r3, #1
 8012e90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012e98:	8a3b      	ldrh	r3, [r7, #16]
 8012e9a:	021b      	lsls	r3, r3, #8
 8012e9c:	b21a      	sxth	r2, r3
 8012e9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	b21b      	sxth	r3, r3
 8012ea6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012ea8:	89fb      	ldrh	r3, [r7, #14]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	371c      	adds	r7, #28
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr
	...

08012eb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012ece:	2b40      	cmp	r3, #64	; 0x40
 8012ed0:	d005      	beq.n	8012ede <USBD_StdDevReq+0x26>
 8012ed2:	2b40      	cmp	r3, #64	; 0x40
 8012ed4:	d853      	bhi.n	8012f7e <USBD_StdDevReq+0xc6>
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00b      	beq.n	8012ef2 <USBD_StdDevReq+0x3a>
 8012eda:	2b20      	cmp	r3, #32
 8012edc:	d14f      	bne.n	8012f7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	6839      	ldr	r1, [r7, #0]
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	4798      	blx	r3
 8012eec:	4603      	mov	r3, r0
 8012eee:	73fb      	strb	r3, [r7, #15]
      break;
 8012ef0:	e04a      	b.n	8012f88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	785b      	ldrb	r3, [r3, #1]
 8012ef6:	2b09      	cmp	r3, #9
 8012ef8:	d83b      	bhi.n	8012f72 <USBD_StdDevReq+0xba>
 8012efa:	a201      	add	r2, pc, #4	; (adr r2, 8012f00 <USBD_StdDevReq+0x48>)
 8012efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f00:	08012f55 	.word	0x08012f55
 8012f04:	08012f69 	.word	0x08012f69
 8012f08:	08012f73 	.word	0x08012f73
 8012f0c:	08012f5f 	.word	0x08012f5f
 8012f10:	08012f73 	.word	0x08012f73
 8012f14:	08012f33 	.word	0x08012f33
 8012f18:	08012f29 	.word	0x08012f29
 8012f1c:	08012f73 	.word	0x08012f73
 8012f20:	08012f4b 	.word	0x08012f4b
 8012f24:	08012f3d 	.word	0x08012f3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012f28:	6839      	ldr	r1, [r7, #0]
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 f9de 	bl	80132ec <USBD_GetDescriptor>
          break;
 8012f30:	e024      	b.n	8012f7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012f32:	6839      	ldr	r1, [r7, #0]
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f000 fb43 	bl	80135c0 <USBD_SetAddress>
          break;
 8012f3a:	e01f      	b.n	8012f7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012f3c:	6839      	ldr	r1, [r7, #0]
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f000 fb82 	bl	8013648 <USBD_SetConfig>
 8012f44:	4603      	mov	r3, r0
 8012f46:	73fb      	strb	r3, [r7, #15]
          break;
 8012f48:	e018      	b.n	8012f7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012f4a:	6839      	ldr	r1, [r7, #0]
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 fc21 	bl	8013794 <USBD_GetConfig>
          break;
 8012f52:	e013      	b.n	8012f7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012f54:	6839      	ldr	r1, [r7, #0]
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 fc52 	bl	8013800 <USBD_GetStatus>
          break;
 8012f5c:	e00e      	b.n	8012f7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012f5e:	6839      	ldr	r1, [r7, #0]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 fc81 	bl	8013868 <USBD_SetFeature>
          break;
 8012f66:	e009      	b.n	8012f7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012f68:	6839      	ldr	r1, [r7, #0]
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 fc90 	bl	8013890 <USBD_ClrFeature>
          break;
 8012f70:	e004      	b.n	8012f7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012f72:	6839      	ldr	r1, [r7, #0]
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f000 fce7 	bl	8013948 <USBD_CtlError>
          break;
 8012f7a:	bf00      	nop
      }
      break;
 8012f7c:	e004      	b.n	8012f88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012f7e:	6839      	ldr	r1, [r7, #0]
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 fce1 	bl	8013948 <USBD_CtlError>
      break;
 8012f86:	bf00      	nop
  }

  return ret;
 8012f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop

08012f94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012faa:	2b40      	cmp	r3, #64	; 0x40
 8012fac:	d005      	beq.n	8012fba <USBD_StdItfReq+0x26>
 8012fae:	2b40      	cmp	r3, #64	; 0x40
 8012fb0:	d82f      	bhi.n	8013012 <USBD_StdItfReq+0x7e>
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d001      	beq.n	8012fba <USBD_StdItfReq+0x26>
 8012fb6:	2b20      	cmp	r3, #32
 8012fb8:	d12b      	bne.n	8013012 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	3b01      	subs	r3, #1
 8012fc4:	2b02      	cmp	r3, #2
 8012fc6:	d81d      	bhi.n	8013004 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	889b      	ldrh	r3, [r3, #4]
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d813      	bhi.n	8012ffa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	6839      	ldr	r1, [r7, #0]
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	4798      	blx	r3
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	88db      	ldrh	r3, [r3, #6]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d110      	bne.n	801300e <USBD_StdItfReq+0x7a>
 8012fec:	7bfb      	ldrb	r3, [r7, #15]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d10d      	bne.n	801300e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f000 fd73 	bl	8013ade <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012ff8:	e009      	b.n	801300e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012ffa:	6839      	ldr	r1, [r7, #0]
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 fca3 	bl	8013948 <USBD_CtlError>
          break;
 8013002:	e004      	b.n	801300e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013004:	6839      	ldr	r1, [r7, #0]
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 fc9e 	bl	8013948 <USBD_CtlError>
          break;
 801300c:	e000      	b.n	8013010 <USBD_StdItfReq+0x7c>
          break;
 801300e:	bf00      	nop
      }
      break;
 8013010:	e004      	b.n	801301c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013012:	6839      	ldr	r1, [r7, #0]
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f000 fc97 	bl	8013948 <USBD_CtlError>
      break;
 801301a:	bf00      	nop
  }

  return ret;
 801301c:	7bfb      	ldrb	r3, [r7, #15]
}
 801301e:	4618      	mov	r0, r3
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013026:	b580      	push	{r7, lr}
 8013028:	b084      	sub	sp, #16
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
 801302e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013030:	2300      	movs	r3, #0
 8013032:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	889b      	ldrh	r3, [r3, #4]
 8013038:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013042:	2b40      	cmp	r3, #64	; 0x40
 8013044:	d007      	beq.n	8013056 <USBD_StdEPReq+0x30>
 8013046:	2b40      	cmp	r3, #64	; 0x40
 8013048:	f200 8145 	bhi.w	80132d6 <USBD_StdEPReq+0x2b0>
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00c      	beq.n	801306a <USBD_StdEPReq+0x44>
 8013050:	2b20      	cmp	r3, #32
 8013052:	f040 8140 	bne.w	80132d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801305c:	689b      	ldr	r3, [r3, #8]
 801305e:	6839      	ldr	r1, [r7, #0]
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	4798      	blx	r3
 8013064:	4603      	mov	r3, r0
 8013066:	73fb      	strb	r3, [r7, #15]
      break;
 8013068:	e13a      	b.n	80132e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	785b      	ldrb	r3, [r3, #1]
 801306e:	2b03      	cmp	r3, #3
 8013070:	d007      	beq.n	8013082 <USBD_StdEPReq+0x5c>
 8013072:	2b03      	cmp	r3, #3
 8013074:	f300 8129 	bgt.w	80132ca <USBD_StdEPReq+0x2a4>
 8013078:	2b00      	cmp	r3, #0
 801307a:	d07f      	beq.n	801317c <USBD_StdEPReq+0x156>
 801307c:	2b01      	cmp	r3, #1
 801307e:	d03c      	beq.n	80130fa <USBD_StdEPReq+0xd4>
 8013080:	e123      	b.n	80132ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013088:	b2db      	uxtb	r3, r3
 801308a:	2b02      	cmp	r3, #2
 801308c:	d002      	beq.n	8013094 <USBD_StdEPReq+0x6e>
 801308e:	2b03      	cmp	r3, #3
 8013090:	d016      	beq.n	80130c0 <USBD_StdEPReq+0x9a>
 8013092:	e02c      	b.n	80130ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013094:	7bbb      	ldrb	r3, [r7, #14]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d00d      	beq.n	80130b6 <USBD_StdEPReq+0x90>
 801309a:	7bbb      	ldrb	r3, [r7, #14]
 801309c:	2b80      	cmp	r3, #128	; 0x80
 801309e:	d00a      	beq.n	80130b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80130a0:	7bbb      	ldrb	r3, [r7, #14]
 80130a2:	4619      	mov	r1, r3
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f001 f957 	bl	8014358 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80130aa:	2180      	movs	r1, #128	; 0x80
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f001 f953 	bl	8014358 <USBD_LL_StallEP>
 80130b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80130b4:	e020      	b.n	80130f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80130b6:	6839      	ldr	r1, [r7, #0]
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 fc45 	bl	8013948 <USBD_CtlError>
              break;
 80130be:	e01b      	b.n	80130f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	885b      	ldrh	r3, [r3, #2]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d10e      	bne.n	80130e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80130c8:	7bbb      	ldrb	r3, [r7, #14]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00b      	beq.n	80130e6 <USBD_StdEPReq+0xc0>
 80130ce:	7bbb      	ldrb	r3, [r7, #14]
 80130d0:	2b80      	cmp	r3, #128	; 0x80
 80130d2:	d008      	beq.n	80130e6 <USBD_StdEPReq+0xc0>
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	88db      	ldrh	r3, [r3, #6]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d104      	bne.n	80130e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80130dc:	7bbb      	ldrb	r3, [r7, #14]
 80130de:	4619      	mov	r1, r3
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f001 f939 	bl	8014358 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f000 fcf9 	bl	8013ade <USBD_CtlSendStatus>

              break;
 80130ec:	e004      	b.n	80130f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80130ee:	6839      	ldr	r1, [r7, #0]
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 fc29 	bl	8013948 <USBD_CtlError>
              break;
 80130f6:	bf00      	nop
          }
          break;
 80130f8:	e0ec      	b.n	80132d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013100:	b2db      	uxtb	r3, r3
 8013102:	2b02      	cmp	r3, #2
 8013104:	d002      	beq.n	801310c <USBD_StdEPReq+0xe6>
 8013106:	2b03      	cmp	r3, #3
 8013108:	d016      	beq.n	8013138 <USBD_StdEPReq+0x112>
 801310a:	e030      	b.n	801316e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801310c:	7bbb      	ldrb	r3, [r7, #14]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d00d      	beq.n	801312e <USBD_StdEPReq+0x108>
 8013112:	7bbb      	ldrb	r3, [r7, #14]
 8013114:	2b80      	cmp	r3, #128	; 0x80
 8013116:	d00a      	beq.n	801312e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013118:	7bbb      	ldrb	r3, [r7, #14]
 801311a:	4619      	mov	r1, r3
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f001 f91b 	bl	8014358 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013122:	2180      	movs	r1, #128	; 0x80
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f001 f917 	bl	8014358 <USBD_LL_StallEP>
 801312a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801312c:	e025      	b.n	801317a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801312e:	6839      	ldr	r1, [r7, #0]
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f000 fc09 	bl	8013948 <USBD_CtlError>
              break;
 8013136:	e020      	b.n	801317a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	885b      	ldrh	r3, [r3, #2]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d11b      	bne.n	8013178 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013140:	7bbb      	ldrb	r3, [r7, #14]
 8013142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013146:	2b00      	cmp	r3, #0
 8013148:	d004      	beq.n	8013154 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801314a:	7bbb      	ldrb	r3, [r7, #14]
 801314c:	4619      	mov	r1, r3
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f001 f921 	bl	8014396 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 fcc2 	bl	8013ade <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013160:	689b      	ldr	r3, [r3, #8]
 8013162:	6839      	ldr	r1, [r7, #0]
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	4798      	blx	r3
 8013168:	4603      	mov	r3, r0
 801316a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801316c:	e004      	b.n	8013178 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801316e:	6839      	ldr	r1, [r7, #0]
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f000 fbe9 	bl	8013948 <USBD_CtlError>
              break;
 8013176:	e000      	b.n	801317a <USBD_StdEPReq+0x154>
              break;
 8013178:	bf00      	nop
          }
          break;
 801317a:	e0ab      	b.n	80132d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013182:	b2db      	uxtb	r3, r3
 8013184:	2b02      	cmp	r3, #2
 8013186:	d002      	beq.n	801318e <USBD_StdEPReq+0x168>
 8013188:	2b03      	cmp	r3, #3
 801318a:	d032      	beq.n	80131f2 <USBD_StdEPReq+0x1cc>
 801318c:	e097      	b.n	80132be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801318e:	7bbb      	ldrb	r3, [r7, #14]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d007      	beq.n	80131a4 <USBD_StdEPReq+0x17e>
 8013194:	7bbb      	ldrb	r3, [r7, #14]
 8013196:	2b80      	cmp	r3, #128	; 0x80
 8013198:	d004      	beq.n	80131a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801319a:	6839      	ldr	r1, [r7, #0]
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 fbd3 	bl	8013948 <USBD_CtlError>
                break;
 80131a2:	e091      	b.n	80132c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	da0b      	bge.n	80131c4 <USBD_StdEPReq+0x19e>
 80131ac:	7bbb      	ldrb	r3, [r7, #14]
 80131ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80131b2:	4613      	mov	r3, r2
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	4413      	add	r3, r2
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	3310      	adds	r3, #16
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	4413      	add	r3, r2
 80131c0:	3304      	adds	r3, #4
 80131c2:	e00b      	b.n	80131dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80131c4:	7bbb      	ldrb	r3, [r7, #14]
 80131c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131ca:	4613      	mov	r3, r2
 80131cc:	009b      	lsls	r3, r3, #2
 80131ce:	4413      	add	r3, r2
 80131d0:	009b      	lsls	r3, r3, #2
 80131d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80131d6:	687a      	ldr	r2, [r7, #4]
 80131d8:	4413      	add	r3, r2
 80131da:	3304      	adds	r3, #4
 80131dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2200      	movs	r2, #0
 80131e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	2202      	movs	r2, #2
 80131e8:	4619      	mov	r1, r3
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 fc1d 	bl	8013a2a <USBD_CtlSendData>
              break;
 80131f0:	e06a      	b.n	80132c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80131f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	da11      	bge.n	801321e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80131fa:	7bbb      	ldrb	r3, [r7, #14]
 80131fc:	f003 020f 	and.w	r2, r3, #15
 8013200:	6879      	ldr	r1, [r7, #4]
 8013202:	4613      	mov	r3, r2
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	4413      	add	r3, r2
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	440b      	add	r3, r1
 801320c:	3324      	adds	r3, #36	; 0x24
 801320e:	881b      	ldrh	r3, [r3, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d117      	bne.n	8013244 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013214:	6839      	ldr	r1, [r7, #0]
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f000 fb96 	bl	8013948 <USBD_CtlError>
                  break;
 801321c:	e054      	b.n	80132c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801321e:	7bbb      	ldrb	r3, [r7, #14]
 8013220:	f003 020f 	and.w	r2, r3, #15
 8013224:	6879      	ldr	r1, [r7, #4]
 8013226:	4613      	mov	r3, r2
 8013228:	009b      	lsls	r3, r3, #2
 801322a:	4413      	add	r3, r2
 801322c:	009b      	lsls	r3, r3, #2
 801322e:	440b      	add	r3, r1
 8013230:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013234:	881b      	ldrh	r3, [r3, #0]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d104      	bne.n	8013244 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801323a:	6839      	ldr	r1, [r7, #0]
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f000 fb83 	bl	8013948 <USBD_CtlError>
                  break;
 8013242:	e041      	b.n	80132c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013248:	2b00      	cmp	r3, #0
 801324a:	da0b      	bge.n	8013264 <USBD_StdEPReq+0x23e>
 801324c:	7bbb      	ldrb	r3, [r7, #14]
 801324e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013252:	4613      	mov	r3, r2
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	4413      	add	r3, r2
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	3310      	adds	r3, #16
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	4413      	add	r3, r2
 8013260:	3304      	adds	r3, #4
 8013262:	e00b      	b.n	801327c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013264:	7bbb      	ldrb	r3, [r7, #14]
 8013266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801326a:	4613      	mov	r3, r2
 801326c:	009b      	lsls	r3, r3, #2
 801326e:	4413      	add	r3, r2
 8013270:	009b      	lsls	r3, r3, #2
 8013272:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	4413      	add	r3, r2
 801327a:	3304      	adds	r3, #4
 801327c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801327e:	7bbb      	ldrb	r3, [r7, #14]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <USBD_StdEPReq+0x264>
 8013284:	7bbb      	ldrb	r3, [r7, #14]
 8013286:	2b80      	cmp	r3, #128	; 0x80
 8013288:	d103      	bne.n	8013292 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	2200      	movs	r2, #0
 801328e:	601a      	str	r2, [r3, #0]
 8013290:	e00e      	b.n	80132b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013292:	7bbb      	ldrb	r3, [r7, #14]
 8013294:	4619      	mov	r1, r3
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f001 f89c 	bl	80143d4 <USBD_LL_IsStallEP>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d003      	beq.n	80132aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	2201      	movs	r2, #1
 80132a6:	601a      	str	r2, [r3, #0]
 80132a8:	e002      	b.n	80132b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	2200      	movs	r2, #0
 80132ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	2202      	movs	r2, #2
 80132b4:	4619      	mov	r1, r3
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 fbb7 	bl	8013a2a <USBD_CtlSendData>
              break;
 80132bc:	e004      	b.n	80132c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80132be:	6839      	ldr	r1, [r7, #0]
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f000 fb41 	bl	8013948 <USBD_CtlError>
              break;
 80132c6:	bf00      	nop
          }
          break;
 80132c8:	e004      	b.n	80132d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80132ca:	6839      	ldr	r1, [r7, #0]
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f000 fb3b 	bl	8013948 <USBD_CtlError>
          break;
 80132d2:	bf00      	nop
      }
      break;
 80132d4:	e004      	b.n	80132e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80132d6:	6839      	ldr	r1, [r7, #0]
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 fb35 	bl	8013948 <USBD_CtlError>
      break;
 80132de:	bf00      	nop
  }

  return ret;
 80132e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3710      	adds	r7, #16
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
	...

080132ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80132f6:	2300      	movs	r3, #0
 80132f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80132fa:	2300      	movs	r3, #0
 80132fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80132fe:	2300      	movs	r3, #0
 8013300:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	885b      	ldrh	r3, [r3, #2]
 8013306:	0a1b      	lsrs	r3, r3, #8
 8013308:	b29b      	uxth	r3, r3
 801330a:	3b01      	subs	r3, #1
 801330c:	2b06      	cmp	r3, #6
 801330e:	f200 8128 	bhi.w	8013562 <USBD_GetDescriptor+0x276>
 8013312:	a201      	add	r2, pc, #4	; (adr r2, 8013318 <USBD_GetDescriptor+0x2c>)
 8013314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013318:	08013335 	.word	0x08013335
 801331c:	0801334d 	.word	0x0801334d
 8013320:	0801338d 	.word	0x0801338d
 8013324:	08013563 	.word	0x08013563
 8013328:	08013563 	.word	0x08013563
 801332c:	08013503 	.word	0x08013503
 8013330:	0801352f 	.word	0x0801352f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	687a      	ldr	r2, [r7, #4]
 801333e:	7c12      	ldrb	r2, [r2, #16]
 8013340:	f107 0108 	add.w	r1, r7, #8
 8013344:	4610      	mov	r0, r2
 8013346:	4798      	blx	r3
 8013348:	60f8      	str	r0, [r7, #12]
      break;
 801334a:	e112      	b.n	8013572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	7c1b      	ldrb	r3, [r3, #16]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d10d      	bne.n	8013370 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801335c:	f107 0208 	add.w	r2, r7, #8
 8013360:	4610      	mov	r0, r2
 8013362:	4798      	blx	r3
 8013364:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	3301      	adds	r3, #1
 801336a:	2202      	movs	r2, #2
 801336c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801336e:	e100      	b.n	8013572 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013378:	f107 0208 	add.w	r2, r7, #8
 801337c:	4610      	mov	r0, r2
 801337e:	4798      	blx	r3
 8013380:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	3301      	adds	r3, #1
 8013386:	2202      	movs	r2, #2
 8013388:	701a      	strb	r2, [r3, #0]
      break;
 801338a:	e0f2      	b.n	8013572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	885b      	ldrh	r3, [r3, #2]
 8013390:	b2db      	uxtb	r3, r3
 8013392:	2b05      	cmp	r3, #5
 8013394:	f200 80ac 	bhi.w	80134f0 <USBD_GetDescriptor+0x204>
 8013398:	a201      	add	r2, pc, #4	; (adr r2, 80133a0 <USBD_GetDescriptor+0xb4>)
 801339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801339e:	bf00      	nop
 80133a0:	080133b9 	.word	0x080133b9
 80133a4:	080133ed 	.word	0x080133ed
 80133a8:	08013421 	.word	0x08013421
 80133ac:	08013455 	.word	0x08013455
 80133b0:	08013489 	.word	0x08013489
 80133b4:	080134bd 	.word	0x080134bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d00b      	beq.n	80133dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	7c12      	ldrb	r2, [r2, #16]
 80133d0:	f107 0108 	add.w	r1, r7, #8
 80133d4:	4610      	mov	r0, r2
 80133d6:	4798      	blx	r3
 80133d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133da:	e091      	b.n	8013500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80133dc:	6839      	ldr	r1, [r7, #0]
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f000 fab2 	bl	8013948 <USBD_CtlError>
            err++;
 80133e4:	7afb      	ldrb	r3, [r7, #11]
 80133e6:	3301      	adds	r3, #1
 80133e8:	72fb      	strb	r3, [r7, #11]
          break;
 80133ea:	e089      	b.n	8013500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d00b      	beq.n	8013410 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	7c12      	ldrb	r2, [r2, #16]
 8013404:	f107 0108 	add.w	r1, r7, #8
 8013408:	4610      	mov	r0, r2
 801340a:	4798      	blx	r3
 801340c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801340e:	e077      	b.n	8013500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013410:	6839      	ldr	r1, [r7, #0]
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f000 fa98 	bl	8013948 <USBD_CtlError>
            err++;
 8013418:	7afb      	ldrb	r3, [r7, #11]
 801341a:	3301      	adds	r3, #1
 801341c:	72fb      	strb	r3, [r7, #11]
          break;
 801341e:	e06f      	b.n	8013500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00b      	beq.n	8013444 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013432:	68db      	ldr	r3, [r3, #12]
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	7c12      	ldrb	r2, [r2, #16]
 8013438:	f107 0108 	add.w	r1, r7, #8
 801343c:	4610      	mov	r0, r2
 801343e:	4798      	blx	r3
 8013440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013442:	e05d      	b.n	8013500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013444:	6839      	ldr	r1, [r7, #0]
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f000 fa7e 	bl	8013948 <USBD_CtlError>
            err++;
 801344c:	7afb      	ldrb	r3, [r7, #11]
 801344e:	3301      	adds	r3, #1
 8013450:	72fb      	strb	r3, [r7, #11]
          break;
 8013452:	e055      	b.n	8013500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801345a:	691b      	ldr	r3, [r3, #16]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00b      	beq.n	8013478 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013466:	691b      	ldr	r3, [r3, #16]
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	7c12      	ldrb	r2, [r2, #16]
 801346c:	f107 0108 	add.w	r1, r7, #8
 8013470:	4610      	mov	r0, r2
 8013472:	4798      	blx	r3
 8013474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013476:	e043      	b.n	8013500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013478:	6839      	ldr	r1, [r7, #0]
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 fa64 	bl	8013948 <USBD_CtlError>
            err++;
 8013480:	7afb      	ldrb	r3, [r7, #11]
 8013482:	3301      	adds	r3, #1
 8013484:	72fb      	strb	r3, [r7, #11]
          break;
 8013486:	e03b      	b.n	8013500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801348e:	695b      	ldr	r3, [r3, #20]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d00b      	beq.n	80134ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801349a:	695b      	ldr	r3, [r3, #20]
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	7c12      	ldrb	r2, [r2, #16]
 80134a0:	f107 0108 	add.w	r1, r7, #8
 80134a4:	4610      	mov	r0, r2
 80134a6:	4798      	blx	r3
 80134a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134aa:	e029      	b.n	8013500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134ac:	6839      	ldr	r1, [r7, #0]
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f000 fa4a 	bl	8013948 <USBD_CtlError>
            err++;
 80134b4:	7afb      	ldrb	r3, [r7, #11]
 80134b6:	3301      	adds	r3, #1
 80134b8:	72fb      	strb	r3, [r7, #11]
          break;
 80134ba:	e021      	b.n	8013500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134c2:	699b      	ldr	r3, [r3, #24]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d00b      	beq.n	80134e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134ce:	699b      	ldr	r3, [r3, #24]
 80134d0:	687a      	ldr	r2, [r7, #4]
 80134d2:	7c12      	ldrb	r2, [r2, #16]
 80134d4:	f107 0108 	add.w	r1, r7, #8
 80134d8:	4610      	mov	r0, r2
 80134da:	4798      	blx	r3
 80134dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134de:	e00f      	b.n	8013500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 fa30 	bl	8013948 <USBD_CtlError>
            err++;
 80134e8:	7afb      	ldrb	r3, [r7, #11]
 80134ea:	3301      	adds	r3, #1
 80134ec:	72fb      	strb	r3, [r7, #11]
          break;
 80134ee:	e007      	b.n	8013500 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80134f0:	6839      	ldr	r1, [r7, #0]
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f000 fa28 	bl	8013948 <USBD_CtlError>
          err++;
 80134f8:	7afb      	ldrb	r3, [r7, #11]
 80134fa:	3301      	adds	r3, #1
 80134fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80134fe:	bf00      	nop
      }
      break;
 8013500:	e037      	b.n	8013572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	7c1b      	ldrb	r3, [r3, #16]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d109      	bne.n	801351e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013512:	f107 0208 	add.w	r2, r7, #8
 8013516:	4610      	mov	r0, r2
 8013518:	4798      	blx	r3
 801351a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801351c:	e029      	b.n	8013572 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801351e:	6839      	ldr	r1, [r7, #0]
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f000 fa11 	bl	8013948 <USBD_CtlError>
        err++;
 8013526:	7afb      	ldrb	r3, [r7, #11]
 8013528:	3301      	adds	r3, #1
 801352a:	72fb      	strb	r3, [r7, #11]
      break;
 801352c:	e021      	b.n	8013572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	7c1b      	ldrb	r3, [r3, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d10d      	bne.n	8013552 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801353e:	f107 0208 	add.w	r2, r7, #8
 8013542:	4610      	mov	r0, r2
 8013544:	4798      	blx	r3
 8013546:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	3301      	adds	r3, #1
 801354c:	2207      	movs	r2, #7
 801354e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013550:	e00f      	b.n	8013572 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013552:	6839      	ldr	r1, [r7, #0]
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 f9f7 	bl	8013948 <USBD_CtlError>
        err++;
 801355a:	7afb      	ldrb	r3, [r7, #11]
 801355c:	3301      	adds	r3, #1
 801355e:	72fb      	strb	r3, [r7, #11]
      break;
 8013560:	e007      	b.n	8013572 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8013562:	6839      	ldr	r1, [r7, #0]
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f000 f9ef 	bl	8013948 <USBD_CtlError>
      err++;
 801356a:	7afb      	ldrb	r3, [r7, #11]
 801356c:	3301      	adds	r3, #1
 801356e:	72fb      	strb	r3, [r7, #11]
      break;
 8013570:	bf00      	nop
  }

  if (err != 0U)
 8013572:	7afb      	ldrb	r3, [r7, #11]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d11e      	bne.n	80135b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	88db      	ldrh	r3, [r3, #6]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d016      	beq.n	80135ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8013580:	893b      	ldrh	r3, [r7, #8]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d00e      	beq.n	80135a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	88da      	ldrh	r2, [r3, #6]
 801358a:	893b      	ldrh	r3, [r7, #8]
 801358c:	4293      	cmp	r3, r2
 801358e:	bf28      	it	cs
 8013590:	4613      	movcs	r3, r2
 8013592:	b29b      	uxth	r3, r3
 8013594:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013596:	893b      	ldrh	r3, [r7, #8]
 8013598:	461a      	mov	r2, r3
 801359a:	68f9      	ldr	r1, [r7, #12]
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 fa44 	bl	8013a2a <USBD_CtlSendData>
 80135a2:	e009      	b.n	80135b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80135a4:	6839      	ldr	r1, [r7, #0]
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f000 f9ce 	bl	8013948 <USBD_CtlError>
 80135ac:	e004      	b.n	80135b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 fa95 	bl	8013ade <USBD_CtlSendStatus>
 80135b4:	e000      	b.n	80135b8 <USBD_GetDescriptor+0x2cc>
    return;
 80135b6:	bf00      	nop
  }
}
 80135b8:	3710      	adds	r7, #16
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop

080135c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	889b      	ldrh	r3, [r3, #4]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d131      	bne.n	8013636 <USBD_SetAddress+0x76>
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	88db      	ldrh	r3, [r3, #6]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d12d      	bne.n	8013636 <USBD_SetAddress+0x76>
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	885b      	ldrh	r3, [r3, #2]
 80135de:	2b7f      	cmp	r3, #127	; 0x7f
 80135e0:	d829      	bhi.n	8013636 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	885b      	ldrh	r3, [r3, #2]
 80135e6:	b2db      	uxtb	r3, r3
 80135e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	2b03      	cmp	r3, #3
 80135f8:	d104      	bne.n	8013604 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80135fa:	6839      	ldr	r1, [r7, #0]
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f000 f9a3 	bl	8013948 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013602:	e01d      	b.n	8013640 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	7bfa      	ldrb	r2, [r7, #15]
 8013608:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801360c:	7bfb      	ldrb	r3, [r7, #15]
 801360e:	4619      	mov	r1, r3
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f000 ff0b 	bl	801442c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f000 fa61 	bl	8013ade <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801361c:	7bfb      	ldrb	r3, [r7, #15]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d004      	beq.n	801362c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2202      	movs	r2, #2
 8013626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801362a:	e009      	b.n	8013640 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2201      	movs	r2, #1
 8013630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013634:	e004      	b.n	8013640 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013636:	6839      	ldr	r1, [r7, #0]
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f000 f985 	bl	8013948 <USBD_CtlError>
  }
}
 801363e:	bf00      	nop
 8013640:	bf00      	nop
 8013642:	3710      	adds	r7, #16
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
 8013650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	885b      	ldrh	r3, [r3, #2]
 801365a:	b2da      	uxtb	r2, r3
 801365c:	4b4c      	ldr	r3, [pc, #304]	; (8013790 <USBD_SetConfig+0x148>)
 801365e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013660:	4b4b      	ldr	r3, [pc, #300]	; (8013790 <USBD_SetConfig+0x148>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	2b01      	cmp	r3, #1
 8013666:	d905      	bls.n	8013674 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013668:	6839      	ldr	r1, [r7, #0]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 f96c 	bl	8013948 <USBD_CtlError>
    return USBD_FAIL;
 8013670:	2303      	movs	r3, #3
 8013672:	e088      	b.n	8013786 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801367a:	b2db      	uxtb	r3, r3
 801367c:	2b02      	cmp	r3, #2
 801367e:	d002      	beq.n	8013686 <USBD_SetConfig+0x3e>
 8013680:	2b03      	cmp	r3, #3
 8013682:	d025      	beq.n	80136d0 <USBD_SetConfig+0x88>
 8013684:	e071      	b.n	801376a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013686:	4b42      	ldr	r3, [pc, #264]	; (8013790 <USBD_SetConfig+0x148>)
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d01c      	beq.n	80136c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801368e:	4b40      	ldr	r3, [pc, #256]	; (8013790 <USBD_SetConfig+0x148>)
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	461a      	mov	r2, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013698:	4b3d      	ldr	r3, [pc, #244]	; (8013790 <USBD_SetConfig+0x148>)
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	4619      	mov	r1, r3
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f7ff f948 	bl	8012934 <USBD_SetClassConfig>
 80136a4:	4603      	mov	r3, r0
 80136a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80136a8:	7bfb      	ldrb	r3, [r7, #15]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d004      	beq.n	80136b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80136ae:	6839      	ldr	r1, [r7, #0]
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f000 f949 	bl	8013948 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80136b6:	e065      	b.n	8013784 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f000 fa10 	bl	8013ade <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2203      	movs	r2, #3
 80136c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80136c6:	e05d      	b.n	8013784 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f000 fa08 	bl	8013ade <USBD_CtlSendStatus>
      break;
 80136ce:	e059      	b.n	8013784 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80136d0:	4b2f      	ldr	r3, [pc, #188]	; (8013790 <USBD_SetConfig+0x148>)
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d112      	bne.n	80136fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2202      	movs	r2, #2
 80136dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80136e0:	4b2b      	ldr	r3, [pc, #172]	; (8013790 <USBD_SetConfig+0x148>)
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	461a      	mov	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80136ea:	4b29      	ldr	r3, [pc, #164]	; (8013790 <USBD_SetConfig+0x148>)
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	4619      	mov	r1, r3
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7ff f93b 	bl	801296c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 f9f1 	bl	8013ade <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80136fc:	e042      	b.n	8013784 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80136fe:	4b24      	ldr	r3, [pc, #144]	; (8013790 <USBD_SetConfig+0x148>)
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	461a      	mov	r2, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	429a      	cmp	r2, r3
 801370a:	d02a      	beq.n	8013762 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	b2db      	uxtb	r3, r3
 8013712:	4619      	mov	r1, r3
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7ff f929 	bl	801296c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801371a:	4b1d      	ldr	r3, [pc, #116]	; (8013790 <USBD_SetConfig+0x148>)
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	461a      	mov	r2, r3
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013724:	4b1a      	ldr	r3, [pc, #104]	; (8013790 <USBD_SetConfig+0x148>)
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	4619      	mov	r1, r3
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7ff f902 	bl	8012934 <USBD_SetClassConfig>
 8013730:	4603      	mov	r3, r0
 8013732:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013734:	7bfb      	ldrb	r3, [r7, #15]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d00f      	beq.n	801375a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801373a:	6839      	ldr	r1, [r7, #0]
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f000 f903 	bl	8013948 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	b2db      	uxtb	r3, r3
 8013748:	4619      	mov	r1, r3
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f7ff f90e 	bl	801296c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2202      	movs	r2, #2
 8013754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013758:	e014      	b.n	8013784 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f000 f9bf 	bl	8013ade <USBD_CtlSendStatus>
      break;
 8013760:	e010      	b.n	8013784 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 f9bb 	bl	8013ade <USBD_CtlSendStatus>
      break;
 8013768:	e00c      	b.n	8013784 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801376a:	6839      	ldr	r1, [r7, #0]
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f000 f8eb 	bl	8013948 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013772:	4b07      	ldr	r3, [pc, #28]	; (8013790 <USBD_SetConfig+0x148>)
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	4619      	mov	r1, r3
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7ff f8f7 	bl	801296c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801377e:	2303      	movs	r3, #3
 8013780:	73fb      	strb	r3, [r7, #15]
      break;
 8013782:	bf00      	nop
  }

  return ret;
 8013784:	7bfb      	ldrb	r3, [r7, #15]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	20002884 	.word	0x20002884

08013794 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	88db      	ldrh	r3, [r3, #6]
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	d004      	beq.n	80137b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80137a6:	6839      	ldr	r1, [r7, #0]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f000 f8cd 	bl	8013948 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80137ae:	e023      	b.n	80137f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137b6:	b2db      	uxtb	r3, r3
 80137b8:	2b02      	cmp	r3, #2
 80137ba:	dc02      	bgt.n	80137c2 <USBD_GetConfig+0x2e>
 80137bc:	2b00      	cmp	r3, #0
 80137be:	dc03      	bgt.n	80137c8 <USBD_GetConfig+0x34>
 80137c0:	e015      	b.n	80137ee <USBD_GetConfig+0x5a>
 80137c2:	2b03      	cmp	r3, #3
 80137c4:	d00b      	beq.n	80137de <USBD_GetConfig+0x4a>
 80137c6:	e012      	b.n	80137ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2200      	movs	r2, #0
 80137cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	3308      	adds	r3, #8
 80137d2:	2201      	movs	r2, #1
 80137d4:	4619      	mov	r1, r3
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f000 f927 	bl	8013a2a <USBD_CtlSendData>
        break;
 80137dc:	e00c      	b.n	80137f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	3304      	adds	r3, #4
 80137e2:	2201      	movs	r2, #1
 80137e4:	4619      	mov	r1, r3
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f000 f91f 	bl	8013a2a <USBD_CtlSendData>
        break;
 80137ec:	e004      	b.n	80137f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80137ee:	6839      	ldr	r1, [r7, #0]
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f000 f8a9 	bl	8013948 <USBD_CtlError>
        break;
 80137f6:	bf00      	nop
}
 80137f8:	bf00      	nop
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}

08013800 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013810:	b2db      	uxtb	r3, r3
 8013812:	3b01      	subs	r3, #1
 8013814:	2b02      	cmp	r3, #2
 8013816:	d81e      	bhi.n	8013856 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	88db      	ldrh	r3, [r3, #6]
 801381c:	2b02      	cmp	r3, #2
 801381e:	d004      	beq.n	801382a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013820:	6839      	ldr	r1, [r7, #0]
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 f890 	bl	8013948 <USBD_CtlError>
        break;
 8013828:	e01a      	b.n	8013860 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2201      	movs	r2, #1
 801382e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013836:	2b00      	cmp	r3, #0
 8013838:	d005      	beq.n	8013846 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	f043 0202 	orr.w	r2, r3, #2
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	330c      	adds	r3, #12
 801384a:	2202      	movs	r2, #2
 801384c:	4619      	mov	r1, r3
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f000 f8eb 	bl	8013a2a <USBD_CtlSendData>
      break;
 8013854:	e004      	b.n	8013860 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013856:	6839      	ldr	r1, [r7, #0]
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f000 f875 	bl	8013948 <USBD_CtlError>
      break;
 801385e:	bf00      	nop
  }
}
 8013860:	bf00      	nop
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	885b      	ldrh	r3, [r3, #2]
 8013876:	2b01      	cmp	r3, #1
 8013878:	d106      	bne.n	8013888 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2201      	movs	r2, #1
 801387e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f000 f92b 	bl	8013ade <USBD_CtlSendStatus>
  }
}
 8013888:	bf00      	nop
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	3b01      	subs	r3, #1
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	d80b      	bhi.n	80138c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	885b      	ldrh	r3, [r3, #2]
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d10c      	bne.n	80138ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2200      	movs	r2, #0
 80138b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f000 f910 	bl	8013ade <USBD_CtlSendStatus>
      }
      break;
 80138be:	e004      	b.n	80138ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80138c0:	6839      	ldr	r1, [r7, #0]
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f000 f840 	bl	8013948 <USBD_CtlError>
      break;
 80138c8:	e000      	b.n	80138cc <USBD_ClrFeature+0x3c>
      break;
 80138ca:	bf00      	nop
  }
}
 80138cc:	bf00      	nop
 80138ce:	3708      	adds	r7, #8
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	781a      	ldrb	r2, [r3, #0]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	3301      	adds	r3, #1
 80138ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	781a      	ldrb	r2, [r3, #0]
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	3301      	adds	r3, #1
 80138fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80138fe:	68f8      	ldr	r0, [r7, #12]
 8013900:	f7ff fabb 	bl	8012e7a <SWAPBYTE>
 8013904:	4603      	mov	r3, r0
 8013906:	461a      	mov	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	3301      	adds	r3, #1
 8013910:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	3301      	adds	r3, #1
 8013916:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f7ff faae 	bl	8012e7a <SWAPBYTE>
 801391e:	4603      	mov	r3, r0
 8013920:	461a      	mov	r2, r3
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	3301      	adds	r3, #1
 801392a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	3301      	adds	r3, #1
 8013930:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013932:	68f8      	ldr	r0, [r7, #12]
 8013934:	f7ff faa1 	bl	8012e7a <SWAPBYTE>
 8013938:	4603      	mov	r3, r0
 801393a:	461a      	mov	r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	80da      	strh	r2, [r3, #6]
}
 8013940:	bf00      	nop
 8013942:	3710      	adds	r7, #16
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013952:	2180      	movs	r1, #128	; 0x80
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 fcff 	bl	8014358 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801395a:	2100      	movs	r1, #0
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f000 fcfb 	bl	8014358 <USBD_LL_StallEP>
}
 8013962:	bf00      	nop
 8013964:	3708      	adds	r7, #8
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}

0801396a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801396a:	b580      	push	{r7, lr}
 801396c:	b086      	sub	sp, #24
 801396e:	af00      	add	r7, sp, #0
 8013970:	60f8      	str	r0, [r7, #12]
 8013972:	60b9      	str	r1, [r7, #8]
 8013974:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013976:	2300      	movs	r3, #0
 8013978:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d036      	beq.n	80139ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8013984:	6938      	ldr	r0, [r7, #16]
 8013986:	f000 f836 	bl	80139f6 <USBD_GetLen>
 801398a:	4603      	mov	r3, r0
 801398c:	3301      	adds	r3, #1
 801398e:	b29b      	uxth	r3, r3
 8013990:	005b      	lsls	r3, r3, #1
 8013992:	b29a      	uxth	r2, r3
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013998:	7dfb      	ldrb	r3, [r7, #23]
 801399a:	68ba      	ldr	r2, [r7, #8]
 801399c:	4413      	add	r3, r2
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	7812      	ldrb	r2, [r2, #0]
 80139a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80139a4:	7dfb      	ldrb	r3, [r7, #23]
 80139a6:	3301      	adds	r3, #1
 80139a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80139aa:	7dfb      	ldrb	r3, [r7, #23]
 80139ac:	68ba      	ldr	r2, [r7, #8]
 80139ae:	4413      	add	r3, r2
 80139b0:	2203      	movs	r2, #3
 80139b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80139b4:	7dfb      	ldrb	r3, [r7, #23]
 80139b6:	3301      	adds	r3, #1
 80139b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80139ba:	e013      	b.n	80139e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80139bc:	7dfb      	ldrb	r3, [r7, #23]
 80139be:	68ba      	ldr	r2, [r7, #8]
 80139c0:	4413      	add	r3, r2
 80139c2:	693a      	ldr	r2, [r7, #16]
 80139c4:	7812      	ldrb	r2, [r2, #0]
 80139c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	3301      	adds	r3, #1
 80139cc:	613b      	str	r3, [r7, #16]
    idx++;
 80139ce:	7dfb      	ldrb	r3, [r7, #23]
 80139d0:	3301      	adds	r3, #1
 80139d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80139d4:	7dfb      	ldrb	r3, [r7, #23]
 80139d6:	68ba      	ldr	r2, [r7, #8]
 80139d8:	4413      	add	r3, r2
 80139da:	2200      	movs	r2, #0
 80139dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80139de:	7dfb      	ldrb	r3, [r7, #23]
 80139e0:	3301      	adds	r3, #1
 80139e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d1e7      	bne.n	80139bc <USBD_GetString+0x52>
 80139ec:	e000      	b.n	80139f0 <USBD_GetString+0x86>
    return;
 80139ee:	bf00      	nop
  }
}
 80139f0:	3718      	adds	r7, #24
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80139f6:	b480      	push	{r7}
 80139f8:	b085      	sub	sp, #20
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80139fe:	2300      	movs	r3, #0
 8013a00:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013a06:	e005      	b.n	8013a14 <USBD_GetLen+0x1e>
  {
    len++;
 8013a08:	7bfb      	ldrb	r3, [r7, #15]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	3301      	adds	r3, #1
 8013a12:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d1f5      	bne.n	8013a08 <USBD_GetLen+0x12>
  }

  return len;
 8013a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3714      	adds	r7, #20
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr

08013a2a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013a2a:	b580      	push	{r7, lr}
 8013a2c:	b084      	sub	sp, #16
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	60f8      	str	r0, [r7, #12]
 8013a32:	60b9      	str	r1, [r7, #8]
 8013a34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	2202      	movs	r2, #2
 8013a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	68ba      	ldr	r2, [r7, #8]
 8013a4e:	2100      	movs	r1, #0
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f000 fd0a 	bl	801446a <USBD_LL_Transmit>

  return USBD_OK;
 8013a56:	2300      	movs	r3, #0
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3710      	adds	r7, #16
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}

08013a60 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	68ba      	ldr	r2, [r7, #8]
 8013a70:	2100      	movs	r1, #0
 8013a72:	68f8      	ldr	r0, [r7, #12]
 8013a74:	f000 fcf9 	bl	801446a <USBD_LL_Transmit>

  return USBD_OK;
 8013a78:	2300      	movs	r3, #0
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b084      	sub	sp, #16
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	60f8      	str	r0, [r7, #12]
 8013a8a:	60b9      	str	r1, [r7, #8]
 8013a8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	2203      	movs	r2, #3
 8013a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	68ba      	ldr	r2, [r7, #8]
 8013aaa:	2100      	movs	r1, #0
 8013aac:	68f8      	ldr	r0, [r7, #12]
 8013aae:	f000 fcfd 	bl	80144ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ab2:	2300      	movs	r3, #0
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3710      	adds	r7, #16
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}

08013abc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b084      	sub	sp, #16
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	60f8      	str	r0, [r7, #12]
 8013ac4:	60b9      	str	r1, [r7, #8]
 8013ac6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	68ba      	ldr	r2, [r7, #8]
 8013acc:	2100      	movs	r1, #0
 8013ace:	68f8      	ldr	r0, [r7, #12]
 8013ad0:	f000 fcec 	bl	80144ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ad4:	2300      	movs	r3, #0
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3710      	adds	r7, #16
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}

08013ade <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013ade:	b580      	push	{r7, lr}
 8013ae0:	b082      	sub	sp, #8
 8013ae2:	af00      	add	r7, sp, #0
 8013ae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2204      	movs	r2, #4
 8013aea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013aee:	2300      	movs	r3, #0
 8013af0:	2200      	movs	r2, #0
 8013af2:	2100      	movs	r1, #0
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f000 fcb8 	bl	801446a <USBD_LL_Transmit>

  return USBD_OK;
 8013afa:	2300      	movs	r3, #0
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3708      	adds	r7, #8
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2205      	movs	r2, #5
 8013b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b14:	2300      	movs	r3, #0
 8013b16:	2200      	movs	r2, #0
 8013b18:	2100      	movs	r1, #0
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f000 fcc6 	bl	80144ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3708      	adds	r7, #8
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
	...

08013b2c <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b0d2      	sub	sp, #328	; 0x148
 8013b30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013b32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013b36:	22c8      	movs	r2, #200	; 0xc8
 8013b38:	2100      	movs	r1, #0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f005 fe71 	bl	8019822 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013b40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013b44:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013b48:	4618      	mov	r0, r3
 8013b4a:	2360      	movs	r3, #96	; 0x60
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	2100      	movs	r1, #0
 8013b50:	f005 fe67 	bl	8019822 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 8013b54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013b58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	2300      	movs	r3, #0
 8013b60:	6013      	str	r3, [r2, #0]
 8013b62:	6053      	str	r3, [r2, #4]
 8013b64:	6093      	str	r3, [r2, #8]
 8013b66:	60d3      	str	r3, [r2, #12]
 8013b68:	6113      	str	r3, [r2, #16]
 8013b6a:	6153      	str	r3, [r2, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 8013b6c:	4b44      	ldr	r3, [pc, #272]	; (8013c80 <USBD_Clock_Config+0x154>)
 8013b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013b72:	4a43      	ldr	r2, [pc, #268]	; (8013c80 <USBD_Clock_Config+0x154>)
 8013b74:	f043 0304 	orr.w	r3, r3, #4
 8013b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013b7c:	4b40      	ldr	r3, [pc, #256]	; (8013c80 <USBD_Clock_Config+0x154>)
 8013b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013b82:	f003 0204 	and.w	r2, r3, #4
 8013b86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013b8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013b8e:	601a      	str	r2, [r3, #0]
 8013b90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013b94:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013b98:	681b      	ldr	r3, [r3, #0]
  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8013b9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013b9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013ba2:	2220      	movs	r2, #32
 8013ba4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8013ba6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013baa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013bae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8013bb4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013bb8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8013bc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013bc4:	f04f 0300 	mov.w	r3, #0
 8013bc8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.IclkClockSelection  = RCC_CLK48CLKSOURCE_HSI48;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8013bd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7f7 fbaa 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8013bdc:	f107 0320 	add.w	r3, r7, #32
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7f6 f8f9 	bl	8009dd8 <HAL_RCC_OscConfig>
 8013be6:	4603      	mov	r3, r0
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d001      	beq.n	8013bf0 <USBD_Clock_Config+0xc4>
  {
    Error_Handler();
 8013bec:	f7ee fc32 	bl	8002454 <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/
  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 8013bf0:	4b23      	ldr	r3, [pc, #140]	; (8013c80 <USBD_Clock_Config+0x154>)
 8013bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013bf6:	4a22      	ldr	r2, [pc, #136]	; (8013c80 <USBD_Clock_Config+0x154>)
 8013bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013bfc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8013c00:	4b1f      	ldr	r3, [pc, #124]	; (8013c80 <USBD_Clock_Config+0x154>)
 8013c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013c06:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8013c0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c0e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013c12:	601a      	str	r2, [r3, #0]
 8013c14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013c1c:	681b      	ldr	r3, [r3, #0]

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8013c1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c22:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013c26:	2200      	movs	r2, #0
 8013c28:	601a      	str	r2, [r3, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8013c2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c2e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013c32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8013c36:	605a      	str	r2, [r3, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  RCC_CRS_RELOADVALUE_DEFAULT;
 8013c38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013c40:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8013c44:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8013c46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c4a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013c4e:	2222      	movs	r2, #34	; 0x22
 8013c50:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8013c52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c56:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	609a      	str	r2, [r3, #8]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8013c5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013c66:	2220      	movs	r2, #32
 8013c68:	615a      	str	r2, [r3, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 8013c6a:	f107 0308 	add.w	r3, r7, #8
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7f9 fe78 	bl	800d964 <HAL_RCCEx_CRSConfig>
}
 8013c74:	bf00      	nop
 8013c76:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	46020c00 	.word	0x46020c00

08013c84 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 8013c88:	f7ff ff50 	bl	8013b2c <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
//  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	4912      	ldr	r1, [pc, #72]	; (8013cd8 <MX_USB_Device_Init+0x54>)
 8013c90:	4812      	ldr	r0, [pc, #72]	; (8013cdc <MX_USB_Device_Init+0x58>)
 8013c92:	f7fe fde1 	bl	8012858 <USBD_Init>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 8013c9c:	f7ee fbda 	bl	8002454 <Error_Handler>
  }
//  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8013ca0:	490f      	ldr	r1, [pc, #60]	; (8013ce0 <MX_USB_Device_Init+0x5c>)
 8013ca2:	480e      	ldr	r0, [pc, #56]	; (8013cdc <MX_USB_Device_Init+0x58>)
 8013ca4:	f7fe fe08 	bl	80128b8 <USBD_RegisterClass>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d001      	beq.n	8013cb2 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8013cae:	f7ee fbd1 	bl	8002454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8013cb2:	490c      	ldr	r1, [pc, #48]	; (8013ce4 <MX_USB_Device_Init+0x60>)
 8013cb4:	4809      	ldr	r0, [pc, #36]	; (8013cdc <MX_USB_Device_Init+0x58>)
 8013cb6:	f7fe fd59 	bl	801276c <USBD_CDC_RegisterInterface>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d001      	beq.n	8013cc4 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8013cc0:	f7ee fbc8 	bl	8002454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8013cc4:	4805      	ldr	r0, [pc, #20]	; (8013cdc <MX_USB_Device_Init+0x58>)
 8013cc6:	f7fe fe1e 	bl	8012906 <USBD_Start>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d001      	beq.n	8013cd4 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8013cd0:	f7ee fbc0 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8013cd4:	bf00      	nop
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	20000188 	.word	0x20000188
 8013cdc:	20002888 	.word	0x20002888
 8013ce0:	20000070 	.word	0x20000070
 8013ce4:	20000174 	.word	0x20000174

08013ce8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013cec:	2200      	movs	r2, #0
 8013cee:	4905      	ldr	r1, [pc, #20]	; (8013d04 <CDC_Init_FS+0x1c>)
 8013cf0:	4805      	ldr	r0, [pc, #20]	; (8013d08 <CDC_Init_FS+0x20>)
 8013cf2:	f7fe fd50 	bl	8012796 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013cf6:	4905      	ldr	r1, [pc, #20]	; (8013d0c <CDC_Init_FS+0x24>)
 8013cf8:	4803      	ldr	r0, [pc, #12]	; (8013d08 <CDC_Init_FS+0x20>)
 8013cfa:	f7fe fd6a 	bl	80127d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013cfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	20003358 	.word	0x20003358
 8013d08:	20002888 	.word	0x20002888
 8013d0c:	20002b58 	.word	0x20002b58

08013d10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013d10:	b480      	push	{r7}
 8013d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013d14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr

08013d20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b083      	sub	sp, #12
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	4603      	mov	r3, r0
 8013d28:	6039      	str	r1, [r7, #0]
 8013d2a:	71fb      	strb	r3, [r7, #7]
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013d30:	79fb      	ldrb	r3, [r7, #7]
 8013d32:	2b23      	cmp	r3, #35	; 0x23
 8013d34:	d84a      	bhi.n	8013dcc <CDC_Control_FS+0xac>
 8013d36:	a201      	add	r2, pc, #4	; (adr r2, 8013d3c <CDC_Control_FS+0x1c>)
 8013d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d3c:	08013dcd 	.word	0x08013dcd
 8013d40:	08013dcd 	.word	0x08013dcd
 8013d44:	08013dcd 	.word	0x08013dcd
 8013d48:	08013dcd 	.word	0x08013dcd
 8013d4c:	08013dcd 	.word	0x08013dcd
 8013d50:	08013dcd 	.word	0x08013dcd
 8013d54:	08013dcd 	.word	0x08013dcd
 8013d58:	08013dcd 	.word	0x08013dcd
 8013d5c:	08013dcd 	.word	0x08013dcd
 8013d60:	08013dcd 	.word	0x08013dcd
 8013d64:	08013dcd 	.word	0x08013dcd
 8013d68:	08013dcd 	.word	0x08013dcd
 8013d6c:	08013dcd 	.word	0x08013dcd
 8013d70:	08013dcd 	.word	0x08013dcd
 8013d74:	08013dcd 	.word	0x08013dcd
 8013d78:	08013dcd 	.word	0x08013dcd
 8013d7c:	08013dcd 	.word	0x08013dcd
 8013d80:	08013dcd 	.word	0x08013dcd
 8013d84:	08013dcd 	.word	0x08013dcd
 8013d88:	08013dcd 	.word	0x08013dcd
 8013d8c:	08013dcd 	.word	0x08013dcd
 8013d90:	08013dcd 	.word	0x08013dcd
 8013d94:	08013dcd 	.word	0x08013dcd
 8013d98:	08013dcd 	.word	0x08013dcd
 8013d9c:	08013dcd 	.word	0x08013dcd
 8013da0:	08013dcd 	.word	0x08013dcd
 8013da4:	08013dcd 	.word	0x08013dcd
 8013da8:	08013dcd 	.word	0x08013dcd
 8013dac:	08013dcd 	.word	0x08013dcd
 8013db0:	08013dcd 	.word	0x08013dcd
 8013db4:	08013dcd 	.word	0x08013dcd
 8013db8:	08013dcd 	.word	0x08013dcd
 8013dbc:	08013dcd 	.word	0x08013dcd
 8013dc0:	08013dcd 	.word	0x08013dcd
 8013dc4:	08013dcd 	.word	0x08013dcd
 8013dc8:	08013dcd 	.word	0x08013dcd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013dcc:	bf00      	nop
  }

  return (USBD_OK);
 8013dce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	370c      	adds	r7, #12
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr

08013ddc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013de6:	6879      	ldr	r1, [r7, #4]
 8013de8:	4805      	ldr	r0, [pc, #20]	; (8013e00 <CDC_Receive_FS+0x24>)
 8013dea:	f7fe fcf2 	bl	80127d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013dee:	4804      	ldr	r0, [pc, #16]	; (8013e00 <CDC_Receive_FS+0x24>)
 8013df0:	f7fe fd08 	bl	8012804 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013df4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3708      	adds	r7, #8
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	20002888 	.word	0x20002888

08013e04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b087      	sub	sp, #28
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013e12:	2300      	movs	r3, #0
 8013e14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	371c      	adds	r7, #28
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr
	...

08013e28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	4603      	mov	r3, r0
 8013e30:	6039      	str	r1, [r7, #0]
 8013e32:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	2212      	movs	r2, #18
 8013e38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013e3a:	4b03      	ldr	r3, [pc, #12]	; (8013e48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr
 8013e48:	200001a4 	.word	0x200001a4

08013e4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b083      	sub	sp, #12
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	4603      	mov	r3, r0
 8013e54:	6039      	str	r1, [r7, #0]
 8013e56:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	2204      	movs	r2, #4
 8013e5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013e5e:	4b03      	ldr	r3, [pc, #12]	; (8013e6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	370c      	adds	r7, #12
 8013e64:	46bd      	mov	sp, r7
 8013e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6a:	4770      	bx	lr
 8013e6c:	200001b8 	.word	0x200001b8

08013e70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	4603      	mov	r3, r0
 8013e78:	6039      	str	r1, [r7, #0]
 8013e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013e7c:	79fb      	ldrb	r3, [r7, #7]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d105      	bne.n	8013e8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013e82:	683a      	ldr	r2, [r7, #0]
 8013e84:	4907      	ldr	r1, [pc, #28]	; (8013ea4 <USBD_FS_ProductStrDescriptor+0x34>)
 8013e86:	4808      	ldr	r0, [pc, #32]	; (8013ea8 <USBD_FS_ProductStrDescriptor+0x38>)
 8013e88:	f7ff fd6f 	bl	801396a <USBD_GetString>
 8013e8c:	e004      	b.n	8013e98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013e8e:	683a      	ldr	r2, [r7, #0]
 8013e90:	4904      	ldr	r1, [pc, #16]	; (8013ea4 <USBD_FS_ProductStrDescriptor+0x34>)
 8013e92:	4805      	ldr	r0, [pc, #20]	; (8013ea8 <USBD_FS_ProductStrDescriptor+0x38>)
 8013e94:	f7ff fd69 	bl	801396a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013e98:	4b02      	ldr	r3, [pc, #8]	; (8013ea4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3708      	adds	r7, #8
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
 8013ea2:	bf00      	nop
 8013ea4:	20003b58 	.word	0x20003b58
 8013ea8:	0801e980 	.word	0x0801e980

08013eac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	6039      	str	r1, [r7, #0]
 8013eb6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013eb8:	683a      	ldr	r2, [r7, #0]
 8013eba:	4904      	ldr	r1, [pc, #16]	; (8013ecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013ebc:	4804      	ldr	r0, [pc, #16]	; (8013ed0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013ebe:	f7ff fd54 	bl	801396a <USBD_GetString>
  return USBD_StrDesc;
 8013ec2:	4b02      	ldr	r3, [pc, #8]	; (8013ecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	20003b58 	.word	0x20003b58
 8013ed0:	0801e998 	.word	0x0801e998

08013ed4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	4603      	mov	r3, r0
 8013edc:	6039      	str	r1, [r7, #0]
 8013ede:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013ee0:	79fb      	ldrb	r3, [r7, #7]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d105      	bne.n	8013ef2 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8013ee6:	683a      	ldr	r2, [r7, #0]
 8013ee8:	4907      	ldr	r1, [pc, #28]	; (8013f08 <USBD_FS_SerialStrDescriptor+0x34>)
 8013eea:	4808      	ldr	r0, [pc, #32]	; (8013f0c <USBD_FS_SerialStrDescriptor+0x38>)
 8013eec:	f7ff fd3d 	bl	801396a <USBD_GetString>
 8013ef0:	e004      	b.n	8013efc <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8013ef2:	683a      	ldr	r2, [r7, #0]
 8013ef4:	4904      	ldr	r1, [pc, #16]	; (8013f08 <USBD_FS_SerialStrDescriptor+0x34>)
 8013ef6:	4805      	ldr	r0, [pc, #20]	; (8013f0c <USBD_FS_SerialStrDescriptor+0x38>)
 8013ef8:	f7ff fd37 	bl	801396a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013efc:	4b02      	ldr	r3, [pc, #8]	; (8013f08 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3708      	adds	r7, #8
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	20003b58 	.word	0x20003b58
 8013f0c:	0801e9ac 	.word	0x0801e9ac

08013f10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b082      	sub	sp, #8
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	4603      	mov	r3, r0
 8013f18:	6039      	str	r1, [r7, #0]
 8013f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013f1c:	79fb      	ldrb	r3, [r7, #7]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d105      	bne.n	8013f2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013f22:	683a      	ldr	r2, [r7, #0]
 8013f24:	4907      	ldr	r1, [pc, #28]	; (8013f44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013f26:	4808      	ldr	r0, [pc, #32]	; (8013f48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013f28:	f7ff fd1f 	bl	801396a <USBD_GetString>
 8013f2c:	e004      	b.n	8013f38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013f2e:	683a      	ldr	r2, [r7, #0]
 8013f30:	4904      	ldr	r1, [pc, #16]	; (8013f44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013f32:	4805      	ldr	r0, [pc, #20]	; (8013f48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013f34:	f7ff fd19 	bl	801396a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013f38:	4b02      	ldr	r3, [pc, #8]	; (8013f44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3708      	adds	r7, #8
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	20003b58 	.word	0x20003b58
 8013f48:	0801e9bc 	.word	0x0801e9bc

08013f4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	4603      	mov	r3, r0
 8013f54:	6039      	str	r1, [r7, #0]
 8013f56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013f58:	79fb      	ldrb	r3, [r7, #7]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d105      	bne.n	8013f6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013f5e:	683a      	ldr	r2, [r7, #0]
 8013f60:	4907      	ldr	r1, [pc, #28]	; (8013f80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013f62:	4808      	ldr	r0, [pc, #32]	; (8013f84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013f64:	f7ff fd01 	bl	801396a <USBD_GetString>
 8013f68:	e004      	b.n	8013f74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013f6a:	683a      	ldr	r2, [r7, #0]
 8013f6c:	4904      	ldr	r1, [pc, #16]	; (8013f80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013f6e:	4805      	ldr	r0, [pc, #20]	; (8013f84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013f70:	f7ff fcfb 	bl	801396a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013f74:	4b02      	ldr	r3, [pc, #8]	; (8013f80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3708      	adds	r7, #8
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	20003b58 	.word	0x20003b58
 8013f84:	0801e9c8 	.word	0x0801e9c8

08013f88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	f7fe fcfc 	bl	801299c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013fa4:	bf00      	nop
 8013fa6:	3708      	adds	r7, #8
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}

08013fac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
 8013fb4:	460b      	mov	r3, r1
 8013fb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013fbe:	78fa      	ldrb	r2, [r7, #3]
 8013fc0:	6879      	ldr	r1, [r7, #4]
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	00db      	lsls	r3, r3, #3
 8013fc6:	4413      	add	r3, r2
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	440b      	add	r3, r1
 8013fcc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	78fb      	ldrb	r3, [r7, #3]
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	f7fe fd36 	bl	8012a46 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8013fda:	bf00      	nop
 8013fdc:	3708      	adds	r7, #8
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}

08013fe2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b082      	sub	sp, #8
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
 8013fea:	460b      	mov	r3, r1
 8013fec:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013ff4:	78fa      	ldrb	r2, [r7, #3]
 8013ff6:	6879      	ldr	r1, [r7, #4]
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	00db      	lsls	r3, r3, #3
 8013ffc:	4413      	add	r3, r2
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	440b      	add	r3, r1
 8014002:	334c      	adds	r3, #76	; 0x4c
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	78fb      	ldrb	r3, [r7, #3]
 8014008:	4619      	mov	r1, r3
 801400a:	f7fe fd7f 	bl	8012b0c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801400e:	bf00      	nop
 8014010:	3708      	adds	r7, #8
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014016:	b580      	push	{r7, lr}
 8014018:	b082      	sub	sp, #8
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014024:	4618      	mov	r0, r3
 8014026:	f7fe fe93 	bl	8012d50 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801402a:	bf00      	nop
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}

08014032 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014032:	b580      	push	{r7, lr}
 8014034:	b084      	sub	sp, #16
 8014036:	af00      	add	r7, sp, #0
 8014038:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801403a:	2301      	movs	r3, #1
 801403c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	2b02      	cmp	r3, #2
 8014044:	d001      	beq.n	801404a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014046:	f7ee fa05 	bl	8002454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014050:	7bfa      	ldrb	r2, [r7, #15]
 8014052:	4611      	mov	r1, r2
 8014054:	4618      	mov	r0, r3
 8014056:	f7fe fe3d 	bl	8012cd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014060:	4618      	mov	r0, r3
 8014062:	f7fe fde9 	bl	8012c38 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014066:	bf00      	nop
 8014068:	3710      	adds	r7, #16
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
	...

08014070 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801407e:	4618      	mov	r0, r3
 8014080:	f7fe fe38 	bl	8012cf4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if ((hpcd->Init.low_power_enable) && (((USBD_HandleTypeDef*)hpcd->pData)->dev_old_state == USBD_STATE_CONFIGURED))
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6a1b      	ldr	r3, [r3, #32]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d02b      	beq.n	80140e4 <HAL_PCD_SuspendCallback+0x74>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014092:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014096:	b2db      	uxtb	r3, r3
 8014098:	2b03      	cmp	r3, #3
 801409a:	d123      	bne.n	80140e4 <HAL_PCD_SuspendCallback+0x74>
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, 0U);
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
    HAL_PWR_EnableSleepOnExit();
#else
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	6812      	ldr	r2, [r2, #0]
 80140aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80140ae:	f043 0301 	orr.w	r3, r3, #1
 80140b2:	6013      	str	r3, [r2, #0]
    __HAL_RCC_USB_CLK_SLEEP_ENABLE();
 80140b4:	4b0d      	ldr	r3, [pc, #52]	; (80140ec <HAL_PCD_SuspendCallback+0x7c>)
 80140b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80140ba:	4a0c      	ldr	r2, [pc, #48]	; (80140ec <HAL_PCD_SuspendCallback+0x7c>)
 80140bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80140c0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    /* Stop 1 mode */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 80140c4:	4b0a      	ldr	r3, [pc, #40]	; (80140f0 <HAL_PCD_SuspendCallback+0x80>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f023 0307 	bic.w	r3, r3, #7
 80140cc:	4a08      	ldr	r2, [pc, #32]	; (80140f0 <HAL_PCD_SuspendCallback+0x80>)
 80140ce:	f043 0301 	orr.w	r3, r3, #1
 80140d2:	6013      	str	r3, [r2, #0]
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
 80140d4:	4b07      	ldr	r3, [pc, #28]	; (80140f4 <HAL_PCD_SuspendCallback+0x84>)
 80140d6:	691b      	ldr	r3, [r3, #16]
 80140d8:	4a06      	ldr	r2, [pc, #24]	; (80140f4 <HAL_PCD_SuspendCallback+0x84>)
 80140da:	f043 0304 	orr.w	r3, r3, #4
 80140de:	6113      	str	r3, [r2, #16]
    HAL_PWR_EnableSleepOnExit();
 80140e0:	f7f5 fdb8 	bl	8009c54 <HAL_PWR_EnableSleepOnExit>
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80140e4:	bf00      	nop
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	46020c00 	.word	0x46020c00
 80140f0:	46020800 	.word	0x46020800
 80140f4:	e000ed00 	.word	0xe000ed00

080140f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6a1b      	ldr	r3, [r3, #32]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d013      	beq.n	8014130 <HAL_PCD_ResumeCallback+0x38>
  {
#ifdef USBD_LPM_SLEEP_CONFIG
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
#else
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014108:	4b0e      	ldr	r3, [pc, #56]	; (8014144 <HAL_PCD_ResumeCallback+0x4c>)
 801410a:	691b      	ldr	r3, [r3, #16]
 801410c:	4a0d      	ldr	r2, [pc, #52]	; (8014144 <HAL_PCD_ResumeCallback+0x4c>)
 801410e:	f023 0306 	bic.w	r3, r3, #6
 8014112:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014114:	f000 fa30 	bl	8014578 <SystemClockConfig_Resume>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	6812      	ldr	r2, [r2, #0]
 8014126:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801412a:	f023 0301 	bic.w	r3, r3, #1
 801412e:	6013      	str	r3, [r2, #0]
#endif
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014136:	4618      	mov	r0, r3
 8014138:	f7fe fdf2 	bl	8012d20 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801413c:	bf00      	nop
 801413e:	3708      	adds	r7, #8
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	e000ed00 	.word	0xe000ed00

08014148 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	460b      	mov	r3, r1
 8014152:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801415a:	78fa      	ldrb	r2, [r7, #3]
 801415c:	4611      	mov	r1, r2
 801415e:	4618      	mov	r0, r3
 8014160:	f7fe fe3e 	bl	8012de0 <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 8014164:	bf00      	nop
 8014166:	3708      	adds	r7, #8
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}

0801416c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b082      	sub	sp, #8
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	460b      	mov	r3, r1
 8014176:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801417e:	78fa      	ldrb	r2, [r7, #3]
 8014180:	4611      	mov	r1, r2
 8014182:	4618      	mov	r0, r3
 8014184:	f7fe fe06 	bl	8012d94 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 8014188:	bf00      	nop
 801418a:	3708      	adds	r7, #8
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fe fe44 	bl	8012e2c <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 80141a4:	bf00      	nop
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fe fe41 	bl	8012e42 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 80141c0:	bf00      	nop
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  /* Enable USB power on Pwrctrl CR2 register. */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80141d0:	4b2e      	ldr	r3, [pc, #184]	; (801428c <USBD_LL_Init+0xc4>)
 80141d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80141d6:	f003 0304 	and.w	r3, r3, #4
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d119      	bne.n	8014212 <USBD_LL_Init+0x4a>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80141de:	4b2b      	ldr	r3, [pc, #172]	; (801428c <USBD_LL_Init+0xc4>)
 80141e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80141e4:	4a29      	ldr	r2, [pc, #164]	; (801428c <USBD_LL_Init+0xc4>)
 80141e6:	f043 0304 	orr.w	r3, r3, #4
 80141ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80141ee:	4b27      	ldr	r3, [pc, #156]	; (801428c <USBD_LL_Init+0xc4>)
 80141f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80141f4:	f003 0304 	and.w	r3, r3, #4
 80141f8:	60fb      	str	r3, [r7, #12]
 80141fa:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddUSB();
 80141fc:	f7f5 fdbc 	bl	8009d78 <HAL_PWREx_EnableVddUSB>
    __HAL_RCC_PWR_CLK_DISABLE();
 8014200:	4b22      	ldr	r3, [pc, #136]	; (801428c <USBD_LL_Init+0xc4>)
 8014202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014206:	4a21      	ldr	r2, [pc, #132]	; (801428c <USBD_LL_Init+0xc4>)
 8014208:	f023 0304 	bic.w	r3, r3, #4
 801420c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014210:	e001      	b.n	8014216 <USBD_LL_Init+0x4e>
  }
  else
  {
    HAL_PWREx_EnableVddUSB();
 8014212:	f7f5 fdb1 	bl	8009d78 <HAL_PWREx_EnableVddUSB>
  }
  hpcd_USB_OTG_FS.pData = pdev;
 8014216:	4a1e      	ldr	r2, [pc, #120]	; (8014290 <USBD_LL_Init+0xc8>)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	4a1b      	ldr	r2, [pc, #108]	; (8014290 <USBD_LL_Init+0xc8>)
 8014222:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014226:	4b1a      	ldr	r3, [pc, #104]	; (8014290 <USBD_LL_Init+0xc8>)
 8014228:	4a1a      	ldr	r2, [pc, #104]	; (8014294 <USBD_LL_Init+0xcc>)
 801422a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801422c:	4b18      	ldr	r3, [pc, #96]	; (8014290 <USBD_LL_Init+0xc8>)
 801422e:	2206      	movs	r2, #6
 8014230:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014232:	4b17      	ldr	r3, [pc, #92]	; (8014290 <USBD_LL_Init+0xc8>)
 8014234:	2202      	movs	r2, #2
 8014236:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014238:	4b15      	ldr	r3, [pc, #84]	; (8014290 <USBD_LL_Init+0xc8>)
 801423a:	2202      	movs	r2, #2
 801423c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801423e:	4b14      	ldr	r3, [pc, #80]	; (8014290 <USBD_LL_Init+0xc8>)
 8014240:	2200      	movs	r2, #0
 8014242:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014244:	4b12      	ldr	r3, [pc, #72]	; (8014290 <USBD_LL_Init+0xc8>)
 8014246:	2200      	movs	r2, #0
 8014248:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801424a:	4b11      	ldr	r3, [pc, #68]	; (8014290 <USBD_LL_Init+0xc8>)
 801424c:	2200      	movs	r2, #0
 801424e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014250:	4b0f      	ldr	r3, [pc, #60]	; (8014290 <USBD_LL_Init+0xc8>)
 8014252:	2200      	movs	r2, #0
 8014254:	629a      	str	r2, [r3, #40]	; 0x28
  /* Initialize LL Driver */
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014256:	480e      	ldr	r0, [pc, #56]	; (8014290 <USBD_LL_Init+0xc8>)
 8014258:	f7f4 fa2a 	bl	80086b0 <HAL_PCD_Init>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d001      	beq.n	8014266 <USBD_LL_Init+0x9e>
  {
    Error_Handler( );
 8014262:	f7ee f8f7 	bl	8002454 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN FiFo_Configuration */
  
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014266:	2180      	movs	r1, #128	; 0x80
 8014268:	4809      	ldr	r0, [pc, #36]	; (8014290 <USBD_LL_Init+0xc8>)
 801426a:	f7f5 fcb2 	bl	8009bd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801426e:	2240      	movs	r2, #64	; 0x40
 8014270:	2100      	movs	r1, #0
 8014272:	4807      	ldr	r0, [pc, #28]	; (8014290 <USBD_LL_Init+0xc8>)
 8014274:	f7f5 fc66 	bl	8009b44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014278:	2280      	movs	r2, #128	; 0x80
 801427a:	2101      	movs	r1, #1
 801427c:	4804      	ldr	r0, [pc, #16]	; (8014290 <USBD_LL_Init+0xc8>)
 801427e:	f7f5 fc61 	bl	8009b44 <HAL_PCDEx_SetTxFiFo>
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x10);
//  /* USER CODE END FiFo_Configuration */
//  /* USER CODE BEGIN FiFo_Configuration_HID */
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x10);
  /* USER CODE END FiFo_Configuration_HID */
  return USBD_OK;
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	3710      	adds	r7, #16
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	46020c00 	.word	0x46020c00
 8014290:	200022ac 	.word	0x200022ac
 8014294:	42040000 	.word	0x42040000

08014298 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b084      	sub	sp, #16
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142a0:	2300      	movs	r3, #0
 80142a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142a4:	2300      	movs	r3, #0
 80142a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7f4 fb22 	bl	80088f8 <HAL_PCD_Start>
 80142b4:	4603      	mov	r3, r0
 80142b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142b8:	7bfb      	ldrb	r3, [r7, #15]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f000 f964 	bl	8014588 <USBD_Get_USB_Status>
 80142c0:	4603      	mov	r3, r0
 80142c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3710      	adds	r7, #16
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b084      	sub	sp, #16
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
 80142d6:	4608      	mov	r0, r1
 80142d8:	4611      	mov	r1, r2
 80142da:	461a      	mov	r2, r3
 80142dc:	4603      	mov	r3, r0
 80142de:	70fb      	strb	r3, [r7, #3]
 80142e0:	460b      	mov	r3, r1
 80142e2:	70bb      	strb	r3, [r7, #2]
 80142e4:	4613      	mov	r3, r2
 80142e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142e8:	2300      	movs	r3, #0
 80142ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142ec:	2300      	movs	r3, #0
 80142ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80142f6:	78bb      	ldrb	r3, [r7, #2]
 80142f8:	883a      	ldrh	r2, [r7, #0]
 80142fa:	78f9      	ldrb	r1, [r7, #3]
 80142fc:	f7f5 f81c 	bl	8009338 <HAL_PCD_EP_Open>
 8014300:	4603      	mov	r3, r0
 8014302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014304:	7bfb      	ldrb	r3, [r7, #15]
 8014306:	4618      	mov	r0, r3
 8014308:	f000 f93e 	bl	8014588 <USBD_Get_USB_Status>
 801430c:	4603      	mov	r3, r0
 801430e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014310:	7bbb      	ldrb	r3, [r7, #14]
}
 8014312:	4618      	mov	r0, r3
 8014314:	3710      	adds	r7, #16
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b084      	sub	sp, #16
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	460b      	mov	r3, r1
 8014324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014326:	2300      	movs	r3, #0
 8014328:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801432a:	2300      	movs	r3, #0
 801432c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014334:	78fa      	ldrb	r2, [r7, #3]
 8014336:	4611      	mov	r1, r2
 8014338:	4618      	mov	r0, r3
 801433a:	f7f5 f865 	bl	8009408 <HAL_PCD_EP_Close>
 801433e:	4603      	mov	r3, r0
 8014340:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014342:	7bfb      	ldrb	r3, [r7, #15]
 8014344:	4618      	mov	r0, r3
 8014346:	f000 f91f 	bl	8014588 <USBD_Get_USB_Status>
 801434a:	4603      	mov	r3, r0
 801434c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801434e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014350:	4618      	mov	r0, r3
 8014352:	3710      	adds	r7, #16
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	460b      	mov	r3, r1
 8014362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014364:	2300      	movs	r3, #0
 8014366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014368:	2300      	movs	r3, #0
 801436a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014372:	78fa      	ldrb	r2, [r7, #3]
 8014374:	4611      	mov	r1, r2
 8014376:	4618      	mov	r0, r3
 8014378:	f7f5 f93d 	bl	80095f6 <HAL_PCD_EP_SetStall>
 801437c:	4603      	mov	r3, r0
 801437e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014380:	7bfb      	ldrb	r3, [r7, #15]
 8014382:	4618      	mov	r0, r3
 8014384:	f000 f900 	bl	8014588 <USBD_Get_USB_Status>
 8014388:	4603      	mov	r3, r0
 801438a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801438c:	7bbb      	ldrb	r3, [r7, #14]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3710      	adds	r7, #16
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}

08014396 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014396:	b580      	push	{r7, lr}
 8014398:	b084      	sub	sp, #16
 801439a:	af00      	add	r7, sp, #0
 801439c:	6078      	str	r0, [r7, #4]
 801439e:	460b      	mov	r3, r1
 80143a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143a2:	2300      	movs	r3, #0
 80143a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143a6:	2300      	movs	r3, #0
 80143a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80143b0:	78fa      	ldrb	r2, [r7, #3]
 80143b2:	4611      	mov	r1, r2
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7f5 f982 	bl	80096be <HAL_PCD_EP_ClrStall>
 80143ba:	4603      	mov	r3, r0
 80143bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80143be:	7bfb      	ldrb	r3, [r7, #15]
 80143c0:	4618      	mov	r0, r3
 80143c2:	f000 f8e1 	bl	8014588 <USBD_Get_USB_Status>
 80143c6:	4603      	mov	r3, r0
 80143c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3710      	adds	r7, #16
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143d4:	b480      	push	{r7}
 80143d6:	b085      	sub	sp, #20
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	460b      	mov	r3, r1
 80143de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80143e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80143e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	da0b      	bge.n	8014408 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80143f0:	78fb      	ldrb	r3, [r7, #3]
 80143f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143f6:	68f9      	ldr	r1, [r7, #12]
 80143f8:	4613      	mov	r3, r2
 80143fa:	00db      	lsls	r3, r3, #3
 80143fc:	4413      	add	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	440b      	add	r3, r1
 8014402:	333e      	adds	r3, #62	; 0x3e
 8014404:	781b      	ldrb	r3, [r3, #0]
 8014406:	e00b      	b.n	8014420 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014408:	78fb      	ldrb	r3, [r7, #3]
 801440a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801440e:	68f9      	ldr	r1, [r7, #12]
 8014410:	4613      	mov	r3, r2
 8014412:	00db      	lsls	r3, r3, #3
 8014414:	4413      	add	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	440b      	add	r3, r1
 801441a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801441e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014420:	4618      	mov	r0, r3
 8014422:	3714      	adds	r7, #20
 8014424:	46bd      	mov	sp, r7
 8014426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442a:	4770      	bx	lr

0801442c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	460b      	mov	r3, r1
 8014436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014438:	2300      	movs	r3, #0
 801443a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801443c:	2300      	movs	r3, #0
 801443e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014446:	78fa      	ldrb	r2, [r7, #3]
 8014448:	4611      	mov	r1, r2
 801444a:	4618      	mov	r0, r3
 801444c:	f7f4 ff4f 	bl	80092ee <HAL_PCD_SetAddress>
 8014450:	4603      	mov	r3, r0
 8014452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014454:	7bfb      	ldrb	r3, [r7, #15]
 8014456:	4618      	mov	r0, r3
 8014458:	f000 f896 	bl	8014588 <USBD_Get_USB_Status>
 801445c:	4603      	mov	r3, r0
 801445e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014460:	7bbb      	ldrb	r3, [r7, #14]
}
 8014462:	4618      	mov	r0, r3
 8014464:	3710      	adds	r7, #16
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}

0801446a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801446a:	b580      	push	{r7, lr}
 801446c:	b086      	sub	sp, #24
 801446e:	af00      	add	r7, sp, #0
 8014470:	60f8      	str	r0, [r7, #12]
 8014472:	607a      	str	r2, [r7, #4]
 8014474:	603b      	str	r3, [r7, #0]
 8014476:	460b      	mov	r3, r1
 8014478:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801447a:	2300      	movs	r3, #0
 801447c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801447e:	2300      	movs	r3, #0
 8014480:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014488:	7af9      	ldrb	r1, [r7, #11]
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	f7f5 f868 	bl	8009562 <HAL_PCD_EP_Transmit>
 8014492:	4603      	mov	r3, r0
 8014494:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014496:	7dfb      	ldrb	r3, [r7, #23]
 8014498:	4618      	mov	r0, r3
 801449a:	f000 f875 	bl	8014588 <USBD_Get_USB_Status>
 801449e:	4603      	mov	r3, r0
 80144a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80144a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3718      	adds	r7, #24
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b086      	sub	sp, #24
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	607a      	str	r2, [r7, #4]
 80144b6:	603b      	str	r3, [r7, #0]
 80144b8:	460b      	mov	r3, r1
 80144ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144bc:	2300      	movs	r3, #0
 80144be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144c0:	2300      	movs	r3, #0
 80144c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80144ca:	7af9      	ldrb	r1, [r7, #11]
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	f7f4 ffe4 	bl	800949c <HAL_PCD_EP_Receive>
 80144d4:	4603      	mov	r3, r0
 80144d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80144d8:	7dfb      	ldrb	r3, [r7, #23]
 80144da:	4618      	mov	r0, r3
 80144dc:	f000 f854 	bl	8014588 <USBD_Get_USB_Status>
 80144e0:	4603      	mov	r3, r0
 80144e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80144e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3718      	adds	r7, #24
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b082      	sub	sp, #8
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	6078      	str	r0, [r7, #4]
 80144f6:	460b      	mov	r3, r1
 80144f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014500:	78fa      	ldrb	r2, [r7, #3]
 8014502:	4611      	mov	r1, r2
 8014504:	4618      	mov	r0, r3
 8014506:	f7f5 f814 	bl	8009532 <HAL_PCD_EP_GetRxCount>
 801450a:	4603      	mov	r3, r0
}
 801450c:	4618      	mov	r0, r3
 801450e:	3708      	adds	r7, #8
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <HAL_Delay>:
  * implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8014514:	b480      	push	{r7}
 8014516:	b083      	sub	sp, #12
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
  while (Delay)
 801451c:	e008      	b.n	8014530 <HAL_Delay+0x1c>
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 801451e:	4b09      	ldr	r3, [pc, #36]	; (8014544 <HAL_Delay+0x30>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014526:	2b00      	cmp	r3, #0
 8014528:	d002      	beq.n	8014530 <HAL_Delay+0x1c>
    {
      Delay--;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	3b01      	subs	r3, #1
 801452e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d1f3      	bne.n	801451e <HAL_Delay+0xa>
    }
  }
}
 8014536:	bf00      	nop
 8014538:	bf00      	nop
 801453a:	370c      	adds	r7, #12
 801453c:	46bd      	mov	sp, r7
 801453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014542:	4770      	bx	lr
 8014544:	e000e010 	.word	0xe000e010

08014548 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014548:	b480      	push	{r7}
 801454a:	b083      	sub	sp, #12
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014550:	4b03      	ldr	r3, [pc, #12]	; (8014560 <USBD_static_malloc+0x18>)
}
 8014552:	4618      	mov	r0, r3
 8014554:	370c      	adds	r7, #12
 8014556:	46bd      	mov	sp, r7
 8014558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop
 8014560:	20003b98 	.word	0x20003b98

08014564 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014564:	b480      	push	{r7}
 8014566:	b083      	sub	sp, #12
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]

}
 801456c:	bf00      	nop
 801456e:	370c      	adds	r7, #12
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr

08014578 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
 void SystemClockConfig_Resume(void)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801457c:	f7ec fed1 	bl	8001322 <SystemClock_Config>
  USBD_Clock_Config();
 8014580:	f7ff fad4 	bl	8013b2c <USBD_Clock_Config>
}
 8014584:	bf00      	nop
 8014586:	bd80      	pop	{r7, pc}

08014588 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014588:	b480      	push	{r7}
 801458a:	b085      	sub	sp, #20
 801458c:	af00      	add	r7, sp, #0
 801458e:	4603      	mov	r3, r0
 8014590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014592:	2300      	movs	r3, #0
 8014594:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014596:	79fb      	ldrb	r3, [r7, #7]
 8014598:	2b03      	cmp	r3, #3
 801459a:	d817      	bhi.n	80145cc <USBD_Get_USB_Status+0x44>
 801459c:	a201      	add	r2, pc, #4	; (adr r2, 80145a4 <USBD_Get_USB_Status+0x1c>)
 801459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145a2:	bf00      	nop
 80145a4:	080145b5 	.word	0x080145b5
 80145a8:	080145bb 	.word	0x080145bb
 80145ac:	080145c1 	.word	0x080145c1
 80145b0:	080145c7 	.word	0x080145c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	73fb      	strb	r3, [r7, #15]
    break;
 80145b8:	e00b      	b.n	80145d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145ba:	2303      	movs	r3, #3
 80145bc:	73fb      	strb	r3, [r7, #15]
    break;
 80145be:	e008      	b.n	80145d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145c0:	2301      	movs	r3, #1
 80145c2:	73fb      	strb	r3, [r7, #15]
    break;
 80145c4:	e005      	b.n	80145d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145c6:	2303      	movs	r3, #3
 80145c8:	73fb      	strb	r3, [r7, #15]
    break;
 80145ca:	e002      	b.n	80145d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80145cc:	2303      	movs	r3, #3
 80145ce:	73fb      	strb	r3, [r7, #15]
    break;
 80145d0:	bf00      	nop
  }
  return usb_status;
 80145d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3714      	adds	r7, #20
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr

080145e0 <aiInit>:
float32_t *p_out1;



int aiInit(void)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 80145e6:	4b10      	ldr	r3, [pc, #64]	; (8014628 <aiInit+0x48>)
 80145e8:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 80145ea:	463b      	mov	r3, r7
 80145ec:	2200      	movs	r2, #0
 80145ee:	4619      	mov	r1, r3
 80145f0:	480e      	ldr	r0, [pc, #56]	; (801462c <aiInit+0x4c>)
 80145f2:	f000 f973 	bl	80148dc <ai_network_create_and_init>
 80145f6:	4603      	mov	r3, r0
 80145f8:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {

  };

  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network , NULL);
 80145fa:	4b0c      	ldr	r3, [pc, #48]	; (801462c <aiInit+0x4c>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2100      	movs	r1, #0
 8014600:	4618      	mov	r0, r3
 8014602:	f000 f9df 	bl	80149c4 <ai_network_inputs_get>
 8014606:	4603      	mov	r3, r0
 8014608:	4a09      	ldr	r2, [pc, #36]	; (8014630 <aiInit+0x50>)
 801460a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 801460c:	4b07      	ldr	r3, [pc, #28]	; (801462c <aiInit+0x4c>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	2100      	movs	r1, #0
 8014612:	4618      	mov	r0, r3
 8014614:	f000 f9f0 	bl	80149f8 <ai_network_outputs_get>
 8014618:	4603      	mov	r3, r0
 801461a:	4a06      	ldr	r2, [pc, #24]	; (8014634 <aiInit+0x54>)
 801461c:	6013      	str	r3, [r2, #0]

  return 0;
 801461e:	2300      	movs	r3, #0
}
 8014620:	4618      	mov	r0, r3
 8014622:	3708      	adds	r7, #8
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	20003de0 	.word	0x20003de0
 801462c:	20003dc4 	.word	0x20003dc4
 8014630:	20003f70 	.word	0x20003f70
 8014634:	20003f74 	.word	0x20003f74

08014638 <aiProcess>:



int aiProcess(float *p_inData, float p_out_data[2])
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(p_inData);
 8014642:	4b23      	ldr	r3, [pc, #140]	; (80146d0 <aiProcess+0x98>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data[0]);
 801464a:	4b22      	ldr	r3, [pc, #136]	; (80146d4 <aiProcess+0x9c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4a22      	ldr	r2, [pc, #136]	; (80146d8 <aiProcess+0xa0>)
 8014650:	6812      	ldr	r2, [r2, #0]
 8014652:	605a      	str	r2, [r3, #4]
	  ai_output[1].data = AI_HANDLE_PTR(out_data[1]);
  }

  if (AI_NETWORK_OUT_NUM == 1){
	  /* 2 - Perform the inference */
	  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8014654:	4b21      	ldr	r3, [pc, #132]	; (80146dc <aiProcess+0xa4>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	4a1d      	ldr	r2, [pc, #116]	; (80146d0 <aiProcess+0x98>)
 801465a:	6811      	ldr	r1, [r2, #0]
 801465c:	4a1d      	ldr	r2, [pc, #116]	; (80146d4 <aiProcess+0x9c>)
 801465e:	6812      	ldr	r2, [r2, #0]
 8014660:	4618      	mov	r0, r3
 8014662:	f000 fa1f 	bl	8014aa4 <ai_network_run>
 8014666:	6178      	str	r0, [r7, #20]
	  p_out0 = (float32_t*) ai_output[0].data;
 8014668:	4b1a      	ldr	r3, [pc, #104]	; (80146d4 <aiProcess+0x9c>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	4a1c      	ldr	r2, [pc, #112]	; (80146e0 <aiProcess+0xa8>)
 8014670:	6013      	str	r3, [r2, #0]
	  float32_t max_out = *p_out0;
 8014672:	4b1b      	ldr	r3, [pc, #108]	; (80146e0 <aiProcess+0xa8>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	613b      	str	r3, [r7, #16]
	  uint32_t max_idx = 0;
 801467a:	2300      	movs	r3, #0
 801467c:	60fb      	str	r3, [r7, #12]

	  arm_max_f32(p_out0,AI_NETWORK_OUT_1_SIZE, &max_out, &max_idx);
 801467e:	4b18      	ldr	r3, [pc, #96]	; (80146e0 <aiProcess+0xa8>)
 8014680:	6818      	ldr	r0, [r3, #0]
 8014682:	f107 030c 	add.w	r3, r7, #12
 8014686:	f107 0210 	add.w	r2, r7, #16
 801468a:	2103      	movs	r1, #3
 801468c:	f000 feca 	bl	8015424 <arm_max_f32>
	  p_out_data[0] = (float32_t)max_idx;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	ee07 3a90 	vmov	s15, r3
 8014696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out * 100.0;
 80146a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	3304      	adds	r3, #4
 80146a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80146e4 <aiProcess+0xac>
 80146ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80146b0:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[0] = (float32_t)p_out0[0];
	  p_out_data[1] = (float32_t)p_out1[(int) p_out0[0]];

  }

  if (n_batch != 1) {
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	2b01      	cmp	r3, #1
 80146b8:	d004      	beq.n	80146c4 <aiProcess+0x8c>
	  ai_network_get_error(network);
 80146ba:	4b08      	ldr	r3, [pc, #32]	; (80146dc <aiProcess+0xa4>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 f8ea 	bl	8014898 <ai_network_get_error>
  };


  return 0;
 80146c4:	2300      	movs	r3, #0
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3718      	adds	r7, #24
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	20003f70 	.word	0x20003f70
 80146d4:	20003f74 	.word	0x20003f74
 80146d8:	200001bc 	.word	0x200001bc
 80146dc:	20003dc4 	.word	0x20003dc4
 80146e0:	20003f78 	.word	0x20003f78
 80146e4:	42c80000 	.word	0x42c80000

080146e8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b084      	sub	sp, #16
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80146f2:	2300      	movs	r3, #0
 80146f4:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80146f6:	f107 030c 	add.w	r3, r7, #12
 80146fa:	683a      	ldr	r2, [r7, #0]
 80146fc:	2101      	movs	r1, #1
 80146fe:	4618      	mov	r0, r3
 8014700:	f003 f8a0 	bl	8017844 <ai_platform_get_activations_map>
 8014704:	4603      	mov	r3, r0
 8014706:	2b00      	cmp	r3, #0
 8014708:	d023      	beq.n	8014752 <network_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	4a16      	ldr	r2, [pc, #88]	; (8014768 <network_configure_activations+0x80>)
 801470e:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	4a15      	ldr	r2, [pc, #84]	; (8014768 <network_configure_activations+0x80>)
 8014714:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	4a14      	ldr	r2, [pc, #80]	; (801476c <network_configure_activations+0x84>)
 801471a:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	4a13      	ldr	r2, [pc, #76]	; (801476c <network_configure_activations+0x84>)
 8014720:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	33c8      	adds	r3, #200	; 0xc8
 8014726:	4a12      	ldr	r2, [pc, #72]	; (8014770 <network_configure_activations+0x88>)
 8014728:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	33c8      	adds	r3, #200	; 0xc8
 801472e:	4a10      	ldr	r2, [pc, #64]	; (8014770 <network_configure_activations+0x88>)
 8014730:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	4a0f      	ldr	r2, [pc, #60]	; (8014774 <network_configure_activations+0x8c>)
 8014736:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	4a0e      	ldr	r2, [pc, #56]	; (8014774 <network_configure_activations+0x8c>)
 801473c:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	33c8      	adds	r3, #200	; 0xc8
 8014742:	4a0d      	ldr	r2, [pc, #52]	; (8014778 <network_configure_activations+0x90>)
 8014744:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	33c8      	adds	r3, #200	; 0xc8
 801474a:	4a0b      	ldr	r2, [pc, #44]	; (8014778 <network_configure_activations+0x90>)
 801474c:	60d3      	str	r3, [r2, #12]
    
    return true;
 801474e:	2301      	movs	r3, #1
 8014750:	e005      	b.n	801475e <network_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8014752:	2213      	movs	r2, #19
 8014754:	2130      	movs	r1, #48	; 0x30
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f003 f984 	bl	8017a64 <ai_platform_network_set_error>
  return false;
 801475c:	2300      	movs	r3, #0
}
 801475e:	4618      	mov	r0, r3
 8014760:	3710      	adds	r7, #16
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	200001d0 	.word	0x200001d0
 801476c:	200001e0 	.word	0x200001e0
 8014770:	200001f0 	.word	0x200001f0
 8014774:	20000200 	.word	0x20000200
 8014778:	20000210 	.word	0x20000210

0801477c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8014786:	2300      	movs	r3, #0
 8014788:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 801478a:	f107 030c 	add.w	r3, r7, #12
 801478e:	683a      	ldr	r2, [r7, #0]
 8014790:	2101      	movs	r1, #1
 8014792:	4618      	mov	r0, r3
 8014794:	f003 f806 	bl	80177a4 <ai_platform_get_weights_map>
 8014798:	4603      	mov	r3, r0
 801479a:	2b00      	cmp	r3, #0
 801479c:	d065      	beq.n	801486a <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801479e:	4b38      	ldr	r3, [pc, #224]	; (8014880 <network_configure_weights+0x104>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80147a6:	4a36      	ldr	r2, [pc, #216]	; (8014880 <network_configure_weights+0x104>)
 80147a8:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	4a34      	ldr	r2, [pc, #208]	; (8014880 <network_configure_weights+0x104>)
 80147ae:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	4a33      	ldr	r2, [pc, #204]	; (8014880 <network_configure_weights+0x104>)
 80147b4:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80147b6:	4b33      	ldr	r3, [pc, #204]	; (8014884 <network_configure_weights+0x108>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80147be:	4a31      	ldr	r2, [pc, #196]	; (8014884 <network_configure_weights+0x108>)
 80147c0:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 25600);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 80147c8:	4a2e      	ldr	r2, [pc, #184]	; (8014884 <network_configure_weights+0x108>)
 80147ca:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 25600);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 80147d2:	4a2c      	ldr	r2, [pc, #176]	; (8014884 <network_configure_weights+0x108>)
 80147d4:	60d3      	str	r3, [r2, #12]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80147d6:	4b2c      	ldr	r3, [pc, #176]	; (8014888 <network_configure_weights+0x10c>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80147de:	4a2a      	ldr	r2, [pc, #168]	; (8014888 <network_configure_weights+0x10c>)
 80147e0:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 25800);
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80147e8:	3348      	adds	r3, #72	; 0x48
 80147ea:	4a27      	ldr	r2, [pc, #156]	; (8014888 <network_configure_weights+0x10c>)
 80147ec:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 25800);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80147f4:	3348      	adds	r3, #72	; 0x48
 80147f6:	4a24      	ldr	r2, [pc, #144]	; (8014888 <network_configure_weights+0x10c>)
 80147f8:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80147fa:	4b24      	ldr	r3, [pc, #144]	; (801488c <network_configure_weights+0x110>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014802:	4a22      	ldr	r2, [pc, #136]	; (801488c <network_configure_weights+0x110>)
 8014804:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 35800);
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 801480c:	33d8      	adds	r3, #216	; 0xd8
 801480e:	4a1f      	ldr	r2, [pc, #124]	; (801488c <network_configure_weights+0x110>)
 8014810:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 35800);
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 8014818:	33d8      	adds	r3, #216	; 0xd8
 801481a:	4a1c      	ldr	r2, [pc, #112]	; (801488c <network_configure_weights+0x110>)
 801481c:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801481e:	4b1c      	ldr	r3, [pc, #112]	; (8014890 <network_configure_weights+0x114>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014826:	4a1a      	ldr	r2, [pc, #104]	; (8014890 <network_configure_weights+0x114>)
 8014828:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 36000);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8014830:	33a0      	adds	r3, #160	; 0xa0
 8014832:	4a17      	ldr	r2, [pc, #92]	; (8014890 <network_configure_weights+0x114>)
 8014834:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 36000);
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 801483c:	33a0      	adds	r3, #160	; 0xa0
 801483e:	4a14      	ldr	r2, [pc, #80]	; (8014890 <network_configure_weights+0x114>)
 8014840:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8014842:	4b14      	ldr	r3, [pc, #80]	; (8014894 <network_configure_weights+0x118>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801484a:	4a12      	ldr	r2, [pc, #72]	; (8014894 <network_configure_weights+0x118>)
 801484c:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 36600);
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8014854:	33f8      	adds	r3, #248	; 0xf8
 8014856:	4a0f      	ldr	r2, [pc, #60]	; (8014894 <network_configure_weights+0x118>)
 8014858:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 36600);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8014860:	33f8      	adds	r3, #248	; 0xf8
 8014862:	4a0c      	ldr	r2, [pc, #48]	; (8014894 <network_configure_weights+0x118>)
 8014864:	60d3      	str	r3, [r2, #12]
    return true;
 8014866:	2301      	movs	r3, #1
 8014868:	e005      	b.n	8014876 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801486a:	2212      	movs	r2, #18
 801486c:	2130      	movs	r1, #48	; 0x30
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f003 f8f8 	bl	8017a64 <ai_platform_network_set_error>
  return false;
 8014874:	2300      	movs	r3, #0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	20000230 	.word	0x20000230
 8014884:	20000240 	.word	0x20000240
 8014888:	20000250 	.word	0x20000250
 801488c:	20000260 	.word	0x20000260
 8014890:	20000270 	.word	0x20000270
 8014894:	20000280 	.word	0x20000280

08014898 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f003 f841 	bl	8017928 <ai_platform_network_get_error>
 80148a6:	4603      	mov	r3, r0
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3708      	adds	r7, #8
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af02      	add	r7, sp, #8
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80148ba:	2300      	movs	r3, #0
 80148bc:	9301      	str	r3, [sp, #4]
 80148be:	2305      	movs	r3, #5
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	2301      	movs	r3, #1
 80148c4:	4a04      	ldr	r2, [pc, #16]	; (80148d8 <ai_network_create+0x28>)
 80148c6:	6839      	ldr	r1, [r7, #0]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f003 fb09 	bl	8017ee0 <ai_platform_network_create>
 80148ce:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	20000848 	.word	0x20000848

080148dc <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b096      	sub	sp, #88	; 0x58
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80148e8:	2100      	movs	r1, #0
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	f7ff ffe0 	bl	80148b0 <ai_network_create>
 80148f0:	4603      	mov	r3, r0
 80148f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80148f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d001      	beq.n	8014900 <ai_network_create_and_init+0x24>
        return err;
 80148fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148fe:	e05d      	b.n	80149bc <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8014900:	f107 0314 	add.w	r3, r7, #20
 8014904:	4618      	mov	r0, r3
 8014906:	f000 f8dd 	bl	8014ac4 <ai_network_data_params_get>
 801490a:	4603      	mov	r3, r0
 801490c:	f083 0301 	eor.w	r3, r3, #1
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d008      	beq.n	8014928 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4618      	mov	r0, r3
 801491c:	f7ff ffbc 	bl	8014898 <ai_network_get_error>
 8014920:	4603      	mov	r3, r0
 8014922:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8014924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014926:	e049      	b.n	80149bc <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d016      	beq.n	801495c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 801492e:	2300      	movs	r3, #0
 8014930:	657b      	str	r3, [r7, #84]	; 0x54
 8014932:	e00e      	b.n	8014952 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8014934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	4413      	add	r3, r2
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	f107 0314 	add.w	r3, r7, #20
 8014944:	330c      	adds	r3, #12
 8014946:	4618      	mov	r0, r3
 8014948:	f002 ff16 	bl	8017778 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 801494c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801494e:	3301      	adds	r3, #1
 8014950:	657b      	str	r3, [r7, #84]	; 0x54
 8014952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014954:	461a      	mov	r2, r3
 8014956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014958:	4293      	cmp	r3, r2
 801495a:	dbeb      	blt.n	8014934 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d016      	beq.n	8014990 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8014962:	2300      	movs	r3, #0
 8014964:	653b      	str	r3, [r7, #80]	; 0x50
 8014966:	e00e      	b.n	8014986 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8014968:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801496c:	009b      	lsls	r3, r3, #2
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	4413      	add	r3, r2
 8014972:	681a      	ldr	r2, [r3, #0]
 8014974:	f107 0314 	add.w	r3, r7, #20
 8014978:	3304      	adds	r3, #4
 801497a:	4618      	mov	r0, r3
 801497c:	f002 fefc 	bl	8017778 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8014980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014982:	3301      	adds	r3, #1
 8014984:	653b      	str	r3, [r7, #80]	; 0x50
 8014986:	8b7b      	ldrh	r3, [r7, #26]
 8014988:	461a      	mov	r2, r3
 801498a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801498c:	4293      	cmp	r3, r2
 801498e:	dbeb      	blt.n	8014968 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	f107 0214 	add.w	r2, r7, #20
 8014998:	4611      	mov	r1, r2
 801499a:	4618      	mov	r0, r3
 801499c:	f000 f846 	bl	8014a2c <ai_network_init>
 80149a0:	4603      	mov	r3, r0
 80149a2:	f083 0301 	eor.w	r3, r3, #1
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d006      	beq.n	80149ba <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7ff ff71 	bl	8014898 <ai_network_get_error>
 80149b6:	4603      	mov	r3, r0
 80149b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80149ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3758      	adds	r7, #88	; 0x58
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d104      	bne.n	80149de <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80149d4:	4b06      	ldr	r3, [pc, #24]	; (80149f0 <ai_network_inputs_get+0x2c>)
 80149d6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	4a06      	ldr	r2, [pc, #24]	; (80149f4 <ai_network_inputs_get+0x30>)
 80149dc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80149de:	6839      	ldr	r1, [r7, #0]
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f003 f845 	bl	8017a70 <ai_platform_inputs_get>
 80149e6:	4603      	mov	r3, r0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	20000848 	.word	0x20000848
 80149f4:	a1c00100 	.word	0xa1c00100

080149f8 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d104      	bne.n	8014a12 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8014a08:	4b06      	ldr	r3, [pc, #24]	; (8014a24 <ai_network_outputs_get+0x2c>)
 8014a0a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	4a06      	ldr	r2, [pc, #24]	; (8014a28 <ai_network_outputs_get+0x30>)
 8014a10:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8014a12:	6839      	ldr	r1, [r7, #0]
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f003 f945 	bl	8017ca4 <ai_platform_outputs_get>
 8014a1a:	4603      	mov	r3, r0
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	20000848 	.word	0x20000848
 8014a28:	a1c00100 	.word	0xa1c00100

08014a2c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8014a36:	6839      	ldr	r1, [r7, #0]
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f003 fb53 	bl	80180e4 <ai_platform_network_init>
 8014a3e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d101      	bne.n	8014a4a <ai_network_init+0x1e>
 8014a46:	2300      	movs	r3, #0
 8014a48:	e028      	b.n	8014a9c <ai_network_init+0x70>

  ai_bool ok = true;
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8014a4e:	6839      	ldr	r1, [r7, #0]
 8014a50:	68f8      	ldr	r0, [r7, #12]
 8014a52:	f7ff fe93 	bl	801477c <network_configure_weights>
 8014a56:	4603      	mov	r3, r0
 8014a58:	461a      	mov	r2, r3
 8014a5a:	7afb      	ldrb	r3, [r7, #11]
 8014a5c:	4013      	ands	r3, r2
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	bf14      	ite	ne
 8014a62:	2301      	movne	r3, #1
 8014a64:	2300      	moveq	r3, #0
 8014a66:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8014a68:	6839      	ldr	r1, [r7, #0]
 8014a6a:	68f8      	ldr	r0, [r7, #12]
 8014a6c:	f7ff fe3c 	bl	80146e8 <network_configure_activations>
 8014a70:	4603      	mov	r3, r0
 8014a72:	461a      	mov	r2, r3
 8014a74:	7afb      	ldrb	r3, [r7, #11]
 8014a76:	4013      	ands	r3, r2
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	bf14      	ite	ne
 8014a7c:	2301      	movne	r3, #1
 8014a7e:	2300      	moveq	r3, #0
 8014a80:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f003 fc64 	bl	8018350 <ai_platform_network_post_init>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	461a      	mov	r2, r3
 8014a8c:	7afb      	ldrb	r3, [r7, #11]
 8014a8e:	4013      	ands	r3, r2
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	bf14      	ite	ne
 8014a94:	2301      	movne	r3, #1
 8014a96:	2300      	moveq	r3, #0
 8014a98:	72fb      	strb	r3, [r7, #11]

  return ok;
 8014a9a:	7afb      	ldrb	r3, [r7, #11]
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3710      	adds	r7, #16
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	68b9      	ldr	r1, [r7, #8]
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	f003 fd03 	bl	80184c0 <ai_platform_network_process>
 8014aba:	4603      	mov	r3, r0
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3710      	adds	r7, #16
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d101      	bne.n	8014ad6 <ai_network_data_params_get+0x12>
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	e016      	b.n	8014b04 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8014ad6:	4a0d      	ldr	r2, [pc, #52]	; (8014b0c <ai_network_data_params_get+0x48>)
 8014ad8:	f107 0310 	add.w	r3, r7, #16
 8014adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ae0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8014ae4:	4a0a      	ldr	r2, [pc, #40]	; (8014b10 <ai_network_data_params_get+0x4c>)
 8014ae6:	f107 0308 	add.w	r3, r7, #8
 8014aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014aee:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8014af2:	f107 0210 	add.w	r2, r7, #16
 8014af6:	f107 0308 	add.w	r3, r7, #8
 8014afa:	4619      	mov	r1, r3
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f002 fef1 	bl	80178e4 <ai_platform_bind_network_params>
 8014b02:	4603      	mov	r3, r0
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3718      	adds	r7, #24
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	0801e9f8 	.word	0x0801e9f8
 8014b10:	0801ea00 	.word	0x0801ea00

08014b14 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b08e      	sub	sp, #56	; 0x38
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8014b22:	2301      	movs	r3, #1
 8014b24:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d131      	bne.n	8014b94 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case CUSTOM_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8014b30:	6838      	ldr	r0, [r7, #0]
 8014b32:	f000 f945 	bl	8014dc0 <ISM330DHCX_0_Probe>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d002      	beq.n	8014b42 <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b40:	e064      	b.n	8014c0c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8014b42:	4a34      	ldr	r2, [pc, #208]	; (8014c14 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b4a:	68db      	ldr	r3, [r3, #12]
 8014b4c:	4932      	ldr	r1, [pc, #200]	; (8014c18 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014b54:	f107 010c 	add.w	r1, r7, #12
 8014b58:	4610      	mov	r0, r2
 8014b5a:	4798      	blx	r3
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d002      	beq.n	8014b68 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8014b62:	f06f 0306 	mvn.w	r3, #6
 8014b66:	e051      	b.n	8014c0c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 8014b68:	7b3b      	ldrb	r3, [r7, #12]
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d103      	bne.n	8014b76 <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8014b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b70:	f043 0302 	orr.w	r3, r3, #2
 8014b74:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8014b76:	7b7b      	ldrb	r3, [r7, #13]
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	d103      	bne.n	8014b84 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8014b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7e:	f043 0301 	orr.w	r3, r3, #1
 8014b82:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8014b84:	7bbb      	ldrb	r3, [r7, #14]
 8014b86:	2b01      	cmp	r3, #1
 8014b88:	d108      	bne.n	8014b9c <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8014b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b8c:	f043 0304 	orr.w	r3, r3, #4
 8014b90:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8014b92:	e003      	b.n	8014b9c <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8014b94:	f06f 0301 	mvn.w	r3, #1
 8014b98:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8014b9a:	e000      	b.n	8014b9e <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8014b9c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8014b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d001      	beq.n	8014ba8 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8014ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ba6:	e031      	b.n	8014c0c <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8014ba8:	2300      	movs	r3, #0
 8014baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bac:	e02a      	b.n	8014c04 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8014bae:	683a      	ldr	r2, [r7, #0]
 8014bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb2:	4013      	ands	r3, r2
 8014bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d11e      	bne.n	8014bf8 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 8014bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bbe:	4013      	ands	r3, r2
 8014bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d118      	bne.n	8014bf8 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8014bc6:	4a15      	ldr	r2, [pc, #84]	; (8014c1c <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8014bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014bce:	4814      	ldr	r0, [pc, #80]	; (8014c20 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	4413      	add	r3, r2
 8014bd8:	440b      	add	r3, r1
 8014bda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	490d      	ldr	r1, [pc, #52]	; (8014c18 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014be8:	4610      	mov	r0, r2
 8014bea:	4798      	blx	r3
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d002      	beq.n	8014bf8 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8014bf2:	f06f 0304 	mvn.w	r3, #4
 8014bf6:	e009      	b.n	8014c0c <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8014bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8014bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c00:	3301      	adds	r3, #1
 8014c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c06:	2b02      	cmp	r3, #2
 8014c08:	d9d1      	bls.n	8014bae <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8014c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3738      	adds	r7, #56	; 0x38
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	20004018 	.word	0x20004018
 8014c18:	20004008 	.word	0x20004008
 8014c1c:	200008e8 	.word	0x200008e8
 8014c20:	2000400c 	.word	0x2000400c

08014c24 <CUSTOM_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b086      	sub	sp, #24
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d003      	beq.n	8014c3e <CUSTOM_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8014c36:	f06f 0301 	mvn.w	r3, #1
 8014c3a:	617b      	str	r3, [r7, #20]
 8014c3c:	e029      	b.n	8014c92 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8014c3e:	4a17      	ldr	r2, [pc, #92]	; (8014c9c <CUSTOM_MOTION_SENSOR_GetSensitivity+0x78>)
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	4013      	ands	r3, r2
 8014c4a:	68ba      	ldr	r2, [r7, #8]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d11d      	bne.n	8014c8c <CUSTOM_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance], Sensitivity) != BSP_ERROR_NONE)
 8014c50:	4a13      	ldr	r2, [pc, #76]	; (8014ca0 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x7c>)
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014c58:	4812      	ldr	r0, [pc, #72]	; (8014ca4 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x80>)
 8014c5a:	68fa      	ldr	r2, [r7, #12]
 8014c5c:	4613      	mov	r3, r2
 8014c5e:	005b      	lsls	r3, r3, #1
 8014c60:	4413      	add	r3, r2
 8014c62:	440b      	add	r3, r1
 8014c64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014c68:	689b      	ldr	r3, [r3, #8]
 8014c6a:	490f      	ldr	r1, [pc, #60]	; (8014ca8 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x84>)
 8014c6c:	68fa      	ldr	r2, [r7, #12]
 8014c6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014c72:	6879      	ldr	r1, [r7, #4]
 8014c74:	4610      	mov	r0, r2
 8014c76:	4798      	blx	r3
 8014c78:	4603      	mov	r3, r0
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d003      	beq.n	8014c86 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8014c7e:	f06f 0304 	mvn.w	r3, #4
 8014c82:	617b      	str	r3, [r7, #20]
 8014c84:	e005      	b.n	8014c92 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8014c86:	2300      	movs	r3, #0
 8014c88:	617b      	str	r3, [r7, #20]
 8014c8a:	e002      	b.n	8014c92 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8014c8c:	f06f 0301 	mvn.w	r3, #1
 8014c90:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8014c92:	697b      	ldr	r3, [r7, #20]
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3718      	adds	r7, #24
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	2000401c 	.word	0x2000401c
 8014ca0:	200008e8 	.word	0x200008e8
 8014ca4:	2000400c 	.word	0x2000400c
 8014ca8:	20004008 	.word	0x20004008

08014cac <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	60f8      	str	r0, [r7, #12]
 8014cb4:	60b9      	str	r1, [r7, #8]
 8014cb6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d003      	beq.n	8014cc8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8014cc0:	f06f 0301 	mvn.w	r3, #1
 8014cc4:	617b      	str	r3, [r7, #20]
 8014cc6:	e02a      	b.n	8014d1e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8014cc8:	4a17      	ldr	r2, [pc, #92]	; (8014d28 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	4013      	ands	r3, r2
 8014cd4:	68ba      	ldr	r2, [r7, #8]
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d11e      	bne.n	8014d18 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8014cda:	4a14      	ldr	r2, [pc, #80]	; (8014d2c <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014ce2:	4813      	ldr	r0, [pc, #76]	; (8014d30 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	4613      	mov	r3, r2
 8014ce8:	005b      	lsls	r3, r3, #1
 8014cea:	4413      	add	r3, r2
 8014cec:	440b      	add	r3, r1
 8014cee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014cf2:	691b      	ldr	r3, [r3, #16]
 8014cf4:	490f      	ldr	r1, [pc, #60]	; (8014d34 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8014cf6:	68fa      	ldr	r2, [r7, #12]
 8014cf8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014cfc:	ed97 0a01 	vldr	s0, [r7, #4]
 8014d00:	4610      	mov	r0, r2
 8014d02:	4798      	blx	r3
 8014d04:	4603      	mov	r3, r0
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d003      	beq.n	8014d12 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8014d0a:	f06f 0304 	mvn.w	r3, #4
 8014d0e:	617b      	str	r3, [r7, #20]
 8014d10:	e005      	b.n	8014d1e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8014d12:	2300      	movs	r3, #0
 8014d14:	617b      	str	r3, [r7, #20]
 8014d16:	e002      	b.n	8014d1e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8014d18:	f06f 0301 	mvn.w	r3, #1
 8014d1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8014d1e:	697b      	ldr	r3, [r7, #20]
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3718      	adds	r7, #24
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	2000401c 	.word	0x2000401c
 8014d2c:	200008e8 	.word	0x200008e8
 8014d30:	2000400c 	.word	0x2000400c
 8014d34:	20004008 	.word	0x20004008

08014d38 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d003      	beq.n	8014d52 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8014d4a:	f06f 0301 	mvn.w	r3, #1
 8014d4e:	617b      	str	r3, [r7, #20]
 8014d50:	e029      	b.n	8014da6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8014d52:	4a17      	ldr	r2, [pc, #92]	; (8014db0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	4013      	ands	r3, r2
 8014d5e:	68ba      	ldr	r2, [r7, #8]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d11d      	bne.n	8014da0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8014d64:	4a13      	ldr	r2, [pc, #76]	; (8014db4 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014d6c:	4812      	ldr	r0, [pc, #72]	; (8014db8 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 8014d6e:	68fa      	ldr	r2, [r7, #12]
 8014d70:	4613      	mov	r3, r2
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	4413      	add	r3, r2
 8014d76:	440b      	add	r3, r1
 8014d78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014d7c:	699b      	ldr	r3, [r3, #24]
 8014d7e:	490f      	ldr	r1, [pc, #60]	; (8014dbc <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 8014d80:	68fa      	ldr	r2, [r7, #12]
 8014d82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014d86:	6879      	ldr	r1, [r7, #4]
 8014d88:	4610      	mov	r0, r2
 8014d8a:	4798      	blx	r3
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d003      	beq.n	8014d9a <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8014d92:	f06f 0304 	mvn.w	r3, #4
 8014d96:	617b      	str	r3, [r7, #20]
 8014d98:	e005      	b.n	8014da6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	617b      	str	r3, [r7, #20]
 8014d9e:	e002      	b.n	8014da6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8014da0:	f06f 0301 	mvn.w	r3, #1
 8014da4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8014da6:	697b      	ldr	r3, [r7, #20]
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3718      	adds	r7, #24
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	2000401c 	.word	0x2000401c
 8014db4:	200008e8 	.word	0x200008e8
 8014db8:	2000400c 	.word	0x2000400c
 8014dbc:	20004008 	.word	0x20004008

08014dc0 <ISM330DHCX_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b094      	sub	sp, #80	; 0x50
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the driver */
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8014dcc:	2301      	movs	r3, #1
 8014dce:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = 0x0;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = CUSTOM_ISM330DHCX_0_Init;
 8014dd6:	4b4a      	ldr	r3, [pc, #296]	; (8014f00 <ISM330DHCX_0_Probe+0x140>)
 8014dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = CUSTOM_ISM330DHCX_0_DeInit;
 8014dda:	4b4a      	ldr	r3, [pc, #296]	; (8014f04 <ISM330DHCX_0_Probe+0x144>)
 8014ddc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = CUSTOM_ISM330DHCX_0_ReadReg;
 8014dde:	4b4a      	ldr	r3, [pc, #296]	; (8014f08 <ISM330DHCX_0_Probe+0x148>)
 8014de0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = CUSTOM_ISM330DHCX_0_WriteReg;
 8014de2:	4b4a      	ldr	r3, [pc, #296]	; (8014f0c <ISM330DHCX_0_Probe+0x14c>)
 8014de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 8014de6:	4b4a      	ldr	r3, [pc, #296]	; (8014f10 <ISM330DHCX_0_Probe+0x150>)
 8014de8:	647b      	str	r3, [r7, #68]	; 0x44

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8014dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014dee:	4619      	mov	r1, r3
 8014df0:	4848      	ldr	r0, [pc, #288]	; (8014f14 <ISM330DHCX_0_Probe+0x154>)
 8014df2:	f7ef f9f3 	bl	80041dc <ISM330DHCX_RegisterBusIO>
 8014df6:	4603      	mov	r3, r0
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d003      	beq.n	8014e04 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8014dfc:	f06f 0306 	mvn.w	r3, #6
 8014e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e02:	e077      	b.n	8014ef4 <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8014e04:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8014e08:	4619      	mov	r1, r3
 8014e0a:	4842      	ldr	r0, [pc, #264]	; (8014f14 <ISM330DHCX_0_Probe+0x154>)
 8014e0c:	f7ef fb04 	bl	8004418 <ISM330DHCX_ReadID>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d003      	beq.n	8014e1e <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8014e16:	f06f 0306 	mvn.w	r3, #6
 8014e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e1c:	e06a      	b.n	8014ef4 <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != (uint8_t)ISM330DHCX_ID)
 8014e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014e22:	2b6b      	cmp	r3, #107	; 0x6b
 8014e24:	d003      	beq.n	8014e2e <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8014e26:	f06f 0306 	mvn.w	r3, #6
 8014e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e2c:	e062      	b.n	8014ef4 <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8014e2e:	f107 030c 	add.w	r3, r7, #12
 8014e32:	4619      	mov	r1, r3
 8014e34:	4837      	ldr	r0, [pc, #220]	; (8014f14 <ISM330DHCX_0_Probe+0x154>)
 8014e36:	f7ef fb05 	bl	8004444 <ISM330DHCX_GetCapabilities>
    MotionCtx[CUSTOM_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8014e3a:	7b7b      	ldrb	r3, [r7, #13]
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	7b3b      	ldrb	r3, [r7, #12]
 8014e40:	005b      	lsls	r3, r3, #1
 8014e42:	431a      	orrs	r2, r3
 8014e44:	7bbb      	ldrb	r3, [r7, #14]
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	4a33      	ldr	r2, [pc, #204]	; (8014f18 <ISM330DHCX_0_Probe+0x158>)
 8014e4c:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_ISM330DHCX_0] = &ism330dhcx_obj_0;
 8014e4e:	4b33      	ldr	r3, [pc, #204]	; (8014f1c <ISM330DHCX_0_Probe+0x15c>)
 8014e50:	4a30      	ldr	r2, [pc, #192]	; (8014f14 <ISM330DHCX_0_Probe+0x154>)
 8014e52:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8014e54:	4b32      	ldr	r3, [pc, #200]	; (8014f20 <ISM330DHCX_0_Probe+0x160>)
 8014e56:	4a33      	ldr	r2, [pc, #204]	; (8014f24 <ISM330DHCX_0_Probe+0x164>)
 8014e58:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8014e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d11d      	bne.n	8014e9c <ISM330DHCX_0_Probe+0xdc>
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f003 0301 	and.w	r3, r3, #1
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d018      	beq.n	8014e9c <ISM330DHCX_0_Probe+0xdc>
 8014e6a:	7b7b      	ldrb	r3, [r7, #13]
 8014e6c:	2b01      	cmp	r3, #1
 8014e6e:	d115      	bne.n	8014e9c <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8014e70:	4b2d      	ldr	r3, [pc, #180]	; (8014f28 <ISM330DHCX_0_Probe+0x168>)
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	4a2d      	ldr	r2, [pc, #180]	; (8014f2c <ISM330DHCX_0_Probe+0x16c>)
 8014e76:	492e      	ldr	r1, [pc, #184]	; (8014f30 <ISM330DHCX_0_Probe+0x170>)
 8014e78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ISM330DHCX_0]->Init(MotionCompObj[CUSTOM_ISM330DHCX_0]) != ISM330DHCX_OK)
 8014e7c:	4b28      	ldr	r3, [pc, #160]	; (8014f20 <ISM330DHCX_0_Probe+0x160>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	4a26      	ldr	r2, [pc, #152]	; (8014f1c <ISM330DHCX_0_Probe+0x15c>)
 8014e84:	6812      	ldr	r2, [r2, #0]
 8014e86:	4610      	mov	r0, r2
 8014e88:	4798      	blx	r3
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d003      	beq.n	8014e98 <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8014e90:	f06f 0304 	mvn.w	r3, #4
 8014e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e96:	e001      	b.n	8014e9c <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8014e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d11d      	bne.n	8014ede <ISM330DHCX_0_Probe+0x11e>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f003 0302 	and.w	r3, r3, #2
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d018      	beq.n	8014ede <ISM330DHCX_0_Probe+0x11e>
 8014eac:	7b3b      	ldrb	r3, [r7, #12]
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d115      	bne.n	8014ede <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8014eb2:	4b1d      	ldr	r3, [pc, #116]	; (8014f28 <ISM330DHCX_0_Probe+0x168>)
 8014eb4:	689b      	ldr	r3, [r3, #8]
 8014eb6:	4a1d      	ldr	r2, [pc, #116]	; (8014f2c <ISM330DHCX_0_Probe+0x16c>)
 8014eb8:	491e      	ldr	r1, [pc, #120]	; (8014f34 <ISM330DHCX_0_Probe+0x174>)
 8014eba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ISM330DHCX_0]->Init(MotionCompObj[CUSTOM_ISM330DHCX_0]) != ISM330DHCX_OK)
 8014ebe:	4b18      	ldr	r3, [pc, #96]	; (8014f20 <ISM330DHCX_0_Probe+0x160>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	4a15      	ldr	r2, [pc, #84]	; (8014f1c <ISM330DHCX_0_Probe+0x15c>)
 8014ec6:	6812      	ldr	r2, [r2, #0]
 8014ec8:	4610      	mov	r0, r2
 8014eca:	4798      	blx	r3
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d003      	beq.n	8014eda <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8014ed2:	f06f 0304 	mvn.w	r3, #4
 8014ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ed8:	e001      	b.n	8014ede <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8014eda:	2300      	movs	r3, #0
 8014edc:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8014ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d107      	bne.n	8014ef4 <ISM330DHCX_0_Probe+0x134>
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f003 0304 	and.w	r3, r3, #4
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d002      	beq.n	8014ef4 <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8014eee:	f06f 0304 	mvn.w	r3, #4
 8014ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3750      	adds	r7, #80	; 0x50
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	08014f39 	.word	0x08014f39
 8014f04:	08014f5d 	.word	0x08014f5d
 8014f08:	08014ff5 	.word	0x08014ff5
 8014f0c:	08014f81 	.word	0x08014f81
 8014f10:	0800671d 	.word	0x0800671d
 8014f14:	20004020 	.word	0x20004020
 8014f18:	2000401c 	.word	0x2000401c
 8014f1c:	20004008 	.word	0x20004008
 8014f20:	20004018 	.word	0x20004018
 8014f24:	20000004 	.word	0x20000004
 8014f28:	200008e8 	.word	0x200008e8
 8014f2c:	2000400c 	.word	0x2000400c
 8014f30:	20000038 	.word	0x20000038
 8014f34:	20000014 	.word	0x20000014

08014f38 <CUSTOM_ISM330DHCX_0_Init>:
/**
 * @brief  Initialize SPI bus for ISM330DHCX
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_Init(void)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b082      	sub	sp, #8
 8014f3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8014f3e:	f06f 0305 	mvn.w	r3, #5
 8014f42:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ISM330DHCX_0_SPI_Init() == BSP_ERROR_NONE)
 8014f44:	f7f1 fb5a 	bl	80065fc <BSP_SPI2_Init>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d101      	bne.n	8014f52 <CUSTOM_ISM330DHCX_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8014f52:	687b      	ldr	r3, [r7, #4]
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3708      	adds	r7, #8
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <CUSTOM_ISM330DHCX_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for ISM330DHCX
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_DeInit(void)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8014f62:	f06f 0305 	mvn.w	r3, #5
 8014f66:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ISM330DHCX_0_SPI_DeInit() == BSP_ERROR_NONE)
 8014f68:	f7f1 fb78 	bl	800665c <BSP_SPI2_DeInit>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d101      	bne.n	8014f76 <CUSTOM_ISM330DHCX_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8014f72:	2300      	movs	r3, #0
 8014f74:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8014f76:	687b      	ldr	r3, [r7, #4]
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <CUSTOM_ISM330DHCX_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60ba      	str	r2, [r7, #8]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	81fb      	strh	r3, [r7, #14]
 8014f8e:	460b      	mov	r3, r1
 8014f90:	81bb      	strh	r3, [r7, #12]
 8014f92:	4613      	mov	r3, r2
 8014f94:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8014f96:	2300      	movs	r3, #0
 8014f98:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8014f9a:	89bb      	ldrh	r3, [r7, #12]
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_RESET);
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014fa6:	4812      	ldr	r0, [pc, #72]	; (8014ff0 <CUSTOM_ISM330DHCX_0_WriteReg+0x70>)
 8014fa8:	f7f3 f846 	bl	8008038 <HAL_GPIO_WritePin>

  if (CUSTOM_ISM330DHCX_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8014fac:	f107 0313 	add.w	r3, r7, #19
 8014fb0:	2101      	movs	r1, #1
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7f1 fb7a 	bl	80066ac <BSP_SPI2_Send>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d002      	beq.n	8014fc4 <CUSTOM_ISM330DHCX_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8014fbe:	f06f 0305 	mvn.w	r3, #5
 8014fc2:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ISM330DHCX_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 8014fc4:	88fb      	ldrh	r3, [r7, #6]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	68b8      	ldr	r0, [r7, #8]
 8014fca:	f7f1 fb6f 	bl	80066ac <BSP_SPI2_Send>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d002      	beq.n	8014fda <CUSTOM_ISM330DHCX_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8014fd4:	f06f 0305 	mvn.w	r3, #5
 8014fd8:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_SET);
 8014fda:	2201      	movs	r2, #1
 8014fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014fe0:	4803      	ldr	r0, [pc, #12]	; (8014ff0 <CUSTOM_ISM330DHCX_0_WriteReg+0x70>)
 8014fe2:	f7f3 f829 	bl	8008038 <HAL_GPIO_WritePin>

  return ret;
 8014fe6:	697b      	ldr	r3, [r7, #20]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3718      	adds	r7, #24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	42021c00 	.word	0x42021c00

08014ff4 <CUSTOM_ISM330DHCX_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b086      	sub	sp, #24
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60ba      	str	r2, [r7, #8]
 8014ffc:	461a      	mov	r2, r3
 8014ffe:	4603      	mov	r3, r0
 8015000:	81fb      	strh	r3, [r7, #14]
 8015002:	460b      	mov	r3, r1
 8015004:	81bb      	strh	r3, [r7, #12]
 8015006:	4613      	mov	r3, r2
 8015008:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 801500a:	2300      	movs	r3, #0
 801500c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 801500e:	89bb      	ldrh	r3, [r7, #12]
 8015010:	b2db      	uxtb	r3, r3
 8015012:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 8015014:	7cfb      	ldrb	r3, [r7, #19]
 8015016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801501a:	b2db      	uxtb	r3, r3
 801501c:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_RESET);
 801501e:	2200      	movs	r2, #0
 8015020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015024:	4812      	ldr	r0, [pc, #72]	; (8015070 <CUSTOM_ISM330DHCX_0_ReadReg+0x7c>)
 8015026:	f7f3 f807 	bl	8008038 <HAL_GPIO_WritePin>

  if (CUSTOM_ISM330DHCX_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 801502a:	f107 0313 	add.w	r3, r7, #19
 801502e:	2101      	movs	r1, #1
 8015030:	4618      	mov	r0, r3
 8015032:	f7f1 fb3b 	bl	80066ac <BSP_SPI2_Send>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	d002      	beq.n	8015042 <CUSTOM_ISM330DHCX_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 801503c:	f06f 0305 	mvn.w	r3, #5
 8015040:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ISM330DHCX_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 8015042:	88fb      	ldrh	r3, [r7, #6]
 8015044:	4619      	mov	r1, r3
 8015046:	68b8      	ldr	r0, [r7, #8]
 8015048:	f7f1 fb4c 	bl	80066e4 <BSP_SPI2_Recv>
 801504c:	4603      	mov	r3, r0
 801504e:	2b00      	cmp	r3, #0
 8015050:	d002      	beq.n	8015058 <CUSTOM_ISM330DHCX_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8015052:	f06f 0305 	mvn.w	r3, #5
 8015056:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_SET);
 8015058:	2201      	movs	r2, #1
 801505a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801505e:	4804      	ldr	r0, [pc, #16]	; (8015070 <CUSTOM_ISM330DHCX_0_ReadReg+0x7c>)
 8015060:	f7f2 ffea 	bl	8008038 <HAL_GPIO_WritePin>

  return ret;
 8015064:	697b      	ldr	r3, [r7, #20]
}
 8015066:	4618      	mov	r0, r3
 8015068:	3718      	adds	r7, #24
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	42021c00 	.word	0x42021c00

08015074 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	460b      	mov	r3, r1
 801507e:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d112      	bne.n	80150ac <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8015086:	4a0e      	ldr	r2, [pc, #56]	; (80150c0 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801508e:	78fa      	ldrb	r2, [r7, #3]
 8015090:	4611      	mov	r1, r2
 8015092:	4618      	mov	r0, r3
 8015094:	f7ef ffa2 	bl	8004fdc <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>
 8015098:	4603      	mov	r3, r0
 801509a:	2b00      	cmp	r3, #0
 801509c:	d003      	beq.n	80150a6 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 801509e:	f06f 0304 	mvn.w	r3, #4
 80150a2:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 80150a4:	e006      	b.n	80150b4 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
			ret = BSP_ERROR_NONE;
 80150a6:	2300      	movs	r3, #0
 80150a8:	60fb      	str	r3, [r7, #12]
		break;
 80150aa:	e003      	b.n	80150b4 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 80150ac:	f06f 0301 	mvn.w	r3, #1
 80150b0:	60fb      	str	r3, [r7, #12]
		break;
 80150b2:	bf00      	nop
	}

	return ret;
 80150b4:	68fb      	ldr	r3, [r7, #12]
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3710      	adds	r7, #16
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	20004008 	.word	0x20004008

080150c4 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
 80150cc:	460b      	mov	r3, r1
 80150ce:	807b      	strh	r3, [r7, #2]
	int32_t ret;

	switch(Instance)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d112      	bne.n	80150fc <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 80150d6:	4a0e      	ldr	r2, [pc, #56]	; (8015110 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150de:	887a      	ldrh	r2, [r7, #2]
 80150e0:	4611      	mov	r1, r2
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7ef ffab 	bl	800503e <ISM330DHCX_FIFO_Set_Watermark_Level>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d003      	beq.n	80150f6 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 80150ee:	f06f 0304 	mvn.w	r3, #4
 80150f2:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 80150f4:	e006      	b.n	8015104 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
			ret = BSP_ERROR_NONE;
 80150f6:	2300      	movs	r3, #0
 80150f8:	60fb      	str	r3, [r7, #12]
		break;
 80150fa:	e003      	b.n	8015104 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 80150fc:	f06f 0301 	mvn.w	r3, #1
 8015100:	60fb      	str	r3, [r7, #12]
		break;
 8015102:	bf00      	nop
	}

	return ret;
 8015104:	68fb      	ldr	r3, [r7, #12]
}
 8015106:	4618      	mov	r0, r3
 8015108:	3710      	adds	r7, #16
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	20004008 	.word	0x20004008

08015114 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	460b      	mov	r3, r1
 801511e:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d112      	bne.n	801514c <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8015126:	4a0e      	ldr	r2, [pc, #56]	; (8015160 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801512e:	78fa      	ldrb	r2, [r7, #3]
 8015130:	4611      	mov	r1, r2
 8015132:	4618      	mov	r0, r3
 8015134:	f7ef ff9b 	bl	800506e <ISM330DHCX_FIFO_Set_Stop_On_Fth>
 8015138:	4603      	mov	r3, r0
 801513a:	2b00      	cmp	r3, #0
 801513c:	d003      	beq.n	8015146 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 801513e:	f06f 0304 	mvn.w	r3, #4
 8015142:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8015144:	e006      	b.n	8015154 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
			ret = BSP_ERROR_NONE;
 8015146:	2300      	movs	r3, #0
 8015148:	60fb      	str	r3, [r7, #12]
		break;
 801514a:	e003      	b.n	8015154 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 801514c:	f06f 0301 	mvn.w	r3, #1
 8015150:	60fb      	str	r3, [r7, #12]
		break;
 8015152:	bf00      	nop
	}

	return ret;
 8015154:	68fb      	ldr	r3, [r7, #12]
}
 8015156:	4618      	mov	r0, r3
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	20004008 	.word	0x20004008

08015164 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	460b      	mov	r3, r1
 801516e:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d112      	bne.n	801519c <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8015176:	4a0e      	ldr	r2, [pc, #56]	; (80151b0 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801517e:	78fa      	ldrb	r2, [r7, #3]
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7ef ff8b 	bl	800509e <ISM330DHCX_FIFO_Set_Mode>
 8015188:	4603      	mov	r3, r0
 801518a:	2b00      	cmp	r3, #0
 801518c:	d003      	beq.n	8015196 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 801518e:	f06f 0304 	mvn.w	r3, #4
 8015192:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8015194:	e006      	b.n	80151a4 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
			ret = BSP_ERROR_NONE;
 8015196:	2300      	movs	r3, #0
 8015198:	60fb      	str	r3, [r7, #12]
		break;
 801519a:	e003      	b.n	80151a4 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 801519c:	f06f 0301 	mvn.w	r3, #1
 80151a0:	60fb      	str	r3, [r7, #12]
		break;
 80151a2:	bf00      	nop
	}

	return ret;
 80151a4:	68fb      	ldr	r3, [r7, #12]
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3710      	adds	r7, #16
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	20004008 	.word	0x20004008

080151b4 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word>:
 *         - MOTION_GYRO or MOTION_ACCELERO
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word(uint32_t Instance, uint32_t Function, int16_t *Data)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b086      	sub	sp, #24
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	60b9      	str	r1, [r7, #8]
 80151be:	607a      	str	r2, [r7, #4]
	int32_t ret;

	switch(Instance)
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d131      	bne.n	801522a <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x76>
	{
#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	f003 0302 	and.w	r3, r3, #2
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d011      	beq.n	80151f4 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x40>
		{
			if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 80151d0:	4a1a      	ldr	r2, [pc, #104]	; (801523c <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151d8:	6879      	ldr	r1, [r7, #4]
 80151da:	4618      	mov	r0, r3
 80151dc:	f7ef ffae 	bl	800513c <ISM330DHCX_FIFO_Get_Data_Word>
 80151e0:	4603      	mov	r3, r0
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d003      	beq.n	80151ee <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x3a>
			{
				ret = BSP_ERROR_COMPONENT_FAILURE;
 80151e6:	f06f 0304 	mvn.w	r3, #4
 80151ea:	617b      	str	r3, [r7, #20]
		}
		else
		{
			ret = BSP_ERROR_WRONG_PARAM;
		}
		break;
 80151ec:	e021      	b.n	8015232 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
				ret = BSP_ERROR_NONE;
 80151ee:	2300      	movs	r3, #0
 80151f0:	617b      	str	r3, [r7, #20]
		break;
 80151f2:	e01e      	b.n	8015232 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
		else if((Function & MOTION_GYRO) == MOTION_GYRO)
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	f003 0301 	and.w	r3, r3, #1
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d011      	beq.n	8015222 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x6e>
			if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 80151fe:	4a0f      	ldr	r2, [pc, #60]	; (801523c <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015206:	6879      	ldr	r1, [r7, #4]
 8015208:	4618      	mov	r0, r3
 801520a:	f7ef ff97 	bl	800513c <ISM330DHCX_FIFO_Get_Data_Word>
 801520e:	4603      	mov	r3, r0
 8015210:	2b00      	cmp	r3, #0
 8015212:	d003      	beq.n	801521c <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x68>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8015214:	f06f 0304 	mvn.w	r3, #4
 8015218:	617b      	str	r3, [r7, #20]
		break;
 801521a:	e00a      	b.n	8015232 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
				ret = BSP_ERROR_NONE;
 801521c:	2300      	movs	r3, #0
 801521e:	617b      	str	r3, [r7, #20]
		break;
 8015220:	e007      	b.n	8015232 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
			ret = BSP_ERROR_WRONG_PARAM;
 8015222:	f06f 0301 	mvn.w	r3, #1
 8015226:	617b      	str	r3, [r7, #20]
		break;
 8015228:	e003      	b.n	8015232 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 801522a:	f06f 0301 	mvn.w	r3, #1
 801522e:	617b      	str	r3, [r7, #20]
		break;
 8015230:	bf00      	nop
	}

	return ret;
 8015232:	697b      	ldr	r3, [r7, #20]
}
 8015234:	4618      	mov	r0, r3
 8015236:	3718      	adds	r7, #24
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}
 801523c:	20004008 	.word	0x20004008

08015240 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR>:
 * @param  Function Motion sensor function
 * @param  Odr FIFO BDR value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b086      	sub	sp, #24
 8015244:	af00      	add	r7, sp, #0
 8015246:	60f8      	str	r0, [r7, #12]
 8015248:	60b9      	str	r1, [r7, #8]
 801524a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t ret;

	switch(Instance)
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d133      	bne.n	80152bc <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x7c>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	f003 0302 	and.w	r3, r3, #2
 801525a:	2b00      	cmp	r3, #0
 801525c:	d012      	beq.n	8015284 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x44>
		{
			if(ISM330DHCX_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 801525e:	4a1c      	ldr	r2, [pc, #112]	; (80152d0 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015266:	ed97 0a01 	vldr	s0, [r7, #4]
 801526a:	4618      	mov	r0, r3
 801526c:	f7ef fd9e 	bl	8004dac <ISM330DHCX_FIFO_ACC_Set_BDR>
 8015270:	4603      	mov	r3, r0
 8015272:	2b00      	cmp	r3, #0
 8015274:	d003      	beq.n	801527e <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x3e>
			{
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8015276:	f06f 0304 	mvn.w	r3, #4
 801527a:	617b      	str	r3, [r7, #20]
		}
		else
		{
			ret = BSP_ERROR_WRONG_PARAM;
		}
		break;
 801527c:	e022      	b.n	80152c4 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
				ret = BSP_ERROR_NONE;
 801527e:	2300      	movs	r3, #0
 8015280:	617b      	str	r3, [r7, #20]
		break;
 8015282:	e01f      	b.n	80152c4 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
		else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	f003 0301 	and.w	r3, r3, #1
 801528a:	2b00      	cmp	r3, #0
 801528c:	d012      	beq.n	80152b4 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x74>
			if(ISM330DHCX_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 801528e:	4a10      	ldr	r2, [pc, #64]	; (80152d0 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015296:	ed97 0a01 	vldr	s0, [r7, #4]
 801529a:	4618      	mov	r0, r3
 801529c:	f7ef fe12 	bl	8004ec4 <ISM330DHCX_FIFO_GYRO_Set_BDR>
 80152a0:	4603      	mov	r3, r0
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d003      	beq.n	80152ae <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x6e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 80152a6:	f06f 0304 	mvn.w	r3, #4
 80152aa:	617b      	str	r3, [r7, #20]
		break;
 80152ac:	e00a      	b.n	80152c4 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
				ret = BSP_ERROR_NONE;
 80152ae:	2300      	movs	r3, #0
 80152b0:	617b      	str	r3, [r7, #20]
		break;
 80152b2:	e007      	b.n	80152c4 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
			ret = BSP_ERROR_WRONG_PARAM;
 80152b4:	f06f 0301 	mvn.w	r3, #1
 80152b8:	617b      	str	r3, [r7, #20]
		break;
 80152ba:	e003      	b.n	80152c4 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 80152bc:	f06f 0301 	mvn.w	r3, #1
 80152c0:	617b      	str	r3, [r7, #20]
		break;
 80152c2:	bf00      	nop
	}

	return ret;
 80152c4:	697b      	ldr	r3, [r7, #20]
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3718      	adds	r7, #24
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	20004008 	.word	0x20004008

080152d4 <arm_min_f32>:
 80152d4:	f101 3cff 	add.w	ip, r1, #4294967295
 80152d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152da:	4607      	mov	r7, r0
 80152dc:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80152e0:	ecf7 7a01 	vldmia	r7!, {s15}
 80152e4:	d05c      	beq.n	80153a0 <arm_min_f32+0xcc>
 80152e6:	2400      	movs	r4, #0
 80152e8:	3014      	adds	r0, #20
 80152ea:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80152ee:	4625      	mov	r5, r4
 80152f0:	ed10 7a04 	vldr	s14, [r0, #-16]
 80152f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80152f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152fc:	dd02      	ble.n	8015304 <arm_min_f32+0x30>
 80152fe:	eef0 7a47 	vmov.f32	s15, s14
 8015302:	1c65      	adds	r5, r4, #1
 8015304:	ed10 7a03 	vldr	s14, [r0, #-12]
 8015308:	eef4 7ac7 	vcmpe.f32	s15, s14
 801530c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015310:	dd02      	ble.n	8015318 <arm_min_f32+0x44>
 8015312:	eef0 7a47 	vmov.f32	s15, s14
 8015316:	1ca5      	adds	r5, r4, #2
 8015318:	ed10 7a02 	vldr	s14, [r0, #-8]
 801531c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015324:	dd02      	ble.n	801532c <arm_min_f32+0x58>
 8015326:	eef0 7a47 	vmov.f32	s15, s14
 801532a:	1ce5      	adds	r5, r4, #3
 801532c:	ed10 7a01 	vldr	s14, [r0, #-4]
 8015330:	3404      	adds	r4, #4
 8015332:	3010      	adds	r0, #16
 8015334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801533c:	dd02      	ble.n	8015344 <arm_min_f32+0x70>
 801533e:	eef0 7a47 	vmov.f32	s15, s14
 8015342:	4625      	mov	r5, r4
 8015344:	42a6      	cmp	r6, r4
 8015346:	d1d3      	bne.n	80152f0 <arm_min_f32+0x1c>
 8015348:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 801534c:	f01c 0003 	ands.w	r0, ip, #3
 8015350:	d01e      	beq.n	8015390 <arm_min_f32+0xbc>
 8015352:	ed97 7a00 	vldr	s14, [r7]
 8015356:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801535a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801535e:	d41b      	bmi.n	8015398 <arm_min_f32+0xc4>
 8015360:	3801      	subs	r0, #1
 8015362:	d015      	beq.n	8015390 <arm_min_f32+0xbc>
 8015364:	ed97 7a01 	vldr	s14, [r7, #4]
 8015368:	eef4 7ac7 	vcmpe.f32	s15, s14
 801536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015370:	dd02      	ble.n	8015378 <arm_min_f32+0xa4>
 8015372:	eef0 7a47 	vmov.f32	s15, s14
 8015376:	1a0d      	subs	r5, r1, r0
 8015378:	2801      	cmp	r0, #1
 801537a:	d009      	beq.n	8015390 <arm_min_f32+0xbc>
 801537c:	ed97 7a02 	vldr	s14, [r7, #8]
 8015380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015388:	d502      	bpl.n	8015390 <arm_min_f32+0xbc>
 801538a:	eef0 7a47 	vmov.f32	s15, s14
 801538e:	4665      	mov	r5, ip
 8015390:	edc2 7a00 	vstr	s15, [r2]
 8015394:	601d      	str	r5, [r3, #0]
 8015396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015398:	eef0 7a47 	vmov.f32	s15, s14
 801539c:	1a0d      	subs	r5, r1, r0
 801539e:	e7df      	b.n	8015360 <arm_min_f32+0x8c>
 80153a0:	4675      	mov	r5, lr
 80153a2:	e7d3      	b.n	801534c <arm_min_f32+0x78>

080153a4 <arm_mean_f32>:
 80153a4:	b430      	push	{r4, r5}
 80153a6:	088d      	lsrs	r5, r1, #2
 80153a8:	d037      	beq.n	801541a <arm_mean_f32+0x76>
 80153aa:	f100 0310 	add.w	r3, r0, #16
 80153ae:	462c      	mov	r4, r5
 80153b0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8015420 <arm_mean_f32+0x7c>
 80153b4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80153b8:	3c01      	subs	r4, #1
 80153ba:	ed13 6a03 	vldr	s12, [r3, #-12]
 80153be:	f103 0310 	add.w	r3, r3, #16
 80153c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153c6:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80153ca:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80153ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 80153d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80153d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153da:	d1eb      	bne.n	80153b4 <arm_mean_f32+0x10>
 80153dc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80153e0:	f011 0303 	ands.w	r3, r1, #3
 80153e4:	d00f      	beq.n	8015406 <arm_mean_f32+0x62>
 80153e6:	ed90 7a00 	vldr	s14, [r0]
 80153ea:	3b01      	subs	r3, #1
 80153ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153f0:	d009      	beq.n	8015406 <arm_mean_f32+0x62>
 80153f2:	ed90 7a01 	vldr	s14, [r0, #4]
 80153f6:	2b01      	cmp	r3, #1
 80153f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153fc:	d003      	beq.n	8015406 <arm_mean_f32+0x62>
 80153fe:	ed90 7a02 	vldr	s14, [r0, #8]
 8015402:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015406:	ee07 1a10 	vmov	s14, r1
 801540a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801540e:	bc30      	pop	{r4, r5}
 8015410:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015414:	edc2 6a00 	vstr	s13, [r2]
 8015418:	4770      	bx	lr
 801541a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8015420 <arm_mean_f32+0x7c>
 801541e:	e7df      	b.n	80153e0 <arm_mean_f32+0x3c>
 8015420:	00000000 	.word	0x00000000

08015424 <arm_max_f32>:
 8015424:	f101 3cff 	add.w	ip, r1, #4294967295
 8015428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801542a:	4607      	mov	r7, r0
 801542c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8015430:	ecf7 7a01 	vldmia	r7!, {s15}
 8015434:	d05c      	beq.n	80154f0 <arm_max_f32+0xcc>
 8015436:	2400      	movs	r4, #0
 8015438:	3014      	adds	r0, #20
 801543a:	ea4f 068e 	mov.w	r6, lr, lsl #2
 801543e:	4625      	mov	r5, r4
 8015440:	ed10 7a04 	vldr	s14, [r0, #-16]
 8015444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544c:	d502      	bpl.n	8015454 <arm_max_f32+0x30>
 801544e:	eef0 7a47 	vmov.f32	s15, s14
 8015452:	1c65      	adds	r5, r4, #1
 8015454:	ed10 7a03 	vldr	s14, [r0, #-12]
 8015458:	eef4 7ac7 	vcmpe.f32	s15, s14
 801545c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015460:	d502      	bpl.n	8015468 <arm_max_f32+0x44>
 8015462:	eef0 7a47 	vmov.f32	s15, s14
 8015466:	1ca5      	adds	r5, r4, #2
 8015468:	ed10 7a02 	vldr	s14, [r0, #-8]
 801546c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015474:	d502      	bpl.n	801547c <arm_max_f32+0x58>
 8015476:	eef0 7a47 	vmov.f32	s15, s14
 801547a:	1ce5      	adds	r5, r4, #3
 801547c:	ed10 7a01 	vldr	s14, [r0, #-4]
 8015480:	3404      	adds	r4, #4
 8015482:	3010      	adds	r0, #16
 8015484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548c:	d502      	bpl.n	8015494 <arm_max_f32+0x70>
 801548e:	eef0 7a47 	vmov.f32	s15, s14
 8015492:	4625      	mov	r5, r4
 8015494:	42a6      	cmp	r6, r4
 8015496:	d1d3      	bne.n	8015440 <arm_max_f32+0x1c>
 8015498:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 801549c:	f01c 0003 	ands.w	r0, ip, #3
 80154a0:	d01e      	beq.n	80154e0 <arm_max_f32+0xbc>
 80154a2:	ed97 7a00 	vldr	s14, [r7]
 80154a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ae:	dc1b      	bgt.n	80154e8 <arm_max_f32+0xc4>
 80154b0:	3801      	subs	r0, #1
 80154b2:	d015      	beq.n	80154e0 <arm_max_f32+0xbc>
 80154b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80154b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80154bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c0:	d502      	bpl.n	80154c8 <arm_max_f32+0xa4>
 80154c2:	eef0 7a47 	vmov.f32	s15, s14
 80154c6:	1a0d      	subs	r5, r1, r0
 80154c8:	2801      	cmp	r0, #1
 80154ca:	d009      	beq.n	80154e0 <arm_max_f32+0xbc>
 80154cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80154d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154d8:	dd02      	ble.n	80154e0 <arm_max_f32+0xbc>
 80154da:	eef0 7a47 	vmov.f32	s15, s14
 80154de:	4665      	mov	r5, ip
 80154e0:	edc2 7a00 	vstr	s15, [r2]
 80154e4:	601d      	str	r5, [r3, #0]
 80154e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154e8:	eef0 7a47 	vmov.f32	s15, s14
 80154ec:	1a0d      	subs	r5, r1, r0
 80154ee:	e7df      	b.n	80154b0 <arm_max_f32+0x8c>
 80154f0:	4675      	mov	r5, lr
 80154f2:	e7d3      	b.n	801549c <arm_max_f32+0x78>

080154f4 <arm_rfft_32_fast_init_f32>:
 80154f4:	b180      	cbz	r0, 8015518 <arm_rfft_32_fast_init_f32+0x24>
 80154f6:	4603      	mov	r3, r0
 80154f8:	2220      	movs	r2, #32
 80154fa:	2010      	movs	r0, #16
 80154fc:	4908      	ldr	r1, [pc, #32]	; (8015520 <arm_rfft_32_fast_init_f32+0x2c>)
 80154fe:	b430      	push	{r4, r5}
 8015500:	2514      	movs	r5, #20
 8015502:	4c08      	ldr	r4, [pc, #32]	; (8015524 <arm_rfft_32_fast_init_f32+0x30>)
 8015504:	821a      	strh	r2, [r3, #16]
 8015506:	4a08      	ldr	r2, [pc, #32]	; (8015528 <arm_rfft_32_fast_init_f32+0x34>)
 8015508:	8018      	strh	r0, [r3, #0]
 801550a:	2000      	movs	r0, #0
 801550c:	819d      	strh	r5, [r3, #12]
 801550e:	615a      	str	r2, [r3, #20]
 8015510:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8015514:	bc30      	pop	{r4, r5}
 8015516:	4770      	bx	lr
 8015518:	f04f 30ff 	mov.w	r0, #4294967295
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	0805e134 	.word	0x0805e134
 8015524:	0803ddf8 	.word	0x0803ddf8
 8015528:	0806eeb4 	.word	0x0806eeb4

0801552c <arm_rfft_64_fast_init_f32>:
 801552c:	b180      	cbz	r0, 8015550 <arm_rfft_64_fast_init_f32+0x24>
 801552e:	4603      	mov	r3, r0
 8015530:	2240      	movs	r2, #64	; 0x40
 8015532:	2020      	movs	r0, #32
 8015534:	4908      	ldr	r1, [pc, #32]	; (8015558 <arm_rfft_64_fast_init_f32+0x2c>)
 8015536:	b430      	push	{r4, r5}
 8015538:	2530      	movs	r5, #48	; 0x30
 801553a:	4c08      	ldr	r4, [pc, #32]	; (801555c <arm_rfft_64_fast_init_f32+0x30>)
 801553c:	821a      	strh	r2, [r3, #16]
 801553e:	4a08      	ldr	r2, [pc, #32]	; (8015560 <arm_rfft_64_fast_init_f32+0x34>)
 8015540:	8018      	strh	r0, [r3, #0]
 8015542:	2000      	movs	r0, #0
 8015544:	819d      	strh	r5, [r3, #12]
 8015546:	615a      	str	r2, [r3, #20]
 8015548:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801554c:	bc30      	pop	{r4, r5}
 801554e:	4770      	bx	lr
 8015550:	f04f 30ff 	mov.w	r0, #4294967295
 8015554:	4770      	bx	lr
 8015556:	bf00      	nop
 8015558:	080629b4 	.word	0x080629b4
 801555c:	0803ff50 	.word	0x0803ff50
 8015560:	08073734 	.word	0x08073734

08015564 <arm_rfft_256_fast_init_f32>:
 8015564:	b188      	cbz	r0, 801558a <arm_rfft_256_fast_init_f32+0x26>
 8015566:	4603      	mov	r3, r0
 8015568:	f44f 7280 	mov.w	r2, #256	; 0x100
 801556c:	2080      	movs	r0, #128	; 0x80
 801556e:	4908      	ldr	r1, [pc, #32]	; (8015590 <arm_rfft_256_fast_init_f32+0x2c>)
 8015570:	b430      	push	{r4, r5}
 8015572:	25d0      	movs	r5, #208	; 0xd0
 8015574:	4c07      	ldr	r4, [pc, #28]	; (8015594 <arm_rfft_256_fast_init_f32+0x30>)
 8015576:	821a      	strh	r2, [r3, #16]
 8015578:	4a07      	ldr	r2, [pc, #28]	; (8015598 <arm_rfft_256_fast_init_f32+0x34>)
 801557a:	8018      	strh	r0, [r3, #0]
 801557c:	2000      	movs	r0, #0
 801557e:	819d      	strh	r5, [r3, #12]
 8015580:	615a      	str	r2, [r3, #20]
 8015582:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8015586:	bc30      	pop	{r4, r5}
 8015588:	4770      	bx	lr
 801558a:	f04f 30ff 	mov.w	r0, #4294967295
 801558e:	4770      	bx	lr
 8015590:	0805dd34 	.word	0x0805dd34
 8015594:	0803dc58 	.word	0x0803dc58
 8015598:	0806eab4 	.word	0x0806eab4

0801559c <arm_rfft_512_fast_init_f32>:
 801559c:	b198      	cbz	r0, 80155c6 <arm_rfft_512_fast_init_f32+0x2a>
 801559e:	4603      	mov	r3, r0
 80155a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80155a8:	4908      	ldr	r1, [pc, #32]	; (80155cc <arm_rfft_512_fast_init_f32+0x30>)
 80155aa:	b430      	push	{r4, r5}
 80155ac:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80155b0:	4c07      	ldr	r4, [pc, #28]	; (80155d0 <arm_rfft_512_fast_init_f32+0x34>)
 80155b2:	821a      	strh	r2, [r3, #16]
 80155b4:	4a07      	ldr	r2, [pc, #28]	; (80155d4 <arm_rfft_512_fast_init_f32+0x38>)
 80155b6:	8018      	strh	r0, [r3, #0]
 80155b8:	2000      	movs	r0, #0
 80155ba:	819d      	strh	r5, [r3, #12]
 80155bc:	615a      	str	r2, [r3, #20]
 80155be:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80155c2:	bc30      	pop	{r4, r5}
 80155c4:	4770      	bx	lr
 80155c6:	f04f 30ff 	mov.w	r0, #4294967295
 80155ca:	4770      	bx	lr
 80155cc:	080621b4 	.word	0x080621b4
 80155d0:	0803fbe0 	.word	0x0803fbe0
 80155d4:	08072f34 	.word	0x08072f34

080155d8 <arm_rfft_1024_fast_init_f32>:
 80155d8:	b198      	cbz	r0, 8015602 <arm_rfft_1024_fast_init_f32+0x2a>
 80155da:	4603      	mov	r3, r0
 80155dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80155e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80155e4:	4908      	ldr	r1, [pc, #32]	; (8015608 <arm_rfft_1024_fast_init_f32+0x30>)
 80155e6:	b430      	push	{r4, r5}
 80155e8:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80155ec:	4c07      	ldr	r4, [pc, #28]	; (801560c <arm_rfft_1024_fast_init_f32+0x34>)
 80155ee:	821a      	strh	r2, [r3, #16]
 80155f0:	4a07      	ldr	r2, [pc, #28]	; (8015610 <arm_rfft_1024_fast_init_f32+0x38>)
 80155f2:	8018      	strh	r0, [r3, #0]
 80155f4:	2000      	movs	r0, #0
 80155f6:	819d      	strh	r5, [r3, #12]
 80155f8:	615a      	str	r2, [r3, #20]
 80155fa:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80155fe:	bc30      	pop	{r4, r5}
 8015600:	4770      	bx	lr
 8015602:	f04f 30ff 	mov.w	r0, #4294967295
 8015606:	4770      	bx	lr
 8015608:	0806aab4 	.word	0x0806aab4
 801560c:	0803ffb0 	.word	0x0803ffb0
 8015610:	0806bab4 	.word	0x0806bab4

08015614 <arm_rfft_2048_fast_init_f32>:
 8015614:	b198      	cbz	r0, 801563e <arm_rfft_2048_fast_init_f32+0x2a>
 8015616:	4603      	mov	r3, r0
 8015618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801561c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015620:	4908      	ldr	r1, [pc, #32]	; (8015644 <arm_rfft_2048_fast_init_f32+0x30>)
 8015622:	b430      	push	{r4, r5}
 8015624:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8015628:	4c07      	ldr	r4, [pc, #28]	; (8015648 <arm_rfft_2048_fast_init_f32+0x34>)
 801562a:	821a      	strh	r2, [r3, #16]
 801562c:	4a07      	ldr	r2, [pc, #28]	; (801564c <arm_rfft_2048_fast_init_f32+0x38>)
 801562e:	8018      	strh	r0, [r3, #0]
 8015630:	2000      	movs	r0, #0
 8015632:	819d      	strh	r5, [r3, #12]
 8015634:	615a      	str	r2, [r3, #20]
 8015636:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801563a:	bc30      	pop	{r4, r5}
 801563c:	4770      	bx	lr
 801563e:	f04f 30ff 	mov.w	r0, #4294967295
 8015642:	4770      	bx	lr
 8015644:	0805bd34 	.word	0x0805bd34
 8015648:	0803ce48 	.word	0x0803ce48
 801564c:	0806cab4 	.word	0x0806cab4

08015650 <arm_rfft_4096_fast_init_f32>:
 8015650:	b198      	cbz	r0, 801567a <arm_rfft_4096_fast_init_f32+0x2a>
 8015652:	4603      	mov	r3, r0
 8015654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015658:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801565c:	4908      	ldr	r1, [pc, #32]	; (8015680 <arm_rfft_4096_fast_init_f32+0x30>)
 801565e:	b430      	push	{r4, r5}
 8015660:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8015664:	4c07      	ldr	r4, [pc, #28]	; (8015684 <arm_rfft_4096_fast_init_f32+0x34>)
 8015666:	821a      	strh	r2, [r3, #16]
 8015668:	4a07      	ldr	r2, [pc, #28]	; (8015688 <arm_rfft_4096_fast_init_f32+0x38>)
 801566a:	8018      	strh	r0, [r3, #0]
 801566c:	2000      	movs	r0, #0
 801566e:	819d      	strh	r5, [r3, #12]
 8015670:	615a      	str	r2, [r3, #20]
 8015672:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8015676:	bc30      	pop	{r4, r5}
 8015678:	4770      	bx	lr
 801567a:	f04f 30ff 	mov.w	r0, #4294967295
 801567e:	4770      	bx	lr
 8015680:	0805e1b4 	.word	0x0805e1b4
 8015684:	0803de20 	.word	0x0803de20
 8015688:	0806ef34 	.word	0x0806ef34

0801568c <arm_rfft_fast_init_f32>:
 801568c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015690:	d01f      	beq.n	80156d2 <arm_rfft_fast_init_f32+0x46>
 8015692:	d90b      	bls.n	80156ac <arm_rfft_fast_init_f32+0x20>
 8015694:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8015698:	d019      	beq.n	80156ce <arm_rfft_fast_init_f32+0x42>
 801569a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801569e:	d012      	beq.n	80156c6 <arm_rfft_fast_init_f32+0x3a>
 80156a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80156a4:	d00d      	beq.n	80156c2 <arm_rfft_fast_init_f32+0x36>
 80156a6:	f04f 30ff 	mov.w	r0, #4294967295
 80156aa:	4770      	bx	lr
 80156ac:	2940      	cmp	r1, #64	; 0x40
 80156ae:	d00c      	beq.n	80156ca <arm_rfft_fast_init_f32+0x3e>
 80156b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80156b4:	d003      	beq.n	80156be <arm_rfft_fast_init_f32+0x32>
 80156b6:	2920      	cmp	r1, #32
 80156b8:	d1f5      	bne.n	80156a6 <arm_rfft_fast_init_f32+0x1a>
 80156ba:	4b07      	ldr	r3, [pc, #28]	; (80156d8 <arm_rfft_fast_init_f32+0x4c>)
 80156bc:	4718      	bx	r3
 80156be:	4b07      	ldr	r3, [pc, #28]	; (80156dc <arm_rfft_fast_init_f32+0x50>)
 80156c0:	4718      	bx	r3
 80156c2:	4b07      	ldr	r3, [pc, #28]	; (80156e0 <arm_rfft_fast_init_f32+0x54>)
 80156c4:	4718      	bx	r3
 80156c6:	4b07      	ldr	r3, [pc, #28]	; (80156e4 <arm_rfft_fast_init_f32+0x58>)
 80156c8:	4718      	bx	r3
 80156ca:	4b07      	ldr	r3, [pc, #28]	; (80156e8 <arm_rfft_fast_init_f32+0x5c>)
 80156cc:	e7f6      	b.n	80156bc <arm_rfft_fast_init_f32+0x30>
 80156ce:	4b07      	ldr	r3, [pc, #28]	; (80156ec <arm_rfft_fast_init_f32+0x60>)
 80156d0:	e7f4      	b.n	80156bc <arm_rfft_fast_init_f32+0x30>
 80156d2:	4b07      	ldr	r3, [pc, #28]	; (80156f0 <arm_rfft_fast_init_f32+0x64>)
 80156d4:	e7f2      	b.n	80156bc <arm_rfft_fast_init_f32+0x30>
 80156d6:	bf00      	nop
 80156d8:	080154f5 	.word	0x080154f5
 80156dc:	08015565 	.word	0x08015565
 80156e0:	080155d9 	.word	0x080155d9
 80156e4:	08015651 	.word	0x08015651
 80156e8:	0801552d 	.word	0x0801552d
 80156ec:	08015615 	.word	0x08015615
 80156f0:	0801559d 	.word	0x0801559d

080156f4 <stage_rfft_f32>:
 80156f4:	b470      	push	{r4, r5, r6}
 80156f6:	edd1 7a00 	vldr	s15, [r1]
 80156fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80156fe:	ed91 7a01 	vldr	s14, [r1, #4]
 8015702:	f101 0510 	add.w	r5, r1, #16
 8015706:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801570a:	8806      	ldrh	r6, [r0, #0]
 801570c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015710:	6943      	ldr	r3, [r0, #20]
 8015712:	1e70      	subs	r0, r6, #1
 8015714:	eeb0 4a46 	vmov.f32	s8, s12
 8015718:	f102 0410 	add.w	r4, r2, #16
 801571c:	3310      	adds	r3, #16
 801571e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015722:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801572a:	3908      	subs	r1, #8
 801572c:	ee26 7a86 	vmul.f32	s14, s13, s12
 8015730:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015734:	ed82 7a00 	vstr	s14, [r2]
 8015738:	edc2 7a01 	vstr	s15, [r2, #4]
 801573c:	ed15 6a02 	vldr	s12, [r5, #-8]
 8015740:	3801      	subs	r0, #1
 8015742:	ed91 7a02 	vldr	s14, [r1, #8]
 8015746:	f105 0508 	add.w	r5, r5, #8
 801574a:	ed53 6a02 	vldr	s13, [r3, #-8]
 801574e:	f1a1 0108 	sub.w	r1, r1, #8
 8015752:	ee77 5a46 	vsub.f32	s11, s14, s12
 8015756:	edd1 4a05 	vldr	s9, [r1, #20]
 801575a:	ed55 7a03 	vldr	s15, [r5, #-12]
 801575e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015762:	ed13 6a01 	vldr	s12, [r3, #-4]
 8015766:	f104 0408 	add.w	r4, r4, #8
 801576a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 801576e:	f103 0308 	add.w	r3, r3, #8
 8015772:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8015776:	ee66 5a25 	vmul.f32	s11, s12, s11
 801577a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801577e:	ee37 7a23 	vadd.f32	s14, s14, s7
 8015782:	ee66 6a85 	vmul.f32	s13, s13, s10
 8015786:	ee26 6a05 	vmul.f32	s12, s12, s10
 801578a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801578e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015792:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015796:	ee27 7a04 	vmul.f32	s14, s14, s8
 801579a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801579e:	ed04 7a04 	vstr	s14, [r4, #-16]
 80157a2:	ed44 7a03 	vstr	s15, [r4, #-12]
 80157a6:	d1c9      	bne.n	801573c <stage_rfft_f32+0x48>
 80157a8:	bc70      	pop	{r4, r5, r6}
 80157aa:	4770      	bx	lr

080157ac <merge_rfft_f32>:
 80157ac:	b410      	push	{r4}
 80157ae:	edd1 7a00 	vldr	s15, [r1]
 80157b2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80157b6:	edd1 6a01 	vldr	s13, [r1, #4]
 80157ba:	8804      	ldrh	r4, [r0, #0]
 80157bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80157c0:	6940      	ldr	r0, [r0, #20]
 80157c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80157c6:	3c01      	subs	r4, #1
 80157c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80157cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80157d0:	ed82 7a00 	vstr	s14, [r2]
 80157d4:	edc2 7a01 	vstr	s15, [r2, #4]
 80157d8:	b3dc      	cbz	r4, 8015852 <merge_rfft_f32+0xa6>
 80157da:	00e3      	lsls	r3, r4, #3
 80157dc:	3010      	adds	r0, #16
 80157de:	3210      	adds	r2, #16
 80157e0:	3b08      	subs	r3, #8
 80157e2:	440b      	add	r3, r1
 80157e4:	3110      	adds	r1, #16
 80157e6:	ed11 6a02 	vldr	s12, [r1, #-8]
 80157ea:	3c01      	subs	r4, #1
 80157ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80157f0:	f101 0108 	add.w	r1, r1, #8
 80157f4:	ed50 6a02 	vldr	s13, [r0, #-8]
 80157f8:	f1a3 0308 	sub.w	r3, r3, #8
 80157fc:	ee76 5a47 	vsub.f32	s11, s12, s14
 8015800:	edd3 4a05 	vldr	s9, [r3, #20]
 8015804:	ed51 7a03 	vldr	s15, [r1, #-12]
 8015808:	ee37 7a06 	vadd.f32	s14, s14, s12
 801580c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8015810:	f102 0208 	add.w	r2, r2, #8
 8015814:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8015818:	f100 0008 	add.w	r0, r0, #8
 801581c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8015820:	ee66 5a25 	vmul.f32	s11, s12, s11
 8015824:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8015828:	ee37 7a63 	vsub.f32	s14, s14, s7
 801582c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8015830:	ee26 6a05 	vmul.f32	s12, s12, s10
 8015834:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8015838:	ee37 7a46 	vsub.f32	s14, s14, s12
 801583c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015840:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015844:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015848:	ed02 7a04 	vstr	s14, [r2, #-16]
 801584c:	ed42 7a03 	vstr	s15, [r2, #-12]
 8015850:	d1c9      	bne.n	80157e6 <merge_rfft_f32+0x3a>
 8015852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015856:	4770      	bx	lr

08015858 <arm_rfft_fast_f32>:
 8015858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801585c:	8a05      	ldrh	r5, [r0, #16]
 801585e:	4604      	mov	r4, r0
 8015860:	4617      	mov	r7, r2
 8015862:	461e      	mov	r6, r3
 8015864:	086d      	lsrs	r5, r5, #1
 8015866:	8005      	strh	r5, [r0, #0]
 8015868:	b14b      	cbz	r3, 801587e <arm_rfft_fast_f32+0x26>
 801586a:	f7ff ff9f 	bl	80157ac <merge_rfft_f32>
 801586e:	4632      	mov	r2, r6
 8015870:	4639      	mov	r1, r7
 8015872:	4620      	mov	r0, r4
 8015874:	2301      	movs	r3, #1
 8015876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801587a:	f000 bb35 	b.w	8015ee8 <arm_cfft_f32>
 801587e:	4688      	mov	r8, r1
 8015880:	461a      	mov	r2, r3
 8015882:	2301      	movs	r3, #1
 8015884:	f000 fb30 	bl	8015ee8 <arm_cfft_f32>
 8015888:	463a      	mov	r2, r7
 801588a:	4641      	mov	r1, r8
 801588c:	4620      	mov	r0, r4
 801588e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015892:	f7ff bf2f 	b.w	80156f4 <stage_rfft_f32>
 8015896:	bf00      	nop

08015898 <arm_cfft_radix8by2_f32>:
 8015898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801589c:	4607      	mov	r7, r0
 801589e:	4608      	mov	r0, r1
 80158a0:	ed2d 8b06 	vpush	{d8-d10}
 80158a4:	f8b7 c000 	ldrh.w	ip, [r7]
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80158ae:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80158b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80158b6:	f000 80ac 	beq.w	8015a12 <arm_cfft_radix8by2_f32+0x17a>
 80158ba:	008c      	lsls	r4, r1, #2
 80158bc:	f100 0310 	add.w	r3, r0, #16
 80158c0:	3210      	adds	r2, #16
 80158c2:	f108 0610 	add.w	r6, r8, #16
 80158c6:	3410      	adds	r4, #16
 80158c8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80158cc:	1905      	adds	r5, r0, r4
 80158ce:	4444      	add	r4, r8
 80158d0:	ed16 7a04 	vldr	s14, [r6, #-16]
 80158d4:	3310      	adds	r3, #16
 80158d6:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 80158da:	3510      	adds	r5, #16
 80158dc:	ed56 0a03 	vldr	s1, [r6, #-12]
 80158e0:	3210      	adds	r2, #16
 80158e2:	ee74 9a87 	vadd.f32	s19, s9, s14
 80158e6:	ed56 7a02 	vldr	s15, [r6, #-8]
 80158ea:	ed56 2a01 	vldr	s5, [r6, #-4]
 80158ee:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80158f2:	ed54 5a04 	vldr	s11, [r4, #-16]
 80158f6:	3610      	adds	r6, #16
 80158f8:	ed14 5a03 	vldr	s10, [r4, #-12]
 80158fc:	3410      	adds	r4, #16
 80158fe:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 8015902:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8015906:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 801590a:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 801590e:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 8015912:	ee36 9aa5 	vadd.f32	s18, s13, s11
 8015916:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 801591a:	ee33 8a83 	vadd.f32	s16, s7, s6
 801591e:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 8015922:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8015926:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 801592a:	ee34 0a06 	vadd.f32	s0, s8, s12
 801592e:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 8015932:	ee77 aa20 	vadd.f32	s21, s14, s1
 8015936:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 801593a:	ee31 aaa7 	vadd.f32	s20, s3, s15
 801593e:	ee72 9a22 	vadd.f32	s19, s4, s5
 8015942:	ee71 8a05 	vadd.f32	s17, s2, s10
 8015946:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 801594a:	ee37 7a60 	vsub.f32	s14, s14, s1
 801594e:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 8015952:	ee35 5a41 	vsub.f32	s10, s10, s2
 8015956:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 801595a:	ee36 6a44 	vsub.f32	s12, s12, s8
 801595e:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 8015962:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 8015966:	ee71 1ae7 	vsub.f32	s3, s3, s15
 801596a:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 801596e:	ee72 7a62 	vsub.f32	s15, s4, s5
 8015972:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 8015976:	ee73 2a63 	vsub.f32	s5, s6, s7
 801597a:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 801597e:	4563      	cmp	r3, ip
 8015980:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8015984:	ee24 3a84 	vmul.f32	s6, s9, s8
 8015988:	ee27 2a26 	vmul.f32	s4, s14, s13
 801598c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8015990:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8015994:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015998:	ee65 5a84 	vmul.f32	s11, s11, s8
 801599c:	ee65 6a26 	vmul.f32	s13, s10, s13
 80159a0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80159a4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80159a8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80159ac:	ee33 4a02 	vadd.f32	s8, s6, s4
 80159b0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80159b4:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 80159b8:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 80159bc:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 80159c0:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 80159c4:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80159c8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80159cc:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80159d0:	ee27 4a87 	vmul.f32	s8, s15, s14
 80159d4:	ee61 5a87 	vmul.f32	s11, s3, s14
 80159d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80159dc:	ee22 5a87 	vmul.f32	s10, s5, s14
 80159e0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80159e4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80159e8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80159ec:	ee74 4a84 	vadd.f32	s9, s9, s8
 80159f0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80159f4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80159f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80159fc:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 8015a00:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 8015a04:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 8015a08:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 8015a0c:	f47f af60 	bne.w	80158d0 <arm_cfft_radix8by2_f32+0x38>
 8015a10:	687a      	ldr	r2, [r7, #4]
 8015a12:	b28c      	uxth	r4, r1
 8015a14:	2302      	movs	r3, #2
 8015a16:	4621      	mov	r1, r4
 8015a18:	f000 fe44 	bl	80166a4 <arm_radix8_butterfly_f32>
 8015a1c:	4621      	mov	r1, r4
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	4640      	mov	r0, r8
 8015a22:	2302      	movs	r3, #2
 8015a24:	ecbd 8b06 	vpop	{d8-d10}
 8015a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	f000 be3a 	b.w	80166a4 <arm_radix8_butterfly_f32>

08015a30 <arm_cfft_radix8by4_f32>:
 8015a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a34:	ed2d 8b04 	vpush	{d8-d9}
 8015a38:	8804      	ldrh	r4, [r0, #0]
 8015a3a:	b08d      	sub	sp, #52	; 0x34
 8015a3c:	6842      	ldr	r2, [r0, #4]
 8015a3e:	460d      	mov	r5, r1
 8015a40:	0864      	lsrs	r4, r4, #1
 8015a42:	edd1 7a00 	vldr	s15, [r1]
 8015a46:	edd1 5a01 	vldr	s11, [r1, #4]
 8015a4a:	00a3      	lsls	r3, r4, #2
 8015a4c:	18ce      	adds	r6, r1, r3
 8015a4e:	18f7      	adds	r7, r6, r3
 8015a50:	ed96 7a00 	vldr	s14, [r6]
 8015a54:	ed96 4a01 	vldr	s8, [r6, #4]
 8015a58:	ed97 6a00 	vldr	s12, [r7]
 8015a5c:	edd7 4a01 	vldr	s9, [r7, #4]
 8015a60:	ee77 6a86 	vadd.f32	s13, s15, s12
 8015a64:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015a68:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8015a6c:	ee77 2a26 	vadd.f32	s5, s14, s13
 8015a70:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8015a74:	ee74 3a27 	vadd.f32	s7, s8, s15
 8015a78:	ee76 4a44 	vsub.f32	s9, s12, s8
 8015a7c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8015a80:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8015a84:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8015a88:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015a8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015a90:	0860      	lsrs	r0, r4, #1
 8015a92:	f102 0408 	add.w	r4, r2, #8
 8015a96:	9405      	str	r4, [sp, #20]
 8015a98:	f102 0410 	add.w	r4, r2, #16
 8015a9c:	9009      	str	r0, [sp, #36]	; 0x24
 8015a9e:	f1a0 0902 	sub.w	r9, r0, #2
 8015aa2:	9403      	str	r4, [sp, #12]
 8015aa4:	18fc      	adds	r4, r7, r3
 8015aa6:	f102 0018 	add.w	r0, r2, #24
 8015aaa:	ed94 5a00 	vldr	s10, [r4]
 8015aae:	ed94 3a01 	vldr	s6, [r4, #4]
 8015ab2:	ee72 2a85 	vadd.f32	s5, s5, s10
 8015ab6:	9004      	str	r0, [sp, #16]
 8015ab8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8015abc:	4620      	mov	r0, r4
 8015abe:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8015ac2:	9408      	str	r4, [sp, #32]
 8015ac4:	ee12 ca90 	vmov	ip, s5
 8015ac8:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8015acc:	ee77 7a83 	vadd.f32	s15, s15, s6
 8015ad0:	f845 cb08 	str.w	ip, [r5], #8
 8015ad4:	ee13 ca90 	vmov	ip, s7
 8015ad8:	ed96 2a01 	vldr	s4, [r6, #4]
 8015adc:	ee74 4a05 	vadd.f32	s9, s8, s10
 8015ae0:	edd4 2a01 	vldr	s5, [r4, #4]
 8015ae4:	ee37 7a45 	vsub.f32	s14, s14, s10
 8015ae8:	ee36 6a02 	vadd.f32	s12, s12, s4
 8015aec:	9500      	str	r5, [sp, #0]
 8015aee:	460d      	mov	r5, r1
 8015af0:	ee36 6a22 	vadd.f32	s12, s12, s5
 8015af4:	ed81 6a01 	vstr	s12, [r1, #4]
 8015af8:	4631      	mov	r1, r6
 8015afa:	f841 cb08 	str.w	ip, [r1], #8
 8015afe:	ee16 ca90 	vmov	ip, s13
 8015b02:	9106      	str	r1, [sp, #24]
 8015b04:	4639      	mov	r1, r7
 8015b06:	edc6 4a01 	vstr	s9, [r6, #4]
 8015b0a:	f841 cb08 	str.w	ip, [r1], #8
 8015b0e:	9102      	str	r1, [sp, #8]
 8015b10:	ee17 1a90 	vmov	r1, s15
 8015b14:	edc7 5a01 	vstr	s11, [r7, #4]
 8015b18:	f840 1b08 	str.w	r1, [r0], #8
 8015b1c:	ea5f 0159 	movs.w	r1, r9, lsr #1
 8015b20:	9001      	str	r0, [sp, #4]
 8015b22:	ed84 7a01 	vstr	s14, [r4, #4]
 8015b26:	9107      	str	r1, [sp, #28]
 8015b28:	f000 8135 	beq.w	8015d96 <arm_cfft_radix8by4_f32+0x366>
 8015b2c:	3b0c      	subs	r3, #12
 8015b2e:	f102 0920 	add.w	r9, r2, #32
 8015b32:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8015b36:	4622      	mov	r2, r4
 8015b38:	468b      	mov	fp, r1
 8015b3a:	f105 0e10 	add.w	lr, r5, #16
 8015b3e:	4423      	add	r3, r4
 8015b40:	f1a6 0c0c 	sub.w	ip, r6, #12
 8015b44:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8015b48:	f106 0010 	add.w	r0, r6, #16
 8015b4c:	f1a7 010c 	sub.w	r1, r7, #12
 8015b50:	f107 0510 	add.w	r5, r7, #16
 8015b54:	3c0c      	subs	r4, #12
 8015b56:	3210      	adds	r2, #16
 8015b58:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015b5c:	f1bb 0b01 	subs.w	fp, fp, #1
 8015b60:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8015b64:	f1ac 0c08 	sub.w	ip, ip, #8
 8015b68:	ed50 6a02 	vldr	s13, [r0, #-8]
 8015b6c:	f10e 0e08 	add.w	lr, lr, #8
 8015b70:	ee77 1a87 	vadd.f32	s3, s15, s14
 8015b74:	ed52 4a02 	vldr	s9, [r2, #-8]
 8015b78:	ed55 5a01 	vldr	s11, [r5, #-4]
 8015b7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015b80:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8015b84:	f10a 0a08 	add.w	sl, sl, #8
 8015b88:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8015b8c:	ed10 3a01 	vldr	s6, [r0, #-4]
 8015b90:	ee37 4a25 	vadd.f32	s8, s14, s11
 8015b94:	ed52 3a01 	vldr	s7, [r2, #-4]
 8015b98:	ee37 7a65 	vsub.f32	s14, s14, s11
 8015b9c:	f100 0008 	add.w	r0, r0, #8
 8015ba0:	ee36 6a24 	vadd.f32	s12, s12, s9
 8015ba4:	f1a1 0108 	sub.w	r1, r1, #8
 8015ba8:	ee73 2a27 	vadd.f32	s5, s6, s15
 8015bac:	f109 0910 	add.w	r9, r9, #16
 8015bb0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8015bb4:	f105 0508 	add.w	r5, r5, #8
 8015bb8:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8015bbc:	ee37 5a66 	vsub.f32	s10, s14, s13
 8015bc0:	ed50 5a03 	vldr	s11, [r0, #-12]
 8015bc4:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8015bc8:	ed12 6a01 	vldr	s12, [r2, #-4]
 8015bcc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015bd0:	ee74 5a25 	vadd.f32	s11, s8, s11
 8015bd4:	f1a4 0408 	sub.w	r4, r4, #8
 8015bd8:	ee34 4a43 	vsub.f32	s8, s8, s6
 8015bdc:	f108 0818 	add.w	r8, r8, #24
 8015be0:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8015be4:	f102 0208 	add.w	r2, r2, #8
 8015be8:	ee75 5a86 	vadd.f32	s11, s11, s12
 8015bec:	f1a3 0308 	sub.w	r3, r3, #8
 8015bf0:	ee34 6a63 	vsub.f32	s12, s8, s7
 8015bf4:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8015bf8:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8015bfc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8015c00:	ed94 4a04 	vldr	s8, [r4, #16]
 8015c04:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8015c08:	ed9c 3a04 	vldr	s6, [ip, #16]
 8015c0c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8015c10:	edd1 7a04 	vldr	s15, [r1, #16]
 8015c14:	ee73 6a04 	vadd.f32	s13, s6, s8
 8015c18:	ed93 8a04 	vldr	s16, [r3, #16]
 8015c1c:	edd4 5a03 	vldr	s11, [r4, #12]
 8015c20:	ee33 3a44 	vsub.f32	s6, s6, s8
 8015c24:	ed9c 2a03 	vldr	s4, [ip, #12]
 8015c28:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8015c2c:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8015c30:	ed91 1a03 	vldr	s2, [r1, #12]
 8015c34:	ee32 4a25 	vadd.f32	s8, s4, s11
 8015c38:	edd3 2a03 	vldr	s5, [r3, #12]
 8015c3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015c40:	ee70 0a88 	vadd.f32	s1, s1, s16
 8015c44:	ee73 4a41 	vsub.f32	s9, s6, s2
 8015c48:	ee32 2a65 	vsub.f32	s4, s4, s11
 8015c4c:	edcc 0a04 	vstr	s1, [ip, #16]
 8015c50:	ee74 0a41 	vsub.f32	s1, s8, s2
 8015c54:	edd1 6a03 	vldr	s13, [r1, #12]
 8015c58:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8015c5c:	ed93 9a03 	vldr	s18, [r3, #12]
 8015c60:	ee78 5a82 	vadd.f32	s11, s17, s4
 8015c64:	ee34 4a26 	vadd.f32	s8, s8, s13
 8015c68:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8015c6c:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8015c70:	ee34 4a09 	vadd.f32	s8, s8, s18
 8015c74:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8015c78:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8015c7c:	ed8c 4a03 	vstr	s8, [ip, #12]
 8015c80:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8015c84:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8015c88:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8015c8c:	ee60 2a01 	vmul.f32	s5, s0, s2
 8015c90:	ee64 6a81 	vmul.f32	s13, s9, s2
 8015c94:	ee20 8a04 	vmul.f32	s16, s0, s8
 8015c98:	ee64 4a84 	vmul.f32	s9, s9, s8
 8015c9c:	ee25 0a01 	vmul.f32	s0, s10, s2
 8015ca0:	ee25 5a04 	vmul.f32	s10, s10, s8
 8015ca4:	ee25 4a84 	vmul.f32	s8, s11, s8
 8015ca8:	ee65 5a81 	vmul.f32	s11, s11, s2
 8015cac:	ee35 5a62 	vsub.f32	s10, s10, s5
 8015cb0:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8015cb4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8015cb8:	ee38 1a00 	vadd.f32	s2, s16, s0
 8015cbc:	ed00 5a03 	vstr	s10, [r0, #-12]
 8015cc0:	ed00 1a04 	vstr	s2, [r0, #-16]
 8015cc4:	ed81 4a04 	vstr	s8, [r1, #16]
 8015cc8:	edc1 5a03 	vstr	s11, [r1, #12]
 8015ccc:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 8015cd0:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 8015cd4:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8015cd8:	ee66 2a25 	vmul.f32	s5, s12, s11
 8015cdc:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8015ce0:	ee21 4a85 	vmul.f32	s8, s3, s10
 8015ce4:	ee60 7a85 	vmul.f32	s15, s1, s10
 8015ce8:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8015cec:	ee26 6a05 	vmul.f32	s12, s12, s10
 8015cf0:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8015cf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015cf8:	ee34 5a22 	vadd.f32	s10, s8, s5
 8015cfc:	ee36 6a61 	vsub.f32	s12, s12, s3
 8015d00:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8015d04:	ed05 5a04 	vstr	s10, [r5, #-16]
 8015d08:	ed05 6a03 	vstr	s12, [r5, #-12]
 8015d0c:	edc4 5a04 	vstr	s11, [r4, #16]
 8015d10:	edc4 6a03 	vstr	s13, [r4, #12]
 8015d14:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 8015d18:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 8015d1c:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8015d20:	ee67 5a27 	vmul.f32	s11, s14, s15
 8015d24:	ee63 6a27 	vmul.f32	s13, s6, s15
 8015d28:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8015d2c:	ee27 7a22 	vmul.f32	s14, s14, s5
 8015d30:	ee62 7a27 	vmul.f32	s15, s4, s15
 8015d34:	ee23 3a22 	vmul.f32	s6, s6, s5
 8015d38:	ee22 2a22 	vmul.f32	s4, s4, s5
 8015d3c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8015d40:	ee37 7a63 	vsub.f32	s14, s14, s7
 8015d44:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8015d48:	ee77 7a83 	vadd.f32	s15, s15, s6
 8015d4c:	ed02 6a04 	vstr	s12, [r2, #-16]
 8015d50:	ed02 7a03 	vstr	s14, [r2, #-12]
 8015d54:	ed83 2a04 	vstr	s4, [r3, #16]
 8015d58:	edc3 7a03 	vstr	s15, [r3, #12]
 8015d5c:	f47f aefc 	bne.w	8015b58 <arm_cfft_radix8by4_f32+0x128>
 8015d60:	9907      	ldr	r1, [sp, #28]
 8015d62:	9803      	ldr	r0, [sp, #12]
 8015d64:	00cb      	lsls	r3, r1, #3
 8015d66:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8015d6a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8015d6e:	9103      	str	r1, [sp, #12]
 8015d70:	9900      	ldr	r1, [sp, #0]
 8015d72:	4419      	add	r1, r3
 8015d74:	9100      	str	r1, [sp, #0]
 8015d76:	9905      	ldr	r1, [sp, #20]
 8015d78:	4419      	add	r1, r3
 8015d7a:	9105      	str	r1, [sp, #20]
 8015d7c:	9906      	ldr	r1, [sp, #24]
 8015d7e:	4419      	add	r1, r3
 8015d80:	9106      	str	r1, [sp, #24]
 8015d82:	9902      	ldr	r1, [sp, #8]
 8015d84:	4419      	add	r1, r3
 8015d86:	9102      	str	r1, [sp, #8]
 8015d88:	9901      	ldr	r1, [sp, #4]
 8015d8a:	4419      	add	r1, r3
 8015d8c:	9b04      	ldr	r3, [sp, #16]
 8015d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d92:	9101      	str	r1, [sp, #4]
 8015d94:	9304      	str	r3, [sp, #16]
 8015d96:	9b00      	ldr	r3, [sp, #0]
 8015d98:	9902      	ldr	r1, [sp, #8]
 8015d9a:	ed93 7a00 	vldr	s14, [r3]
 8015d9e:	edd1 7a00 	vldr	s15, [r1]
 8015da2:	9a06      	ldr	r2, [sp, #24]
 8015da4:	ee37 6a27 	vadd.f32	s12, s14, s15
 8015da8:	9d01      	ldr	r5, [sp, #4]
 8015daa:	edd2 6a00 	vldr	s13, [r2]
 8015dae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015db2:	9b02      	ldr	r3, [sp, #8]
 8015db4:	ee76 3a86 	vadd.f32	s7, s13, s12
 8015db8:	ed95 3a00 	vldr	s6, [r5]
 8015dbc:	ed93 5a01 	vldr	s10, [r3, #4]
 8015dc0:	ee36 6a66 	vsub.f32	s12, s12, s13
 8015dc4:	9b00      	ldr	r3, [sp, #0]
 8015dc6:	ee73 3a83 	vadd.f32	s7, s7, s6
 8015dca:	edd5 2a01 	vldr	s5, [r5, #4]
 8015dce:	ed93 4a01 	vldr	s8, [r3, #4]
 8015dd2:	ee36 6a43 	vsub.f32	s12, s12, s6
 8015dd6:	9b00      	ldr	r3, [sp, #0]
 8015dd8:	ee74 5a05 	vadd.f32	s11, s8, s10
 8015ddc:	edd2 7a01 	vldr	s15, [r2, #4]
 8015de0:	edc3 3a00 	vstr	s7, [r3]
 8015de4:	ee34 4a45 	vsub.f32	s8, s8, s10
 8015de8:	edd2 3a01 	vldr	s7, [r2, #4]
 8015dec:	ee77 4a87 	vadd.f32	s9, s15, s14
 8015df0:	ed95 2a01 	vldr	s4, [r5, #4]
 8015df4:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8015df8:	9d05      	ldr	r5, [sp, #20]
 8015dfa:	ee34 5a66 	vsub.f32	s10, s8, s13
 8015dfe:	9b00      	ldr	r3, [sp, #0]
 8015e00:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8015e04:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8015e08:	ee73 3a82 	vadd.f32	s7, s7, s4
 8015e0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015e0e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8015e12:	4621      	mov	r1, r4
 8015e14:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8015e18:	edc3 3a01 	vstr	s7, [r3, #4]
 8015e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e20:	edd5 3a00 	vldr	s7, [r5]
 8015e24:	ee76 6a84 	vadd.f32	s13, s13, s8
 8015e28:	ed95 7a01 	vldr	s14, [r5, #4]
 8015e2c:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8015e30:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8015e34:	2304      	movs	r3, #4
 8015e36:	ee64 4a87 	vmul.f32	s9, s9, s14
 8015e3a:	ee25 7a07 	vmul.f32	s14, s10, s14
 8015e3e:	ee25 5a23 	vmul.f32	s10, s10, s7
 8015e42:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8015e46:	ee34 7a07 	vadd.f32	s14, s8, s14
 8015e4a:	ee35 5a64 	vsub.f32	s10, s10, s9
 8015e4e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8015e52:	ed82 7a00 	vstr	s14, [r2]
 8015e56:	ed82 5a01 	vstr	s10, [r2, #4]
 8015e5a:	9a03      	ldr	r2, [sp, #12]
 8015e5c:	edd2 4a01 	vldr	s9, [r2, #4]
 8015e60:	ed92 7a00 	vldr	s14, [r2]
 8015e64:	9a02      	ldr	r2, [sp, #8]
 8015e66:	ee26 5a07 	vmul.f32	s10, s12, s14
 8015e6a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015e6e:	ee25 7a87 	vmul.f32	s14, s11, s14
 8015e72:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8015e76:	ee37 6a46 	vsub.f32	s12, s14, s12
 8015e7a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8015e7e:	edc2 5a00 	vstr	s11, [r2]
 8015e82:	ed82 6a01 	vstr	s12, [r2, #4]
 8015e86:	9a04      	ldr	r2, [sp, #16]
 8015e88:	9d01      	ldr	r5, [sp, #4]
 8015e8a:	edd2 5a01 	vldr	s11, [r2, #4]
 8015e8e:	ed92 7a00 	vldr	s14, [r2]
 8015e92:	ee27 6a87 	vmul.f32	s12, s15, s14
 8015e96:	ee26 7a87 	vmul.f32	s14, s13, s14
 8015e9a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015e9e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8015ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ea6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015eaa:	edc5 7a01 	vstr	s15, [r5, #4]
 8015eae:	edc5 6a00 	vstr	s13, [r5]
 8015eb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015eb4:	686a      	ldr	r2, [r5, #4]
 8015eb6:	f000 fbf5 	bl	80166a4 <arm_radix8_butterfly_f32>
 8015eba:	4630      	mov	r0, r6
 8015ebc:	4621      	mov	r1, r4
 8015ebe:	686a      	ldr	r2, [r5, #4]
 8015ec0:	2304      	movs	r3, #4
 8015ec2:	f000 fbef 	bl	80166a4 <arm_radix8_butterfly_f32>
 8015ec6:	4638      	mov	r0, r7
 8015ec8:	4621      	mov	r1, r4
 8015eca:	686a      	ldr	r2, [r5, #4]
 8015ecc:	2304      	movs	r3, #4
 8015ece:	f000 fbe9 	bl	80166a4 <arm_radix8_butterfly_f32>
 8015ed2:	4621      	mov	r1, r4
 8015ed4:	686a      	ldr	r2, [r5, #4]
 8015ed6:	2304      	movs	r3, #4
 8015ed8:	9808      	ldr	r0, [sp, #32]
 8015eda:	b00d      	add	sp, #52	; 0x34
 8015edc:	ecbd 8b04 	vpop	{d8-d9}
 8015ee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee4:	f000 bbde 	b.w	80166a4 <arm_radix8_butterfly_f32>

08015ee8 <arm_cfft_f32>:
 8015ee8:	2a01      	cmp	r2, #1
 8015eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eee:	4606      	mov	r6, r0
 8015ef0:	4617      	mov	r7, r2
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	4698      	mov	r8, r3
 8015ef6:	8805      	ldrh	r5, [r0, #0]
 8015ef8:	d055      	beq.n	8015fa6 <arm_cfft_f32+0xbe>
 8015efa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8015efe:	d061      	beq.n	8015fc4 <arm_cfft_f32+0xdc>
 8015f00:	d916      	bls.n	8015f30 <arm_cfft_f32+0x48>
 8015f02:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8015f06:	d01a      	beq.n	8015f3e <arm_cfft_f32+0x56>
 8015f08:	d946      	bls.n	8015f98 <arm_cfft_f32+0xb0>
 8015f0a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8015f0e:	d059      	beq.n	8015fc4 <arm_cfft_f32+0xdc>
 8015f10:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8015f14:	d105      	bne.n	8015f22 <arm_cfft_f32+0x3a>
 8015f16:	2301      	movs	r3, #1
 8015f18:	6872      	ldr	r2, [r6, #4]
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	f000 fbc1 	bl	80166a4 <arm_radix8_butterfly_f32>
 8015f22:	f1b8 0f00 	cmp.w	r8, #0
 8015f26:	d111      	bne.n	8015f4c <arm_cfft_f32+0x64>
 8015f28:	2f01      	cmp	r7, #1
 8015f2a:	d016      	beq.n	8015f5a <arm_cfft_f32+0x72>
 8015f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f30:	2d20      	cmp	r5, #32
 8015f32:	d047      	beq.n	8015fc4 <arm_cfft_f32+0xdc>
 8015f34:	d934      	bls.n	8015fa0 <arm_cfft_f32+0xb8>
 8015f36:	2d40      	cmp	r5, #64	; 0x40
 8015f38:	d0ed      	beq.n	8015f16 <arm_cfft_f32+0x2e>
 8015f3a:	2d80      	cmp	r5, #128	; 0x80
 8015f3c:	d1f1      	bne.n	8015f22 <arm_cfft_f32+0x3a>
 8015f3e:	4621      	mov	r1, r4
 8015f40:	4630      	mov	r0, r6
 8015f42:	f7ff fca9 	bl	8015898 <arm_cfft_radix8by2_f32>
 8015f46:	f1b8 0f00 	cmp.w	r8, #0
 8015f4a:	d0ed      	beq.n	8015f28 <arm_cfft_f32+0x40>
 8015f4c:	68b2      	ldr	r2, [r6, #8]
 8015f4e:	4620      	mov	r0, r4
 8015f50:	89b1      	ldrh	r1, [r6, #12]
 8015f52:	f000 f973 	bl	801623c <arm_bitreversal_32>
 8015f56:	2f01      	cmp	r7, #1
 8015f58:	d1e8      	bne.n	8015f2c <arm_cfft_f32+0x44>
 8015f5a:	ee07 5a90 	vmov	s15, r5
 8015f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015f6a:	2d00      	cmp	r5, #0
 8015f6c:	d0de      	beq.n	8015f2c <arm_cfft_f32+0x44>
 8015f6e:	f104 0108 	add.w	r1, r4, #8
 8015f72:	2300      	movs	r3, #0
 8015f74:	ed11 7a02 	vldr	s14, [r1, #-8]
 8015f78:	3301      	adds	r3, #1
 8015f7a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8015f7e:	3108      	adds	r1, #8
 8015f80:	429d      	cmp	r5, r3
 8015f82:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015f86:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8015f8a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8015f8e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8015f92:	d1ef      	bne.n	8015f74 <arm_cfft_f32+0x8c>
 8015f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f98:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8015f9c:	d0bb      	beq.n	8015f16 <arm_cfft_f32+0x2e>
 8015f9e:	e7c0      	b.n	8015f22 <arm_cfft_f32+0x3a>
 8015fa0:	2d10      	cmp	r5, #16
 8015fa2:	d0cc      	beq.n	8015f3e <arm_cfft_f32+0x56>
 8015fa4:	e7bd      	b.n	8015f22 <arm_cfft_f32+0x3a>
 8015fa6:	b195      	cbz	r5, 8015fce <arm_cfft_f32+0xe6>
 8015fa8:	f101 030c 	add.w	r3, r1, #12
 8015fac:	2200      	movs	r2, #0
 8015fae:	ed53 7a02 	vldr	s15, [r3, #-8]
 8015fb2:	3201      	adds	r2, #1
 8015fb4:	3308      	adds	r3, #8
 8015fb6:	eef1 7a67 	vneg.f32	s15, s15
 8015fba:	4295      	cmp	r5, r2
 8015fbc:	ed43 7a04 	vstr	s15, [r3, #-16]
 8015fc0:	d1f5      	bne.n	8015fae <arm_cfft_f32+0xc6>
 8015fc2:	e79a      	b.n	8015efa <arm_cfft_f32+0x12>
 8015fc4:	4621      	mov	r1, r4
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	f7ff fd32 	bl	8015a30 <arm_cfft_radix8by4_f32>
 8015fcc:	e7a9      	b.n	8015f22 <arm_cfft_f32+0x3a>
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d0ac      	beq.n	8015f2c <arm_cfft_f32+0x44>
 8015fd2:	e7bb      	b.n	8015f4c <arm_cfft_f32+0x64>

08015fd4 <arm_dct4_init_f32>:
 8015fd4:	b570      	push	{r4, r5, r6, lr}
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	460c      	mov	r4, r1
 8015fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fde:	4611      	mov	r1, r2
 8015fe0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8015fe4:	ed80 0a01 	vstr	s0, [r0, #4]
 8015fe8:	8003      	strh	r3, [r0, #0]
 8015fea:	8042      	strh	r2, [r0, #2]
 8015fec:	e9c0 4104 	strd	r4, r1, [r0, #16]
 8015ff0:	d020      	beq.n	8016034 <arm_dct4_init_f32+0x60>
 8015ff2:	d914      	bls.n	801601e <arm_dct4_init_f32+0x4a>
 8015ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ff8:	d022      	beq.n	8016040 <arm_dct4_init_f32+0x6c>
 8015ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015ffe:	d116      	bne.n	801602e <arm_dct4_init_f32+0x5a>
 8016000:	4e12      	ldr	r6, [pc, #72]	; (801604c <arm_dct4_init_f32+0x78>)
 8016002:	2500      	movs	r5, #0
 8016004:	4a12      	ldr	r2, [pc, #72]	; (8016050 <arm_dct4_init_f32+0x7c>)
 8016006:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801600a:	2601      	movs	r6, #1
 801600c:	461a      	mov	r2, r3
 801600e:	4620      	mov	r0, r4
 8016010:	2300      	movs	r3, #0
 8016012:	9600      	str	r6, [sp, #0]
 8016014:	f000 fe08 	bl	8016c28 <arm_rfft_init_f32>
 8016018:	4628      	mov	r0, r5
 801601a:	b002      	add	sp, #8
 801601c:	bd70      	pop	{r4, r5, r6, pc}
 801601e:	2b80      	cmp	r3, #128	; 0x80
 8016020:	d105      	bne.n	801602e <arm_dct4_init_f32+0x5a>
 8016022:	4e0c      	ldr	r6, [pc, #48]	; (8016054 <arm_dct4_init_f32+0x80>)
 8016024:	2500      	movs	r5, #0
 8016026:	4a0c      	ldr	r2, [pc, #48]	; (8016058 <arm_dct4_init_f32+0x84>)
 8016028:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801602c:	e7ed      	b.n	801600a <arm_dct4_init_f32+0x36>
 801602e:	f04f 35ff 	mov.w	r5, #4294967295
 8016032:	e7ea      	b.n	801600a <arm_dct4_init_f32+0x36>
 8016034:	4e09      	ldr	r6, [pc, #36]	; (801605c <arm_dct4_init_f32+0x88>)
 8016036:	2500      	movs	r5, #0
 8016038:	4a09      	ldr	r2, [pc, #36]	; (8016060 <arm_dct4_init_f32+0x8c>)
 801603a:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801603e:	e7e4      	b.n	801600a <arm_dct4_init_f32+0x36>
 8016040:	4e08      	ldr	r6, [pc, #32]	; (8016064 <arm_dct4_init_f32+0x90>)
 8016042:	2500      	movs	r5, #0
 8016044:	4a08      	ldr	r2, [pc, #32]	; (8016068 <arm_dct4_init_f32+0x94>)
 8016046:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801604a:	e7de      	b.n	801600a <arm_dct4_init_f32+0x36>
 801604c:	0802ce48 	.word	0x0802ce48
 8016050:	08043530 	.word	0x08043530
 8016054:	08027a48 	.word	0x08027a48
 8016058:	08040b30 	.word	0x08040b30
 801605c:	0802be48 	.word	0x0802be48
 8016060:	08042d30 	.word	0x08042d30
 8016064:	08027e48 	.word	0x08027e48
 8016068:	08040d30 	.word	0x08040d30

0801606c <arm_dct4_f32>:
 801606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016070:	4617      	mov	r7, r2
 8016072:	4606      	mov	r6, r0
 8016074:	68c4      	ldr	r4, [r0, #12]
 8016076:	460d      	mov	r5, r1
 8016078:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801607c:	4611      	mov	r1, r2
 801607e:	8802      	ldrh	r2, [r0, #0]
 8016080:	4638      	mov	r0, r7
 8016082:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8016086:	f000 fa15 	bl	80164b4 <arm_scale_f32>
 801608a:	4621      	mov	r1, r4
 801608c:	8833      	ldrh	r3, [r6, #0]
 801608e:	463a      	mov	r2, r7
 8016090:	4638      	mov	r0, r7
 8016092:	f000 fa53 	bl	801653c <arm_mult_f32>
 8016096:	8832      	ldrh	r2, [r6, #0]
 8016098:	8874      	ldrh	r4, [r6, #2]
 801609a:	f105 0110 	add.w	r1, r5, #16
 801609e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80160a2:	f107 0320 	add.w	r3, r7, #32
 80160a6:	08a4      	lsrs	r4, r4, #2
 80160a8:	4608      	mov	r0, r1
 80160aa:	3a14      	subs	r2, #20
 80160ac:	f853 cc20 	ldr.w	ip, [r3, #-32]
 80160b0:	3c01      	subs	r4, #1
 80160b2:	f100 0010 	add.w	r0, r0, #16
 80160b6:	f103 0320 	add.w	r3, r3, #32
 80160ba:	f840 cc20 	str.w	ip, [r0, #-32]
 80160be:	f1a2 0210 	sub.w	r2, r2, #16
 80160c2:	f853 cc3c 	ldr.w	ip, [r3, #-60]
 80160c6:	f8c2 c020 	str.w	ip, [r2, #32]
 80160ca:	f853 cc38 	ldr.w	ip, [r3, #-56]
 80160ce:	f840 cc1c 	str.w	ip, [r0, #-28]
 80160d2:	f853 cc34 	ldr.w	ip, [r3, #-52]
 80160d6:	f8c2 c01c 	str.w	ip, [r2, #28]
 80160da:	f853 cc30 	ldr.w	ip, [r3, #-48]
 80160de:	f840 cc18 	str.w	ip, [r0, #-24]
 80160e2:	f853 cc2c 	ldr.w	ip, [r3, #-44]
 80160e6:	f8c2 c018 	str.w	ip, [r2, #24]
 80160ea:	f853 cc28 	ldr.w	ip, [r3, #-40]
 80160ee:	f840 cc14 	str.w	ip, [r0, #-20]
 80160f2:	f853 cc24 	ldr.w	ip, [r3, #-36]
 80160f6:	f8c2 c014 	str.w	ip, [r2, #20]
 80160fa:	d1d7      	bne.n	80160ac <arm_dct4_f32+0x40>
 80160fc:	8832      	ldrh	r2, [r6, #0]
 80160fe:	f107 0410 	add.w	r4, r7, #16
 8016102:	0892      	lsrs	r2, r2, #2
 8016104:	4623      	mov	r3, r4
 8016106:	f851 0c10 	ldr.w	r0, [r1, #-16]
 801610a:	3a01      	subs	r2, #1
 801610c:	f101 0110 	add.w	r1, r1, #16
 8016110:	f103 0310 	add.w	r3, r3, #16
 8016114:	f843 0c20 	str.w	r0, [r3, #-32]
 8016118:	f851 0c1c 	ldr.w	r0, [r1, #-28]
 801611c:	f843 0c1c 	str.w	r0, [r3, #-28]
 8016120:	f851 0c18 	ldr.w	r0, [r1, #-24]
 8016124:	f843 0c18 	str.w	r0, [r3, #-24]
 8016128:	f851 0c14 	ldr.w	r0, [r1, #-20]
 801612c:	f843 0c14 	str.w	r0, [r3, #-20]
 8016130:	d1e9      	bne.n	8016106 <arm_dct4_f32+0x9a>
 8016132:	462a      	mov	r2, r5
 8016134:	4639      	mov	r1, r7
 8016136:	6930      	ldr	r0, [r6, #16]
 8016138:	f000 fe30 	bl	8016d9c <arm_rfft_f32>
 801613c:	462a      	mov	r2, r5
 801613e:	4628      	mov	r0, r5
 8016140:	4641      	mov	r1, r8
 8016142:	8833      	ldrh	r3, [r6, #0]
 8016144:	f000 f8a2 	bl	801628c <arm_cmplx_mult_cmplx_f32>
 8016148:	4629      	mov	r1, r5
 801614a:	8830      	ldrh	r0, [r6, #0]
 801614c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016150:	460b      	mov	r3, r1
 8016152:	3528      	adds	r5, #40	; 0x28
 8016154:	3801      	subs	r0, #1
 8016156:	3108      	adds	r1, #8
 8016158:	edd3 7a00 	vldr	s15, [r3]
 801615c:	463b      	mov	r3, r7
 801615e:	0880      	lsrs	r0, r0, #2
 8016160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016164:	4602      	mov	r2, r0
 8016166:	ee17 ca90 	vmov	ip, s15
 801616a:	f843 cb14 	str.w	ip, [r3], #20
 801616e:	ed15 7a08 	vldr	s14, [r5, #-32]	; 0xffffffe0
 8016172:	3a01      	subs	r2, #1
 8016174:	f105 0520 	add.w	r5, r5, #32
 8016178:	f103 0310 	add.w	r3, r3, #16
 801617c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016180:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8016184:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 8016188:	ee37 7a67 	vsub.f32	s14, s14, s15
 801618c:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
 8016190:	ed55 7a0c 	vldr	s15, [r5, #-48]	; 0xffffffd0
 8016194:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8016198:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 801619c:	ed55 7a0a 	vldr	s15, [r5, #-40]	; 0xffffffd8
 80161a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80161a4:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80161a8:	d1e1      	bne.n	801616e <arm_dct4_f32+0x102>
 80161aa:	8833      	ldrh	r3, [r6, #0]
 80161ac:	eb07 1700 	add.w	r7, r7, r0, lsl #4
 80161b0:	eb01 1540 	add.w	r5, r1, r0, lsl #5
 80161b4:	1e5a      	subs	r2, r3, #1
 80161b6:	3704      	adds	r7, #4
 80161b8:	f012 0203 	ands.w	r2, r2, #3
 80161bc:	d016      	beq.n	80161ec <arm_dct4_f32+0x180>
 80161be:	ed95 7a00 	vldr	s14, [r5]
 80161c2:	3a01      	subs	r2, #1
 80161c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161c8:	edc7 7a00 	vstr	s15, [r7]
 80161cc:	d00d      	beq.n	80161ea <arm_dct4_f32+0x17e>
 80161ce:	ed95 7a02 	vldr	s14, [r5, #8]
 80161d2:	2a01      	cmp	r2, #1
 80161d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80161dc:	d005      	beq.n	80161ea <arm_dct4_f32+0x17e>
 80161de:	ed95 7a04 	vldr	s14, [r5, #16]
 80161e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161e6:	edc7 7a02 	vstr	s15, [r7, #8]
 80161ea:	8833      	ldrh	r3, [r6, #0]
 80161ec:	089b      	lsrs	r3, r3, #2
 80161ee:	edd6 7a01 	vldr	s15, [r6, #4]
 80161f2:	3b01      	subs	r3, #1
 80161f4:	ed14 6a04 	vldr	s12, [r4, #-16]
 80161f8:	f104 0410 	add.w	r4, r4, #16
 80161fc:	ed54 6a07 	vldr	s13, [r4, #-28]	; 0xffffffe4
 8016200:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016204:	ed14 7a06 	vldr	s14, [r4, #-24]	; 0xffffffe8
 8016208:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801620c:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8016210:	ed96 6a01 	vldr	s12, [r6, #4]
 8016214:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016218:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 801621c:	edd6 6a01 	vldr	s13, [r6, #4]
 8016220:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016224:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 8016228:	ed96 7a01 	vldr	s14, [r6, #4]
 801622c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016230:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8016234:	d1db      	bne.n	80161ee <arm_dct4_f32+0x182>
 8016236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801623a:	bf00      	nop

0801623c <arm_bitreversal_32>:
 801623c:	b321      	cbz	r1, 8016288 <arm_bitreversal_32+0x4c>
 801623e:	f102 0c02 	add.w	ip, r2, #2
 8016242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016246:	4690      	mov	r8, r2
 8016248:	2500      	movs	r5, #0
 801624a:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 801624e:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8016252:	3502      	adds	r5, #2
 8016254:	08a4      	lsrs	r4, r4, #2
 8016256:	089b      	lsrs	r3, r3, #2
 8016258:	428d      	cmp	r5, r1
 801625a:	ea4f 0784 	mov.w	r7, r4, lsl #2
 801625e:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8016262:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8016266:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801626a:	f107 0704 	add.w	r7, r7, #4
 801626e:	f106 0604 	add.w	r6, r6, #4
 8016272:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8016276:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 801627a:	59c4      	ldr	r4, [r0, r7]
 801627c:	5983      	ldr	r3, [r0, r6]
 801627e:	51c3      	str	r3, [r0, r7]
 8016280:	5184      	str	r4, [r0, r6]
 8016282:	d3e2      	bcc.n	801624a <arm_bitreversal_32+0xe>
 8016284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016288:	4770      	bx	lr
 801628a:	bf00      	nop

0801628c <arm_cmplx_mult_cmplx_f32>:
 801628c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8016290:	b4f0      	push	{r4, r5, r6, r7}
 8016292:	d073      	beq.n	801637c <arm_cmplx_mult_cmplx_f32+0xf0>
 8016294:	f100 0620 	add.w	r6, r0, #32
 8016298:	f101 0520 	add.w	r5, r1, #32
 801629c:	f102 0420 	add.w	r4, r2, #32
 80162a0:	4667      	mov	r7, ip
 80162a2:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 80162a6:	3f01      	subs	r7, #1
 80162a8:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 80162ac:	f105 0520 	add.w	r5, r5, #32
 80162b0:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 80162b4:	f106 0620 	add.w	r6, r6, #32
 80162b8:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 80162bc:	f104 0420 	add.w	r4, r4, #32
 80162c0:	ee27 6a87 	vmul.f32	s12, s15, s14
 80162c4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80162c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80162cc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80162d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80162d4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80162d8:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 80162dc:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 80162e0:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 80162e4:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 80162e8:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 80162ec:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 80162f0:	ee27 6a87 	vmul.f32	s12, s15, s14
 80162f4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80162f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80162fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016300:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016304:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016308:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 801630c:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 8016310:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 8016314:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 8016318:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 801631c:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 8016320:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016324:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016328:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801632c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016330:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016334:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016338:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 801633c:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 8016340:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 8016344:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 8016348:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 801634c:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 8016350:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016354:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016358:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801635c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016364:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016368:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 801636c:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 8016370:	d197      	bne.n	80162a2 <arm_cmplx_mult_cmplx_f32+0x16>
 8016372:	ea4f 144c 	mov.w	r4, ip, lsl #5
 8016376:	4420      	add	r0, r4
 8016378:	4421      	add	r1, r4
 801637a:	4422      	add	r2, r4
 801637c:	f013 0303 	ands.w	r3, r3, #3
 8016380:	d04b      	beq.n	801641a <arm_cmplx_mult_cmplx_f32+0x18e>
 8016382:	edd0 5a00 	vldr	s11, [r0]
 8016386:	3b01      	subs	r3, #1
 8016388:	edd1 7a00 	vldr	s15, [r1]
 801638c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016390:	ed91 7a01 	vldr	s14, [r1, #4]
 8016394:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8016398:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801639c:	ee67 6a26 	vmul.f32	s13, s14, s13
 80163a0:	ee27 7a25 	vmul.f32	s14, s14, s11
 80163a4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80163a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80163ac:	edc2 6a00 	vstr	s13, [r2]
 80163b0:	edc2 7a01 	vstr	s15, [r2, #4]
 80163b4:	d031      	beq.n	801641a <arm_cmplx_mult_cmplx_f32+0x18e>
 80163b6:	edd0 7a02 	vldr	s15, [r0, #8]
 80163ba:	2b01      	cmp	r3, #1
 80163bc:	ed91 7a02 	vldr	s14, [r1, #8]
 80163c0:	edd0 6a03 	vldr	s13, [r0, #12]
 80163c4:	edd1 5a03 	vldr	s11, [r1, #12]
 80163c8:	ee27 6a87 	vmul.f32	s12, s15, s14
 80163cc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80163d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80163d4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80163d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80163dc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80163e0:	edc2 7a03 	vstr	s15, [r2, #12]
 80163e4:	edc2 6a02 	vstr	s13, [r2, #8]
 80163e8:	d017      	beq.n	801641a <arm_cmplx_mult_cmplx_f32+0x18e>
 80163ea:	edd0 7a04 	vldr	s15, [r0, #16]
 80163ee:	ed91 7a04 	vldr	s14, [r1, #16]
 80163f2:	edd0 6a05 	vldr	s13, [r0, #20]
 80163f6:	edd1 5a05 	vldr	s11, [r1, #20]
 80163fa:	ee27 6a87 	vmul.f32	s12, s15, s14
 80163fe:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016402:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016406:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801640a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801640e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016412:	edc2 7a05 	vstr	s15, [r2, #20]
 8016416:	edc2 6a04 	vstr	s13, [r2, #16]
 801641a:	bcf0      	pop	{r4, r5, r6, r7}
 801641c:	4770      	bx	lr
 801641e:	bf00      	nop

08016420 <arm_cos_f32>:
 8016420:	eddf 7a21 	vldr	s15, [pc, #132]	; 80164a8 <arm_cos_f32+0x88>
 8016424:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8016428:	ee20 0a27 	vmul.f32	s0, s0, s15
 801642c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8016430:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016434:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643c:	d504      	bpl.n	8016448 <arm_cos_f32+0x28>
 801643e:	ee17 3a90 	vmov	r3, s15
 8016442:	3b01      	subs	r3, #1
 8016444:	ee07 3a90 	vmov	s15, r3
 8016448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801644c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80164ac <arm_cos_f32+0x8c>
 8016450:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016454:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016458:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801645c:	ee17 3a10 	vmov	r3, s14
 8016460:	b29b      	uxth	r3, r3
 8016462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016466:	d21a      	bcs.n	801649e <arm_cos_f32+0x7e>
 8016468:	ee07 3a10 	vmov	s14, r3
 801646c:	1c59      	adds	r1, r3, #1
 801646e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8016472:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016476:	4a0e      	ldr	r2, [pc, #56]	; (80164b0 <arm_cos_f32+0x90>)
 8016478:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801647c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016480:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016484:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016488:	edd3 6a00 	vldr	s13, [r3]
 801648c:	ed92 7a00 	vldr	s14, [r2]
 8016490:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016498:	ee30 0a27 	vadd.f32	s0, s0, s15
 801649c:	4770      	bx	lr
 801649e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80164a2:	2101      	movs	r1, #1
 80164a4:	2300      	movs	r3, #0
 80164a6:	e7e6      	b.n	8016476 <arm_cos_f32+0x56>
 80164a8:	3e22f983 	.word	0x3e22f983
 80164ac:	44000000 	.word	0x44000000
 80164b0:	0805b530 	.word	0x0805b530

080164b4 <arm_scale_f32>:
 80164b4:	b470      	push	{r4, r5, r6}
 80164b6:	0896      	lsrs	r6, r2, #2
 80164b8:	d025      	beq.n	8016506 <arm_scale_f32+0x52>
 80164ba:	f100 0410 	add.w	r4, r0, #16
 80164be:	f101 0310 	add.w	r3, r1, #16
 80164c2:	4635      	mov	r5, r6
 80164c4:	ed54 7a04 	vldr	s15, [r4, #-16]
 80164c8:	3d01      	subs	r5, #1
 80164ca:	f104 0410 	add.w	r4, r4, #16
 80164ce:	f103 0310 	add.w	r3, r3, #16
 80164d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164d6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80164da:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80164de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164e2:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80164e6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80164ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164ee:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80164f2:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80164f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164fa:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80164fe:	d1e1      	bne.n	80164c4 <arm_scale_f32+0x10>
 8016500:	0136      	lsls	r6, r6, #4
 8016502:	4430      	add	r0, r6
 8016504:	4431      	add	r1, r6
 8016506:	f012 0203 	ands.w	r2, r2, #3
 801650a:	d015      	beq.n	8016538 <arm_scale_f32+0x84>
 801650c:	edd0 7a00 	vldr	s15, [r0]
 8016510:	3a01      	subs	r2, #1
 8016512:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016516:	edc1 7a00 	vstr	s15, [r1]
 801651a:	d00d      	beq.n	8016538 <arm_scale_f32+0x84>
 801651c:	edd0 7a01 	vldr	s15, [r0, #4]
 8016520:	2a01      	cmp	r2, #1
 8016522:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016526:	edc1 7a01 	vstr	s15, [r1, #4]
 801652a:	d005      	beq.n	8016538 <arm_scale_f32+0x84>
 801652c:	edd0 7a02 	vldr	s15, [r0, #8]
 8016530:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016534:	ed81 0a02 	vstr	s0, [r1, #8]
 8016538:	bc70      	pop	{r4, r5, r6}
 801653a:	4770      	bx	lr

0801653c <arm_mult_f32>:
 801653c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8016540:	b4f0      	push	{r4, r5, r6, r7}
 8016542:	d033      	beq.n	80165ac <arm_mult_f32+0x70>
 8016544:	f100 0610 	add.w	r6, r0, #16
 8016548:	f101 0510 	add.w	r5, r1, #16
 801654c:	f102 0410 	add.w	r4, r2, #16
 8016550:	4667      	mov	r7, ip
 8016552:	ed15 7a04 	vldr	s14, [r5, #-16]
 8016556:	3f01      	subs	r7, #1
 8016558:	ed56 7a04 	vldr	s15, [r6, #-16]
 801655c:	f105 0510 	add.w	r5, r5, #16
 8016560:	f106 0610 	add.w	r6, r6, #16
 8016564:	f104 0410 	add.w	r4, r4, #16
 8016568:	ee67 7a87 	vmul.f32	s15, s15, s14
 801656c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8016570:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8016574:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8016578:	ee67 7a87 	vmul.f32	s15, s15, s14
 801657c:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8016580:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8016584:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8016588:	ee67 7a87 	vmul.f32	s15, s15, s14
 801658c:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8016590:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8016594:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8016598:	ee67 7a87 	vmul.f32	s15, s15, s14
 801659c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80165a0:	d1d7      	bne.n	8016552 <arm_mult_f32+0x16>
 80165a2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80165a6:	4420      	add	r0, r4
 80165a8:	4421      	add	r1, r4
 80165aa:	4422      	add	r2, r4
 80165ac:	f013 0303 	ands.w	r3, r3, #3
 80165b0:	d01b      	beq.n	80165ea <arm_mult_f32+0xae>
 80165b2:	edd1 7a00 	vldr	s15, [r1]
 80165b6:	3b01      	subs	r3, #1
 80165b8:	ed90 7a00 	vldr	s14, [r0]
 80165bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165c0:	edc2 7a00 	vstr	s15, [r2]
 80165c4:	d011      	beq.n	80165ea <arm_mult_f32+0xae>
 80165c6:	edd0 7a01 	vldr	s15, [r0, #4]
 80165ca:	2b01      	cmp	r3, #1
 80165cc:	ed91 7a01 	vldr	s14, [r1, #4]
 80165d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165d4:	edc2 7a01 	vstr	s15, [r2, #4]
 80165d8:	d007      	beq.n	80165ea <arm_mult_f32+0xae>
 80165da:	edd0 7a02 	vldr	s15, [r0, #8]
 80165de:	ed91 7a02 	vldr	s14, [r1, #8]
 80165e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165e6:	edc2 7a02 	vstr	s15, [r2, #8]
 80165ea:	bcf0      	pop	{r4, r5, r6, r7}
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop

080165f0 <arm_add_f32>:
 80165f0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80165f4:	b4f0      	push	{r4, r5, r6, r7}
 80165f6:	d033      	beq.n	8016660 <arm_add_f32+0x70>
 80165f8:	f100 0610 	add.w	r6, r0, #16
 80165fc:	f101 0510 	add.w	r5, r1, #16
 8016600:	f102 0410 	add.w	r4, r2, #16
 8016604:	4667      	mov	r7, ip
 8016606:	ed15 7a04 	vldr	s14, [r5, #-16]
 801660a:	3f01      	subs	r7, #1
 801660c:	ed56 7a04 	vldr	s15, [r6, #-16]
 8016610:	f105 0510 	add.w	r5, r5, #16
 8016614:	f106 0610 	add.w	r6, r6, #16
 8016618:	f104 0410 	add.w	r4, r4, #16
 801661c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016620:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8016624:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8016628:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 801662c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016630:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8016634:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8016638:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801663c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016640:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8016644:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8016648:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801664c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016650:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8016654:	d1d7      	bne.n	8016606 <arm_add_f32+0x16>
 8016656:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801665a:	4420      	add	r0, r4
 801665c:	4421      	add	r1, r4
 801665e:	4422      	add	r2, r4
 8016660:	f013 0303 	ands.w	r3, r3, #3
 8016664:	d01b      	beq.n	801669e <arm_add_f32+0xae>
 8016666:	edd1 7a00 	vldr	s15, [r1]
 801666a:	3b01      	subs	r3, #1
 801666c:	ed90 7a00 	vldr	s14, [r0]
 8016670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016674:	edc2 7a00 	vstr	s15, [r2]
 8016678:	d011      	beq.n	801669e <arm_add_f32+0xae>
 801667a:	edd0 7a01 	vldr	s15, [r0, #4]
 801667e:	2b01      	cmp	r3, #1
 8016680:	ed91 7a01 	vldr	s14, [r1, #4]
 8016684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016688:	edc2 7a01 	vstr	s15, [r2, #4]
 801668c:	d007      	beq.n	801669e <arm_add_f32+0xae>
 801668e:	edd0 7a02 	vldr	s15, [r0, #8]
 8016692:	ed91 7a02 	vldr	s14, [r1, #8]
 8016696:	ee77 7a87 	vadd.f32	s15, s15, s14
 801669a:	edc2 7a02 	vstr	s15, [r2, #8]
 801669e:	bcf0      	pop	{r4, r5, r6, r7}
 80166a0:	4770      	bx	lr
 80166a2:	bf00      	nop

080166a4 <arm_radix8_butterfly_f32>:
 80166a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a8:	ed2d 8b10 	vpush	{d8-d15}
 80166ac:	b095      	sub	sp, #84	; 0x54
 80166ae:	468a      	mov	sl, r1
 80166b0:	468b      	mov	fp, r1
 80166b2:	eddf 8abb 	vldr	s17, [pc, #748]	; 80169a0 <arm_radix8_butterfly_f32+0x2fc>
 80166b6:	9012      	str	r0, [sp, #72]	; 0x48
 80166b8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80166bc:	4603      	mov	r3, r0
 80166be:	3304      	adds	r3, #4
 80166c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80166c2:	ea4f 02db 	mov.w	r2, fp, lsr #3
 80166c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80166c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80166cc:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 80166d0:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80166d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80166d6:	9303      	str	r3, [sp, #12]
 80166d8:	0153      	lsls	r3, r2, #5
 80166da:	0114      	lsls	r4, r2, #4
 80166dc:	eba9 0002 	sub.w	r0, r9, r2
 80166e0:	18ce      	adds	r6, r1, r3
 80166e2:	9302      	str	r3, [sp, #8]
 80166e4:	0097      	lsls	r7, r2, #2
 80166e6:	4613      	mov	r3, r2
 80166e8:	eb06 0509 	add.w	r5, r6, r9
 80166ec:	9004      	str	r0, [sp, #16]
 80166ee:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 80166f2:	1bd2      	subs	r2, r2, r7
 80166f4:	eb05 0109 	add.w	r1, r5, r9
 80166f8:	441f      	add	r7, r3
 80166fa:	9405      	str	r4, [sp, #20]
 80166fc:	f109 0004 	add.w	r0, r9, #4
 8016700:	9101      	str	r1, [sp, #4]
 8016702:	1d21      	adds	r1, r4, #4
 8016704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016706:	f04f 0e00 	mov.w	lr, #0
 801670a:	9c01      	ldr	r4, [sp, #4]
 801670c:	4418      	add	r0, r3
 801670e:	4419      	add	r1, r3
 8016710:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8016714:	9b02      	ldr	r3, [sp, #8]
 8016716:	00fc      	lsls	r4, r7, #3
 8016718:	18d7      	adds	r7, r2, r3
 801671a:	9b04      	ldr	r3, [sp, #16]
 801671c:	9406      	str	r4, [sp, #24]
 801671e:	00db      	lsls	r3, r3, #3
 8016720:	9c01      	ldr	r4, [sp, #4]
 8016722:	9307      	str	r3, [sp, #28]
 8016724:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8016728:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801672c:	9304      	str	r3, [sp, #16]
 801672e:	9b03      	ldr	r3, [sp, #12]
 8016730:	edd6 6a00 	vldr	s13, [r6]
 8016734:	44de      	add	lr, fp
 8016736:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801673a:	ed94 7a00 	vldr	s14, [r4]
 801673e:	45f2      	cmp	sl, lr
 8016740:	ed10 6a01 	vldr	s12, [r0, #-4]
 8016744:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8016748:	edd5 2a00 	vldr	s5, [r5]
 801674c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016750:	edd7 3a00 	vldr	s7, [r7]
 8016754:	ed11 5a01 	vldr	s10, [r1, #-4]
 8016758:	ee36 3a22 	vadd.f32	s6, s12, s5
 801675c:	edd2 6a00 	vldr	s13, [r2]
 8016760:	ee75 5a07 	vadd.f32	s11, s10, s14
 8016764:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8016768:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801676c:	ee72 4a25 	vadd.f32	s9, s4, s11
 8016770:	ee73 3a04 	vadd.f32	s7, s6, s8
 8016774:	ee35 5a47 	vsub.f32	s10, s10, s14
 8016778:	ee36 7a62 	vsub.f32	s14, s12, s5
 801677c:	ee32 2a65 	vsub.f32	s4, s4, s11
 8016780:	ee74 5aa3 	vadd.f32	s11, s9, s7
 8016784:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8016788:	ee37 6a66 	vsub.f32	s12, s14, s13
 801678c:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8016790:	ee33 3a44 	vsub.f32	s6, s6, s8
 8016794:	edc6 4a00 	vstr	s9, [r6]
 8016798:	ee37 7a26 	vadd.f32	s14, s14, s13
 801679c:	ed97 4a01 	vldr	s8, [r7, #4]
 80167a0:	ee66 6a28 	vmul.f32	s13, s12, s17
 80167a4:	edd0 5a00 	vldr	s11, [r0]
 80167a8:	ed95 6a01 	vldr	s12, [r5, #4]
 80167ac:	ee27 7a28 	vmul.f32	s14, s14, s17
 80167b0:	edd2 3a01 	vldr	s7, [r2, #4]
 80167b4:	ee77 2aa6 	vadd.f32	s5, s15, s13
 80167b8:	ee75 4ac6 	vsub.f32	s9, s11, s12
 80167bc:	ed96 1a01 	vldr	s2, [r6, #4]
 80167c0:	ee33 0ac4 	vsub.f32	s0, s7, s8
 80167c4:	edd4 0a01 	vldr	s1, [r4, #4]
 80167c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167cc:	eddc 6a00 	vldr	s13, [ip]
 80167d0:	ee75 5a86 	vadd.f32	s11, s11, s12
 80167d4:	ed91 6a00 	vldr	s12, [r1]
 80167d8:	ee73 3a84 	vadd.f32	s7, s7, s8
 80167dc:	ee74 1a80 	vadd.f32	s3, s9, s0
 80167e0:	ee36 4a81 	vadd.f32	s8, s13, s2
 80167e4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80167e8:	ee76 6ac1 	vsub.f32	s13, s13, s2
 80167ec:	ee36 1a20 	vadd.f32	s2, s12, s1
 80167f0:	ee61 1aa8 	vmul.f32	s3, s3, s17
 80167f4:	ee36 6a60 	vsub.f32	s12, s12, s1
 80167f8:	ee64 4aa8 	vmul.f32	s9, s9, s17
 80167fc:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8016800:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8016804:	ee74 3a01 	vadd.f32	s7, s8, s2
 8016808:	ee34 4a41 	vsub.f32	s8, s8, s2
 801680c:	ee36 1a21 	vadd.f32	s2, s12, s3
 8016810:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8016814:	ee36 6a61 	vsub.f32	s12, s12, s3
 8016818:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801681c:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8016820:	ed8c 0a00 	vstr	s0, [ip]
 8016824:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016828:	449c      	add	ip, r3
 801682a:	ee75 4a07 	vadd.f32	s9, s10, s14
 801682e:	edc6 3a01 	vstr	s7, [r6, #4]
 8016832:	ee35 7a47 	vsub.f32	s14, s10, s14
 8016836:	441e      	add	r6, r3
 8016838:	ee32 5a25 	vadd.f32	s10, s4, s11
 801683c:	ee72 5a65 	vsub.f32	s11, s4, s11
 8016840:	ee72 3a81 	vadd.f32	s7, s5, s2
 8016844:	ed01 5a01 	vstr	s10, [r1, #-4]
 8016848:	ee34 2a43 	vsub.f32	s4, s8, s6
 801684c:	edc4 5a00 	vstr	s11, [r4]
 8016850:	ee37 5a86 	vadd.f32	s10, s15, s12
 8016854:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8016858:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801685c:	ed81 2a00 	vstr	s4, [r1]
 8016860:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8016864:	4419      	add	r1, r3
 8016866:	ee33 4a04 	vadd.f32	s8, s6, s8
 801686a:	ee72 2ac1 	vsub.f32	s5, s5, s2
 801686e:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8016872:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016876:	ed84 4a01 	vstr	s8, [r4, #4]
 801687a:	ed40 3a01 	vstr	s7, [r0, #-4]
 801687e:	441c      	add	r4, r3
 8016880:	edc7 2a00 	vstr	s5, [r7]
 8016884:	ed85 5a00 	vstr	s10, [r5]
 8016888:	edc2 7a00 	vstr	s15, [r2]
 801688c:	edc0 5a00 	vstr	s11, [r0]
 8016890:	4418      	add	r0, r3
 8016892:	edc7 4a01 	vstr	s9, [r7, #4]
 8016896:	441f      	add	r7, r3
 8016898:	ed85 6a01 	vstr	s12, [r5, #4]
 801689c:	441d      	add	r5, r3
 801689e:	ed82 7a01 	vstr	s14, [r2, #4]
 80168a2:	441a      	add	r2, r3
 80168a4:	f63f af44 	bhi.w	8016730 <arm_radix8_butterfly_f32+0x8c>
 80168a8:	469c      	mov	ip, r3
 80168aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168ac:	2b07      	cmp	r3, #7
 80168ae:	f240 81b6 	bls.w	8016c1e <arm_radix8_butterfly_f32+0x57a>
 80168b2:	9a02      	ldr	r2, [sp, #8]
 80168b4:	f109 0608 	add.w	r6, r9, #8
 80168b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80168ba:	f108 0408 	add.w	r4, r8, #8
 80168be:	3208      	adds	r2, #8
 80168c0:	9f06      	ldr	r7, [sp, #24]
 80168c2:	9d04      	ldr	r5, [sp, #16]
 80168c4:	189a      	adds	r2, r3, r2
 80168c6:	3708      	adds	r7, #8
 80168c8:	3508      	adds	r5, #8
 80168ca:	9807      	ldr	r0, [sp, #28]
 80168cc:	920c      	str	r2, [sp, #48]	; 0x30
 80168ce:	199a      	adds	r2, r3, r6
 80168d0:	9905      	ldr	r1, [sp, #20]
 80168d2:	3008      	adds	r0, #8
 80168d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80168d6:	19da      	adds	r2, r3, r7
 80168d8:	310c      	adds	r1, #12
 80168da:	920a      	str	r2, [sp, #40]	; 0x28
 80168dc:	195a      	adds	r2, r3, r5
 80168de:	9209      	str	r2, [sp, #36]	; 0x24
 80168e0:	191a      	adds	r2, r3, r4
 80168e2:	9208      	str	r2, [sp, #32]
 80168e4:	181a      	adds	r2, r3, r0
 80168e6:	9207      	str	r2, [sp, #28]
 80168e8:	185a      	adds	r2, r3, r1
 80168ea:	330c      	adds	r3, #12
 80168ec:	9205      	str	r2, [sp, #20]
 80168ee:	9306      	str	r3, [sp, #24]
 80168f0:	2301      	movs	r3, #1
 80168f2:	9304      	str	r3, [sp, #16]
 80168f4:	2300      	movs	r3, #0
 80168f6:	930d      	str	r3, [sp, #52]	; 0x34
 80168f8:	4663      	mov	r3, ip
 80168fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80168fe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016902:	440a      	add	r2, r1
 8016904:	9f06      	ldr	r7, [sp, #24]
 8016906:	9e07      	ldr	r6, [sp, #28]
 8016908:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801690c:	920d      	str	r2, [sp, #52]	; 0x34
 801690e:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 8016912:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016914:	9d08      	ldr	r5, [sp, #32]
 8016916:	4442      	add	r2, r8
 8016918:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801691a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801691c:	eb02 0108 	add.w	r1, r2, r8
 8016920:	ed92 ea00 	vldr	s28, [r2]
 8016924:	eb01 0208 	add.w	r2, r1, r8
 8016928:	edd1 da00 	vldr	s27, [r1]
 801692c:	eb02 0108 	add.w	r1, r2, r8
 8016930:	ed92 da00 	vldr	s26, [r2]
 8016934:	eb01 0208 	add.w	r2, r1, r8
 8016938:	edd1 ca00 	vldr	s25, [r1]
 801693c:	eb02 0108 	add.w	r1, r2, r8
 8016940:	ed92 ca00 	vldr	s24, [r2]
 8016944:	eb01 0208 	add.w	r2, r1, r8
 8016948:	edd1 ba00 	vldr	s23, [r1]
 801694c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801694e:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8016952:	ed92 ba00 	vldr	s22, [r2]
 8016956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016958:	eb0e 0908 	add.w	r9, lr, r8
 801695c:	910e      	str	r1, [sp, #56]	; 0x38
 801695e:	9201      	str	r2, [sp, #4]
 8016960:	eb09 0208 	add.w	r2, r9, r8
 8016964:	ed99 aa01 	vldr	s20, [r9, #4]
 8016968:	edde aa01 	vldr	s21, [lr, #4]
 801696c:	eb02 0908 	add.w	r9, r2, r8
 8016970:	edd2 9a01 	vldr	s19, [r2, #4]
 8016974:	f8dd e010 	ldr.w	lr, [sp, #16]
 8016978:	eb09 0208 	add.w	r2, r9, r8
 801697c:	ed99 9a01 	vldr	s18, [r9, #4]
 8016980:	eb02 0908 	add.w	r9, r2, r8
 8016984:	ed92 8a01 	vldr	s16, [r2, #4]
 8016988:	9a01      	ldr	r2, [sp, #4]
 801698a:	edd9 7a01 	vldr	s15, [r9, #4]
 801698e:	44c8      	add	r8, r9
 8016990:	edcd 7a02 	vstr	s15, [sp, #8]
 8016994:	edd8 7a01 	vldr	s15, [r8, #4]
 8016998:	edcd 7a03 	vstr	s15, [sp, #12]
 801699c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801699e:	e001      	b.n	80169a4 <arm_radix8_butterfly_f32+0x300>
 80169a0:	3f3504f3 	.word	0x3f3504f3
 80169a4:	ed92 7a00 	vldr	s14, [r2]
 80169a8:	44de      	add	lr, fp
 80169aa:	ed17 1a01 	vldr	s2, [r7, #-4]
 80169ae:	ed90 5a00 	vldr	s10, [r0]
 80169b2:	45f2      	cmp	sl, lr
 80169b4:	ed1c fa01 	vldr	s30, [ip, #-4]
 80169b8:	ee31 3a07 	vadd.f32	s6, s2, s14
 80169bc:	edd6 5a00 	vldr	s11, [r6]
 80169c0:	ee31 1a47 	vsub.f32	s2, s2, s14
 80169c4:	edd4 7a00 	vldr	s15, [r4]
 80169c8:	ed95 7a00 	vldr	s14, [r5]
 80169cc:	ed91 4a00 	vldr	s8, [r1]
 80169d0:	ee3f 6a27 	vadd.f32	s12, s30, s15
 80169d4:	ee77 6a25 	vadd.f32	s13, s14, s11
 80169d8:	edd7 ea00 	vldr	s29, [r7]
 80169dc:	ee74 fa05 	vadd.f32	s31, s8, s10
 80169e0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80169e4:	ee34 4a45 	vsub.f32	s8, s8, s10
 80169e8:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 80169ec:	ee37 7a65 	vsub.f32	s14, s14, s11
 80169f0:	ee33 3a46 	vsub.f32	s6, s6, s12
 80169f4:	ee31 6a85 	vadd.f32	s12, s3, s10
 80169f8:	ee7f 7a67 	vsub.f32	s15, s30, s15
 80169fc:	ee34 fa07 	vadd.f32	s30, s8, s14
 8016a00:	ed07 6a01 	vstr	s12, [r7, #-4]
 8016a04:	ee34 4a47 	vsub.f32	s8, s8, s14
 8016a08:	edd5 3a01 	vldr	s7, [r5, #4]
 8016a0c:	ee7f fae6 	vsub.f32	s31, s31, s13
 8016a10:	ed90 7a01 	vldr	s14, [r0, #4]
 8016a14:	ee2f fa28 	vmul.f32	s30, s30, s17
 8016a18:	edd1 5a01 	vldr	s11, [r1, #4]
 8016a1c:	ee24 4a28 	vmul.f32	s8, s8, s17
 8016a20:	ed96 6a01 	vldr	s12, [r6, #4]
 8016a24:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8016a28:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8016a2c:	edd2 6a01 	vldr	s13, [r2, #4]
 8016a30:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8016a34:	edd4 4a01 	vldr	s9, [r4, #4]
 8016a38:	ee75 5a87 	vadd.f32	s11, s11, s14
 8016a3c:	ed9c 7a00 	vldr	s14, [ip]
 8016a40:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8016a44:	ee33 6a86 	vadd.f32	s12, s7, s12
 8016a48:	ee37 facf 	vsub.f32	s30, s15, s30
 8016a4c:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8016a50:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8016a54:	ee7e eae6 	vsub.f32	s29, s29, s13
 8016a58:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8016a5c:	ee77 6a24 	vadd.f32	s13, s14, s9
 8016a60:	ee75 0a86 	vadd.f32	s1, s11, s12
 8016a64:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016a68:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8016a6c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016a70:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8016a74:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8016a78:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8016a7c:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8016a80:	ee77 4a22 	vadd.f32	s9, s14, s5
 8016a84:	ee7e eae7 	vsub.f32	s29, s29, s15
 8016a88:	ee77 7a62 	vsub.f32	s15, s14, s5
 8016a8c:	ee71 2a04 	vadd.f32	s5, s2, s8
 8016a90:	ee31 7a44 	vsub.f32	s14, s2, s8
 8016a94:	ee30 1a60 	vsub.f32	s2, s0, s1
 8016a98:	ee73 1a06 	vadd.f32	s3, s6, s12
 8016a9c:	ee33 6a46 	vsub.f32	s12, s6, s12
 8016aa0:	ee33 3aef 	vsub.f32	s6, s7, s31
 8016aa4:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8016aa8:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8016aac:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8016ab0:	ee72 5a25 	vadd.f32	s11, s4, s11
 8016ab4:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8016ab8:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8016abc:	ee77 2a27 	vadd.f32	s5, s14, s15
 8016ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016ac4:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8016ac8:	ee2c fa85 	vmul.f32	s30, s25, s10
 8016acc:	ee69 ea01 	vmul.f32	s29, s18, s2
 8016ad0:	ee29 5a05 	vmul.f32	s10, s18, s10
 8016ad4:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8016ad8:	ee6d faa1 	vmul.f32	s31, s27, s3
 8016adc:	ee70 0a20 	vadd.f32	s1, s0, s1
 8016ae0:	ee6a 1a21 	vmul.f32	s3, s20, s3
 8016ae4:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8016ae8:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8016aec:	edc7 0a00 	vstr	s1, [r7]
 8016af0:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8016af4:	441f      	add	r7, r3
 8016af6:	ee2a faa3 	vmul.f32	s30, s21, s7
 8016afa:	ee31 5a45 	vsub.f32	s10, s2, s10
 8016afe:	ee6e 3a23 	vmul.f32	s7, s28, s7
 8016b02:	edc2 ea00 	vstr	s29, [r2]
 8016b06:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8016b0a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8016b0e:	ed82 5a01 	vstr	s10, [r2, #4]
 8016b12:	ee6e 0a02 	vmul.f32	s1, s28, s4
 8016b16:	edcd 3a01 	vstr	s7, [sp, #4]
 8016b1a:	ed9d 5a03 	vldr	s10, [sp, #12]
 8016b1e:	ee6b ea86 	vmul.f32	s29, s23, s12
 8016b22:	eddd 3a02 	vldr	s7, [sp, #8]
 8016b26:	ee6b fa24 	vmul.f32	s31, s22, s9
 8016b2a:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8016b2e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016b32:	ed8c 3a00 	vstr	s6, [ip]
 8016b36:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8016b3a:	ee23 6a86 	vmul.f32	s12, s7, s12
 8016b3e:	eddd 3a01 	vldr	s7, [sp, #4]
 8016b42:	ee25 5a25 	vmul.f32	s10, s10, s11
 8016b46:	441a      	add	r2, r3
 8016b48:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8016b4c:	449c      	add	ip, r3
 8016b4e:	ee68 1a04 	vmul.f32	s3, s16, s8
 8016b52:	ee70 0a8f 	vadd.f32	s1, s1, s30
 8016b56:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8016b5a:	ee29 faa7 	vmul.f32	s30, s19, s15
 8016b5e:	ee2a 2a82 	vmul.f32	s4, s21, s4
 8016b62:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 8016b66:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8016b6a:	ee68 2a22 	vmul.f32	s5, s16, s5
 8016b6e:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8016b72:	ee29 7a87 	vmul.f32	s14, s19, s14
 8016b76:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8016b7a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8016b7e:	ee7e ea81 	vadd.f32	s29, s29, s2
 8016b82:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8016b86:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8016b8a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8016b8e:	edc4 ea00 	vstr	s29, [r4]
 8016b92:	ee30 0a21 	vadd.f32	s0, s0, s3
 8016b96:	ed84 6a01 	vstr	s12, [r4, #4]
 8016b9a:	ee74 2a62 	vsub.f32	s5, s8, s5
 8016b9e:	edc1 0a00 	vstr	s1, [r1]
 8016ba2:	ee33 3a0f 	vadd.f32	s6, s6, s30
 8016ba6:	edc1 3a01 	vstr	s7, [r1, #4]
 8016baa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8016bae:	ed86 5a00 	vstr	s10, [r6]
 8016bb2:	edc6 4a01 	vstr	s9, [r6, #4]
 8016bb6:	4419      	add	r1, r3
 8016bb8:	ed80 0a00 	vstr	s0, [r0]
 8016bbc:	441c      	add	r4, r3
 8016bbe:	edc0 2a01 	vstr	s5, [r0, #4]
 8016bc2:	441e      	add	r6, r3
 8016bc4:	ed85 3a00 	vstr	s6, [r5]
 8016bc8:	4418      	add	r0, r3
 8016bca:	ed85 7a01 	vstr	s14, [r5, #4]
 8016bce:	441d      	add	r5, r3
 8016bd0:	f63f aee8 	bhi.w	80169a4 <arm_radix8_butterfly_f32+0x300>
 8016bd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016bd6:	9a04      	ldr	r2, [sp, #16]
 8016bd8:	3108      	adds	r1, #8
 8016bda:	3201      	adds	r2, #1
 8016bdc:	910c      	str	r1, [sp, #48]	; 0x30
 8016bde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016be0:	9204      	str	r2, [sp, #16]
 8016be2:	3108      	adds	r1, #8
 8016be4:	910b      	str	r1, [sp, #44]	; 0x2c
 8016be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016be8:	3108      	adds	r1, #8
 8016bea:	910a      	str	r1, [sp, #40]	; 0x28
 8016bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016bee:	3108      	adds	r1, #8
 8016bf0:	9109      	str	r1, [sp, #36]	; 0x24
 8016bf2:	9908      	ldr	r1, [sp, #32]
 8016bf4:	3108      	adds	r1, #8
 8016bf6:	9108      	str	r1, [sp, #32]
 8016bf8:	9907      	ldr	r1, [sp, #28]
 8016bfa:	3108      	adds	r1, #8
 8016bfc:	9107      	str	r1, [sp, #28]
 8016bfe:	9906      	ldr	r1, [sp, #24]
 8016c00:	3108      	adds	r1, #8
 8016c02:	9106      	str	r1, [sp, #24]
 8016c04:	9905      	ldr	r1, [sp, #20]
 8016c06:	3108      	adds	r1, #8
 8016c08:	9105      	str	r1, [sp, #20]
 8016c0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016c0c:	4291      	cmp	r1, r2
 8016c0e:	f47f ae74 	bne.w	80168fa <arm_radix8_butterfly_f32+0x256>
 8016c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c14:	468b      	mov	fp, r1
 8016c16:	00db      	lsls	r3, r3, #3
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	9310      	str	r3, [sp, #64]	; 0x40
 8016c1c:	e551      	b.n	80166c2 <arm_radix8_butterfly_f32+0x1e>
 8016c1e:	b015      	add	sp, #84	; 0x54
 8016c20:	ecbd 8b10 	vpop	{d8-d15}
 8016c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c28 <arm_rfft_init_f32>:
 8016c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c2a:	b294      	uxth	r4, r2
 8016c2c:	4f23      	ldr	r7, [pc, #140]	; (8016cbc <arm_rfft_init_f32+0x94>)
 8016c2e:	b2db      	uxtb	r3, r3
 8016c30:	4e23      	ldr	r6, [pc, #140]	; (8016cc0 <arm_rfft_init_f32+0x98>)
 8016c32:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8016c36:	460d      	mov	r5, r1
 8016c38:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8016c3c:	9906      	ldr	r1, [sp, #24]
 8016c3e:	7183      	strb	r3, [r0, #6]
 8016c40:	6004      	str	r4, [r0, #0]
 8016c42:	71c1      	strb	r1, [r0, #7]
 8016c44:	8082      	strh	r2, [r0, #4]
 8016c46:	e9c0 7603 	strd	r7, r6, [r0, #12]
 8016c4a:	d033      	beq.n	8016cb4 <arm_rfft_init_f32+0x8c>
 8016c4c:	d911      	bls.n	8016c72 <arm_rfft_init_f32+0x4a>
 8016c4e:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8016c52:	d026      	beq.n	8016ca2 <arm_rfft_init_f32+0x7a>
 8016c54:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8016c58:	d116      	bne.n	8016c88 <arm_rfft_init_f32+0x60>
 8016c5a:	2101      	movs	r1, #1
 8016c5c:	2400      	movs	r4, #0
 8016c5e:	6081      	str	r1, [r0, #8]
 8016c60:	6145      	str	r5, [r0, #20]
 8016c62:	4611      	mov	r1, r2
 8016c64:	4628      	mov	r0, r5
 8016c66:	b9b3      	cbnz	r3, 8016c96 <arm_rfft_init_f32+0x6e>
 8016c68:	461a      	mov	r2, r3
 8016c6a:	f000 f91b 	bl	8016ea4 <arm_cfft_radix4_init_f32>
 8016c6e:	4620      	mov	r0, r4
 8016c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c72:	2c80      	cmp	r4, #128	; 0x80
 8016c74:	d108      	bne.n	8016c88 <arm_rfft_init_f32+0x60>
 8016c76:	2140      	movs	r1, #64	; 0x40
 8016c78:	6145      	str	r5, [r0, #20]
 8016c7a:	2400      	movs	r4, #0
 8016c7c:	6081      	str	r1, [r0, #8]
 8016c7e:	4611      	mov	r1, r2
 8016c80:	4628      	mov	r0, r5
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d0f0      	beq.n	8016c68 <arm_rfft_init_f32+0x40>
 8016c86:	e006      	b.n	8016c96 <arm_rfft_init_f32+0x6e>
 8016c88:	6145      	str	r5, [r0, #20]
 8016c8a:	f04f 34ff 	mov.w	r4, #4294967295
 8016c8e:	4611      	mov	r1, r2
 8016c90:	4628      	mov	r0, r5
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d0e8      	beq.n	8016c68 <arm_rfft_init_f32+0x40>
 8016c96:	2300      	movs	r3, #0
 8016c98:	2201      	movs	r2, #1
 8016c9a:	f000 f903 	bl	8016ea4 <arm_cfft_radix4_init_f32>
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ca2:	2104      	movs	r1, #4
 8016ca4:	6145      	str	r5, [r0, #20]
 8016ca6:	2400      	movs	r4, #0
 8016ca8:	6081      	str	r1, [r0, #8]
 8016caa:	4611      	mov	r1, r2
 8016cac:	4628      	mov	r0, r5
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d0da      	beq.n	8016c68 <arm_rfft_init_f32+0x40>
 8016cb2:	e7f0      	b.n	8016c96 <arm_rfft_init_f32+0x6e>
 8016cb4:	2110      	movs	r1, #16
 8016cb6:	2400      	movs	r4, #0
 8016cb8:	6081      	str	r1, [r0, #8]
 8016cba:	e7d1      	b.n	8016c60 <arm_rfft_init_f32+0x38>
 8016cbc:	0804b530 	.word	0x0804b530
 8016cc0:	08053530 	.word	0x08053530

08016cc4 <arm_split_rfft_f32>:
 8016cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc8:	e9dd c706 	ldrd	ip, r7, [sp, #24]
 8016ccc:	010c      	lsls	r4, r1, #4
 8016cce:	00ff      	lsls	r7, r7, #3
 8016cd0:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8016cd4:	3901      	subs	r1, #1
 8016cd6:	443a      	add	r2, r7
 8016cd8:	443b      	add	r3, r7
 8016cda:	d046      	beq.n	8016d6a <arm_split_rfft_f32+0xa6>
 8016cdc:	3c0c      	subs	r4, #12
 8016cde:	f1ae 050c 	sub.w	r5, lr, #12
 8016ce2:	f100 0810 	add.w	r8, r0, #16
 8016ce6:	f10c 0610 	add.w	r6, ip, #16
 8016cea:	4464      	add	r4, ip
 8016cec:	4405      	add	r5, r0
 8016cee:	ed92 7a00 	vldr	s14, [r2]
 8016cf2:	3901      	subs	r1, #1
 8016cf4:	ed92 5a01 	vldr	s10, [r2, #4]
 8016cf8:	f108 0808 	add.w	r8, r8, #8
 8016cfc:	ed58 5a03 	vldr	s11, [r8, #-12]
 8016d00:	443a      	add	r2, r7
 8016d02:	ed18 6a04 	vldr	s12, [r8, #-16]
 8016d06:	f1a5 0508 	sub.w	r5, r5, #8
 8016d0a:	ee65 7a87 	vmul.f32	s15, s11, s14
 8016d0e:	edd5 4a04 	vldr	s9, [r5, #16]
 8016d12:	ee66 3a05 	vmul.f32	s7, s12, s10
 8016d16:	ed93 4a00 	vldr	s8, [r3]
 8016d1a:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8016d1e:	edd5 6a03 	vldr	s13, [r5, #12]
 8016d22:	ee64 4a84 	vmul.f32	s9, s9, s8
 8016d26:	443b      	add	r3, r7
 8016d28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016d2c:	f106 0608 	add.w	r6, r6, #8
 8016d30:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016d34:	f1a4 0408 	sub.w	r4, r4, #8
 8016d38:	ee25 7a85 	vmul.f32	s14, s11, s10
 8016d3c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8016d40:	ee26 5a85 	vmul.f32	s10, s13, s10
 8016d44:	ee36 6a47 	vsub.f32	s12, s12, s14
 8016d48:	ee26 7a84 	vmul.f32	s14, s13, s8
 8016d4c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016d50:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016d54:	eef1 6a67 	vneg.f32	s13, s15
 8016d58:	ed46 7a03 	vstr	s15, [r6, #-12]
 8016d5c:	ed06 7a04 	vstr	s14, [r6, #-16]
 8016d60:	edc4 6a04 	vstr	s13, [r4, #16]
 8016d64:	ed84 7a03 	vstr	s14, [r4, #12]
 8016d68:	d1c1      	bne.n	8016cee <arm_split_rfft_f32+0x2a>
 8016d6a:	ed90 7a01 	vldr	s14, [r0, #4]
 8016d6e:	44e6      	add	lr, ip
 8016d70:	edd0 7a00 	vldr	s15, [r0]
 8016d74:	2300      	movs	r3, #0
 8016d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d7a:	f8ce 3004 	str.w	r3, [lr, #4]
 8016d7e:	edce 7a00 	vstr	s15, [lr]
 8016d82:	edd0 7a00 	vldr	s15, [r0]
 8016d86:	ed90 7a01 	vldr	s14, [r0, #4]
 8016d8a:	f8cc 3004 	str.w	r3, [ip, #4]
 8016d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016d92:	edcc 7a00 	vstr	s15, [ip]
 8016d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d9a:	bf00      	nop

08016d9c <arm_rfft_f32>:
 8016d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016da0:	7983      	ldrb	r3, [r0, #6]
 8016da2:	b082      	sub	sp, #8
 8016da4:	4604      	mov	r4, r0
 8016da6:	460f      	mov	r7, r1
 8016da8:	2b01      	cmp	r3, #1
 8016daa:	4616      	mov	r6, r2
 8016dac:	6945      	ldr	r5, [r0, #20]
 8016dae:	d014      	beq.n	8016dda <arm_rfft_f32+0x3e>
 8016db0:	89ab      	ldrh	r3, [r5, #12]
 8016db2:	4608      	mov	r0, r1
 8016db4:	686a      	ldr	r2, [r5, #4]
 8016db6:	8829      	ldrh	r1, [r5, #0]
 8016db8:	f000 f8d2 	bl	8016f60 <arm_radix4_butterfly_f32>
 8016dbc:	79e3      	ldrb	r3, [r4, #7]
 8016dbe:	2b01      	cmp	r3, #1
 8016dc0:	d069      	beq.n	8016e96 <arm_rfft_f32+0xfa>
 8016dc2:	68a3      	ldr	r3, [r4, #8]
 8016dc4:	4638      	mov	r0, r7
 8016dc6:	e9cd 6300 	strd	r6, r3, [sp]
 8016dca:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8016dce:	88a1      	ldrh	r1, [r4, #4]
 8016dd0:	f7ff ff78 	bl	8016cc4 <arm_split_rfft_f32>
 8016dd4:	b002      	add	sp, #8
 8016dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dda:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8016dde:	68c3      	ldr	r3, [r0, #12]
 8016de0:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 8016de4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016de8:	6882      	ldr	r2, [r0, #8]
 8016dea:	f1bc 0f00 	cmp.w	ip, #0
 8016dee:	d03e      	beq.n	8016e6e <arm_rfft_f32+0xd2>
 8016df0:	3904      	subs	r1, #4
 8016df2:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8016df6:	f107 0008 	add.w	r0, r7, #8
 8016dfa:	f106 0208 	add.w	r2, r6, #8
 8016dfe:	4439      	add	r1, r7
 8016e00:	ed93 7a01 	vldr	s14, [r3, #4]
 8016e04:	f1bc 0c01 	subs.w	ip, ip, #1
 8016e08:	ed93 5a00 	vldr	s10, [r3]
 8016e0c:	f100 0008 	add.w	r0, r0, #8
 8016e10:	ed50 7a03 	vldr	s15, [r0, #-12]
 8016e14:	4443      	add	r3, r8
 8016e16:	ed10 4a04 	vldr	s8, [r0, #-16]
 8016e1a:	f1a1 0108 	sub.w	r1, r1, #8
 8016e1e:	edd1 5a04 	vldr	s11, [r1, #16]
 8016e22:	ee25 6a27 	vmul.f32	s12, s10, s15
 8016e26:	ee64 3a47 	vnmul.f32	s7, s8, s14
 8016e2a:	edde 6a00 	vldr	s13, [lr]
 8016e2e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8016e32:	edd1 4a03 	vldr	s9, [r1, #12]
 8016e36:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8016e3a:	44c6      	add	lr, r8
 8016e3c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8016e40:	f102 0208 	add.w	r2, r2, #8
 8016e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016e48:	ee36 6a23 	vadd.f32	s12, s12, s7
 8016e4c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8016e50:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016e54:	ee36 6a65 	vsub.f32	s12, s12, s11
 8016e58:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016e64:	ed42 7a04 	vstr	s15, [r2, #-16]
 8016e68:	ed02 7a03 	vstr	s14, [r2, #-12]
 8016e6c:	d1c8      	bne.n	8016e00 <arm_rfft_f32+0x64>
 8016e6e:	89ab      	ldrh	r3, [r5, #12]
 8016e70:	4630      	mov	r0, r6
 8016e72:	ed95 0a04 	vldr	s0, [r5, #16]
 8016e76:	686a      	ldr	r2, [r5, #4]
 8016e78:	8829      	ldrh	r1, [r5, #0]
 8016e7a:	f000 fa17 	bl	80172ac <arm_radix4_butterfly_inverse_f32>
 8016e7e:	79e3      	ldrb	r3, [r4, #7]
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	d1a7      	bne.n	8016dd4 <arm_rfft_f32+0x38>
 8016e84:	4630      	mov	r0, r6
 8016e86:	68ab      	ldr	r3, [r5, #8]
 8016e88:	89ea      	ldrh	r2, [r5, #14]
 8016e8a:	8829      	ldrh	r1, [r5, #0]
 8016e8c:	b002      	add	sp, #8
 8016e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e92:	f000 bbc7 	b.w	8017624 <arm_bitreversal_f32>
 8016e96:	68ab      	ldr	r3, [r5, #8]
 8016e98:	4638      	mov	r0, r7
 8016e9a:	89ea      	ldrh	r2, [r5, #14]
 8016e9c:	8829      	ldrh	r1, [r5, #0]
 8016e9e:	f000 fbc1 	bl	8017624 <arm_bitreversal_f32>
 8016ea2:	e78e      	b.n	8016dc2 <arm_rfft_f32+0x26>

08016ea4 <arm_cfft_radix4_init_f32>:
 8016ea4:	b410      	push	{r4}
 8016ea6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8016eaa:	4604      	mov	r4, r0
 8016eac:	4826      	ldr	r0, [pc, #152]	; (8016f48 <arm_cfft_radix4_init_f32+0xa4>)
 8016eae:	70a2      	strb	r2, [r4, #2]
 8016eb0:	70e3      	strb	r3, [r4, #3]
 8016eb2:	8021      	strh	r1, [r4, #0]
 8016eb4:	6060      	str	r0, [r4, #4]
 8016eb6:	d027      	beq.n	8016f08 <arm_cfft_radix4_init_f32+0x64>
 8016eb8:	d911      	bls.n	8016ede <arm_cfft_radix4_init_f32+0x3a>
 8016eba:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016ebe:	d02f      	beq.n	8016f20 <arm_cfft_radix4_init_f32+0x7c>
 8016ec0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8016ec4:	d11b      	bne.n	8016efe <arm_cfft_radix4_init_f32+0x5a>
 8016ec6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8016eca:	4a20      	ldr	r2, [pc, #128]	; (8016f4c <arm_cfft_radix4_init_f32+0xa8>)
 8016ecc:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8016ed6:	6123      	str	r3, [r4, #16]
 8016ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016edc:	4770      	bx	lr
 8016ede:	2910      	cmp	r1, #16
 8016ee0:	d028      	beq.n	8016f34 <arm_cfft_radix4_init_f32+0x90>
 8016ee2:	2940      	cmp	r1, #64	; 0x40
 8016ee4:	d10b      	bne.n	8016efe <arm_cfft_radix4_init_f32+0x5a>
 8016ee6:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 8016eea:	f04f 1140 	mov.w	r1, #4194368	; 0x400040
 8016eee:	4a18      	ldr	r2, [pc, #96]	; (8016f50 <arm_cfft_radix4_init_f32+0xac>)
 8016ef0:	2000      	movs	r0, #0
 8016ef2:	6123      	str	r3, [r4, #16]
 8016ef4:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8016ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016efc:	4770      	bx	lr
 8016efe:	f04f 30ff 	mov.w	r0, #4294967295
 8016f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f06:	4770      	bx	lr
 8016f08:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8016f0c:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 8016f10:	4a10      	ldr	r2, [pc, #64]	; (8016f54 <arm_cfft_radix4_init_f32+0xb0>)
 8016f12:	2000      	movs	r0, #0
 8016f14:	6123      	str	r3, [r4, #16]
 8016f16:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8016f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f1e:	4770      	bx	lr
 8016f20:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 8016f24:	4a0c      	ldr	r2, [pc, #48]	; (8016f58 <arm_cfft_radix4_init_f32+0xb4>)
 8016f26:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8016f2a:	2000      	movs	r0, #0
 8016f2c:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8016f30:	6123      	str	r3, [r4, #16]
 8016f32:	e7d1      	b.n	8016ed8 <arm_cfft_radix4_init_f32+0x34>
 8016f34:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 8016f38:	4a08      	ldr	r2, [pc, #32]	; (8016f5c <arm_cfft_radix4_init_f32+0xb8>)
 8016f3a:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8016f3e:	2000      	movs	r0, #0
 8016f40:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8016f44:	6123      	str	r3, [r4, #16]
 8016f46:	e7c7      	b.n	8016ed8 <arm_cfft_radix4_init_f32+0x34>
 8016f48:	08062ab4 	.word	0x08062ab4
 8016f4c:	08040330 	.word	0x08040330
 8016f50:	080403ae 	.word	0x080403ae
 8016f54:	0804034e 	.word	0x0804034e
 8016f58:	08040336 	.word	0x08040336
 8016f5c:	0804052e 	.word	0x0804052e

08016f60 <arm_radix4_butterfly_f32>:
 8016f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f64:	4684      	mov	ip, r0
 8016f66:	1d14      	adds	r4, r2, #4
 8016f68:	088a      	lsrs	r2, r1, #2
 8016f6a:	468a      	mov	sl, r1
 8016f6c:	4626      	mov	r6, r4
 8016f6e:	4625      	mov	r5, r4
 8016f70:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8016f74:	4693      	mov	fp, r2
 8016f76:	ed2d 8b06 	vpush	{d8-d10}
 8016f7a:	b08d      	sub	sp, #52	; 0x34
 8016f7c:	9202      	str	r2, [sp, #8]
 8016f7e:	4662      	mov	r2, ip
 8016f80:	9009      	str	r0, [sp, #36]	; 0x24
 8016f82:	4618      	mov	r0, r3
 8016f84:	444a      	add	r2, r9
 8016f86:	9301      	str	r3, [sp, #4]
 8016f88:	eb00 0740 	add.w	r7, r0, r0, lsl #1
 8016f8c:	4663      	mov	r3, ip
 8016f8e:	eb02 0109 	add.w	r1, r2, r9
 8016f92:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8016f96:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8016f9a:	4690      	mov	r8, r2
 8016f9c:	00ff      	lsls	r7, r7, #3
 8016f9e:	eb01 0009 	add.w	r0, r1, r9
 8016fa2:	940a      	str	r4, [sp, #40]	; 0x28
 8016fa4:	ed93 7a00 	vldr	s14, [r3]
 8016fa8:	3308      	adds	r3, #8
 8016faa:	ed91 6a00 	vldr	s12, [r1]
 8016fae:	3208      	adds	r2, #8
 8016fb0:	edd0 6a00 	vldr	s13, [r0]
 8016fb4:	3108      	adds	r1, #8
 8016fb6:	ed11 2a01 	vldr	s4, [r1, #-4]
 8016fba:	ee37 4a06 	vadd.f32	s8, s14, s12
 8016fbe:	edd0 2a01 	vldr	s5, [r0, #4]
 8016fc2:	ee37 7a46 	vsub.f32	s14, s14, s12
 8016fc6:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016fca:	3008      	adds	r0, #8
 8016fcc:	ed13 6a01 	vldr	s12, [r3, #-4]
 8016fd0:	ed52 5a01 	vldr	s11, [r2, #-4]
 8016fd4:	ee37 3aa6 	vadd.f32	s6, s15, s13
 8016fd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016fdc:	edd4 3a00 	vldr	s7, [r4]
 8016fe0:	ee35 5aa2 	vadd.f32	s10, s11, s5
 8016fe4:	ed54 4a01 	vldr	s9, [r4, #-4]
 8016fe8:	ee76 6a02 	vadd.f32	s13, s12, s4
 8016fec:	4474      	add	r4, lr
 8016fee:	ee36 6a42 	vsub.f32	s12, s12, s4
 8016ff2:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8016ff6:	ee34 2a03 	vadd.f32	s4, s8, s6
 8016ffa:	ee76 2a85 	vadd.f32	s5, s13, s10
 8016ffe:	ee34 4a43 	vsub.f32	s8, s8, s6
 8017002:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8017006:	ed03 2a02 	vstr	s4, [r3, #-8]
 801700a:	ee37 3a25 	vadd.f32	s6, s14, s11
 801700e:	ed43 2a01 	vstr	s5, [r3, #-4]
 8017012:	ee37 7a65 	vsub.f32	s14, s14, s11
 8017016:	ed15 2a01 	vldr	s4, [r5, #-4]
 801701a:	ee76 5a67 	vsub.f32	s11, s12, s15
 801701e:	ed95 5a00 	vldr	s10, [r5]
 8017022:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017026:	edd6 2a00 	vldr	s5, [r6]
 801702a:	ed16 6a01 	vldr	s12, [r6, #-4]
 801702e:	ee63 1a02 	vmul.f32	s3, s6, s4
 8017032:	ee23 3a05 	vmul.f32	s6, s6, s10
 8017036:	4598      	cmp	r8, r3
 8017038:	ee25 5a85 	vmul.f32	s10, s11, s10
 801703c:	4465      	add	r5, ip
 801703e:	ee65 5a82 	vmul.f32	s11, s11, s4
 8017042:	443e      	add	r6, r7
 8017044:	ee24 2a84 	vmul.f32	s4, s9, s8
 8017048:	ee64 4aa6 	vmul.f32	s9, s9, s13
 801704c:	ee23 4a84 	vmul.f32	s8, s7, s8
 8017050:	ee63 6aa6 	vmul.f32	s13, s7, s13
 8017054:	ee67 3a06 	vmul.f32	s7, s14, s12
 8017058:	ee27 6a86 	vmul.f32	s12, s15, s12
 801705c:	ee27 7a22 	vmul.f32	s14, s14, s5
 8017060:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8017064:	ee35 5a21 	vadd.f32	s10, s10, s3
 8017068:	ee75 5ac3 	vsub.f32	s11, s11, s6
 801706c:	ee76 6a82 	vadd.f32	s13, s13, s4
 8017070:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8017074:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017078:	ee36 7a47 	vsub.f32	s14, s12, s14
 801707c:	ed42 6a02 	vstr	s13, [r2, #-8]
 8017080:	ed42 4a01 	vstr	s9, [r2, #-4]
 8017084:	ed01 5a02 	vstr	s10, [r1, #-8]
 8017088:	ed41 5a01 	vstr	s11, [r1, #-4]
 801708c:	ed40 7a02 	vstr	s15, [r0, #-8]
 8017090:	ed00 7a01 	vstr	s14, [r0, #-4]
 8017094:	d186      	bne.n	8016fa4 <arm_radix4_butterfly_f32+0x44>
 8017096:	9b01      	ldr	r3, [sp, #4]
 8017098:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801709c:	009b      	lsls	r3, r3, #2
 801709e:	2a04      	cmp	r2, #4
 80170a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80170a2:	b29b      	uxth	r3, r3
 80170a4:	9307      	str	r3, [sp, #28]
 80170a6:	f240 80b5 	bls.w	8017214 <arm_radix4_butterfly_f32+0x2b4>
 80170aa:	9807      	ldr	r0, [sp, #28]
 80170ac:	9208      	str	r2, [sp, #32]
 80170ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80170b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80170b4:	ea4f 029b 	mov.w	r2, fp, lsr #2
 80170b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80170ba:	00db      	lsls	r3, r3, #3
 80170bc:	46a0      	mov	r8, r4
 80170be:	9202      	str	r2, [sp, #8]
 80170c0:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 80170c4:	9306      	str	r3, [sp, #24]
 80170c6:	00c3      	lsls	r3, r0, #3
 80170c8:	00d2      	lsls	r2, r2, #3
 80170ca:	46a6      	mov	lr, r4
 80170cc:	9305      	str	r3, [sp, #20]
 80170ce:	2700      	movs	r7, #0
 80170d0:	0103      	lsls	r3, r0, #4
 80170d2:	9401      	str	r4, [sp, #4]
 80170d4:	9203      	str	r2, [sp, #12]
 80170d6:	9304      	str	r3, [sp, #16]
 80170d8:	9b01      	ldr	r3, [sp, #4]
 80170da:	1d34      	adds	r4, r6, #4
 80170dc:	9a03      	ldr	r2, [sp, #12]
 80170de:	4630      	mov	r0, r6
 80170e0:	ed13 0a01 	vldr	s0, [r3, #-4]
 80170e4:	463d      	mov	r5, r7
 80170e6:	1991      	adds	r1, r2, r6
 80170e8:	edd3 0a00 	vldr	s1, [r3]
 80170ec:	4462      	add	r2, ip
 80170ee:	ed1e 1a01 	vldr	s2, [lr, #-4]
 80170f2:	edde 1a00 	vldr	s3, [lr]
 80170f6:	4663      	mov	r3, ip
 80170f8:	ed18 2a01 	vldr	s4, [r8, #-4]
 80170fc:	edd8 2a00 	vldr	s5, [r8]
 8017100:	ed14 7a01 	vldr	s14, [r4, #-4]
 8017104:	445d      	add	r5, fp
 8017106:	ed93 6a00 	vldr	s12, [r3]
 801710a:	edd2 6a00 	vldr	s13, [r2]
 801710e:	45aa      	cmp	sl, r5
 8017110:	edd1 7a00 	vldr	s15, [r1]
 8017114:	ee77 3a06 	vadd.f32	s7, s14, s12
 8017118:	edd0 5a01 	vldr	s11, [r0, #4]
 801711c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8017120:	ed91 5a01 	vldr	s10, [r1, #4]
 8017124:	ee37 9aa6 	vadd.f32	s18, s15, s13
 8017128:	ed93 6a01 	vldr	s12, [r3, #4]
 801712c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017130:	edd2 6a01 	vldr	s13, [r2, #4]
 8017134:	ee75 4a86 	vadd.f32	s9, s11, s12
 8017138:	ee75 8a26 	vadd.f32	s17, s10, s13
 801713c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8017140:	ee35 5a66 	vsub.f32	s10, s10, s13
 8017144:	ee33 3ac9 	vsub.f32	s6, s7, s18
 8017148:	ee75 6ae7 	vsub.f32	s13, s11, s15
 801714c:	ee37 4a05 	vadd.f32	s8, s14, s10
 8017150:	ee34 6ae8 	vsub.f32	s12, s9, s17
 8017154:	ee37 7a45 	vsub.f32	s14, s14, s10
 8017158:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801715c:	ee61 aa03 	vmul.f32	s21, s2, s6
 8017160:	ee21 8a86 	vmul.f32	s16, s3, s12
 8017164:	ee20 aa04 	vmul.f32	s20, s0, s8
 8017168:	ee20 5aa6 	vmul.f32	s10, s1, s13
 801716c:	ee62 9a07 	vmul.f32	s19, s4, s14
 8017170:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8017174:	ee21 3a83 	vmul.f32	s6, s3, s6
 8017178:	ee21 6a06 	vmul.f32	s12, s2, s12
 801717c:	ee20 4a84 	vmul.f32	s8, s1, s8
 8017180:	ee60 6a26 	vmul.f32	s13, s0, s13
 8017184:	ee22 7a87 	vmul.f32	s14, s5, s14
 8017188:	ee62 7a27 	vmul.f32	s15, s4, s15
 801718c:	ee73 3a89 	vadd.f32	s7, s7, s18
 8017190:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8017194:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8017198:	ee36 6a43 	vsub.f32	s12, s12, s6
 801719c:	ed44 3a01 	vstr	s7, [r4, #-4]
 80171a0:	ee35 5a0a 	vadd.f32	s10, s10, s20
 80171a4:	edc0 4a01 	vstr	s9, [r0, #4]
 80171a8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80171ac:	ed81 8a00 	vstr	s16, [r1]
 80171b0:	ee75 5aa9 	vadd.f32	s11, s11, s19
 80171b4:	ed81 6a01 	vstr	s12, [r1, #4]
 80171b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80171bc:	ed83 5a00 	vstr	s10, [r3]
 80171c0:	edc3 6a01 	vstr	s13, [r3, #4]
 80171c4:	444c      	add	r4, r9
 80171c6:	edc2 5a00 	vstr	s11, [r2]
 80171ca:	4448      	add	r0, r9
 80171cc:	edc2 7a01 	vstr	s15, [r2, #4]
 80171d0:	4449      	add	r1, r9
 80171d2:	444b      	add	r3, r9
 80171d4:	444a      	add	r2, r9
 80171d6:	d893      	bhi.n	8017100 <arm_radix4_butterfly_f32+0x1a0>
 80171d8:	9b01      	ldr	r3, [sp, #4]
 80171da:	3701      	adds	r7, #1
 80171dc:	9a05      	ldr	r2, [sp, #20]
 80171de:	3608      	adds	r6, #8
 80171e0:	f10c 0c08 	add.w	ip, ip, #8
 80171e4:	4413      	add	r3, r2
 80171e6:	9301      	str	r3, [sp, #4]
 80171e8:	9b04      	ldr	r3, [sp, #16]
 80171ea:	449e      	add	lr, r3
 80171ec:	9b06      	ldr	r3, [sp, #24]
 80171ee:	4498      	add	r8, r3
 80171f0:	9b02      	ldr	r3, [sp, #8]
 80171f2:	42bb      	cmp	r3, r7
 80171f4:	f47f af70 	bne.w	80170d8 <arm_radix4_butterfly_f32+0x178>
 80171f8:	9a08      	ldr	r2, [sp, #32]
 80171fa:	469b      	mov	fp, r3
 80171fc:	9b07      	ldr	r3, [sp, #28]
 80171fe:	0892      	lsrs	r2, r2, #2
 8017200:	009b      	lsls	r3, r3, #2
 8017202:	2a04      	cmp	r2, #4
 8017204:	9208      	str	r2, [sp, #32]
 8017206:	b29b      	uxth	r3, r3
 8017208:	9307      	str	r3, [sp, #28]
 801720a:	d903      	bls.n	8017214 <arm_radix4_butterfly_f32+0x2b4>
 801720c:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8017210:	4618      	mov	r0, r3
 8017212:	e74c      	b.n	80170ae <arm_radix4_butterfly_f32+0x14e>
 8017214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017218:	3320      	adds	r3, #32
 801721a:	ed53 7a04 	vldr	s15, [r3, #-16]
 801721e:	3a01      	subs	r2, #1
 8017220:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8017224:	f103 0320 	add.w	r3, r3, #32
 8017228:	ed53 4a0a 	vldr	s9, [r3, #-40]	; 0xffffffd8
 801722c:	ed53 5a09 	vldr	s11, [r3, #-36]	; 0xffffffdc
 8017230:	ee37 5a27 	vadd.f32	s10, s14, s15
 8017234:	ed53 3a0b 	vldr	s7, [r3, #-44]	; 0xffffffd4
 8017238:	ee37 7a67 	vsub.f32	s14, s14, s15
 801723c:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8017240:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8017244:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8017248:	ee36 4aa4 	vadd.f32	s8, s13, s9
 801724c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017250:	ee76 4a65 	vsub.f32	s9, s12, s11
 8017254:	ee36 6a25 	vadd.f32	s12, s12, s11
 8017258:	ee77 5aa3 	vadd.f32	s11, s15, s7
 801725c:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8017260:	ee75 3a04 	vadd.f32	s7, s10, s8
 8017264:	ee35 5a44 	vsub.f32	s10, s10, s8
 8017268:	ee37 4a24 	vadd.f32	s8, s14, s9
 801726c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8017270:	ed43 3a10 	vstr	s7, [r3, #-64]	; 0xffffffc0
 8017274:	ee75 4a86 	vadd.f32	s9, s11, s12
 8017278:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 801727c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8017280:	ed03 4a0c 	vstr	s8, [r3, #-48]	; 0xffffffd0
 8017284:	ee77 5ae6 	vsub.f32	s11, s15, s13
 8017288:	ed03 7a0a 	vstr	s14, [r3, #-40]	; 0xffffffd8
 801728c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017290:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8017294:	ed03 6a0d 	vstr	s12, [r3, #-52]	; 0xffffffcc
 8017298:	ed43 5a0b 	vstr	s11, [r3, #-44]	; 0xffffffd4
 801729c:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 80172a0:	d1bb      	bne.n	801721a <arm_radix4_butterfly_f32+0x2ba>
 80172a2:	b00d      	add	sp, #52	; 0x34
 80172a4:	ecbd 8b06 	vpop	{d8-d10}
 80172a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080172ac <arm_radix4_butterfly_inverse_f32>:
 80172ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b0:	468a      	mov	sl, r1
 80172b2:	1d11      	adds	r1, r2, #4
 80172b4:	461f      	mov	r7, r3
 80172b6:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 80172ba:	ea4f 029a 	mov.w	r2, sl, lsr #2
 80172be:	468c      	mov	ip, r1
 80172c0:	460e      	mov	r6, r1
 80172c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80172c6:	4614      	mov	r4, r2
 80172c8:	4665      	mov	r5, ip
 80172ca:	ed2d 8b08 	vpush	{d8-d11}
 80172ce:	b08d      	sub	sp, #52	; 0x34
 80172d0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80172d4:	46a3      	mov	fp, r4
 80172d6:	9202      	str	r2, [sp, #8]
 80172d8:	0112      	lsls	r2, r2, #4
 80172da:	9301      	str	r3, [sp, #4]
 80172dc:	4603      	mov	r3, r0
 80172de:	910a      	str	r1, [sp, #40]	; 0x28
 80172e0:	4410      	add	r0, r2
 80172e2:	ebc4 7144 	rsb	r1, r4, r4, lsl #29
 80172e6:	9309      	str	r3, [sp, #36]	; 0x24
 80172e8:	4664      	mov	r4, ip
 80172ea:	eb03 0809 	add.w	r8, r3, r9
 80172ee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80172f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172f4:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 80172f8:	440a      	add	r2, r1
 80172fa:	00ff      	lsls	r7, r7, #3
 80172fc:	ed91 7a00 	vldr	s14, [r1]
 8017300:	3308      	adds	r3, #8
 8017302:	edd2 4a00 	vldr	s9, [r2]
 8017306:	3108      	adds	r1, #8
 8017308:	ed53 7a02 	vldr	s15, [r3, #-8]
 801730c:	3008      	adds	r0, #8
 801730e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8017312:	ee37 3a24 	vadd.f32	s6, s14, s9
 8017316:	ed10 2a01 	vldr	s4, [r0, #-4]
 801731a:	ee77 4a64 	vsub.f32	s9, s14, s9
 801731e:	edd2 2a01 	vldr	s5, [r2, #4]
 8017322:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8017326:	ed13 7a01 	vldr	s14, [r3, #-4]
 801732a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801732e:	ed11 4a01 	vldr	s8, [r1, #-4]
 8017332:	3208      	adds	r2, #8
 8017334:	ee77 6a02 	vadd.f32	s13, s14, s4
 8017338:	ed54 3a01 	vldr	s7, [r4, #-4]
 801733c:	ee34 6a22 	vadd.f32	s12, s8, s5
 8017340:	edd4 5a00 	vldr	s11, [r4]
 8017344:	ee34 4a62 	vsub.f32	s8, s8, s5
 8017348:	4464      	add	r4, ip
 801734a:	ee37 7a42 	vsub.f32	s14, s14, s4
 801734e:	ee76 2a86 	vadd.f32	s5, s13, s12
 8017352:	ee35 2a03 	vadd.f32	s4, s10, s6
 8017356:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801735a:	ee35 5a43 	vsub.f32	s10, s10, s6
 801735e:	ed43 2a01 	vstr	s5, [r3, #-4]
 8017362:	ee37 6ac4 	vsub.f32	s12, s15, s8
 8017366:	ed03 2a02 	vstr	s4, [r3, #-8]
 801736a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801736e:	ed15 2a01 	vldr	s4, [r5, #-4]
 8017372:	ee34 4a87 	vadd.f32	s8, s9, s14
 8017376:	ed95 3a00 	vldr	s6, [r5]
 801737a:	ee37 7a64 	vsub.f32	s14, s14, s9
 801737e:	edd6 1a00 	vldr	s3, [r6]
 8017382:	ed56 4a01 	vldr	s9, [r6, #-4]
 8017386:	ee66 2a02 	vmul.f32	s5, s12, s4
 801738a:	ee26 6a03 	vmul.f32	s12, s12, s6
 801738e:	4598      	cmp	r8, r3
 8017390:	ee24 3a03 	vmul.f32	s6, s8, s6
 8017394:	443d      	add	r5, r7
 8017396:	ee24 4a02 	vmul.f32	s8, s8, s4
 801739a:	4476      	add	r6, lr
 801739c:	ee23 2a85 	vmul.f32	s4, s7, s10
 80173a0:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80173a4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80173a8:	ee65 5a85 	vmul.f32	s11, s11, s10
 80173ac:	ee27 5aa4 	vmul.f32	s10, s15, s9
 80173b0:	ee67 4a24 	vmul.f32	s9, s14, s9
 80173b4:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80173b8:	ee27 7a21 	vmul.f32	s14, s14, s3
 80173bc:	ee36 6a04 	vadd.f32	s12, s12, s8
 80173c0:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80173c4:	ee32 4a66 	vsub.f32	s8, s4, s13
 80173c8:	ee35 7a47 	vsub.f32	s14, s10, s14
 80173cc:	ee75 6aa3 	vadd.f32	s13, s11, s7
 80173d0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80173d4:	ed01 4a02 	vstr	s8, [r1, #-8]
 80173d8:	ed41 6a01 	vstr	s13, [r1, #-4]
 80173dc:	ed00 3a02 	vstr	s6, [r0, #-8]
 80173e0:	ed00 6a01 	vstr	s12, [r0, #-4]
 80173e4:	ed02 7a02 	vstr	s14, [r2, #-8]
 80173e8:	ed42 7a01 	vstr	s15, [r2, #-4]
 80173ec:	d186      	bne.n	80172fc <arm_radix4_butterfly_inverse_f32+0x50>
 80173ee:	9b01      	ldr	r3, [sp, #4]
 80173f0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	2a04      	cmp	r2, #4
 80173f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	9307      	str	r3, [sp, #28]
 80173fe:	f240 80b5 	bls.w	801756c <arm_radix4_butterfly_inverse_f32+0x2c0>
 8017402:	9807      	ldr	r0, [sp, #28]
 8017404:	9208      	str	r2, [sp, #32]
 8017406:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801740a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801740c:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8017410:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017412:	00db      	lsls	r3, r3, #3
 8017414:	46a0      	mov	r8, r4
 8017416:	9202      	str	r2, [sp, #8]
 8017418:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 801741c:	9306      	str	r3, [sp, #24]
 801741e:	00c3      	lsls	r3, r0, #3
 8017420:	00d2      	lsls	r2, r2, #3
 8017422:	46a6      	mov	lr, r4
 8017424:	9305      	str	r3, [sp, #20]
 8017426:	2700      	movs	r7, #0
 8017428:	0103      	lsls	r3, r0, #4
 801742a:	9401      	str	r4, [sp, #4]
 801742c:	9203      	str	r2, [sp, #12]
 801742e:	9304      	str	r3, [sp, #16]
 8017430:	9b01      	ldr	r3, [sp, #4]
 8017432:	1d34      	adds	r4, r6, #4
 8017434:	9a03      	ldr	r2, [sp, #12]
 8017436:	4630      	mov	r0, r6
 8017438:	ed13 1a01 	vldr	s2, [r3, #-4]
 801743c:	463d      	mov	r5, r7
 801743e:	1991      	adds	r1, r2, r6
 8017440:	edd3 1a00 	vldr	s3, [r3]
 8017444:	4462      	add	r2, ip
 8017446:	ed1e 2a01 	vldr	s4, [lr, #-4]
 801744a:	edde 2a00 	vldr	s5, [lr]
 801744e:	4663      	mov	r3, ip
 8017450:	ed18 3a01 	vldr	s6, [r8, #-4]
 8017454:	edd8 3a00 	vldr	s7, [r8]
 8017458:	ed54 7a01 	vldr	s15, [r4, #-4]
 801745c:	445d      	add	r5, fp
 801745e:	ed93 6a00 	vldr	s12, [r3]
 8017462:	edd2 6a00 	vldr	s13, [r2]
 8017466:	45aa      	cmp	sl, r5
 8017468:	edd1 5a00 	vldr	s11, [r1]
 801746c:	ee37 4a86 	vadd.f32	s8, s15, s12
 8017470:	ed90 7a01 	vldr	s14, [r0, #4]
 8017474:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017478:	ed91 5a01 	vldr	s10, [r1, #4]
 801747c:	ee35 9aa6 	vadd.f32	s18, s11, s13
 8017480:	ed93 6a01 	vldr	s12, [r3, #4]
 8017484:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8017488:	edd2 6a01 	vldr	s13, [r2, #4]
 801748c:	ee77 4a06 	vadd.f32	s9, s14, s12
 8017490:	ee75 9a26 	vadd.f32	s19, s10, s13
 8017494:	ee37 7a46 	vsub.f32	s14, s14, s12
 8017498:	ee35 5a66 	vsub.f32	s10, s10, s13
 801749c:	ee34 6a49 	vsub.f32	s12, s8, s18
 80174a0:	ee74 0ae9 	vsub.f32	s1, s9, s19
 80174a4:	ee77 6ac5 	vsub.f32	s13, s15, s10
 80174a8:	ee77 7a85 	vadd.f32	s15, s15, s10
 80174ac:	ee35 5a87 	vadd.f32	s10, s11, s14
 80174b0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80174b4:	ee62 8a06 	vmul.f32	s17, s4, s12
 80174b8:	ee22 baa0 	vmul.f32	s22, s5, s1
 80174bc:	ee21 8a26 	vmul.f32	s16, s2, s13
 80174c0:	ee61 aa85 	vmul.f32	s21, s3, s10
 80174c4:	ee63 5a27 	vmul.f32	s11, s6, s15
 80174c8:	ee23 aa87 	vmul.f32	s20, s7, s14
 80174cc:	ee34 4a09 	vadd.f32	s8, s8, s18
 80174d0:	ee22 6a86 	vmul.f32	s12, s5, s12
 80174d4:	ee62 0a20 	vmul.f32	s1, s4, s1
 80174d8:	ee61 6aa6 	vmul.f32	s13, s3, s13
 80174dc:	ed04 4a01 	vstr	s8, [r4, #-4]
 80174e0:	ee21 5a05 	vmul.f32	s10, s2, s10
 80174e4:	444c      	add	r4, r9
 80174e6:	ee63 7aa7 	vmul.f32	s15, s7, s15
 80174ea:	ee23 7a07 	vmul.f32	s14, s6, s14
 80174ee:	ee74 4aa9 	vadd.f32	s9, s9, s19
 80174f2:	ee78 8acb 	vsub.f32	s17, s17, s22
 80174f6:	ee36 6a20 	vadd.f32	s12, s12, s1
 80174fa:	ee38 4a6a 	vsub.f32	s8, s16, s21
 80174fe:	edc0 4a01 	vstr	s9, [r0, #4]
 8017502:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017506:	edc1 8a00 	vstr	s17, [r1]
 801750a:	ee75 5aca 	vsub.f32	s11, s11, s20
 801750e:	ed81 6a01 	vstr	s12, [r1, #4]
 8017512:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017516:	ed83 4a00 	vstr	s8, [r3]
 801751a:	edc3 6a01 	vstr	s13, [r3, #4]
 801751e:	4448      	add	r0, r9
 8017520:	edc2 5a00 	vstr	s11, [r2]
 8017524:	4449      	add	r1, r9
 8017526:	edc2 7a01 	vstr	s15, [r2, #4]
 801752a:	444b      	add	r3, r9
 801752c:	444a      	add	r2, r9
 801752e:	d893      	bhi.n	8017458 <arm_radix4_butterfly_inverse_f32+0x1ac>
 8017530:	9b01      	ldr	r3, [sp, #4]
 8017532:	3701      	adds	r7, #1
 8017534:	9a05      	ldr	r2, [sp, #20]
 8017536:	3608      	adds	r6, #8
 8017538:	f10c 0c08 	add.w	ip, ip, #8
 801753c:	4413      	add	r3, r2
 801753e:	9301      	str	r3, [sp, #4]
 8017540:	9b04      	ldr	r3, [sp, #16]
 8017542:	449e      	add	lr, r3
 8017544:	9b06      	ldr	r3, [sp, #24]
 8017546:	4498      	add	r8, r3
 8017548:	9b02      	ldr	r3, [sp, #8]
 801754a:	42bb      	cmp	r3, r7
 801754c:	f47f af70 	bne.w	8017430 <arm_radix4_butterfly_inverse_f32+0x184>
 8017550:	9a08      	ldr	r2, [sp, #32]
 8017552:	469b      	mov	fp, r3
 8017554:	9b07      	ldr	r3, [sp, #28]
 8017556:	0892      	lsrs	r2, r2, #2
 8017558:	009b      	lsls	r3, r3, #2
 801755a:	2a04      	cmp	r2, #4
 801755c:	9208      	str	r2, [sp, #32]
 801755e:	b29b      	uxth	r3, r3
 8017560:	9307      	str	r3, [sp, #28]
 8017562:	d903      	bls.n	801756c <arm_radix4_butterfly_inverse_f32+0x2c0>
 8017564:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8017568:	4618      	mov	r0, r3
 801756a:	e74c      	b.n	8017406 <arm_radix4_butterfly_inverse_f32+0x15a>
 801756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801756e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017570:	3320      	adds	r3, #32
 8017572:	ed53 7a04 	vldr	s15, [r3, #-16]
 8017576:	3a01      	subs	r2, #1
 8017578:	ed53 4a02 	vldr	s9, [r3, #-8]
 801757c:	f103 0320 	add.w	r3, r3, #32
 8017580:	ed13 7a10 	vldr	s14, [r3, #-64]	; 0xffffffc0
 8017584:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8017588:	ee37 6a27 	vadd.f32	s12, s14, s15
 801758c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8017590:	ee35 4aa4 	vadd.f32	s8, s11, s9
 8017594:	ed53 3a0b 	vldr	s7, [r3, #-44]	; 0xffffffd4
 8017598:	ed13 5a09 	vldr	s10, [r3, #-36]	; 0xffffffdc
 801759c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175a0:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80175a4:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80175a8:	ee76 4ac5 	vsub.f32	s9, s13, s10
 80175ac:	ee36 5a85 	vadd.f32	s10, s13, s10
 80175b0:	ee77 6aa3 	vadd.f32	s13, s15, s7
 80175b4:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80175b8:	ee76 3a04 	vadd.f32	s7, s12, s8
 80175bc:	ee36 6a44 	vsub.f32	s12, s12, s8
 80175c0:	ee37 4a64 	vsub.f32	s8, s14, s9
 80175c4:	ee37 7a24 	vadd.f32	s14, s14, s9
 80175c8:	ee26 6a00 	vmul.f32	s12, s12, s0
 80175cc:	ee76 4a85 	vadd.f32	s9, s13, s10
 80175d0:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80175d4:	ee37 5aa5 	vadd.f32	s10, s15, s11
 80175d8:	ed03 6a0e 	vstr	s12, [r3, #-56]	; 0xffffffc8
 80175dc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80175e0:	ee63 5a80 	vmul.f32	s11, s7, s0
 80175e4:	ee24 4a00 	vmul.f32	s8, s8, s0
 80175e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80175ec:	ed43 5a10 	vstr	s11, [r3, #-64]	; 0xffffffc0
 80175f0:	ee66 6a80 	vmul.f32	s13, s13, s0
 80175f4:	ee64 5a80 	vmul.f32	s11, s9, s0
 80175f8:	ed03 4a0c 	vstr	s8, [r3, #-48]	; 0xffffffd0
 80175fc:	ee25 6a00 	vmul.f32	s12, s10, s0
 8017600:	ed03 7a0a 	vstr	s14, [r3, #-40]	; 0xffffffd8
 8017604:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017608:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 801760c:	ed43 5a0f 	vstr	s11, [r3, #-60]	; 0xffffffc4
 8017610:	ed03 6a0b 	vstr	s12, [r3, #-44]	; 0xffffffd4
 8017614:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 8017618:	d1ab      	bne.n	8017572 <arm_radix4_butterfly_inverse_f32+0x2c6>
 801761a:	b00d      	add	sp, #52	; 0x34
 801761c:	ecbd 8b08 	vpop	{d8-d11}
 8017620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017624 <arm_bitreversal_f32>:
 8017624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017628:	0052      	lsls	r2, r2, #1
 801762a:	b085      	sub	sp, #20
 801762c:	084c      	lsrs	r4, r1, #1
 801762e:	2100      	movs	r1, #0
 8017630:	9201      	str	r2, [sp, #4]
 8017632:	1ea2      	subs	r2, r4, #2
 8017634:	9402      	str	r4, [sp, #8]
 8017636:	f104 0e01 	add.w	lr, r4, #1
 801763a:	460c      	mov	r4, r1
 801763c:	9203      	str	r2, [sp, #12]
 801763e:	460a      	mov	r2, r1
 8017640:	1c4e      	adds	r6, r1, #1
 8017642:	9902      	ldr	r1, [sp, #8]
 8017644:	3402      	adds	r4, #2
 8017646:	440a      	add	r2, r1
 8017648:	00f6      	lsls	r6, r6, #3
 801764a:	b2a4      	uxth	r4, r4
 801764c:	00d2      	lsls	r2, r2, #3
 801764e:	1985      	adds	r5, r0, r6
 8017650:	3604      	adds	r6, #4
 8017652:	1881      	adds	r1, r0, r2
 8017654:	f8d5 c000 	ldr.w	ip, [r5]
 8017658:	3204      	adds	r2, #4
 801765a:	4406      	add	r6, r0
 801765c:	680f      	ldr	r7, [r1, #0]
 801765e:	4402      	add	r2, r0
 8017660:	602f      	str	r7, [r5, #0]
 8017662:	eb04 050e 	add.w	r5, r4, lr
 8017666:	f8c1 c000 	str.w	ip, [r1]
 801766a:	00e7      	lsls	r7, r4, #3
 801766c:	00ed      	lsls	r5, r5, #3
 801766e:	f8d2 a000 	ldr.w	sl, [r2]
 8017672:	f8d6 9000 	ldr.w	r9, [r6]
 8017676:	eb00 0c07 	add.w	ip, r0, r7
 801767a:	eb00 0805 	add.w	r8, r0, r5
 801767e:	3504      	adds	r5, #4
 8017680:	f8c6 a000 	str.w	sl, [r6]
 8017684:	3704      	adds	r7, #4
 8017686:	1946      	adds	r6, r0, r5
 8017688:	9d01      	ldr	r5, [sp, #4]
 801768a:	f8c2 9000 	str.w	r9, [r2]
 801768e:	4621      	mov	r1, r4
 8017690:	881a      	ldrh	r2, [r3, #0]
 8017692:	442b      	add	r3, r5
 8017694:	9d03      	ldr	r5, [sp, #12]
 8017696:	4407      	add	r7, r0
 8017698:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801769c:	42ac      	cmp	r4, r5
 801769e:	eb02 050e 	add.w	r5, r2, lr
 80176a2:	d82b      	bhi.n	80176fc <arm_bitreversal_f32+0xd8>
 80176a4:	00ed      	lsls	r5, r5, #3
 80176a6:	eb00 0a09 	add.w	sl, r0, r9
 80176aa:	42a2      	cmp	r2, r4
 80176ac:	f109 0904 	add.w	r9, r9, #4
 80176b0:	eb00 0b05 	add.w	fp, r0, r5
 80176b4:	f105 0504 	add.w	r5, r5, #4
 80176b8:	4481      	add	r9, r0
 80176ba:	d9c1      	bls.n	8017640 <arm_bitreversal_f32+0x1c>
 80176bc:	eddc 7a00 	vldr	s15, [ip]
 80176c0:	4405      	add	r5, r0
 80176c2:	ed9a 7a00 	vldr	s14, [sl]
 80176c6:	ed8c 7a00 	vstr	s14, [ip]
 80176ca:	edca 7a00 	vstr	s15, [sl]
 80176ce:	f8d7 c000 	ldr.w	ip, [r7]
 80176d2:	f8d9 a000 	ldr.w	sl, [r9]
 80176d6:	f8c7 a000 	str.w	sl, [r7]
 80176da:	f8c9 c000 	str.w	ip, [r9]
 80176de:	f8d8 7000 	ldr.w	r7, [r8]
 80176e2:	f8db c000 	ldr.w	ip, [fp]
 80176e6:	f8c8 c000 	str.w	ip, [r8]
 80176ea:	f8cb 7000 	str.w	r7, [fp]
 80176ee:	6837      	ldr	r7, [r6, #0]
 80176f0:	f8d5 c000 	ldr.w	ip, [r5]
 80176f4:	f8c6 c000 	str.w	ip, [r6]
 80176f8:	602f      	str	r7, [r5, #0]
 80176fa:	e7a1      	b.n	8017640 <arm_bitreversal_f32+0x1c>
 80176fc:	b005      	add	sp, #20
 80176fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017702:	bf00      	nop

08017704 <ai_buffer_get_size>:
 8017704:	b358      	cbz	r0, 801775e <ai_buffer_get_size+0x5a>
 8017706:	b430      	push	{r4, r5}
 8017708:	6803      	ldr	r3, [r0, #0]
 801770a:	4d15      	ldr	r5, [pc, #84]	; (8017760 <ai_buffer_get_size+0x5c>)
 801770c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8017710:	6984      	ldr	r4, [r0, #24]
 8017712:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017716:	42ab      	cmp	r3, r5
 8017718:	6862      	ldr	r2, [r4, #4]
 801771a:	d01a      	beq.n	8017752 <ai_buffer_get_size+0x4e>
 801771c:	7d03      	ldrb	r3, [r0, #20]
 801771e:	6941      	ldr	r1, [r0, #20]
 8017720:	f1a3 0301 	sub.w	r3, r3, #1
 8017724:	fab3 f383 	clz	r3, r3
 8017728:	f3c1 2117 	ubfx	r1, r1, #8, #24
 801772c:	095b      	lsrs	r3, r3, #5
 801772e:	428b      	cmp	r3, r1
 8017730:	da0b      	bge.n	801774a <ai_buffer_get_size+0x46>
 8017732:	2b01      	cmp	r3, #1
 8017734:	d102      	bne.n	801773c <ai_buffer_get_size+0x38>
 8017736:	2902      	cmp	r1, #2
 8017738:	d007      	beq.n	801774a <ai_buffer_get_size+0x46>
 801773a:	2302      	movs	r3, #2
 801773c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017740:	3301      	adds	r3, #1
 8017742:	428b      	cmp	r3, r1
 8017744:	fb00 f202 	mul.w	r2, r0, r2
 8017748:	d1f3      	bne.n	8017732 <ai_buffer_get_size+0x2e>
 801774a:	bc30      	pop	{r4, r5}
 801774c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8017750:	4770      	bx	lr
 8017752:	2900      	cmp	r1, #0
 8017754:	d0e2      	beq.n	801771c <ai_buffer_get_size+0x18>
 8017756:	321f      	adds	r2, #31
 8017758:	f022 021f 	bic.w	r2, r2, #31
 801775c:	e7de      	b.n	801771c <ai_buffer_get_size+0x18>
 801775e:	4770      	bx	lr
 8017760:	000400c0 	.word	0x000400c0

08017764 <ai_buffer_array_sane>:
 8017764:	b138      	cbz	r0, 8017776 <ai_buffer_array_sane+0x12>
 8017766:	6843      	ldr	r3, [r0, #4]
 8017768:	b123      	cbz	r3, 8017774 <ai_buffer_array_sane+0x10>
 801776a:	8840      	ldrh	r0, [r0, #2]
 801776c:	3000      	adds	r0, #0
 801776e:	bf18      	it	ne
 8017770:	2001      	movne	r0, #1
 8017772:	4770      	bx	lr
 8017774:	4618      	mov	r0, r3
 8017776:	4770      	bx	lr

08017778 <ai_buffer_array_item_set_address>:
 8017778:	b120      	cbz	r0, 8017784 <ai_buffer_array_item_set_address+0xc>
 801777a:	6843      	ldr	r3, [r0, #4]
 801777c:	b11b      	cbz	r3, 8017786 <ai_buffer_array_item_set_address+0xe>
 801777e:	8840      	ldrh	r0, [r0, #2]
 8017780:	b918      	cbnz	r0, 801778a <ai_buffer_array_item_set_address+0x12>
 8017782:	4770      	bx	lr
 8017784:	4770      	bx	lr
 8017786:	4618      	mov	r0, r3
 8017788:	4770      	bx	lr
 801778a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801778e:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 8017792:	d0f7      	beq.n	8017784 <ai_buffer_array_item_set_address+0xc>
 8017794:	6042      	str	r2, [r0, #4]
 8017796:	2001      	movs	r0, #1
 8017798:	4770      	bx	lr
 801779a:	bf00      	nop

0801779c <_ai_platform_acquire_crc>:
 801779c:	2001      	movs	r0, #1
 801779e:	4770      	bx	lr

080177a0 <_ai_platform_release_crc>:
 80177a0:	4770      	bx	lr
 80177a2:	bf00      	nop

080177a4 <ai_platform_get_weights_map>:
 80177a4:	b192      	cbz	r2, 80177cc <ai_platform_get_weights_map+0x28>
 80177a6:	b188      	cbz	r0, 80177cc <ai_platform_get_weights_map+0x28>
 80177a8:	b181      	cbz	r1, 80177cc <ai_platform_get_weights_map+0x28>
 80177aa:	b570      	push	{r4, r5, r6, lr}
 80177ac:	4b24      	ldr	r3, [pc, #144]	; (8017840 <ai_platform_get_weights_map+0x9c>)
 80177ae:	6814      	ldr	r4, [r2, #0]
 80177b0:	429c      	cmp	r4, r3
 80177b2:	d00d      	beq.n	80177d0 <ai_platform_get_weights_map+0x2c>
 80177b4:	6854      	ldr	r4, [r2, #4]
 80177b6:	b194      	cbz	r4, 80177de <ai_platform_get_weights_map+0x3a>
 80177b8:	6825      	ldr	r5, [r4, #0]
 80177ba:	429d      	cmp	r5, r3
 80177bc:	d027      	beq.n	801780e <ai_platform_get_weights_map+0x6a>
 80177be:	6004      	str	r4, [r0, #0]
 80177c0:	f1a1 0001 	sub.w	r0, r1, #1
 80177c4:	fab0 f080 	clz	r0, r0
 80177c8:	0940      	lsrs	r0, r0, #5
 80177ca:	bd70      	pop	{r4, r5, r6, pc}
 80177cc:	2000      	movs	r0, #0
 80177ce:	4770      	bx	lr
 80177d0:	4605      	mov	r5, r0
 80177d2:	1d10      	adds	r0, r2, #4
 80177d4:	4616      	mov	r6, r2
 80177d6:	460c      	mov	r4, r1
 80177d8:	f7ff ffc4 	bl	8017764 <ai_buffer_array_sane>
 80177dc:	b908      	cbnz	r0, 80177e2 <ai_platform_get_weights_map+0x3e>
 80177de:	2000      	movs	r0, #0
 80177e0:	bd70      	pop	{r4, r5, r6, pc}
 80177e2:	88f3      	ldrh	r3, [r6, #6]
 80177e4:	429c      	cmp	r4, r3
 80177e6:	d1fa      	bne.n	80177de <ai_platform_get_weights_map+0x3a>
 80177e8:	2100      	movs	r1, #0
 80177ea:	4608      	mov	r0, r1
 80177ec:	1f2b      	subs	r3, r5, #4
 80177ee:	68b2      	ldr	r2, [r6, #8]
 80177f0:	440a      	add	r2, r1
 80177f2:	6852      	ldr	r2, [r2, #4]
 80177f4:	311c      	adds	r1, #28
 80177f6:	b12a      	cbz	r2, 8017804 <ai_platform_get_weights_map+0x60>
 80177f8:	3001      	adds	r0, #1
 80177fa:	4284      	cmp	r4, r0
 80177fc:	f843 2f04 	str.w	r2, [r3, #4]!
 8017800:	d1f5      	bne.n	80177ee <ai_platform_get_weights_map+0x4a>
 8017802:	4620      	mov	r0, r4
 8017804:	1a20      	subs	r0, r4, r0
 8017806:	fab0 f080 	clz	r0, r0
 801780a:	0940      	lsrs	r0, r0, #5
 801780c:	bd70      	pop	{r4, r5, r6, pc}
 801780e:	6863      	ldr	r3, [r4, #4]
 8017810:	3404      	adds	r4, #4
 8017812:	42ab      	cmp	r3, r5
 8017814:	d0e3      	beq.n	80177de <ai_platform_get_weights_map+0x3a>
 8017816:	3804      	subs	r0, #4
 8017818:	4626      	mov	r6, r4
 801781a:	2200      	movs	r2, #0
 801781c:	e003      	b.n	8017826 <ai_platform_get_weights_map+0x82>
 801781e:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8017822:	42ab      	cmp	r3, r5
 8017824:	d0db      	beq.n	80177de <ai_platform_get_weights_map+0x3a>
 8017826:	3201      	adds	r2, #1
 8017828:	4291      	cmp	r1, r2
 801782a:	f840 3f04 	str.w	r3, [r0, #4]!
 801782e:	d1f6      	bne.n	801781e <ai_platform_get_weights_map+0x7a>
 8017830:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8017834:	4b02      	ldr	r3, [pc, #8]	; (8017840 <ai_platform_get_weights_map+0x9c>)
 8017836:	429a      	cmp	r2, r3
 8017838:	d1d1      	bne.n	80177de <ai_platform_get_weights_map+0x3a>
 801783a:	2001      	movs	r0, #1
 801783c:	bd70      	pop	{r4, r5, r6, pc}
 801783e:	bf00      	nop
 8017840:	a1facade 	.word	0xa1facade

08017844 <ai_platform_get_activations_map>:
 8017844:	b192      	cbz	r2, 801786c <ai_platform_get_activations_map+0x28>
 8017846:	b188      	cbz	r0, 801786c <ai_platform_get_activations_map+0x28>
 8017848:	b181      	cbz	r1, 801786c <ai_platform_get_activations_map+0x28>
 801784a:	b570      	push	{r4, r5, r6, lr}
 801784c:	4b24      	ldr	r3, [pc, #144]	; (80178e0 <ai_platform_get_activations_map+0x9c>)
 801784e:	6814      	ldr	r4, [r2, #0]
 8017850:	429c      	cmp	r4, r3
 8017852:	d00d      	beq.n	8017870 <ai_platform_get_activations_map+0x2c>
 8017854:	6a14      	ldr	r4, [r2, #32]
 8017856:	b19c      	cbz	r4, 8017880 <ai_platform_get_activations_map+0x3c>
 8017858:	6825      	ldr	r5, [r4, #0]
 801785a:	429d      	cmp	r5, r3
 801785c:	d028      	beq.n	80178b0 <ai_platform_get_activations_map+0x6c>
 801785e:	6004      	str	r4, [r0, #0]
 8017860:	f1a1 0001 	sub.w	r0, r1, #1
 8017864:	fab0 f080 	clz	r0, r0
 8017868:	0940      	lsrs	r0, r0, #5
 801786a:	bd70      	pop	{r4, r5, r6, pc}
 801786c:	2000      	movs	r0, #0
 801786e:	4770      	bx	lr
 8017870:	4605      	mov	r5, r0
 8017872:	f102 000c 	add.w	r0, r2, #12
 8017876:	4616      	mov	r6, r2
 8017878:	460c      	mov	r4, r1
 801787a:	f7ff ff73 	bl	8017764 <ai_buffer_array_sane>
 801787e:	b908      	cbnz	r0, 8017884 <ai_platform_get_activations_map+0x40>
 8017880:	2000      	movs	r0, #0
 8017882:	bd70      	pop	{r4, r5, r6, pc}
 8017884:	89f3      	ldrh	r3, [r6, #14]
 8017886:	429c      	cmp	r4, r3
 8017888:	d1fa      	bne.n	8017880 <ai_platform_get_activations_map+0x3c>
 801788a:	2100      	movs	r1, #0
 801788c:	4608      	mov	r0, r1
 801788e:	1f2b      	subs	r3, r5, #4
 8017890:	6932      	ldr	r2, [r6, #16]
 8017892:	440a      	add	r2, r1
 8017894:	6852      	ldr	r2, [r2, #4]
 8017896:	311c      	adds	r1, #28
 8017898:	b12a      	cbz	r2, 80178a6 <ai_platform_get_activations_map+0x62>
 801789a:	3001      	adds	r0, #1
 801789c:	4284      	cmp	r4, r0
 801789e:	f843 2f04 	str.w	r2, [r3, #4]!
 80178a2:	d1f5      	bne.n	8017890 <ai_platform_get_activations_map+0x4c>
 80178a4:	4620      	mov	r0, r4
 80178a6:	1a20      	subs	r0, r4, r0
 80178a8:	fab0 f080 	clz	r0, r0
 80178ac:	0940      	lsrs	r0, r0, #5
 80178ae:	bd70      	pop	{r4, r5, r6, pc}
 80178b0:	6863      	ldr	r3, [r4, #4]
 80178b2:	3404      	adds	r4, #4
 80178b4:	42ab      	cmp	r3, r5
 80178b6:	d0e3      	beq.n	8017880 <ai_platform_get_activations_map+0x3c>
 80178b8:	3804      	subs	r0, #4
 80178ba:	4626      	mov	r6, r4
 80178bc:	2200      	movs	r2, #0
 80178be:	e003      	b.n	80178c8 <ai_platform_get_activations_map+0x84>
 80178c0:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80178c4:	42ab      	cmp	r3, r5
 80178c6:	d0db      	beq.n	8017880 <ai_platform_get_activations_map+0x3c>
 80178c8:	3201      	adds	r2, #1
 80178ca:	4291      	cmp	r1, r2
 80178cc:	f840 3f04 	str.w	r3, [r0, #4]!
 80178d0:	d1f6      	bne.n	80178c0 <ai_platform_get_activations_map+0x7c>
 80178d2:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80178d6:	4b02      	ldr	r3, [pc, #8]	; (80178e0 <ai_platform_get_activations_map+0x9c>)
 80178d8:	429a      	cmp	r2, r3
 80178da:	d1d1      	bne.n	8017880 <ai_platform_get_activations_map+0x3c>
 80178dc:	2001      	movs	r0, #1
 80178de:	bd70      	pop	{r4, r5, r6, pc}
 80178e0:	a1facade 	.word	0xa1facade

080178e4 <ai_platform_bind_network_params>:
 80178e4:	b1a0      	cbz	r0, 8017910 <ai_platform_bind_network_params+0x2c>
 80178e6:	b1c9      	cbz	r1, 801791c <ai_platform_bind_network_params+0x38>
 80178e8:	b1aa      	cbz	r2, 8017916 <ai_platform_bind_network_params+0x32>
 80178ea:	4603      	mov	r3, r0
 80178ec:	b410      	push	{r4}
 80178ee:	480d      	ldr	r0, [pc, #52]	; (8017924 <ai_platform_bind_network_params+0x40>)
 80178f0:	f103 040c 	add.w	r4, r3, #12
 80178f4:	f843 0b04 	str.w	r0, [r3], #4
 80178f8:	c903      	ldmia	r1, {r0, r1}
 80178fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80178fe:	2301      	movs	r3, #1
 8017900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017904:	e884 0003 	stmia.w	r4, {r0, r1}
 8017908:	4618      	mov	r0, r3
 801790a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801790e:	4770      	bx	lr
 8017910:	4603      	mov	r3, r0
 8017912:	4618      	mov	r0, r3
 8017914:	4770      	bx	lr
 8017916:	4613      	mov	r3, r2
 8017918:	4618      	mov	r0, r3
 801791a:	4770      	bx	lr
 801791c:	460b      	mov	r3, r1
 801791e:	4618      	mov	r0, r3
 8017920:	4770      	bx	lr
 8017922:	bf00      	nop
 8017924:	a1facade 	.word	0xa1facade

08017928 <ai_platform_network_get_error>:
 8017928:	b510      	push	{r4, lr}
 801792a:	b120      	cbz	r0, 8017936 <ai_platform_network_get_error+0xe>
 801792c:	4b45      	ldr	r3, [pc, #276]	; (8017a44 <ai_platform_network_get_error+0x11c>)
 801792e:	6802      	ldr	r2, [r0, #0]
 8017930:	4604      	mov	r4, r0
 8017932:	429a      	cmp	r2, r3
 8017934:	d033      	beq.n	801799e <ai_platform_network_get_error+0x76>
 8017936:	4a44      	ldr	r2, [pc, #272]	; (8017a48 <ai_platform_network_get_error+0x120>)
 8017938:	6813      	ldr	r3, [r2, #0]
 801793a:	f023 0301 	bic.w	r3, r3, #1
 801793e:	6013      	str	r3, [r2, #0]
 8017940:	f7ff ff2c 	bl	801779c <_ai_platform_acquire_crc>
 8017944:	4b41      	ldr	r3, [pc, #260]	; (8017a4c <ai_platform_network_get_error+0x124>)
 8017946:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 801794a:	429a      	cmp	r2, r3
 801794c:	d014      	beq.n	8017978 <ai_platform_network_get_error+0x50>
 801794e:	2218      	movs	r2, #24
 8017950:	4b3f      	ldr	r3, [pc, #252]	; (8017a50 <ai_platform_network_get_error+0x128>)
 8017952:	601a      	str	r2, [r3, #0]
 8017954:	681a      	ldr	r2, [r3, #0]
 8017956:	2a18      	cmp	r2, #24
 8017958:	d042      	beq.n	80179e0 <ai_platform_network_get_error+0xb8>
 801795a:	4b3e      	ldr	r3, [pc, #248]	; (8017a54 <ai_platform_network_get_error+0x12c>)
 801795c:	2201      	movs	r2, #1
 801795e:	4619      	mov	r1, r3
 8017960:	601a      	str	r2, [r3, #0]
 8017962:	680b      	ldr	r3, [r1, #0]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d1fc      	bne.n	8017962 <ai_platform_network_get_error+0x3a>
 8017968:	4b3b      	ldr	r3, [pc, #236]	; (8017a58 <ai_platform_network_get_error+0x130>)
 801796a:	493c      	ldr	r1, [pc, #240]	; (8017a5c <ai_platform_network_get_error+0x134>)
 801796c:	4a3c      	ldr	r2, [pc, #240]	; (8017a60 <ai_platform_network_get_error+0x138>)
 801796e:	6019      	str	r1, [r3, #0]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	4293      	cmp	r3, r2
 8017974:	d00d      	beq.n	8017992 <ai_platform_network_get_error+0x6a>
 8017976:	e7fe      	b.n	8017976 <ai_platform_network_get_error+0x4e>
 8017978:	2301      	movs	r3, #1
 801797a:	f100 0208 	add.w	r2, r0, #8
 801797e:	6083      	str	r3, [r0, #8]
 8017980:	6813      	ldr	r3, [r2, #0]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d1fc      	bne.n	8017980 <ai_platform_network_get_error+0x58>
 8017986:	4a35      	ldr	r2, [pc, #212]	; (8017a5c <ai_platform_network_get_error+0x134>)
 8017988:	4b35      	ldr	r3, [pc, #212]	; (8017a60 <ai_platform_network_get_error+0x138>)
 801798a:	6002      	str	r2, [r0, #0]
 801798c:	6802      	ldr	r2, [r0, #0]
 801798e:	429a      	cmp	r2, r3
 8017990:	d104      	bne.n	801799c <ai_platform_network_get_error+0x74>
 8017992:	f7ff ff05 	bl	80177a0 <_ai_platform_release_crc>
 8017996:	f241 0010 	movw	r0, #4112	; 0x1010
 801799a:	bd10      	pop	{r4, pc}
 801799c:	e7fe      	b.n	801799c <ai_platform_network_get_error+0x74>
 801799e:	4a2a      	ldr	r2, [pc, #168]	; (8017a48 <ai_platform_network_get_error+0x120>)
 80179a0:	6813      	ldr	r3, [r2, #0]
 80179a2:	f023 0301 	bic.w	r3, r3, #1
 80179a6:	6013      	str	r3, [r2, #0]
 80179a8:	f7ff fef8 	bl	801779c <_ai_platform_acquire_crc>
 80179ac:	4b27      	ldr	r3, [pc, #156]	; (8017a4c <ai_platform_network_get_error+0x124>)
 80179ae:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80179b2:	429a      	cmp	r2, r3
 80179b4:	d022      	beq.n	80179fc <ai_platform_network_get_error+0xd4>
 80179b6:	2218      	movs	r2, #24
 80179b8:	4b25      	ldr	r3, [pc, #148]	; (8017a50 <ai_platform_network_get_error+0x128>)
 80179ba:	601a      	str	r2, [r3, #0]
 80179bc:	681a      	ldr	r2, [r3, #0]
 80179be:	2a18      	cmp	r2, #24
 80179c0:	d031      	beq.n	8017a26 <ai_platform_network_get_error+0xfe>
 80179c2:	4b24      	ldr	r3, [pc, #144]	; (8017a54 <ai_platform_network_get_error+0x12c>)
 80179c4:	2201      	movs	r2, #1
 80179c6:	4619      	mov	r1, r3
 80179c8:	601a      	str	r2, [r3, #0]
 80179ca:	680b      	ldr	r3, [r1, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d1fc      	bne.n	80179ca <ai_platform_network_get_error+0xa2>
 80179d0:	4b21      	ldr	r3, [pc, #132]	; (8017a58 <ai_platform_network_get_error+0x130>)
 80179d2:	4922      	ldr	r1, [pc, #136]	; (8017a5c <ai_platform_network_get_error+0x134>)
 80179d4:	4a22      	ldr	r2, [pc, #136]	; (8017a60 <ai_platform_network_get_error+0x138>)
 80179d6:	6019      	str	r1, [r3, #0]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4293      	cmp	r3, r2
 80179dc:	d01b      	beq.n	8017a16 <ai_platform_network_get_error+0xee>
 80179de:	e7fe      	b.n	80179de <ai_platform_network_get_error+0xb6>
 80179e0:	2201      	movs	r2, #1
 80179e2:	4619      	mov	r1, r3
 80179e4:	601a      	str	r2, [r3, #0]
 80179e6:	680b      	ldr	r3, [r1, #0]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d1fc      	bne.n	80179e6 <ai_platform_network_get_error+0xbe>
 80179ec:	4b17      	ldr	r3, [pc, #92]	; (8017a4c <ai_platform_network_get_error+0x124>)
 80179ee:	491b      	ldr	r1, [pc, #108]	; (8017a5c <ai_platform_network_get_error+0x134>)
 80179f0:	4a1b      	ldr	r2, [pc, #108]	; (8017a60 <ai_platform_network_get_error+0x138>)
 80179f2:	6019      	str	r1, [r3, #0]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	4293      	cmp	r3, r2
 80179f8:	d0cb      	beq.n	8017992 <ai_platform_network_get_error+0x6a>
 80179fa:	e7fe      	b.n	80179fa <ai_platform_network_get_error+0xd2>
 80179fc:	2301      	movs	r3, #1
 80179fe:	f100 0208 	add.w	r2, r0, #8
 8017a02:	6083      	str	r3, [r0, #8]
 8017a04:	6813      	ldr	r3, [r2, #0]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d1fc      	bne.n	8017a04 <ai_platform_network_get_error+0xdc>
 8017a0a:	4a14      	ldr	r2, [pc, #80]	; (8017a5c <ai_platform_network_get_error+0x134>)
 8017a0c:	4b14      	ldr	r3, [pc, #80]	; (8017a60 <ai_platform_network_get_error+0x138>)
 8017a0e:	6002      	str	r2, [r0, #0]
 8017a10:	6802      	ldr	r2, [r0, #0]
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d115      	bne.n	8017a42 <ai_platform_network_get_error+0x11a>
 8017a16:	f7ff fec3 	bl	80177a0 <_ai_platform_release_crc>
 8017a1a:	f104 0010 	add.w	r0, r4, #16
 8017a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a22:	f000 bfe1 	b.w	80189e8 <core_get_error>
 8017a26:	2201      	movs	r2, #1
 8017a28:	4619      	mov	r1, r3
 8017a2a:	601a      	str	r2, [r3, #0]
 8017a2c:	680b      	ldr	r3, [r1, #0]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d1fc      	bne.n	8017a2c <ai_platform_network_get_error+0x104>
 8017a32:	4b06      	ldr	r3, [pc, #24]	; (8017a4c <ai_platform_network_get_error+0x124>)
 8017a34:	4909      	ldr	r1, [pc, #36]	; (8017a5c <ai_platform_network_get_error+0x134>)
 8017a36:	4a0a      	ldr	r2, [pc, #40]	; (8017a60 <ai_platform_network_get_error+0x138>)
 8017a38:	6019      	str	r1, [r3, #0]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	4293      	cmp	r3, r2
 8017a3e:	d0ea      	beq.n	8017a16 <ai_platform_network_get_error+0xee>
 8017a40:	e7fe      	b.n	8017a40 <ai_platform_network_get_error+0x118>
 8017a42:	e7fe      	b.n	8017a42 <ai_platform_network_get_error+0x11a>
 8017a44:	a1c00100 	.word	0xa1c00100
 8017a48:	e0002000 	.word	0xe0002000
 8017a4c:	40023000 	.word	0x40023000
 8017a50:	40023008 	.word	0x40023008
 8017a54:	50023008 	.word	0x50023008
 8017a58:	50023000 	.word	0x50023000
 8017a5c:	f407a5c2 	.word	0xf407a5c2
 8017a60:	b5e8b5cd 	.word	0xb5e8b5cd

08017a64 <ai_platform_network_set_error>:
 8017a64:	b110      	cbz	r0, 8017a6c <ai_platform_network_set_error+0x8>
 8017a66:	3010      	adds	r0, #16
 8017a68:	f000 bfc4 	b.w	80189f4 <core_set_error>
 8017a6c:	4770      	bx	lr
 8017a6e:	bf00      	nop

08017a70 <ai_platform_inputs_get>:
 8017a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a74:	b085      	sub	sp, #20
 8017a76:	2800      	cmp	r0, #0
 8017a78:	d034      	beq.n	8017ae4 <ai_platform_inputs_get+0x74>
 8017a7a:	4b82      	ldr	r3, [pc, #520]	; (8017c84 <ai_platform_inputs_get+0x214>)
 8017a7c:	6802      	ldr	r2, [r0, #0]
 8017a7e:	4607      	mov	r7, r0
 8017a80:	429a      	cmp	r2, r3
 8017a82:	d12f      	bne.n	8017ae4 <ai_platform_inputs_get+0x74>
 8017a84:	4a80      	ldr	r2, [pc, #512]	; (8017c88 <ai_platform_inputs_get+0x218>)
 8017a86:	468b      	mov	fp, r1
 8017a88:	6813      	ldr	r3, [r2, #0]
 8017a8a:	f023 0301 	bic.w	r3, r3, #1
 8017a8e:	6013      	str	r3, [r2, #0]
 8017a90:	f7ff fe84 	bl	801779c <_ai_platform_acquire_crc>
 8017a94:	4b7d      	ldr	r3, [pc, #500]	; (8017c8c <ai_platform_inputs_get+0x21c>)
 8017a96:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	d014      	beq.n	8017ac8 <ai_platform_inputs_get+0x58>
 8017a9e:	2218      	movs	r2, #24
 8017aa0:	4b7b      	ldr	r3, [pc, #492]	; (8017c90 <ai_platform_inputs_get+0x220>)
 8017aa2:	601a      	str	r2, [r3, #0]
 8017aa4:	681a      	ldr	r2, [r3, #0]
 8017aa6:	2a18      	cmp	r2, #24
 8017aa8:	d040      	beq.n	8017b2c <ai_platform_inputs_get+0xbc>
 8017aaa:	4b7a      	ldr	r3, [pc, #488]	; (8017c94 <ai_platform_inputs_get+0x224>)
 8017aac:	2201      	movs	r2, #1
 8017aae:	4619      	mov	r1, r3
 8017ab0:	601a      	str	r2, [r3, #0]
 8017ab2:	680b      	ldr	r3, [r1, #0]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1fc      	bne.n	8017ab2 <ai_platform_inputs_get+0x42>
 8017ab8:	4b77      	ldr	r3, [pc, #476]	; (8017c98 <ai_platform_inputs_get+0x228>)
 8017aba:	4978      	ldr	r1, [pc, #480]	; (8017c9c <ai_platform_inputs_get+0x22c>)
 8017abc:	4a78      	ldr	r2, [pc, #480]	; (8017ca0 <ai_platform_inputs_get+0x230>)
 8017abe:	6019      	str	r1, [r3, #0]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	4293      	cmp	r3, r2
 8017ac4:	d040      	beq.n	8017b48 <ai_platform_inputs_get+0xd8>
 8017ac6:	e7fe      	b.n	8017ac6 <ai_platform_inputs_get+0x56>
 8017ac8:	2301      	movs	r3, #1
 8017aca:	f100 0208 	add.w	r2, r0, #8
 8017ace:	6083      	str	r3, [r0, #8]
 8017ad0:	6813      	ldr	r3, [r2, #0]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d1fc      	bne.n	8017ad0 <ai_platform_inputs_get+0x60>
 8017ad6:	4a71      	ldr	r2, [pc, #452]	; (8017c9c <ai_platform_inputs_get+0x22c>)
 8017ad8:	4b71      	ldr	r3, [pc, #452]	; (8017ca0 <ai_platform_inputs_get+0x230>)
 8017ada:	6002      	str	r2, [r0, #0]
 8017adc:	6802      	ldr	r2, [r0, #0]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d032      	beq.n	8017b48 <ai_platform_inputs_get+0xd8>
 8017ae2:	e7fe      	b.n	8017ae2 <ai_platform_inputs_get+0x72>
 8017ae4:	4a68      	ldr	r2, [pc, #416]	; (8017c88 <ai_platform_inputs_get+0x218>)
 8017ae6:	6813      	ldr	r3, [r2, #0]
 8017ae8:	f023 0301 	bic.w	r3, r3, #1
 8017aec:	6013      	str	r3, [r2, #0]
 8017aee:	f7ff fe55 	bl	801779c <_ai_platform_acquire_crc>
 8017af2:	4b66      	ldr	r3, [pc, #408]	; (8017c8c <ai_platform_inputs_get+0x21c>)
 8017af4:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017af8:	429a      	cmp	r2, r3
 8017afa:	f000 80a2 	beq.w	8017c42 <ai_platform_inputs_get+0x1d2>
 8017afe:	2218      	movs	r2, #24
 8017b00:	4b63      	ldr	r3, [pc, #396]	; (8017c90 <ai_platform_inputs_get+0x220>)
 8017b02:	601a      	str	r2, [r3, #0]
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	2a18      	cmp	r2, #24
 8017b08:	f000 80a9 	beq.w	8017c5e <ai_platform_inputs_get+0x1ee>
 8017b0c:	4b61      	ldr	r3, [pc, #388]	; (8017c94 <ai_platform_inputs_get+0x224>)
 8017b0e:	2201      	movs	r2, #1
 8017b10:	4619      	mov	r1, r3
 8017b12:	601a      	str	r2, [r3, #0]
 8017b14:	680b      	ldr	r3, [r1, #0]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d1fc      	bne.n	8017b14 <ai_platform_inputs_get+0xa4>
 8017b1a:	4b5f      	ldr	r3, [pc, #380]	; (8017c98 <ai_platform_inputs_get+0x228>)
 8017b1c:	495f      	ldr	r1, [pc, #380]	; (8017c9c <ai_platform_inputs_get+0x22c>)
 8017b1e:	4a60      	ldr	r2, [pc, #384]	; (8017ca0 <ai_platform_inputs_get+0x230>)
 8017b20:	6019      	str	r1, [r3, #0]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	4293      	cmp	r3, r2
 8017b26:	f000 80a7 	beq.w	8017c78 <ai_platform_inputs_get+0x208>
 8017b2a:	e7fe      	b.n	8017b2a <ai_platform_inputs_get+0xba>
 8017b2c:	2201      	movs	r2, #1
 8017b2e:	4619      	mov	r1, r3
 8017b30:	601a      	str	r2, [r3, #0]
 8017b32:	680b      	ldr	r3, [r1, #0]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1fc      	bne.n	8017b32 <ai_platform_inputs_get+0xc2>
 8017b38:	4b54      	ldr	r3, [pc, #336]	; (8017c8c <ai_platform_inputs_get+0x21c>)
 8017b3a:	4958      	ldr	r1, [pc, #352]	; (8017c9c <ai_platform_inputs_get+0x22c>)
 8017b3c:	4a58      	ldr	r2, [pc, #352]	; (8017ca0 <ai_platform_inputs_get+0x230>)
 8017b3e:	6019      	str	r1, [r3, #0]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	4293      	cmp	r3, r2
 8017b44:	f040 809d 	bne.w	8017c82 <ai_platform_inputs_get+0x212>
 8017b48:	f7ff fe2a 	bl	80177a0 <_ai_platform_release_crc>
 8017b4c:	f1bb 0f00 	cmp.w	fp, #0
 8017b50:	d002      	beq.n	8017b58 <ai_platform_inputs_get+0xe8>
 8017b52:	2300      	movs	r3, #0
 8017b54:	f8ab 3000 	strh.w	r3, [fp]
 8017b58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d067      	beq.n	8017c2e <ai_platform_inputs_get+0x1be>
 8017b5e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8017b60:	2e00      	cmp	r6, #0
 8017b62:	d064      	beq.n	8017c2e <ai_platform_inputs_get+0x1be>
 8017b64:	8833      	ldrh	r3, [r6, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d061      	beq.n	8017c2e <ai_platform_inputs_get+0x1be>
 8017b6a:	6873      	ldr	r3, [r6, #4]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d05e      	beq.n	8017c2e <ai_platform_inputs_get+0x1be>
 8017b70:	681d      	ldr	r5, [r3, #0]
 8017b72:	2d00      	cmp	r5, #0
 8017b74:	d05b      	beq.n	8017c2e <ai_platform_inputs_get+0x1be>
 8017b76:	f04f 0800 	mov.w	r8, #0
 8017b7a:	f8cd b00c 	str.w	fp, [sp, #12]
 8017b7e:	46c1      	mov	r9, r8
 8017b80:	46bb      	mov	fp, r7
 8017b82:	68ab      	ldr	r3, [r5, #8]
 8017b84:	68b0      	ldr	r0, [r6, #8]
 8017b86:	69a9      	ldr	r1, [r5, #24]
 8017b88:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8017b8c:	9301      	str	r3, [sp, #4]
 8017b8e:	68eb      	ldr	r3, [r5, #12]
 8017b90:	6844      	ldr	r4, [r0, #4]
 8017b92:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8017b96:	6808      	ldr	r0, [r1, #0]
 8017b98:	9302      	str	r3, [sp, #8]
 8017b9a:	f001 fd69 	bl	8019670 <ai_array_to_buffer_fmt>
 8017b9e:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8017ba2:	4602      	mov	r2, r0
 8017ba4:	69a8      	ldr	r0, [r5, #24]
 8017ba6:	eb0a 0307 	add.w	r3, sl, r7
 8017baa:	4444      	add	r4, r8
 8017bac:	6881      	ldr	r1, [r0, #8]
 8017bae:	b16b      	cbz	r3, 8017bcc <ai_platform_inputs_get+0x15c>
 8017bb0:	2000      	movs	r0, #0
 8017bb2:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8017bb6:	6828      	ldr	r0, [r5, #0]
 8017bb8:	6058      	str	r0, [r3, #4]
 8017bba:	2800      	cmp	r0, #0
 8017bbc:	d034      	beq.n	8017c28 <ai_platform_inputs_get+0x1b8>
 8017bbe:	8840      	ldrh	r0, [r0, #2]
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	d031      	beq.n	8017c28 <ai_platform_inputs_get+0x1b8>
 8017bc4:	2001      	movs	r0, #1
 8017bc6:	f84a 0007 	str.w	r0, [sl, r7]
 8017bca:	69a8      	ldr	r0, [r5, #24]
 8017bcc:	f04f 0701 	mov.w	r7, #1
 8017bd0:	6840      	ldr	r0, [r0, #4]
 8017bd2:	60a3      	str	r3, [r4, #8]
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	7527      	strb	r7, [r4, #20]
 8017bd8:	6967      	ldr	r7, [r4, #20]
 8017bda:	6120      	str	r0, [r4, #16]
 8017bdc:	9801      	ldr	r0, [sp, #4]
 8017bde:	60e3      	str	r3, [r4, #12]
 8017be0:	9b02      	ldr	r3, [sp, #8]
 8017be2:	f360 271f 	bfi	r7, r0, #8, #24
 8017be6:	e9c4 7305 	strd	r7, r3, [r4, #20]
 8017bea:	e9c4 2100 	strd	r2, r1, [r4]
 8017bee:	8831      	ldrh	r1, [r6, #0]
 8017bf0:	f109 0501 	add.w	r5, r9, #1
 8017bf4:	428d      	cmp	r5, r1
 8017bf6:	46a9      	mov	r9, r5
 8017bf8:	b2ab      	uxth	r3, r5
 8017bfa:	d207      	bcs.n	8017c0c <ai_platform_inputs_get+0x19c>
 8017bfc:	6871      	ldr	r1, [r6, #4]
 8017bfe:	b129      	cbz	r1, 8017c0c <ai_platform_inputs_get+0x19c>
 8017c00:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8017c04:	f108 081c 	add.w	r8, r8, #28
 8017c08:	2d00      	cmp	r5, #0
 8017c0a:	d1ba      	bne.n	8017b82 <ai_platform_inputs_get+0x112>
 8017c0c:	465f      	mov	r7, fp
 8017c0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8017c12:	b163      	cbz	r3, 8017c2e <ai_platform_inputs_get+0x1be>
 8017c14:	68b2      	ldr	r2, [r6, #8]
 8017c16:	6850      	ldr	r0, [r2, #4]
 8017c18:	f1bb 0f00 	cmp.w	fp, #0
 8017c1c:	d00e      	beq.n	8017c3c <ai_platform_inputs_get+0x1cc>
 8017c1e:	f8ab 3000 	strh.w	r3, [fp]
 8017c22:	b005      	add	sp, #20
 8017c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c28:	69a8      	ldr	r0, [r5, #24]
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	e7ce      	b.n	8017bcc <ai_platform_inputs_get+0x15c>
 8017c2e:	f107 0010 	add.w	r0, r7, #16
 8017c32:	2218      	movs	r2, #24
 8017c34:	2111      	movs	r1, #17
 8017c36:	f000 fedd 	bl	80189f4 <core_set_error>
 8017c3a:	2000      	movs	r0, #0
 8017c3c:	b005      	add	sp, #20
 8017c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c42:	2301      	movs	r3, #1
 8017c44:	f100 0208 	add.w	r2, r0, #8
 8017c48:	6083      	str	r3, [r0, #8]
 8017c4a:	6813      	ldr	r3, [r2, #0]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d1fc      	bne.n	8017c4a <ai_platform_inputs_get+0x1da>
 8017c50:	4a12      	ldr	r2, [pc, #72]	; (8017c9c <ai_platform_inputs_get+0x22c>)
 8017c52:	4b13      	ldr	r3, [pc, #76]	; (8017ca0 <ai_platform_inputs_get+0x230>)
 8017c54:	6002      	str	r2, [r0, #0]
 8017c56:	6802      	ldr	r2, [r0, #0]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d00d      	beq.n	8017c78 <ai_platform_inputs_get+0x208>
 8017c5c:	e7fe      	b.n	8017c5c <ai_platform_inputs_get+0x1ec>
 8017c5e:	2201      	movs	r2, #1
 8017c60:	4619      	mov	r1, r3
 8017c62:	601a      	str	r2, [r3, #0]
 8017c64:	680b      	ldr	r3, [r1, #0]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d1fc      	bne.n	8017c64 <ai_platform_inputs_get+0x1f4>
 8017c6a:	4b08      	ldr	r3, [pc, #32]	; (8017c8c <ai_platform_inputs_get+0x21c>)
 8017c6c:	490b      	ldr	r1, [pc, #44]	; (8017c9c <ai_platform_inputs_get+0x22c>)
 8017c6e:	4a0c      	ldr	r2, [pc, #48]	; (8017ca0 <ai_platform_inputs_get+0x230>)
 8017c70:	6019      	str	r1, [r3, #0]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	4293      	cmp	r3, r2
 8017c76:	d103      	bne.n	8017c80 <ai_platform_inputs_get+0x210>
 8017c78:	f7ff fd92 	bl	80177a0 <_ai_platform_release_crc>
 8017c7c:	2000      	movs	r0, #0
 8017c7e:	e7dd      	b.n	8017c3c <ai_platform_inputs_get+0x1cc>
 8017c80:	e7fe      	b.n	8017c80 <ai_platform_inputs_get+0x210>
 8017c82:	e7fe      	b.n	8017c82 <ai_platform_inputs_get+0x212>
 8017c84:	a1c00100 	.word	0xa1c00100
 8017c88:	e0002000 	.word	0xe0002000
 8017c8c:	40023000 	.word	0x40023000
 8017c90:	40023008 	.word	0x40023008
 8017c94:	50023008 	.word	0x50023008
 8017c98:	50023000 	.word	0x50023000
 8017c9c:	f407a5c2 	.word	0xf407a5c2
 8017ca0:	b5e8b5cd 	.word	0xb5e8b5cd

08017ca4 <ai_platform_outputs_get>:
 8017ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca8:	b085      	sub	sp, #20
 8017caa:	2800      	cmp	r0, #0
 8017cac:	d034      	beq.n	8017d18 <ai_platform_outputs_get+0x74>
 8017cae:	4b84      	ldr	r3, [pc, #528]	; (8017ec0 <ai_platform_outputs_get+0x21c>)
 8017cb0:	6802      	ldr	r2, [r0, #0]
 8017cb2:	4607      	mov	r7, r0
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d12f      	bne.n	8017d18 <ai_platform_outputs_get+0x74>
 8017cb8:	4a82      	ldr	r2, [pc, #520]	; (8017ec4 <ai_platform_outputs_get+0x220>)
 8017cba:	468b      	mov	fp, r1
 8017cbc:	6813      	ldr	r3, [r2, #0]
 8017cbe:	f023 0301 	bic.w	r3, r3, #1
 8017cc2:	6013      	str	r3, [r2, #0]
 8017cc4:	f7ff fd6a 	bl	801779c <_ai_platform_acquire_crc>
 8017cc8:	4b7f      	ldr	r3, [pc, #508]	; (8017ec8 <ai_platform_outputs_get+0x224>)
 8017cca:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d014      	beq.n	8017cfc <ai_platform_outputs_get+0x58>
 8017cd2:	2218      	movs	r2, #24
 8017cd4:	4b7d      	ldr	r3, [pc, #500]	; (8017ecc <ai_platform_outputs_get+0x228>)
 8017cd6:	601a      	str	r2, [r3, #0]
 8017cd8:	681a      	ldr	r2, [r3, #0]
 8017cda:	2a18      	cmp	r2, #24
 8017cdc:	d040      	beq.n	8017d60 <ai_platform_outputs_get+0xbc>
 8017cde:	4b7c      	ldr	r3, [pc, #496]	; (8017ed0 <ai_platform_outputs_get+0x22c>)
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	4619      	mov	r1, r3
 8017ce4:	601a      	str	r2, [r3, #0]
 8017ce6:	680b      	ldr	r3, [r1, #0]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d1fc      	bne.n	8017ce6 <ai_platform_outputs_get+0x42>
 8017cec:	4b79      	ldr	r3, [pc, #484]	; (8017ed4 <ai_platform_outputs_get+0x230>)
 8017cee:	497a      	ldr	r1, [pc, #488]	; (8017ed8 <ai_platform_outputs_get+0x234>)
 8017cf0:	4a7a      	ldr	r2, [pc, #488]	; (8017edc <ai_platform_outputs_get+0x238>)
 8017cf2:	6019      	str	r1, [r3, #0]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d040      	beq.n	8017d7c <ai_platform_outputs_get+0xd8>
 8017cfa:	e7fe      	b.n	8017cfa <ai_platform_outputs_get+0x56>
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	f100 0208 	add.w	r2, r0, #8
 8017d02:	6083      	str	r3, [r0, #8]
 8017d04:	6813      	ldr	r3, [r2, #0]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d1fc      	bne.n	8017d04 <ai_platform_outputs_get+0x60>
 8017d0a:	4a73      	ldr	r2, [pc, #460]	; (8017ed8 <ai_platform_outputs_get+0x234>)
 8017d0c:	4b73      	ldr	r3, [pc, #460]	; (8017edc <ai_platform_outputs_get+0x238>)
 8017d0e:	6002      	str	r2, [r0, #0]
 8017d10:	6802      	ldr	r2, [r0, #0]
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d032      	beq.n	8017d7c <ai_platform_outputs_get+0xd8>
 8017d16:	e7fe      	b.n	8017d16 <ai_platform_outputs_get+0x72>
 8017d18:	4a6a      	ldr	r2, [pc, #424]	; (8017ec4 <ai_platform_outputs_get+0x220>)
 8017d1a:	6813      	ldr	r3, [r2, #0]
 8017d1c:	f023 0301 	bic.w	r3, r3, #1
 8017d20:	6013      	str	r3, [r2, #0]
 8017d22:	f7ff fd3b 	bl	801779c <_ai_platform_acquire_crc>
 8017d26:	4b68      	ldr	r3, [pc, #416]	; (8017ec8 <ai_platform_outputs_get+0x224>)
 8017d28:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017d2c:	429a      	cmp	r2, r3
 8017d2e:	f000 809d 	beq.w	8017e6c <ai_platform_outputs_get+0x1c8>
 8017d32:	2218      	movs	r2, #24
 8017d34:	4b65      	ldr	r3, [pc, #404]	; (8017ecc <ai_platform_outputs_get+0x228>)
 8017d36:	601a      	str	r2, [r3, #0]
 8017d38:	681a      	ldr	r2, [r3, #0]
 8017d3a:	2a18      	cmp	r2, #24
 8017d3c:	f000 80a4 	beq.w	8017e88 <ai_platform_outputs_get+0x1e4>
 8017d40:	4b63      	ldr	r3, [pc, #396]	; (8017ed0 <ai_platform_outputs_get+0x22c>)
 8017d42:	2201      	movs	r2, #1
 8017d44:	4619      	mov	r1, r3
 8017d46:	601a      	str	r2, [r3, #0]
 8017d48:	680b      	ldr	r3, [r1, #0]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d1fc      	bne.n	8017d48 <ai_platform_outputs_get+0xa4>
 8017d4e:	4b61      	ldr	r3, [pc, #388]	; (8017ed4 <ai_platform_outputs_get+0x230>)
 8017d50:	4961      	ldr	r1, [pc, #388]	; (8017ed8 <ai_platform_outputs_get+0x234>)
 8017d52:	4a62      	ldr	r2, [pc, #392]	; (8017edc <ai_platform_outputs_get+0x238>)
 8017d54:	6019      	str	r1, [r3, #0]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	4293      	cmp	r3, r2
 8017d5a:	f000 80a2 	beq.w	8017ea2 <ai_platform_outputs_get+0x1fe>
 8017d5e:	e7fe      	b.n	8017d5e <ai_platform_outputs_get+0xba>
 8017d60:	2201      	movs	r2, #1
 8017d62:	4619      	mov	r1, r3
 8017d64:	601a      	str	r2, [r3, #0]
 8017d66:	680b      	ldr	r3, [r1, #0]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d1fc      	bne.n	8017d66 <ai_platform_outputs_get+0xc2>
 8017d6c:	4b56      	ldr	r3, [pc, #344]	; (8017ec8 <ai_platform_outputs_get+0x224>)
 8017d6e:	495a      	ldr	r1, [pc, #360]	; (8017ed8 <ai_platform_outputs_get+0x234>)
 8017d70:	4a5a      	ldr	r2, [pc, #360]	; (8017edc <ai_platform_outputs_get+0x238>)
 8017d72:	6019      	str	r1, [r3, #0]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	4293      	cmp	r3, r2
 8017d78:	f040 80a0 	bne.w	8017ebc <ai_platform_outputs_get+0x218>
 8017d7c:	f7ff fd10 	bl	80177a0 <_ai_platform_release_crc>
 8017d80:	f1bb 0f00 	cmp.w	fp, #0
 8017d84:	d002      	beq.n	8017d8c <ai_platform_outputs_get+0xe8>
 8017d86:	2300      	movs	r3, #0
 8017d88:	f8ab 3000 	strh.w	r3, [fp]
 8017d8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017d8e:	2b01      	cmp	r3, #1
 8017d90:	f240 808b 	bls.w	8017eaa <ai_platform_outputs_get+0x206>
 8017d94:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8017d96:	f116 0f0c 	cmn.w	r6, #12
 8017d9a:	f000 8086 	beq.w	8017eaa <ai_platform_outputs_get+0x206>
 8017d9e:	89b3      	ldrh	r3, [r6, #12]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	f000 8082 	beq.w	8017eaa <ai_platform_outputs_get+0x206>
 8017da6:	6933      	ldr	r3, [r6, #16]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d07e      	beq.n	8017eaa <ai_platform_outputs_get+0x206>
 8017dac:	681d      	ldr	r5, [r3, #0]
 8017dae:	2d00      	cmp	r5, #0
 8017db0:	d07b      	beq.n	8017eaa <ai_platform_outputs_get+0x206>
 8017db2:	f04f 0800 	mov.w	r8, #0
 8017db6:	f8cd b00c 	str.w	fp, [sp, #12]
 8017dba:	46c1      	mov	r9, r8
 8017dbc:	46bb      	mov	fp, r7
 8017dbe:	68ab      	ldr	r3, [r5, #8]
 8017dc0:	6970      	ldr	r0, [r6, #20]
 8017dc2:	69a9      	ldr	r1, [r5, #24]
 8017dc4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8017dc8:	9301      	str	r3, [sp, #4]
 8017dca:	68eb      	ldr	r3, [r5, #12]
 8017dcc:	6844      	ldr	r4, [r0, #4]
 8017dce:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8017dd2:	6808      	ldr	r0, [r1, #0]
 8017dd4:	9302      	str	r3, [sp, #8]
 8017dd6:	f001 fc4b 	bl	8019670 <ai_array_to_buffer_fmt>
 8017dda:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8017dde:	4602      	mov	r2, r0
 8017de0:	69a8      	ldr	r0, [r5, #24]
 8017de2:	eb0a 0307 	add.w	r3, sl, r7
 8017de6:	4444      	add	r4, r8
 8017de8:	6881      	ldr	r1, [r0, #8]
 8017dea:	b16b      	cbz	r3, 8017e08 <ai_platform_outputs_get+0x164>
 8017dec:	2000      	movs	r0, #0
 8017dee:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8017df2:	6828      	ldr	r0, [r5, #0]
 8017df4:	6058      	str	r0, [r3, #4]
 8017df6:	2800      	cmp	r0, #0
 8017df8:	d035      	beq.n	8017e66 <ai_platform_outputs_get+0x1c2>
 8017dfa:	8840      	ldrh	r0, [r0, #2]
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	d032      	beq.n	8017e66 <ai_platform_outputs_get+0x1c2>
 8017e00:	2001      	movs	r0, #1
 8017e02:	f84a 0007 	str.w	r0, [sl, r7]
 8017e06:	69a8      	ldr	r0, [r5, #24]
 8017e08:	f04f 0701 	mov.w	r7, #1
 8017e0c:	6840      	ldr	r0, [r0, #4]
 8017e0e:	60a3      	str	r3, [r4, #8]
 8017e10:	2300      	movs	r3, #0
 8017e12:	7527      	strb	r7, [r4, #20]
 8017e14:	6967      	ldr	r7, [r4, #20]
 8017e16:	6120      	str	r0, [r4, #16]
 8017e18:	9801      	ldr	r0, [sp, #4]
 8017e1a:	60e3      	str	r3, [r4, #12]
 8017e1c:	9b02      	ldr	r3, [sp, #8]
 8017e1e:	f360 271f 	bfi	r7, r0, #8, #24
 8017e22:	e9c4 7305 	strd	r7, r3, [r4, #20]
 8017e26:	e9c4 2100 	strd	r2, r1, [r4]
 8017e2a:	89b1      	ldrh	r1, [r6, #12]
 8017e2c:	f109 0501 	add.w	r5, r9, #1
 8017e30:	428d      	cmp	r5, r1
 8017e32:	46a9      	mov	r9, r5
 8017e34:	b2ab      	uxth	r3, r5
 8017e36:	d207      	bcs.n	8017e48 <ai_platform_outputs_get+0x1a4>
 8017e38:	6931      	ldr	r1, [r6, #16]
 8017e3a:	b129      	cbz	r1, 8017e48 <ai_platform_outputs_get+0x1a4>
 8017e3c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8017e40:	f108 081c 	add.w	r8, r8, #28
 8017e44:	2d00      	cmp	r5, #0
 8017e46:	d1ba      	bne.n	8017dbe <ai_platform_outputs_get+0x11a>
 8017e48:	465f      	mov	r7, fp
 8017e4a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d02b      	beq.n	8017eaa <ai_platform_outputs_get+0x206>
 8017e52:	6972      	ldr	r2, [r6, #20]
 8017e54:	6850      	ldr	r0, [r2, #4]
 8017e56:	f1bb 0f00 	cmp.w	fp, #0
 8017e5a:	d001      	beq.n	8017e60 <ai_platform_outputs_get+0x1bc>
 8017e5c:	f8ab 3000 	strh.w	r3, [fp]
 8017e60:	b005      	add	sp, #20
 8017e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e66:	69a8      	ldr	r0, [r5, #24]
 8017e68:	2300      	movs	r3, #0
 8017e6a:	e7cd      	b.n	8017e08 <ai_platform_outputs_get+0x164>
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	f100 0208 	add.w	r2, r0, #8
 8017e72:	6083      	str	r3, [r0, #8]
 8017e74:	6813      	ldr	r3, [r2, #0]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d1fc      	bne.n	8017e74 <ai_platform_outputs_get+0x1d0>
 8017e7a:	4a17      	ldr	r2, [pc, #92]	; (8017ed8 <ai_platform_outputs_get+0x234>)
 8017e7c:	4b17      	ldr	r3, [pc, #92]	; (8017edc <ai_platform_outputs_get+0x238>)
 8017e7e:	6002      	str	r2, [r0, #0]
 8017e80:	6802      	ldr	r2, [r0, #0]
 8017e82:	429a      	cmp	r2, r3
 8017e84:	d00d      	beq.n	8017ea2 <ai_platform_outputs_get+0x1fe>
 8017e86:	e7fe      	b.n	8017e86 <ai_platform_outputs_get+0x1e2>
 8017e88:	2201      	movs	r2, #1
 8017e8a:	4619      	mov	r1, r3
 8017e8c:	601a      	str	r2, [r3, #0]
 8017e8e:	680b      	ldr	r3, [r1, #0]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d1fc      	bne.n	8017e8e <ai_platform_outputs_get+0x1ea>
 8017e94:	4b0c      	ldr	r3, [pc, #48]	; (8017ec8 <ai_platform_outputs_get+0x224>)
 8017e96:	4910      	ldr	r1, [pc, #64]	; (8017ed8 <ai_platform_outputs_get+0x234>)
 8017e98:	4a10      	ldr	r2, [pc, #64]	; (8017edc <ai_platform_outputs_get+0x238>)
 8017e9a:	6019      	str	r1, [r3, #0]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	4293      	cmp	r3, r2
 8017ea0:	d10b      	bne.n	8017eba <ai_platform_outputs_get+0x216>
 8017ea2:	f7ff fc7d 	bl	80177a0 <_ai_platform_release_crc>
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	e7da      	b.n	8017e60 <ai_platform_outputs_get+0x1bc>
 8017eaa:	f107 0010 	add.w	r0, r7, #16
 8017eae:	2218      	movs	r2, #24
 8017eb0:	2111      	movs	r1, #17
 8017eb2:	f000 fd9f 	bl	80189f4 <core_set_error>
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	e7d2      	b.n	8017e60 <ai_platform_outputs_get+0x1bc>
 8017eba:	e7fe      	b.n	8017eba <ai_platform_outputs_get+0x216>
 8017ebc:	e7fe      	b.n	8017ebc <ai_platform_outputs_get+0x218>
 8017ebe:	bf00      	nop
 8017ec0:	a1c00100 	.word	0xa1c00100
 8017ec4:	e0002000 	.word	0xe0002000
 8017ec8:	40023000 	.word	0x40023000
 8017ecc:	40023008 	.word	0x40023008
 8017ed0:	50023008 	.word	0x50023008
 8017ed4:	50023000 	.word	0x50023000
 8017ed8:	f407a5c2 	.word	0xf407a5c2
 8017edc:	b5e8b5cd 	.word	0xb5e8b5cd

08017ee0 <ai_platform_network_create>:
 8017ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ee4:	b082      	sub	sp, #8
 8017ee6:	4605      	mov	r5, r0
 8017ee8:	4614      	mov	r4, r2
 8017eea:	461e      	mov	r6, r3
 8017eec:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8017ef0:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8017ef4:	f7ff fc52 	bl	801779c <_ai_platform_acquire_crc>
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	d043      	beq.n	8017f84 <ai_platform_network_create+0xa4>
 8017efc:	4b70      	ldr	r3, [pc, #448]	; (80180c0 <ai_platform_network_create+0x1e0>)
 8017efe:	4298      	cmp	r0, r3
 8017f00:	d00a      	beq.n	8017f18 <ai_platform_network_create+0x38>
 8017f02:	4b70      	ldr	r3, [pc, #448]	; (80180c4 <ai_platform_network_create+0x1e4>)
 8017f04:	4298      	cmp	r0, r3
 8017f06:	d035      	beq.n	8017f74 <ai_platform_network_create+0x94>
 8017f08:	2218      	movs	r2, #24
 8017f0a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8017f0e:	3308      	adds	r3, #8
 8017f10:	601a      	str	r2, [r3, #0]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	4293      	cmp	r3, r2
 8017f16:	d12d      	bne.n	8017f74 <ai_platform_network_create+0x94>
 8017f18:	2218      	movs	r2, #24
 8017f1a:	4b6b      	ldr	r3, [pc, #428]	; (80180c8 <ai_platform_network_create+0x1e8>)
 8017f1c:	601a      	str	r2, [r3, #0]
 8017f1e:	681a      	ldr	r2, [r3, #0]
 8017f20:	2a18      	cmp	r2, #24
 8017f22:	d12d      	bne.n	8017f80 <ai_platform_network_create+0xa0>
 8017f24:	2201      	movs	r2, #1
 8017f26:	601a      	str	r2, [r3, #0]
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	2a00      	cmp	r2, #0
 8017f2c:	d1fc      	bne.n	8017f28 <ai_platform_network_create+0x48>
 8017f2e:	f7ff fc37 	bl	80177a0 <_ai_platform_release_crc>
 8017f32:	4a66      	ldr	r2, [pc, #408]	; (80180cc <ai_platform_network_create+0x1ec>)
 8017f34:	6813      	ldr	r3, [r2, #0]
 8017f36:	f023 0301 	bic.w	r3, r3, #1
 8017f3a:	6013      	str	r3, [r2, #0]
 8017f3c:	f7ff fc2e 	bl	801779c <_ai_platform_acquire_crc>
 8017f40:	4b5f      	ldr	r3, [pc, #380]	; (80180c0 <ai_platform_network_create+0x1e0>)
 8017f42:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d022      	beq.n	8017f90 <ai_platform_network_create+0xb0>
 8017f4a:	2218      	movs	r2, #24
 8017f4c:	4b5e      	ldr	r3, [pc, #376]	; (80180c8 <ai_platform_network_create+0x1e8>)
 8017f4e:	601a      	str	r2, [r3, #0]
 8017f50:	681a      	ldr	r2, [r3, #0]
 8017f52:	2a18      	cmp	r2, #24
 8017f54:	d02a      	beq.n	8017fac <ai_platform_network_create+0xcc>
 8017f56:	4b5e      	ldr	r3, [pc, #376]	; (80180d0 <ai_platform_network_create+0x1f0>)
 8017f58:	2201      	movs	r2, #1
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	601a      	str	r2, [r3, #0]
 8017f5e:	680b      	ldr	r3, [r1, #0]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d1fc      	bne.n	8017f5e <ai_platform_network_create+0x7e>
 8017f64:	4b57      	ldr	r3, [pc, #348]	; (80180c4 <ai_platform_network_create+0x1e4>)
 8017f66:	495b      	ldr	r1, [pc, #364]	; (80180d4 <ai_platform_network_create+0x1f4>)
 8017f68:	4a5b      	ldr	r2, [pc, #364]	; (80180d8 <ai_platform_network_create+0x1f8>)
 8017f6a:	6019      	str	r1, [r3, #0]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	4293      	cmp	r3, r2
 8017f70:	d029      	beq.n	8017fc6 <ai_platform_network_create+0xe6>
 8017f72:	e7fe      	b.n	8017f72 <ai_platform_network_create+0x92>
 8017f74:	2218      	movs	r2, #24
 8017f76:	4b56      	ldr	r3, [pc, #344]	; (80180d0 <ai_platform_network_create+0x1f0>)
 8017f78:	601a      	str	r2, [r3, #0]
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	2a18      	cmp	r2, #24
 8017f7e:	d0d1      	beq.n	8017f24 <ai_platform_network_create+0x44>
 8017f80:	f7ff fc0e 	bl	80177a0 <_ai_platform_release_crc>
 8017f84:	f244 1333 	movw	r3, #16691	; 0x4133
 8017f88:	4618      	mov	r0, r3
 8017f8a:	b002      	add	sp, #8
 8017f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f90:	2301      	movs	r3, #1
 8017f92:	6083      	str	r3, [r0, #8]
 8017f94:	f100 0308 	add.w	r3, r0, #8
 8017f98:	681a      	ldr	r2, [r3, #0]
 8017f9a:	2a00      	cmp	r2, #0
 8017f9c:	d1fc      	bne.n	8017f98 <ai_platform_network_create+0xb8>
 8017f9e:	4a4d      	ldr	r2, [pc, #308]	; (80180d4 <ai_platform_network_create+0x1f4>)
 8017fa0:	4b4d      	ldr	r3, [pc, #308]	; (80180d8 <ai_platform_network_create+0x1f8>)
 8017fa2:	6002      	str	r2, [r0, #0]
 8017fa4:	6802      	ldr	r2, [r0, #0]
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d00d      	beq.n	8017fc6 <ai_platform_network_create+0xe6>
 8017faa:	e7fe      	b.n	8017faa <ai_platform_network_create+0xca>
 8017fac:	2201      	movs	r2, #1
 8017fae:	4619      	mov	r1, r3
 8017fb0:	601a      	str	r2, [r3, #0]
 8017fb2:	680b      	ldr	r3, [r1, #0]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d1fc      	bne.n	8017fb2 <ai_platform_network_create+0xd2>
 8017fb8:	4b41      	ldr	r3, [pc, #260]	; (80180c0 <ai_platform_network_create+0x1e0>)
 8017fba:	4946      	ldr	r1, [pc, #280]	; (80180d4 <ai_platform_network_create+0x1f4>)
 8017fbc:	4a46      	ldr	r2, [pc, #280]	; (80180d8 <ai_platform_network_create+0x1f8>)
 8017fbe:	6019      	str	r1, [r3, #0]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	4293      	cmp	r3, r2
 8017fc4:	d12d      	bne.n	8018022 <ai_platform_network_create+0x142>
 8017fc6:	f7ff fbeb 	bl	80177a0 <_ai_platform_release_crc>
 8017fca:	2d00      	cmp	r5, #0
 8017fcc:	d075      	beq.n	80180ba <ai_platform_network_create+0x1da>
 8017fce:	4b43      	ldr	r3, [pc, #268]	; (80180dc <ai_platform_network_create+0x1fc>)
 8017fd0:	6023      	str	r3, [r4, #0]
 8017fd2:	602c      	str	r4, [r5, #0]
 8017fd4:	f000 fd06 	bl	80189e4 <core_init>
 8017fd8:	b910      	cbnz	r0, 8017fe0 <ai_platform_network_create+0x100>
 8017fda:	f04f 0930 	mov.w	r9, #48	; 0x30
 8017fde:	e03f      	b.n	8018060 <ai_platform_network_create+0x180>
 8017fe0:	4a3a      	ldr	r2, [pc, #232]	; (80180cc <ai_platform_network_create+0x1ec>)
 8017fe2:	6813      	ldr	r3, [r2, #0]
 8017fe4:	f023 0301 	bic.w	r3, r3, #1
 8017fe8:	6013      	str	r3, [r2, #0]
 8017fea:	f7ff fbd7 	bl	801779c <_ai_platform_acquire_crc>
 8017fee:	4b34      	ldr	r3, [pc, #208]	; (80180c0 <ai_platform_network_create+0x1e0>)
 8017ff0:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	d015      	beq.n	8018024 <ai_platform_network_create+0x144>
 8017ff8:	2218      	movs	r2, #24
 8017ffa:	4b33      	ldr	r3, [pc, #204]	; (80180c8 <ai_platform_network_create+0x1e8>)
 8017ffc:	601a      	str	r2, [r3, #0]
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	2a18      	cmp	r2, #24
 8018002:	d03d      	beq.n	8018080 <ai_platform_network_create+0x1a0>
 8018004:	4b32      	ldr	r3, [pc, #200]	; (80180d0 <ai_platform_network_create+0x1f0>)
 8018006:	2201      	movs	r2, #1
 8018008:	4619      	mov	r1, r3
 801800a:	601a      	str	r2, [r3, #0]
 801800c:	680b      	ldr	r3, [r1, #0]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d1fc      	bne.n	801800c <ai_platform_network_create+0x12c>
 8018012:	4b2c      	ldr	r3, [pc, #176]	; (80180c4 <ai_platform_network_create+0x1e4>)
 8018014:	492f      	ldr	r1, [pc, #188]	; (80180d4 <ai_platform_network_create+0x1f4>)
 8018016:	4a30      	ldr	r2, [pc, #192]	; (80180d8 <ai_platform_network_create+0x1f8>)
 8018018:	6019      	str	r1, [r3, #0]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	4293      	cmp	r3, r2
 801801e:	d00e      	beq.n	801803e <ai_platform_network_create+0x15e>
 8018020:	e7fe      	b.n	8018020 <ai_platform_network_create+0x140>
 8018022:	e7fe      	b.n	8018022 <ai_platform_network_create+0x142>
 8018024:	2301      	movs	r3, #1
 8018026:	6083      	str	r3, [r0, #8]
 8018028:	f100 0308 	add.w	r3, r0, #8
 801802c:	681a      	ldr	r2, [r3, #0]
 801802e:	2a00      	cmp	r2, #0
 8018030:	d1fc      	bne.n	801802c <ai_platform_network_create+0x14c>
 8018032:	4a28      	ldr	r2, [pc, #160]	; (80180d4 <ai_platform_network_create+0x1f4>)
 8018034:	4b28      	ldr	r3, [pc, #160]	; (80180d8 <ai_platform_network_create+0x1f8>)
 8018036:	6002      	str	r2, [r0, #0]
 8018038:	6802      	ldr	r2, [r0, #0]
 801803a:	429a      	cmp	r2, r3
 801803c:	d139      	bne.n	80180b2 <ai_platform_network_create+0x1d2>
 801803e:	f7ff fbaf 	bl	80177a0 <_ai_platform_release_crc>
 8018042:	2200      	movs	r2, #0
 8018044:	4639      	mov	r1, r7
 8018046:	4630      	mov	r0, r6
 8018048:	f001 faf8 	bl	801963c <ai_version_get>
 801804c:	2200      	movs	r2, #0
 801804e:	4681      	mov	r9, r0
 8018050:	2105      	movs	r1, #5
 8018052:	2001      	movs	r0, #1
 8018054:	f001 faf2 	bl	801963c <ai_version_get>
 8018058:	4581      	cmp	r9, r0
 801805a:	d01f      	beq.n	801809c <ai_platform_network_create+0x1bc>
 801805c:	f04f 0901 	mov.w	r9, #1
 8018060:	2300      	movs	r3, #0
 8018062:	f04f 0a10 	mov.w	sl, #16
 8018066:	602b      	str	r3, [r5, #0]
 8018068:	4642      	mov	r2, r8
 801806a:	4639      	mov	r1, r7
 801806c:	4630      	mov	r0, r6
 801806e:	f001 fae5 	bl	801963c <ai_version_get>
 8018072:	2300      	movs	r3, #0
 8018074:	f369 0307 	bfi	r3, r9, #0, #8
 8018078:	6460      	str	r0, [r4, #68]	; 0x44
 801807a:	f36a 231f 	bfi	r3, sl, #8, #24
 801807e:	e783      	b.n	8017f88 <ai_platform_network_create+0xa8>
 8018080:	2201      	movs	r2, #1
 8018082:	4619      	mov	r1, r3
 8018084:	601a      	str	r2, [r3, #0]
 8018086:	680b      	ldr	r3, [r1, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d1fc      	bne.n	8018086 <ai_platform_network_create+0x1a6>
 801808c:	4b0c      	ldr	r3, [pc, #48]	; (80180c0 <ai_platform_network_create+0x1e0>)
 801808e:	4911      	ldr	r1, [pc, #68]	; (80180d4 <ai_platform_network_create+0x1f4>)
 8018090:	4a11      	ldr	r2, [pc, #68]	; (80180d8 <ai_platform_network_create+0x1f8>)
 8018092:	6019      	str	r1, [r3, #0]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	4293      	cmp	r3, r2
 8018098:	d0d1      	beq.n	801803e <ai_platform_network_create+0x15e>
 801809a:	e7fe      	b.n	801809a <ai_platform_network_create+0x1ba>
 801809c:	4b10      	ldr	r3, [pc, #64]	; (80180e0 <ai_platform_network_create+0x200>)
 801809e:	a802      	add	r0, sp, #8
 80180a0:	f840 3d04 	str.w	r3, [r0, #-4]!
 80180a4:	f001 fa36 	bl	8019514 <ai_check_custom_types>
 80180a8:	b120      	cbz	r0, 80180b4 <ai_platform_network_create+0x1d4>
 80180aa:	f04f 0a00 	mov.w	sl, #0
 80180ae:	46d1      	mov	r9, sl
 80180b0:	e7da      	b.n	8018068 <ai_platform_network_create+0x188>
 80180b2:	e7fe      	b.n	80180b2 <ai_platform_network_create+0x1d2>
 80180b4:	f04f 0902 	mov.w	r9, #2
 80180b8:	e7d2      	b.n	8018060 <ai_platform_network_create+0x180>
 80180ba:	f241 0310 	movw	r3, #4112	; 0x1010
 80180be:	e763      	b.n	8017f88 <ai_platform_network_create+0xa8>
 80180c0:	40023000 	.word	0x40023000
 80180c4:	50023000 	.word	0x50023000
 80180c8:	40023008 	.word	0x40023008
 80180cc:	e0002000 	.word	0xe0002000
 80180d0:	50023008 	.word	0x50023008
 80180d4:	f407a5c2 	.word	0xf407a5c2
 80180d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80180dc:	a1c00100 	.word	0xa1c00100
 80180e0:	84048403 	.word	0x84048403

080180e4 <ai_platform_network_init>:
 80180e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180e8:	2800      	cmp	r0, #0
 80180ea:	d034      	beq.n	8018156 <ai_platform_network_init+0x72>
 80180ec:	4b8f      	ldr	r3, [pc, #572]	; (801832c <ai_platform_network_init+0x248>)
 80180ee:	6802      	ldr	r2, [r0, #0]
 80180f0:	4604      	mov	r4, r0
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d12f      	bne.n	8018156 <ai_platform_network_init+0x72>
 80180f6:	4a8e      	ldr	r2, [pc, #568]	; (8018330 <ai_platform_network_init+0x24c>)
 80180f8:	460e      	mov	r6, r1
 80180fa:	6813      	ldr	r3, [r2, #0]
 80180fc:	f023 0301 	bic.w	r3, r3, #1
 8018100:	6013      	str	r3, [r2, #0]
 8018102:	f7ff fb4b 	bl	801779c <_ai_platform_acquire_crc>
 8018106:	4b8b      	ldr	r3, [pc, #556]	; (8018334 <ai_platform_network_init+0x250>)
 8018108:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 801810c:	429a      	cmp	r2, r3
 801810e:	d014      	beq.n	801813a <ai_platform_network_init+0x56>
 8018110:	2218      	movs	r2, #24
 8018112:	4b89      	ldr	r3, [pc, #548]	; (8018338 <ai_platform_network_init+0x254>)
 8018114:	601a      	str	r2, [r3, #0]
 8018116:	681a      	ldr	r2, [r3, #0]
 8018118:	2a18      	cmp	r2, #24
 801811a:	d03f      	beq.n	801819c <ai_platform_network_init+0xb8>
 801811c:	4b87      	ldr	r3, [pc, #540]	; (801833c <ai_platform_network_init+0x258>)
 801811e:	2201      	movs	r2, #1
 8018120:	4619      	mov	r1, r3
 8018122:	601a      	str	r2, [r3, #0]
 8018124:	680b      	ldr	r3, [r1, #0]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d1fc      	bne.n	8018124 <ai_platform_network_init+0x40>
 801812a:	4b85      	ldr	r3, [pc, #532]	; (8018340 <ai_platform_network_init+0x25c>)
 801812c:	4985      	ldr	r1, [pc, #532]	; (8018344 <ai_platform_network_init+0x260>)
 801812e:	4a86      	ldr	r2, [pc, #536]	; (8018348 <ai_platform_network_init+0x264>)
 8018130:	6019      	str	r1, [r3, #0]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4293      	cmp	r3, r2
 8018136:	d03f      	beq.n	80181b8 <ai_platform_network_init+0xd4>
 8018138:	e7fe      	b.n	8018138 <ai_platform_network_init+0x54>
 801813a:	2301      	movs	r3, #1
 801813c:	f100 0208 	add.w	r2, r0, #8
 8018140:	6083      	str	r3, [r0, #8]
 8018142:	6813      	ldr	r3, [r2, #0]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d1fc      	bne.n	8018142 <ai_platform_network_init+0x5e>
 8018148:	4a7e      	ldr	r2, [pc, #504]	; (8018344 <ai_platform_network_init+0x260>)
 801814a:	4b7f      	ldr	r3, [pc, #508]	; (8018348 <ai_platform_network_init+0x264>)
 801814c:	6002      	str	r2, [r0, #0]
 801814e:	6802      	ldr	r2, [r0, #0]
 8018150:	429a      	cmp	r2, r3
 8018152:	d031      	beq.n	80181b8 <ai_platform_network_init+0xd4>
 8018154:	e7fe      	b.n	8018154 <ai_platform_network_init+0x70>
 8018156:	4a76      	ldr	r2, [pc, #472]	; (8018330 <ai_platform_network_init+0x24c>)
 8018158:	6813      	ldr	r3, [r2, #0]
 801815a:	f023 0301 	bic.w	r3, r3, #1
 801815e:	6013      	str	r3, [r2, #0]
 8018160:	f7ff fb1c 	bl	801779c <_ai_platform_acquire_crc>
 8018164:	4b73      	ldr	r3, [pc, #460]	; (8018334 <ai_platform_network_init+0x250>)
 8018166:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 801816a:	429a      	cmp	r2, r3
 801816c:	d056      	beq.n	801821c <ai_platform_network_init+0x138>
 801816e:	2218      	movs	r2, #24
 8018170:	4b71      	ldr	r3, [pc, #452]	; (8018338 <ai_platform_network_init+0x254>)
 8018172:	601a      	str	r2, [r3, #0]
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	2a18      	cmp	r2, #24
 8018178:	f000 80c4 	beq.w	8018304 <ai_platform_network_init+0x220>
 801817c:	4b6f      	ldr	r3, [pc, #444]	; (801833c <ai_platform_network_init+0x258>)
 801817e:	2201      	movs	r2, #1
 8018180:	4619      	mov	r1, r3
 8018182:	601a      	str	r2, [r3, #0]
 8018184:	680b      	ldr	r3, [r1, #0]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d1fc      	bne.n	8018184 <ai_platform_network_init+0xa0>
 801818a:	4b6d      	ldr	r3, [pc, #436]	; (8018340 <ai_platform_network_init+0x25c>)
 801818c:	496d      	ldr	r1, [pc, #436]	; (8018344 <ai_platform_network_init+0x260>)
 801818e:	4a6e      	ldr	r2, [pc, #440]	; (8018348 <ai_platform_network_init+0x264>)
 8018190:	6019      	str	r1, [r3, #0]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	4293      	cmp	r3, r2
 8018196:	f000 80c2 	beq.w	801831e <ai_platform_network_init+0x23a>
 801819a:	e7fe      	b.n	801819a <ai_platform_network_init+0xb6>
 801819c:	2201      	movs	r2, #1
 801819e:	4619      	mov	r1, r3
 80181a0:	601a      	str	r2, [r3, #0]
 80181a2:	680b      	ldr	r3, [r1, #0]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d1fc      	bne.n	80181a2 <ai_platform_network_init+0xbe>
 80181a8:	4b62      	ldr	r3, [pc, #392]	; (8018334 <ai_platform_network_init+0x250>)
 80181aa:	4966      	ldr	r1, [pc, #408]	; (8018344 <ai_platform_network_init+0x260>)
 80181ac:	4a66      	ldr	r2, [pc, #408]	; (8018348 <ai_platform_network_init+0x264>)
 80181ae:	6019      	str	r1, [r3, #0]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	4293      	cmp	r3, r2
 80181b4:	f040 80b8 	bne.w	8018328 <ai_platform_network_init+0x244>
 80181b8:	f7ff faf2 	bl	80177a0 <_ai_platform_release_crc>
 80181bc:	2e00      	cmp	r6, #0
 80181be:	d07f      	beq.n	80182c0 <ai_platform_network_init+0x1dc>
 80181c0:	4b62      	ldr	r3, [pc, #392]	; (801834c <ai_platform_network_init+0x268>)
 80181c2:	6832      	ldr	r2, [r6, #0]
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d050      	beq.n	801826a <ai_platform_network_init+0x186>
 80181c8:	2101      	movs	r1, #1
 80181ca:	4630      	mov	r0, r6
 80181cc:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80181d0:	f7ff fa98 	bl	8017704 <ai_buffer_get_size>
 80181d4:	4635      	mov	r5, r6
 80181d6:	f106 071c 	add.w	r7, r6, #28
 80181da:	2101      	movs	r1, #1
 80181dc:	4606      	mov	r6, r0
 80181de:	4638      	mov	r0, r7
 80181e0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80181e4:	f7ff fa8e 	bl	8017704 <ai_buffer_get_size>
 80181e8:	2e00      	cmp	r6, #0
 80181ea:	bf0a      	itet	eq
 80181ec:	46b6      	moveq	lr, r6
 80181ee:	f04f 0e01 	movne.w	lr, #1
 80181f2:	4635      	moveq	r5, r6
 80181f4:	2800      	cmp	r0, #0
 80181f6:	d177      	bne.n	80182e8 <ai_platform_network_init+0x204>
 80181f8:	4607      	mov	r7, r0
 80181fa:	4684      	mov	ip, r0
 80181fc:	f1b8 0f00 	cmp.w	r8, #0
 8018200:	d068      	beq.n	80182d4 <ai_platform_network_init+0x1f0>
 8018202:	8be3      	ldrh	r3, [r4, #30]
 8018204:	4573      	cmp	r3, lr
 8018206:	d217      	bcs.n	8018238 <ai_platform_network_init+0x154>
 8018208:	f104 0010 	add.w	r0, r4, #16
 801820c:	2212      	movs	r2, #18
 801820e:	2116      	movs	r1, #22
 8018210:	f000 fbf0 	bl	80189f4 <core_set_error>
 8018214:	2400      	movs	r4, #0
 8018216:	4620      	mov	r0, r4
 8018218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801821c:	2301      	movs	r3, #1
 801821e:	f100 0208 	add.w	r2, r0, #8
 8018222:	6083      	str	r3, [r0, #8]
 8018224:	6813      	ldr	r3, [r2, #0]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d1fc      	bne.n	8018224 <ai_platform_network_init+0x140>
 801822a:	4a46      	ldr	r2, [pc, #280]	; (8018344 <ai_platform_network_init+0x260>)
 801822c:	4b46      	ldr	r3, [pc, #280]	; (8018348 <ai_platform_network_init+0x264>)
 801822e:	6002      	str	r2, [r0, #0]
 8018230:	6802      	ldr	r2, [r0, #0]
 8018232:	429a      	cmp	r2, r3
 8018234:	d073      	beq.n	801831e <ai_platform_network_init+0x23a>
 8018236:	e7fe      	b.n	8018236 <ai_platform_network_init+0x152>
 8018238:	f1be 0f00 	cmp.w	lr, #0
 801823c:	d006      	beq.n	801824c <ai_platform_network_init+0x168>
 801823e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018240:	6a26      	ldr	r6, [r4, #32]
 8018242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018244:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018248:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801824c:	2600      	movs	r6, #0
 801824e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8018250:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8018254:	4563      	cmp	r3, ip
 8018256:	83a6      	strh	r6, [r4, #28]
 8018258:	d21b      	bcs.n	8018292 <ai_platform_network_init+0x1ae>
 801825a:	f104 0010 	add.w	r0, r4, #16
 801825e:	2213      	movs	r2, #19
 8018260:	2116      	movs	r1, #22
 8018262:	4634      	mov	r4, r6
 8018264:	f000 fbc6 	bl	80189f4 <core_set_error>
 8018268:	e7d5      	b.n	8018216 <ai_platform_network_init+0x132>
 801826a:	6930      	ldr	r0, [r6, #16]
 801826c:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8018270:	89b3      	ldrh	r3, [r6, #12]
 8018272:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8018276:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801827a:	62a0      	str	r0, [r4, #40]	; 0x28
 801827c:	2203      	movs	r2, #3
 801827e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8018282:	84a3      	strh	r3, [r4, #36]	; 0x24
 8018284:	60e2      	str	r2, [r4, #12]
 8018286:	4620      	mov	r0, r4
 8018288:	f001 f96e 	bl	8019568 <ai_layers_init_all>
 801828c:	4620      	mov	r0, r4
 801828e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018292:	f1bc 0f00 	cmp.w	ip, #0
 8018296:	d01b      	beq.n	80182d0 <ai_platform_network_init+0x1ec>
 8018298:	ebcc 08cc 	rsb	r8, ip, ip, lsl #3
 801829c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80182a0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80182a2:	eb07 0e06 	add.w	lr, r7, r6
 80182a6:	4435      	add	r5, r6
 80182a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80182ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80182ae:	361c      	adds	r6, #28
 80182b0:	4546      	cmp	r6, r8
 80182b2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80182b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80182ba:	d1f1      	bne.n	80182a0 <ai_platform_network_init+0x1bc>
 80182bc:	2300      	movs	r3, #0
 80182be:	e7dd      	b.n	801827c <ai_platform_network_init+0x198>
 80182c0:	f104 0010 	add.w	r0, r4, #16
 80182c4:	2211      	movs	r2, #17
 80182c6:	2110      	movs	r1, #16
 80182c8:	4634      	mov	r4, r6
 80182ca:	f000 fb93 	bl	80189f4 <core_set_error>
 80182ce:	e7a2      	b.n	8018216 <ai_platform_network_init+0x132>
 80182d0:	4663      	mov	r3, ip
 80182d2:	e7d3      	b.n	801827c <ai_platform_network_init+0x198>
 80182d4:	2e00      	cmp	r6, #0
 80182d6:	d094      	beq.n	8018202 <ai_platform_network_init+0x11e>
 80182d8:	f104 0010 	add.w	r0, r4, #16
 80182dc:	2212      	movs	r2, #18
 80182de:	2110      	movs	r1, #16
 80182e0:	4644      	mov	r4, r8
 80182e2:	f000 fb87 	bl	80189f4 <core_set_error>
 80182e6:	e796      	b.n	8018216 <ai_platform_network_init+0x132>
 80182e8:	f1b9 0f00 	cmp.w	r9, #0
 80182ec:	d002      	beq.n	80182f4 <ai_platform_network_init+0x210>
 80182ee:	f04f 0c01 	mov.w	ip, #1
 80182f2:	e783      	b.n	80181fc <ai_platform_network_init+0x118>
 80182f4:	f104 0010 	add.w	r0, r4, #16
 80182f8:	2213      	movs	r2, #19
 80182fa:	2110      	movs	r1, #16
 80182fc:	464c      	mov	r4, r9
 80182fe:	f000 fb79 	bl	80189f4 <core_set_error>
 8018302:	e788      	b.n	8018216 <ai_platform_network_init+0x132>
 8018304:	2201      	movs	r2, #1
 8018306:	4619      	mov	r1, r3
 8018308:	601a      	str	r2, [r3, #0]
 801830a:	680b      	ldr	r3, [r1, #0]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d1fc      	bne.n	801830a <ai_platform_network_init+0x226>
 8018310:	4b08      	ldr	r3, [pc, #32]	; (8018334 <ai_platform_network_init+0x250>)
 8018312:	490c      	ldr	r1, [pc, #48]	; (8018344 <ai_platform_network_init+0x260>)
 8018314:	4a0c      	ldr	r2, [pc, #48]	; (8018348 <ai_platform_network_init+0x264>)
 8018316:	6019      	str	r1, [r3, #0]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	4293      	cmp	r3, r2
 801831c:	d103      	bne.n	8018326 <ai_platform_network_init+0x242>
 801831e:	f7ff fa3f 	bl	80177a0 <_ai_platform_release_crc>
 8018322:	2400      	movs	r4, #0
 8018324:	e777      	b.n	8018216 <ai_platform_network_init+0x132>
 8018326:	e7fe      	b.n	8018326 <ai_platform_network_init+0x242>
 8018328:	e7fe      	b.n	8018328 <ai_platform_network_init+0x244>
 801832a:	bf00      	nop
 801832c:	a1c00100 	.word	0xa1c00100
 8018330:	e0002000 	.word	0xe0002000
 8018334:	40023000 	.word	0x40023000
 8018338:	40023008 	.word	0x40023008
 801833c:	50023008 	.word	0x50023008
 8018340:	50023000 	.word	0x50023000
 8018344:	f407a5c2 	.word	0xf407a5c2
 8018348:	b5e8b5cd 	.word	0xb5e8b5cd
 801834c:	a1facade 	.word	0xa1facade

08018350 <ai_platform_network_post_init>:
 8018350:	b538      	push	{r3, r4, r5, lr}
 8018352:	b120      	cbz	r0, 801835e <ai_platform_network_post_init+0xe>
 8018354:	4b52      	ldr	r3, [pc, #328]	; (80184a0 <ai_platform_network_post_init+0x150>)
 8018356:	6802      	ldr	r2, [r0, #0]
 8018358:	4604      	mov	r4, r0
 801835a:	429a      	cmp	r2, r3
 801835c:	d032      	beq.n	80183c4 <ai_platform_network_post_init+0x74>
 801835e:	4a51      	ldr	r2, [pc, #324]	; (80184a4 <ai_platform_network_post_init+0x154>)
 8018360:	6813      	ldr	r3, [r2, #0]
 8018362:	f023 0301 	bic.w	r3, r3, #1
 8018366:	6013      	str	r3, [r2, #0]
 8018368:	f7ff fa18 	bl	801779c <_ai_platform_acquire_crc>
 801836c:	4b4e      	ldr	r3, [pc, #312]	; (80184a8 <ai_platform_network_post_init+0x158>)
 801836e:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8018372:	429a      	cmp	r2, r3
 8018374:	d014      	beq.n	80183a0 <ai_platform_network_post_init+0x50>
 8018376:	2218      	movs	r2, #24
 8018378:	4b4c      	ldr	r3, [pc, #304]	; (80184ac <ai_platform_network_post_init+0x15c>)
 801837a:	601a      	str	r2, [r3, #0]
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	2a18      	cmp	r2, #24
 8018380:	d041      	beq.n	8018406 <ai_platform_network_post_init+0xb6>
 8018382:	4b4b      	ldr	r3, [pc, #300]	; (80184b0 <ai_platform_network_post_init+0x160>)
 8018384:	2201      	movs	r2, #1
 8018386:	4619      	mov	r1, r3
 8018388:	601a      	str	r2, [r3, #0]
 801838a:	680b      	ldr	r3, [r1, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d1fc      	bne.n	801838a <ai_platform_network_post_init+0x3a>
 8018390:	4b48      	ldr	r3, [pc, #288]	; (80184b4 <ai_platform_network_post_init+0x164>)
 8018392:	4949      	ldr	r1, [pc, #292]	; (80184b8 <ai_platform_network_post_init+0x168>)
 8018394:	4a49      	ldr	r2, [pc, #292]	; (80184bc <ai_platform_network_post_init+0x16c>)
 8018396:	6019      	str	r1, [r3, #0]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4293      	cmp	r3, r2
 801839c:	d00d      	beq.n	80183ba <ai_platform_network_post_init+0x6a>
 801839e:	e7fe      	b.n	801839e <ai_platform_network_post_init+0x4e>
 80183a0:	2301      	movs	r3, #1
 80183a2:	f100 0208 	add.w	r2, r0, #8
 80183a6:	6083      	str	r3, [r0, #8]
 80183a8:	6813      	ldr	r3, [r2, #0]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d1fc      	bne.n	80183a8 <ai_platform_network_post_init+0x58>
 80183ae:	4a42      	ldr	r2, [pc, #264]	; (80184b8 <ai_platform_network_post_init+0x168>)
 80183b0:	4b42      	ldr	r3, [pc, #264]	; (80184bc <ai_platform_network_post_init+0x16c>)
 80183b2:	6002      	str	r2, [r0, #0]
 80183b4:	6802      	ldr	r2, [r0, #0]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d103      	bne.n	80183c2 <ai_platform_network_post_init+0x72>
 80183ba:	f7ff f9f1 	bl	80177a0 <_ai_platform_release_crc>
 80183be:	2000      	movs	r0, #0
 80183c0:	bd38      	pop	{r3, r4, r5, pc}
 80183c2:	e7fe      	b.n	80183c2 <ai_platform_network_post_init+0x72>
 80183c4:	4a37      	ldr	r2, [pc, #220]	; (80184a4 <ai_platform_network_post_init+0x154>)
 80183c6:	6813      	ldr	r3, [r2, #0]
 80183c8:	f023 0301 	bic.w	r3, r3, #1
 80183cc:	6013      	str	r3, [r2, #0]
 80183ce:	f7ff f9e5 	bl	801779c <_ai_platform_acquire_crc>
 80183d2:	4b35      	ldr	r3, [pc, #212]	; (80184a8 <ai_platform_network_post_init+0x158>)
 80183d4:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80183d8:	429a      	cmp	r2, r3
 80183da:	d022      	beq.n	8018422 <ai_platform_network_post_init+0xd2>
 80183dc:	2218      	movs	r2, #24
 80183de:	4b33      	ldr	r3, [pc, #204]	; (80184ac <ai_platform_network_post_init+0x15c>)
 80183e0:	601a      	str	r2, [r3, #0]
 80183e2:	681a      	ldr	r2, [r3, #0]
 80183e4:	2a18      	cmp	r2, #24
 80183e6:	d041      	beq.n	801846c <ai_platform_network_post_init+0x11c>
 80183e8:	4b31      	ldr	r3, [pc, #196]	; (80184b0 <ai_platform_network_post_init+0x160>)
 80183ea:	2201      	movs	r2, #1
 80183ec:	4619      	mov	r1, r3
 80183ee:	601a      	str	r2, [r3, #0]
 80183f0:	680b      	ldr	r3, [r1, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d1fc      	bne.n	80183f0 <ai_platform_network_post_init+0xa0>
 80183f6:	4b2f      	ldr	r3, [pc, #188]	; (80184b4 <ai_platform_network_post_init+0x164>)
 80183f8:	492f      	ldr	r1, [pc, #188]	; (80184b8 <ai_platform_network_post_init+0x168>)
 80183fa:	4a30      	ldr	r2, [pc, #192]	; (80184bc <ai_platform_network_post_init+0x16c>)
 80183fc:	6019      	str	r1, [r3, #0]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	4293      	cmp	r3, r2
 8018402:	d01b      	beq.n	801843c <ai_platform_network_post_init+0xec>
 8018404:	e7fe      	b.n	8018404 <ai_platform_network_post_init+0xb4>
 8018406:	2201      	movs	r2, #1
 8018408:	4619      	mov	r1, r3
 801840a:	601a      	str	r2, [r3, #0]
 801840c:	680b      	ldr	r3, [r1, #0]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d1fc      	bne.n	801840c <ai_platform_network_post_init+0xbc>
 8018412:	4b25      	ldr	r3, [pc, #148]	; (80184a8 <ai_platform_network_post_init+0x158>)
 8018414:	4928      	ldr	r1, [pc, #160]	; (80184b8 <ai_platform_network_post_init+0x168>)
 8018416:	4a29      	ldr	r2, [pc, #164]	; (80184bc <ai_platform_network_post_init+0x16c>)
 8018418:	6019      	str	r1, [r3, #0]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	4293      	cmp	r3, r2
 801841e:	d0cc      	beq.n	80183ba <ai_platform_network_post_init+0x6a>
 8018420:	e7fe      	b.n	8018420 <ai_platform_network_post_init+0xd0>
 8018422:	2301      	movs	r3, #1
 8018424:	f100 0208 	add.w	r2, r0, #8
 8018428:	6083      	str	r3, [r0, #8]
 801842a:	6813      	ldr	r3, [r2, #0]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d1fc      	bne.n	801842a <ai_platform_network_post_init+0xda>
 8018430:	4a21      	ldr	r2, [pc, #132]	; (80184b8 <ai_platform_network_post_init+0x168>)
 8018432:	4b22      	ldr	r3, [pc, #136]	; (80184bc <ai_platform_network_post_init+0x16c>)
 8018434:	6002      	str	r2, [r0, #0]
 8018436:	6802      	ldr	r2, [r0, #0]
 8018438:	429a      	cmp	r2, r3
 801843a:	d125      	bne.n	8018488 <ai_platform_network_post_init+0x138>
 801843c:	f7ff f9b0 	bl	80177a0 <_ai_platform_release_crc>
 8018440:	68e3      	ldr	r3, [r4, #12]
 8018442:	f013 0502 	ands.w	r5, r3, #2
 8018446:	d022      	beq.n	801848e <ai_platform_network_post_init+0x13e>
 8018448:	4620      	mov	r0, r4
 801844a:	f001 f8a1 	bl	8019590 <ai_layers_post_init_all>
 801844e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018450:	b1db      	cbz	r3, 801848a <ai_platform_network_post_init+0x13a>
 8018452:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8018454:	b1cd      	cbz	r5, 801848a <ai_platform_network_post_init+0x13a>
 8018456:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8018458:	4629      	mov	r1, r5
 801845a:	2000      	movs	r0, #0
 801845c:	4798      	blx	r3
 801845e:	692b      	ldr	r3, [r5, #16]
 8018460:	42ab      	cmp	r3, r5
 8018462:	d012      	beq.n	801848a <ai_platform_network_post_init+0x13a>
 8018464:	461d      	mov	r5, r3
 8018466:	b183      	cbz	r3, 801848a <ai_platform_network_post_init+0x13a>
 8018468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801846a:	e7f4      	b.n	8018456 <ai_platform_network_post_init+0x106>
 801846c:	2201      	movs	r2, #1
 801846e:	4619      	mov	r1, r3
 8018470:	601a      	str	r2, [r3, #0]
 8018472:	680b      	ldr	r3, [r1, #0]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d1fc      	bne.n	8018472 <ai_platform_network_post_init+0x122>
 8018478:	4b0b      	ldr	r3, [pc, #44]	; (80184a8 <ai_platform_network_post_init+0x158>)
 801847a:	490f      	ldr	r1, [pc, #60]	; (80184b8 <ai_platform_network_post_init+0x168>)
 801847c:	4a0f      	ldr	r2, [pc, #60]	; (80184bc <ai_platform_network_post_init+0x16c>)
 801847e:	6019      	str	r1, [r3, #0]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	4293      	cmp	r3, r2
 8018484:	d0da      	beq.n	801843c <ai_platform_network_post_init+0xec>
 8018486:	e7fe      	b.n	8018486 <ai_platform_network_post_init+0x136>
 8018488:	e7fe      	b.n	8018488 <ai_platform_network_post_init+0x138>
 801848a:	2001      	movs	r0, #1
 801848c:	bd38      	pop	{r3, r4, r5, pc}
 801848e:	f104 0010 	add.w	r0, r4, #16
 8018492:	2210      	movs	r2, #16
 8018494:	2111      	movs	r1, #17
 8018496:	f000 faad 	bl	80189f4 <core_set_error>
 801849a:	4628      	mov	r0, r5
 801849c:	bd38      	pop	{r3, r4, r5, pc}
 801849e:	bf00      	nop
 80184a0:	a1c00100 	.word	0xa1c00100
 80184a4:	e0002000 	.word	0xe0002000
 80184a8:	40023000 	.word	0x40023000
 80184ac:	40023008 	.word	0x40023008
 80184b0:	50023008 	.word	0x50023008
 80184b4:	50023000 	.word	0x50023000
 80184b8:	f407a5c2 	.word	0xf407a5c2
 80184bc:	b5e8b5cd 	.word	0xb5e8b5cd

080184c0 <ai_platform_network_process>:
 80184c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c4:	b085      	sub	sp, #20
 80184c6:	460d      	mov	r5, r1
 80184c8:	9202      	str	r2, [sp, #8]
 80184ca:	4604      	mov	r4, r0
 80184cc:	b120      	cbz	r0, 80184d8 <ai_platform_network_process+0x18>
 80184ce:	4b83      	ldr	r3, [pc, #524]	; (80186dc <ai_platform_network_process+0x21c>)
 80184d0:	6802      	ldr	r2, [r0, #0]
 80184d2:	429a      	cmp	r2, r3
 80184d4:	bf18      	it	ne
 80184d6:	2400      	movne	r4, #0
 80184d8:	4a81      	ldr	r2, [pc, #516]	; (80186e0 <ai_platform_network_process+0x220>)
 80184da:	6813      	ldr	r3, [r2, #0]
 80184dc:	f023 0301 	bic.w	r3, r3, #1
 80184e0:	6013      	str	r3, [r2, #0]
 80184e2:	f7ff f95b 	bl	801779c <_ai_platform_acquire_crc>
 80184e6:	4b7f      	ldr	r3, [pc, #508]	; (80186e4 <ai_platform_network_process+0x224>)
 80184e8:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d014      	beq.n	801851a <ai_platform_network_process+0x5a>
 80184f0:	2218      	movs	r2, #24
 80184f2:	4b7d      	ldr	r3, [pc, #500]	; (80186e8 <ai_platform_network_process+0x228>)
 80184f4:	601a      	str	r2, [r3, #0]
 80184f6:	681a      	ldr	r2, [r3, #0]
 80184f8:	2a18      	cmp	r2, #24
 80184fa:	d01c      	beq.n	8018536 <ai_platform_network_process+0x76>
 80184fc:	4b7b      	ldr	r3, [pc, #492]	; (80186ec <ai_platform_network_process+0x22c>)
 80184fe:	2201      	movs	r2, #1
 8018500:	4619      	mov	r1, r3
 8018502:	601a      	str	r2, [r3, #0]
 8018504:	680b      	ldr	r3, [r1, #0]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d1fc      	bne.n	8018504 <ai_platform_network_process+0x44>
 801850a:	4b79      	ldr	r3, [pc, #484]	; (80186f0 <ai_platform_network_process+0x230>)
 801850c:	4979      	ldr	r1, [pc, #484]	; (80186f4 <ai_platform_network_process+0x234>)
 801850e:	4a7a      	ldr	r2, [pc, #488]	; (80186f8 <ai_platform_network_process+0x238>)
 8018510:	6019      	str	r1, [r3, #0]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	4293      	cmp	r3, r2
 8018516:	d01c      	beq.n	8018552 <ai_platform_network_process+0x92>
 8018518:	e7fe      	b.n	8018518 <ai_platform_network_process+0x58>
 801851a:	2301      	movs	r3, #1
 801851c:	6083      	str	r3, [r0, #8]
 801851e:	f100 0308 	add.w	r3, r0, #8
 8018522:	681a      	ldr	r2, [r3, #0]
 8018524:	2a00      	cmp	r2, #0
 8018526:	d1fc      	bne.n	8018522 <ai_platform_network_process+0x62>
 8018528:	4a72      	ldr	r2, [pc, #456]	; (80186f4 <ai_platform_network_process+0x234>)
 801852a:	4b73      	ldr	r3, [pc, #460]	; (80186f8 <ai_platform_network_process+0x238>)
 801852c:	6002      	str	r2, [r0, #0]
 801852e:	6802      	ldr	r2, [r0, #0]
 8018530:	429a      	cmp	r2, r3
 8018532:	d00e      	beq.n	8018552 <ai_platform_network_process+0x92>
 8018534:	e7fe      	b.n	8018534 <ai_platform_network_process+0x74>
 8018536:	2201      	movs	r2, #1
 8018538:	4619      	mov	r1, r3
 801853a:	601a      	str	r2, [r3, #0]
 801853c:	680b      	ldr	r3, [r1, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d1fc      	bne.n	801853c <ai_platform_network_process+0x7c>
 8018542:	4b68      	ldr	r3, [pc, #416]	; (80186e4 <ai_platform_network_process+0x224>)
 8018544:	496b      	ldr	r1, [pc, #428]	; (80186f4 <ai_platform_network_process+0x234>)
 8018546:	4a6c      	ldr	r2, [pc, #432]	; (80186f8 <ai_platform_network_process+0x238>)
 8018548:	6019      	str	r1, [r3, #0]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	4293      	cmp	r3, r2
 801854e:	f040 823e 	bne.w	80189ce <ai_platform_network_process+0x50e>
 8018552:	f7ff f925 	bl	80177a0 <_ai_platform_release_crc>
 8018556:	2c00      	cmp	r4, #0
 8018558:	f000 8242 	beq.w	80189e0 <ai_platform_network_process+0x520>
 801855c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801855e:	2a00      	cmp	r2, #0
 8018560:	f000 808c 	beq.w	801867c <ai_platform_network_process+0x1bc>
 8018564:	2600      	movs	r6, #0
 8018566:	68e3      	ldr	r3, [r4, #12]
 8018568:	6166      	str	r6, [r4, #20]
 801856a:	f003 0303 	and.w	r3, r3, #3
 801856e:	2b03      	cmp	r3, #3
 8018570:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8018574:	f040 822c 	bne.w	80189d0 <ai_platform_network_process+0x510>
 8018578:	2d00      	cmp	r5, #0
 801857a:	f000 8086 	beq.w	801868a <ai_platform_network_process+0x1ca>
 801857e:	f1b9 0f00 	cmp.w	r9, #0
 8018582:	f000 8082 	beq.w	801868a <ai_platform_network_process+0x1ca>
 8018586:	f8b9 3000 	ldrh.w	r3, [r9]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d07d      	beq.n	801868a <ai_platform_network_process+0x1ca>
 801858e:	69aa      	ldr	r2, [r5, #24]
 8018590:	9401      	str	r4, [sp, #4]
 8018592:	6817      	ldr	r7, [r2, #0]
 8018594:	429e      	cmp	r6, r3
 8018596:	f080 80b1 	bcs.w	80186fc <ai_platform_network_process+0x23c>
 801859a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	f000 80ac 	beq.w	80186fc <ai_platform_network_process+0x23c>
 80185a4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80185a8:	2c00      	cmp	r4, #0
 80185aa:	f000 80a7 	beq.w	80186fc <ai_platform_network_process+0x23c>
 80185ae:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80185b2:	ea4f 1806 	mov.w	r8, r6, lsl #4
 80185b6:	f8d3 b000 	ldr.w	fp, [r3]
 80185ba:	eb1b 0a08 	adds.w	sl, fp, r8
 80185be:	f000 808b 	beq.w	80186d8 <ai_platform_network_process+0x218>
 80185c2:	69a3      	ldr	r3, [r4, #24]
 80185c4:	2101      	movs	r1, #1
 80185c6:	685b      	ldr	r3, [r3, #4]
 80185c8:	4628      	mov	r0, r5
 80185ca:	9303      	str	r3, [sp, #12]
 80185cc:	f7ff f89a 	bl	8017704 <ai_buffer_get_size>
 80185d0:	9b03      	ldr	r3, [sp, #12]
 80185d2:	4283      	cmp	r3, r0
 80185d4:	d377      	bcc.n	80186c6 <ai_platform_network_process+0x206>
 80185d6:	68e0      	ldr	r0, [r4, #12]
 80185d8:	69a9      	ldr	r1, [r5, #24]
 80185da:	68c2      	ldr	r2, [r0, #12]
 80185dc:	68cb      	ldr	r3, [r1, #12]
 80185de:	429a      	cmp	r2, r3
 80185e0:	d171      	bne.n	80186c6 <ai_platform_network_process+0x206>
 80185e2:	6882      	ldr	r2, [r0, #8]
 80185e4:	688b      	ldr	r3, [r1, #8]
 80185e6:	429a      	cmp	r2, r3
 80185e8:	d16d      	bne.n	80186c6 <ai_platform_network_process+0x206>
 80185ea:	6842      	ldr	r2, [r0, #4]
 80185ec:	684b      	ldr	r3, [r1, #4]
 80185ee:	429a      	cmp	r2, r3
 80185f0:	d169      	bne.n	80186c6 <ai_platform_network_process+0x206>
 80185f2:	69a3      	ldr	r3, [r4, #24]
 80185f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80185f8:	f001 f8b4 	bl	8019764 <ai_array_get_data_byte_size>
 80185fc:	9003      	str	r0, [sp, #12]
 80185fe:	4620      	mov	r0, r4
 8018600:	f001 f822 	bl	8019648 <get_tensor_byte_size>
 8018604:	9b03      	ldr	r3, [sp, #12]
 8018606:	4283      	cmp	r3, r0
 8018608:	d35d      	bcc.n	80186c6 <ai_platform_network_process+0x206>
 801860a:	69a3      	ldr	r3, [r4, #24]
 801860c:	6818      	ldr	r0, [r3, #0]
 801860e:	f001 f82f 	bl	8019670 <ai_array_to_buffer_fmt>
 8018612:	682b      	ldr	r3, [r5, #0]
 8018614:	4043      	eors	r3, r0
 8018616:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801861a:	d14b      	bne.n	80186b4 <ai_platform_network_process+0x1f4>
 801861c:	686b      	ldr	r3, [r5, #4]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d05a      	beq.n	80186d8 <ai_platform_network_process+0x218>
 8018622:	69ab      	ldr	r3, [r5, #24]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d03a      	beq.n	80186a0 <ai_platform_network_process+0x1e0>
 801862a:	4620      	mov	r0, r4
 801862c:	9303      	str	r3, [sp, #12]
 801862e:	f001 f80b 	bl	8019648 <get_tensor_byte_size>
 8018632:	f8ca 0008 	str.w	r0, [sl, #8]
 8018636:	69aa      	ldr	r2, [r5, #24]
 8018638:	9b03      	ldr	r3, [sp, #12]
 801863a:	6812      	ldr	r2, [r2, #0]
 801863c:	429f      	cmp	r7, r3
 801863e:	fb02 f200 	mul.w	r2, r2, r0
 8018642:	f8ca 200c 	str.w	r2, [sl, #12]
 8018646:	6868      	ldr	r0, [r5, #4]
 8018648:	bf38      	it	cc
 801864a:	461f      	movcc	r7, r3
 801864c:	f8ca 0004 	str.w	r0, [sl, #4]
 8018650:	686b      	ldr	r3, [r5, #4]
 8018652:	4413      	add	r3, r2
 8018654:	f84b 3008 	str.w	r3, [fp, r8]
 8018658:	69a1      	ldr	r1, [r4, #24]
 801865a:	680b      	ldr	r3, [r1, #0]
 801865c:	009b      	lsls	r3, r3, #2
 801865e:	d408      	bmi.n	8018672 <ai_platform_network_process+0x1b2>
 8018660:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8018664:	1a9b      	subs	r3, r3, r2
 8018666:	4418      	add	r0, r3
 8018668:	6088      	str	r0, [r1, #8]
 801866a:	69a3      	ldr	r3, [r4, #24]
 801866c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018670:	60da      	str	r2, [r3, #12]
 8018672:	f8b9 3000 	ldrh.w	r3, [r9]
 8018676:	3601      	adds	r6, #1
 8018678:	351c      	adds	r5, #28
 801867a:	e78b      	b.n	8018594 <ai_platform_network_process+0xd4>
 801867c:	68e3      	ldr	r3, [r4, #12]
 801867e:	6162      	str	r2, [r4, #20]
 8018680:	f003 0303 	and.w	r3, r3, #3
 8018684:	2b03      	cmp	r3, #3
 8018686:	f040 81a3 	bne.w	80189d0 <ai_platform_network_process+0x510>
 801868a:	f104 0010 	add.w	r0, r4, #16
 801868e:	2217      	movs	r2, #23
 8018690:	2112      	movs	r1, #18
 8018692:	f000 f9af 	bl	80189f4 <core_set_error>
 8018696:	2300      	movs	r3, #0
 8018698:	4618      	mov	r0, r3
 801869a:	b005      	add	sp, #20
 801869c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186a0:	469a      	mov	sl, r3
 80186a2:	9c01      	ldr	r4, [sp, #4]
 80186a4:	2221      	movs	r2, #33	; 0x21
 80186a6:	f104 0010 	add.w	r0, r4, #16
 80186aa:	2112      	movs	r1, #18
 80186ac:	f000 f9a2 	bl	80189f4 <core_set_error>
 80186b0:	4653      	mov	r3, sl
 80186b2:	e7f1      	b.n	8018698 <ai_platform_network_process+0x1d8>
 80186b4:	9c01      	ldr	r4, [sp, #4]
 80186b6:	2219      	movs	r2, #25
 80186b8:	f104 0010 	add.w	r0, r4, #16
 80186bc:	2112      	movs	r1, #18
 80186be:	f000 f999 	bl	80189f4 <core_set_error>
 80186c2:	2300      	movs	r3, #0
 80186c4:	e7e8      	b.n	8018698 <ai_platform_network_process+0x1d8>
 80186c6:	9c01      	ldr	r4, [sp, #4]
 80186c8:	2218      	movs	r2, #24
 80186ca:	f104 0010 	add.w	r0, r4, #16
 80186ce:	2112      	movs	r1, #18
 80186d0:	f000 f990 	bl	80189f4 <core_set_error>
 80186d4:	2300      	movs	r3, #0
 80186d6:	e7df      	b.n	8018698 <ai_platform_network_process+0x1d8>
 80186d8:	9c01      	ldr	r4, [sp, #4]
 80186da:	e7d6      	b.n	801868a <ai_platform_network_process+0x1ca>
 80186dc:	a1c00100 	.word	0xa1c00100
 80186e0:	e0002000 	.word	0xe0002000
 80186e4:	40023000 	.word	0x40023000
 80186e8:	40023008 	.word	0x40023008
 80186ec:	50023008 	.word	0x50023008
 80186f0:	50023000 	.word	0x50023000
 80186f4:	f407a5c2 	.word	0xf407a5c2
 80186f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80186fc:	9c01      	ldr	r4, [sp, #4]
 80186fe:	9a02      	ldr	r2, [sp, #8]
 8018700:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8018702:	2a00      	cmp	r2, #0
 8018704:	f000 80ae 	beq.w	8018864 <ai_platform_network_process+0x3a4>
 8018708:	2b01      	cmp	r3, #1
 801870a:	f240 80a1 	bls.w	8018850 <ai_platform_network_process+0x390>
 801870e:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8018712:	f119 0f0c 	cmn.w	r9, #12
 8018716:	f000 809b 	beq.w	8018850 <ai_platform_network_process+0x390>
 801871a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801871e:	2b00      	cmp	r3, #0
 8018720:	f000 8096 	beq.w	8018850 <ai_platform_network_process+0x390>
 8018724:	f04f 0800 	mov.w	r8, #0
 8018728:	9d02      	ldr	r5, [sp, #8]
 801872a:	9401      	str	r4, [sp, #4]
 801872c:	4598      	cmp	r8, r3
 801872e:	f080 8097 	bcs.w	8018860 <ai_platform_network_process+0x3a0>
 8018732:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018736:	2b00      	cmp	r3, #0
 8018738:	f000 8092 	beq.w	8018860 <ai_platform_network_process+0x3a0>
 801873c:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
 8018740:	2c00      	cmp	r4, #0
 8018742:	f000 808d 	beq.w	8018860 <ai_platform_network_process+0x3a0>
 8018746:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801874a:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801874e:	f8d3 b000 	ldr.w	fp, [r3]
 8018752:	eb1b 0a06 	adds.w	sl, fp, r6
 8018756:	f000 8131 	beq.w	80189bc <ai_platform_network_process+0x4fc>
 801875a:	69a3      	ldr	r3, [r4, #24]
 801875c:	2101      	movs	r1, #1
 801875e:	685b      	ldr	r3, [r3, #4]
 8018760:	4628      	mov	r0, r5
 8018762:	9302      	str	r3, [sp, #8]
 8018764:	f7fe ffce 	bl	8017704 <ai_buffer_get_size>
 8018768:	9b02      	ldr	r3, [sp, #8]
 801876a:	4283      	cmp	r3, r0
 801876c:	d36f      	bcc.n	801884e <ai_platform_network_process+0x38e>
 801876e:	68e0      	ldr	r0, [r4, #12]
 8018770:	69a9      	ldr	r1, [r5, #24]
 8018772:	68c2      	ldr	r2, [r0, #12]
 8018774:	68cb      	ldr	r3, [r1, #12]
 8018776:	429a      	cmp	r2, r3
 8018778:	d169      	bne.n	801884e <ai_platform_network_process+0x38e>
 801877a:	6882      	ldr	r2, [r0, #8]
 801877c:	688b      	ldr	r3, [r1, #8]
 801877e:	429a      	cmp	r2, r3
 8018780:	d165      	bne.n	801884e <ai_platform_network_process+0x38e>
 8018782:	6842      	ldr	r2, [r0, #4]
 8018784:	684b      	ldr	r3, [r1, #4]
 8018786:	429a      	cmp	r2, r3
 8018788:	d161      	bne.n	801884e <ai_platform_network_process+0x38e>
 801878a:	69a3      	ldr	r3, [r4, #24]
 801878c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018790:	f000 ffe8 	bl	8019764 <ai_array_get_data_byte_size>
 8018794:	9002      	str	r0, [sp, #8]
 8018796:	4620      	mov	r0, r4
 8018798:	f000 ff56 	bl	8019648 <get_tensor_byte_size>
 801879c:	9b02      	ldr	r3, [sp, #8]
 801879e:	4283      	cmp	r3, r0
 80187a0:	d355      	bcc.n	801884e <ai_platform_network_process+0x38e>
 80187a2:	69a3      	ldr	r3, [r4, #24]
 80187a4:	6818      	ldr	r0, [r3, #0]
 80187a6:	f000 ff63 	bl	8019670 <ai_array_to_buffer_fmt>
 80187aa:	682b      	ldr	r3, [r5, #0]
 80187ac:	4043      	eors	r3, r0
 80187ae:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80187b2:	d143      	bne.n	801883c <ai_platform_network_process+0x37c>
 80187b4:	686b      	ldr	r3, [r5, #4]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d036      	beq.n	8018828 <ai_platform_network_process+0x368>
 80187ba:	69ab      	ldr	r3, [r5, #24]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	b34b      	cbz	r3, 8018814 <ai_platform_network_process+0x354>
 80187c0:	4620      	mov	r0, r4
 80187c2:	9302      	str	r3, [sp, #8]
 80187c4:	f000 ff40 	bl	8019648 <get_tensor_byte_size>
 80187c8:	f8ca 0008 	str.w	r0, [sl, #8]
 80187cc:	69aa      	ldr	r2, [r5, #24]
 80187ce:	9b02      	ldr	r3, [sp, #8]
 80187d0:	6812      	ldr	r2, [r2, #0]
 80187d2:	429f      	cmp	r7, r3
 80187d4:	fb02 f200 	mul.w	r2, r2, r0
 80187d8:	f8ca 200c 	str.w	r2, [sl, #12]
 80187dc:	6868      	ldr	r0, [r5, #4]
 80187de:	bf38      	it	cc
 80187e0:	461f      	movcc	r7, r3
 80187e2:	f8ca 0004 	str.w	r0, [sl, #4]
 80187e6:	686b      	ldr	r3, [r5, #4]
 80187e8:	4413      	add	r3, r2
 80187ea:	f84b 3006 	str.w	r3, [fp, r6]
 80187ee:	69a1      	ldr	r1, [r4, #24]
 80187f0:	680b      	ldr	r3, [r1, #0]
 80187f2:	009e      	lsls	r6, r3, #2
 80187f4:	d408      	bmi.n	8018808 <ai_platform_network_process+0x348>
 80187f6:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80187fa:	1a9b      	subs	r3, r3, r2
 80187fc:	4418      	add	r0, r3
 80187fe:	6088      	str	r0, [r1, #8]
 8018800:	69a3      	ldr	r3, [r4, #24]
 8018802:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018806:	60da      	str	r2, [r3, #12]
 8018808:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801880c:	f108 0801 	add.w	r8, r8, #1
 8018810:	351c      	adds	r5, #28
 8018812:	e78b      	b.n	801872c <ai_platform_network_process+0x26c>
 8018814:	469a      	mov	sl, r3
 8018816:	9c01      	ldr	r4, [sp, #4]
 8018818:	2221      	movs	r2, #33	; 0x21
 801881a:	f104 0010 	add.w	r0, r4, #16
 801881e:	2113      	movs	r1, #19
 8018820:	f000 f8e8 	bl	80189f4 <core_set_error>
 8018824:	4653      	mov	r3, sl
 8018826:	e737      	b.n	8018698 <ai_platform_network_process+0x1d8>
 8018828:	469a      	mov	sl, r3
 801882a:	9c01      	ldr	r4, [sp, #4]
 801882c:	2217      	movs	r2, #23
 801882e:	f104 0010 	add.w	r0, r4, #16
 8018832:	2113      	movs	r1, #19
 8018834:	f000 f8de 	bl	80189f4 <core_set_error>
 8018838:	4653      	mov	r3, sl
 801883a:	e72d      	b.n	8018698 <ai_platform_network_process+0x1d8>
 801883c:	9c01      	ldr	r4, [sp, #4]
 801883e:	2219      	movs	r2, #25
 8018840:	f104 0010 	add.w	r0, r4, #16
 8018844:	2113      	movs	r1, #19
 8018846:	f000 f8d5 	bl	80189f4 <core_set_error>
 801884a:	2300      	movs	r3, #0
 801884c:	e724      	b.n	8018698 <ai_platform_network_process+0x1d8>
 801884e:	9c01      	ldr	r4, [sp, #4]
 8018850:	f104 0010 	add.w	r0, r4, #16
 8018854:	2218      	movs	r2, #24
 8018856:	2113      	movs	r1, #19
 8018858:	f000 f8cc 	bl	80189f4 <core_set_error>
 801885c:	2300      	movs	r3, #0
 801885e:	e71b      	b.n	8018698 <ai_platform_network_process+0x1d8>
 8018860:	9c01      	ldr	r4, [sp, #4]
 8018862:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8018864:	82a7      	strh	r7, [r4, #20]
 8018866:	2b00      	cmp	r3, #0
 8018868:	f000 80a5 	beq.w	80189b6 <ai_platform_network_process+0x4f6>
 801886c:	2b01      	cmp	r3, #1
 801886e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8018870:	f240 809f 	bls.w	80189b2 <ai_platform_network_process+0x4f2>
 8018874:	f105 070c 	add.w	r7, r5, #12
 8018878:	8ae3      	ldrh	r3, [r4, #22]
 801887a:	8aa2      	ldrh	r2, [r4, #20]
 801887c:	429a      	cmp	r2, r3
 801887e:	f67f af0b 	bls.w	8018698 <ai_platform_network_process+0x1d8>
 8018882:	2d00      	cmp	r5, #0
 8018884:	d035      	beq.n	80188f2 <ai_platform_network_process+0x432>
 8018886:	882b      	ldrh	r3, [r5, #0]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d032      	beq.n	80188f2 <ai_platform_network_process+0x432>
 801888c:	686b      	ldr	r3, [r5, #4]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d02f      	beq.n	80188f2 <ai_platform_network_process+0x432>
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	f04f 0800 	mov.w	r8, #0
 8018898:	b35b      	cbz	r3, 80188f2 <ai_platform_network_process+0x432>
 801889a:	68a9      	ldr	r1, [r5, #8]
 801889c:	699a      	ldr	r2, [r3, #24]
 801889e:	f8d1 a000 	ldr.w	sl, [r1]
 80188a2:	6811      	ldr	r1, [r2, #0]
 80188a4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80188a8:	eb0a 0609 	add.w	r6, sl, r9
 80188ac:	0089      	lsls	r1, r1, #2
 80188ae:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80188b2:	6890      	ldr	r0, [r2, #8]
 80188b4:	d478      	bmi.n	80189a8 <ai_platform_network_process+0x4e8>
 80188b6:	68d1      	ldr	r1, [r2, #12]
 80188b8:	1a40      	subs	r0, r0, r1
 80188ba:	eb0c 0100 	add.w	r1, ip, r0
 80188be:	6091      	str	r1, [r2, #8]
 80188c0:	699b      	ldr	r3, [r3, #24]
 80188c2:	6872      	ldr	r2, [r6, #4]
 80188c4:	60da      	str	r2, [r3, #12]
 80188c6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80188ca:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80188ce:	440b      	add	r3, r1
 80188d0:	4293      	cmp	r3, r2
 80188d2:	bf28      	it	cs
 80188d4:	68f3      	ldrcs	r3, [r6, #12]
 80188d6:	f108 0801 	add.w	r8, r8, #1
 80188da:	bf28      	it	cs
 80188dc:	1ad3      	subcs	r3, r2, r3
 80188de:	6073      	str	r3, [r6, #4]
 80188e0:	882b      	ldrh	r3, [r5, #0]
 80188e2:	4598      	cmp	r8, r3
 80188e4:	d205      	bcs.n	80188f2 <ai_platform_network_process+0x432>
 80188e6:	686b      	ldr	r3, [r5, #4]
 80188e8:	b11b      	cbz	r3, 80188f2 <ai_platform_network_process+0x432>
 80188ea:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d1d3      	bne.n	801889a <ai_platform_network_process+0x3da>
 80188f2:	4620      	mov	r0, r4
 80188f4:	f000 fe62 	bl	80195bc <ai_layers_forward_all>
 80188f8:	2f00      	cmp	r7, #0
 80188fa:	d04c      	beq.n	8018996 <ai_platform_network_process+0x4d6>
 80188fc:	883b      	ldrh	r3, [r7, #0]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d049      	beq.n	8018996 <ai_platform_network_process+0x4d6>
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d046      	beq.n	8018996 <ai_platform_network_process+0x4d6>
 8018908:	6818      	ldr	r0, [r3, #0]
 801890a:	2800      	cmp	r0, #0
 801890c:	d043      	beq.n	8018996 <ai_platform_network_process+0x4d6>
 801890e:	f04f 0800 	mov.w	r8, #0
 8018912:	e01c      	b.n	801894e <ai_platform_network_process+0x48e>
 8018914:	f85a 2009 	ldr.w	r2, [sl, r9]
 8018918:	f108 0801 	add.w	r8, r8, #1
 801891c:	4596      	cmp	lr, r2
 801891e:	bf24      	itt	cs
 8018920:	68f3      	ldrcs	r3, [r6, #12]
 8018922:	eba2 0e03 	subcs.w	lr, r2, r3
 8018926:	f8c6 e004 	str.w	lr, [r6, #4]
 801892a:	6981      	ldr	r1, [r0, #24]
 801892c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8018930:	1ad2      	subs	r2, r2, r3
 8018932:	eb0e 0302 	add.w	r3, lr, r2
 8018936:	608b      	str	r3, [r1, #8]
 8018938:	6983      	ldr	r3, [r0, #24]
 801893a:	6872      	ldr	r2, [r6, #4]
 801893c:	60da      	str	r2, [r3, #12]
 801893e:	883b      	ldrh	r3, [r7, #0]
 8018940:	4598      	cmp	r8, r3
 8018942:	d228      	bcs.n	8018996 <ai_platform_network_process+0x4d6>
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	b333      	cbz	r3, 8018996 <ai_platform_network_process+0x4d6>
 8018948:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801894c:	b318      	cbz	r0, 8018996 <ai_platform_network_process+0x4d6>
 801894e:	68bb      	ldr	r3, [r7, #8]
 8018950:	6981      	ldr	r1, [r0, #24]
 8018952:	f8d3 a000 	ldr.w	sl, [r3]
 8018956:	680b      	ldr	r3, [r1, #0]
 8018958:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801895c:	eb0a 0609 	add.w	r6, sl, r9
 8018960:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8018964:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8018968:	eb0c 0e02 	add.w	lr, ip, r2
 801896c:	d0d2      	beq.n	8018914 <ai_platform_network_process+0x454>
 801896e:	6889      	ldr	r1, [r1, #8]
 8018970:	4660      	mov	r0, ip
 8018972:	f000 ff49 	bl	8019808 <memcpy>
 8018976:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801897a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801897e:	440b      	add	r3, r1
 8018980:	4293      	cmp	r3, r2
 8018982:	bf28      	it	cs
 8018984:	68f3      	ldrcs	r3, [r6, #12]
 8018986:	f108 0801 	add.w	r8, r8, #1
 801898a:	bf28      	it	cs
 801898c:	1ad3      	subcs	r3, r2, r3
 801898e:	6073      	str	r3, [r6, #4]
 8018990:	883b      	ldrh	r3, [r7, #0]
 8018992:	4598      	cmp	r8, r3
 8018994:	d3d6      	bcc.n	8018944 <ai_platform_network_process+0x484>
 8018996:	8ae3      	ldrh	r3, [r4, #22]
 8018998:	8aa2      	ldrh	r2, [r4, #20]
 801899a:	3301      	adds	r3, #1
 801899c:	b29b      	uxth	r3, r3
 801899e:	429a      	cmp	r2, r3
 80189a0:	82e3      	strh	r3, [r4, #22]
 80189a2:	f63f af6e 	bhi.w	8018882 <ai_platform_network_process+0x3c2>
 80189a6:	e677      	b.n	8018698 <ai_platform_network_process+0x1d8>
 80189a8:	4661      	mov	r1, ip
 80189aa:	68b2      	ldr	r2, [r6, #8]
 80189ac:	f000 ff2c 	bl	8019808 <memcpy>
 80189b0:	e789      	b.n	80188c6 <ai_platform_network_process+0x406>
 80189b2:	2700      	movs	r7, #0
 80189b4:	e760      	b.n	8018878 <ai_platform_network_process+0x3b8>
 80189b6:	461d      	mov	r5, r3
 80189b8:	461f      	mov	r7, r3
 80189ba:	e75d      	b.n	8018878 <ai_platform_network_process+0x3b8>
 80189bc:	9c01      	ldr	r4, [sp, #4]
 80189be:	2217      	movs	r2, #23
 80189c0:	f104 0010 	add.w	r0, r4, #16
 80189c4:	2113      	movs	r1, #19
 80189c6:	f000 f815 	bl	80189f4 <core_set_error>
 80189ca:	4653      	mov	r3, sl
 80189cc:	e664      	b.n	8018698 <ai_platform_network_process+0x1d8>
 80189ce:	e7fe      	b.n	80189ce <ai_platform_network_process+0x50e>
 80189d0:	f104 0010 	add.w	r0, r4, #16
 80189d4:	2230      	movs	r2, #48	; 0x30
 80189d6:	2111      	movs	r1, #17
 80189d8:	f000 f80c 	bl	80189f4 <core_set_error>
 80189dc:	2300      	movs	r3, #0
 80189de:	e65b      	b.n	8018698 <ai_platform_network_process+0x1d8>
 80189e0:	4623      	mov	r3, r4
 80189e2:	e659      	b.n	8018698 <ai_platform_network_process+0x1d8>

080189e4 <core_init>:
 80189e4:	2001      	movs	r0, #1
 80189e6:	4770      	bx	lr

080189e8 <core_get_error>:
 80189e8:	4603      	mov	r3, r0
 80189ea:	2200      	movs	r2, #0
 80189ec:	6800      	ldr	r0, [r0, #0]
 80189ee:	601a      	str	r2, [r3, #0]
 80189f0:	4770      	bx	lr
 80189f2:	bf00      	nop

080189f4 <core_set_error>:
 80189f4:	4603      	mov	r3, r0
 80189f6:	7800      	ldrb	r0, [r0, #0]
 80189f8:	b930      	cbnz	r0, 8018a08 <core_set_error+0x14>
 80189fa:	7019      	strb	r1, [r3, #0]
 80189fc:	6819      	ldr	r1, [r3, #0]
 80189fe:	2001      	movs	r0, #1
 8018a00:	f362 211f 	bfi	r1, r2, #8, #24
 8018a04:	6019      	str	r1, [r3, #0]
 8018a06:	4770      	bx	lr
 8018a08:	2000      	movs	r0, #0
 8018a0a:	4770      	bx	lr

08018a0c <forward_dense>:
 8018a0c:	6983      	ldr	r3, [r0, #24]
 8018a0e:	8819      	ldrh	r1, [r3, #0]
 8018a10:	2900      	cmp	r1, #0
 8018a12:	f000 818d 	beq.w	8018d30 <forward_dense+0x324>
 8018a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a1a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8018a1e:	b099      	sub	sp, #100	; 0x64
 8018a20:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018a24:	b106      	cbz	r6, 8018a28 <forward_dense+0x1c>
 8018a26:	6836      	ldr	r6, [r6, #0]
 8018a28:	2901      	cmp	r1, #1
 8018a2a:	f240 817e 	bls.w	8018d2a <forward_dense+0x31e>
 8018a2e:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8018a32:	b104      	cbz	r4, 8018a36 <forward_dense+0x2a>
 8018a34:	6824      	ldr	r4, [r4, #0]
 8018a36:	2902      	cmp	r1, #2
 8018a38:	f000 817c 	beq.w	8018d34 <forward_dense+0x328>
 8018a3c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	f040 817a 	bne.w	8018d3a <forward_dense+0x32e>
 8018a46:	f11c 0218 	adds.w	r2, ip, #24
 8018a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8018a4c:	f000 817b 	beq.w	8018d46 <forward_dense+0x33a>
 8018a50:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 8018a54:	2a01      	cmp	r2, #1
 8018a56:	f240 83a4 	bls.w	80191a2 <forward_dense+0x796>
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	f000 8175 	beq.w	8018d4a <forward_dense+0x33e>
 8018a60:	685b      	ldr	r3, [r3, #4]
 8018a62:	930e      	str	r3, [sp, #56]	; 0x38
 8018a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a66:	68e2      	ldr	r2, [r4, #12]
 8018a68:	6998      	ldr	r0, [r3, #24]
 8018a6a:	e9d2 7501 	ldrd	r7, r5, [r2, #4]
 8018a6e:	6803      	ldr	r3, [r0, #0]
 8018a70:	9501      	str	r5, [sp, #4]
 8018a72:	f3c3 5841 	ubfx	r8, r3, #21, #2
 8018a76:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8018a7a:	fa49 f508 	asr.w	r5, r9, r8
 8018a7e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8018a82:	68f2      	ldr	r2, [r6, #12]
 8018a84:	9512      	str	r5, [sp, #72]	; 0x48
 8018a86:	6852      	ldr	r2, [r2, #4]
 8018a88:	9d01      	ldr	r5, [sp, #4]
 8018a8a:	2903      	cmp	r1, #3
 8018a8c:	fb05 f507 	mul.w	r5, r5, r7
 8018a90:	9215      	str	r2, [sp, #84]	; 0x54
 8018a92:	f000 836a 	beq.w	801916a <forward_dense+0x75e>
 8018a96:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8018a9a:	2a00      	cmp	r2, #0
 8018a9c:	f000 8368 	beq.w	8019170 <forward_dense+0x764>
 8018aa0:	6812      	ldr	r2, [r2, #0]
 8018aa2:	2a00      	cmp	r2, #0
 8018aa4:	f000 8364 	beq.w	8019170 <forward_dense+0x764>
 8018aa8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8018aac:	2b04      	cmp	r3, #4
 8018aae:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8018ab2:	f000 8363 	beq.w	801917c <forward_dense+0x770>
 8018ab6:	2b08      	cmp	r3, #8
 8018ab8:	f000 8360 	beq.w	801917c <forward_dense+0x770>
 8018abc:	f04f 0a00 	mov.w	sl, #0
 8018ac0:	69a3      	ldr	r3, [r4, #24]
 8018ac2:	00ad      	lsls	r5, r5, #2
 8018ac4:	6898      	ldr	r0, [r3, #8]
 8018ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ac8:	fb08 0405 	mla	r4, r8, r5, r0
 8018acc:	695b      	ldr	r3, [r3, #20]
 8018ace:	69b2      	ldr	r2, [r6, #24]
 8018ad0:	685b      	ldr	r3, [r3, #4]
 8018ad2:	00bd      	lsls	r5, r7, #2
 8018ad4:	42a0      	cmp	r0, r4
 8018ad6:	9002      	str	r0, [sp, #8]
 8018ad8:	9410      	str	r4, [sp, #64]	; 0x40
 8018ada:	950f      	str	r5, [sp, #60]	; 0x3c
 8018adc:	6891      	ldr	r1, [r2, #8]
 8018ade:	eb00 0805 	add.w	r8, r0, r5
 8018ae2:	9304      	str	r3, [sp, #16]
 8018ae4:	f080 811e 	bcs.w	8018d24 <forward_dense+0x318>
 8018ae8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018aea:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8018d64 <forward_dense+0x358>
 8018aee:	08e8      	lsrs	r0, r5, #3
 8018af0:	4606      	mov	r6, r0
 8018af2:	0142      	lsls	r2, r0, #5
 8018af4:	f025 0301 	bic.w	r3, r5, #1
 8018af8:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 8018afc:	9001      	str	r0, [sp, #4]
 8018afe:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 8018b02:	00f7      	lsls	r7, r6, #3
 8018b04:	9316      	str	r3, [sp, #88]	; 0x58
 8018b06:	0143      	lsls	r3, r0, #5
 8018b08:	00b6      	lsls	r6, r6, #2
 8018b0a:	9306      	str	r3, [sp, #24]
 8018b0c:	f107 0308 	add.w	r3, r7, #8
 8018b10:	9303      	str	r3, [sp, #12]
 8018b12:	1d33      	adds	r3, r6, #4
 8018b14:	930c      	str	r3, [sp, #48]	; 0x30
 8018b16:	f005 0301 	and.w	r3, r5, #1
 8018b1a:	9308      	str	r3, [sp, #32]
 8018b1c:	00ab      	lsls	r3, r5, #2
 8018b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8018b20:	4653      	mov	r3, sl
 8018b22:	f1a5 0410 	sub.w	r4, r5, #16
 8018b26:	0924      	lsrs	r4, r4, #4
 8018b28:	3401      	adds	r4, #1
 8018b2a:	01a4      	lsls	r4, r4, #6
 8018b2c:	f005 0907 	and.w	r9, r5, #7
 8018b30:	9713      	str	r7, [sp, #76]	; 0x4c
 8018b32:	960b      	str	r6, [sp, #44]	; 0x2c
 8018b34:	9417      	str	r4, [sp, #92]	; 0x5c
 8018b36:	eb01 0b02 	add.w	fp, r1, r2
 8018b3a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8018b3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b40:	9906      	ldr	r1, [sp, #24]
 8018b42:	6992      	ldr	r2, [r2, #24]
 8018b44:	4459      	add	r1, fp
 8018b46:	6894      	ldr	r4, [r2, #8]
 8018b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b4a:	9105      	str	r1, [sp, #20]
 8018b4c:	2a00      	cmp	r2, #0
 8018b4e:	f000 810b 	beq.w	8018d68 <forward_dense+0x35c>
 8018b52:	6992      	ldr	r2, [r2, #24]
 8018b54:	6896      	ldr	r6, [r2, #8]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	f000 810a 	beq.w	8018d70 <forward_dense+0x364>
 8018b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018b5e:	2a04      	cmp	r2, #4
 8018b60:	f000 821a 	beq.w	8018f98 <forward_dense+0x58c>
 8018b64:	9a02      	ldr	r2, [sp, #8]
 8018b66:	4590      	cmp	r8, r2
 8018b68:	f240 80d3 	bls.w	8018d12 <forward_dense+0x306>
 8018b6c:	4617      	mov	r7, r2
 8018b6e:	9a06      	ldr	r2, [sp, #24]
 8018b70:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8018b74:	f102 0c20 	add.w	ip, r2, #32
 8018b78:	44dc      	add	ip, fp
 8018b7a:	46be      	mov	lr, r7
 8018b7c:	4637      	mov	r7, r6
 8018b7e:	e9dd a613 	ldrd	sl, r6, [sp, #76]	; 0x4c
 8018b82:	2f00      	cmp	r7, #0
 8018b84:	f000 80e3 	beq.w	8018d4e <forward_dense+0x342>
 8018b88:	9a01      	ldr	r2, [sp, #4]
 8018b8a:	edd7 5a00 	vldr	s11, [r7]
 8018b8e:	3704      	adds	r7, #4
 8018b90:	2a00      	cmp	r2, #0
 8018b92:	f000 80e2 	beq.w	8018d5a <forward_dense+0x34e>
 8018b96:	4661      	mov	r1, ip
 8018b98:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8018d64 <forward_dense+0x358>
 8018b9c:	9803      	ldr	r0, [sp, #12]
 8018b9e:	f104 0208 	add.w	r2, r4, #8
 8018ba2:	1905      	adds	r5, r0, r4
 8018ba4:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8018ba8:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8018bac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018bb0:	ed90 7a00 	vldr	s14, [r0]
 8018bb4:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8018bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018bbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018bc0:	ed90 5a00 	vldr	s10, [r0]
 8018bc4:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 8018bc8:	f812 0c06 	ldrb.w	r0, [r2, #-6]
 8018bcc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018bd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018bd4:	ed90 5a00 	vldr	s10, [r0]
 8018bd8:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 8018bdc:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8018be0:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018be4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018be8:	ed90 5a00 	vldr	s10, [r0]
 8018bec:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 8018bf0:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 8018bf4:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018bf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018bfc:	ed90 5a00 	vldr	s10, [r0]
 8018c00:	ed11 7a04 	vldr	s14, [r1, #-16]
 8018c04:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8018c08:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018c10:	ed90 5a00 	vldr	s10, [r0]
 8018c14:	ed11 7a03 	vldr	s14, [r1, #-12]
 8018c18:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8018c1c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018c20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018c24:	ed90 5a00 	vldr	s10, [r0]
 8018c28:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018c2c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8018c30:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018c34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018c38:	ed11 7a01 	vldr	s14, [r1, #-4]
 8018c3c:	ed90 5a00 	vldr	s10, [r0]
 8018c40:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018c44:	3208      	adds	r2, #8
 8018c46:	4295      	cmp	r5, r2
 8018c48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018c4c:	f101 0120 	add.w	r1, r1, #32
 8018c50:	d1a8      	bne.n	8018ba4 <forward_dense+0x198>
 8018c52:	465a      	mov	r2, fp
 8018c54:	eb04 010a 	add.w	r1, r4, sl
 8018c58:	2e00      	cmp	r6, #0
 8018c5a:	d04a      	beq.n	8018cf2 <forward_dense+0x2e6>
 8018c5c:	7808      	ldrb	r0, [r1, #0]
 8018c5e:	ed92 7a00 	vldr	s14, [r2]
 8018c62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018c66:	edd0 7a00 	vldr	s15, [r0]
 8018c6a:	2e01      	cmp	r6, #1
 8018c6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c70:	d03f      	beq.n	8018cf2 <forward_dense+0x2e6>
 8018c72:	7848      	ldrb	r0, [r1, #1]
 8018c74:	edd2 7a01 	vldr	s15, [r2, #4]
 8018c78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018c7c:	ed90 7a00 	vldr	s14, [r0]
 8018c80:	2e02      	cmp	r6, #2
 8018c82:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c86:	d034      	beq.n	8018cf2 <forward_dense+0x2e6>
 8018c88:	7888      	ldrb	r0, [r1, #2]
 8018c8a:	edd2 7a02 	vldr	s15, [r2, #8]
 8018c8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018c92:	ed90 7a00 	vldr	s14, [r0]
 8018c96:	2e03      	cmp	r6, #3
 8018c98:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c9c:	d029      	beq.n	8018cf2 <forward_dense+0x2e6>
 8018c9e:	78c8      	ldrb	r0, [r1, #3]
 8018ca0:	edd2 7a03 	vldr	s15, [r2, #12]
 8018ca4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018ca8:	ed90 7a00 	vldr	s14, [r0]
 8018cac:	2e04      	cmp	r6, #4
 8018cae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018cb2:	d01e      	beq.n	8018cf2 <forward_dense+0x2e6>
 8018cb4:	7908      	ldrb	r0, [r1, #4]
 8018cb6:	edd2 7a04 	vldr	s15, [r2, #16]
 8018cba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018cbe:	ed90 7a00 	vldr	s14, [r0]
 8018cc2:	2e05      	cmp	r6, #5
 8018cc4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018cc8:	d013      	beq.n	8018cf2 <forward_dense+0x2e6>
 8018cca:	7948      	ldrb	r0, [r1, #5]
 8018ccc:	edd2 7a05 	vldr	s15, [r2, #20]
 8018cd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018cd4:	ed90 7a00 	vldr	s14, [r0]
 8018cd8:	2e06      	cmp	r6, #6
 8018cda:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018cde:	d008      	beq.n	8018cf2 <forward_dense+0x2e6>
 8018ce0:	7989      	ldrb	r1, [r1, #6]
 8018ce2:	edd2 7a06 	vldr	s15, [r2, #24]
 8018ce6:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8018cea:	ed92 7a00 	vldr	s14, [r2]
 8018cee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018cf2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018cf6:	ecae 6a01 	vstmia	lr!, {s12}
 8018cfa:	45c6      	cmp	lr, r8
 8018cfc:	444c      	add	r4, r9
 8018cfe:	f4ff af40 	bcc.w	8018b82 <forward_dense+0x176>
 8018d02:	9902      	ldr	r1, [sp, #8]
 8018d04:	43ca      	mvns	r2, r1
 8018d06:	4442      	add	r2, r8
 8018d08:	f022 0203 	bic.w	r2, r2, #3
 8018d0c:	3204      	adds	r2, #4
 8018d0e:	188a      	adds	r2, r1, r2
 8018d10:	9202      	str	r2, [sp, #8]
 8018d12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018d14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018d16:	4490      	add	r8, r2
 8018d18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018d1a:	4493      	add	fp, r2
 8018d1c:	9a02      	ldr	r2, [sp, #8]
 8018d1e:	428a      	cmp	r2, r1
 8018d20:	f4ff af0d 	bcc.w	8018b3e <forward_dense+0x132>
 8018d24:	b019      	add	sp, #100	; 0x64
 8018d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	deff      	udf	#255	; 0xff
 8018d30:	684b      	ldr	r3, [r1, #4]
 8018d32:	deff      	udf	#255	; 0xff
 8018d34:	2300      	movs	r3, #0
 8018d36:	685b      	ldr	r3, [r3, #4]
 8018d38:	deff      	udf	#255	; 0xff
 8018d3a:	681a      	ldr	r2, [r3, #0]
 8018d3c:	920d      	str	r2, [sp, #52]	; 0x34
 8018d3e:	f11c 0218 	adds.w	r2, ip, #24
 8018d42:	f47f ae85 	bne.w	8018a50 <forward_dense+0x44>
 8018d46:	920e      	str	r2, [sp, #56]	; 0x38
 8018d48:	e68c      	b.n	8018a64 <forward_dense+0x58>
 8018d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8018d4c:	e68a      	b.n	8018a64 <forward_dense+0x58>
 8018d4e:	9a01      	ldr	r2, [sp, #4]
 8018d50:	eef0 5a66 	vmov.f32	s11, s13
 8018d54:	2a00      	cmp	r2, #0
 8018d56:	f47f af1e 	bne.w	8018b96 <forward_dense+0x18a>
 8018d5a:	9a05      	ldr	r2, [sp, #20]
 8018d5c:	4621      	mov	r1, r4
 8018d5e:	ed9f 6a01 	vldr	s12, [pc, #4]	; 8018d64 <forward_dense+0x358>
 8018d62:	e779      	b.n	8018c58 <forward_dense+0x24c>
 8018d64:	00000000 	.word	0x00000000
 8018d68:	4616      	mov	r6, r2
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	f47f aef6 	bne.w	8018b5c <forward_dense+0x150>
 8018d70:	9a02      	ldr	r2, [sp, #8]
 8018d72:	4590      	cmp	r8, r2
 8018d74:	d9cd      	bls.n	8018d12 <forward_dense+0x306>
 8018d76:	4615      	mov	r5, r2
 8018d78:	9a06      	ldr	r2, [sp, #24]
 8018d7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018d7c:	3240      	adds	r2, #64	; 0x40
 8018d7e:	eb02 070b 	add.w	r7, r2, fp
 8018d82:	9a05      	ldr	r2, [sp, #20]
 8018d84:	468a      	mov	sl, r1
 8018d86:	4610      	mov	r0, r2
 8018d88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018d8a:	9307      	str	r3, [sp, #28]
 8018d8c:	4691      	mov	r9, r2
 8018d8e:	9b04      	ldr	r3, [sp, #16]
 8018d90:	eb00 0c02 	add.w	ip, r0, r2
 8018d94:	f001 0e0f 	and.w	lr, r1, #15
 8018d98:	2e00      	cmp	r6, #0
 8018d9a:	f000 81da 	beq.w	8019152 <forward_dense+0x746>
 8018d9e:	f1ba 0f0f 	cmp.w	sl, #15
 8018da2:	edd6 5a00 	vldr	s11, [r6]
 8018da6:	f106 0604 	add.w	r6, r6, #4
 8018daa:	f240 81d8 	bls.w	801915e <forward_dense+0x752>
 8018dae:	4639      	mov	r1, r7
 8018db0:	4650      	mov	r0, sl
 8018db2:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 8018d64 <forward_dense+0x358>
 8018db6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8018dba:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8018dbe:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8018dc2:	ed12 5a10 	vldr	s10, [r2, #-64]	; 0xffffffc0
 8018dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018dca:	ed11 7a10 	vldr	s14, [r1, #-64]	; 0xffffffc0
 8018dce:	ed52 4a0e 	vldr	s9, [r2, #-56]	; 0xffffffc8
 8018dd2:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018dd6:	ed11 7a0e 	vldr	s14, [r1, #-56]	; 0xffffffc8
 8018dda:	ed12 5a0d 	vldr	s10, [r2, #-52]	; 0xffffffcc
 8018dde:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018de2:	ed11 7a0d 	vldr	s14, [r1, #-52]	; 0xffffffcc
 8018de6:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8018dea:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018dee:	ed12 7a0c 	vldr	s14, [r2, #-48]	; 0xffffffd0
 8018df2:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8018df6:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018dfa:	ed12 7a0b 	vldr	s14, [r2, #-44]	; 0xffffffd4
 8018dfe:	ed51 4a0a 	vldr	s9, [r1, #-40]	; 0xffffffd8
 8018e02:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018e06:	ed12 7a0a 	vldr	s14, [r2, #-40]	; 0xffffffd8
 8018e0a:	ed12 5a09 	vldr	s10, [r2, #-36]	; 0xffffffdc
 8018e0e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018e12:	ed11 7a09 	vldr	s14, [r1, #-36]	; 0xffffffdc
 8018e16:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8018e1a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018e1e:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 8018e22:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 8018e26:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018e2a:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
 8018e2e:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8018e32:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018e36:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 8018e3a:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8018e3e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018e42:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 8018e46:	ed51 4a04 	vldr	s9, [r1, #-16]
 8018e4a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018e4e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8018e52:	ed11 5a03 	vldr	s10, [r1, #-12]
 8018e56:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018e5a:	ed12 7a03 	vldr	s14, [r2, #-12]
 8018e5e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8018e62:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018e66:	ed12 7a02 	vldr	s14, [r2, #-8]
 8018e6a:	ed12 5a01 	vldr	s10, [r2, #-4]
 8018e6e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018e72:	ed11 7a01 	vldr	s14, [r1, #-4]
 8018e76:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018e7a:	3810      	subs	r0, #16
 8018e7c:	280f      	cmp	r0, #15
 8018e7e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8018e82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018e86:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8018e8a:	d896      	bhi.n	8018dba <forward_dense+0x3ae>
 8018e8c:	4672      	mov	r2, lr
 8018e8e:	4661      	mov	r1, ip
 8018e90:	eb04 0009 	add.w	r0, r4, r9
 8018e94:	2a00      	cmp	r2, #0
 8018e96:	d075      	beq.n	8018f84 <forward_dense+0x578>
 8018e98:	ed90 7a00 	vldr	s14, [r0]
 8018e9c:	edd1 7a00 	vldr	s15, [r1]
 8018ea0:	2a01      	cmp	r2, #1
 8018ea2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018ea6:	d06d      	beq.n	8018f84 <forward_dense+0x578>
 8018ea8:	ed90 7a01 	vldr	s14, [r0, #4]
 8018eac:	edd1 7a01 	vldr	s15, [r1, #4]
 8018eb0:	2a02      	cmp	r2, #2
 8018eb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018eb6:	d065      	beq.n	8018f84 <forward_dense+0x578>
 8018eb8:	ed90 7a02 	vldr	s14, [r0, #8]
 8018ebc:	edd1 7a02 	vldr	s15, [r1, #8]
 8018ec0:	2a03      	cmp	r2, #3
 8018ec2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018ec6:	d05d      	beq.n	8018f84 <forward_dense+0x578>
 8018ec8:	ed90 7a03 	vldr	s14, [r0, #12]
 8018ecc:	edd1 7a03 	vldr	s15, [r1, #12]
 8018ed0:	2a04      	cmp	r2, #4
 8018ed2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018ed6:	d055      	beq.n	8018f84 <forward_dense+0x578>
 8018ed8:	ed90 7a04 	vldr	s14, [r0, #16]
 8018edc:	edd1 7a04 	vldr	s15, [r1, #16]
 8018ee0:	2a05      	cmp	r2, #5
 8018ee2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018ee6:	d04d      	beq.n	8018f84 <forward_dense+0x578>
 8018ee8:	ed90 7a05 	vldr	s14, [r0, #20]
 8018eec:	edd1 7a05 	vldr	s15, [r1, #20]
 8018ef0:	2a06      	cmp	r2, #6
 8018ef2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018ef6:	d045      	beq.n	8018f84 <forward_dense+0x578>
 8018ef8:	ed90 7a06 	vldr	s14, [r0, #24]
 8018efc:	edd1 7a06 	vldr	s15, [r1, #24]
 8018f00:	2a07      	cmp	r2, #7
 8018f02:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f06:	d03d      	beq.n	8018f84 <forward_dense+0x578>
 8018f08:	ed90 7a07 	vldr	s14, [r0, #28]
 8018f0c:	edd1 7a07 	vldr	s15, [r1, #28]
 8018f10:	2a08      	cmp	r2, #8
 8018f12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f16:	d035      	beq.n	8018f84 <forward_dense+0x578>
 8018f18:	ed90 7a08 	vldr	s14, [r0, #32]
 8018f1c:	edd1 7a08 	vldr	s15, [r1, #32]
 8018f20:	2a09      	cmp	r2, #9
 8018f22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f26:	d02d      	beq.n	8018f84 <forward_dense+0x578>
 8018f28:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8018f2c:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8018f30:	2a0a      	cmp	r2, #10
 8018f32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f36:	d025      	beq.n	8018f84 <forward_dense+0x578>
 8018f38:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8018f3c:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8018f40:	2a0b      	cmp	r2, #11
 8018f42:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f46:	d01d      	beq.n	8018f84 <forward_dense+0x578>
 8018f48:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8018f4c:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8018f50:	2a0c      	cmp	r2, #12
 8018f52:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f56:	d015      	beq.n	8018f84 <forward_dense+0x578>
 8018f58:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8018f5c:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8018f60:	2a0d      	cmp	r2, #13
 8018f62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f66:	d00d      	beq.n	8018f84 <forward_dense+0x578>
 8018f68:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8018f6c:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8018f70:	2a0e      	cmp	r2, #14
 8018f72:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f76:	d005      	beq.n	8018f84 <forward_dense+0x578>
 8018f78:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8018f7c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018f80:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f84:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018f88:	eca5 6a01 	vstmia	r5!, {s12}
 8018f8c:	4545      	cmp	r5, r8
 8018f8e:	441c      	add	r4, r3
 8018f90:	f4ff af02 	bcc.w	8018d98 <forward_dense+0x38c>
 8018f94:	9b07      	ldr	r3, [sp, #28]
 8018f96:	e6b4      	b.n	8018d02 <forward_dense+0x2f6>
 8018f98:	9902      	ldr	r1, [sp, #8]
 8018f9a:	4588      	cmp	r8, r1
 8018f9c:	f67f aeb9 	bls.w	8018d12 <forward_dense+0x306>
 8018fa0:	4689      	mov	r9, r1
 8018fa2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018fa4:	eb02 000b 	add.w	r0, r2, fp
 8018fa8:	9a06      	ldr	r2, [sp, #24]
 8018faa:	9007      	str	r0, [sp, #28]
 8018fac:	3220      	adds	r2, #32
 8018fae:	3007      	adds	r0, #7
 8018fb0:	445a      	add	r2, fp
 8018fb2:	900a      	str	r0, [sp, #40]	; 0x28
 8018fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8018fb6:	2e00      	cmp	r6, #0
 8018fb8:	f000 80b5 	beq.w	8019126 <forward_dense+0x71a>
 8018fbc:	9a01      	ldr	r2, [sp, #4]
 8018fbe:	edd6 5a00 	vldr	s11, [r6]
 8018fc2:	3604      	adds	r6, #4
 8018fc4:	2a00      	cmp	r2, #0
 8018fc6:	f000 80b4 	beq.w	8019132 <forward_dense+0x726>
 8018fca:	ed1f 6a9a 	vldr	s12, [pc, #-616]	; 8018d64 <forward_dense+0x358>
 8018fce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fd2:	1d21      	adds	r1, r4, #4
 8018fd4:	1905      	adds	r5, r0, r4
 8018fd6:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8018fda:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8018fde:	f000 070f 	and.w	r7, r0, #15
 8018fe2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018fe6:	ed97 7a00 	vldr	s14, [r7]
 8018fea:	0900      	lsrs	r0, r0, #4
 8018fec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018ff0:	ed90 5a00 	vldr	s10, [r0]
 8018ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ff8:	ed12 7a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
 8018ffc:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8019000:	eee5 7a07 	vfma.f32	s15, s10, s14
 8019004:	0907      	lsrs	r7, r0, #4
 8019006:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801900a:	ed97 5a00 	vldr	s10, [r7]
 801900e:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 8019012:	f000 000f 	and.w	r0, r0, #15
 8019016:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801901a:	eee5 7a07 	vfma.f32	s15, s10, s14
 801901e:	ed90 5a00 	vldr	s10, [r0]
 8019022:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8019026:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 801902a:	eee5 7a07 	vfma.f32	s15, s10, s14
 801902e:	0907      	lsrs	r7, r0, #4
 8019030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019034:	ed97 5a00 	vldr	s10, [r7]
 8019038:	ed12 7a04 	vldr	s14, [r2, #-16]
 801903c:	f000 000f 	and.w	r0, r0, #15
 8019040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019044:	eee5 7a07 	vfma.f32	s15, s10, s14
 8019048:	ed90 5a00 	vldr	s10, [r0]
 801904c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8019050:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8019054:	eee5 7a07 	vfma.f32	s15, s10, s14
 8019058:	0907      	lsrs	r7, r0, #4
 801905a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801905e:	ed12 7a02 	vldr	s14, [r2, #-8]
 8019062:	ed97 5a00 	vldr	s10, [r7]
 8019066:	f000 000f 	and.w	r0, r0, #15
 801906a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801906e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8019072:	ed12 7a01 	vldr	s14, [r2, #-4]
 8019076:	ed90 5a00 	vldr	s10, [r0]
 801907a:	eee5 7a07 	vfma.f32	s15, s10, s14
 801907e:	3104      	adds	r1, #4
 8019080:	428d      	cmp	r5, r1
 8019082:	ee36 6a27 	vadd.f32	s12, s12, s15
 8019086:	f102 0220 	add.w	r2, r2, #32
 801908a:	d1a4      	bne.n	8018fd6 <forward_dense+0x5ca>
 801908c:	46de      	mov	lr, fp
 801908e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019090:	eb04 0a02 	add.w	sl, r4, r2
 8019094:	9a07      	ldr	r2, [sp, #28]
 8019096:	4596      	cmp	lr, r2
 8019098:	d22c      	bcs.n	80190f4 <forward_dense+0x6e8>
 801909a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801909c:	f10e 0108 	add.w	r1, lr, #8
 80190a0:	eba2 0c01 	sub.w	ip, r2, r1
 80190a4:	f02c 0207 	bic.w	r2, ip, #7
 80190a8:	f10e 0710 	add.w	r7, lr, #16
 80190ac:	4417      	add	r7, r2
 80190ae:	f10a 35ff 	add.w	r5, sl, #4294967295
 80190b2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80190b6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80190ba:	f002 000f 	and.w	r0, r2, #15
 80190be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80190c2:	ed90 7a00 	vldr	s14, [r0]
 80190c6:	0912      	lsrs	r2, r2, #4
 80190c8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80190cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80190d0:	ed92 5a00 	vldr	s10, [r2]
 80190d4:	ed11 7a02 	vldr	s14, [r1, #-8]
 80190d8:	eee5 7a07 	vfma.f32	s15, s10, s14
 80190dc:	3108      	adds	r1, #8
 80190de:	428f      	cmp	r7, r1
 80190e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80190e4:	d1e5      	bne.n	80190b2 <forward_dense+0x6a6>
 80190e6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80190ea:	f10c 0c01 	add.w	ip, ip, #1
 80190ee:	44e2      	add	sl, ip
 80190f0:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 80190f4:	9a08      	ldr	r2, [sp, #32]
 80190f6:	b312      	cbz	r2, 801913e <forward_dense+0x732>
 80190f8:	f89a 2000 	ldrb.w	r2, [sl]
 80190fc:	edde 7a00 	vldr	s15, [lr]
 8019100:	0912      	lsrs	r2, r2, #4
 8019102:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8019106:	ed92 7a00 	vldr	s14, [r2]
 801910a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801910e:	ee76 5a25 	vadd.f32	s11, s12, s11
 8019112:	ece9 5a01 	vstmia	r9!, {s11}
 8019116:	9a04      	ldr	r2, [sp, #16]
 8019118:	45c8      	cmp	r8, r9
 801911a:	4414      	add	r4, r2
 801911c:	f67f adf1 	bls.w	8018d02 <forward_dense+0x2f6>
 8019120:	2e00      	cmp	r6, #0
 8019122:	f47f af4b 	bne.w	8018fbc <forward_dense+0x5b0>
 8019126:	9a01      	ldr	r2, [sp, #4]
 8019128:	eef0 5a66 	vmov.f32	s11, s13
 801912c:	2a00      	cmp	r2, #0
 801912e:	f47f af4c 	bne.w	8018fca <forward_dense+0x5be>
 8019132:	f8dd e014 	ldr.w	lr, [sp, #20]
 8019136:	46a2      	mov	sl, r4
 8019138:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80191a8 <forward_dense+0x79c>
 801913c:	e7aa      	b.n	8019094 <forward_dense+0x688>
 801913e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8019142:	eca9 6a01 	vstmia	r9!, {s12}
 8019146:	9a04      	ldr	r2, [sp, #16]
 8019148:	45c1      	cmp	r9, r8
 801914a:	4414      	add	r4, r2
 801914c:	f4ff af33 	bcc.w	8018fb6 <forward_dense+0x5aa>
 8019150:	e5d7      	b.n	8018d02 <forward_dense+0x2f6>
 8019152:	f1ba 0f0f 	cmp.w	sl, #15
 8019156:	eef0 5a66 	vmov.f32	s11, s13
 801915a:	f63f ae28 	bhi.w	8018dae <forward_dense+0x3a2>
 801915e:	4652      	mov	r2, sl
 8019160:	4620      	mov	r0, r4
 8019162:	9905      	ldr	r1, [sp, #20]
 8019164:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80191a8 <forward_dense+0x79c>
 8019168:	e694      	b.n	8018e94 <forward_dense+0x488>
 801916a:	2300      	movs	r3, #0
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	deff      	udf	#255	; 0xff
 8019170:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8019174:	2b04      	cmp	r3, #4
 8019176:	4691      	mov	r9, r2
 8019178:	f47f ac9d 	bne.w	8018ab6 <forward_dense+0xaa>
 801917c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8019180:	f1b9 0f00 	cmp.w	r9, #0
 8019184:	f43f ac9c 	beq.w	8018ac0 <forward_dense+0xb4>
 8019188:	e9d9 0100 	ldrd	r0, r1, [r9]
 801918c:	f000 fac6 	bl	801971c <ai_array_get_byte_size>
 8019190:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019194:	4602      	mov	r2, r0
 8019196:	4651      	mov	r1, sl
 8019198:	4618      	mov	r0, r3
 801919a:	f000 fb35 	bl	8019808 <memcpy>
 801919e:	4682      	mov	sl, r0
 80191a0:	e48e      	b.n	8018ac0 <forward_dense+0xb4>
 80191a2:	2300      	movs	r3, #0
 80191a4:	930e      	str	r3, [sp, #56]	; 0x38
 80191a6:	e45d      	b.n	8018a64 <forward_dense+0x58>
 80191a8:	00000000 	.word	0x00000000

080191ac <nl_func_sm_array_f32>:
 80191ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191b0:	ed2d 8b04 	vpush	{d8-d9}
 80191b4:	6984      	ldr	r4, [r0, #24]
 80191b6:	b089      	sub	sp, #36	; 0x24
 80191b8:	4626      	mov	r6, r4
 80191ba:	698f      	ldr	r7, [r1, #24]
 80191bc:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80191c0:	68bd      	ldr	r5, [r7, #8]
 80191c2:	9402      	str	r4, [sp, #8]
 80191c4:	eba2 040e 	sub.w	r4, r2, lr
 80191c8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80191cc:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80191d0:	68fc      	ldr	r4, [r7, #12]
 80191d2:	68b6      	ldr	r6, [r6, #8]
 80191d4:	eba2 020c 	sub.w	r2, r2, ip
 80191d8:	42a5      	cmp	r5, r4
 80191da:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80191de:	d351      	bcc.n	8019284 <nl_func_sm_array_f32+0xd8>
 80191e0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80191e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80191e8:	f1ce 0200 	rsb	r2, lr, #0
 80191ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80191f0:	e9cd 1006 	strd	r1, r0, [sp, #24]
 80191f4:	9303      	str	r3, [sp, #12]
 80191f6:	9204      	str	r2, [sp, #16]
 80191f8:	009b      	lsls	r3, r3, #2
 80191fa:	f1cc 0200 	rsb	r2, ip, #0
 80191fe:	9205      	str	r2, [sp, #20]
 8019200:	9301      	str	r3, [sp, #4]
 8019202:	9b02      	ldr	r3, [sp, #8]
 8019204:	9a07      	ldr	r2, [sp, #28]
 8019206:	60bd      	str	r5, [r7, #8]
 8019208:	609e      	str	r6, [r3, #8]
 801920a:	9b06      	ldr	r3, [sp, #24]
 801920c:	6992      	ldr	r2, [r2, #24]
 801920e:	699b      	ldr	r3, [r3, #24]
 8019210:	6894      	ldr	r4, [r2, #8]
 8019212:	9a03      	ldr	r2, [sp, #12]
 8019214:	689b      	ldr	r3, [r3, #8]
 8019216:	2a01      	cmp	r2, #1
 8019218:	ed93 8a00 	vldr	s16, [r3]
 801921c:	d93b      	bls.n	8019296 <nl_func_sm_array_f32+0xea>
 801921e:	9901      	ldr	r1, [sp, #4]
 8019220:	1d1a      	adds	r2, r3, #4
 8019222:	eb03 0b01 	add.w	fp, r3, r1
 8019226:	ecf2 7a01 	vldmia	r2!, {s15}
 801922a:	4593      	cmp	fp, r2
 801922c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8019230:	d1f9      	bne.n	8019226 <nl_func_sm_array_f32+0x7a>
 8019232:	469a      	mov	sl, r3
 8019234:	46a1      	mov	r9, r4
 8019236:	46a0      	mov	r8, r4
 8019238:	eddf 8a1a 	vldr	s17, [pc, #104]	; 80192a4 <nl_func_sm_array_f32+0xf8>
 801923c:	ecba 0a01 	vldmia	sl!, {s0}
 8019240:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019244:	f004 ffe6 	bl	801e214 <expf>
 8019248:	45d3      	cmp	fp, sl
 801924a:	eca8 0a01 	vstmia	r8!, {s0}
 801924e:	ee78 8a80 	vadd.f32	s17, s17, s0
 8019252:	d1f3      	bne.n	801923c <nl_func_sm_array_f32+0x90>
 8019254:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801925c:	d00b      	beq.n	8019276 <nl_func_sm_array_f32+0xca>
 801925e:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8019262:	9b01      	ldr	r3, [sp, #4]
 8019264:	441c      	add	r4, r3
 8019266:	edd9 7a00 	vldr	s15, [r9]
 801926a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801926e:	ece9 7a01 	vstmia	r9!, {s15}
 8019272:	454c      	cmp	r4, r9
 8019274:	d1f7      	bne.n	8019266 <nl_func_sm_array_f32+0xba>
 8019276:	9b04      	ldr	r3, [sp, #16]
 8019278:	68fc      	ldr	r4, [r7, #12]
 801927a:	441d      	add	r5, r3
 801927c:	9b05      	ldr	r3, [sp, #20]
 801927e:	42ac      	cmp	r4, r5
 8019280:	441e      	add	r6, r3
 8019282:	d9be      	bls.n	8019202 <nl_func_sm_array_f32+0x56>
 8019284:	9a02      	ldr	r2, [sp, #8]
 8019286:	60bc      	str	r4, [r7, #8]
 8019288:	68d3      	ldr	r3, [r2, #12]
 801928a:	6093      	str	r3, [r2, #8]
 801928c:	b009      	add	sp, #36	; 0x24
 801928e:	ecbd 8b04 	vpop	{d8-d9}
 8019292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019296:	2a00      	cmp	r2, #0
 8019298:	d0ed      	beq.n	8019276 <nl_func_sm_array_f32+0xca>
 801929a:	9a01      	ldr	r2, [sp, #4]
 801929c:	eb03 0b02 	add.w	fp, r3, r2
 80192a0:	e7c7      	b.n	8019232 <nl_func_sm_array_f32+0x86>
 80192a2:	bf00      	nop
 80192a4:	00000000 	.word	0x00000000

080192a8 <nl_func_relu_generic_array_f32>:
 80192a8:	b430      	push	{r4, r5}
 80192aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80192ae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80192b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192b6:	6989      	ldr	r1, [r1, #24]
 80192b8:	6980      	ldr	r0, [r0, #24]
 80192ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80192be:	f102 32ff 	add.w	r2, r2, #4294967295
 80192c2:	6880      	ldr	r0, [r0, #8]
 80192c4:	688c      	ldr	r4, [r1, #8]
 80192c6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80192ca:	4410      	add	r0, r2
 80192cc:	edd3 6a00 	vldr	s13, [r3]
 80192d0:	4422      	add	r2, r4
 80192d2:	ed93 6a01 	vldr	s12, [r3, #4]
 80192d6:	d421      	bmi.n	801931c <nl_func_relu_generic_array_f32+0x74>
 80192d8:	4294      	cmp	r4, r2
 80192da:	d83d      	bhi.n	8019358 <nl_func_relu_generic_array_f32+0xb0>
 80192dc:	1d13      	adds	r3, r2, #4
 80192de:	1d02      	adds	r2, r0, #4
 80192e0:	e010      	b.n	8019304 <nl_func_relu_generic_array_f32+0x5c>
 80192e2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80192e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ea:	d503      	bpl.n	80192f4 <nl_func_relu_generic_array_f32+0x4c>
 80192ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80192f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80192f4:	ed62 7a01 	vstmdb	r2!, {s15}
 80192f8:	6888      	ldr	r0, [r1, #8]
 80192fa:	f1a3 0408 	sub.w	r4, r3, #8
 80192fe:	4284      	cmp	r4, r0
 8019300:	462b      	mov	r3, r5
 8019302:	d329      	bcc.n	8019358 <nl_func_relu_generic_array_f32+0xb0>
 8019304:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019308:	eef4 7ac7 	vcmpe.f32	s15, s14
 801930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019310:	f1a3 0504 	sub.w	r5, r3, #4
 8019314:	d4e5      	bmi.n	80192e2 <nl_func_relu_generic_array_f32+0x3a>
 8019316:	eef0 7a47 	vmov.f32	s15, s14
 801931a:	e7eb      	b.n	80192f4 <nl_func_relu_generic_array_f32+0x4c>
 801931c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8019320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019324:	d01a      	beq.n	801935c <nl_func_relu_generic_array_f32+0xb4>
 8019326:	4294      	cmp	r4, r2
 8019328:	d816      	bhi.n	8019358 <nl_func_relu_generic_array_f32+0xb0>
 801932a:	1d13      	adds	r3, r2, #4
 801932c:	1d02      	adds	r2, r0, #4
 801932e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019332:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801933a:	f1a3 0408 	sub.w	r4, r3, #8
 801933e:	f1a3 0004 	sub.w	r0, r3, #4
 8019342:	4623      	mov	r3, r4
 8019344:	d522      	bpl.n	801938c <nl_func_relu_generic_array_f32+0xe4>
 8019346:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801934a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801934e:	ed62 7a01 	vstmdb	r2!, {s15}
 8019352:	688b      	ldr	r3, [r1, #8]
 8019354:	42a3      	cmp	r3, r4
 8019356:	d91e      	bls.n	8019396 <nl_func_relu_generic_array_f32+0xee>
 8019358:	bc30      	pop	{r4, r5}
 801935a:	4770      	bx	lr
 801935c:	4294      	cmp	r4, r2
 801935e:	d8fb      	bhi.n	8019358 <nl_func_relu_generic_array_f32+0xb0>
 8019360:	2500      	movs	r5, #0
 8019362:	1d13      	adds	r3, r2, #4
 8019364:	1d02      	adds	r2, r0, #4
 8019366:	ed53 7a01 	vldr	s15, [r3, #-4]
 801936a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019372:	f1a3 0408 	sub.w	r4, r3, #8
 8019376:	f1a3 0004 	sub.w	r0, r3, #4
 801937a:	4623      	mov	r3, r4
 801937c:	db0d      	blt.n	801939a <nl_func_relu_generic_array_f32+0xf2>
 801937e:	ed62 7a01 	vstmdb	r2!, {s15}
 8019382:	688b      	ldr	r3, [r1, #8]
 8019384:	42a3      	cmp	r3, r4
 8019386:	d8e7      	bhi.n	8019358 <nl_func_relu_generic_array_f32+0xb0>
 8019388:	4603      	mov	r3, r0
 801938a:	e7ec      	b.n	8019366 <nl_func_relu_generic_array_f32+0xbe>
 801938c:	ed62 7a01 	vstmdb	r2!, {s15}
 8019390:	688c      	ldr	r4, [r1, #8]
 8019392:	429c      	cmp	r4, r3
 8019394:	d8e0      	bhi.n	8019358 <nl_func_relu_generic_array_f32+0xb0>
 8019396:	4603      	mov	r3, r0
 8019398:	e7c9      	b.n	801932e <nl_func_relu_generic_array_f32+0x86>
 801939a:	f842 5d04 	str.w	r5, [r2, #-4]!
 801939e:	688c      	ldr	r4, [r1, #8]
 80193a0:	429c      	cmp	r4, r3
 80193a2:	d8d9      	bhi.n	8019358 <nl_func_relu_generic_array_f32+0xb0>
 80193a4:	4603      	mov	r3, r0
 80193a6:	e7de      	b.n	8019366 <nl_func_relu_generic_array_f32+0xbe>

080193a8 <forward_relu>:
 80193a8:	6982      	ldr	r2, [r0, #24]
 80193aa:	8813      	ldrh	r3, [r2, #0]
 80193ac:	b32b      	cbz	r3, 80193fa <forward_relu+0x52>
 80193ae:	6852      	ldr	r2, [r2, #4]
 80193b0:	6851      	ldr	r1, [r2, #4]
 80193b2:	b101      	cbz	r1, 80193b6 <forward_relu+0xe>
 80193b4:	6809      	ldr	r1, [r1, #0]
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d91c      	bls.n	80193f4 <forward_relu+0x4c>
 80193ba:	b4f0      	push	{r4, r5, r6, r7}
 80193bc:	6917      	ldr	r7, [r2, #16]
 80193be:	b107      	cbz	r7, 80193c2 <forward_relu+0x1a>
 80193c0:	683f      	ldr	r7, [r7, #0]
 80193c2:	688c      	ldr	r4, [r1, #8]
 80193c4:	69c3      	ldr	r3, [r0, #28]
 80193c6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d043      	beq.n	8019456 <forward_relu+0xae>
 80193ce:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80193d2:	2d01      	cmp	r5, #1
 80193d4:	d013      	beq.n	80193fe <forward_relu+0x56>
 80193d6:	2201      	movs	r2, #1
 80193d8:	b144      	cbz	r4, 80193ec <forward_relu+0x44>
 80193da:	68ce      	ldr	r6, [r1, #12]
 80193dc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80193e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80193e4:	42a6      	cmp	r6, r4
 80193e6:	fb05 f202 	mul.w	r2, r5, r2
 80193ea:	d1f9      	bne.n	80193e0 <forward_relu+0x38>
 80193ec:	4638      	mov	r0, r7
 80193ee:	bcf0      	pop	{r4, r5, r6, r7}
 80193f0:	f7ff bf5a 	b.w	80192a8 <nl_func_relu_generic_array_f32>
 80193f4:	2300      	movs	r3, #0
 80193f6:	685b      	ldr	r3, [r3, #4]
 80193f8:	deff      	udf	#255	; 0xff
 80193fa:	685b      	ldr	r3, [r3, #4]
 80193fc:	deff      	udf	#255	; 0xff
 80193fe:	69ba      	ldr	r2, [r7, #24]
 8019400:	6988      	ldr	r0, [r1, #24]
 8019402:	6896      	ldr	r6, [r2, #8]
 8019404:	ed93 7a00 	vldr	s14, [r3]
 8019408:	6882      	ldr	r2, [r0, #8]
 801940a:	b184      	cbz	r4, 801942e <forward_relu+0x86>
 801940c:	462b      	mov	r3, r5
 801940e:	68cd      	ldr	r5, [r1, #12]
 8019410:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8019414:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8019418:	42a5      	cmp	r5, r4
 801941a:	fb01 f303 	mul.w	r3, r1, r3
 801941e:	d1f9      	bne.n	8019414 <forward_relu+0x6c>
 8019420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019424:	3b01      	subs	r3, #1
 8019426:	009b      	lsls	r3, r3, #2
 8019428:	18d2      	adds	r2, r2, r3
 801942a:	441e      	add	r6, r3
 801942c:	d23a      	bcs.n	80194a4 <forward_relu+0xfc>
 801942e:	2500      	movs	r5, #0
 8019430:	1d13      	adds	r3, r2, #4
 8019432:	1d32      	adds	r2, r6, #4
 8019434:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019440:	f1a3 0104 	sub.w	r1, r3, #4
 8019444:	d830      	bhi.n	80194a8 <forward_relu+0x100>
 8019446:	ed62 7a01 	vstmdb	r2!, {s15}
 801944a:	6884      	ldr	r4, [r0, #8]
 801944c:	3b08      	subs	r3, #8
 801944e:	429c      	cmp	r4, r3
 8019450:	d828      	bhi.n	80194a4 <forward_relu+0xfc>
 8019452:	460b      	mov	r3, r1
 8019454:	e7ee      	b.n	8019434 <forward_relu+0x8c>
 8019456:	69bb      	ldr	r3, [r7, #24]
 8019458:	698d      	ldr	r5, [r1, #24]
 801945a:	6898      	ldr	r0, [r3, #8]
 801945c:	68ab      	ldr	r3, [r5, #8]
 801945e:	b184      	cbz	r4, 8019482 <forward_relu+0xda>
 8019460:	2201      	movs	r2, #1
 8019462:	68ce      	ldr	r6, [r1, #12]
 8019464:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8019468:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 801946c:	42a6      	cmp	r6, r4
 801946e:	fb01 f202 	mul.w	r2, r1, r2
 8019472:	d1f9      	bne.n	8019468 <forward_relu+0xc0>
 8019474:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019478:	3a01      	subs	r2, #1
 801947a:	0092      	lsls	r2, r2, #2
 801947c:	189b      	adds	r3, r3, r2
 801947e:	4410      	add	r0, r2
 8019480:	d210      	bcs.n	80194a4 <forward_relu+0xfc>
 8019482:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80194b8 <forward_relu+0x110>
 8019486:	3304      	adds	r3, #4
 8019488:	1d01      	adds	r1, r0, #4
 801948a:	ed53 7a01 	vldr	s15, [r3, #-4]
 801948e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8019492:	ed61 7a01 	vstmdb	r1!, {s15}
 8019496:	68a8      	ldr	r0, [r5, #8]
 8019498:	f1a3 0208 	sub.w	r2, r3, #8
 801949c:	4290      	cmp	r0, r2
 801949e:	f1a3 0304 	sub.w	r3, r3, #4
 80194a2:	d9f2      	bls.n	801948a <forward_relu+0xe2>
 80194a4:	bcf0      	pop	{r4, r5, r6, r7}
 80194a6:	4770      	bx	lr
 80194a8:	f842 5d04 	str.w	r5, [r2, #-4]!
 80194ac:	6884      	ldr	r4, [r0, #8]
 80194ae:	3b08      	subs	r3, #8
 80194b0:	429c      	cmp	r4, r3
 80194b2:	d8f7      	bhi.n	80194a4 <forward_relu+0xfc>
 80194b4:	460b      	mov	r3, r1
 80194b6:	e7bd      	b.n	8019434 <forward_relu+0x8c>
 80194b8:	00000000 	.word	0x00000000

080194bc <forward_sm>:
 80194bc:	6982      	ldr	r2, [r0, #24]
 80194be:	8813      	ldrh	r3, [r2, #0]
 80194c0:	b333      	cbz	r3, 8019510 <forward_sm+0x54>
 80194c2:	6852      	ldr	r2, [r2, #4]
 80194c4:	6851      	ldr	r1, [r2, #4]
 80194c6:	b101      	cbz	r1, 80194ca <forward_sm+0xe>
 80194c8:	6809      	ldr	r1, [r1, #0]
 80194ca:	2b01      	cmp	r3, #1
 80194cc:	d91d      	bls.n	801950a <forward_sm+0x4e>
 80194ce:	6913      	ldr	r3, [r2, #16]
 80194d0:	b1cb      	cbz	r3, 8019506 <forward_sm+0x4a>
 80194d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194d4:	6818      	ldr	r0, [r3, #0]
 80194d6:	688c      	ldr	r4, [r1, #8]
 80194d8:	68c3      	ldr	r3, [r0, #12]
 80194da:	68ce      	ldr	r6, [r1, #12]
 80194dc:	0a24      	lsrs	r4, r4, #8
 80194de:	685f      	ldr	r7, [r3, #4]
 80194e0:	b083      	sub	sp, #12
 80194e2:	6873      	ldr	r3, [r6, #4]
 80194e4:	f04f 0201 	mov.w	r2, #1
 80194e8:	d007      	beq.n	80194fa <forward_sm+0x3e>
 80194ea:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80194ee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80194f2:	42a6      	cmp	r6, r4
 80194f4:	fb05 f202 	mul.w	r2, r5, r2
 80194f8:	d1f9      	bne.n	80194ee <forward_sm+0x32>
 80194fa:	e9cd 3700 	strd	r3, r7, [sp]
 80194fe:	f7ff fe55 	bl	80191ac <nl_func_sm_array_f32>
 8019502:	b003      	add	sp, #12
 8019504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019506:	68db      	ldr	r3, [r3, #12]
 8019508:	deff      	udf	#255	; 0xff
 801950a:	2300      	movs	r3, #0
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	deff      	udf	#255	; 0xff
 8019510:	685b      	ldr	r3, [r3, #4]
 8019512:	deff      	udf	#255	; 0xff

08019514 <ai_check_custom_types>:
 8019514:	4b13      	ldr	r3, [pc, #76]	; (8019564 <ai_check_custom_types+0x50>)
 8019516:	b082      	sub	sp, #8
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	9301      	str	r3, [sp, #4]
 801951c:	b118      	cbz	r0, 8019526 <ai_check_custom_types+0x12>
 801951e:	7803      	ldrb	r3, [r0, #0]
 8019520:	2b03      	cmp	r3, #3
 8019522:	d002      	beq.n	801952a <ai_check_custom_types+0x16>
 8019524:	2000      	movs	r0, #0
 8019526:	b002      	add	sp, #8
 8019528:	4770      	bx	lr
 801952a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801952e:	4293      	cmp	r3, r2
 8019530:	d004      	beq.n	801953c <ai_check_custom_types+0x28>
 8019532:	2001      	movs	r0, #1
 8019534:	f080 0001 	eor.w	r0, r0, #1
 8019538:	b002      	add	sp, #8
 801953a:	4770      	bx	lr
 801953c:	7842      	ldrb	r2, [r0, #1]
 801953e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019542:	3001      	adds	r0, #1
 8019544:	429a      	cmp	r2, r3
 8019546:	d1f4      	bne.n	8019532 <ai_check_custom_types+0x1e>
 8019548:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801954c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019550:	429a      	cmp	r2, r3
 8019552:	d1ee      	bne.n	8019532 <ai_check_custom_types+0x1e>
 8019554:	7842      	ldrb	r2, [r0, #1]
 8019556:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801955a:	429a      	cmp	r2, r3
 801955c:	d1e9      	bne.n	8019532 <ai_check_custom_types+0x1e>
 801955e:	2000      	movs	r0, #0
 8019560:	e7e8      	b.n	8019534 <ai_check_custom_types+0x20>
 8019562:	bf00      	nop
 8019564:	0801ea08 	.word	0x0801ea08

08019568 <ai_layers_init_all>:
 8019568:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801956a:	b17a      	cbz	r2, 801958c <ai_layers_init_all+0x24>
 801956c:	6913      	ldr	r3, [r2, #16]
 801956e:	60d0      	str	r0, [r2, #12]
 8019570:	429a      	cmp	r2, r3
 8019572:	f04f 0201 	mov.w	r2, #1
 8019576:	d009      	beq.n	801958c <ai_layers_init_all+0x24>
 8019578:	b143      	cbz	r3, 801958c <ai_layers_init_all+0x24>
 801957a:	6919      	ldr	r1, [r3, #16]
 801957c:	60d8      	str	r0, [r3, #12]
 801957e:	4299      	cmp	r1, r3
 8019580:	f102 0201 	add.w	r2, r2, #1
 8019584:	d002      	beq.n	801958c <ai_layers_init_all+0x24>
 8019586:	460b      	mov	r3, r1
 8019588:	2b00      	cmp	r3, #0
 801958a:	d1f6      	bne.n	801957a <ai_layers_init_all+0x12>
 801958c:	4610      	mov	r0, r2
 801958e:	4770      	bx	lr

08019590 <ai_layers_post_init_all>:
 8019590:	b538      	push	{r3, r4, r5, lr}
 8019592:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8019594:	b184      	cbz	r4, 80195b8 <ai_layers_post_init_all+0x28>
 8019596:	2500      	movs	r5, #0
 8019598:	6863      	ldr	r3, [r4, #4]
 801959a:	07db      	lsls	r3, r3, #31
 801959c:	d504      	bpl.n	80195a8 <ai_layers_post_init_all+0x18>
 801959e:	6a23      	ldr	r3, [r4, #32]
 80195a0:	b113      	cbz	r3, 80195a8 <ai_layers_post_init_all+0x18>
 80195a2:	4620      	mov	r0, r4
 80195a4:	4798      	blx	r3
 80195a6:	3501      	adds	r5, #1
 80195a8:	6923      	ldr	r3, [r4, #16]
 80195aa:	42a3      	cmp	r3, r4
 80195ac:	d002      	beq.n	80195b4 <ai_layers_post_init_all+0x24>
 80195ae:	461c      	mov	r4, r3
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d1f1      	bne.n	8019598 <ai_layers_post_init_all+0x8>
 80195b4:	4628      	mov	r0, r5
 80195b6:	bd38      	pop	{r3, r4, r5, pc}
 80195b8:	4625      	mov	r5, r4
 80195ba:	e7fb      	b.n	80195b4 <ai_layers_post_init_all+0x24>

080195bc <ai_layers_forward_all>:
 80195bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195c0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80195c2:	4604      	mov	r4, r0
 80195c4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80195c6:	b31f      	cbz	r7, 8019610 <ai_layers_forward_all+0x54>
 80195c8:	b1f5      	cbz	r5, 8019608 <ai_layers_forward_all+0x4c>
 80195ca:	2600      	movs	r6, #0
 80195cc:	6385      	str	r5, [r0, #56]	; 0x38
 80195ce:	4629      	mov	r1, r5
 80195d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80195d2:	2001      	movs	r0, #1
 80195d4:	47b8      	blx	r7
 80195d6:	46b0      	mov	r8, r6
 80195d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80195da:	e006      	b.n	80195ea <ai_layers_forward_all+0x2e>
 80195dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80195de:	63a1      	str	r1, [r4, #56]	; 0x38
 80195e0:	2003      	movs	r0, #3
 80195e2:	47b8      	blx	r7
 80195e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80195e6:	3601      	adds	r6, #1
 80195e8:	b179      	cbz	r1, 801960a <ai_layers_forward_all+0x4e>
 80195ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80195ec:	2002      	movs	r0, #2
 80195ee:	47b8      	blx	r7
 80195f0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80195f2:	696b      	ldr	r3, [r5, #20]
 80195f4:	4628      	mov	r0, r5
 80195f6:	4798      	blx	r3
 80195f8:	6929      	ldr	r1, [r5, #16]
 80195fa:	428d      	cmp	r5, r1
 80195fc:	d1ee      	bne.n	80195dc <ai_layers_forward_all+0x20>
 80195fe:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8019602:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019604:	2100      	movs	r1, #0
 8019606:	e7eb      	b.n	80195e0 <ai_layers_forward_all+0x24>
 8019608:	462e      	mov	r6, r5
 801960a:	4630      	mov	r0, r6
 801960c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019610:	2d00      	cmp	r5, #0
 8019612:	d0f9      	beq.n	8019608 <ai_layers_forward_all+0x4c>
 8019614:	463e      	mov	r6, r7
 8019616:	6385      	str	r5, [r0, #56]	; 0x38
 8019618:	696b      	ldr	r3, [r5, #20]
 801961a:	4628      	mov	r0, r5
 801961c:	4798      	blx	r3
 801961e:	692b      	ldr	r3, [r5, #16]
 8019620:	3601      	adds	r6, #1
 8019622:	42ab      	cmp	r3, r5
 8019624:	d004      	beq.n	8019630 <ai_layers_forward_all+0x74>
 8019626:	63a3      	str	r3, [r4, #56]	; 0x38
 8019628:	461d      	mov	r5, r3
 801962a:	2b00      	cmp	r3, #0
 801962c:	d1f4      	bne.n	8019618 <ai_layers_forward_all+0x5c>
 801962e:	e7ec      	b.n	801960a <ai_layers_forward_all+0x4e>
 8019630:	2300      	movs	r3, #0
 8019632:	63a3      	str	r3, [r4, #56]	; 0x38
 8019634:	4630      	mov	r0, r6
 8019636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801963a:	bf00      	nop

0801963c <ai_version_get>:
 801963c:	0212      	lsls	r2, r2, #8
 801963e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8019642:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8019646:	4770      	bx	lr

08019648 <get_tensor_byte_size>:
 8019648:	68c1      	ldr	r1, [r0, #12]
 801964a:	6942      	ldr	r2, [r0, #20]
 801964c:	6983      	ldr	r3, [r0, #24]
 801964e:	68c9      	ldr	r1, [r1, #12]
 8019650:	68d0      	ldr	r0, [r2, #12]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	fb00 f001 	mul.w	r0, r0, r1
 8019658:	4a04      	ldr	r2, [pc, #16]	; (801966c <get_tensor_byte_size+0x24>)
 801965a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 801965e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019662:	4293      	cmp	r3, r2
 8019664:	bf04      	itt	eq
 8019666:	3007      	addeq	r0, #7
 8019668:	08c0      	lsreq	r0, r0, #3
 801966a:	4770      	bx	lr
 801966c:	000400c0 	.word	0x000400c0

08019670 <ai_array_to_buffer_fmt>:
 8019670:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8019674:	2b02      	cmp	r3, #2
 8019676:	d036      	beq.n	80196e6 <ai_array_to_buffer_fmt+0x76>
 8019678:	4a21      	ldr	r2, [pc, #132]	; (8019700 <ai_array_to_buffer_fmt+0x90>)
 801967a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801967e:	4293      	cmp	r3, r2
 8019680:	d00f      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 8019682:	dd12      	ble.n	80196aa <ai_array_to_buffer_fmt+0x3a>
 8019684:	4a1f      	ldr	r2, [pc, #124]	; (8019704 <ai_array_to_buffer_fmt+0x94>)
 8019686:	4293      	cmp	r3, r2
 8019688:	d00b      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 801968a:	dd1e      	ble.n	80196ca <ai_array_to_buffer_fmt+0x5a>
 801968c:	4a1e      	ldr	r2, [pc, #120]	; (8019708 <ai_array_to_buffer_fmt+0x98>)
 801968e:	4293      	cmp	r3, r2
 8019690:	d007      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 8019692:	dd30      	ble.n	80196f6 <ai_array_to_buffer_fmt+0x86>
 8019694:	4a1d      	ldr	r2, [pc, #116]	; (801970c <ai_array_to_buffer_fmt+0x9c>)
 8019696:	4293      	cmp	r3, r2
 8019698:	d003      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 801969a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 801969e:	4293      	cmp	r3, r2
 80196a0:	d11f      	bne.n	80196e2 <ai_array_to_buffer_fmt+0x72>
 80196a2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80196a6:	4318      	orrs	r0, r3
 80196a8:	4770      	bx	lr
 80196aa:	4a19      	ldr	r2, [pc, #100]	; (8019710 <ai_array_to_buffer_fmt+0xa0>)
 80196ac:	4293      	cmp	r3, r2
 80196ae:	d0f8      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196b0:	dd0b      	ble.n	80196ca <ai_array_to_buffer_fmt+0x5a>
 80196b2:	4a18      	ldr	r2, [pc, #96]	; (8019714 <ai_array_to_buffer_fmt+0xa4>)
 80196b4:	4293      	cmp	r3, r2
 80196b6:	d0f4      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196b8:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80196bc:	4293      	cmp	r3, r2
 80196be:	d0f0      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196c0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80196c4:	4293      	cmp	r3, r2
 80196c6:	d10c      	bne.n	80196e2 <ai_array_to_buffer_fmt+0x72>
 80196c8:	e7eb      	b.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196ca:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80196ce:	4293      	cmp	r3, r2
 80196d0:	d0e7      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196d2:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80196d6:	4293      	cmp	r3, r2
 80196d8:	d0e3      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196da:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80196de:	4293      	cmp	r3, r2
 80196e0:	d0df      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196e2:	2340      	movs	r3, #64	; 0x40
 80196e4:	e7dd      	b.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196e6:	4b0c      	ldr	r3, [pc, #48]	; (8019718 <ai_array_to_buffer_fmt+0xa8>)
 80196e8:	4003      	ands	r3, r0
 80196ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80196ee:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80196f2:	4318      	orrs	r0, r3
 80196f4:	4770      	bx	lr
 80196f6:	3a0f      	subs	r2, #15
 80196f8:	4293      	cmp	r3, r2
 80196fa:	d0d2      	beq.n	80196a2 <ai_array_to_buffer_fmt+0x32>
 80196fc:	e7f1      	b.n	80196e2 <ai_array_to_buffer_fmt+0x72>
 80196fe:	bf00      	nop
 8019700:	00060440 	.word	0x00060440
 8019704:	00840447 	.word	0x00840447
 8019708:	0084084f 	.word	0x0084084f
 801970c:	00841040 	.word	0x00841040
 8019710:	00040447 	.word	0x00040447
 8019714:	0004084f 	.word	0x0004084f
 8019718:	00803fff 	.word	0x00803fff

0801971c <ai_array_get_byte_size>:
 801971c:	b1c1      	cbz	r1, 8019750 <ai_array_get_byte_size+0x34>
 801971e:	11c3      	asrs	r3, r0, #7
 8019720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019724:	fb01 f102 	mul.w	r1, r1, r2
 8019728:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801972c:	3107      	adds	r1, #7
 801972e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8019732:	f021 0107 	bic.w	r1, r1, #7
 8019736:	2804      	cmp	r0, #4
 8019738:	fa21 f102 	lsr.w	r1, r1, r2
 801973c:	d00a      	beq.n	8019754 <ai_array_get_byte_size+0x38>
 801973e:	2808      	cmp	r0, #8
 8019740:	d103      	bne.n	801974a <ai_array_get_byte_size+0x2e>
 8019742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019746:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801974a:	3107      	adds	r1, #7
 801974c:	08c8      	lsrs	r0, r1, #3
 801974e:	4770      	bx	lr
 8019750:	4608      	mov	r0, r1
 8019752:	4770      	bx	lr
 8019754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019758:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801975c:	3107      	adds	r1, #7
 801975e:	08c8      	lsrs	r0, r1, #3
 8019760:	4770      	bx	lr
 8019762:	bf00      	nop

08019764 <ai_array_get_data_byte_size>:
 8019764:	b161      	cbz	r1, 8019780 <ai_array_get_data_byte_size+0x1c>
 8019766:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801976a:	fb01 f103 	mul.w	r1, r1, r3
 801976e:	3107      	adds	r1, #7
 8019770:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8019774:	f021 0107 	bic.w	r1, r1, #7
 8019778:	40c1      	lsrs	r1, r0
 801977a:	3107      	adds	r1, #7
 801977c:	08c8      	lsrs	r0, r1, #3
 801977e:	4770      	bx	lr
 8019780:	4608      	mov	r0, r1
 8019782:	4770      	bx	lr

08019784 <calloc>:
 8019784:	4b02      	ldr	r3, [pc, #8]	; (8019790 <calloc+0xc>)
 8019786:	460a      	mov	r2, r1
 8019788:	4601      	mov	r1, r0
 801978a:	6818      	ldr	r0, [r3, #0]
 801978c:	f000 b851 	b.w	8019832 <_calloc_r>
 8019790:	200008fc 	.word	0x200008fc

08019794 <__errno>:
 8019794:	4b01      	ldr	r3, [pc, #4]	; (801979c <__errno+0x8>)
 8019796:	6818      	ldr	r0, [r3, #0]
 8019798:	4770      	bx	lr
 801979a:	bf00      	nop
 801979c:	200008fc 	.word	0x200008fc

080197a0 <__libc_init_array>:
 80197a0:	b570      	push	{r4, r5, r6, lr}
 80197a2:	4d0d      	ldr	r5, [pc, #52]	; (80197d8 <__libc_init_array+0x38>)
 80197a4:	2600      	movs	r6, #0
 80197a6:	4c0d      	ldr	r4, [pc, #52]	; (80197dc <__libc_init_array+0x3c>)
 80197a8:	1b64      	subs	r4, r4, r5
 80197aa:	10a4      	asrs	r4, r4, #2
 80197ac:	42a6      	cmp	r6, r4
 80197ae:	d109      	bne.n	80197c4 <__libc_init_array+0x24>
 80197b0:	4d0b      	ldr	r5, [pc, #44]	; (80197e0 <__libc_init_array+0x40>)
 80197b2:	2600      	movs	r6, #0
 80197b4:	4c0b      	ldr	r4, [pc, #44]	; (80197e4 <__libc_init_array+0x44>)
 80197b6:	f005 f8c9 	bl	801e94c <_init>
 80197ba:	1b64      	subs	r4, r4, r5
 80197bc:	10a4      	asrs	r4, r4, #2
 80197be:	42a6      	cmp	r6, r4
 80197c0:	d105      	bne.n	80197ce <__libc_init_array+0x2e>
 80197c2:	bd70      	pop	{r4, r5, r6, pc}
 80197c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80197c8:	3601      	adds	r6, #1
 80197ca:	4798      	blx	r3
 80197cc:	e7ee      	b.n	80197ac <__libc_init_array+0xc>
 80197ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80197d2:	3601      	adds	r6, #1
 80197d4:	4798      	blx	r3
 80197d6:	e7f2      	b.n	80197be <__libc_init_array+0x1e>
 80197d8:	08073cfc 	.word	0x08073cfc
 80197dc:	08073cfc 	.word	0x08073cfc
 80197e0:	08073cfc 	.word	0x08073cfc
 80197e4:	08073d00 	.word	0x08073d00

080197e8 <malloc>:
 80197e8:	4b02      	ldr	r3, [pc, #8]	; (80197f4 <malloc+0xc>)
 80197ea:	4601      	mov	r1, r0
 80197ec:	6818      	ldr	r0, [r3, #0]
 80197ee:	f000 b8a3 	b.w	8019938 <_malloc_r>
 80197f2:	bf00      	nop
 80197f4:	200008fc 	.word	0x200008fc

080197f8 <free>:
 80197f8:	4b02      	ldr	r3, [pc, #8]	; (8019804 <free+0xc>)
 80197fa:	4601      	mov	r1, r0
 80197fc:	6818      	ldr	r0, [r3, #0]
 80197fe:	f000 b82f 	b.w	8019860 <_free_r>
 8019802:	bf00      	nop
 8019804:	200008fc 	.word	0x200008fc

08019808 <memcpy>:
 8019808:	440a      	add	r2, r1
 801980a:	1e43      	subs	r3, r0, #1
 801980c:	4291      	cmp	r1, r2
 801980e:	d100      	bne.n	8019812 <memcpy+0xa>
 8019810:	4770      	bx	lr
 8019812:	b510      	push	{r4, lr}
 8019814:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019818:	4291      	cmp	r1, r2
 801981a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801981e:	d1f9      	bne.n	8019814 <memcpy+0xc>
 8019820:	bd10      	pop	{r4, pc}

08019822 <memset>:
 8019822:	4402      	add	r2, r0
 8019824:	4603      	mov	r3, r0
 8019826:	4293      	cmp	r3, r2
 8019828:	d100      	bne.n	801982c <memset+0xa>
 801982a:	4770      	bx	lr
 801982c:	f803 1b01 	strb.w	r1, [r3], #1
 8019830:	e7f9      	b.n	8019826 <memset+0x4>

08019832 <_calloc_r>:
 8019832:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019834:	fba1 2402 	umull	r2, r4, r1, r2
 8019838:	b94c      	cbnz	r4, 801984e <_calloc_r+0x1c>
 801983a:	4611      	mov	r1, r2
 801983c:	9201      	str	r2, [sp, #4]
 801983e:	f000 f87b 	bl	8019938 <_malloc_r>
 8019842:	9a01      	ldr	r2, [sp, #4]
 8019844:	4605      	mov	r5, r0
 8019846:	b930      	cbnz	r0, 8019856 <_calloc_r+0x24>
 8019848:	4628      	mov	r0, r5
 801984a:	b003      	add	sp, #12
 801984c:	bd30      	pop	{r4, r5, pc}
 801984e:	220c      	movs	r2, #12
 8019850:	2500      	movs	r5, #0
 8019852:	6002      	str	r2, [r0, #0]
 8019854:	e7f8      	b.n	8019848 <_calloc_r+0x16>
 8019856:	4621      	mov	r1, r4
 8019858:	f7ff ffe3 	bl	8019822 <memset>
 801985c:	e7f4      	b.n	8019848 <_calloc_r+0x16>
	...

08019860 <_free_r>:
 8019860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019862:	2900      	cmp	r1, #0
 8019864:	d043      	beq.n	80198ee <_free_r+0x8e>
 8019866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801986a:	1f0c      	subs	r4, r1, #4
 801986c:	9001      	str	r0, [sp, #4]
 801986e:	2b00      	cmp	r3, #0
 8019870:	bfb8      	it	lt
 8019872:	18e4      	addlt	r4, r4, r3
 8019874:	f003 f842 	bl	801c8fc <__malloc_lock>
 8019878:	4a1e      	ldr	r2, [pc, #120]	; (80198f4 <_free_r+0x94>)
 801987a:	9801      	ldr	r0, [sp, #4]
 801987c:	6813      	ldr	r3, [r2, #0]
 801987e:	b933      	cbnz	r3, 801988e <_free_r+0x2e>
 8019880:	6063      	str	r3, [r4, #4]
 8019882:	6014      	str	r4, [r2, #0]
 8019884:	b003      	add	sp, #12
 8019886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801988a:	f003 b83d 	b.w	801c908 <__malloc_unlock>
 801988e:	42a3      	cmp	r3, r4
 8019890:	d908      	bls.n	80198a4 <_free_r+0x44>
 8019892:	6825      	ldr	r5, [r4, #0]
 8019894:	1961      	adds	r1, r4, r5
 8019896:	428b      	cmp	r3, r1
 8019898:	bf01      	itttt	eq
 801989a:	6819      	ldreq	r1, [r3, #0]
 801989c:	685b      	ldreq	r3, [r3, #4]
 801989e:	1949      	addeq	r1, r1, r5
 80198a0:	6021      	streq	r1, [r4, #0]
 80198a2:	e7ed      	b.n	8019880 <_free_r+0x20>
 80198a4:	461a      	mov	r2, r3
 80198a6:	685b      	ldr	r3, [r3, #4]
 80198a8:	b10b      	cbz	r3, 80198ae <_free_r+0x4e>
 80198aa:	42a3      	cmp	r3, r4
 80198ac:	d9fa      	bls.n	80198a4 <_free_r+0x44>
 80198ae:	6811      	ldr	r1, [r2, #0]
 80198b0:	1855      	adds	r5, r2, r1
 80198b2:	42a5      	cmp	r5, r4
 80198b4:	d10b      	bne.n	80198ce <_free_r+0x6e>
 80198b6:	6824      	ldr	r4, [r4, #0]
 80198b8:	4421      	add	r1, r4
 80198ba:	1854      	adds	r4, r2, r1
 80198bc:	6011      	str	r1, [r2, #0]
 80198be:	42a3      	cmp	r3, r4
 80198c0:	d1e0      	bne.n	8019884 <_free_r+0x24>
 80198c2:	681c      	ldr	r4, [r3, #0]
 80198c4:	685b      	ldr	r3, [r3, #4]
 80198c6:	4421      	add	r1, r4
 80198c8:	6053      	str	r3, [r2, #4]
 80198ca:	6011      	str	r1, [r2, #0]
 80198cc:	e7da      	b.n	8019884 <_free_r+0x24>
 80198ce:	d902      	bls.n	80198d6 <_free_r+0x76>
 80198d0:	230c      	movs	r3, #12
 80198d2:	6003      	str	r3, [r0, #0]
 80198d4:	e7d6      	b.n	8019884 <_free_r+0x24>
 80198d6:	6825      	ldr	r5, [r4, #0]
 80198d8:	1961      	adds	r1, r4, r5
 80198da:	428b      	cmp	r3, r1
 80198dc:	bf02      	ittt	eq
 80198de:	6819      	ldreq	r1, [r3, #0]
 80198e0:	685b      	ldreq	r3, [r3, #4]
 80198e2:	1949      	addeq	r1, r1, r5
 80198e4:	6063      	str	r3, [r4, #4]
 80198e6:	bf08      	it	eq
 80198e8:	6021      	streq	r1, [r4, #0]
 80198ea:	6054      	str	r4, [r2, #4]
 80198ec:	e7ca      	b.n	8019884 <_free_r+0x24>
 80198ee:	b003      	add	sp, #12
 80198f0:	bd30      	pop	{r4, r5, pc}
 80198f2:	bf00      	nop
 80198f4:	20004058 	.word	0x20004058

080198f8 <sbrk_aligned>:
 80198f8:	b570      	push	{r4, r5, r6, lr}
 80198fa:	4e0e      	ldr	r6, [pc, #56]	; (8019934 <sbrk_aligned+0x3c>)
 80198fc:	460c      	mov	r4, r1
 80198fe:	4605      	mov	r5, r0
 8019900:	6831      	ldr	r1, [r6, #0]
 8019902:	b911      	cbnz	r1, 801990a <sbrk_aligned+0x12>
 8019904:	f000 ff0a 	bl	801a71c <_sbrk_r>
 8019908:	6030      	str	r0, [r6, #0]
 801990a:	4621      	mov	r1, r4
 801990c:	4628      	mov	r0, r5
 801990e:	f000 ff05 	bl	801a71c <_sbrk_r>
 8019912:	1c43      	adds	r3, r0, #1
 8019914:	d00a      	beq.n	801992c <sbrk_aligned+0x34>
 8019916:	1cc4      	adds	r4, r0, #3
 8019918:	f024 0403 	bic.w	r4, r4, #3
 801991c:	42a0      	cmp	r0, r4
 801991e:	d007      	beq.n	8019930 <sbrk_aligned+0x38>
 8019920:	1a21      	subs	r1, r4, r0
 8019922:	4628      	mov	r0, r5
 8019924:	f000 fefa 	bl	801a71c <_sbrk_r>
 8019928:	3001      	adds	r0, #1
 801992a:	d101      	bne.n	8019930 <sbrk_aligned+0x38>
 801992c:	f04f 34ff 	mov.w	r4, #4294967295
 8019930:	4620      	mov	r0, r4
 8019932:	bd70      	pop	{r4, r5, r6, pc}
 8019934:	2000405c 	.word	0x2000405c

08019938 <_malloc_r>:
 8019938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801993c:	1ccd      	adds	r5, r1, #3
 801993e:	4607      	mov	r7, r0
 8019940:	f025 0503 	bic.w	r5, r5, #3
 8019944:	3508      	adds	r5, #8
 8019946:	2d0c      	cmp	r5, #12
 8019948:	bf38      	it	cc
 801994a:	250c      	movcc	r5, #12
 801994c:	2d00      	cmp	r5, #0
 801994e:	db01      	blt.n	8019954 <_malloc_r+0x1c>
 8019950:	42a9      	cmp	r1, r5
 8019952:	d905      	bls.n	8019960 <_malloc_r+0x28>
 8019954:	230c      	movs	r3, #12
 8019956:	2600      	movs	r6, #0
 8019958:	603b      	str	r3, [r7, #0]
 801995a:	4630      	mov	r0, r6
 801995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019960:	4e2e      	ldr	r6, [pc, #184]	; (8019a1c <_malloc_r+0xe4>)
 8019962:	f002 ffcb 	bl	801c8fc <__malloc_lock>
 8019966:	6833      	ldr	r3, [r6, #0]
 8019968:	461c      	mov	r4, r3
 801996a:	bb34      	cbnz	r4, 80199ba <_malloc_r+0x82>
 801996c:	4629      	mov	r1, r5
 801996e:	4638      	mov	r0, r7
 8019970:	f7ff ffc2 	bl	80198f8 <sbrk_aligned>
 8019974:	1c43      	adds	r3, r0, #1
 8019976:	4604      	mov	r4, r0
 8019978:	d14d      	bne.n	8019a16 <_malloc_r+0xde>
 801997a:	6834      	ldr	r4, [r6, #0]
 801997c:	4626      	mov	r6, r4
 801997e:	2e00      	cmp	r6, #0
 8019980:	d140      	bne.n	8019a04 <_malloc_r+0xcc>
 8019982:	6823      	ldr	r3, [r4, #0]
 8019984:	4631      	mov	r1, r6
 8019986:	4638      	mov	r0, r7
 8019988:	eb04 0803 	add.w	r8, r4, r3
 801998c:	f000 fec6 	bl	801a71c <_sbrk_r>
 8019990:	4580      	cmp	r8, r0
 8019992:	d13a      	bne.n	8019a0a <_malloc_r+0xd2>
 8019994:	6821      	ldr	r1, [r4, #0]
 8019996:	3503      	adds	r5, #3
 8019998:	4638      	mov	r0, r7
 801999a:	1a6d      	subs	r5, r5, r1
 801999c:	f025 0503 	bic.w	r5, r5, #3
 80199a0:	3508      	adds	r5, #8
 80199a2:	2d0c      	cmp	r5, #12
 80199a4:	bf38      	it	cc
 80199a6:	250c      	movcc	r5, #12
 80199a8:	4629      	mov	r1, r5
 80199aa:	f7ff ffa5 	bl	80198f8 <sbrk_aligned>
 80199ae:	3001      	adds	r0, #1
 80199b0:	d02b      	beq.n	8019a0a <_malloc_r+0xd2>
 80199b2:	6823      	ldr	r3, [r4, #0]
 80199b4:	442b      	add	r3, r5
 80199b6:	6023      	str	r3, [r4, #0]
 80199b8:	e00e      	b.n	80199d8 <_malloc_r+0xa0>
 80199ba:	6822      	ldr	r2, [r4, #0]
 80199bc:	1b52      	subs	r2, r2, r5
 80199be:	d41e      	bmi.n	80199fe <_malloc_r+0xc6>
 80199c0:	2a0b      	cmp	r2, #11
 80199c2:	d916      	bls.n	80199f2 <_malloc_r+0xba>
 80199c4:	1961      	adds	r1, r4, r5
 80199c6:	42a3      	cmp	r3, r4
 80199c8:	6025      	str	r5, [r4, #0]
 80199ca:	bf18      	it	ne
 80199cc:	6059      	strne	r1, [r3, #4]
 80199ce:	6863      	ldr	r3, [r4, #4]
 80199d0:	bf08      	it	eq
 80199d2:	6031      	streq	r1, [r6, #0]
 80199d4:	5162      	str	r2, [r4, r5]
 80199d6:	604b      	str	r3, [r1, #4]
 80199d8:	f104 060b 	add.w	r6, r4, #11
 80199dc:	4638      	mov	r0, r7
 80199de:	f002 ff93 	bl	801c908 <__malloc_unlock>
 80199e2:	1d23      	adds	r3, r4, #4
 80199e4:	f026 0607 	bic.w	r6, r6, #7
 80199e8:	1af2      	subs	r2, r6, r3
 80199ea:	d0b6      	beq.n	801995a <_malloc_r+0x22>
 80199ec:	1b9b      	subs	r3, r3, r6
 80199ee:	50a3      	str	r3, [r4, r2]
 80199f0:	e7b3      	b.n	801995a <_malloc_r+0x22>
 80199f2:	6862      	ldr	r2, [r4, #4]
 80199f4:	42a3      	cmp	r3, r4
 80199f6:	bf0c      	ite	eq
 80199f8:	6032      	streq	r2, [r6, #0]
 80199fa:	605a      	strne	r2, [r3, #4]
 80199fc:	e7ec      	b.n	80199d8 <_malloc_r+0xa0>
 80199fe:	4623      	mov	r3, r4
 8019a00:	6864      	ldr	r4, [r4, #4]
 8019a02:	e7b2      	b.n	801996a <_malloc_r+0x32>
 8019a04:	4634      	mov	r4, r6
 8019a06:	6876      	ldr	r6, [r6, #4]
 8019a08:	e7b9      	b.n	801997e <_malloc_r+0x46>
 8019a0a:	230c      	movs	r3, #12
 8019a0c:	4638      	mov	r0, r7
 8019a0e:	603b      	str	r3, [r7, #0]
 8019a10:	f002 ff7a 	bl	801c908 <__malloc_unlock>
 8019a14:	e7a1      	b.n	801995a <_malloc_r+0x22>
 8019a16:	6025      	str	r5, [r4, #0]
 8019a18:	e7de      	b.n	80199d8 <_malloc_r+0xa0>
 8019a1a:	bf00      	nop
 8019a1c:	20004058 	.word	0x20004058

08019a20 <__cvt>:
 8019a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a24:	ec55 4b10 	vmov	r4, r5, d0
 8019a28:	2d00      	cmp	r5, #0
 8019a2a:	460e      	mov	r6, r1
 8019a2c:	4619      	mov	r1, r3
 8019a2e:	462b      	mov	r3, r5
 8019a30:	bfb4      	ite	lt
 8019a32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019a36:	2300      	movge	r3, #0
 8019a38:	4691      	mov	r9, r2
 8019a3a:	bfbf      	itttt	lt
 8019a3c:	4622      	movlt	r2, r4
 8019a3e:	461d      	movlt	r5, r3
 8019a40:	232d      	movlt	r3, #45	; 0x2d
 8019a42:	4614      	movlt	r4, r2
 8019a44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019a48:	700b      	strb	r3, [r1, #0]
 8019a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a4c:	f023 0820 	bic.w	r8, r3, #32
 8019a50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019a54:	d005      	beq.n	8019a62 <__cvt+0x42>
 8019a56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019a5a:	d100      	bne.n	8019a5e <__cvt+0x3e>
 8019a5c:	3601      	adds	r6, #1
 8019a5e:	2102      	movs	r1, #2
 8019a60:	e000      	b.n	8019a64 <__cvt+0x44>
 8019a62:	2103      	movs	r1, #3
 8019a64:	ab03      	add	r3, sp, #12
 8019a66:	4632      	mov	r2, r6
 8019a68:	9301      	str	r3, [sp, #4]
 8019a6a:	ab02      	add	r3, sp, #8
 8019a6c:	ec45 4b10 	vmov	d0, r4, r5
 8019a70:	9300      	str	r3, [sp, #0]
 8019a72:	4653      	mov	r3, sl
 8019a74:	f001 fdc4 	bl	801b600 <_dtoa_r>
 8019a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019a7c:	4607      	mov	r7, r0
 8019a7e:	d102      	bne.n	8019a86 <__cvt+0x66>
 8019a80:	f019 0f01 	tst.w	r9, #1
 8019a84:	d022      	beq.n	8019acc <__cvt+0xac>
 8019a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019a8a:	eb07 0906 	add.w	r9, r7, r6
 8019a8e:	d110      	bne.n	8019ab2 <__cvt+0x92>
 8019a90:	783b      	ldrb	r3, [r7, #0]
 8019a92:	2b30      	cmp	r3, #48	; 0x30
 8019a94:	d10a      	bne.n	8019aac <__cvt+0x8c>
 8019a96:	2200      	movs	r2, #0
 8019a98:	2300      	movs	r3, #0
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	4629      	mov	r1, r5
 8019a9e:	f7e7 f817 	bl	8000ad0 <__aeabi_dcmpeq>
 8019aa2:	b918      	cbnz	r0, 8019aac <__cvt+0x8c>
 8019aa4:	f1c6 0601 	rsb	r6, r6, #1
 8019aa8:	f8ca 6000 	str.w	r6, [sl]
 8019aac:	f8da 3000 	ldr.w	r3, [sl]
 8019ab0:	4499      	add	r9, r3
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	4620      	mov	r0, r4
 8019ab8:	4629      	mov	r1, r5
 8019aba:	f7e7 f809 	bl	8000ad0 <__aeabi_dcmpeq>
 8019abe:	b108      	cbz	r0, 8019ac4 <__cvt+0xa4>
 8019ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8019ac4:	2230      	movs	r2, #48	; 0x30
 8019ac6:	9b03      	ldr	r3, [sp, #12]
 8019ac8:	454b      	cmp	r3, r9
 8019aca:	d307      	bcc.n	8019adc <__cvt+0xbc>
 8019acc:	9b03      	ldr	r3, [sp, #12]
 8019ace:	4638      	mov	r0, r7
 8019ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ad2:	1bdb      	subs	r3, r3, r7
 8019ad4:	6013      	str	r3, [r2, #0]
 8019ad6:	b004      	add	sp, #16
 8019ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019adc:	1c59      	adds	r1, r3, #1
 8019ade:	9103      	str	r1, [sp, #12]
 8019ae0:	701a      	strb	r2, [r3, #0]
 8019ae2:	e7f0      	b.n	8019ac6 <__cvt+0xa6>

08019ae4 <__exponent>:
 8019ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ae6:	2900      	cmp	r1, #0
 8019ae8:	4603      	mov	r3, r0
 8019aea:	bfb8      	it	lt
 8019aec:	4249      	neglt	r1, r1
 8019aee:	f803 2b02 	strb.w	r2, [r3], #2
 8019af2:	bfb4      	ite	lt
 8019af4:	222d      	movlt	r2, #45	; 0x2d
 8019af6:	222b      	movge	r2, #43	; 0x2b
 8019af8:	2909      	cmp	r1, #9
 8019afa:	7042      	strb	r2, [r0, #1]
 8019afc:	dd2a      	ble.n	8019b54 <__exponent+0x70>
 8019afe:	f10d 0407 	add.w	r4, sp, #7
 8019b02:	270a      	movs	r7, #10
 8019b04:	46a4      	mov	ip, r4
 8019b06:	460a      	mov	r2, r1
 8019b08:	46a6      	mov	lr, r4
 8019b0a:	3c01      	subs	r4, #1
 8019b0c:	2a63      	cmp	r2, #99	; 0x63
 8019b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8019b12:	fb07 1516 	mls	r5, r7, r6, r1
 8019b16:	4631      	mov	r1, r6
 8019b18:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8019b1c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019b20:	dcf1      	bgt.n	8019b06 <__exponent+0x22>
 8019b22:	3130      	adds	r1, #48	; 0x30
 8019b24:	f1ae 0502 	sub.w	r5, lr, #2
 8019b28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019b2c:	1c44      	adds	r4, r0, #1
 8019b2e:	4629      	mov	r1, r5
 8019b30:	4561      	cmp	r1, ip
 8019b32:	d30a      	bcc.n	8019b4a <__exponent+0x66>
 8019b34:	f10d 0209 	add.w	r2, sp, #9
 8019b38:	eba2 020e 	sub.w	r2, r2, lr
 8019b3c:	4565      	cmp	r5, ip
 8019b3e:	bf88      	it	hi
 8019b40:	2200      	movhi	r2, #0
 8019b42:	4413      	add	r3, r2
 8019b44:	1a18      	subs	r0, r3, r0
 8019b46:	b003      	add	sp, #12
 8019b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019b52:	e7ed      	b.n	8019b30 <__exponent+0x4c>
 8019b54:	2330      	movs	r3, #48	; 0x30
 8019b56:	3130      	adds	r1, #48	; 0x30
 8019b58:	7083      	strb	r3, [r0, #2]
 8019b5a:	1d03      	adds	r3, r0, #4
 8019b5c:	70c1      	strb	r1, [r0, #3]
 8019b5e:	e7f1      	b.n	8019b44 <__exponent+0x60>

08019b60 <_printf_float>:
 8019b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b64:	ed2d 8b02 	vpush	{d8}
 8019b68:	b08d      	sub	sp, #52	; 0x34
 8019b6a:	460c      	mov	r4, r1
 8019b6c:	4616      	mov	r6, r2
 8019b6e:	461f      	mov	r7, r3
 8019b70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019b74:	4605      	mov	r5, r0
 8019b76:	f002 fe9d 	bl	801c8b4 <_localeconv_r>
 8019b7a:	f8d0 a000 	ldr.w	sl, [r0]
 8019b7e:	4650      	mov	r0, sl
 8019b80:	f7e6 fb7a 	bl	8000278 <strlen>
 8019b84:	2300      	movs	r3, #0
 8019b86:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019b8a:	ee08 0a10 	vmov	s16, r0
 8019b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8019b90:	6823      	ldr	r3, [r4, #0]
 8019b92:	9305      	str	r3, [sp, #20]
 8019b94:	f8d8 3000 	ldr.w	r3, [r8]
 8019b98:	3307      	adds	r3, #7
 8019b9a:	f023 0307 	bic.w	r3, r3, #7
 8019b9e:	f103 0208 	add.w	r2, r3, #8
 8019ba2:	f8c8 2000 	str.w	r2, [r8]
 8019ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019baa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019bae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8019bb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019bba:	f8cd 8018 	str.w	r8, [sp, #24]
 8019bbe:	9307      	str	r3, [sp, #28]
 8019bc0:	4b9e      	ldr	r3, [pc, #632]	; (8019e3c <_printf_float+0x2dc>)
 8019bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019bc6:	f7e6 ffb5 	bl	8000b34 <__aeabi_dcmpun>
 8019bca:	bb88      	cbnz	r0, 8019c30 <_printf_float+0xd0>
 8019bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8019bd0:	4b9a      	ldr	r3, [pc, #616]	; (8019e3c <_printf_float+0x2dc>)
 8019bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019bd6:	f7e6 ff8f 	bl	8000af8 <__aeabi_dcmple>
 8019bda:	bb48      	cbnz	r0, 8019c30 <_printf_float+0xd0>
 8019bdc:	2200      	movs	r2, #0
 8019bde:	2300      	movs	r3, #0
 8019be0:	4640      	mov	r0, r8
 8019be2:	4649      	mov	r1, r9
 8019be4:	f7e6 ff7e 	bl	8000ae4 <__aeabi_dcmplt>
 8019be8:	b110      	cbz	r0, 8019bf0 <_printf_float+0x90>
 8019bea:	232d      	movs	r3, #45	; 0x2d
 8019bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019bf0:	4b93      	ldr	r3, [pc, #588]	; (8019e40 <_printf_float+0x2e0>)
 8019bf2:	4894      	ldr	r0, [pc, #592]	; (8019e44 <_printf_float+0x2e4>)
 8019bf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019bf8:	bf94      	ite	ls
 8019bfa:	4698      	movls	r8, r3
 8019bfc:	4680      	movhi	r8, r0
 8019bfe:	2303      	movs	r3, #3
 8019c00:	f04f 0900 	mov.w	r9, #0
 8019c04:	6123      	str	r3, [r4, #16]
 8019c06:	9b05      	ldr	r3, [sp, #20]
 8019c08:	f023 0204 	bic.w	r2, r3, #4
 8019c0c:	6022      	str	r2, [r4, #0]
 8019c0e:	4633      	mov	r3, r6
 8019c10:	aa0b      	add	r2, sp, #44	; 0x2c
 8019c12:	4621      	mov	r1, r4
 8019c14:	4628      	mov	r0, r5
 8019c16:	9700      	str	r7, [sp, #0]
 8019c18:	f000 f9d8 	bl	8019fcc <_printf_common>
 8019c1c:	3001      	adds	r0, #1
 8019c1e:	f040 8090 	bne.w	8019d42 <_printf_float+0x1e2>
 8019c22:	f04f 30ff 	mov.w	r0, #4294967295
 8019c26:	b00d      	add	sp, #52	; 0x34
 8019c28:	ecbd 8b02 	vpop	{d8}
 8019c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c30:	4642      	mov	r2, r8
 8019c32:	464b      	mov	r3, r9
 8019c34:	4640      	mov	r0, r8
 8019c36:	4649      	mov	r1, r9
 8019c38:	f7e6 ff7c 	bl	8000b34 <__aeabi_dcmpun>
 8019c3c:	b140      	cbz	r0, 8019c50 <_printf_float+0xf0>
 8019c3e:	464b      	mov	r3, r9
 8019c40:	4881      	ldr	r0, [pc, #516]	; (8019e48 <_printf_float+0x2e8>)
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	bfbc      	itt	lt
 8019c46:	232d      	movlt	r3, #45	; 0x2d
 8019c48:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019c4c:	4b7f      	ldr	r3, [pc, #508]	; (8019e4c <_printf_float+0x2ec>)
 8019c4e:	e7d1      	b.n	8019bf4 <_printf_float+0x94>
 8019c50:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019c54:	6863      	ldr	r3, [r4, #4]
 8019c56:	9206      	str	r2, [sp, #24]
 8019c58:	1c5a      	adds	r2, r3, #1
 8019c5a:	d13f      	bne.n	8019cdc <_printf_float+0x17c>
 8019c5c:	2306      	movs	r3, #6
 8019c5e:	6063      	str	r3, [r4, #4]
 8019c60:	9b05      	ldr	r3, [sp, #20]
 8019c62:	4628      	mov	r0, r5
 8019c64:	6861      	ldr	r1, [r4, #4]
 8019c66:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	9303      	str	r3, [sp, #12]
 8019c6e:	ab0a      	add	r3, sp, #40	; 0x28
 8019c70:	6022      	str	r2, [r4, #0]
 8019c72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019c76:	ab09      	add	r3, sp, #36	; 0x24
 8019c78:	ec49 8b10 	vmov	d0, r8, r9
 8019c7c:	9300      	str	r3, [sp, #0]
 8019c7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019c82:	f7ff fecd 	bl	8019a20 <__cvt>
 8019c86:	9b06      	ldr	r3, [sp, #24]
 8019c88:	4680      	mov	r8, r0
 8019c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c8c:	2b47      	cmp	r3, #71	; 0x47
 8019c8e:	d108      	bne.n	8019ca2 <_printf_float+0x142>
 8019c90:	1cc8      	adds	r0, r1, #3
 8019c92:	db02      	blt.n	8019c9a <_printf_float+0x13a>
 8019c94:	6863      	ldr	r3, [r4, #4]
 8019c96:	4299      	cmp	r1, r3
 8019c98:	dd41      	ble.n	8019d1e <_printf_float+0x1be>
 8019c9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8019c9e:	fa5f fb8b 	uxtb.w	fp, fp
 8019ca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019ca6:	d820      	bhi.n	8019cea <_printf_float+0x18a>
 8019ca8:	3901      	subs	r1, #1
 8019caa:	465a      	mov	r2, fp
 8019cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8019cb2:	f7ff ff17 	bl	8019ae4 <__exponent>
 8019cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cb8:	4681      	mov	r9, r0
 8019cba:	1813      	adds	r3, r2, r0
 8019cbc:	2a01      	cmp	r2, #1
 8019cbe:	6123      	str	r3, [r4, #16]
 8019cc0:	dc02      	bgt.n	8019cc8 <_printf_float+0x168>
 8019cc2:	6822      	ldr	r2, [r4, #0]
 8019cc4:	07d2      	lsls	r2, r2, #31
 8019cc6:	d501      	bpl.n	8019ccc <_printf_float+0x16c>
 8019cc8:	3301      	adds	r3, #1
 8019cca:	6123      	str	r3, [r4, #16]
 8019ccc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d09c      	beq.n	8019c0e <_printf_float+0xae>
 8019cd4:	232d      	movs	r3, #45	; 0x2d
 8019cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019cda:	e798      	b.n	8019c0e <_printf_float+0xae>
 8019cdc:	9a06      	ldr	r2, [sp, #24]
 8019cde:	2a47      	cmp	r2, #71	; 0x47
 8019ce0:	d1be      	bne.n	8019c60 <_printf_float+0x100>
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d1bc      	bne.n	8019c60 <_printf_float+0x100>
 8019ce6:	2301      	movs	r3, #1
 8019ce8:	e7b9      	b.n	8019c5e <_printf_float+0xfe>
 8019cea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019cee:	d118      	bne.n	8019d22 <_printf_float+0x1c2>
 8019cf0:	2900      	cmp	r1, #0
 8019cf2:	6863      	ldr	r3, [r4, #4]
 8019cf4:	dd0b      	ble.n	8019d0e <_printf_float+0x1ae>
 8019cf6:	6121      	str	r1, [r4, #16]
 8019cf8:	b913      	cbnz	r3, 8019d00 <_printf_float+0x1a0>
 8019cfa:	6822      	ldr	r2, [r4, #0]
 8019cfc:	07d0      	lsls	r0, r2, #31
 8019cfe:	d502      	bpl.n	8019d06 <_printf_float+0x1a6>
 8019d00:	3301      	adds	r3, #1
 8019d02:	440b      	add	r3, r1
 8019d04:	6123      	str	r3, [r4, #16]
 8019d06:	f04f 0900 	mov.w	r9, #0
 8019d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8019d0c:	e7de      	b.n	8019ccc <_printf_float+0x16c>
 8019d0e:	b913      	cbnz	r3, 8019d16 <_printf_float+0x1b6>
 8019d10:	6822      	ldr	r2, [r4, #0]
 8019d12:	07d2      	lsls	r2, r2, #31
 8019d14:	d501      	bpl.n	8019d1a <_printf_float+0x1ba>
 8019d16:	3302      	adds	r3, #2
 8019d18:	e7f4      	b.n	8019d04 <_printf_float+0x1a4>
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	e7f2      	b.n	8019d04 <_printf_float+0x1a4>
 8019d1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d24:	4299      	cmp	r1, r3
 8019d26:	db05      	blt.n	8019d34 <_printf_float+0x1d4>
 8019d28:	6823      	ldr	r3, [r4, #0]
 8019d2a:	6121      	str	r1, [r4, #16]
 8019d2c:	07d8      	lsls	r0, r3, #31
 8019d2e:	d5ea      	bpl.n	8019d06 <_printf_float+0x1a6>
 8019d30:	1c4b      	adds	r3, r1, #1
 8019d32:	e7e7      	b.n	8019d04 <_printf_float+0x1a4>
 8019d34:	2900      	cmp	r1, #0
 8019d36:	bfd4      	ite	le
 8019d38:	f1c1 0202 	rsble	r2, r1, #2
 8019d3c:	2201      	movgt	r2, #1
 8019d3e:	4413      	add	r3, r2
 8019d40:	e7e0      	b.n	8019d04 <_printf_float+0x1a4>
 8019d42:	6823      	ldr	r3, [r4, #0]
 8019d44:	055a      	lsls	r2, r3, #21
 8019d46:	d407      	bmi.n	8019d58 <_printf_float+0x1f8>
 8019d48:	6923      	ldr	r3, [r4, #16]
 8019d4a:	4642      	mov	r2, r8
 8019d4c:	4631      	mov	r1, r6
 8019d4e:	4628      	mov	r0, r5
 8019d50:	47b8      	blx	r7
 8019d52:	3001      	adds	r0, #1
 8019d54:	d12c      	bne.n	8019db0 <_printf_float+0x250>
 8019d56:	e764      	b.n	8019c22 <_printf_float+0xc2>
 8019d58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019d5c:	f240 80e0 	bls.w	8019f20 <_printf_float+0x3c0>
 8019d60:	2200      	movs	r2, #0
 8019d62:	2300      	movs	r3, #0
 8019d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019d68:	f7e6 feb2 	bl	8000ad0 <__aeabi_dcmpeq>
 8019d6c:	2800      	cmp	r0, #0
 8019d6e:	d034      	beq.n	8019dda <_printf_float+0x27a>
 8019d70:	2301      	movs	r3, #1
 8019d72:	4a37      	ldr	r2, [pc, #220]	; (8019e50 <_printf_float+0x2f0>)
 8019d74:	4631      	mov	r1, r6
 8019d76:	4628      	mov	r0, r5
 8019d78:	47b8      	blx	r7
 8019d7a:	3001      	adds	r0, #1
 8019d7c:	f43f af51 	beq.w	8019c22 <_printf_float+0xc2>
 8019d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d84:	429a      	cmp	r2, r3
 8019d86:	db02      	blt.n	8019d8e <_printf_float+0x22e>
 8019d88:	6823      	ldr	r3, [r4, #0]
 8019d8a:	07d8      	lsls	r0, r3, #31
 8019d8c:	d510      	bpl.n	8019db0 <_printf_float+0x250>
 8019d8e:	ee18 3a10 	vmov	r3, s16
 8019d92:	4652      	mov	r2, sl
 8019d94:	4631      	mov	r1, r6
 8019d96:	4628      	mov	r0, r5
 8019d98:	47b8      	blx	r7
 8019d9a:	3001      	adds	r0, #1
 8019d9c:	f43f af41 	beq.w	8019c22 <_printf_float+0xc2>
 8019da0:	f04f 0800 	mov.w	r8, #0
 8019da4:	f104 091a 	add.w	r9, r4, #26
 8019da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019daa:	3b01      	subs	r3, #1
 8019dac:	4543      	cmp	r3, r8
 8019dae:	dc09      	bgt.n	8019dc4 <_printf_float+0x264>
 8019db0:	6823      	ldr	r3, [r4, #0]
 8019db2:	079b      	lsls	r3, r3, #30
 8019db4:	f100 8105 	bmi.w	8019fc2 <_printf_float+0x462>
 8019db8:	68e0      	ldr	r0, [r4, #12]
 8019dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019dbc:	4298      	cmp	r0, r3
 8019dbe:	bfb8      	it	lt
 8019dc0:	4618      	movlt	r0, r3
 8019dc2:	e730      	b.n	8019c26 <_printf_float+0xc6>
 8019dc4:	2301      	movs	r3, #1
 8019dc6:	464a      	mov	r2, r9
 8019dc8:	4631      	mov	r1, r6
 8019dca:	4628      	mov	r0, r5
 8019dcc:	47b8      	blx	r7
 8019dce:	3001      	adds	r0, #1
 8019dd0:	f43f af27 	beq.w	8019c22 <_printf_float+0xc2>
 8019dd4:	f108 0801 	add.w	r8, r8, #1
 8019dd8:	e7e6      	b.n	8019da8 <_printf_float+0x248>
 8019dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	dc39      	bgt.n	8019e54 <_printf_float+0x2f4>
 8019de0:	2301      	movs	r3, #1
 8019de2:	4a1b      	ldr	r2, [pc, #108]	; (8019e50 <_printf_float+0x2f0>)
 8019de4:	4631      	mov	r1, r6
 8019de6:	4628      	mov	r0, r5
 8019de8:	47b8      	blx	r7
 8019dea:	3001      	adds	r0, #1
 8019dec:	f43f af19 	beq.w	8019c22 <_printf_float+0xc2>
 8019df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019df4:	4313      	orrs	r3, r2
 8019df6:	d102      	bne.n	8019dfe <_printf_float+0x29e>
 8019df8:	6823      	ldr	r3, [r4, #0]
 8019dfa:	07d9      	lsls	r1, r3, #31
 8019dfc:	d5d8      	bpl.n	8019db0 <_printf_float+0x250>
 8019dfe:	ee18 3a10 	vmov	r3, s16
 8019e02:	4652      	mov	r2, sl
 8019e04:	4631      	mov	r1, r6
 8019e06:	4628      	mov	r0, r5
 8019e08:	47b8      	blx	r7
 8019e0a:	3001      	adds	r0, #1
 8019e0c:	f43f af09 	beq.w	8019c22 <_printf_float+0xc2>
 8019e10:	f04f 0900 	mov.w	r9, #0
 8019e14:	f104 0a1a 	add.w	sl, r4, #26
 8019e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e1a:	425b      	negs	r3, r3
 8019e1c:	454b      	cmp	r3, r9
 8019e1e:	dc01      	bgt.n	8019e24 <_printf_float+0x2c4>
 8019e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e22:	e792      	b.n	8019d4a <_printf_float+0x1ea>
 8019e24:	2301      	movs	r3, #1
 8019e26:	4652      	mov	r2, sl
 8019e28:	4631      	mov	r1, r6
 8019e2a:	4628      	mov	r0, r5
 8019e2c:	47b8      	blx	r7
 8019e2e:	3001      	adds	r0, #1
 8019e30:	f43f aef7 	beq.w	8019c22 <_printf_float+0xc2>
 8019e34:	f109 0901 	add.w	r9, r9, #1
 8019e38:	e7ee      	b.n	8019e18 <_printf_float+0x2b8>
 8019e3a:	bf00      	nop
 8019e3c:	7fefffff 	.word	0x7fefffff
 8019e40:	08073838 	.word	0x08073838
 8019e44:	0807383c 	.word	0x0807383c
 8019e48:	08073844 	.word	0x08073844
 8019e4c:	08073840 	.word	0x08073840
 8019e50:	08073848 	.word	0x08073848
 8019e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	bfa8      	it	ge
 8019e5c:	461a      	movge	r2, r3
 8019e5e:	2a00      	cmp	r2, #0
 8019e60:	4691      	mov	r9, r2
 8019e62:	dc37      	bgt.n	8019ed4 <_printf_float+0x374>
 8019e64:	f04f 0b00 	mov.w	fp, #0
 8019e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019e6c:	f104 021a 	add.w	r2, r4, #26
 8019e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019e72:	9305      	str	r3, [sp, #20]
 8019e74:	eba3 0309 	sub.w	r3, r3, r9
 8019e78:	455b      	cmp	r3, fp
 8019e7a:	dc33      	bgt.n	8019ee4 <_printf_float+0x384>
 8019e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019e80:	429a      	cmp	r2, r3
 8019e82:	db3b      	blt.n	8019efc <_printf_float+0x39c>
 8019e84:	6823      	ldr	r3, [r4, #0]
 8019e86:	07da      	lsls	r2, r3, #31
 8019e88:	d438      	bmi.n	8019efc <_printf_float+0x39c>
 8019e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e8c:	9a05      	ldr	r2, [sp, #20]
 8019e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e90:	1a9a      	subs	r2, r3, r2
 8019e92:	eba3 0901 	sub.w	r9, r3, r1
 8019e96:	4591      	cmp	r9, r2
 8019e98:	bfa8      	it	ge
 8019e9a:	4691      	movge	r9, r2
 8019e9c:	f1b9 0f00 	cmp.w	r9, #0
 8019ea0:	dc35      	bgt.n	8019f0e <_printf_float+0x3ae>
 8019ea2:	f04f 0800 	mov.w	r8, #0
 8019ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019eaa:	f104 0a1a 	add.w	sl, r4, #26
 8019eae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019eb2:	1a9b      	subs	r3, r3, r2
 8019eb4:	eba3 0309 	sub.w	r3, r3, r9
 8019eb8:	4543      	cmp	r3, r8
 8019eba:	f77f af79 	ble.w	8019db0 <_printf_float+0x250>
 8019ebe:	2301      	movs	r3, #1
 8019ec0:	4652      	mov	r2, sl
 8019ec2:	4631      	mov	r1, r6
 8019ec4:	4628      	mov	r0, r5
 8019ec6:	47b8      	blx	r7
 8019ec8:	3001      	adds	r0, #1
 8019eca:	f43f aeaa 	beq.w	8019c22 <_printf_float+0xc2>
 8019ece:	f108 0801 	add.w	r8, r8, #1
 8019ed2:	e7ec      	b.n	8019eae <_printf_float+0x34e>
 8019ed4:	4613      	mov	r3, r2
 8019ed6:	4631      	mov	r1, r6
 8019ed8:	4642      	mov	r2, r8
 8019eda:	4628      	mov	r0, r5
 8019edc:	47b8      	blx	r7
 8019ede:	3001      	adds	r0, #1
 8019ee0:	d1c0      	bne.n	8019e64 <_printf_float+0x304>
 8019ee2:	e69e      	b.n	8019c22 <_printf_float+0xc2>
 8019ee4:	2301      	movs	r3, #1
 8019ee6:	4631      	mov	r1, r6
 8019ee8:	4628      	mov	r0, r5
 8019eea:	9205      	str	r2, [sp, #20]
 8019eec:	47b8      	blx	r7
 8019eee:	3001      	adds	r0, #1
 8019ef0:	f43f ae97 	beq.w	8019c22 <_printf_float+0xc2>
 8019ef4:	f10b 0b01 	add.w	fp, fp, #1
 8019ef8:	9a05      	ldr	r2, [sp, #20]
 8019efa:	e7b9      	b.n	8019e70 <_printf_float+0x310>
 8019efc:	ee18 3a10 	vmov	r3, s16
 8019f00:	4652      	mov	r2, sl
 8019f02:	4631      	mov	r1, r6
 8019f04:	4628      	mov	r0, r5
 8019f06:	47b8      	blx	r7
 8019f08:	3001      	adds	r0, #1
 8019f0a:	d1be      	bne.n	8019e8a <_printf_float+0x32a>
 8019f0c:	e689      	b.n	8019c22 <_printf_float+0xc2>
 8019f0e:	9a05      	ldr	r2, [sp, #20]
 8019f10:	464b      	mov	r3, r9
 8019f12:	4631      	mov	r1, r6
 8019f14:	4628      	mov	r0, r5
 8019f16:	4442      	add	r2, r8
 8019f18:	47b8      	blx	r7
 8019f1a:	3001      	adds	r0, #1
 8019f1c:	d1c1      	bne.n	8019ea2 <_printf_float+0x342>
 8019f1e:	e680      	b.n	8019c22 <_printf_float+0xc2>
 8019f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019f22:	2a01      	cmp	r2, #1
 8019f24:	dc01      	bgt.n	8019f2a <_printf_float+0x3ca>
 8019f26:	07db      	lsls	r3, r3, #31
 8019f28:	d538      	bpl.n	8019f9c <_printf_float+0x43c>
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	4642      	mov	r2, r8
 8019f2e:	4631      	mov	r1, r6
 8019f30:	4628      	mov	r0, r5
 8019f32:	47b8      	blx	r7
 8019f34:	3001      	adds	r0, #1
 8019f36:	f43f ae74 	beq.w	8019c22 <_printf_float+0xc2>
 8019f3a:	ee18 3a10 	vmov	r3, s16
 8019f3e:	4652      	mov	r2, sl
 8019f40:	4631      	mov	r1, r6
 8019f42:	4628      	mov	r0, r5
 8019f44:	47b8      	blx	r7
 8019f46:	3001      	adds	r0, #1
 8019f48:	f43f ae6b 	beq.w	8019c22 <_printf_float+0xc2>
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	2300      	movs	r3, #0
 8019f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019f54:	f7e6 fdbc 	bl	8000ad0 <__aeabi_dcmpeq>
 8019f58:	b9d8      	cbnz	r0, 8019f92 <_printf_float+0x432>
 8019f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f5c:	f108 0201 	add.w	r2, r8, #1
 8019f60:	3b01      	subs	r3, #1
 8019f62:	4631      	mov	r1, r6
 8019f64:	4628      	mov	r0, r5
 8019f66:	47b8      	blx	r7
 8019f68:	3001      	adds	r0, #1
 8019f6a:	d10e      	bne.n	8019f8a <_printf_float+0x42a>
 8019f6c:	e659      	b.n	8019c22 <_printf_float+0xc2>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	4652      	mov	r2, sl
 8019f72:	4631      	mov	r1, r6
 8019f74:	4628      	mov	r0, r5
 8019f76:	47b8      	blx	r7
 8019f78:	3001      	adds	r0, #1
 8019f7a:	f43f ae52 	beq.w	8019c22 <_printf_float+0xc2>
 8019f7e:	f108 0801 	add.w	r8, r8, #1
 8019f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f84:	3b01      	subs	r3, #1
 8019f86:	4543      	cmp	r3, r8
 8019f88:	dcf1      	bgt.n	8019f6e <_printf_float+0x40e>
 8019f8a:	464b      	mov	r3, r9
 8019f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019f90:	e6dc      	b.n	8019d4c <_printf_float+0x1ec>
 8019f92:	f04f 0800 	mov.w	r8, #0
 8019f96:	f104 0a1a 	add.w	sl, r4, #26
 8019f9a:	e7f2      	b.n	8019f82 <_printf_float+0x422>
 8019f9c:	2301      	movs	r3, #1
 8019f9e:	4642      	mov	r2, r8
 8019fa0:	e7df      	b.n	8019f62 <_printf_float+0x402>
 8019fa2:	2301      	movs	r3, #1
 8019fa4:	464a      	mov	r2, r9
 8019fa6:	4631      	mov	r1, r6
 8019fa8:	4628      	mov	r0, r5
 8019faa:	47b8      	blx	r7
 8019fac:	3001      	adds	r0, #1
 8019fae:	f43f ae38 	beq.w	8019c22 <_printf_float+0xc2>
 8019fb2:	f108 0801 	add.w	r8, r8, #1
 8019fb6:	68e3      	ldr	r3, [r4, #12]
 8019fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019fba:	1a5b      	subs	r3, r3, r1
 8019fbc:	4543      	cmp	r3, r8
 8019fbe:	dcf0      	bgt.n	8019fa2 <_printf_float+0x442>
 8019fc0:	e6fa      	b.n	8019db8 <_printf_float+0x258>
 8019fc2:	f04f 0800 	mov.w	r8, #0
 8019fc6:	f104 0919 	add.w	r9, r4, #25
 8019fca:	e7f4      	b.n	8019fb6 <_printf_float+0x456>

08019fcc <_printf_common>:
 8019fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fd0:	4616      	mov	r6, r2
 8019fd2:	4699      	mov	r9, r3
 8019fd4:	688a      	ldr	r2, [r1, #8]
 8019fd6:	4607      	mov	r7, r0
 8019fd8:	690b      	ldr	r3, [r1, #16]
 8019fda:	460c      	mov	r4, r1
 8019fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019fe0:	4293      	cmp	r3, r2
 8019fe2:	bfb8      	it	lt
 8019fe4:	4613      	movlt	r3, r2
 8019fe6:	6033      	str	r3, [r6, #0]
 8019fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019fec:	b10a      	cbz	r2, 8019ff2 <_printf_common+0x26>
 8019fee:	3301      	adds	r3, #1
 8019ff0:	6033      	str	r3, [r6, #0]
 8019ff2:	6823      	ldr	r3, [r4, #0]
 8019ff4:	0699      	lsls	r1, r3, #26
 8019ff6:	bf42      	ittt	mi
 8019ff8:	6833      	ldrmi	r3, [r6, #0]
 8019ffa:	3302      	addmi	r3, #2
 8019ffc:	6033      	strmi	r3, [r6, #0]
 8019ffe:	6825      	ldr	r5, [r4, #0]
 801a000:	f015 0506 	ands.w	r5, r5, #6
 801a004:	d106      	bne.n	801a014 <_printf_common+0x48>
 801a006:	f104 0a19 	add.w	sl, r4, #25
 801a00a:	68e3      	ldr	r3, [r4, #12]
 801a00c:	6832      	ldr	r2, [r6, #0]
 801a00e:	1a9b      	subs	r3, r3, r2
 801a010:	42ab      	cmp	r3, r5
 801a012:	dc29      	bgt.n	801a068 <_printf_common+0x9c>
 801a014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a018:	1e13      	subs	r3, r2, #0
 801a01a:	6822      	ldr	r2, [r4, #0]
 801a01c:	bf18      	it	ne
 801a01e:	2301      	movne	r3, #1
 801a020:	0692      	lsls	r2, r2, #26
 801a022:	d42e      	bmi.n	801a082 <_printf_common+0xb6>
 801a024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a028:	4649      	mov	r1, r9
 801a02a:	4638      	mov	r0, r7
 801a02c:	47c0      	blx	r8
 801a02e:	3001      	adds	r0, #1
 801a030:	d021      	beq.n	801a076 <_printf_common+0xaa>
 801a032:	6823      	ldr	r3, [r4, #0]
 801a034:	341a      	adds	r4, #26
 801a036:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801a03a:	f003 0306 	and.w	r3, r3, #6
 801a03e:	6832      	ldr	r2, [r6, #0]
 801a040:	2600      	movs	r6, #0
 801a042:	2b04      	cmp	r3, #4
 801a044:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801a048:	bf08      	it	eq
 801a04a:	1aad      	subeq	r5, r5, r2
 801a04c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801a050:	bf14      	ite	ne
 801a052:	2500      	movne	r5, #0
 801a054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a058:	4293      	cmp	r3, r2
 801a05a:	bfc4      	itt	gt
 801a05c:	1a9b      	subgt	r3, r3, r2
 801a05e:	18ed      	addgt	r5, r5, r3
 801a060:	42b5      	cmp	r5, r6
 801a062:	d11a      	bne.n	801a09a <_printf_common+0xce>
 801a064:	2000      	movs	r0, #0
 801a066:	e008      	b.n	801a07a <_printf_common+0xae>
 801a068:	2301      	movs	r3, #1
 801a06a:	4652      	mov	r2, sl
 801a06c:	4649      	mov	r1, r9
 801a06e:	4638      	mov	r0, r7
 801a070:	47c0      	blx	r8
 801a072:	3001      	adds	r0, #1
 801a074:	d103      	bne.n	801a07e <_printf_common+0xb2>
 801a076:	f04f 30ff 	mov.w	r0, #4294967295
 801a07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a07e:	3501      	adds	r5, #1
 801a080:	e7c3      	b.n	801a00a <_printf_common+0x3e>
 801a082:	18e1      	adds	r1, r4, r3
 801a084:	1c5a      	adds	r2, r3, #1
 801a086:	2030      	movs	r0, #48	; 0x30
 801a088:	3302      	adds	r3, #2
 801a08a:	4422      	add	r2, r4
 801a08c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a098:	e7c4      	b.n	801a024 <_printf_common+0x58>
 801a09a:	2301      	movs	r3, #1
 801a09c:	4622      	mov	r2, r4
 801a09e:	4649      	mov	r1, r9
 801a0a0:	4638      	mov	r0, r7
 801a0a2:	47c0      	blx	r8
 801a0a4:	3001      	adds	r0, #1
 801a0a6:	d0e6      	beq.n	801a076 <_printf_common+0xaa>
 801a0a8:	3601      	adds	r6, #1
 801a0aa:	e7d9      	b.n	801a060 <_printf_common+0x94>

0801a0ac <_printf_i>:
 801a0ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a0b0:	7e0f      	ldrb	r7, [r1, #24]
 801a0b2:	4691      	mov	r9, r2
 801a0b4:	4680      	mov	r8, r0
 801a0b6:	460c      	mov	r4, r1
 801a0b8:	2f78      	cmp	r7, #120	; 0x78
 801a0ba:	469a      	mov	sl, r3
 801a0bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a0be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a0c2:	d807      	bhi.n	801a0d4 <_printf_i+0x28>
 801a0c4:	2f62      	cmp	r7, #98	; 0x62
 801a0c6:	d80a      	bhi.n	801a0de <_printf_i+0x32>
 801a0c8:	2f00      	cmp	r7, #0
 801a0ca:	f000 80d8 	beq.w	801a27e <_printf_i+0x1d2>
 801a0ce:	2f58      	cmp	r7, #88	; 0x58
 801a0d0:	f000 80a3 	beq.w	801a21a <_printf_i+0x16e>
 801a0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a0d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a0dc:	e03a      	b.n	801a154 <_printf_i+0xa8>
 801a0de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a0e2:	2b15      	cmp	r3, #21
 801a0e4:	d8f6      	bhi.n	801a0d4 <_printf_i+0x28>
 801a0e6:	a101      	add	r1, pc, #4	; (adr r1, 801a0ec <_printf_i+0x40>)
 801a0e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a0ec:	0801a145 	.word	0x0801a145
 801a0f0:	0801a159 	.word	0x0801a159
 801a0f4:	0801a0d5 	.word	0x0801a0d5
 801a0f8:	0801a0d5 	.word	0x0801a0d5
 801a0fc:	0801a0d5 	.word	0x0801a0d5
 801a100:	0801a0d5 	.word	0x0801a0d5
 801a104:	0801a159 	.word	0x0801a159
 801a108:	0801a0d5 	.word	0x0801a0d5
 801a10c:	0801a0d5 	.word	0x0801a0d5
 801a110:	0801a0d5 	.word	0x0801a0d5
 801a114:	0801a0d5 	.word	0x0801a0d5
 801a118:	0801a265 	.word	0x0801a265
 801a11c:	0801a189 	.word	0x0801a189
 801a120:	0801a247 	.word	0x0801a247
 801a124:	0801a0d5 	.word	0x0801a0d5
 801a128:	0801a0d5 	.word	0x0801a0d5
 801a12c:	0801a287 	.word	0x0801a287
 801a130:	0801a0d5 	.word	0x0801a0d5
 801a134:	0801a189 	.word	0x0801a189
 801a138:	0801a0d5 	.word	0x0801a0d5
 801a13c:	0801a0d5 	.word	0x0801a0d5
 801a140:	0801a24f 	.word	0x0801a24f
 801a144:	682b      	ldr	r3, [r5, #0]
 801a146:	1d1a      	adds	r2, r3, #4
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	602a      	str	r2, [r5, #0]
 801a14c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a154:	2301      	movs	r3, #1
 801a156:	e0a3      	b.n	801a2a0 <_printf_i+0x1f4>
 801a158:	6820      	ldr	r0, [r4, #0]
 801a15a:	6829      	ldr	r1, [r5, #0]
 801a15c:	0606      	lsls	r6, r0, #24
 801a15e:	f101 0304 	add.w	r3, r1, #4
 801a162:	d50a      	bpl.n	801a17a <_printf_i+0xce>
 801a164:	680e      	ldr	r6, [r1, #0]
 801a166:	602b      	str	r3, [r5, #0]
 801a168:	2e00      	cmp	r6, #0
 801a16a:	da03      	bge.n	801a174 <_printf_i+0xc8>
 801a16c:	232d      	movs	r3, #45	; 0x2d
 801a16e:	4276      	negs	r6, r6
 801a170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a174:	485e      	ldr	r0, [pc, #376]	; (801a2f0 <_printf_i+0x244>)
 801a176:	230a      	movs	r3, #10
 801a178:	e019      	b.n	801a1ae <_printf_i+0x102>
 801a17a:	680e      	ldr	r6, [r1, #0]
 801a17c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a180:	602b      	str	r3, [r5, #0]
 801a182:	bf18      	it	ne
 801a184:	b236      	sxthne	r6, r6
 801a186:	e7ef      	b.n	801a168 <_printf_i+0xbc>
 801a188:	682b      	ldr	r3, [r5, #0]
 801a18a:	6820      	ldr	r0, [r4, #0]
 801a18c:	1d19      	adds	r1, r3, #4
 801a18e:	6029      	str	r1, [r5, #0]
 801a190:	0601      	lsls	r1, r0, #24
 801a192:	d501      	bpl.n	801a198 <_printf_i+0xec>
 801a194:	681e      	ldr	r6, [r3, #0]
 801a196:	e002      	b.n	801a19e <_printf_i+0xf2>
 801a198:	0646      	lsls	r6, r0, #25
 801a19a:	d5fb      	bpl.n	801a194 <_printf_i+0xe8>
 801a19c:	881e      	ldrh	r6, [r3, #0]
 801a19e:	2f6f      	cmp	r7, #111	; 0x6f
 801a1a0:	4853      	ldr	r0, [pc, #332]	; (801a2f0 <_printf_i+0x244>)
 801a1a2:	bf0c      	ite	eq
 801a1a4:	2308      	moveq	r3, #8
 801a1a6:	230a      	movne	r3, #10
 801a1a8:	2100      	movs	r1, #0
 801a1aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a1ae:	6865      	ldr	r5, [r4, #4]
 801a1b0:	2d00      	cmp	r5, #0
 801a1b2:	60a5      	str	r5, [r4, #8]
 801a1b4:	bfa2      	ittt	ge
 801a1b6:	6821      	ldrge	r1, [r4, #0]
 801a1b8:	f021 0104 	bicge.w	r1, r1, #4
 801a1bc:	6021      	strge	r1, [r4, #0]
 801a1be:	b90e      	cbnz	r6, 801a1c4 <_printf_i+0x118>
 801a1c0:	2d00      	cmp	r5, #0
 801a1c2:	d04d      	beq.n	801a260 <_printf_i+0x1b4>
 801a1c4:	4615      	mov	r5, r2
 801a1c6:	fbb6 f1f3 	udiv	r1, r6, r3
 801a1ca:	fb03 6711 	mls	r7, r3, r1, r6
 801a1ce:	5dc7      	ldrb	r7, [r0, r7]
 801a1d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a1d4:	4637      	mov	r7, r6
 801a1d6:	460e      	mov	r6, r1
 801a1d8:	42bb      	cmp	r3, r7
 801a1da:	d9f4      	bls.n	801a1c6 <_printf_i+0x11a>
 801a1dc:	2b08      	cmp	r3, #8
 801a1de:	d10b      	bne.n	801a1f8 <_printf_i+0x14c>
 801a1e0:	6823      	ldr	r3, [r4, #0]
 801a1e2:	07de      	lsls	r6, r3, #31
 801a1e4:	d508      	bpl.n	801a1f8 <_printf_i+0x14c>
 801a1e6:	6923      	ldr	r3, [r4, #16]
 801a1e8:	6861      	ldr	r1, [r4, #4]
 801a1ea:	4299      	cmp	r1, r3
 801a1ec:	bfde      	ittt	le
 801a1ee:	2330      	movle	r3, #48	; 0x30
 801a1f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a1f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a1f8:	1b52      	subs	r2, r2, r5
 801a1fa:	6122      	str	r2, [r4, #16]
 801a1fc:	464b      	mov	r3, r9
 801a1fe:	aa03      	add	r2, sp, #12
 801a200:	4621      	mov	r1, r4
 801a202:	4640      	mov	r0, r8
 801a204:	f8cd a000 	str.w	sl, [sp]
 801a208:	f7ff fee0 	bl	8019fcc <_printf_common>
 801a20c:	3001      	adds	r0, #1
 801a20e:	d14c      	bne.n	801a2aa <_printf_i+0x1fe>
 801a210:	f04f 30ff 	mov.w	r0, #4294967295
 801a214:	b004      	add	sp, #16
 801a216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a21a:	4835      	ldr	r0, [pc, #212]	; (801a2f0 <_printf_i+0x244>)
 801a21c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a220:	6829      	ldr	r1, [r5, #0]
 801a222:	6823      	ldr	r3, [r4, #0]
 801a224:	f851 6b04 	ldr.w	r6, [r1], #4
 801a228:	6029      	str	r1, [r5, #0]
 801a22a:	061d      	lsls	r5, r3, #24
 801a22c:	d514      	bpl.n	801a258 <_printf_i+0x1ac>
 801a22e:	07df      	lsls	r7, r3, #31
 801a230:	bf44      	itt	mi
 801a232:	f043 0320 	orrmi.w	r3, r3, #32
 801a236:	6023      	strmi	r3, [r4, #0]
 801a238:	b91e      	cbnz	r6, 801a242 <_printf_i+0x196>
 801a23a:	6823      	ldr	r3, [r4, #0]
 801a23c:	f023 0320 	bic.w	r3, r3, #32
 801a240:	6023      	str	r3, [r4, #0]
 801a242:	2310      	movs	r3, #16
 801a244:	e7b0      	b.n	801a1a8 <_printf_i+0xfc>
 801a246:	6823      	ldr	r3, [r4, #0]
 801a248:	f043 0320 	orr.w	r3, r3, #32
 801a24c:	6023      	str	r3, [r4, #0]
 801a24e:	2378      	movs	r3, #120	; 0x78
 801a250:	4828      	ldr	r0, [pc, #160]	; (801a2f4 <_printf_i+0x248>)
 801a252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a256:	e7e3      	b.n	801a220 <_printf_i+0x174>
 801a258:	0659      	lsls	r1, r3, #25
 801a25a:	bf48      	it	mi
 801a25c:	b2b6      	uxthmi	r6, r6
 801a25e:	e7e6      	b.n	801a22e <_printf_i+0x182>
 801a260:	4615      	mov	r5, r2
 801a262:	e7bb      	b.n	801a1dc <_printf_i+0x130>
 801a264:	682b      	ldr	r3, [r5, #0]
 801a266:	6826      	ldr	r6, [r4, #0]
 801a268:	1d18      	adds	r0, r3, #4
 801a26a:	6961      	ldr	r1, [r4, #20]
 801a26c:	6028      	str	r0, [r5, #0]
 801a26e:	0635      	lsls	r5, r6, #24
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	d501      	bpl.n	801a278 <_printf_i+0x1cc>
 801a274:	6019      	str	r1, [r3, #0]
 801a276:	e002      	b.n	801a27e <_printf_i+0x1d2>
 801a278:	0670      	lsls	r0, r6, #25
 801a27a:	d5fb      	bpl.n	801a274 <_printf_i+0x1c8>
 801a27c:	8019      	strh	r1, [r3, #0]
 801a27e:	2300      	movs	r3, #0
 801a280:	4615      	mov	r5, r2
 801a282:	6123      	str	r3, [r4, #16]
 801a284:	e7ba      	b.n	801a1fc <_printf_i+0x150>
 801a286:	682b      	ldr	r3, [r5, #0]
 801a288:	2100      	movs	r1, #0
 801a28a:	1d1a      	adds	r2, r3, #4
 801a28c:	602a      	str	r2, [r5, #0]
 801a28e:	681d      	ldr	r5, [r3, #0]
 801a290:	6862      	ldr	r2, [r4, #4]
 801a292:	4628      	mov	r0, r5
 801a294:	f002 fb24 	bl	801c8e0 <memchr>
 801a298:	b108      	cbz	r0, 801a29e <_printf_i+0x1f2>
 801a29a:	1b40      	subs	r0, r0, r5
 801a29c:	6060      	str	r0, [r4, #4]
 801a29e:	6863      	ldr	r3, [r4, #4]
 801a2a0:	6123      	str	r3, [r4, #16]
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a2a8:	e7a8      	b.n	801a1fc <_printf_i+0x150>
 801a2aa:	6923      	ldr	r3, [r4, #16]
 801a2ac:	462a      	mov	r2, r5
 801a2ae:	4649      	mov	r1, r9
 801a2b0:	4640      	mov	r0, r8
 801a2b2:	47d0      	blx	sl
 801a2b4:	3001      	adds	r0, #1
 801a2b6:	d0ab      	beq.n	801a210 <_printf_i+0x164>
 801a2b8:	6823      	ldr	r3, [r4, #0]
 801a2ba:	079b      	lsls	r3, r3, #30
 801a2bc:	d413      	bmi.n	801a2e6 <_printf_i+0x23a>
 801a2be:	68e0      	ldr	r0, [r4, #12]
 801a2c0:	9b03      	ldr	r3, [sp, #12]
 801a2c2:	4298      	cmp	r0, r3
 801a2c4:	bfb8      	it	lt
 801a2c6:	4618      	movlt	r0, r3
 801a2c8:	e7a4      	b.n	801a214 <_printf_i+0x168>
 801a2ca:	2301      	movs	r3, #1
 801a2cc:	4632      	mov	r2, r6
 801a2ce:	4649      	mov	r1, r9
 801a2d0:	4640      	mov	r0, r8
 801a2d2:	47d0      	blx	sl
 801a2d4:	3001      	adds	r0, #1
 801a2d6:	d09b      	beq.n	801a210 <_printf_i+0x164>
 801a2d8:	3501      	adds	r5, #1
 801a2da:	68e3      	ldr	r3, [r4, #12]
 801a2dc:	9903      	ldr	r1, [sp, #12]
 801a2de:	1a5b      	subs	r3, r3, r1
 801a2e0:	42ab      	cmp	r3, r5
 801a2e2:	dcf2      	bgt.n	801a2ca <_printf_i+0x21e>
 801a2e4:	e7eb      	b.n	801a2be <_printf_i+0x212>
 801a2e6:	2500      	movs	r5, #0
 801a2e8:	f104 0619 	add.w	r6, r4, #25
 801a2ec:	e7f5      	b.n	801a2da <_printf_i+0x22e>
 801a2ee:	bf00      	nop
 801a2f0:	0807384a 	.word	0x0807384a
 801a2f4:	0807385b 	.word	0x0807385b

0801a2f8 <_scanf_float>:
 801a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2fc:	b087      	sub	sp, #28
 801a2fe:	4617      	mov	r7, r2
 801a300:	468b      	mov	fp, r1
 801a302:	4680      	mov	r8, r0
 801a304:	9303      	str	r3, [sp, #12]
 801a306:	460c      	mov	r4, r1
 801a308:	688b      	ldr	r3, [r1, #8]
 801a30a:	1e5a      	subs	r2, r3, #1
 801a30c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a310:	bf8b      	itete	hi
 801a312:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a316:	2300      	movls	r3, #0
 801a318:	195b      	addhi	r3, r3, r5
 801a31a:	9302      	strls	r3, [sp, #8]
 801a31c:	f04f 0500 	mov.w	r5, #0
 801a320:	bf84      	itt	hi
 801a322:	9302      	strhi	r3, [sp, #8]
 801a324:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a328:	46aa      	mov	sl, r5
 801a32a:	46a9      	mov	r9, r5
 801a32c:	bf88      	it	hi
 801a32e:	608b      	strhi	r3, [r1, #8]
 801a330:	680b      	ldr	r3, [r1, #0]
 801a332:	9501      	str	r5, [sp, #4]
 801a334:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a338:	f84b 3b1c 	str.w	r3, [fp], #28
 801a33c:	465e      	mov	r6, fp
 801a33e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a342:	68a2      	ldr	r2, [r4, #8]
 801a344:	b152      	cbz	r2, 801a35c <_scanf_float+0x64>
 801a346:	683b      	ldr	r3, [r7, #0]
 801a348:	781b      	ldrb	r3, [r3, #0]
 801a34a:	2b4e      	cmp	r3, #78	; 0x4e
 801a34c:	d864      	bhi.n	801a418 <_scanf_float+0x120>
 801a34e:	2b40      	cmp	r3, #64	; 0x40
 801a350:	d83c      	bhi.n	801a3cc <_scanf_float+0xd4>
 801a352:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a356:	b2c8      	uxtb	r0, r1
 801a358:	280e      	cmp	r0, #14
 801a35a:	d93a      	bls.n	801a3d2 <_scanf_float+0xda>
 801a35c:	f1b9 0f00 	cmp.w	r9, #0
 801a360:	d003      	beq.n	801a36a <_scanf_float+0x72>
 801a362:	6823      	ldr	r3, [r4, #0]
 801a364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a368:	6023      	str	r3, [r4, #0]
 801a36a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a36e:	f1ba 0f01 	cmp.w	sl, #1
 801a372:	f200 8113 	bhi.w	801a59c <_scanf_float+0x2a4>
 801a376:	455e      	cmp	r6, fp
 801a378:	f200 8105 	bhi.w	801a586 <_scanf_float+0x28e>
 801a37c:	2501      	movs	r5, #1
 801a37e:	4628      	mov	r0, r5
 801a380:	b007      	add	sp, #28
 801a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a386:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a38a:	2a0d      	cmp	r2, #13
 801a38c:	d8e6      	bhi.n	801a35c <_scanf_float+0x64>
 801a38e:	a101      	add	r1, pc, #4	; (adr r1, 801a394 <_scanf_float+0x9c>)
 801a390:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a394:	0801a4d3 	.word	0x0801a4d3
 801a398:	0801a35d 	.word	0x0801a35d
 801a39c:	0801a35d 	.word	0x0801a35d
 801a3a0:	0801a35d 	.word	0x0801a35d
 801a3a4:	0801a533 	.word	0x0801a533
 801a3a8:	0801a50b 	.word	0x0801a50b
 801a3ac:	0801a35d 	.word	0x0801a35d
 801a3b0:	0801a35d 	.word	0x0801a35d
 801a3b4:	0801a4e1 	.word	0x0801a4e1
 801a3b8:	0801a35d 	.word	0x0801a35d
 801a3bc:	0801a35d 	.word	0x0801a35d
 801a3c0:	0801a35d 	.word	0x0801a35d
 801a3c4:	0801a35d 	.word	0x0801a35d
 801a3c8:	0801a499 	.word	0x0801a499
 801a3cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a3d0:	e7db      	b.n	801a38a <_scanf_float+0x92>
 801a3d2:	290e      	cmp	r1, #14
 801a3d4:	d8c2      	bhi.n	801a35c <_scanf_float+0x64>
 801a3d6:	a001      	add	r0, pc, #4	; (adr r0, 801a3dc <_scanf_float+0xe4>)
 801a3d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a3dc:	0801a48b 	.word	0x0801a48b
 801a3e0:	0801a35d 	.word	0x0801a35d
 801a3e4:	0801a48b 	.word	0x0801a48b
 801a3e8:	0801a51f 	.word	0x0801a51f
 801a3ec:	0801a35d 	.word	0x0801a35d
 801a3f0:	0801a439 	.word	0x0801a439
 801a3f4:	0801a475 	.word	0x0801a475
 801a3f8:	0801a475 	.word	0x0801a475
 801a3fc:	0801a475 	.word	0x0801a475
 801a400:	0801a475 	.word	0x0801a475
 801a404:	0801a475 	.word	0x0801a475
 801a408:	0801a475 	.word	0x0801a475
 801a40c:	0801a475 	.word	0x0801a475
 801a410:	0801a475 	.word	0x0801a475
 801a414:	0801a475 	.word	0x0801a475
 801a418:	2b6e      	cmp	r3, #110	; 0x6e
 801a41a:	d809      	bhi.n	801a430 <_scanf_float+0x138>
 801a41c:	2b60      	cmp	r3, #96	; 0x60
 801a41e:	d8b2      	bhi.n	801a386 <_scanf_float+0x8e>
 801a420:	2b54      	cmp	r3, #84	; 0x54
 801a422:	d077      	beq.n	801a514 <_scanf_float+0x21c>
 801a424:	2b59      	cmp	r3, #89	; 0x59
 801a426:	d199      	bne.n	801a35c <_scanf_float+0x64>
 801a428:	2d07      	cmp	r5, #7
 801a42a:	d197      	bne.n	801a35c <_scanf_float+0x64>
 801a42c:	2508      	movs	r5, #8
 801a42e:	e029      	b.n	801a484 <_scanf_float+0x18c>
 801a430:	2b74      	cmp	r3, #116	; 0x74
 801a432:	d06f      	beq.n	801a514 <_scanf_float+0x21c>
 801a434:	2b79      	cmp	r3, #121	; 0x79
 801a436:	e7f6      	b.n	801a426 <_scanf_float+0x12e>
 801a438:	6821      	ldr	r1, [r4, #0]
 801a43a:	05c8      	lsls	r0, r1, #23
 801a43c:	d51a      	bpl.n	801a474 <_scanf_float+0x17c>
 801a43e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a442:	9b02      	ldr	r3, [sp, #8]
 801a444:	f109 0901 	add.w	r9, r9, #1
 801a448:	6021      	str	r1, [r4, #0]
 801a44a:	b11b      	cbz	r3, 801a454 <_scanf_float+0x15c>
 801a44c:	3b01      	subs	r3, #1
 801a44e:	3201      	adds	r2, #1
 801a450:	9302      	str	r3, [sp, #8]
 801a452:	60a2      	str	r2, [r4, #8]
 801a454:	68a3      	ldr	r3, [r4, #8]
 801a456:	3b01      	subs	r3, #1
 801a458:	60a3      	str	r3, [r4, #8]
 801a45a:	6923      	ldr	r3, [r4, #16]
 801a45c:	3301      	adds	r3, #1
 801a45e:	6123      	str	r3, [r4, #16]
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	3b01      	subs	r3, #1
 801a464:	2b00      	cmp	r3, #0
 801a466:	607b      	str	r3, [r7, #4]
 801a468:	f340 8084 	ble.w	801a574 <_scanf_float+0x27c>
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	3301      	adds	r3, #1
 801a470:	603b      	str	r3, [r7, #0]
 801a472:	e766      	b.n	801a342 <_scanf_float+0x4a>
 801a474:	eb1a 0f05 	cmn.w	sl, r5
 801a478:	f47f af70 	bne.w	801a35c <_scanf_float+0x64>
 801a47c:	6822      	ldr	r2, [r4, #0]
 801a47e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a482:	6022      	str	r2, [r4, #0]
 801a484:	f806 3b01 	strb.w	r3, [r6], #1
 801a488:	e7e4      	b.n	801a454 <_scanf_float+0x15c>
 801a48a:	6822      	ldr	r2, [r4, #0]
 801a48c:	0610      	lsls	r0, r2, #24
 801a48e:	f57f af65 	bpl.w	801a35c <_scanf_float+0x64>
 801a492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a496:	e7f4      	b.n	801a482 <_scanf_float+0x18a>
 801a498:	f1ba 0f00 	cmp.w	sl, #0
 801a49c:	d10e      	bne.n	801a4bc <_scanf_float+0x1c4>
 801a49e:	f1b9 0f00 	cmp.w	r9, #0
 801a4a2:	d10e      	bne.n	801a4c2 <_scanf_float+0x1ca>
 801a4a4:	6822      	ldr	r2, [r4, #0]
 801a4a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a4aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a4ae:	d108      	bne.n	801a4c2 <_scanf_float+0x1ca>
 801a4b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a4b4:	f04f 0a01 	mov.w	sl, #1
 801a4b8:	6022      	str	r2, [r4, #0]
 801a4ba:	e7e3      	b.n	801a484 <_scanf_float+0x18c>
 801a4bc:	f1ba 0f02 	cmp.w	sl, #2
 801a4c0:	d055      	beq.n	801a56e <_scanf_float+0x276>
 801a4c2:	2d01      	cmp	r5, #1
 801a4c4:	d002      	beq.n	801a4cc <_scanf_float+0x1d4>
 801a4c6:	2d04      	cmp	r5, #4
 801a4c8:	f47f af48 	bne.w	801a35c <_scanf_float+0x64>
 801a4cc:	3501      	adds	r5, #1
 801a4ce:	b2ed      	uxtb	r5, r5
 801a4d0:	e7d8      	b.n	801a484 <_scanf_float+0x18c>
 801a4d2:	f1ba 0f01 	cmp.w	sl, #1
 801a4d6:	f47f af41 	bne.w	801a35c <_scanf_float+0x64>
 801a4da:	f04f 0a02 	mov.w	sl, #2
 801a4de:	e7d1      	b.n	801a484 <_scanf_float+0x18c>
 801a4e0:	b97d      	cbnz	r5, 801a502 <_scanf_float+0x20a>
 801a4e2:	f1b9 0f00 	cmp.w	r9, #0
 801a4e6:	f47f af3c 	bne.w	801a362 <_scanf_float+0x6a>
 801a4ea:	6822      	ldr	r2, [r4, #0]
 801a4ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a4f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a4f4:	f47f af39 	bne.w	801a36a <_scanf_float+0x72>
 801a4f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a4fc:	2501      	movs	r5, #1
 801a4fe:	6022      	str	r2, [r4, #0]
 801a500:	e7c0      	b.n	801a484 <_scanf_float+0x18c>
 801a502:	2d03      	cmp	r5, #3
 801a504:	d0e2      	beq.n	801a4cc <_scanf_float+0x1d4>
 801a506:	2d05      	cmp	r5, #5
 801a508:	e7de      	b.n	801a4c8 <_scanf_float+0x1d0>
 801a50a:	2d02      	cmp	r5, #2
 801a50c:	f47f af26 	bne.w	801a35c <_scanf_float+0x64>
 801a510:	2503      	movs	r5, #3
 801a512:	e7b7      	b.n	801a484 <_scanf_float+0x18c>
 801a514:	2d06      	cmp	r5, #6
 801a516:	f47f af21 	bne.w	801a35c <_scanf_float+0x64>
 801a51a:	2507      	movs	r5, #7
 801a51c:	e7b2      	b.n	801a484 <_scanf_float+0x18c>
 801a51e:	6822      	ldr	r2, [r4, #0]
 801a520:	0591      	lsls	r1, r2, #22
 801a522:	f57f af1b 	bpl.w	801a35c <_scanf_float+0x64>
 801a526:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a52a:	f8cd 9004 	str.w	r9, [sp, #4]
 801a52e:	6022      	str	r2, [r4, #0]
 801a530:	e7a8      	b.n	801a484 <_scanf_float+0x18c>
 801a532:	6822      	ldr	r2, [r4, #0]
 801a534:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a538:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a53c:	d006      	beq.n	801a54c <_scanf_float+0x254>
 801a53e:	0550      	lsls	r0, r2, #21
 801a540:	f57f af0c 	bpl.w	801a35c <_scanf_float+0x64>
 801a544:	f1b9 0f00 	cmp.w	r9, #0
 801a548:	f43f af0f 	beq.w	801a36a <_scanf_float+0x72>
 801a54c:	0591      	lsls	r1, r2, #22
 801a54e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a552:	bf58      	it	pl
 801a554:	9901      	ldrpl	r1, [sp, #4]
 801a556:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a55a:	bf58      	it	pl
 801a55c:	eba9 0101 	subpl.w	r1, r9, r1
 801a560:	6022      	str	r2, [r4, #0]
 801a562:	f04f 0900 	mov.w	r9, #0
 801a566:	bf58      	it	pl
 801a568:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a56c:	e78a      	b.n	801a484 <_scanf_float+0x18c>
 801a56e:	f04f 0a03 	mov.w	sl, #3
 801a572:	e787      	b.n	801a484 <_scanf_float+0x18c>
 801a574:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a578:	4639      	mov	r1, r7
 801a57a:	4640      	mov	r0, r8
 801a57c:	4798      	blx	r3
 801a57e:	2800      	cmp	r0, #0
 801a580:	f43f aedf 	beq.w	801a342 <_scanf_float+0x4a>
 801a584:	e6ea      	b.n	801a35c <_scanf_float+0x64>
 801a586:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a58a:	463a      	mov	r2, r7
 801a58c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a590:	4640      	mov	r0, r8
 801a592:	4798      	blx	r3
 801a594:	6923      	ldr	r3, [r4, #16]
 801a596:	3b01      	subs	r3, #1
 801a598:	6123      	str	r3, [r4, #16]
 801a59a:	e6ec      	b.n	801a376 <_scanf_float+0x7e>
 801a59c:	1e6b      	subs	r3, r5, #1
 801a59e:	2b06      	cmp	r3, #6
 801a5a0:	d825      	bhi.n	801a5ee <_scanf_float+0x2f6>
 801a5a2:	2d02      	cmp	r5, #2
 801a5a4:	d836      	bhi.n	801a614 <_scanf_float+0x31c>
 801a5a6:	455e      	cmp	r6, fp
 801a5a8:	f67f aee8 	bls.w	801a37c <_scanf_float+0x84>
 801a5ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5b0:	463a      	mov	r2, r7
 801a5b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a5b6:	4640      	mov	r0, r8
 801a5b8:	4798      	blx	r3
 801a5ba:	6923      	ldr	r3, [r4, #16]
 801a5bc:	3b01      	subs	r3, #1
 801a5be:	6123      	str	r3, [r4, #16]
 801a5c0:	e7f1      	b.n	801a5a6 <_scanf_float+0x2ae>
 801a5c2:	9802      	ldr	r0, [sp, #8]
 801a5c4:	463a      	mov	r2, r7
 801a5c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5ca:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a5ce:	9002      	str	r0, [sp, #8]
 801a5d0:	4640      	mov	r0, r8
 801a5d2:	4798      	blx	r3
 801a5d4:	6923      	ldr	r3, [r4, #16]
 801a5d6:	3b01      	subs	r3, #1
 801a5d8:	6123      	str	r3, [r4, #16]
 801a5da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a5de:	fa5f fa8a 	uxtb.w	sl, sl
 801a5e2:	f1ba 0f02 	cmp.w	sl, #2
 801a5e6:	d1ec      	bne.n	801a5c2 <_scanf_float+0x2ca>
 801a5e8:	3d03      	subs	r5, #3
 801a5ea:	b2ed      	uxtb	r5, r5
 801a5ec:	1b76      	subs	r6, r6, r5
 801a5ee:	6823      	ldr	r3, [r4, #0]
 801a5f0:	05da      	lsls	r2, r3, #23
 801a5f2:	d52e      	bpl.n	801a652 <_scanf_float+0x35a>
 801a5f4:	055b      	lsls	r3, r3, #21
 801a5f6:	d510      	bpl.n	801a61a <_scanf_float+0x322>
 801a5f8:	455e      	cmp	r6, fp
 801a5fa:	f67f aebf 	bls.w	801a37c <_scanf_float+0x84>
 801a5fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a602:	463a      	mov	r2, r7
 801a604:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a608:	4640      	mov	r0, r8
 801a60a:	4798      	blx	r3
 801a60c:	6923      	ldr	r3, [r4, #16]
 801a60e:	3b01      	subs	r3, #1
 801a610:	6123      	str	r3, [r4, #16]
 801a612:	e7f1      	b.n	801a5f8 <_scanf_float+0x300>
 801a614:	46aa      	mov	sl, r5
 801a616:	9602      	str	r6, [sp, #8]
 801a618:	e7df      	b.n	801a5da <_scanf_float+0x2e2>
 801a61a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a61e:	1e75      	subs	r5, r6, #1
 801a620:	6923      	ldr	r3, [r4, #16]
 801a622:	2965      	cmp	r1, #101	; 0x65
 801a624:	f103 33ff 	add.w	r3, r3, #4294967295
 801a628:	6123      	str	r3, [r4, #16]
 801a62a:	d00c      	beq.n	801a646 <_scanf_float+0x34e>
 801a62c:	2945      	cmp	r1, #69	; 0x45
 801a62e:	d00a      	beq.n	801a646 <_scanf_float+0x34e>
 801a630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a634:	463a      	mov	r2, r7
 801a636:	4640      	mov	r0, r8
 801a638:	1eb5      	subs	r5, r6, #2
 801a63a:	4798      	blx	r3
 801a63c:	6923      	ldr	r3, [r4, #16]
 801a63e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a642:	3b01      	subs	r3, #1
 801a644:	6123      	str	r3, [r4, #16]
 801a646:	462e      	mov	r6, r5
 801a648:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a64c:	463a      	mov	r2, r7
 801a64e:	4640      	mov	r0, r8
 801a650:	4798      	blx	r3
 801a652:	6825      	ldr	r5, [r4, #0]
 801a654:	f015 0510 	ands.w	r5, r5, #16
 801a658:	d159      	bne.n	801a70e <_scanf_float+0x416>
 801a65a:	7035      	strb	r5, [r6, #0]
 801a65c:	6823      	ldr	r3, [r4, #0]
 801a65e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a666:	d11b      	bne.n	801a6a0 <_scanf_float+0x3a8>
 801a668:	9b01      	ldr	r3, [sp, #4]
 801a66a:	454b      	cmp	r3, r9
 801a66c:	eba3 0209 	sub.w	r2, r3, r9
 801a670:	d123      	bne.n	801a6ba <_scanf_float+0x3c2>
 801a672:	2200      	movs	r2, #0
 801a674:	4659      	mov	r1, fp
 801a676:	4640      	mov	r0, r8
 801a678:	f000 fea4 	bl	801b3c4 <_strtod_r>
 801a67c:	6822      	ldr	r2, [r4, #0]
 801a67e:	9b03      	ldr	r3, [sp, #12]
 801a680:	f012 0f02 	tst.w	r2, #2
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	ec57 6b10 	vmov	r6, r7, d0
 801a68a:	d021      	beq.n	801a6d0 <_scanf_float+0x3d8>
 801a68c:	1d1a      	adds	r2, r3, #4
 801a68e:	9903      	ldr	r1, [sp, #12]
 801a690:	600a      	str	r2, [r1, #0]
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	e9c3 6700 	strd	r6, r7, [r3]
 801a698:	68e3      	ldr	r3, [r4, #12]
 801a69a:	3301      	adds	r3, #1
 801a69c:	60e3      	str	r3, [r4, #12]
 801a69e:	e66e      	b.n	801a37e <_scanf_float+0x86>
 801a6a0:	9b04      	ldr	r3, [sp, #16]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d0e5      	beq.n	801a672 <_scanf_float+0x37a>
 801a6a6:	9905      	ldr	r1, [sp, #20]
 801a6a8:	230a      	movs	r3, #10
 801a6aa:	462a      	mov	r2, r5
 801a6ac:	4640      	mov	r0, r8
 801a6ae:	3101      	adds	r1, #1
 801a6b0:	f000 ff10 	bl	801b4d4 <_strtol_r>
 801a6b4:	9b04      	ldr	r3, [sp, #16]
 801a6b6:	9e05      	ldr	r6, [sp, #20]
 801a6b8:	1ac2      	subs	r2, r0, r3
 801a6ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a6be:	4915      	ldr	r1, [pc, #84]	; (801a714 <_scanf_float+0x41c>)
 801a6c0:	429e      	cmp	r6, r3
 801a6c2:	bf28      	it	cs
 801a6c4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	f000 f83d 	bl	801a748 <siprintf>
 801a6ce:	e7d0      	b.n	801a672 <_scanf_float+0x37a>
 801a6d0:	9903      	ldr	r1, [sp, #12]
 801a6d2:	f012 0f04 	tst.w	r2, #4
 801a6d6:	f103 0204 	add.w	r2, r3, #4
 801a6da:	600a      	str	r2, [r1, #0]
 801a6dc:	d1d9      	bne.n	801a692 <_scanf_float+0x39a>
 801a6de:	f8d3 8000 	ldr.w	r8, [r3]
 801a6e2:	ee10 2a10 	vmov	r2, s0
 801a6e6:	463b      	mov	r3, r7
 801a6e8:	ee10 0a10 	vmov	r0, s0
 801a6ec:	4639      	mov	r1, r7
 801a6ee:	f7e6 fa21 	bl	8000b34 <__aeabi_dcmpun>
 801a6f2:	b128      	cbz	r0, 801a700 <_scanf_float+0x408>
 801a6f4:	4808      	ldr	r0, [pc, #32]	; (801a718 <_scanf_float+0x420>)
 801a6f6:	f000 f821 	bl	801a73c <nanf>
 801a6fa:	ed88 0a00 	vstr	s0, [r8]
 801a6fe:	e7cb      	b.n	801a698 <_scanf_float+0x3a0>
 801a700:	4630      	mov	r0, r6
 801a702:	4639      	mov	r1, r7
 801a704:	f7e6 fa74 	bl	8000bf0 <__aeabi_d2f>
 801a708:	f8c8 0000 	str.w	r0, [r8]
 801a70c:	e7c4      	b.n	801a698 <_scanf_float+0x3a0>
 801a70e:	2500      	movs	r5, #0
 801a710:	e635      	b.n	801a37e <_scanf_float+0x86>
 801a712:	bf00      	nop
 801a714:	0807386c 	.word	0x0807386c
 801a718:	08073c78 	.word	0x08073c78

0801a71c <_sbrk_r>:
 801a71c:	b538      	push	{r3, r4, r5, lr}
 801a71e:	2300      	movs	r3, #0
 801a720:	4d05      	ldr	r5, [pc, #20]	; (801a738 <_sbrk_r+0x1c>)
 801a722:	4604      	mov	r4, r0
 801a724:	4608      	mov	r0, r1
 801a726:	602b      	str	r3, [r5, #0]
 801a728:	f7e8 fe92 	bl	8003450 <_sbrk>
 801a72c:	1c43      	adds	r3, r0, #1
 801a72e:	d102      	bne.n	801a736 <_sbrk_r+0x1a>
 801a730:	682b      	ldr	r3, [r5, #0]
 801a732:	b103      	cbz	r3, 801a736 <_sbrk_r+0x1a>
 801a734:	6023      	str	r3, [r4, #0]
 801a736:	bd38      	pop	{r3, r4, r5, pc}
 801a738:	20004060 	.word	0x20004060

0801a73c <nanf>:
 801a73c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a744 <nanf+0x8>
 801a740:	4770      	bx	lr
 801a742:	bf00      	nop
 801a744:	7fc00000 	.word	0x7fc00000

0801a748 <siprintf>:
 801a748:	b40e      	push	{r1, r2, r3}
 801a74a:	b500      	push	{lr}
 801a74c:	b09c      	sub	sp, #112	; 0x70
 801a74e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a752:	ab1d      	add	r3, sp, #116	; 0x74
 801a754:	9002      	str	r0, [sp, #8]
 801a756:	9006      	str	r0, [sp, #24]
 801a758:	9107      	str	r1, [sp, #28]
 801a75a:	9104      	str	r1, [sp, #16]
 801a75c:	4808      	ldr	r0, [pc, #32]	; (801a780 <siprintf+0x38>)
 801a75e:	4909      	ldr	r1, [pc, #36]	; (801a784 <siprintf+0x3c>)
 801a760:	f853 2b04 	ldr.w	r2, [r3], #4
 801a764:	9105      	str	r1, [sp, #20]
 801a766:	a902      	add	r1, sp, #8
 801a768:	6800      	ldr	r0, [r0, #0]
 801a76a:	9301      	str	r3, [sp, #4]
 801a76c:	f002 fe22 	bl	801d3b4 <_svfiprintf_r>
 801a770:	9b02      	ldr	r3, [sp, #8]
 801a772:	2200      	movs	r2, #0
 801a774:	701a      	strb	r2, [r3, #0]
 801a776:	b01c      	add	sp, #112	; 0x70
 801a778:	f85d eb04 	ldr.w	lr, [sp], #4
 801a77c:	b003      	add	sp, #12
 801a77e:	4770      	bx	lr
 801a780:	200008fc 	.word	0x200008fc
 801a784:	ffff0208 	.word	0xffff0208

0801a788 <sulp>:
 801a788:	b570      	push	{r4, r5, r6, lr}
 801a78a:	4604      	mov	r4, r0
 801a78c:	460d      	mov	r5, r1
 801a78e:	4616      	mov	r6, r2
 801a790:	ec45 4b10 	vmov	d0, r4, r5
 801a794:	f002 fc36 	bl	801d004 <__ulp>
 801a798:	ec51 0b10 	vmov	r0, r1, d0
 801a79c:	b17e      	cbz	r6, 801a7be <sulp+0x36>
 801a79e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a7a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	dd09      	ble.n	801a7be <sulp+0x36>
 801a7aa:	051b      	lsls	r3, r3, #20
 801a7ac:	2400      	movs	r4, #0
 801a7ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a7b2:	4622      	mov	r2, r4
 801a7b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a7b8:	462b      	mov	r3, r5
 801a7ba:	f7e5 ff21 	bl	8000600 <__aeabi_dmul>
 801a7be:	bd70      	pop	{r4, r5, r6, pc}

0801a7c0 <_strtod_l>:
 801a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c4:	461f      	mov	r7, r3
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	4604      	mov	r4, r0
 801a7ca:	4688      	mov	r8, r1
 801a7cc:	f04f 0a00 	mov.w	sl, #0
 801a7d0:	f04f 0b00 	mov.w	fp, #0
 801a7d4:	ed2d 8b02 	vpush	{d8}
 801a7d8:	b09d      	sub	sp, #116	; 0x74
 801a7da:	9318      	str	r3, [sp, #96]	; 0x60
 801a7dc:	4b9f      	ldr	r3, [pc, #636]	; (801aa5c <_strtod_l+0x29c>)
 801a7de:	9213      	str	r2, [sp, #76]	; 0x4c
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	9305      	str	r3, [sp, #20]
 801a7e6:	f7e5 fd47 	bl	8000278 <strlen>
 801a7ea:	4605      	mov	r5, r0
 801a7ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a7f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7f2:	781a      	ldrb	r2, [r3, #0]
 801a7f4:	2a2b      	cmp	r2, #43	; 0x2b
 801a7f6:	d04e      	beq.n	801a896 <_strtod_l+0xd6>
 801a7f8:	d83b      	bhi.n	801a872 <_strtod_l+0xb2>
 801a7fa:	2a0d      	cmp	r2, #13
 801a7fc:	d834      	bhi.n	801a868 <_strtod_l+0xa8>
 801a7fe:	2a08      	cmp	r2, #8
 801a800:	d834      	bhi.n	801a86c <_strtod_l+0xac>
 801a802:	2a00      	cmp	r2, #0
 801a804:	d03e      	beq.n	801a884 <_strtod_l+0xc4>
 801a806:	2300      	movs	r3, #0
 801a808:	930a      	str	r3, [sp, #40]	; 0x28
 801a80a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a80c:	7833      	ldrb	r3, [r6, #0]
 801a80e:	2b30      	cmp	r3, #48	; 0x30
 801a810:	f040 80b0 	bne.w	801a974 <_strtod_l+0x1b4>
 801a814:	7873      	ldrb	r3, [r6, #1]
 801a816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a81a:	2b58      	cmp	r3, #88	; 0x58
 801a81c:	d168      	bne.n	801a8f0 <_strtod_l+0x130>
 801a81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a820:	a917      	add	r1, sp, #92	; 0x5c
 801a822:	9702      	str	r7, [sp, #8]
 801a824:	4620      	mov	r0, r4
 801a826:	9301      	str	r3, [sp, #4]
 801a828:	ab18      	add	r3, sp, #96	; 0x60
 801a82a:	4a8d      	ldr	r2, [pc, #564]	; (801aa60 <_strtod_l+0x2a0>)
 801a82c:	9300      	str	r3, [sp, #0]
 801a82e:	ab19      	add	r3, sp, #100	; 0x64
 801a830:	f001 fd38 	bl	801c2a4 <__gethex>
 801a834:	f010 0707 	ands.w	r7, r0, #7
 801a838:	4605      	mov	r5, r0
 801a83a:	d005      	beq.n	801a848 <_strtod_l+0x88>
 801a83c:	2f06      	cmp	r7, #6
 801a83e:	d12c      	bne.n	801a89a <_strtod_l+0xda>
 801a840:	3601      	adds	r6, #1
 801a842:	2300      	movs	r3, #0
 801a844:	9617      	str	r6, [sp, #92]	; 0x5c
 801a846:	930a      	str	r3, [sp, #40]	; 0x28
 801a848:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	f040 858e 	bne.w	801b36c <_strtod_l+0xbac>
 801a850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a852:	b1eb      	cbz	r3, 801a890 <_strtod_l+0xd0>
 801a854:	4652      	mov	r2, sl
 801a856:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a85a:	ec43 2b10 	vmov	d0, r2, r3
 801a85e:	b01d      	add	sp, #116	; 0x74
 801a860:	ecbd 8b02 	vpop	{d8}
 801a864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a868:	2a20      	cmp	r2, #32
 801a86a:	d1cc      	bne.n	801a806 <_strtod_l+0x46>
 801a86c:	3301      	adds	r3, #1
 801a86e:	9317      	str	r3, [sp, #92]	; 0x5c
 801a870:	e7be      	b.n	801a7f0 <_strtod_l+0x30>
 801a872:	2a2d      	cmp	r2, #45	; 0x2d
 801a874:	d1c7      	bne.n	801a806 <_strtod_l+0x46>
 801a876:	2201      	movs	r2, #1
 801a878:	920a      	str	r2, [sp, #40]	; 0x28
 801a87a:	1c5a      	adds	r2, r3, #1
 801a87c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a87e:	785b      	ldrb	r3, [r3, #1]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d1c2      	bne.n	801a80a <_strtod_l+0x4a>
 801a884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a886:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	f040 856c 	bne.w	801b368 <_strtod_l+0xba8>
 801a890:	4652      	mov	r2, sl
 801a892:	465b      	mov	r3, fp
 801a894:	e7e1      	b.n	801a85a <_strtod_l+0x9a>
 801a896:	2200      	movs	r2, #0
 801a898:	e7ee      	b.n	801a878 <_strtod_l+0xb8>
 801a89a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a89c:	b13a      	cbz	r2, 801a8ae <_strtod_l+0xee>
 801a89e:	2135      	movs	r1, #53	; 0x35
 801a8a0:	a81a      	add	r0, sp, #104	; 0x68
 801a8a2:	f002 fcb8 	bl	801d216 <__copybits>
 801a8a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a8a8:	4620      	mov	r0, r4
 801a8aa:	f002 f873 	bl	801c994 <_Bfree>
 801a8ae:	3f01      	subs	r7, #1
 801a8b0:	2f04      	cmp	r7, #4
 801a8b2:	d806      	bhi.n	801a8c2 <_strtod_l+0x102>
 801a8b4:	e8df f007 	tbb	[pc, r7]
 801a8b8:	1714030a 	.word	0x1714030a
 801a8bc:	0a          	.byte	0x0a
 801a8bd:	00          	.byte	0x00
 801a8be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a8c2:	0728      	lsls	r0, r5, #28
 801a8c4:	d5c0      	bpl.n	801a848 <_strtod_l+0x88>
 801a8c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a8ca:	e7bd      	b.n	801a848 <_strtod_l+0x88>
 801a8cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a8d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a8d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a8d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a8da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a8de:	e7f0      	b.n	801a8c2 <_strtod_l+0x102>
 801a8e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 801aa64 <_strtod_l+0x2a4>
 801a8e4:	e7ed      	b.n	801a8c2 <_strtod_l+0x102>
 801a8e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a8ea:	f04f 3aff 	mov.w	sl, #4294967295
 801a8ee:	e7e8      	b.n	801a8c2 <_strtod_l+0x102>
 801a8f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a8f2:	1c5a      	adds	r2, r3, #1
 801a8f4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8f6:	785b      	ldrb	r3, [r3, #1]
 801a8f8:	2b30      	cmp	r3, #48	; 0x30
 801a8fa:	d0f9      	beq.n	801a8f0 <_strtod_l+0x130>
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d0a3      	beq.n	801a848 <_strtod_l+0x88>
 801a900:	2301      	movs	r3, #1
 801a902:	f04f 0900 	mov.w	r9, #0
 801a906:	9304      	str	r3, [sp, #16]
 801a908:	220a      	movs	r2, #10
 801a90a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a90c:	464f      	mov	r7, r9
 801a90e:	f8cd 901c 	str.w	r9, [sp, #28]
 801a912:	9308      	str	r3, [sp, #32]
 801a914:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a916:	7806      	ldrb	r6, [r0, #0]
 801a918:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a91c:	b2d9      	uxtb	r1, r3
 801a91e:	2909      	cmp	r1, #9
 801a920:	d92a      	bls.n	801a978 <_strtod_l+0x1b8>
 801a922:	462a      	mov	r2, r5
 801a924:	9905      	ldr	r1, [sp, #20]
 801a926:	f002 fe4f 	bl	801d5c8 <strncmp>
 801a92a:	b3a0      	cbz	r0, 801a996 <_strtod_l+0x1d6>
 801a92c:	2000      	movs	r0, #0
 801a92e:	4632      	mov	r2, r6
 801a930:	463d      	mov	r5, r7
 801a932:	4603      	mov	r3, r0
 801a934:	9005      	str	r0, [sp, #20]
 801a936:	2a65      	cmp	r2, #101	; 0x65
 801a938:	d001      	beq.n	801a93e <_strtod_l+0x17e>
 801a93a:	2a45      	cmp	r2, #69	; 0x45
 801a93c:	d118      	bne.n	801a970 <_strtod_l+0x1b0>
 801a93e:	b91d      	cbnz	r5, 801a948 <_strtod_l+0x188>
 801a940:	9a04      	ldr	r2, [sp, #16]
 801a942:	4302      	orrs	r2, r0
 801a944:	d09e      	beq.n	801a884 <_strtod_l+0xc4>
 801a946:	2500      	movs	r5, #0
 801a948:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a94c:	f108 0201 	add.w	r2, r8, #1
 801a950:	9217      	str	r2, [sp, #92]	; 0x5c
 801a952:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a956:	2a2b      	cmp	r2, #43	; 0x2b
 801a958:	d075      	beq.n	801aa46 <_strtod_l+0x286>
 801a95a:	2a2d      	cmp	r2, #45	; 0x2d
 801a95c:	d07b      	beq.n	801aa56 <_strtod_l+0x296>
 801a95e:	f04f 0c00 	mov.w	ip, #0
 801a962:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a966:	2909      	cmp	r1, #9
 801a968:	f240 8082 	bls.w	801aa70 <_strtod_l+0x2b0>
 801a96c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a970:	2600      	movs	r6, #0
 801a972:	e09d      	b.n	801aab0 <_strtod_l+0x2f0>
 801a974:	2300      	movs	r3, #0
 801a976:	e7c4      	b.n	801a902 <_strtod_l+0x142>
 801a978:	2f08      	cmp	r7, #8
 801a97a:	f100 0001 	add.w	r0, r0, #1
 801a97e:	f107 0701 	add.w	r7, r7, #1
 801a982:	bfd4      	ite	le
 801a984:	9907      	ldrle	r1, [sp, #28]
 801a986:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a98a:	9017      	str	r0, [sp, #92]	; 0x5c
 801a98c:	bfdc      	itt	le
 801a98e:	fb02 3301 	mlale	r3, r2, r1, r3
 801a992:	9307      	strle	r3, [sp, #28]
 801a994:	e7be      	b.n	801a914 <_strtod_l+0x154>
 801a996:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a998:	195a      	adds	r2, r3, r5
 801a99a:	9217      	str	r2, [sp, #92]	; 0x5c
 801a99c:	5d5a      	ldrb	r2, [r3, r5]
 801a99e:	2f00      	cmp	r7, #0
 801a9a0:	d036      	beq.n	801aa10 <_strtod_l+0x250>
 801a9a2:	463d      	mov	r5, r7
 801a9a4:	9005      	str	r0, [sp, #20]
 801a9a6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a9aa:	2b09      	cmp	r3, #9
 801a9ac:	d912      	bls.n	801a9d4 <_strtod_l+0x214>
 801a9ae:	2301      	movs	r3, #1
 801a9b0:	e7c1      	b.n	801a936 <_strtod_l+0x176>
 801a9b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9b4:	3001      	adds	r0, #1
 801a9b6:	1c5a      	adds	r2, r3, #1
 801a9b8:	9217      	str	r2, [sp, #92]	; 0x5c
 801a9ba:	785a      	ldrb	r2, [r3, #1]
 801a9bc:	2a30      	cmp	r2, #48	; 0x30
 801a9be:	d0f8      	beq.n	801a9b2 <_strtod_l+0x1f2>
 801a9c0:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a9c4:	2b08      	cmp	r3, #8
 801a9c6:	f200 84d6 	bhi.w	801b376 <_strtod_l+0xbb6>
 801a9ca:	9005      	str	r0, [sp, #20]
 801a9cc:	2000      	movs	r0, #0
 801a9ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9d0:	4605      	mov	r5, r0
 801a9d2:	9308      	str	r3, [sp, #32]
 801a9d4:	3a30      	subs	r2, #48	; 0x30
 801a9d6:	f100 0301 	add.w	r3, r0, #1
 801a9da:	d013      	beq.n	801aa04 <_strtod_l+0x244>
 801a9dc:	9905      	ldr	r1, [sp, #20]
 801a9de:	eb00 0e05 	add.w	lr, r0, r5
 801a9e2:	4419      	add	r1, r3
 801a9e4:	462b      	mov	r3, r5
 801a9e6:	9105      	str	r1, [sp, #20]
 801a9e8:	210a      	movs	r1, #10
 801a9ea:	4573      	cmp	r3, lr
 801a9ec:	d112      	bne.n	801aa14 <_strtod_l+0x254>
 801a9ee:	182b      	adds	r3, r5, r0
 801a9f0:	3501      	adds	r5, #1
 801a9f2:	2b08      	cmp	r3, #8
 801a9f4:	4405      	add	r5, r0
 801a9f6:	dc1c      	bgt.n	801aa32 <_strtod_l+0x272>
 801a9f8:	9907      	ldr	r1, [sp, #28]
 801a9fa:	230a      	movs	r3, #10
 801a9fc:	fb03 2301 	mla	r3, r3, r1, r2
 801aa00:	9307      	str	r3, [sp, #28]
 801aa02:	2300      	movs	r3, #0
 801aa04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aa06:	4618      	mov	r0, r3
 801aa08:	1c51      	adds	r1, r2, #1
 801aa0a:	9117      	str	r1, [sp, #92]	; 0x5c
 801aa0c:	7852      	ldrb	r2, [r2, #1]
 801aa0e:	e7ca      	b.n	801a9a6 <_strtod_l+0x1e6>
 801aa10:	4638      	mov	r0, r7
 801aa12:	e7d3      	b.n	801a9bc <_strtod_l+0x1fc>
 801aa14:	2b08      	cmp	r3, #8
 801aa16:	dc04      	bgt.n	801aa22 <_strtod_l+0x262>
 801aa18:	9e07      	ldr	r6, [sp, #28]
 801aa1a:	434e      	muls	r6, r1
 801aa1c:	9607      	str	r6, [sp, #28]
 801aa1e:	3301      	adds	r3, #1
 801aa20:	e7e3      	b.n	801a9ea <_strtod_l+0x22a>
 801aa22:	f103 0c01 	add.w	ip, r3, #1
 801aa26:	f1bc 0f10 	cmp.w	ip, #16
 801aa2a:	bfd8      	it	le
 801aa2c:	fb01 f909 	mulle.w	r9, r1, r9
 801aa30:	e7f5      	b.n	801aa1e <_strtod_l+0x25e>
 801aa32:	2d10      	cmp	r5, #16
 801aa34:	bfdc      	itt	le
 801aa36:	230a      	movle	r3, #10
 801aa38:	fb03 2909 	mlale	r9, r3, r9, r2
 801aa3c:	e7e1      	b.n	801aa02 <_strtod_l+0x242>
 801aa3e:	2300      	movs	r3, #0
 801aa40:	9305      	str	r3, [sp, #20]
 801aa42:	2301      	movs	r3, #1
 801aa44:	e77c      	b.n	801a940 <_strtod_l+0x180>
 801aa46:	f04f 0c00 	mov.w	ip, #0
 801aa4a:	f108 0202 	add.w	r2, r8, #2
 801aa4e:	9217      	str	r2, [sp, #92]	; 0x5c
 801aa50:	f898 2002 	ldrb.w	r2, [r8, #2]
 801aa54:	e785      	b.n	801a962 <_strtod_l+0x1a2>
 801aa56:	f04f 0c01 	mov.w	ip, #1
 801aa5a:	e7f6      	b.n	801aa4a <_strtod_l+0x28a>
 801aa5c:	08073ac0 	.word	0x08073ac0
 801aa60:	08073874 	.word	0x08073874
 801aa64:	7ff00000 	.word	0x7ff00000
 801aa68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aa6a:	1c51      	adds	r1, r2, #1
 801aa6c:	9117      	str	r1, [sp, #92]	; 0x5c
 801aa6e:	7852      	ldrb	r2, [r2, #1]
 801aa70:	2a30      	cmp	r2, #48	; 0x30
 801aa72:	d0f9      	beq.n	801aa68 <_strtod_l+0x2a8>
 801aa74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801aa78:	2908      	cmp	r1, #8
 801aa7a:	f63f af79 	bhi.w	801a970 <_strtod_l+0x1b0>
 801aa7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801aa82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aa84:	9206      	str	r2, [sp, #24]
 801aa86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aa88:	1c51      	adds	r1, r2, #1
 801aa8a:	9117      	str	r1, [sp, #92]	; 0x5c
 801aa8c:	7852      	ldrb	r2, [r2, #1]
 801aa8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801aa92:	2e09      	cmp	r6, #9
 801aa94:	d937      	bls.n	801ab06 <_strtod_l+0x346>
 801aa96:	9e06      	ldr	r6, [sp, #24]
 801aa98:	1b89      	subs	r1, r1, r6
 801aa9a:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801aa9e:	2908      	cmp	r1, #8
 801aaa0:	dc02      	bgt.n	801aaa8 <_strtod_l+0x2e8>
 801aaa2:	4576      	cmp	r6, lr
 801aaa4:	bfa8      	it	ge
 801aaa6:	4676      	movge	r6, lr
 801aaa8:	f1bc 0f00 	cmp.w	ip, #0
 801aaac:	d000      	beq.n	801aab0 <_strtod_l+0x2f0>
 801aaae:	4276      	negs	r6, r6
 801aab0:	2d00      	cmp	r5, #0
 801aab2:	d14d      	bne.n	801ab50 <_strtod_l+0x390>
 801aab4:	9904      	ldr	r1, [sp, #16]
 801aab6:	4301      	orrs	r1, r0
 801aab8:	f47f aec6 	bne.w	801a848 <_strtod_l+0x88>
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	f47f aee1 	bne.w	801a884 <_strtod_l+0xc4>
 801aac2:	2a69      	cmp	r2, #105	; 0x69
 801aac4:	d027      	beq.n	801ab16 <_strtod_l+0x356>
 801aac6:	dc24      	bgt.n	801ab12 <_strtod_l+0x352>
 801aac8:	2a49      	cmp	r2, #73	; 0x49
 801aaca:	d024      	beq.n	801ab16 <_strtod_l+0x356>
 801aacc:	2a4e      	cmp	r2, #78	; 0x4e
 801aace:	f47f aed9 	bne.w	801a884 <_strtod_l+0xc4>
 801aad2:	499f      	ldr	r1, [pc, #636]	; (801ad50 <_strtod_l+0x590>)
 801aad4:	a817      	add	r0, sp, #92	; 0x5c
 801aad6:	f001 fe3d 	bl	801c754 <__match>
 801aada:	2800      	cmp	r0, #0
 801aadc:	f43f aed2 	beq.w	801a884 <_strtod_l+0xc4>
 801aae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aae2:	781b      	ldrb	r3, [r3, #0]
 801aae4:	2b28      	cmp	r3, #40	; 0x28
 801aae6:	d12d      	bne.n	801ab44 <_strtod_l+0x384>
 801aae8:	aa1a      	add	r2, sp, #104	; 0x68
 801aaea:	499a      	ldr	r1, [pc, #616]	; (801ad54 <_strtod_l+0x594>)
 801aaec:	a817      	add	r0, sp, #92	; 0x5c
 801aaee:	f001 fe45 	bl	801c77c <__hexnan>
 801aaf2:	2805      	cmp	r0, #5
 801aaf4:	d126      	bne.n	801ab44 <_strtod_l+0x384>
 801aaf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aaf8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801aafc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ab00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ab04:	e6a0      	b.n	801a848 <_strtod_l+0x88>
 801ab06:	210a      	movs	r1, #10
 801ab08:	fb01 2e0e 	mla	lr, r1, lr, r2
 801ab0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ab10:	e7b9      	b.n	801aa86 <_strtod_l+0x2c6>
 801ab12:	2a6e      	cmp	r2, #110	; 0x6e
 801ab14:	e7db      	b.n	801aace <_strtod_l+0x30e>
 801ab16:	4990      	ldr	r1, [pc, #576]	; (801ad58 <_strtod_l+0x598>)
 801ab18:	a817      	add	r0, sp, #92	; 0x5c
 801ab1a:	f001 fe1b 	bl	801c754 <__match>
 801ab1e:	2800      	cmp	r0, #0
 801ab20:	f43f aeb0 	beq.w	801a884 <_strtod_l+0xc4>
 801ab24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab26:	a817      	add	r0, sp, #92	; 0x5c
 801ab28:	498c      	ldr	r1, [pc, #560]	; (801ad5c <_strtod_l+0x59c>)
 801ab2a:	3b01      	subs	r3, #1
 801ab2c:	9317      	str	r3, [sp, #92]	; 0x5c
 801ab2e:	f001 fe11 	bl	801c754 <__match>
 801ab32:	b910      	cbnz	r0, 801ab3a <_strtod_l+0x37a>
 801ab34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab36:	3301      	adds	r3, #1
 801ab38:	9317      	str	r3, [sp, #92]	; 0x5c
 801ab3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801ad6c <_strtod_l+0x5ac>
 801ab3e:	f04f 0a00 	mov.w	sl, #0
 801ab42:	e681      	b.n	801a848 <_strtod_l+0x88>
 801ab44:	4886      	ldr	r0, [pc, #536]	; (801ad60 <_strtod_l+0x5a0>)
 801ab46:	f002 fd37 	bl	801d5b8 <nan>
 801ab4a:	ec5b ab10 	vmov	sl, fp, d0
 801ab4e:	e67b      	b.n	801a848 <_strtod_l+0x88>
 801ab50:	9b05      	ldr	r3, [sp, #20]
 801ab52:	2f00      	cmp	r7, #0
 801ab54:	bf08      	it	eq
 801ab56:	462f      	moveq	r7, r5
 801ab58:	2d10      	cmp	r5, #16
 801ab5a:	9807      	ldr	r0, [sp, #28]
 801ab5c:	eba6 0303 	sub.w	r3, r6, r3
 801ab60:	46a8      	mov	r8, r5
 801ab62:	bfa8      	it	ge
 801ab64:	f04f 0810 	movge.w	r8, #16
 801ab68:	9306      	str	r3, [sp, #24]
 801ab6a:	f7e5 fccf 	bl	800050c <__aeabi_ui2d>
 801ab6e:	2d09      	cmp	r5, #9
 801ab70:	4682      	mov	sl, r0
 801ab72:	468b      	mov	fp, r1
 801ab74:	dd13      	ble.n	801ab9e <_strtod_l+0x3de>
 801ab76:	4b7b      	ldr	r3, [pc, #492]	; (801ad64 <_strtod_l+0x5a4>)
 801ab78:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ab7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ab80:	f7e5 fd3e 	bl	8000600 <__aeabi_dmul>
 801ab84:	4682      	mov	sl, r0
 801ab86:	468b      	mov	fp, r1
 801ab88:	4648      	mov	r0, r9
 801ab8a:	f7e5 fcbf 	bl	800050c <__aeabi_ui2d>
 801ab8e:	4602      	mov	r2, r0
 801ab90:	460b      	mov	r3, r1
 801ab92:	4650      	mov	r0, sl
 801ab94:	4659      	mov	r1, fp
 801ab96:	f7e5 fb7d 	bl	8000294 <__adddf3>
 801ab9a:	4682      	mov	sl, r0
 801ab9c:	468b      	mov	fp, r1
 801ab9e:	2d0f      	cmp	r5, #15
 801aba0:	dc38      	bgt.n	801ac14 <_strtod_l+0x454>
 801aba2:	9b06      	ldr	r3, [sp, #24]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	f43f ae4f 	beq.w	801a848 <_strtod_l+0x88>
 801abaa:	dd24      	ble.n	801abf6 <_strtod_l+0x436>
 801abac:	2b16      	cmp	r3, #22
 801abae:	dc0b      	bgt.n	801abc8 <_strtod_l+0x408>
 801abb0:	496c      	ldr	r1, [pc, #432]	; (801ad64 <_strtod_l+0x5a4>)
 801abb2:	4652      	mov	r2, sl
 801abb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801abb8:	465b      	mov	r3, fp
 801abba:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abbe:	f7e5 fd1f 	bl	8000600 <__aeabi_dmul>
 801abc2:	4682      	mov	sl, r0
 801abc4:	468b      	mov	fp, r1
 801abc6:	e63f      	b.n	801a848 <_strtod_l+0x88>
 801abc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801abcc:	9a06      	ldr	r2, [sp, #24]
 801abce:	4293      	cmp	r3, r2
 801abd0:	db20      	blt.n	801ac14 <_strtod_l+0x454>
 801abd2:	f1c5 050f 	rsb	r5, r5, #15
 801abd6:	4c63      	ldr	r4, [pc, #396]	; (801ad64 <_strtod_l+0x5a4>)
 801abd8:	4652      	mov	r2, sl
 801abda:	465b      	mov	r3, fp
 801abdc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801abe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abe4:	f7e5 fd0c 	bl	8000600 <__aeabi_dmul>
 801abe8:	9b06      	ldr	r3, [sp, #24]
 801abea:	1b5d      	subs	r5, r3, r5
 801abec:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801abf0:	e9d4 2300 	ldrd	r2, r3, [r4]
 801abf4:	e7e3      	b.n	801abbe <_strtod_l+0x3fe>
 801abf6:	9b06      	ldr	r3, [sp, #24]
 801abf8:	3316      	adds	r3, #22
 801abfa:	db0b      	blt.n	801ac14 <_strtod_l+0x454>
 801abfc:	9b05      	ldr	r3, [sp, #20]
 801abfe:	4650      	mov	r0, sl
 801ac00:	4659      	mov	r1, fp
 801ac02:	1b9e      	subs	r6, r3, r6
 801ac04:	4b57      	ldr	r3, [pc, #348]	; (801ad64 <_strtod_l+0x5a4>)
 801ac06:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801ac0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ac0e:	f7e5 fe21 	bl	8000854 <__aeabi_ddiv>
 801ac12:	e7d6      	b.n	801abc2 <_strtod_l+0x402>
 801ac14:	eba5 0808 	sub.w	r8, r5, r8
 801ac18:	9b06      	ldr	r3, [sp, #24]
 801ac1a:	4498      	add	r8, r3
 801ac1c:	f1b8 0f00 	cmp.w	r8, #0
 801ac20:	dd74      	ble.n	801ad0c <_strtod_l+0x54c>
 801ac22:	f018 030f 	ands.w	r3, r8, #15
 801ac26:	d00a      	beq.n	801ac3e <_strtod_l+0x47e>
 801ac28:	494e      	ldr	r1, [pc, #312]	; (801ad64 <_strtod_l+0x5a4>)
 801ac2a:	4652      	mov	r2, sl
 801ac2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ac30:	465b      	mov	r3, fp
 801ac32:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac36:	f7e5 fce3 	bl	8000600 <__aeabi_dmul>
 801ac3a:	4682      	mov	sl, r0
 801ac3c:	468b      	mov	fp, r1
 801ac3e:	f038 080f 	bics.w	r8, r8, #15
 801ac42:	d04f      	beq.n	801ace4 <_strtod_l+0x524>
 801ac44:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ac48:	dd22      	ble.n	801ac90 <_strtod_l+0x4d0>
 801ac4a:	2500      	movs	r5, #0
 801ac4c:	462e      	mov	r6, r5
 801ac4e:	9507      	str	r5, [sp, #28]
 801ac50:	9505      	str	r5, [sp, #20]
 801ac52:	2322      	movs	r3, #34	; 0x22
 801ac54:	f8df b114 	ldr.w	fp, [pc, #276]	; 801ad6c <_strtod_l+0x5ac>
 801ac58:	f04f 0a00 	mov.w	sl, #0
 801ac5c:	6023      	str	r3, [r4, #0]
 801ac5e:	9b07      	ldr	r3, [sp, #28]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	f43f adf1 	beq.w	801a848 <_strtod_l+0x88>
 801ac66:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ac68:	4620      	mov	r0, r4
 801ac6a:	f001 fe93 	bl	801c994 <_Bfree>
 801ac6e:	9905      	ldr	r1, [sp, #20]
 801ac70:	4620      	mov	r0, r4
 801ac72:	f001 fe8f 	bl	801c994 <_Bfree>
 801ac76:	4631      	mov	r1, r6
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f001 fe8b 	bl	801c994 <_Bfree>
 801ac7e:	9907      	ldr	r1, [sp, #28]
 801ac80:	4620      	mov	r0, r4
 801ac82:	f001 fe87 	bl	801c994 <_Bfree>
 801ac86:	4629      	mov	r1, r5
 801ac88:	4620      	mov	r0, r4
 801ac8a:	f001 fe83 	bl	801c994 <_Bfree>
 801ac8e:	e5db      	b.n	801a848 <_strtod_l+0x88>
 801ac90:	4b35      	ldr	r3, [pc, #212]	; (801ad68 <_strtod_l+0x5a8>)
 801ac92:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ac96:	4650      	mov	r0, sl
 801ac98:	4659      	mov	r1, fp
 801ac9a:	9304      	str	r3, [sp, #16]
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	4699      	mov	r9, r3
 801aca0:	f1b8 0f01 	cmp.w	r8, #1
 801aca4:	dc21      	bgt.n	801acea <_strtod_l+0x52a>
 801aca6:	b10b      	cbz	r3, 801acac <_strtod_l+0x4ec>
 801aca8:	4682      	mov	sl, r0
 801acaa:	468b      	mov	fp, r1
 801acac:	4b2e      	ldr	r3, [pc, #184]	; (801ad68 <_strtod_l+0x5a8>)
 801acae:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801acb2:	4652      	mov	r2, sl
 801acb4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801acb8:	465b      	mov	r3, fp
 801acba:	e9d9 0100 	ldrd	r0, r1, [r9]
 801acbe:	f7e5 fc9f 	bl	8000600 <__aeabi_dmul>
 801acc2:	4b2a      	ldr	r3, [pc, #168]	; (801ad6c <_strtod_l+0x5ac>)
 801acc4:	460a      	mov	r2, r1
 801acc6:	4682      	mov	sl, r0
 801acc8:	400b      	ands	r3, r1
 801acca:	4929      	ldr	r1, [pc, #164]	; (801ad70 <_strtod_l+0x5b0>)
 801accc:	428b      	cmp	r3, r1
 801acce:	d8bc      	bhi.n	801ac4a <_strtod_l+0x48a>
 801acd0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801acd4:	428b      	cmp	r3, r1
 801acd6:	bf86      	itte	hi
 801acd8:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801ad74 <_strtod_l+0x5b4>
 801acdc:	f04f 3aff 	movhi.w	sl, #4294967295
 801ace0:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ace4:	2300      	movs	r3, #0
 801ace6:	9304      	str	r3, [sp, #16]
 801ace8:	e083      	b.n	801adf2 <_strtod_l+0x632>
 801acea:	f018 0f01 	tst.w	r8, #1
 801acee:	d005      	beq.n	801acfc <_strtod_l+0x53c>
 801acf0:	9b04      	ldr	r3, [sp, #16]
 801acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf6:	f7e5 fc83 	bl	8000600 <__aeabi_dmul>
 801acfa:	2301      	movs	r3, #1
 801acfc:	9a04      	ldr	r2, [sp, #16]
 801acfe:	f109 0901 	add.w	r9, r9, #1
 801ad02:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ad06:	3208      	adds	r2, #8
 801ad08:	9204      	str	r2, [sp, #16]
 801ad0a:	e7c9      	b.n	801aca0 <_strtod_l+0x4e0>
 801ad0c:	d0ea      	beq.n	801ace4 <_strtod_l+0x524>
 801ad0e:	f1c8 0800 	rsb	r8, r8, #0
 801ad12:	f018 020f 	ands.w	r2, r8, #15
 801ad16:	d00a      	beq.n	801ad2e <_strtod_l+0x56e>
 801ad18:	4b12      	ldr	r3, [pc, #72]	; (801ad64 <_strtod_l+0x5a4>)
 801ad1a:	4650      	mov	r0, sl
 801ad1c:	4659      	mov	r1, fp
 801ad1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad26:	f7e5 fd95 	bl	8000854 <__aeabi_ddiv>
 801ad2a:	4682      	mov	sl, r0
 801ad2c:	468b      	mov	fp, r1
 801ad2e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801ad32:	d0d7      	beq.n	801ace4 <_strtod_l+0x524>
 801ad34:	f1b8 0f1f 	cmp.w	r8, #31
 801ad38:	dd1e      	ble.n	801ad78 <_strtod_l+0x5b8>
 801ad3a:	2500      	movs	r5, #0
 801ad3c:	462e      	mov	r6, r5
 801ad3e:	9507      	str	r5, [sp, #28]
 801ad40:	9505      	str	r5, [sp, #20]
 801ad42:	2322      	movs	r3, #34	; 0x22
 801ad44:	f04f 0a00 	mov.w	sl, #0
 801ad48:	f04f 0b00 	mov.w	fp, #0
 801ad4c:	6023      	str	r3, [r4, #0]
 801ad4e:	e786      	b.n	801ac5e <_strtod_l+0x49e>
 801ad50:	08073845 	.word	0x08073845
 801ad54:	08073888 	.word	0x08073888
 801ad58:	0807383d 	.word	0x0807383d
 801ad5c:	080739cc 	.word	0x080739cc
 801ad60:	08073c78 	.word	0x08073c78
 801ad64:	08073b58 	.word	0x08073b58
 801ad68:	08073b30 	.word	0x08073b30
 801ad6c:	7ff00000 	.word	0x7ff00000
 801ad70:	7ca00000 	.word	0x7ca00000
 801ad74:	7fefffff 	.word	0x7fefffff
 801ad78:	f018 0310 	ands.w	r3, r8, #16
 801ad7c:	4650      	mov	r0, sl
 801ad7e:	4659      	mov	r1, fp
 801ad80:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 801b12c <_strtod_l+0x96c>
 801ad84:	bf18      	it	ne
 801ad86:	236a      	movne	r3, #106	; 0x6a
 801ad88:	9304      	str	r3, [sp, #16]
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	f018 0f01 	tst.w	r8, #1
 801ad90:	d004      	beq.n	801ad9c <_strtod_l+0x5dc>
 801ad92:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ad96:	f7e5 fc33 	bl	8000600 <__aeabi_dmul>
 801ad9a:	2301      	movs	r3, #1
 801ad9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ada0:	f109 0908 	add.w	r9, r9, #8
 801ada4:	d1f2      	bne.n	801ad8c <_strtod_l+0x5cc>
 801ada6:	b10b      	cbz	r3, 801adac <_strtod_l+0x5ec>
 801ada8:	4682      	mov	sl, r0
 801adaa:	468b      	mov	fp, r1
 801adac:	9b04      	ldr	r3, [sp, #16]
 801adae:	b1c3      	cbz	r3, 801ade2 <_strtod_l+0x622>
 801adb0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801adb4:	4659      	mov	r1, fp
 801adb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801adba:	2b00      	cmp	r3, #0
 801adbc:	dd11      	ble.n	801ade2 <_strtod_l+0x622>
 801adbe:	2b1f      	cmp	r3, #31
 801adc0:	f340 8121 	ble.w	801b006 <_strtod_l+0x846>
 801adc4:	2b34      	cmp	r3, #52	; 0x34
 801adc6:	f04f 0a00 	mov.w	sl, #0
 801adca:	bfdb      	ittet	le
 801adcc:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801add0:	f04f 33ff 	movle.w	r3, #4294967295
 801add4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801add8:	fa03 f202 	lslle.w	r2, r3, r2
 801addc:	bfd8      	it	le
 801adde:	ea02 0b01 	andle.w	fp, r2, r1
 801ade2:	2200      	movs	r2, #0
 801ade4:	2300      	movs	r3, #0
 801ade6:	4650      	mov	r0, sl
 801ade8:	4659      	mov	r1, fp
 801adea:	f7e5 fe71 	bl	8000ad0 <__aeabi_dcmpeq>
 801adee:	2800      	cmp	r0, #0
 801adf0:	d1a3      	bne.n	801ad3a <_strtod_l+0x57a>
 801adf2:	9b07      	ldr	r3, [sp, #28]
 801adf4:	463a      	mov	r2, r7
 801adf6:	9908      	ldr	r1, [sp, #32]
 801adf8:	4620      	mov	r0, r4
 801adfa:	9300      	str	r3, [sp, #0]
 801adfc:	462b      	mov	r3, r5
 801adfe:	f001 fe33 	bl	801ca68 <__s2b>
 801ae02:	9007      	str	r0, [sp, #28]
 801ae04:	2800      	cmp	r0, #0
 801ae06:	f43f af20 	beq.w	801ac4a <_strtod_l+0x48a>
 801ae0a:	9b05      	ldr	r3, [sp, #20]
 801ae0c:	2500      	movs	r5, #0
 801ae0e:	1b9e      	subs	r6, r3, r6
 801ae10:	9b06      	ldr	r3, [sp, #24]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	bfb4      	ite	lt
 801ae16:	4633      	movlt	r3, r6
 801ae18:	2300      	movge	r3, #0
 801ae1a:	462e      	mov	r6, r5
 801ae1c:	930c      	str	r3, [sp, #48]	; 0x30
 801ae1e:	9b06      	ldr	r3, [sp, #24]
 801ae20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae24:	9312      	str	r3, [sp, #72]	; 0x48
 801ae26:	9b07      	ldr	r3, [sp, #28]
 801ae28:	4620      	mov	r0, r4
 801ae2a:	6859      	ldr	r1, [r3, #4]
 801ae2c:	f001 fd72 	bl	801c914 <_Balloc>
 801ae30:	9005      	str	r0, [sp, #20]
 801ae32:	2800      	cmp	r0, #0
 801ae34:	f43f af0d 	beq.w	801ac52 <_strtod_l+0x492>
 801ae38:	9b07      	ldr	r3, [sp, #28]
 801ae3a:	300c      	adds	r0, #12
 801ae3c:	691a      	ldr	r2, [r3, #16]
 801ae3e:	f103 010c 	add.w	r1, r3, #12
 801ae42:	3202      	adds	r2, #2
 801ae44:	0092      	lsls	r2, r2, #2
 801ae46:	f7fe fcdf 	bl	8019808 <memcpy>
 801ae4a:	aa1a      	add	r2, sp, #104	; 0x68
 801ae4c:	a919      	add	r1, sp, #100	; 0x64
 801ae4e:	4620      	mov	r0, r4
 801ae50:	ec4b ab10 	vmov	d0, sl, fp
 801ae54:	f002 f950 	bl	801d0f8 <__d2b>
 801ae58:	9018      	str	r0, [sp, #96]	; 0x60
 801ae5a:	ec4b ab18 	vmov	d8, sl, fp
 801ae5e:	2800      	cmp	r0, #0
 801ae60:	f43f aef7 	beq.w	801ac52 <_strtod_l+0x492>
 801ae64:	2101      	movs	r1, #1
 801ae66:	4620      	mov	r0, r4
 801ae68:	f001 fe98 	bl	801cb9c <__i2b>
 801ae6c:	4606      	mov	r6, r0
 801ae6e:	2800      	cmp	r0, #0
 801ae70:	f43f aeef 	beq.w	801ac52 <_strtod_l+0x492>
 801ae74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ae76:	9904      	ldr	r1, [sp, #16]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	eba3 0801 	sub.w	r8, r3, r1
 801ae7e:	bfa9      	itett	ge
 801ae80:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801ae82:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ae84:	eb03 0902 	addge.w	r9, r3, r2
 801ae88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ae8a:	bfb8      	it	lt
 801ae8c:	1ad7      	sublt	r7, r2, r3
 801ae8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ae90:	4ba1      	ldr	r3, [pc, #644]	; (801b118 <_strtod_l+0x958>)
 801ae92:	4490      	add	r8, r2
 801ae94:	bfb8      	it	lt
 801ae96:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801ae9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ae9e:	f108 38ff 	add.w	r8, r8, #4294967295
 801aea2:	4598      	cmp	r8, r3
 801aea4:	f280 80c3 	bge.w	801b02e <_strtod_l+0x86e>
 801aea8:	eba3 0308 	sub.w	r3, r3, r8
 801aeac:	2101      	movs	r1, #1
 801aeae:	2b1f      	cmp	r3, #31
 801aeb0:	eba2 0203 	sub.w	r2, r2, r3
 801aeb4:	f300 80ae 	bgt.w	801b014 <_strtod_l+0x854>
 801aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 801aebc:	930d      	str	r3, [sp, #52]	; 0x34
 801aebe:	2300      	movs	r3, #0
 801aec0:	9308      	str	r3, [sp, #32]
 801aec2:	eb09 0802 	add.w	r8, r9, r2
 801aec6:	9b04      	ldr	r3, [sp, #16]
 801aec8:	4417      	add	r7, r2
 801aeca:	45c1      	cmp	r9, r8
 801aecc:	441f      	add	r7, r3
 801aece:	464b      	mov	r3, r9
 801aed0:	bfa8      	it	ge
 801aed2:	4643      	movge	r3, r8
 801aed4:	42bb      	cmp	r3, r7
 801aed6:	bfa8      	it	ge
 801aed8:	463b      	movge	r3, r7
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	bfc2      	ittt	gt
 801aede:	eba8 0803 	subgt.w	r8, r8, r3
 801aee2:	1aff      	subgt	r7, r7, r3
 801aee4:	eba9 0903 	subgt.w	r9, r9, r3
 801aee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	dd17      	ble.n	801af1e <_strtod_l+0x75e>
 801aeee:	4631      	mov	r1, r6
 801aef0:	461a      	mov	r2, r3
 801aef2:	4620      	mov	r0, r4
 801aef4:	f001 ff10 	bl	801cd18 <__pow5mult>
 801aef8:	4606      	mov	r6, r0
 801aefa:	2800      	cmp	r0, #0
 801aefc:	f43f aea9 	beq.w	801ac52 <_strtod_l+0x492>
 801af00:	4601      	mov	r1, r0
 801af02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801af04:	4620      	mov	r0, r4
 801af06:	f001 fe5f 	bl	801cbc8 <__multiply>
 801af0a:	900b      	str	r0, [sp, #44]	; 0x2c
 801af0c:	2800      	cmp	r0, #0
 801af0e:	f43f aea0 	beq.w	801ac52 <_strtod_l+0x492>
 801af12:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af14:	4620      	mov	r0, r4
 801af16:	f001 fd3d 	bl	801c994 <_Bfree>
 801af1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af1c:	9318      	str	r3, [sp, #96]	; 0x60
 801af1e:	f1b8 0f00 	cmp.w	r8, #0
 801af22:	f300 8089 	bgt.w	801b038 <_strtod_l+0x878>
 801af26:	9b06      	ldr	r3, [sp, #24]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	dd08      	ble.n	801af3e <_strtod_l+0x77e>
 801af2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af2e:	4620      	mov	r0, r4
 801af30:	9905      	ldr	r1, [sp, #20]
 801af32:	f001 fef1 	bl	801cd18 <__pow5mult>
 801af36:	9005      	str	r0, [sp, #20]
 801af38:	2800      	cmp	r0, #0
 801af3a:	f43f ae8a 	beq.w	801ac52 <_strtod_l+0x492>
 801af3e:	2f00      	cmp	r7, #0
 801af40:	dd08      	ble.n	801af54 <_strtod_l+0x794>
 801af42:	463a      	mov	r2, r7
 801af44:	9905      	ldr	r1, [sp, #20]
 801af46:	4620      	mov	r0, r4
 801af48:	f001 ff40 	bl	801cdcc <__lshift>
 801af4c:	9005      	str	r0, [sp, #20]
 801af4e:	2800      	cmp	r0, #0
 801af50:	f43f ae7f 	beq.w	801ac52 <_strtod_l+0x492>
 801af54:	f1b9 0f00 	cmp.w	r9, #0
 801af58:	dd08      	ble.n	801af6c <_strtod_l+0x7ac>
 801af5a:	4631      	mov	r1, r6
 801af5c:	464a      	mov	r2, r9
 801af5e:	4620      	mov	r0, r4
 801af60:	f001 ff34 	bl	801cdcc <__lshift>
 801af64:	4606      	mov	r6, r0
 801af66:	2800      	cmp	r0, #0
 801af68:	f43f ae73 	beq.w	801ac52 <_strtod_l+0x492>
 801af6c:	9a05      	ldr	r2, [sp, #20]
 801af6e:	4620      	mov	r0, r4
 801af70:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af72:	f001 ffb7 	bl	801cee4 <__mdiff>
 801af76:	4605      	mov	r5, r0
 801af78:	2800      	cmp	r0, #0
 801af7a:	f43f ae6a 	beq.w	801ac52 <_strtod_l+0x492>
 801af7e:	68c3      	ldr	r3, [r0, #12]
 801af80:	4631      	mov	r1, r6
 801af82:	930b      	str	r3, [sp, #44]	; 0x2c
 801af84:	2300      	movs	r3, #0
 801af86:	60c3      	str	r3, [r0, #12]
 801af88:	f001 ff90 	bl	801ceac <__mcmp>
 801af8c:	2800      	cmp	r0, #0
 801af8e:	da5d      	bge.n	801b04c <_strtod_l+0x88c>
 801af90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af92:	ea53 030a 	orrs.w	r3, r3, sl
 801af96:	d17f      	bne.n	801b098 <_strtod_l+0x8d8>
 801af98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d17b      	bne.n	801b098 <_strtod_l+0x8d8>
 801afa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801afa4:	0d1b      	lsrs	r3, r3, #20
 801afa6:	051b      	lsls	r3, r3, #20
 801afa8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801afac:	d974      	bls.n	801b098 <_strtod_l+0x8d8>
 801afae:	696b      	ldr	r3, [r5, #20]
 801afb0:	b913      	cbnz	r3, 801afb8 <_strtod_l+0x7f8>
 801afb2:	692b      	ldr	r3, [r5, #16]
 801afb4:	2b01      	cmp	r3, #1
 801afb6:	dd6f      	ble.n	801b098 <_strtod_l+0x8d8>
 801afb8:	4629      	mov	r1, r5
 801afba:	2201      	movs	r2, #1
 801afbc:	4620      	mov	r0, r4
 801afbe:	f001 ff05 	bl	801cdcc <__lshift>
 801afc2:	4631      	mov	r1, r6
 801afc4:	4605      	mov	r5, r0
 801afc6:	f001 ff71 	bl	801ceac <__mcmp>
 801afca:	2800      	cmp	r0, #0
 801afcc:	dd64      	ble.n	801b098 <_strtod_l+0x8d8>
 801afce:	9904      	ldr	r1, [sp, #16]
 801afd0:	465b      	mov	r3, fp
 801afd2:	4a52      	ldr	r2, [pc, #328]	; (801b11c <_strtod_l+0x95c>)
 801afd4:	2900      	cmp	r1, #0
 801afd6:	d07f      	beq.n	801b0d8 <_strtod_l+0x918>
 801afd8:	ea02 010b 	and.w	r1, r2, fp
 801afdc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801afe0:	dc7a      	bgt.n	801b0d8 <_strtod_l+0x918>
 801afe2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801afe6:	f77f aeac 	ble.w	801ad42 <_strtod_l+0x582>
 801afea:	4b4d      	ldr	r3, [pc, #308]	; (801b120 <_strtod_l+0x960>)
 801afec:	4650      	mov	r0, sl
 801afee:	4659      	mov	r1, fp
 801aff0:	2200      	movs	r2, #0
 801aff2:	f7e5 fb05 	bl	8000600 <__aeabi_dmul>
 801aff6:	460b      	mov	r3, r1
 801aff8:	4682      	mov	sl, r0
 801affa:	468b      	mov	fp, r1
 801affc:	4303      	orrs	r3, r0
 801affe:	bf04      	itt	eq
 801b000:	2322      	moveq	r3, #34	; 0x22
 801b002:	6023      	streq	r3, [r4, #0]
 801b004:	e62f      	b.n	801ac66 <_strtod_l+0x4a6>
 801b006:	f04f 32ff 	mov.w	r2, #4294967295
 801b00a:	fa02 f303 	lsl.w	r3, r2, r3
 801b00e:	ea03 0a0a 	and.w	sl, r3, sl
 801b012:	e6e6      	b.n	801ade2 <_strtod_l+0x622>
 801b014:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b018:	910d      	str	r1, [sp, #52]	; 0x34
 801b01a:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b01e:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b022:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b026:	fa01 f308 	lsl.w	r3, r1, r8
 801b02a:	9308      	str	r3, [sp, #32]
 801b02c:	e749      	b.n	801aec2 <_strtod_l+0x702>
 801b02e:	2300      	movs	r3, #0
 801b030:	9308      	str	r3, [sp, #32]
 801b032:	2301      	movs	r3, #1
 801b034:	930d      	str	r3, [sp, #52]	; 0x34
 801b036:	e744      	b.n	801aec2 <_strtod_l+0x702>
 801b038:	4642      	mov	r2, r8
 801b03a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b03c:	4620      	mov	r0, r4
 801b03e:	f001 fec5 	bl	801cdcc <__lshift>
 801b042:	9018      	str	r0, [sp, #96]	; 0x60
 801b044:	2800      	cmp	r0, #0
 801b046:	f47f af6e 	bne.w	801af26 <_strtod_l+0x766>
 801b04a:	e602      	b.n	801ac52 <_strtod_l+0x492>
 801b04c:	465f      	mov	r7, fp
 801b04e:	d16f      	bne.n	801b130 <_strtod_l+0x970>
 801b050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b052:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b056:	b342      	cbz	r2, 801b0aa <_strtod_l+0x8ea>
 801b058:	4a32      	ldr	r2, [pc, #200]	; (801b124 <_strtod_l+0x964>)
 801b05a:	4293      	cmp	r3, r2
 801b05c:	d128      	bne.n	801b0b0 <_strtod_l+0x8f0>
 801b05e:	9b04      	ldr	r3, [sp, #16]
 801b060:	4651      	mov	r1, sl
 801b062:	b1eb      	cbz	r3, 801b0a0 <_strtod_l+0x8e0>
 801b064:	4b2d      	ldr	r3, [pc, #180]	; (801b11c <_strtod_l+0x95c>)
 801b066:	f04f 32ff 	mov.w	r2, #4294967295
 801b06a:	403b      	ands	r3, r7
 801b06c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b070:	d819      	bhi.n	801b0a6 <_strtod_l+0x8e6>
 801b072:	0d1b      	lsrs	r3, r3, #20
 801b074:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b078:	fa02 f303 	lsl.w	r3, r2, r3
 801b07c:	4299      	cmp	r1, r3
 801b07e:	d117      	bne.n	801b0b0 <_strtod_l+0x8f0>
 801b080:	4b29      	ldr	r3, [pc, #164]	; (801b128 <_strtod_l+0x968>)
 801b082:	429f      	cmp	r7, r3
 801b084:	d102      	bne.n	801b08c <_strtod_l+0x8cc>
 801b086:	3101      	adds	r1, #1
 801b088:	f43f ade3 	beq.w	801ac52 <_strtod_l+0x492>
 801b08c:	4b23      	ldr	r3, [pc, #140]	; (801b11c <_strtod_l+0x95c>)
 801b08e:	f04f 0a00 	mov.w	sl, #0
 801b092:	403b      	ands	r3, r7
 801b094:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b098:	9b04      	ldr	r3, [sp, #16]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d1a5      	bne.n	801afea <_strtod_l+0x82a>
 801b09e:	e5e2      	b.n	801ac66 <_strtod_l+0x4a6>
 801b0a0:	f04f 33ff 	mov.w	r3, #4294967295
 801b0a4:	e7ea      	b.n	801b07c <_strtod_l+0x8bc>
 801b0a6:	4613      	mov	r3, r2
 801b0a8:	e7e8      	b.n	801b07c <_strtod_l+0x8bc>
 801b0aa:	ea53 030a 	orrs.w	r3, r3, sl
 801b0ae:	d08e      	beq.n	801afce <_strtod_l+0x80e>
 801b0b0:	9b08      	ldr	r3, [sp, #32]
 801b0b2:	b1db      	cbz	r3, 801b0ec <_strtod_l+0x92c>
 801b0b4:	423b      	tst	r3, r7
 801b0b6:	d0ef      	beq.n	801b098 <_strtod_l+0x8d8>
 801b0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0ba:	4650      	mov	r0, sl
 801b0bc:	9a04      	ldr	r2, [sp, #16]
 801b0be:	4659      	mov	r1, fp
 801b0c0:	b1c3      	cbz	r3, 801b0f4 <_strtod_l+0x934>
 801b0c2:	f7ff fb61 	bl	801a788 <sulp>
 801b0c6:	4602      	mov	r2, r0
 801b0c8:	460b      	mov	r3, r1
 801b0ca:	ec51 0b18 	vmov	r0, r1, d8
 801b0ce:	f7e5 f8e1 	bl	8000294 <__adddf3>
 801b0d2:	4682      	mov	sl, r0
 801b0d4:	468b      	mov	fp, r1
 801b0d6:	e7df      	b.n	801b098 <_strtod_l+0x8d8>
 801b0d8:	4013      	ands	r3, r2
 801b0da:	f04f 3aff 	mov.w	sl, #4294967295
 801b0de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b0e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b0e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b0ea:	e7d5      	b.n	801b098 <_strtod_l+0x8d8>
 801b0ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0ee:	ea13 0f0a 	tst.w	r3, sl
 801b0f2:	e7e0      	b.n	801b0b6 <_strtod_l+0x8f6>
 801b0f4:	f7ff fb48 	bl	801a788 <sulp>
 801b0f8:	4602      	mov	r2, r0
 801b0fa:	460b      	mov	r3, r1
 801b0fc:	ec51 0b18 	vmov	r0, r1, d8
 801b100:	f7e5 f8c6 	bl	8000290 <__aeabi_dsub>
 801b104:	2200      	movs	r2, #0
 801b106:	2300      	movs	r3, #0
 801b108:	4682      	mov	sl, r0
 801b10a:	468b      	mov	fp, r1
 801b10c:	f7e5 fce0 	bl	8000ad0 <__aeabi_dcmpeq>
 801b110:	2800      	cmp	r0, #0
 801b112:	d0c1      	beq.n	801b098 <_strtod_l+0x8d8>
 801b114:	e615      	b.n	801ad42 <_strtod_l+0x582>
 801b116:	bf00      	nop
 801b118:	fffffc02 	.word	0xfffffc02
 801b11c:	7ff00000 	.word	0x7ff00000
 801b120:	39500000 	.word	0x39500000
 801b124:	000fffff 	.word	0x000fffff
 801b128:	7fefffff 	.word	0x7fefffff
 801b12c:	080738a0 	.word	0x080738a0
 801b130:	4631      	mov	r1, r6
 801b132:	4628      	mov	r0, r5
 801b134:	f002 f83c 	bl	801d1b0 <__ratio>
 801b138:	2200      	movs	r2, #0
 801b13a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b13e:	ee10 0a10 	vmov	r0, s0
 801b142:	ec59 8b10 	vmov	r8, r9, d0
 801b146:	4649      	mov	r1, r9
 801b148:	f7e5 fcd6 	bl	8000af8 <__aeabi_dcmple>
 801b14c:	2800      	cmp	r0, #0
 801b14e:	d07a      	beq.n	801b246 <_strtod_l+0xa86>
 801b150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b152:	2b00      	cmp	r3, #0
 801b154:	d04a      	beq.n	801b1ec <_strtod_l+0xa2c>
 801b156:	2200      	movs	r2, #0
 801b158:	4b93      	ldr	r3, [pc, #588]	; (801b3a8 <_strtod_l+0xbe8>)
 801b15a:	f04f 0800 	mov.w	r8, #0
 801b15e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 801b3a8 <_strtod_l+0xbe8>
 801b162:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b166:	4b91      	ldr	r3, [pc, #580]	; (801b3ac <_strtod_l+0xbec>)
 801b168:	403b      	ands	r3, r7
 801b16a:	930d      	str	r3, [sp, #52]	; 0x34
 801b16c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b16e:	4b90      	ldr	r3, [pc, #576]	; (801b3b0 <_strtod_l+0xbf0>)
 801b170:	429a      	cmp	r2, r3
 801b172:	f040 80b0 	bne.w	801b2d6 <_strtod_l+0xb16>
 801b176:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b17a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b17e:	ec4b ab10 	vmov	d0, sl, fp
 801b182:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b186:	f001 ff3d 	bl	801d004 <__ulp>
 801b18a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b18e:	ec53 2b10 	vmov	r2, r3, d0
 801b192:	f7e5 fa35 	bl	8000600 <__aeabi_dmul>
 801b196:	4652      	mov	r2, sl
 801b198:	465b      	mov	r3, fp
 801b19a:	f7e5 f87b 	bl	8000294 <__adddf3>
 801b19e:	460b      	mov	r3, r1
 801b1a0:	4982      	ldr	r1, [pc, #520]	; (801b3ac <_strtod_l+0xbec>)
 801b1a2:	4682      	mov	sl, r0
 801b1a4:	4a83      	ldr	r2, [pc, #524]	; (801b3b4 <_strtod_l+0xbf4>)
 801b1a6:	4019      	ands	r1, r3
 801b1a8:	4291      	cmp	r1, r2
 801b1aa:	d960      	bls.n	801b26e <_strtod_l+0xaae>
 801b1ac:	ee18 3a90 	vmov	r3, s17
 801b1b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b1b4:	4293      	cmp	r3, r2
 801b1b6:	d104      	bne.n	801b1c2 <_strtod_l+0xa02>
 801b1b8:	ee18 3a10 	vmov	r3, s16
 801b1bc:	3301      	adds	r3, #1
 801b1be:	f43f ad48 	beq.w	801ac52 <_strtod_l+0x492>
 801b1c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b3c0 <_strtod_l+0xc00>
 801b1c6:	f04f 3aff 	mov.w	sl, #4294967295
 801b1ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	f001 fbe1 	bl	801c994 <_Bfree>
 801b1d2:	9905      	ldr	r1, [sp, #20]
 801b1d4:	4620      	mov	r0, r4
 801b1d6:	f001 fbdd 	bl	801c994 <_Bfree>
 801b1da:	4631      	mov	r1, r6
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f001 fbd9 	bl	801c994 <_Bfree>
 801b1e2:	4629      	mov	r1, r5
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	f001 fbd5 	bl	801c994 <_Bfree>
 801b1ea:	e61c      	b.n	801ae26 <_strtod_l+0x666>
 801b1ec:	f1ba 0f00 	cmp.w	sl, #0
 801b1f0:	d11b      	bne.n	801b22a <_strtod_l+0xa6a>
 801b1f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b1f6:	b9f3      	cbnz	r3, 801b236 <_strtod_l+0xa76>
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	4b6b      	ldr	r3, [pc, #428]	; (801b3a8 <_strtod_l+0xbe8>)
 801b1fc:	4640      	mov	r0, r8
 801b1fe:	4649      	mov	r1, r9
 801b200:	f7e5 fc70 	bl	8000ae4 <__aeabi_dcmplt>
 801b204:	b9d0      	cbnz	r0, 801b23c <_strtod_l+0xa7c>
 801b206:	4640      	mov	r0, r8
 801b208:	4649      	mov	r1, r9
 801b20a:	2200      	movs	r2, #0
 801b20c:	4b6a      	ldr	r3, [pc, #424]	; (801b3b8 <_strtod_l+0xbf8>)
 801b20e:	f7e5 f9f7 	bl	8000600 <__aeabi_dmul>
 801b212:	4680      	mov	r8, r0
 801b214:	4689      	mov	r9, r1
 801b216:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b21a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b21e:	9315      	str	r3, [sp, #84]	; 0x54
 801b220:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b224:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b228:	e79d      	b.n	801b166 <_strtod_l+0x9a6>
 801b22a:	f1ba 0f01 	cmp.w	sl, #1
 801b22e:	d102      	bne.n	801b236 <_strtod_l+0xa76>
 801b230:	2f00      	cmp	r7, #0
 801b232:	f43f ad86 	beq.w	801ad42 <_strtod_l+0x582>
 801b236:	2200      	movs	r2, #0
 801b238:	4b60      	ldr	r3, [pc, #384]	; (801b3bc <_strtod_l+0xbfc>)
 801b23a:	e78e      	b.n	801b15a <_strtod_l+0x99a>
 801b23c:	f04f 0800 	mov.w	r8, #0
 801b240:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801b3b8 <_strtod_l+0xbf8>
 801b244:	e7e7      	b.n	801b216 <_strtod_l+0xa56>
 801b246:	4b5c      	ldr	r3, [pc, #368]	; (801b3b8 <_strtod_l+0xbf8>)
 801b248:	4640      	mov	r0, r8
 801b24a:	4649      	mov	r1, r9
 801b24c:	2200      	movs	r2, #0
 801b24e:	f7e5 f9d7 	bl	8000600 <__aeabi_dmul>
 801b252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b254:	4680      	mov	r8, r0
 801b256:	4689      	mov	r9, r1
 801b258:	b933      	cbnz	r3, 801b268 <_strtod_l+0xaa8>
 801b25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b25e:	900e      	str	r0, [sp, #56]	; 0x38
 801b260:	930f      	str	r3, [sp, #60]	; 0x3c
 801b262:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b266:	e7dd      	b.n	801b224 <_strtod_l+0xa64>
 801b268:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b26c:	e7f9      	b.n	801b262 <_strtod_l+0xaa2>
 801b26e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b272:	9b04      	ldr	r3, [sp, #16]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d1a8      	bne.n	801b1ca <_strtod_l+0xa0a>
 801b278:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b27c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b27e:	0d1b      	lsrs	r3, r3, #20
 801b280:	051b      	lsls	r3, r3, #20
 801b282:	429a      	cmp	r2, r3
 801b284:	d1a1      	bne.n	801b1ca <_strtod_l+0xa0a>
 801b286:	4640      	mov	r0, r8
 801b288:	4649      	mov	r1, r9
 801b28a:	f7e5 fd19 	bl	8000cc0 <__aeabi_d2lz>
 801b28e:	f7e5 f989 	bl	80005a4 <__aeabi_l2d>
 801b292:	4602      	mov	r2, r0
 801b294:	460b      	mov	r3, r1
 801b296:	4640      	mov	r0, r8
 801b298:	4649      	mov	r1, r9
 801b29a:	f7e4 fff9 	bl	8000290 <__aeabi_dsub>
 801b29e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b2a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b2a4:	4680      	mov	r8, r0
 801b2a6:	ea43 030a 	orr.w	r3, r3, sl
 801b2aa:	4689      	mov	r9, r1
 801b2ac:	4313      	orrs	r3, r2
 801b2ae:	d055      	beq.n	801b35c <_strtod_l+0xb9c>
 801b2b0:	a335      	add	r3, pc, #212	; (adr r3, 801b388 <_strtod_l+0xbc8>)
 801b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b6:	f7e5 fc15 	bl	8000ae4 <__aeabi_dcmplt>
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	f47f acd3 	bne.w	801ac66 <_strtod_l+0x4a6>
 801b2c0:	4640      	mov	r0, r8
 801b2c2:	4649      	mov	r1, r9
 801b2c4:	a332      	add	r3, pc, #200	; (adr r3, 801b390 <_strtod_l+0xbd0>)
 801b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ca:	f7e5 fc29 	bl	8000b20 <__aeabi_dcmpgt>
 801b2ce:	2800      	cmp	r0, #0
 801b2d0:	f43f af7b 	beq.w	801b1ca <_strtod_l+0xa0a>
 801b2d4:	e4c7      	b.n	801ac66 <_strtod_l+0x4a6>
 801b2d6:	9b04      	ldr	r3, [sp, #16]
 801b2d8:	b333      	cbz	r3, 801b328 <_strtod_l+0xb68>
 801b2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b2e0:	d822      	bhi.n	801b328 <_strtod_l+0xb68>
 801b2e2:	4640      	mov	r0, r8
 801b2e4:	4649      	mov	r1, r9
 801b2e6:	a32c      	add	r3, pc, #176	; (adr r3, 801b398 <_strtod_l+0xbd8>)
 801b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ec:	f7e5 fc04 	bl	8000af8 <__aeabi_dcmple>
 801b2f0:	b1a0      	cbz	r0, 801b31c <_strtod_l+0xb5c>
 801b2f2:	4649      	mov	r1, r9
 801b2f4:	4640      	mov	r0, r8
 801b2f6:	f7e5 fc5b 	bl	8000bb0 <__aeabi_d2uiz>
 801b2fa:	2801      	cmp	r0, #1
 801b2fc:	bf38      	it	cc
 801b2fe:	2001      	movcc	r0, #1
 801b300:	f7e5 f904 	bl	800050c <__aeabi_ui2d>
 801b304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b306:	4680      	mov	r8, r0
 801b308:	4689      	mov	r9, r1
 801b30a:	bb23      	cbnz	r3, 801b356 <_strtod_l+0xb96>
 801b30c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b310:	9010      	str	r0, [sp, #64]	; 0x40
 801b312:	9311      	str	r3, [sp, #68]	; 0x44
 801b314:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b318:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b31e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b320:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b324:	1a9b      	subs	r3, r3, r2
 801b326:	9309      	str	r3, [sp, #36]	; 0x24
 801b328:	eeb0 0a48 	vmov.f32	s0, s16
 801b32c:	eef0 0a68 	vmov.f32	s1, s17
 801b330:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b334:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b338:	f001 fe64 	bl	801d004 <__ulp>
 801b33c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b340:	ec53 2b10 	vmov	r2, r3, d0
 801b344:	f7e5 f95c 	bl	8000600 <__aeabi_dmul>
 801b348:	ec53 2b18 	vmov	r2, r3, d8
 801b34c:	f7e4 ffa2 	bl	8000294 <__adddf3>
 801b350:	4682      	mov	sl, r0
 801b352:	468b      	mov	fp, r1
 801b354:	e78d      	b.n	801b272 <_strtod_l+0xab2>
 801b356:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b35a:	e7db      	b.n	801b314 <_strtod_l+0xb54>
 801b35c:	a310      	add	r3, pc, #64	; (adr r3, 801b3a0 <_strtod_l+0xbe0>)
 801b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b362:	f7e5 fbbf 	bl	8000ae4 <__aeabi_dcmplt>
 801b366:	e7b2      	b.n	801b2ce <_strtod_l+0xb0e>
 801b368:	2300      	movs	r3, #0
 801b36a:	930a      	str	r3, [sp, #40]	; 0x28
 801b36c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b36e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b370:	6013      	str	r3, [r2, #0]
 801b372:	f7ff ba6d 	b.w	801a850 <_strtod_l+0x90>
 801b376:	2a65      	cmp	r2, #101	; 0x65
 801b378:	f43f ab61 	beq.w	801aa3e <_strtod_l+0x27e>
 801b37c:	2a45      	cmp	r2, #69	; 0x45
 801b37e:	f43f ab5e 	beq.w	801aa3e <_strtod_l+0x27e>
 801b382:	2301      	movs	r3, #1
 801b384:	f7ff bb96 	b.w	801aab4 <_strtod_l+0x2f4>
 801b388:	94a03595 	.word	0x94a03595
 801b38c:	3fdfffff 	.word	0x3fdfffff
 801b390:	35afe535 	.word	0x35afe535
 801b394:	3fe00000 	.word	0x3fe00000
 801b398:	ffc00000 	.word	0xffc00000
 801b39c:	41dfffff 	.word	0x41dfffff
 801b3a0:	94a03595 	.word	0x94a03595
 801b3a4:	3fcfffff 	.word	0x3fcfffff
 801b3a8:	3ff00000 	.word	0x3ff00000
 801b3ac:	7ff00000 	.word	0x7ff00000
 801b3b0:	7fe00000 	.word	0x7fe00000
 801b3b4:	7c9fffff 	.word	0x7c9fffff
 801b3b8:	3fe00000 	.word	0x3fe00000
 801b3bc:	bff00000 	.word	0xbff00000
 801b3c0:	7fefffff 	.word	0x7fefffff

0801b3c4 <_strtod_r>:
 801b3c4:	4b01      	ldr	r3, [pc, #4]	; (801b3cc <_strtod_r+0x8>)
 801b3c6:	f7ff b9fb 	b.w	801a7c0 <_strtod_l>
 801b3ca:	bf00      	nop
 801b3cc:	20000964 	.word	0x20000964

0801b3d0 <_strtol_l.constprop.0>:
 801b3d0:	2b01      	cmp	r3, #1
 801b3d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3d6:	d001      	beq.n	801b3dc <_strtol_l.constprop.0+0xc>
 801b3d8:	2b24      	cmp	r3, #36	; 0x24
 801b3da:	d906      	bls.n	801b3ea <_strtol_l.constprop.0+0x1a>
 801b3dc:	f7fe f9da 	bl	8019794 <__errno>
 801b3e0:	2316      	movs	r3, #22
 801b3e2:	6003      	str	r3, [r0, #0]
 801b3e4:	2000      	movs	r0, #0
 801b3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3ea:	460d      	mov	r5, r1
 801b3ec:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801b4d0 <_strtol_l.constprop.0+0x100>
 801b3f0:	462e      	mov	r6, r5
 801b3f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b3f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b3fa:	f017 0708 	ands.w	r7, r7, #8
 801b3fe:	d1f7      	bne.n	801b3f0 <_strtol_l.constprop.0+0x20>
 801b400:	2c2d      	cmp	r4, #45	; 0x2d
 801b402:	d132      	bne.n	801b46a <_strtol_l.constprop.0+0x9a>
 801b404:	782c      	ldrb	r4, [r5, #0]
 801b406:	2701      	movs	r7, #1
 801b408:	1cb5      	adds	r5, r6, #2
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d05b      	beq.n	801b4c6 <_strtol_l.constprop.0+0xf6>
 801b40e:	2b10      	cmp	r3, #16
 801b410:	d109      	bne.n	801b426 <_strtol_l.constprop.0+0x56>
 801b412:	2c30      	cmp	r4, #48	; 0x30
 801b414:	d107      	bne.n	801b426 <_strtol_l.constprop.0+0x56>
 801b416:	782c      	ldrb	r4, [r5, #0]
 801b418:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b41c:	2c58      	cmp	r4, #88	; 0x58
 801b41e:	d14d      	bne.n	801b4bc <_strtol_l.constprop.0+0xec>
 801b420:	786c      	ldrb	r4, [r5, #1]
 801b422:	2310      	movs	r3, #16
 801b424:	3502      	adds	r5, #2
 801b426:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b42a:	f04f 0c00 	mov.w	ip, #0
 801b42e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b432:	4666      	mov	r6, ip
 801b434:	fbb8 f9f3 	udiv	r9, r8, r3
 801b438:	fb03 8a19 	mls	sl, r3, r9, r8
 801b43c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b440:	f1be 0f09 	cmp.w	lr, #9
 801b444:	d816      	bhi.n	801b474 <_strtol_l.constprop.0+0xa4>
 801b446:	4674      	mov	r4, lr
 801b448:	42a3      	cmp	r3, r4
 801b44a:	dd24      	ble.n	801b496 <_strtol_l.constprop.0+0xc6>
 801b44c:	f1bc 0f00 	cmp.w	ip, #0
 801b450:	db1e      	blt.n	801b490 <_strtol_l.constprop.0+0xc0>
 801b452:	45b1      	cmp	r9, r6
 801b454:	d31c      	bcc.n	801b490 <_strtol_l.constprop.0+0xc0>
 801b456:	d101      	bne.n	801b45c <_strtol_l.constprop.0+0x8c>
 801b458:	45a2      	cmp	sl, r4
 801b45a:	db19      	blt.n	801b490 <_strtol_l.constprop.0+0xc0>
 801b45c:	fb06 4603 	mla	r6, r6, r3, r4
 801b460:	f04f 0c01 	mov.w	ip, #1
 801b464:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b468:	e7e8      	b.n	801b43c <_strtol_l.constprop.0+0x6c>
 801b46a:	2c2b      	cmp	r4, #43	; 0x2b
 801b46c:	bf04      	itt	eq
 801b46e:	782c      	ldrbeq	r4, [r5, #0]
 801b470:	1cb5      	addeq	r5, r6, #2
 801b472:	e7ca      	b.n	801b40a <_strtol_l.constprop.0+0x3a>
 801b474:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b478:	f1be 0f19 	cmp.w	lr, #25
 801b47c:	d801      	bhi.n	801b482 <_strtol_l.constprop.0+0xb2>
 801b47e:	3c37      	subs	r4, #55	; 0x37
 801b480:	e7e2      	b.n	801b448 <_strtol_l.constprop.0+0x78>
 801b482:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b486:	f1be 0f19 	cmp.w	lr, #25
 801b48a:	d804      	bhi.n	801b496 <_strtol_l.constprop.0+0xc6>
 801b48c:	3c57      	subs	r4, #87	; 0x57
 801b48e:	e7db      	b.n	801b448 <_strtol_l.constprop.0+0x78>
 801b490:	f04f 3cff 	mov.w	ip, #4294967295
 801b494:	e7e6      	b.n	801b464 <_strtol_l.constprop.0+0x94>
 801b496:	f1bc 0f00 	cmp.w	ip, #0
 801b49a:	da05      	bge.n	801b4a8 <_strtol_l.constprop.0+0xd8>
 801b49c:	2322      	movs	r3, #34	; 0x22
 801b49e:	4646      	mov	r6, r8
 801b4a0:	6003      	str	r3, [r0, #0]
 801b4a2:	b942      	cbnz	r2, 801b4b6 <_strtol_l.constprop.0+0xe6>
 801b4a4:	4630      	mov	r0, r6
 801b4a6:	e79e      	b.n	801b3e6 <_strtol_l.constprop.0+0x16>
 801b4a8:	b107      	cbz	r7, 801b4ac <_strtol_l.constprop.0+0xdc>
 801b4aa:	4276      	negs	r6, r6
 801b4ac:	2a00      	cmp	r2, #0
 801b4ae:	d0f9      	beq.n	801b4a4 <_strtol_l.constprop.0+0xd4>
 801b4b0:	f1bc 0f00 	cmp.w	ip, #0
 801b4b4:	d000      	beq.n	801b4b8 <_strtol_l.constprop.0+0xe8>
 801b4b6:	1e69      	subs	r1, r5, #1
 801b4b8:	6011      	str	r1, [r2, #0]
 801b4ba:	e7f3      	b.n	801b4a4 <_strtol_l.constprop.0+0xd4>
 801b4bc:	2430      	movs	r4, #48	; 0x30
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d1b1      	bne.n	801b426 <_strtol_l.constprop.0+0x56>
 801b4c2:	2308      	movs	r3, #8
 801b4c4:	e7af      	b.n	801b426 <_strtol_l.constprop.0+0x56>
 801b4c6:	2c30      	cmp	r4, #48	; 0x30
 801b4c8:	d0a5      	beq.n	801b416 <_strtol_l.constprop.0+0x46>
 801b4ca:	230a      	movs	r3, #10
 801b4cc:	e7ab      	b.n	801b426 <_strtol_l.constprop.0+0x56>
 801b4ce:	bf00      	nop
 801b4d0:	080738c9 	.word	0x080738c9

0801b4d4 <_strtol_r>:
 801b4d4:	f7ff bf7c 	b.w	801b3d0 <_strtol_l.constprop.0>

0801b4d8 <quorem>:
 801b4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4dc:	6903      	ldr	r3, [r0, #16]
 801b4de:	4607      	mov	r7, r0
 801b4e0:	690c      	ldr	r4, [r1, #16]
 801b4e2:	42a3      	cmp	r3, r4
 801b4e4:	f2c0 8087 	blt.w	801b5f6 <quorem+0x11e>
 801b4e8:	3c01      	subs	r4, #1
 801b4ea:	f100 0514 	add.w	r5, r0, #20
 801b4ee:	f101 0814 	add.w	r8, r1, #20
 801b4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b4f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b4fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b4fe:	9301      	str	r3, [sp, #4]
 801b500:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b508:	3301      	adds	r3, #1
 801b50a:	429a      	cmp	r2, r3
 801b50c:	fbb2 f6f3 	udiv	r6, r2, r3
 801b510:	d335      	bcc.n	801b57e <quorem+0xa6>
 801b512:	f04f 0e00 	mov.w	lr, #0
 801b516:	4640      	mov	r0, r8
 801b518:	46ac      	mov	ip, r5
 801b51a:	46f2      	mov	sl, lr
 801b51c:	f850 2b04 	ldr.w	r2, [r0], #4
 801b520:	b293      	uxth	r3, r2
 801b522:	4581      	cmp	r9, r0
 801b524:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801b528:	fb06 e303 	mla	r3, r6, r3, lr
 801b52c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b530:	b29b      	uxth	r3, r3
 801b532:	fb06 e202 	mla	r2, r6, r2, lr
 801b536:	ebaa 0303 	sub.w	r3, sl, r3
 801b53a:	f8dc a000 	ldr.w	sl, [ip]
 801b53e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b542:	fa1f fa8a 	uxth.w	sl, sl
 801b546:	b292      	uxth	r2, r2
 801b548:	4453      	add	r3, sl
 801b54a:	9300      	str	r3, [sp, #0]
 801b54c:	f8dc 3000 	ldr.w	r3, [ip]
 801b550:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 801b554:	9b00      	ldr	r3, [sp, #0]
 801b556:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b55a:	f8bd 3000 	ldrh.w	r3, [sp]
 801b55e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b562:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b566:	f84c 3b04 	str.w	r3, [ip], #4
 801b56a:	d2d7      	bcs.n	801b51c <quorem+0x44>
 801b56c:	f855 300b 	ldr.w	r3, [r5, fp]
 801b570:	b92b      	cbnz	r3, 801b57e <quorem+0xa6>
 801b572:	9b01      	ldr	r3, [sp, #4]
 801b574:	3b04      	subs	r3, #4
 801b576:	429d      	cmp	r5, r3
 801b578:	461a      	mov	r2, r3
 801b57a:	d330      	bcc.n	801b5de <quorem+0x106>
 801b57c:	613c      	str	r4, [r7, #16]
 801b57e:	4638      	mov	r0, r7
 801b580:	f001 fc94 	bl	801ceac <__mcmp>
 801b584:	2800      	cmp	r0, #0
 801b586:	db26      	blt.n	801b5d6 <quorem+0xfe>
 801b588:	3601      	adds	r6, #1
 801b58a:	4628      	mov	r0, r5
 801b58c:	f04f 0c00 	mov.w	ip, #0
 801b590:	f858 1b04 	ldr.w	r1, [r8], #4
 801b594:	f8d0 e000 	ldr.w	lr, [r0]
 801b598:	b28b      	uxth	r3, r1
 801b59a:	45c1      	cmp	r9, r8
 801b59c:	fa1f f28e 	uxth.w	r2, lr
 801b5a0:	ebac 0303 	sub.w	r3, ip, r3
 801b5a4:	4413      	add	r3, r2
 801b5a6:	ea4f 4211 	mov.w	r2, r1, lsr #16
 801b5aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b5ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5b2:	b29b      	uxth	r3, r3
 801b5b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b5b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5bc:	f840 3b04 	str.w	r3, [r0], #4
 801b5c0:	d2e6      	bcs.n	801b590 <quorem+0xb8>
 801b5c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5ca:	b922      	cbnz	r2, 801b5d6 <quorem+0xfe>
 801b5cc:	3b04      	subs	r3, #4
 801b5ce:	429d      	cmp	r5, r3
 801b5d0:	461a      	mov	r2, r3
 801b5d2:	d30a      	bcc.n	801b5ea <quorem+0x112>
 801b5d4:	613c      	str	r4, [r7, #16]
 801b5d6:	4630      	mov	r0, r6
 801b5d8:	b003      	add	sp, #12
 801b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5de:	6812      	ldr	r2, [r2, #0]
 801b5e0:	3b04      	subs	r3, #4
 801b5e2:	2a00      	cmp	r2, #0
 801b5e4:	d1ca      	bne.n	801b57c <quorem+0xa4>
 801b5e6:	3c01      	subs	r4, #1
 801b5e8:	e7c5      	b.n	801b576 <quorem+0x9e>
 801b5ea:	6812      	ldr	r2, [r2, #0]
 801b5ec:	3b04      	subs	r3, #4
 801b5ee:	2a00      	cmp	r2, #0
 801b5f0:	d1f0      	bne.n	801b5d4 <quorem+0xfc>
 801b5f2:	3c01      	subs	r4, #1
 801b5f4:	e7eb      	b.n	801b5ce <quorem+0xf6>
 801b5f6:	2000      	movs	r0, #0
 801b5f8:	e7ee      	b.n	801b5d8 <quorem+0x100>
 801b5fa:	0000      	movs	r0, r0
 801b5fc:	0000      	movs	r0, r0
	...

0801b600 <_dtoa_r>:
 801b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b604:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b606:	4604      	mov	r4, r0
 801b608:	ee10 aa10 	vmov	sl, s0
 801b60c:	ed2d 8b04 	vpush	{d8-d9}
 801b610:	b093      	sub	sp, #76	; 0x4c
 801b612:	ec57 6b10 	vmov	r6, r7, d0
 801b616:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b61a:	46bb      	mov	fp, r7
 801b61c:	9106      	str	r1, [sp, #24]
 801b61e:	9209      	str	r2, [sp, #36]	; 0x24
 801b620:	930c      	str	r3, [sp, #48]	; 0x30
 801b622:	b975      	cbnz	r5, 801b642 <_dtoa_r+0x42>
 801b624:	2010      	movs	r0, #16
 801b626:	f7fe f8df 	bl	80197e8 <malloc>
 801b62a:	4602      	mov	r2, r0
 801b62c:	6260      	str	r0, [r4, #36]	; 0x24
 801b62e:	b920      	cbnz	r0, 801b63a <_dtoa_r+0x3a>
 801b630:	4ba7      	ldr	r3, [pc, #668]	; (801b8d0 <_dtoa_r+0x2d0>)
 801b632:	21ea      	movs	r1, #234	; 0xea
 801b634:	48a7      	ldr	r0, [pc, #668]	; (801b8d4 <_dtoa_r+0x2d4>)
 801b636:	f001 ffe9 	bl	801d60c <__assert_func>
 801b63a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b63e:	6005      	str	r5, [r0, #0]
 801b640:	60c5      	str	r5, [r0, #12]
 801b642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b644:	6819      	ldr	r1, [r3, #0]
 801b646:	b151      	cbz	r1, 801b65e <_dtoa_r+0x5e>
 801b648:	685a      	ldr	r2, [r3, #4]
 801b64a:	2301      	movs	r3, #1
 801b64c:	4620      	mov	r0, r4
 801b64e:	4093      	lsls	r3, r2
 801b650:	604a      	str	r2, [r1, #4]
 801b652:	608b      	str	r3, [r1, #8]
 801b654:	f001 f99e 	bl	801c994 <_Bfree>
 801b658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b65a:	2200      	movs	r2, #0
 801b65c:	601a      	str	r2, [r3, #0]
 801b65e:	1e3b      	subs	r3, r7, #0
 801b660:	bfad      	iteet	ge
 801b662:	2300      	movge	r3, #0
 801b664:	2201      	movlt	r2, #1
 801b666:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b66a:	f8c8 3000 	strge.w	r3, [r8]
 801b66e:	4b9a      	ldr	r3, [pc, #616]	; (801b8d8 <_dtoa_r+0x2d8>)
 801b670:	bfb8      	it	lt
 801b672:	f8c8 2000 	strlt.w	r2, [r8]
 801b676:	ea33 030b 	bics.w	r3, r3, fp
 801b67a:	d11b      	bne.n	801b6b4 <_dtoa_r+0xb4>
 801b67c:	f242 730f 	movw	r3, #9999	; 0x270f
 801b680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b682:	6013      	str	r3, [r2, #0]
 801b684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b688:	4333      	orrs	r3, r6
 801b68a:	f000 858f 	beq.w	801c1ac <_dtoa_r+0xbac>
 801b68e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b690:	b963      	cbnz	r3, 801b6ac <_dtoa_r+0xac>
 801b692:	4b92      	ldr	r3, [pc, #584]	; (801b8dc <_dtoa_r+0x2dc>)
 801b694:	e022      	b.n	801b6dc <_dtoa_r+0xdc>
 801b696:	4b92      	ldr	r3, [pc, #584]	; (801b8e0 <_dtoa_r+0x2e0>)
 801b698:	9301      	str	r3, [sp, #4]
 801b69a:	3308      	adds	r3, #8
 801b69c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b69e:	6013      	str	r3, [r2, #0]
 801b6a0:	9801      	ldr	r0, [sp, #4]
 801b6a2:	b013      	add	sp, #76	; 0x4c
 801b6a4:	ecbd 8b04 	vpop	{d8-d9}
 801b6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ac:	4b8b      	ldr	r3, [pc, #556]	; (801b8dc <_dtoa_r+0x2dc>)
 801b6ae:	9301      	str	r3, [sp, #4]
 801b6b0:	3303      	adds	r3, #3
 801b6b2:	e7f3      	b.n	801b69c <_dtoa_r+0x9c>
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	4650      	mov	r0, sl
 801b6ba:	4659      	mov	r1, fp
 801b6bc:	f7e5 fa08 	bl	8000ad0 <__aeabi_dcmpeq>
 801b6c0:	4680      	mov	r8, r0
 801b6c2:	ec4b ab19 	vmov	d9, sl, fp
 801b6c6:	b158      	cbz	r0, 801b6e0 <_dtoa_r+0xe0>
 801b6c8:	2301      	movs	r3, #1
 801b6ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6cc:	6013      	str	r3, [r2, #0]
 801b6ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	f000 8568 	beq.w	801c1a6 <_dtoa_r+0xba6>
 801b6d6:	4883      	ldr	r0, [pc, #524]	; (801b8e4 <_dtoa_r+0x2e4>)
 801b6d8:	6018      	str	r0, [r3, #0]
 801b6da:	1e43      	subs	r3, r0, #1
 801b6dc:	9301      	str	r3, [sp, #4]
 801b6de:	e7df      	b.n	801b6a0 <_dtoa_r+0xa0>
 801b6e0:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b6e4:	aa10      	add	r2, sp, #64	; 0x40
 801b6e6:	a911      	add	r1, sp, #68	; 0x44
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	ec4b ab10 	vmov	d0, sl, fp
 801b6ee:	f001 fd03 	bl	801d0f8 <__d2b>
 801b6f2:	ee08 0a10 	vmov	s16, r0
 801b6f6:	2d00      	cmp	r5, #0
 801b6f8:	f000 8082 	beq.w	801b800 <_dtoa_r+0x200>
 801b6fc:	ee19 3a90 	vmov	r3, s19
 801b700:	4656      	mov	r6, sl
 801b702:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b706:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b70a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b70e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b712:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b716:	2200      	movs	r2, #0
 801b718:	4b73      	ldr	r3, [pc, #460]	; (801b8e8 <_dtoa_r+0x2e8>)
 801b71a:	4630      	mov	r0, r6
 801b71c:	4639      	mov	r1, r7
 801b71e:	f7e4 fdb7 	bl	8000290 <__aeabi_dsub>
 801b722:	a365      	add	r3, pc, #404	; (adr r3, 801b8b8 <_dtoa_r+0x2b8>)
 801b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b728:	f7e4 ff6a 	bl	8000600 <__aeabi_dmul>
 801b72c:	a364      	add	r3, pc, #400	; (adr r3, 801b8c0 <_dtoa_r+0x2c0>)
 801b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b732:	f7e4 fdaf 	bl	8000294 <__adddf3>
 801b736:	4606      	mov	r6, r0
 801b738:	460f      	mov	r7, r1
 801b73a:	4628      	mov	r0, r5
 801b73c:	f7e4 fef6 	bl	800052c <__aeabi_i2d>
 801b740:	a361      	add	r3, pc, #388	; (adr r3, 801b8c8 <_dtoa_r+0x2c8>)
 801b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b746:	f7e4 ff5b 	bl	8000600 <__aeabi_dmul>
 801b74a:	4602      	mov	r2, r0
 801b74c:	460b      	mov	r3, r1
 801b74e:	4630      	mov	r0, r6
 801b750:	4639      	mov	r1, r7
 801b752:	f7e4 fd9f 	bl	8000294 <__adddf3>
 801b756:	4606      	mov	r6, r0
 801b758:	460f      	mov	r7, r1
 801b75a:	f7e5 fa01 	bl	8000b60 <__aeabi_d2iz>
 801b75e:	2200      	movs	r2, #0
 801b760:	9000      	str	r0, [sp, #0]
 801b762:	2300      	movs	r3, #0
 801b764:	4630      	mov	r0, r6
 801b766:	4639      	mov	r1, r7
 801b768:	f7e5 f9bc 	bl	8000ae4 <__aeabi_dcmplt>
 801b76c:	b150      	cbz	r0, 801b784 <_dtoa_r+0x184>
 801b76e:	9800      	ldr	r0, [sp, #0]
 801b770:	f7e4 fedc 	bl	800052c <__aeabi_i2d>
 801b774:	4632      	mov	r2, r6
 801b776:	463b      	mov	r3, r7
 801b778:	f7e5 f9aa 	bl	8000ad0 <__aeabi_dcmpeq>
 801b77c:	b910      	cbnz	r0, 801b784 <_dtoa_r+0x184>
 801b77e:	9b00      	ldr	r3, [sp, #0]
 801b780:	3b01      	subs	r3, #1
 801b782:	9300      	str	r3, [sp, #0]
 801b784:	9b00      	ldr	r3, [sp, #0]
 801b786:	2b16      	cmp	r3, #22
 801b788:	d859      	bhi.n	801b83e <_dtoa_r+0x23e>
 801b78a:	9a00      	ldr	r2, [sp, #0]
 801b78c:	4b57      	ldr	r3, [pc, #348]	; (801b8ec <_dtoa_r+0x2ec>)
 801b78e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b792:	ec51 0b19 	vmov	r0, r1, d9
 801b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b79a:	f7e5 f9a3 	bl	8000ae4 <__aeabi_dcmplt>
 801b79e:	2800      	cmp	r0, #0
 801b7a0:	d04f      	beq.n	801b842 <_dtoa_r+0x242>
 801b7a2:	9b00      	ldr	r3, [sp, #0]
 801b7a4:	3b01      	subs	r3, #1
 801b7a6:	9300      	str	r3, [sp, #0]
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801b7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b7ae:	1b5d      	subs	r5, r3, r5
 801b7b0:	1e6b      	subs	r3, r5, #1
 801b7b2:	9305      	str	r3, [sp, #20]
 801b7b4:	bf49      	itett	mi
 801b7b6:	f1c5 0301 	rsbmi	r3, r5, #1
 801b7ba:	2300      	movpl	r3, #0
 801b7bc:	9304      	strmi	r3, [sp, #16]
 801b7be:	2300      	movmi	r3, #0
 801b7c0:	bf54      	ite	pl
 801b7c2:	9304      	strpl	r3, [sp, #16]
 801b7c4:	9305      	strmi	r3, [sp, #20]
 801b7c6:	9b00      	ldr	r3, [sp, #0]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	db3c      	blt.n	801b846 <_dtoa_r+0x246>
 801b7cc:	9b05      	ldr	r3, [sp, #20]
 801b7ce:	9a00      	ldr	r2, [sp, #0]
 801b7d0:	4413      	add	r3, r2
 801b7d2:	920a      	str	r2, [sp, #40]	; 0x28
 801b7d4:	9305      	str	r3, [sp, #20]
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	9307      	str	r3, [sp, #28]
 801b7da:	9b06      	ldr	r3, [sp, #24]
 801b7dc:	2b09      	cmp	r3, #9
 801b7de:	f200 8089 	bhi.w	801b8f4 <_dtoa_r+0x2f4>
 801b7e2:	2b05      	cmp	r3, #5
 801b7e4:	bfc5      	ittet	gt
 801b7e6:	3b04      	subgt	r3, #4
 801b7e8:	2500      	movgt	r5, #0
 801b7ea:	2501      	movle	r5, #1
 801b7ec:	9306      	strgt	r3, [sp, #24]
 801b7ee:	9b06      	ldr	r3, [sp, #24]
 801b7f0:	3b02      	subs	r3, #2
 801b7f2:	2b03      	cmp	r3, #3
 801b7f4:	f200 8089 	bhi.w	801b90a <_dtoa_r+0x30a>
 801b7f8:	e8df f003 	tbb	[pc, r3]
 801b7fc:	5a393b2e 	.word	0x5a393b2e
 801b800:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b804:	441d      	add	r5, r3
 801b806:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b80a:	2b20      	cmp	r3, #32
 801b80c:	bfc6      	itte	gt
 801b80e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b812:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b816:	f1c3 0320 	rsble	r3, r3, #32
 801b81a:	f105 35ff 	add.w	r5, r5, #4294967295
 801b81e:	bfc5      	ittet	gt
 801b820:	fa0b f303 	lslgt.w	r3, fp, r3
 801b824:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b828:	fa06 f003 	lslle.w	r0, r6, r3
 801b82c:	4318      	orrgt	r0, r3
 801b82e:	f7e4 fe6d 	bl	800050c <__aeabi_ui2d>
 801b832:	2301      	movs	r3, #1
 801b834:	4606      	mov	r6, r0
 801b836:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b83a:	930e      	str	r3, [sp, #56]	; 0x38
 801b83c:	e76b      	b.n	801b716 <_dtoa_r+0x116>
 801b83e:	2301      	movs	r3, #1
 801b840:	e7b3      	b.n	801b7aa <_dtoa_r+0x1aa>
 801b842:	900b      	str	r0, [sp, #44]	; 0x2c
 801b844:	e7b2      	b.n	801b7ac <_dtoa_r+0x1ac>
 801b846:	9b04      	ldr	r3, [sp, #16]
 801b848:	9a00      	ldr	r2, [sp, #0]
 801b84a:	1a9b      	subs	r3, r3, r2
 801b84c:	9304      	str	r3, [sp, #16]
 801b84e:	4253      	negs	r3, r2
 801b850:	9307      	str	r3, [sp, #28]
 801b852:	2300      	movs	r3, #0
 801b854:	930a      	str	r3, [sp, #40]	; 0x28
 801b856:	e7c0      	b.n	801b7da <_dtoa_r+0x1da>
 801b858:	2300      	movs	r3, #0
 801b85a:	9308      	str	r3, [sp, #32]
 801b85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b85e:	2b00      	cmp	r3, #0
 801b860:	dc56      	bgt.n	801b910 <_dtoa_r+0x310>
 801b862:	2301      	movs	r3, #1
 801b864:	461a      	mov	r2, r3
 801b866:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b86a:	9209      	str	r2, [sp, #36]	; 0x24
 801b86c:	e00c      	b.n	801b888 <_dtoa_r+0x288>
 801b86e:	2301      	movs	r3, #1
 801b870:	e7f3      	b.n	801b85a <_dtoa_r+0x25a>
 801b872:	2300      	movs	r3, #0
 801b874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b876:	9308      	str	r3, [sp, #32]
 801b878:	9b00      	ldr	r3, [sp, #0]
 801b87a:	4413      	add	r3, r2
 801b87c:	9302      	str	r3, [sp, #8]
 801b87e:	3301      	adds	r3, #1
 801b880:	2b01      	cmp	r3, #1
 801b882:	9303      	str	r3, [sp, #12]
 801b884:	bfb8      	it	lt
 801b886:	2301      	movlt	r3, #1
 801b888:	2200      	movs	r2, #0
 801b88a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b88c:	6042      	str	r2, [r0, #4]
 801b88e:	2204      	movs	r2, #4
 801b890:	f102 0614 	add.w	r6, r2, #20
 801b894:	6841      	ldr	r1, [r0, #4]
 801b896:	429e      	cmp	r6, r3
 801b898:	d93e      	bls.n	801b918 <_dtoa_r+0x318>
 801b89a:	4620      	mov	r0, r4
 801b89c:	f001 f83a 	bl	801c914 <_Balloc>
 801b8a0:	9001      	str	r0, [sp, #4]
 801b8a2:	2800      	cmp	r0, #0
 801b8a4:	d13c      	bne.n	801b920 <_dtoa_r+0x320>
 801b8a6:	4b12      	ldr	r3, [pc, #72]	; (801b8f0 <_dtoa_r+0x2f0>)
 801b8a8:	4602      	mov	r2, r0
 801b8aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b8ae:	e6c1      	b.n	801b634 <_dtoa_r+0x34>
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	e7df      	b.n	801b874 <_dtoa_r+0x274>
 801b8b4:	f3af 8000 	nop.w
 801b8b8:	636f4361 	.word	0x636f4361
 801b8bc:	3fd287a7 	.word	0x3fd287a7
 801b8c0:	8b60c8b3 	.word	0x8b60c8b3
 801b8c4:	3fc68a28 	.word	0x3fc68a28
 801b8c8:	509f79fb 	.word	0x509f79fb
 801b8cc:	3fd34413 	.word	0x3fd34413
 801b8d0:	080739d6 	.word	0x080739d6
 801b8d4:	080739ed 	.word	0x080739ed
 801b8d8:	7ff00000 	.word	0x7ff00000
 801b8dc:	080739d2 	.word	0x080739d2
 801b8e0:	080739c9 	.word	0x080739c9
 801b8e4:	08073849 	.word	0x08073849
 801b8e8:	3ff80000 	.word	0x3ff80000
 801b8ec:	08073b58 	.word	0x08073b58
 801b8f0:	08073a48 	.word	0x08073a48
 801b8f4:	2501      	movs	r5, #1
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	9508      	str	r5, [sp, #32]
 801b8fa:	9306      	str	r3, [sp, #24]
 801b8fc:	f04f 33ff 	mov.w	r3, #4294967295
 801b900:	2200      	movs	r2, #0
 801b902:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b906:	2312      	movs	r3, #18
 801b908:	e7af      	b.n	801b86a <_dtoa_r+0x26a>
 801b90a:	2301      	movs	r3, #1
 801b90c:	9308      	str	r3, [sp, #32]
 801b90e:	e7f5      	b.n	801b8fc <_dtoa_r+0x2fc>
 801b910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b912:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b916:	e7b7      	b.n	801b888 <_dtoa_r+0x288>
 801b918:	3101      	adds	r1, #1
 801b91a:	0052      	lsls	r2, r2, #1
 801b91c:	6041      	str	r1, [r0, #4]
 801b91e:	e7b7      	b.n	801b890 <_dtoa_r+0x290>
 801b920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b922:	9a01      	ldr	r2, [sp, #4]
 801b924:	601a      	str	r2, [r3, #0]
 801b926:	9b03      	ldr	r3, [sp, #12]
 801b928:	2b0e      	cmp	r3, #14
 801b92a:	f200 809d 	bhi.w	801ba68 <_dtoa_r+0x468>
 801b92e:	2d00      	cmp	r5, #0
 801b930:	f000 809a 	beq.w	801ba68 <_dtoa_r+0x468>
 801b934:	9b00      	ldr	r3, [sp, #0]
 801b936:	2b00      	cmp	r3, #0
 801b938:	dd32      	ble.n	801b9a0 <_dtoa_r+0x3a0>
 801b93a:	f003 030f 	and.w	r3, r3, #15
 801b93e:	4ab6      	ldr	r2, [pc, #728]	; (801bc18 <_dtoa_r+0x618>)
 801b940:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b944:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b948:	9b00      	ldr	r3, [sp, #0]
 801b94a:	05d8      	lsls	r0, r3, #23
 801b94c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b950:	d516      	bpl.n	801b980 <_dtoa_r+0x380>
 801b952:	4bb2      	ldr	r3, [pc, #712]	; (801bc1c <_dtoa_r+0x61c>)
 801b954:	f007 070f 	and.w	r7, r7, #15
 801b958:	2503      	movs	r5, #3
 801b95a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b95e:	ec51 0b19 	vmov	r0, r1, d9
 801b962:	f7e4 ff77 	bl	8000854 <__aeabi_ddiv>
 801b966:	4682      	mov	sl, r0
 801b968:	468b      	mov	fp, r1
 801b96a:	4eac      	ldr	r6, [pc, #688]	; (801bc1c <_dtoa_r+0x61c>)
 801b96c:	b957      	cbnz	r7, 801b984 <_dtoa_r+0x384>
 801b96e:	4642      	mov	r2, r8
 801b970:	464b      	mov	r3, r9
 801b972:	4650      	mov	r0, sl
 801b974:	4659      	mov	r1, fp
 801b976:	f7e4 ff6d 	bl	8000854 <__aeabi_ddiv>
 801b97a:	4682      	mov	sl, r0
 801b97c:	468b      	mov	fp, r1
 801b97e:	e028      	b.n	801b9d2 <_dtoa_r+0x3d2>
 801b980:	2502      	movs	r5, #2
 801b982:	e7f2      	b.n	801b96a <_dtoa_r+0x36a>
 801b984:	07f9      	lsls	r1, r7, #31
 801b986:	d508      	bpl.n	801b99a <_dtoa_r+0x39a>
 801b988:	4640      	mov	r0, r8
 801b98a:	4649      	mov	r1, r9
 801b98c:	3501      	adds	r5, #1
 801b98e:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b992:	f7e4 fe35 	bl	8000600 <__aeabi_dmul>
 801b996:	4680      	mov	r8, r0
 801b998:	4689      	mov	r9, r1
 801b99a:	107f      	asrs	r7, r7, #1
 801b99c:	3608      	adds	r6, #8
 801b99e:	e7e5      	b.n	801b96c <_dtoa_r+0x36c>
 801b9a0:	f000 809b 	beq.w	801bada <_dtoa_r+0x4da>
 801b9a4:	9b00      	ldr	r3, [sp, #0]
 801b9a6:	2502      	movs	r5, #2
 801b9a8:	4f9c      	ldr	r7, [pc, #624]	; (801bc1c <_dtoa_r+0x61c>)
 801b9aa:	425e      	negs	r6, r3
 801b9ac:	4b9a      	ldr	r3, [pc, #616]	; (801bc18 <_dtoa_r+0x618>)
 801b9ae:	f006 020f 	and.w	r2, r6, #15
 801b9b2:	1136      	asrs	r6, r6, #4
 801b9b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9b8:	ec51 0b19 	vmov	r0, r1, d9
 801b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c0:	f7e4 fe1e 	bl	8000600 <__aeabi_dmul>
 801b9c4:	2300      	movs	r3, #0
 801b9c6:	4682      	mov	sl, r0
 801b9c8:	468b      	mov	fp, r1
 801b9ca:	2e00      	cmp	r6, #0
 801b9cc:	d17a      	bne.n	801bac4 <_dtoa_r+0x4c4>
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d1d3      	bne.n	801b97a <_dtoa_r+0x37a>
 801b9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	f000 8082 	beq.w	801bade <_dtoa_r+0x4de>
 801b9da:	2200      	movs	r2, #0
 801b9dc:	4b90      	ldr	r3, [pc, #576]	; (801bc20 <_dtoa_r+0x620>)
 801b9de:	4650      	mov	r0, sl
 801b9e0:	4659      	mov	r1, fp
 801b9e2:	f7e5 f87f 	bl	8000ae4 <__aeabi_dcmplt>
 801b9e6:	2800      	cmp	r0, #0
 801b9e8:	d079      	beq.n	801bade <_dtoa_r+0x4de>
 801b9ea:	9b03      	ldr	r3, [sp, #12]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d076      	beq.n	801bade <_dtoa_r+0x4de>
 801b9f0:	9b02      	ldr	r3, [sp, #8]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	dd36      	ble.n	801ba64 <_dtoa_r+0x464>
 801b9f6:	9b00      	ldr	r3, [sp, #0]
 801b9f8:	4650      	mov	r0, sl
 801b9fa:	4659      	mov	r1, fp
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	1e5f      	subs	r7, r3, #1
 801ba00:	4b88      	ldr	r3, [pc, #544]	; (801bc24 <_dtoa_r+0x624>)
 801ba02:	f7e4 fdfd 	bl	8000600 <__aeabi_dmul>
 801ba06:	3501      	adds	r5, #1
 801ba08:	4682      	mov	sl, r0
 801ba0a:	468b      	mov	fp, r1
 801ba0c:	9e02      	ldr	r6, [sp, #8]
 801ba0e:	4628      	mov	r0, r5
 801ba10:	46d0      	mov	r8, sl
 801ba12:	f7e4 fd8b 	bl	800052c <__aeabi_i2d>
 801ba16:	4652      	mov	r2, sl
 801ba18:	465b      	mov	r3, fp
 801ba1a:	46d9      	mov	r9, fp
 801ba1c:	f7e4 fdf0 	bl	8000600 <__aeabi_dmul>
 801ba20:	2200      	movs	r2, #0
 801ba22:	4b81      	ldr	r3, [pc, #516]	; (801bc28 <_dtoa_r+0x628>)
 801ba24:	f7e4 fc36 	bl	8000294 <__adddf3>
 801ba28:	4682      	mov	sl, r0
 801ba2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801ba2e:	2e00      	cmp	r6, #0
 801ba30:	d158      	bne.n	801bae4 <_dtoa_r+0x4e4>
 801ba32:	2200      	movs	r2, #0
 801ba34:	4b7d      	ldr	r3, [pc, #500]	; (801bc2c <_dtoa_r+0x62c>)
 801ba36:	4640      	mov	r0, r8
 801ba38:	4649      	mov	r1, r9
 801ba3a:	f7e4 fc29 	bl	8000290 <__aeabi_dsub>
 801ba3e:	4652      	mov	r2, sl
 801ba40:	465b      	mov	r3, fp
 801ba42:	4680      	mov	r8, r0
 801ba44:	4689      	mov	r9, r1
 801ba46:	f7e5 f86b 	bl	8000b20 <__aeabi_dcmpgt>
 801ba4a:	2800      	cmp	r0, #0
 801ba4c:	f040 8293 	bne.w	801bf76 <_dtoa_r+0x976>
 801ba50:	4652      	mov	r2, sl
 801ba52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ba56:	4640      	mov	r0, r8
 801ba58:	4649      	mov	r1, r9
 801ba5a:	f7e5 f843 	bl	8000ae4 <__aeabi_dcmplt>
 801ba5e:	2800      	cmp	r0, #0
 801ba60:	f040 8287 	bne.w	801bf72 <_dtoa_r+0x972>
 801ba64:	ec5b ab19 	vmov	sl, fp, d9
 801ba68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	f2c0 8148 	blt.w	801bd00 <_dtoa_r+0x700>
 801ba70:	9a00      	ldr	r2, [sp, #0]
 801ba72:	2a0e      	cmp	r2, #14
 801ba74:	f300 8144 	bgt.w	801bd00 <_dtoa_r+0x700>
 801ba78:	4b67      	ldr	r3, [pc, #412]	; (801bc18 <_dtoa_r+0x618>)
 801ba7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ba82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	f280 80d5 	bge.w	801bc34 <_dtoa_r+0x634>
 801ba8a:	9b03      	ldr	r3, [sp, #12]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	f300 80d1 	bgt.w	801bc34 <_dtoa_r+0x634>
 801ba92:	f040 826d 	bne.w	801bf70 <_dtoa_r+0x970>
 801ba96:	2200      	movs	r2, #0
 801ba98:	4b64      	ldr	r3, [pc, #400]	; (801bc2c <_dtoa_r+0x62c>)
 801ba9a:	4640      	mov	r0, r8
 801ba9c:	4649      	mov	r1, r9
 801ba9e:	f7e4 fdaf 	bl	8000600 <__aeabi_dmul>
 801baa2:	4652      	mov	r2, sl
 801baa4:	465b      	mov	r3, fp
 801baa6:	f7e5 f831 	bl	8000b0c <__aeabi_dcmpge>
 801baaa:	9e03      	ldr	r6, [sp, #12]
 801baac:	4637      	mov	r7, r6
 801baae:	2800      	cmp	r0, #0
 801bab0:	f040 8243 	bne.w	801bf3a <_dtoa_r+0x93a>
 801bab4:	2331      	movs	r3, #49	; 0x31
 801bab6:	9d01      	ldr	r5, [sp, #4]
 801bab8:	f805 3b01 	strb.w	r3, [r5], #1
 801babc:	9b00      	ldr	r3, [sp, #0]
 801babe:	3301      	adds	r3, #1
 801bac0:	9300      	str	r3, [sp, #0]
 801bac2:	e23e      	b.n	801bf42 <_dtoa_r+0x942>
 801bac4:	07f2      	lsls	r2, r6, #31
 801bac6:	d505      	bpl.n	801bad4 <_dtoa_r+0x4d4>
 801bac8:	3501      	adds	r5, #1
 801baca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bace:	f7e4 fd97 	bl	8000600 <__aeabi_dmul>
 801bad2:	2301      	movs	r3, #1
 801bad4:	1076      	asrs	r6, r6, #1
 801bad6:	3708      	adds	r7, #8
 801bad8:	e777      	b.n	801b9ca <_dtoa_r+0x3ca>
 801bada:	2502      	movs	r5, #2
 801badc:	e779      	b.n	801b9d2 <_dtoa_r+0x3d2>
 801bade:	9f00      	ldr	r7, [sp, #0]
 801bae0:	9e03      	ldr	r6, [sp, #12]
 801bae2:	e794      	b.n	801ba0e <_dtoa_r+0x40e>
 801bae4:	9901      	ldr	r1, [sp, #4]
 801bae6:	4b4c      	ldr	r3, [pc, #304]	; (801bc18 <_dtoa_r+0x618>)
 801bae8:	4431      	add	r1, r6
 801baea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801baee:	910d      	str	r1, [sp, #52]	; 0x34
 801baf0:	9908      	ldr	r1, [sp, #32]
 801baf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801baf6:	2900      	cmp	r1, #0
 801baf8:	d043      	beq.n	801bb82 <_dtoa_r+0x582>
 801bafa:	2000      	movs	r0, #0
 801bafc:	494c      	ldr	r1, [pc, #304]	; (801bc30 <_dtoa_r+0x630>)
 801bafe:	f7e4 fea9 	bl	8000854 <__aeabi_ddiv>
 801bb02:	4652      	mov	r2, sl
 801bb04:	465b      	mov	r3, fp
 801bb06:	f7e4 fbc3 	bl	8000290 <__aeabi_dsub>
 801bb0a:	9d01      	ldr	r5, [sp, #4]
 801bb0c:	4682      	mov	sl, r0
 801bb0e:	468b      	mov	fp, r1
 801bb10:	4649      	mov	r1, r9
 801bb12:	4640      	mov	r0, r8
 801bb14:	f7e5 f824 	bl	8000b60 <__aeabi_d2iz>
 801bb18:	4606      	mov	r6, r0
 801bb1a:	f7e4 fd07 	bl	800052c <__aeabi_i2d>
 801bb1e:	4602      	mov	r2, r0
 801bb20:	3630      	adds	r6, #48	; 0x30
 801bb22:	460b      	mov	r3, r1
 801bb24:	4640      	mov	r0, r8
 801bb26:	4649      	mov	r1, r9
 801bb28:	f7e4 fbb2 	bl	8000290 <__aeabi_dsub>
 801bb2c:	4652      	mov	r2, sl
 801bb2e:	465b      	mov	r3, fp
 801bb30:	f805 6b01 	strb.w	r6, [r5], #1
 801bb34:	4680      	mov	r8, r0
 801bb36:	4689      	mov	r9, r1
 801bb38:	f7e4 ffd4 	bl	8000ae4 <__aeabi_dcmplt>
 801bb3c:	2800      	cmp	r0, #0
 801bb3e:	d163      	bne.n	801bc08 <_dtoa_r+0x608>
 801bb40:	4642      	mov	r2, r8
 801bb42:	464b      	mov	r3, r9
 801bb44:	2000      	movs	r0, #0
 801bb46:	4936      	ldr	r1, [pc, #216]	; (801bc20 <_dtoa_r+0x620>)
 801bb48:	f7e4 fba2 	bl	8000290 <__aeabi_dsub>
 801bb4c:	4652      	mov	r2, sl
 801bb4e:	465b      	mov	r3, fp
 801bb50:	f7e4 ffc8 	bl	8000ae4 <__aeabi_dcmplt>
 801bb54:	2800      	cmp	r0, #0
 801bb56:	f040 80b5 	bne.w	801bcc4 <_dtoa_r+0x6c4>
 801bb5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb5c:	429d      	cmp	r5, r3
 801bb5e:	d081      	beq.n	801ba64 <_dtoa_r+0x464>
 801bb60:	2200      	movs	r2, #0
 801bb62:	4b30      	ldr	r3, [pc, #192]	; (801bc24 <_dtoa_r+0x624>)
 801bb64:	4650      	mov	r0, sl
 801bb66:	4659      	mov	r1, fp
 801bb68:	f7e4 fd4a 	bl	8000600 <__aeabi_dmul>
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	4682      	mov	sl, r0
 801bb70:	468b      	mov	fp, r1
 801bb72:	4640      	mov	r0, r8
 801bb74:	4649      	mov	r1, r9
 801bb76:	4b2b      	ldr	r3, [pc, #172]	; (801bc24 <_dtoa_r+0x624>)
 801bb78:	f7e4 fd42 	bl	8000600 <__aeabi_dmul>
 801bb7c:	4680      	mov	r8, r0
 801bb7e:	4689      	mov	r9, r1
 801bb80:	e7c6      	b.n	801bb10 <_dtoa_r+0x510>
 801bb82:	4650      	mov	r0, sl
 801bb84:	4659      	mov	r1, fp
 801bb86:	f7e4 fd3b 	bl	8000600 <__aeabi_dmul>
 801bb8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb8c:	4682      	mov	sl, r0
 801bb8e:	468b      	mov	fp, r1
 801bb90:	9d01      	ldr	r5, [sp, #4]
 801bb92:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb94:	4649      	mov	r1, r9
 801bb96:	4640      	mov	r0, r8
 801bb98:	f7e4 ffe2 	bl	8000b60 <__aeabi_d2iz>
 801bb9c:	4606      	mov	r6, r0
 801bb9e:	f7e4 fcc5 	bl	800052c <__aeabi_i2d>
 801bba2:	4602      	mov	r2, r0
 801bba4:	460b      	mov	r3, r1
 801bba6:	4640      	mov	r0, r8
 801bba8:	4649      	mov	r1, r9
 801bbaa:	3630      	adds	r6, #48	; 0x30
 801bbac:	f7e4 fb70 	bl	8000290 <__aeabi_dsub>
 801bbb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbb2:	f805 6b01 	strb.w	r6, [r5], #1
 801bbb6:	4680      	mov	r8, r0
 801bbb8:	429d      	cmp	r5, r3
 801bbba:	4689      	mov	r9, r1
 801bbbc:	f04f 0200 	mov.w	r2, #0
 801bbc0:	d124      	bne.n	801bc0c <_dtoa_r+0x60c>
 801bbc2:	4b1b      	ldr	r3, [pc, #108]	; (801bc30 <_dtoa_r+0x630>)
 801bbc4:	4650      	mov	r0, sl
 801bbc6:	4659      	mov	r1, fp
 801bbc8:	f7e4 fb64 	bl	8000294 <__adddf3>
 801bbcc:	4602      	mov	r2, r0
 801bbce:	460b      	mov	r3, r1
 801bbd0:	4640      	mov	r0, r8
 801bbd2:	4649      	mov	r1, r9
 801bbd4:	f7e4 ffa4 	bl	8000b20 <__aeabi_dcmpgt>
 801bbd8:	2800      	cmp	r0, #0
 801bbda:	d173      	bne.n	801bcc4 <_dtoa_r+0x6c4>
 801bbdc:	4652      	mov	r2, sl
 801bbde:	465b      	mov	r3, fp
 801bbe0:	2000      	movs	r0, #0
 801bbe2:	4913      	ldr	r1, [pc, #76]	; (801bc30 <_dtoa_r+0x630>)
 801bbe4:	f7e4 fb54 	bl	8000290 <__aeabi_dsub>
 801bbe8:	4602      	mov	r2, r0
 801bbea:	460b      	mov	r3, r1
 801bbec:	4640      	mov	r0, r8
 801bbee:	4649      	mov	r1, r9
 801bbf0:	f7e4 ff78 	bl	8000ae4 <__aeabi_dcmplt>
 801bbf4:	2800      	cmp	r0, #0
 801bbf6:	f43f af35 	beq.w	801ba64 <_dtoa_r+0x464>
 801bbfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bbfc:	1e6b      	subs	r3, r5, #1
 801bbfe:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bc04:	2b30      	cmp	r3, #48	; 0x30
 801bc06:	d0f8      	beq.n	801bbfa <_dtoa_r+0x5fa>
 801bc08:	9700      	str	r7, [sp, #0]
 801bc0a:	e049      	b.n	801bca0 <_dtoa_r+0x6a0>
 801bc0c:	4b05      	ldr	r3, [pc, #20]	; (801bc24 <_dtoa_r+0x624>)
 801bc0e:	f7e4 fcf7 	bl	8000600 <__aeabi_dmul>
 801bc12:	4680      	mov	r8, r0
 801bc14:	4689      	mov	r9, r1
 801bc16:	e7bd      	b.n	801bb94 <_dtoa_r+0x594>
 801bc18:	08073b58 	.word	0x08073b58
 801bc1c:	08073b30 	.word	0x08073b30
 801bc20:	3ff00000 	.word	0x3ff00000
 801bc24:	40240000 	.word	0x40240000
 801bc28:	401c0000 	.word	0x401c0000
 801bc2c:	40140000 	.word	0x40140000
 801bc30:	3fe00000 	.word	0x3fe00000
 801bc34:	4656      	mov	r6, sl
 801bc36:	465f      	mov	r7, fp
 801bc38:	9d01      	ldr	r5, [sp, #4]
 801bc3a:	4642      	mov	r2, r8
 801bc3c:	464b      	mov	r3, r9
 801bc3e:	4630      	mov	r0, r6
 801bc40:	4639      	mov	r1, r7
 801bc42:	f7e4 fe07 	bl	8000854 <__aeabi_ddiv>
 801bc46:	f7e4 ff8b 	bl	8000b60 <__aeabi_d2iz>
 801bc4a:	4682      	mov	sl, r0
 801bc4c:	f7e4 fc6e 	bl	800052c <__aeabi_i2d>
 801bc50:	4642      	mov	r2, r8
 801bc52:	464b      	mov	r3, r9
 801bc54:	f7e4 fcd4 	bl	8000600 <__aeabi_dmul>
 801bc58:	4602      	mov	r2, r0
 801bc5a:	4630      	mov	r0, r6
 801bc5c:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bc60:	460b      	mov	r3, r1
 801bc62:	4639      	mov	r1, r7
 801bc64:	f7e4 fb14 	bl	8000290 <__aeabi_dsub>
 801bc68:	f805 6b01 	strb.w	r6, [r5], #1
 801bc6c:	9e01      	ldr	r6, [sp, #4]
 801bc6e:	4602      	mov	r2, r0
 801bc70:	9f03      	ldr	r7, [sp, #12]
 801bc72:	460b      	mov	r3, r1
 801bc74:	1bae      	subs	r6, r5, r6
 801bc76:	42b7      	cmp	r7, r6
 801bc78:	d135      	bne.n	801bce6 <_dtoa_r+0x6e6>
 801bc7a:	f7e4 fb0b 	bl	8000294 <__adddf3>
 801bc7e:	4642      	mov	r2, r8
 801bc80:	464b      	mov	r3, r9
 801bc82:	4606      	mov	r6, r0
 801bc84:	460f      	mov	r7, r1
 801bc86:	f7e4 ff4b 	bl	8000b20 <__aeabi_dcmpgt>
 801bc8a:	b9d0      	cbnz	r0, 801bcc2 <_dtoa_r+0x6c2>
 801bc8c:	4642      	mov	r2, r8
 801bc8e:	464b      	mov	r3, r9
 801bc90:	4630      	mov	r0, r6
 801bc92:	4639      	mov	r1, r7
 801bc94:	f7e4 ff1c 	bl	8000ad0 <__aeabi_dcmpeq>
 801bc98:	b110      	cbz	r0, 801bca0 <_dtoa_r+0x6a0>
 801bc9a:	f01a 0f01 	tst.w	sl, #1
 801bc9e:	d110      	bne.n	801bcc2 <_dtoa_r+0x6c2>
 801bca0:	4620      	mov	r0, r4
 801bca2:	ee18 1a10 	vmov	r1, s16
 801bca6:	f000 fe75 	bl	801c994 <_Bfree>
 801bcaa:	2300      	movs	r3, #0
 801bcac:	9800      	ldr	r0, [sp, #0]
 801bcae:	702b      	strb	r3, [r5, #0]
 801bcb0:	3001      	adds	r0, #1
 801bcb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcb4:	6018      	str	r0, [r3, #0]
 801bcb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	f43f acf1 	beq.w	801b6a0 <_dtoa_r+0xa0>
 801bcbe:	601d      	str	r5, [r3, #0]
 801bcc0:	e4ee      	b.n	801b6a0 <_dtoa_r+0xa0>
 801bcc2:	9f00      	ldr	r7, [sp, #0]
 801bcc4:	462b      	mov	r3, r5
 801bcc6:	461d      	mov	r5, r3
 801bcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bccc:	2a39      	cmp	r2, #57	; 0x39
 801bcce:	d106      	bne.n	801bcde <_dtoa_r+0x6de>
 801bcd0:	9a01      	ldr	r2, [sp, #4]
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d1f7      	bne.n	801bcc6 <_dtoa_r+0x6c6>
 801bcd6:	2230      	movs	r2, #48	; 0x30
 801bcd8:	9901      	ldr	r1, [sp, #4]
 801bcda:	3701      	adds	r7, #1
 801bcdc:	700a      	strb	r2, [r1, #0]
 801bcde:	781a      	ldrb	r2, [r3, #0]
 801bce0:	3201      	adds	r2, #1
 801bce2:	701a      	strb	r2, [r3, #0]
 801bce4:	e790      	b.n	801bc08 <_dtoa_r+0x608>
 801bce6:	2200      	movs	r2, #0
 801bce8:	4ba4      	ldr	r3, [pc, #656]	; (801bf7c <_dtoa_r+0x97c>)
 801bcea:	f7e4 fc89 	bl	8000600 <__aeabi_dmul>
 801bcee:	2200      	movs	r2, #0
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	4606      	mov	r6, r0
 801bcf4:	460f      	mov	r7, r1
 801bcf6:	f7e4 feeb 	bl	8000ad0 <__aeabi_dcmpeq>
 801bcfa:	2800      	cmp	r0, #0
 801bcfc:	d09d      	beq.n	801bc3a <_dtoa_r+0x63a>
 801bcfe:	e7cf      	b.n	801bca0 <_dtoa_r+0x6a0>
 801bd00:	9a08      	ldr	r2, [sp, #32]
 801bd02:	2a00      	cmp	r2, #0
 801bd04:	f000 80d5 	beq.w	801beb2 <_dtoa_r+0x8b2>
 801bd08:	9a06      	ldr	r2, [sp, #24]
 801bd0a:	2a01      	cmp	r2, #1
 801bd0c:	f300 80b9 	bgt.w	801be82 <_dtoa_r+0x882>
 801bd10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd12:	2a00      	cmp	r2, #0
 801bd14:	f000 80b1 	beq.w	801be7a <_dtoa_r+0x87a>
 801bd18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bd1c:	9e07      	ldr	r6, [sp, #28]
 801bd1e:	9d04      	ldr	r5, [sp, #16]
 801bd20:	9a04      	ldr	r2, [sp, #16]
 801bd22:	2101      	movs	r1, #1
 801bd24:	4620      	mov	r0, r4
 801bd26:	441a      	add	r2, r3
 801bd28:	9204      	str	r2, [sp, #16]
 801bd2a:	9a05      	ldr	r2, [sp, #20]
 801bd2c:	441a      	add	r2, r3
 801bd2e:	9205      	str	r2, [sp, #20]
 801bd30:	f000 ff34 	bl	801cb9c <__i2b>
 801bd34:	4607      	mov	r7, r0
 801bd36:	2d00      	cmp	r5, #0
 801bd38:	dd0c      	ble.n	801bd54 <_dtoa_r+0x754>
 801bd3a:	9b05      	ldr	r3, [sp, #20]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	dd09      	ble.n	801bd54 <_dtoa_r+0x754>
 801bd40:	42ab      	cmp	r3, r5
 801bd42:	9a04      	ldr	r2, [sp, #16]
 801bd44:	bfa8      	it	ge
 801bd46:	462b      	movge	r3, r5
 801bd48:	1ad2      	subs	r2, r2, r3
 801bd4a:	1aed      	subs	r5, r5, r3
 801bd4c:	9204      	str	r2, [sp, #16]
 801bd4e:	9a05      	ldr	r2, [sp, #20]
 801bd50:	1ad3      	subs	r3, r2, r3
 801bd52:	9305      	str	r3, [sp, #20]
 801bd54:	9b07      	ldr	r3, [sp, #28]
 801bd56:	b31b      	cbz	r3, 801bda0 <_dtoa_r+0x7a0>
 801bd58:	9b08      	ldr	r3, [sp, #32]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	f000 80ad 	beq.w	801beba <_dtoa_r+0x8ba>
 801bd60:	2e00      	cmp	r6, #0
 801bd62:	dd13      	ble.n	801bd8c <_dtoa_r+0x78c>
 801bd64:	4639      	mov	r1, r7
 801bd66:	4632      	mov	r2, r6
 801bd68:	4620      	mov	r0, r4
 801bd6a:	f000 ffd5 	bl	801cd18 <__pow5mult>
 801bd6e:	ee18 2a10 	vmov	r2, s16
 801bd72:	4601      	mov	r1, r0
 801bd74:	4607      	mov	r7, r0
 801bd76:	4620      	mov	r0, r4
 801bd78:	f000 ff26 	bl	801cbc8 <__multiply>
 801bd7c:	4680      	mov	r8, r0
 801bd7e:	ee18 1a10 	vmov	r1, s16
 801bd82:	4620      	mov	r0, r4
 801bd84:	ee08 8a10 	vmov	s16, r8
 801bd88:	f000 fe04 	bl	801c994 <_Bfree>
 801bd8c:	9b07      	ldr	r3, [sp, #28]
 801bd8e:	1b9a      	subs	r2, r3, r6
 801bd90:	d006      	beq.n	801bda0 <_dtoa_r+0x7a0>
 801bd92:	ee18 1a10 	vmov	r1, s16
 801bd96:	4620      	mov	r0, r4
 801bd98:	f000 ffbe 	bl	801cd18 <__pow5mult>
 801bd9c:	ee08 0a10 	vmov	s16, r0
 801bda0:	2101      	movs	r1, #1
 801bda2:	4620      	mov	r0, r4
 801bda4:	f000 fefa 	bl	801cb9c <__i2b>
 801bda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdaa:	4606      	mov	r6, r0
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	f340 8086 	ble.w	801bebe <_dtoa_r+0x8be>
 801bdb2:	461a      	mov	r2, r3
 801bdb4:	4601      	mov	r1, r0
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	f000 ffae 	bl	801cd18 <__pow5mult>
 801bdbc:	9b06      	ldr	r3, [sp, #24]
 801bdbe:	4606      	mov	r6, r0
 801bdc0:	2b01      	cmp	r3, #1
 801bdc2:	dd7f      	ble.n	801bec4 <_dtoa_r+0x8c4>
 801bdc4:	f04f 0800 	mov.w	r8, #0
 801bdc8:	6933      	ldr	r3, [r6, #16]
 801bdca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bdce:	6918      	ldr	r0, [r3, #16]
 801bdd0:	f000 fe94 	bl	801cafc <__hi0bits>
 801bdd4:	f1c0 0020 	rsb	r0, r0, #32
 801bdd8:	9b05      	ldr	r3, [sp, #20]
 801bdda:	4418      	add	r0, r3
 801bddc:	f010 001f 	ands.w	r0, r0, #31
 801bde0:	f000 8091 	beq.w	801bf06 <_dtoa_r+0x906>
 801bde4:	f1c0 0320 	rsb	r3, r0, #32
 801bde8:	2b04      	cmp	r3, #4
 801bdea:	f340 8089 	ble.w	801bf00 <_dtoa_r+0x900>
 801bdee:	f1c0 001c 	rsb	r0, r0, #28
 801bdf2:	9b04      	ldr	r3, [sp, #16]
 801bdf4:	4405      	add	r5, r0
 801bdf6:	4403      	add	r3, r0
 801bdf8:	9304      	str	r3, [sp, #16]
 801bdfa:	9b05      	ldr	r3, [sp, #20]
 801bdfc:	4403      	add	r3, r0
 801bdfe:	9305      	str	r3, [sp, #20]
 801be00:	9b04      	ldr	r3, [sp, #16]
 801be02:	2b00      	cmp	r3, #0
 801be04:	dd07      	ble.n	801be16 <_dtoa_r+0x816>
 801be06:	ee18 1a10 	vmov	r1, s16
 801be0a:	461a      	mov	r2, r3
 801be0c:	4620      	mov	r0, r4
 801be0e:	f000 ffdd 	bl	801cdcc <__lshift>
 801be12:	ee08 0a10 	vmov	s16, r0
 801be16:	9b05      	ldr	r3, [sp, #20]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	dd05      	ble.n	801be28 <_dtoa_r+0x828>
 801be1c:	4631      	mov	r1, r6
 801be1e:	461a      	mov	r2, r3
 801be20:	4620      	mov	r0, r4
 801be22:	f000 ffd3 	bl	801cdcc <__lshift>
 801be26:	4606      	mov	r6, r0
 801be28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d06d      	beq.n	801bf0a <_dtoa_r+0x90a>
 801be2e:	4631      	mov	r1, r6
 801be30:	ee18 0a10 	vmov	r0, s16
 801be34:	f001 f83a 	bl	801ceac <__mcmp>
 801be38:	2800      	cmp	r0, #0
 801be3a:	da66      	bge.n	801bf0a <_dtoa_r+0x90a>
 801be3c:	9b00      	ldr	r3, [sp, #0]
 801be3e:	ee18 1a10 	vmov	r1, s16
 801be42:	220a      	movs	r2, #10
 801be44:	4620      	mov	r0, r4
 801be46:	3b01      	subs	r3, #1
 801be48:	9300      	str	r3, [sp, #0]
 801be4a:	2300      	movs	r3, #0
 801be4c:	f000 fdc4 	bl	801c9d8 <__multadd>
 801be50:	9b08      	ldr	r3, [sp, #32]
 801be52:	ee08 0a10 	vmov	s16, r0
 801be56:	2b00      	cmp	r3, #0
 801be58:	f000 81af 	beq.w	801c1ba <_dtoa_r+0xbba>
 801be5c:	2300      	movs	r3, #0
 801be5e:	4639      	mov	r1, r7
 801be60:	220a      	movs	r2, #10
 801be62:	4620      	mov	r0, r4
 801be64:	f000 fdb8 	bl	801c9d8 <__multadd>
 801be68:	9b02      	ldr	r3, [sp, #8]
 801be6a:	4607      	mov	r7, r0
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	f300 808d 	bgt.w	801bf8c <_dtoa_r+0x98c>
 801be72:	9b06      	ldr	r3, [sp, #24]
 801be74:	2b02      	cmp	r3, #2
 801be76:	dc50      	bgt.n	801bf1a <_dtoa_r+0x91a>
 801be78:	e088      	b.n	801bf8c <_dtoa_r+0x98c>
 801be7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be7c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801be80:	e74c      	b.n	801bd1c <_dtoa_r+0x71c>
 801be82:	9b03      	ldr	r3, [sp, #12]
 801be84:	1e5e      	subs	r6, r3, #1
 801be86:	9b07      	ldr	r3, [sp, #28]
 801be88:	42b3      	cmp	r3, r6
 801be8a:	bfb7      	itett	lt
 801be8c:	9b07      	ldrlt	r3, [sp, #28]
 801be8e:	1b9e      	subge	r6, r3, r6
 801be90:	9607      	strlt	r6, [sp, #28]
 801be92:	1af2      	sublt	r2, r6, r3
 801be94:	bfbf      	itttt	lt
 801be96:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801be98:	2600      	movlt	r6, #0
 801be9a:	189b      	addlt	r3, r3, r2
 801be9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801be9e:	9b03      	ldr	r3, [sp, #12]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	bfb7      	itett	lt
 801bea4:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bea8:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801beac:	1a9d      	sublt	r5, r3, r2
 801beae:	2300      	movlt	r3, #0
 801beb0:	e736      	b.n	801bd20 <_dtoa_r+0x720>
 801beb2:	9e07      	ldr	r6, [sp, #28]
 801beb4:	9d04      	ldr	r5, [sp, #16]
 801beb6:	9f08      	ldr	r7, [sp, #32]
 801beb8:	e73d      	b.n	801bd36 <_dtoa_r+0x736>
 801beba:	9a07      	ldr	r2, [sp, #28]
 801bebc:	e769      	b.n	801bd92 <_dtoa_r+0x792>
 801bebe:	9b06      	ldr	r3, [sp, #24]
 801bec0:	2b01      	cmp	r3, #1
 801bec2:	dc18      	bgt.n	801bef6 <_dtoa_r+0x8f6>
 801bec4:	f1ba 0f00 	cmp.w	sl, #0
 801bec8:	d115      	bne.n	801bef6 <_dtoa_r+0x8f6>
 801beca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bece:	b993      	cbnz	r3, 801bef6 <_dtoa_r+0x8f6>
 801bed0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bed4:	0d1b      	lsrs	r3, r3, #20
 801bed6:	051b      	lsls	r3, r3, #20
 801bed8:	b183      	cbz	r3, 801befc <_dtoa_r+0x8fc>
 801beda:	9b04      	ldr	r3, [sp, #16]
 801bedc:	f04f 0801 	mov.w	r8, #1
 801bee0:	3301      	adds	r3, #1
 801bee2:	9304      	str	r3, [sp, #16]
 801bee4:	9b05      	ldr	r3, [sp, #20]
 801bee6:	3301      	adds	r3, #1
 801bee8:	9305      	str	r3, [sp, #20]
 801beea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801beec:	2b00      	cmp	r3, #0
 801beee:	f47f af6b 	bne.w	801bdc8 <_dtoa_r+0x7c8>
 801bef2:	2001      	movs	r0, #1
 801bef4:	e770      	b.n	801bdd8 <_dtoa_r+0x7d8>
 801bef6:	f04f 0800 	mov.w	r8, #0
 801befa:	e7f6      	b.n	801beea <_dtoa_r+0x8ea>
 801befc:	4698      	mov	r8, r3
 801befe:	e7f4      	b.n	801beea <_dtoa_r+0x8ea>
 801bf00:	f43f af7e 	beq.w	801be00 <_dtoa_r+0x800>
 801bf04:	4618      	mov	r0, r3
 801bf06:	301c      	adds	r0, #28
 801bf08:	e773      	b.n	801bdf2 <_dtoa_r+0x7f2>
 801bf0a:	9b03      	ldr	r3, [sp, #12]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	dc37      	bgt.n	801bf80 <_dtoa_r+0x980>
 801bf10:	9b06      	ldr	r3, [sp, #24]
 801bf12:	2b02      	cmp	r3, #2
 801bf14:	dd34      	ble.n	801bf80 <_dtoa_r+0x980>
 801bf16:	9b03      	ldr	r3, [sp, #12]
 801bf18:	9302      	str	r3, [sp, #8]
 801bf1a:	9b02      	ldr	r3, [sp, #8]
 801bf1c:	b96b      	cbnz	r3, 801bf3a <_dtoa_r+0x93a>
 801bf1e:	4631      	mov	r1, r6
 801bf20:	2205      	movs	r2, #5
 801bf22:	4620      	mov	r0, r4
 801bf24:	f000 fd58 	bl	801c9d8 <__multadd>
 801bf28:	4601      	mov	r1, r0
 801bf2a:	4606      	mov	r6, r0
 801bf2c:	ee18 0a10 	vmov	r0, s16
 801bf30:	f000 ffbc 	bl	801ceac <__mcmp>
 801bf34:	2800      	cmp	r0, #0
 801bf36:	f73f adbd 	bgt.w	801bab4 <_dtoa_r+0x4b4>
 801bf3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf3c:	9d01      	ldr	r5, [sp, #4]
 801bf3e:	43db      	mvns	r3, r3
 801bf40:	9300      	str	r3, [sp, #0]
 801bf42:	f04f 0800 	mov.w	r8, #0
 801bf46:	4631      	mov	r1, r6
 801bf48:	4620      	mov	r0, r4
 801bf4a:	f000 fd23 	bl	801c994 <_Bfree>
 801bf4e:	2f00      	cmp	r7, #0
 801bf50:	f43f aea6 	beq.w	801bca0 <_dtoa_r+0x6a0>
 801bf54:	f1b8 0f00 	cmp.w	r8, #0
 801bf58:	d005      	beq.n	801bf66 <_dtoa_r+0x966>
 801bf5a:	45b8      	cmp	r8, r7
 801bf5c:	d003      	beq.n	801bf66 <_dtoa_r+0x966>
 801bf5e:	4641      	mov	r1, r8
 801bf60:	4620      	mov	r0, r4
 801bf62:	f000 fd17 	bl	801c994 <_Bfree>
 801bf66:	4639      	mov	r1, r7
 801bf68:	4620      	mov	r0, r4
 801bf6a:	f000 fd13 	bl	801c994 <_Bfree>
 801bf6e:	e697      	b.n	801bca0 <_dtoa_r+0x6a0>
 801bf70:	2600      	movs	r6, #0
 801bf72:	4637      	mov	r7, r6
 801bf74:	e7e1      	b.n	801bf3a <_dtoa_r+0x93a>
 801bf76:	9700      	str	r7, [sp, #0]
 801bf78:	4637      	mov	r7, r6
 801bf7a:	e59b      	b.n	801bab4 <_dtoa_r+0x4b4>
 801bf7c:	40240000 	.word	0x40240000
 801bf80:	9b08      	ldr	r3, [sp, #32]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	f000 80ca 	beq.w	801c11c <_dtoa_r+0xb1c>
 801bf88:	9b03      	ldr	r3, [sp, #12]
 801bf8a:	9302      	str	r3, [sp, #8]
 801bf8c:	2d00      	cmp	r5, #0
 801bf8e:	dd05      	ble.n	801bf9c <_dtoa_r+0x99c>
 801bf90:	4639      	mov	r1, r7
 801bf92:	462a      	mov	r2, r5
 801bf94:	4620      	mov	r0, r4
 801bf96:	f000 ff19 	bl	801cdcc <__lshift>
 801bf9a:	4607      	mov	r7, r0
 801bf9c:	f1b8 0f00 	cmp.w	r8, #0
 801bfa0:	d05b      	beq.n	801c05a <_dtoa_r+0xa5a>
 801bfa2:	6879      	ldr	r1, [r7, #4]
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	f000 fcb5 	bl	801c914 <_Balloc>
 801bfaa:	4605      	mov	r5, r0
 801bfac:	b928      	cbnz	r0, 801bfba <_dtoa_r+0x9ba>
 801bfae:	4b87      	ldr	r3, [pc, #540]	; (801c1cc <_dtoa_r+0xbcc>)
 801bfb0:	4602      	mov	r2, r0
 801bfb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bfb6:	f7ff bb3d 	b.w	801b634 <_dtoa_r+0x34>
 801bfba:	693a      	ldr	r2, [r7, #16]
 801bfbc:	f107 010c 	add.w	r1, r7, #12
 801bfc0:	300c      	adds	r0, #12
 801bfc2:	3202      	adds	r2, #2
 801bfc4:	0092      	lsls	r2, r2, #2
 801bfc6:	f7fd fc1f 	bl	8019808 <memcpy>
 801bfca:	2201      	movs	r2, #1
 801bfcc:	4629      	mov	r1, r5
 801bfce:	4620      	mov	r0, r4
 801bfd0:	f000 fefc 	bl	801cdcc <__lshift>
 801bfd4:	9b01      	ldr	r3, [sp, #4]
 801bfd6:	46b8      	mov	r8, r7
 801bfd8:	4607      	mov	r7, r0
 801bfda:	f103 0901 	add.w	r9, r3, #1
 801bfde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bfe2:	4413      	add	r3, r2
 801bfe4:	9305      	str	r3, [sp, #20]
 801bfe6:	f00a 0301 	and.w	r3, sl, #1
 801bfea:	9304      	str	r3, [sp, #16]
 801bfec:	4631      	mov	r1, r6
 801bfee:	ee18 0a10 	vmov	r0, s16
 801bff2:	f7ff fa71 	bl	801b4d8 <quorem>
 801bff6:	4641      	mov	r1, r8
 801bff8:	9002      	str	r0, [sp, #8]
 801bffa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bffe:	ee18 0a10 	vmov	r0, s16
 801c002:	f109 3bff 	add.w	fp, r9, #4294967295
 801c006:	f000 ff51 	bl	801ceac <__mcmp>
 801c00a:	463a      	mov	r2, r7
 801c00c:	9003      	str	r0, [sp, #12]
 801c00e:	4631      	mov	r1, r6
 801c010:	4620      	mov	r0, r4
 801c012:	f000 ff67 	bl	801cee4 <__mdiff>
 801c016:	68c2      	ldr	r2, [r0, #12]
 801c018:	4605      	mov	r5, r0
 801c01a:	bb02      	cbnz	r2, 801c05e <_dtoa_r+0xa5e>
 801c01c:	4601      	mov	r1, r0
 801c01e:	ee18 0a10 	vmov	r0, s16
 801c022:	f000 ff43 	bl	801ceac <__mcmp>
 801c026:	4602      	mov	r2, r0
 801c028:	4629      	mov	r1, r5
 801c02a:	4620      	mov	r0, r4
 801c02c:	9207      	str	r2, [sp, #28]
 801c02e:	f000 fcb1 	bl	801c994 <_Bfree>
 801c032:	464d      	mov	r5, r9
 801c034:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c038:	ea43 0102 	orr.w	r1, r3, r2
 801c03c:	9b04      	ldr	r3, [sp, #16]
 801c03e:	430b      	orrs	r3, r1
 801c040:	d10f      	bne.n	801c062 <_dtoa_r+0xa62>
 801c042:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c046:	d02a      	beq.n	801c09e <_dtoa_r+0xa9e>
 801c048:	9b03      	ldr	r3, [sp, #12]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	dd02      	ble.n	801c054 <_dtoa_r+0xa54>
 801c04e:	9b02      	ldr	r3, [sp, #8]
 801c050:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c054:	f88b a000 	strb.w	sl, [fp]
 801c058:	e775      	b.n	801bf46 <_dtoa_r+0x946>
 801c05a:	4638      	mov	r0, r7
 801c05c:	e7ba      	b.n	801bfd4 <_dtoa_r+0x9d4>
 801c05e:	2201      	movs	r2, #1
 801c060:	e7e2      	b.n	801c028 <_dtoa_r+0xa28>
 801c062:	9b03      	ldr	r3, [sp, #12]
 801c064:	2b00      	cmp	r3, #0
 801c066:	db04      	blt.n	801c072 <_dtoa_r+0xa72>
 801c068:	9906      	ldr	r1, [sp, #24]
 801c06a:	430b      	orrs	r3, r1
 801c06c:	9904      	ldr	r1, [sp, #16]
 801c06e:	430b      	orrs	r3, r1
 801c070:	d122      	bne.n	801c0b8 <_dtoa_r+0xab8>
 801c072:	2a00      	cmp	r2, #0
 801c074:	ddee      	ble.n	801c054 <_dtoa_r+0xa54>
 801c076:	ee18 1a10 	vmov	r1, s16
 801c07a:	2201      	movs	r2, #1
 801c07c:	4620      	mov	r0, r4
 801c07e:	f000 fea5 	bl	801cdcc <__lshift>
 801c082:	4631      	mov	r1, r6
 801c084:	ee08 0a10 	vmov	s16, r0
 801c088:	f000 ff10 	bl	801ceac <__mcmp>
 801c08c:	2800      	cmp	r0, #0
 801c08e:	dc03      	bgt.n	801c098 <_dtoa_r+0xa98>
 801c090:	d1e0      	bne.n	801c054 <_dtoa_r+0xa54>
 801c092:	f01a 0f01 	tst.w	sl, #1
 801c096:	d0dd      	beq.n	801c054 <_dtoa_r+0xa54>
 801c098:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c09c:	d1d7      	bne.n	801c04e <_dtoa_r+0xa4e>
 801c09e:	2339      	movs	r3, #57	; 0x39
 801c0a0:	f88b 3000 	strb.w	r3, [fp]
 801c0a4:	462b      	mov	r3, r5
 801c0a6:	461d      	mov	r5, r3
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c0ae:	2a39      	cmp	r2, #57	; 0x39
 801c0b0:	d070      	beq.n	801c194 <_dtoa_r+0xb94>
 801c0b2:	3201      	adds	r2, #1
 801c0b4:	701a      	strb	r2, [r3, #0]
 801c0b6:	e746      	b.n	801bf46 <_dtoa_r+0x946>
 801c0b8:	2a00      	cmp	r2, #0
 801c0ba:	dd07      	ble.n	801c0cc <_dtoa_r+0xacc>
 801c0bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c0c0:	d0ed      	beq.n	801c09e <_dtoa_r+0xa9e>
 801c0c2:	f10a 0301 	add.w	r3, sl, #1
 801c0c6:	f88b 3000 	strb.w	r3, [fp]
 801c0ca:	e73c      	b.n	801bf46 <_dtoa_r+0x946>
 801c0cc:	9b05      	ldr	r3, [sp, #20]
 801c0ce:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c0d2:	4599      	cmp	r9, r3
 801c0d4:	d046      	beq.n	801c164 <_dtoa_r+0xb64>
 801c0d6:	ee18 1a10 	vmov	r1, s16
 801c0da:	2300      	movs	r3, #0
 801c0dc:	220a      	movs	r2, #10
 801c0de:	4620      	mov	r0, r4
 801c0e0:	f000 fc7a 	bl	801c9d8 <__multadd>
 801c0e4:	45b8      	cmp	r8, r7
 801c0e6:	ee08 0a10 	vmov	s16, r0
 801c0ea:	f04f 0300 	mov.w	r3, #0
 801c0ee:	f04f 020a 	mov.w	r2, #10
 801c0f2:	4641      	mov	r1, r8
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	d106      	bne.n	801c106 <_dtoa_r+0xb06>
 801c0f8:	f000 fc6e 	bl	801c9d8 <__multadd>
 801c0fc:	4680      	mov	r8, r0
 801c0fe:	4607      	mov	r7, r0
 801c100:	f109 0901 	add.w	r9, r9, #1
 801c104:	e772      	b.n	801bfec <_dtoa_r+0x9ec>
 801c106:	f000 fc67 	bl	801c9d8 <__multadd>
 801c10a:	4639      	mov	r1, r7
 801c10c:	4680      	mov	r8, r0
 801c10e:	2300      	movs	r3, #0
 801c110:	220a      	movs	r2, #10
 801c112:	4620      	mov	r0, r4
 801c114:	f000 fc60 	bl	801c9d8 <__multadd>
 801c118:	4607      	mov	r7, r0
 801c11a:	e7f1      	b.n	801c100 <_dtoa_r+0xb00>
 801c11c:	9b03      	ldr	r3, [sp, #12]
 801c11e:	9302      	str	r3, [sp, #8]
 801c120:	9d01      	ldr	r5, [sp, #4]
 801c122:	4631      	mov	r1, r6
 801c124:	ee18 0a10 	vmov	r0, s16
 801c128:	f7ff f9d6 	bl	801b4d8 <quorem>
 801c12c:	9b01      	ldr	r3, [sp, #4]
 801c12e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c132:	f805 ab01 	strb.w	sl, [r5], #1
 801c136:	1aea      	subs	r2, r5, r3
 801c138:	9b02      	ldr	r3, [sp, #8]
 801c13a:	4293      	cmp	r3, r2
 801c13c:	dd09      	ble.n	801c152 <_dtoa_r+0xb52>
 801c13e:	ee18 1a10 	vmov	r1, s16
 801c142:	2300      	movs	r3, #0
 801c144:	220a      	movs	r2, #10
 801c146:	4620      	mov	r0, r4
 801c148:	f000 fc46 	bl	801c9d8 <__multadd>
 801c14c:	ee08 0a10 	vmov	s16, r0
 801c150:	e7e7      	b.n	801c122 <_dtoa_r+0xb22>
 801c152:	9b02      	ldr	r3, [sp, #8]
 801c154:	f04f 0800 	mov.w	r8, #0
 801c158:	2b00      	cmp	r3, #0
 801c15a:	bfcc      	ite	gt
 801c15c:	461d      	movgt	r5, r3
 801c15e:	2501      	movle	r5, #1
 801c160:	9b01      	ldr	r3, [sp, #4]
 801c162:	441d      	add	r5, r3
 801c164:	ee18 1a10 	vmov	r1, s16
 801c168:	2201      	movs	r2, #1
 801c16a:	4620      	mov	r0, r4
 801c16c:	f000 fe2e 	bl	801cdcc <__lshift>
 801c170:	4631      	mov	r1, r6
 801c172:	ee08 0a10 	vmov	s16, r0
 801c176:	f000 fe99 	bl	801ceac <__mcmp>
 801c17a:	2800      	cmp	r0, #0
 801c17c:	dc92      	bgt.n	801c0a4 <_dtoa_r+0xaa4>
 801c17e:	d102      	bne.n	801c186 <_dtoa_r+0xb86>
 801c180:	f01a 0f01 	tst.w	sl, #1
 801c184:	d18e      	bne.n	801c0a4 <_dtoa_r+0xaa4>
 801c186:	462b      	mov	r3, r5
 801c188:	461d      	mov	r5, r3
 801c18a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c18e:	2a30      	cmp	r2, #48	; 0x30
 801c190:	d0fa      	beq.n	801c188 <_dtoa_r+0xb88>
 801c192:	e6d8      	b.n	801bf46 <_dtoa_r+0x946>
 801c194:	9a01      	ldr	r2, [sp, #4]
 801c196:	429a      	cmp	r2, r3
 801c198:	d185      	bne.n	801c0a6 <_dtoa_r+0xaa6>
 801c19a:	9b00      	ldr	r3, [sp, #0]
 801c19c:	3301      	adds	r3, #1
 801c19e:	9300      	str	r3, [sp, #0]
 801c1a0:	2331      	movs	r3, #49	; 0x31
 801c1a2:	7013      	strb	r3, [r2, #0]
 801c1a4:	e6cf      	b.n	801bf46 <_dtoa_r+0x946>
 801c1a6:	4b0a      	ldr	r3, [pc, #40]	; (801c1d0 <_dtoa_r+0xbd0>)
 801c1a8:	f7ff ba98 	b.w	801b6dc <_dtoa_r+0xdc>
 801c1ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	f47f aa71 	bne.w	801b696 <_dtoa_r+0x96>
 801c1b4:	4b07      	ldr	r3, [pc, #28]	; (801c1d4 <_dtoa_r+0xbd4>)
 801c1b6:	f7ff ba91 	b.w	801b6dc <_dtoa_r+0xdc>
 801c1ba:	9b02      	ldr	r3, [sp, #8]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	dcaf      	bgt.n	801c120 <_dtoa_r+0xb20>
 801c1c0:	9b06      	ldr	r3, [sp, #24]
 801c1c2:	2b02      	cmp	r3, #2
 801c1c4:	f73f aea9 	bgt.w	801bf1a <_dtoa_r+0x91a>
 801c1c8:	e7aa      	b.n	801c120 <_dtoa_r+0xb20>
 801c1ca:	bf00      	nop
 801c1cc:	08073a48 	.word	0x08073a48
 801c1d0:	08073848 	.word	0x08073848
 801c1d4:	080739c9 	.word	0x080739c9

0801c1d8 <rshift>:
 801c1d8:	6903      	ldr	r3, [r0, #16]
 801c1da:	114a      	asrs	r2, r1, #5
 801c1dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c1e4:	f100 0414 	add.w	r4, r0, #20
 801c1e8:	dd45      	ble.n	801c276 <rshift+0x9e>
 801c1ea:	f011 011f 	ands.w	r1, r1, #31
 801c1ee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c1f2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c1f6:	d10c      	bne.n	801c212 <rshift+0x3a>
 801c1f8:	f100 0710 	add.w	r7, r0, #16
 801c1fc:	4629      	mov	r1, r5
 801c1fe:	42b1      	cmp	r1, r6
 801c200:	d334      	bcc.n	801c26c <rshift+0x94>
 801c202:	1a9b      	subs	r3, r3, r2
 801c204:	1eea      	subs	r2, r5, #3
 801c206:	009b      	lsls	r3, r3, #2
 801c208:	4296      	cmp	r6, r2
 801c20a:	bf38      	it	cc
 801c20c:	2300      	movcc	r3, #0
 801c20e:	4423      	add	r3, r4
 801c210:	e015      	b.n	801c23e <rshift+0x66>
 801c212:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c216:	f1c1 0820 	rsb	r8, r1, #32
 801c21a:	f105 0e04 	add.w	lr, r5, #4
 801c21e:	46a1      	mov	r9, r4
 801c220:	40cf      	lsrs	r7, r1
 801c222:	4576      	cmp	r6, lr
 801c224:	46f4      	mov	ip, lr
 801c226:	d815      	bhi.n	801c254 <rshift+0x7c>
 801c228:	1a9a      	subs	r2, r3, r2
 801c22a:	3501      	adds	r5, #1
 801c22c:	0092      	lsls	r2, r2, #2
 801c22e:	3a04      	subs	r2, #4
 801c230:	42ae      	cmp	r6, r5
 801c232:	bf38      	it	cc
 801c234:	2200      	movcc	r2, #0
 801c236:	18a3      	adds	r3, r4, r2
 801c238:	50a7      	str	r7, [r4, r2]
 801c23a:	b107      	cbz	r7, 801c23e <rshift+0x66>
 801c23c:	3304      	adds	r3, #4
 801c23e:	1b1a      	subs	r2, r3, r4
 801c240:	42a3      	cmp	r3, r4
 801c242:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c246:	bf08      	it	eq
 801c248:	2300      	moveq	r3, #0
 801c24a:	6102      	str	r2, [r0, #16]
 801c24c:	bf08      	it	eq
 801c24e:	6143      	streq	r3, [r0, #20]
 801c250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c254:	f8dc c000 	ldr.w	ip, [ip]
 801c258:	fa0c fc08 	lsl.w	ip, ip, r8
 801c25c:	ea4c 0707 	orr.w	r7, ip, r7
 801c260:	f849 7b04 	str.w	r7, [r9], #4
 801c264:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c268:	40cf      	lsrs	r7, r1
 801c26a:	e7da      	b.n	801c222 <rshift+0x4a>
 801c26c:	f851 cb04 	ldr.w	ip, [r1], #4
 801c270:	f847 cf04 	str.w	ip, [r7, #4]!
 801c274:	e7c3      	b.n	801c1fe <rshift+0x26>
 801c276:	4623      	mov	r3, r4
 801c278:	e7e1      	b.n	801c23e <rshift+0x66>

0801c27a <__hexdig_fun>:
 801c27a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c27e:	2b09      	cmp	r3, #9
 801c280:	d802      	bhi.n	801c288 <__hexdig_fun+0xe>
 801c282:	3820      	subs	r0, #32
 801c284:	b2c0      	uxtb	r0, r0
 801c286:	4770      	bx	lr
 801c288:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c28c:	2b05      	cmp	r3, #5
 801c28e:	d801      	bhi.n	801c294 <__hexdig_fun+0x1a>
 801c290:	3847      	subs	r0, #71	; 0x47
 801c292:	e7f7      	b.n	801c284 <__hexdig_fun+0xa>
 801c294:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c298:	2b05      	cmp	r3, #5
 801c29a:	d801      	bhi.n	801c2a0 <__hexdig_fun+0x26>
 801c29c:	3827      	subs	r0, #39	; 0x27
 801c29e:	e7f1      	b.n	801c284 <__hexdig_fun+0xa>
 801c2a0:	2000      	movs	r0, #0
 801c2a2:	4770      	bx	lr

0801c2a4 <__gethex>:
 801c2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a8:	ed2d 8b02 	vpush	{d8}
 801c2ac:	b089      	sub	sp, #36	; 0x24
 801c2ae:	ee08 0a10 	vmov	s16, r0
 801c2b2:	468b      	mov	fp, r1
 801c2b4:	4690      	mov	r8, r2
 801c2b6:	9304      	str	r3, [sp, #16]
 801c2b8:	4bb2      	ldr	r3, [pc, #712]	; (801c584 <__gethex+0x2e0>)
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	4618      	mov	r0, r3
 801c2be:	9301      	str	r3, [sp, #4]
 801c2c0:	f7e3 ffda 	bl	8000278 <strlen>
 801c2c4:	9b01      	ldr	r3, [sp, #4]
 801c2c6:	f8db 2000 	ldr.w	r2, [fp]
 801c2ca:	4682      	mov	sl, r0
 801c2cc:	4403      	add	r3, r0
 801c2ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c2d2:	9305      	str	r3, [sp, #20]
 801c2d4:	1c93      	adds	r3, r2, #2
 801c2d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c2da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c2de:	32fe      	adds	r2, #254	; 0xfe
 801c2e0:	18d1      	adds	r1, r2, r3
 801c2e2:	461f      	mov	r7, r3
 801c2e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c2e8:	9100      	str	r1, [sp, #0]
 801c2ea:	2830      	cmp	r0, #48	; 0x30
 801c2ec:	d0f8      	beq.n	801c2e0 <__gethex+0x3c>
 801c2ee:	f7ff ffc4 	bl	801c27a <__hexdig_fun>
 801c2f2:	4604      	mov	r4, r0
 801c2f4:	2800      	cmp	r0, #0
 801c2f6:	d139      	bne.n	801c36c <__gethex+0xc8>
 801c2f8:	4652      	mov	r2, sl
 801c2fa:	9901      	ldr	r1, [sp, #4]
 801c2fc:	4638      	mov	r0, r7
 801c2fe:	f001 f963 	bl	801d5c8 <strncmp>
 801c302:	4605      	mov	r5, r0
 801c304:	2800      	cmp	r0, #0
 801c306:	d167      	bne.n	801c3d8 <__gethex+0x134>
 801c308:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c30c:	eb07 060a 	add.w	r6, r7, sl
 801c310:	f7ff ffb3 	bl	801c27a <__hexdig_fun>
 801c314:	2800      	cmp	r0, #0
 801c316:	d061      	beq.n	801c3dc <__gethex+0x138>
 801c318:	4633      	mov	r3, r6
 801c31a:	7818      	ldrb	r0, [r3, #0]
 801c31c:	461f      	mov	r7, r3
 801c31e:	3301      	adds	r3, #1
 801c320:	2830      	cmp	r0, #48	; 0x30
 801c322:	d0fa      	beq.n	801c31a <__gethex+0x76>
 801c324:	f7ff ffa9 	bl	801c27a <__hexdig_fun>
 801c328:	fab0 f480 	clz	r4, r0
 801c32c:	2301      	movs	r3, #1
 801c32e:	4635      	mov	r5, r6
 801c330:	0964      	lsrs	r4, r4, #5
 801c332:	9300      	str	r3, [sp, #0]
 801c334:	463a      	mov	r2, r7
 801c336:	4616      	mov	r6, r2
 801c338:	3201      	adds	r2, #1
 801c33a:	7830      	ldrb	r0, [r6, #0]
 801c33c:	f7ff ff9d 	bl	801c27a <__hexdig_fun>
 801c340:	2800      	cmp	r0, #0
 801c342:	d1f8      	bne.n	801c336 <__gethex+0x92>
 801c344:	4652      	mov	r2, sl
 801c346:	9901      	ldr	r1, [sp, #4]
 801c348:	4630      	mov	r0, r6
 801c34a:	f001 f93d 	bl	801d5c8 <strncmp>
 801c34e:	b980      	cbnz	r0, 801c372 <__gethex+0xce>
 801c350:	b94d      	cbnz	r5, 801c366 <__gethex+0xc2>
 801c352:	eb06 050a 	add.w	r5, r6, sl
 801c356:	462a      	mov	r2, r5
 801c358:	4616      	mov	r6, r2
 801c35a:	3201      	adds	r2, #1
 801c35c:	7830      	ldrb	r0, [r6, #0]
 801c35e:	f7ff ff8c 	bl	801c27a <__hexdig_fun>
 801c362:	2800      	cmp	r0, #0
 801c364:	d1f8      	bne.n	801c358 <__gethex+0xb4>
 801c366:	1bad      	subs	r5, r5, r6
 801c368:	00ad      	lsls	r5, r5, #2
 801c36a:	e004      	b.n	801c376 <__gethex+0xd2>
 801c36c:	2400      	movs	r4, #0
 801c36e:	4625      	mov	r5, r4
 801c370:	e7e0      	b.n	801c334 <__gethex+0x90>
 801c372:	2d00      	cmp	r5, #0
 801c374:	d1f7      	bne.n	801c366 <__gethex+0xc2>
 801c376:	7833      	ldrb	r3, [r6, #0]
 801c378:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c37c:	2b50      	cmp	r3, #80	; 0x50
 801c37e:	d13b      	bne.n	801c3f8 <__gethex+0x154>
 801c380:	7873      	ldrb	r3, [r6, #1]
 801c382:	2b2b      	cmp	r3, #43	; 0x2b
 801c384:	d02c      	beq.n	801c3e0 <__gethex+0x13c>
 801c386:	2b2d      	cmp	r3, #45	; 0x2d
 801c388:	d02e      	beq.n	801c3e8 <__gethex+0x144>
 801c38a:	1c71      	adds	r1, r6, #1
 801c38c:	f04f 0900 	mov.w	r9, #0
 801c390:	7808      	ldrb	r0, [r1, #0]
 801c392:	f7ff ff72 	bl	801c27a <__hexdig_fun>
 801c396:	1e43      	subs	r3, r0, #1
 801c398:	b2db      	uxtb	r3, r3
 801c39a:	2b18      	cmp	r3, #24
 801c39c:	d82c      	bhi.n	801c3f8 <__gethex+0x154>
 801c39e:	f1a0 0210 	sub.w	r2, r0, #16
 801c3a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c3a6:	f7ff ff68 	bl	801c27a <__hexdig_fun>
 801c3aa:	1e43      	subs	r3, r0, #1
 801c3ac:	b2db      	uxtb	r3, r3
 801c3ae:	2b18      	cmp	r3, #24
 801c3b0:	d91d      	bls.n	801c3ee <__gethex+0x14a>
 801c3b2:	f1b9 0f00 	cmp.w	r9, #0
 801c3b6:	d000      	beq.n	801c3ba <__gethex+0x116>
 801c3b8:	4252      	negs	r2, r2
 801c3ba:	4415      	add	r5, r2
 801c3bc:	f8cb 1000 	str.w	r1, [fp]
 801c3c0:	b1e4      	cbz	r4, 801c3fc <__gethex+0x158>
 801c3c2:	9b00      	ldr	r3, [sp, #0]
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	bf14      	ite	ne
 801c3c8:	2700      	movne	r7, #0
 801c3ca:	2706      	moveq	r7, #6
 801c3cc:	4638      	mov	r0, r7
 801c3ce:	b009      	add	sp, #36	; 0x24
 801c3d0:	ecbd 8b02 	vpop	{d8}
 801c3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3d8:	463e      	mov	r6, r7
 801c3da:	4625      	mov	r5, r4
 801c3dc:	2401      	movs	r4, #1
 801c3de:	e7ca      	b.n	801c376 <__gethex+0xd2>
 801c3e0:	f04f 0900 	mov.w	r9, #0
 801c3e4:	1cb1      	adds	r1, r6, #2
 801c3e6:	e7d3      	b.n	801c390 <__gethex+0xec>
 801c3e8:	f04f 0901 	mov.w	r9, #1
 801c3ec:	e7fa      	b.n	801c3e4 <__gethex+0x140>
 801c3ee:	230a      	movs	r3, #10
 801c3f0:	fb03 0202 	mla	r2, r3, r2, r0
 801c3f4:	3a10      	subs	r2, #16
 801c3f6:	e7d4      	b.n	801c3a2 <__gethex+0xfe>
 801c3f8:	4631      	mov	r1, r6
 801c3fa:	e7df      	b.n	801c3bc <__gethex+0x118>
 801c3fc:	1bf3      	subs	r3, r6, r7
 801c3fe:	4621      	mov	r1, r4
 801c400:	3b01      	subs	r3, #1
 801c402:	2b07      	cmp	r3, #7
 801c404:	dc0b      	bgt.n	801c41e <__gethex+0x17a>
 801c406:	ee18 0a10 	vmov	r0, s16
 801c40a:	f000 fa83 	bl	801c914 <_Balloc>
 801c40e:	4604      	mov	r4, r0
 801c410:	b940      	cbnz	r0, 801c424 <__gethex+0x180>
 801c412:	4b5d      	ldr	r3, [pc, #372]	; (801c588 <__gethex+0x2e4>)
 801c414:	4602      	mov	r2, r0
 801c416:	21de      	movs	r1, #222	; 0xde
 801c418:	485c      	ldr	r0, [pc, #368]	; (801c58c <__gethex+0x2e8>)
 801c41a:	f001 f8f7 	bl	801d60c <__assert_func>
 801c41e:	3101      	adds	r1, #1
 801c420:	105b      	asrs	r3, r3, #1
 801c422:	e7ee      	b.n	801c402 <__gethex+0x15e>
 801c424:	f100 0914 	add.w	r9, r0, #20
 801c428:	f04f 0b00 	mov.w	fp, #0
 801c42c:	f1ca 0301 	rsb	r3, sl, #1
 801c430:	f8cd 9008 	str.w	r9, [sp, #8]
 801c434:	f8cd b000 	str.w	fp, [sp]
 801c438:	9306      	str	r3, [sp, #24]
 801c43a:	42b7      	cmp	r7, r6
 801c43c:	d340      	bcc.n	801c4c0 <__gethex+0x21c>
 801c43e:	9802      	ldr	r0, [sp, #8]
 801c440:	9b00      	ldr	r3, [sp, #0]
 801c442:	f840 3b04 	str.w	r3, [r0], #4
 801c446:	eba0 0009 	sub.w	r0, r0, r9
 801c44a:	1080      	asrs	r0, r0, #2
 801c44c:	0146      	lsls	r6, r0, #5
 801c44e:	6120      	str	r0, [r4, #16]
 801c450:	4618      	mov	r0, r3
 801c452:	f000 fb53 	bl	801cafc <__hi0bits>
 801c456:	1a30      	subs	r0, r6, r0
 801c458:	f8d8 6000 	ldr.w	r6, [r8]
 801c45c:	42b0      	cmp	r0, r6
 801c45e:	dd63      	ble.n	801c528 <__gethex+0x284>
 801c460:	1b87      	subs	r7, r0, r6
 801c462:	4620      	mov	r0, r4
 801c464:	4639      	mov	r1, r7
 801c466:	f000 fef9 	bl	801d25c <__any_on>
 801c46a:	4682      	mov	sl, r0
 801c46c:	b1a8      	cbz	r0, 801c49a <__gethex+0x1f6>
 801c46e:	1e7b      	subs	r3, r7, #1
 801c470:	f04f 0a01 	mov.w	sl, #1
 801c474:	1159      	asrs	r1, r3, #5
 801c476:	f003 021f 	and.w	r2, r3, #31
 801c47a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c47e:	fa0a f202 	lsl.w	r2, sl, r2
 801c482:	420a      	tst	r2, r1
 801c484:	d009      	beq.n	801c49a <__gethex+0x1f6>
 801c486:	4553      	cmp	r3, sl
 801c488:	dd05      	ble.n	801c496 <__gethex+0x1f2>
 801c48a:	1eb9      	subs	r1, r7, #2
 801c48c:	4620      	mov	r0, r4
 801c48e:	f000 fee5 	bl	801d25c <__any_on>
 801c492:	2800      	cmp	r0, #0
 801c494:	d145      	bne.n	801c522 <__gethex+0x27e>
 801c496:	f04f 0a02 	mov.w	sl, #2
 801c49a:	443d      	add	r5, r7
 801c49c:	4639      	mov	r1, r7
 801c49e:	4620      	mov	r0, r4
 801c4a0:	f7ff fe9a 	bl	801c1d8 <rshift>
 801c4a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c4a8:	42ab      	cmp	r3, r5
 801c4aa:	da4c      	bge.n	801c546 <__gethex+0x2a2>
 801c4ac:	4621      	mov	r1, r4
 801c4ae:	ee18 0a10 	vmov	r0, s16
 801c4b2:	f000 fa6f 	bl	801c994 <_Bfree>
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4ba:	27a3      	movs	r7, #163	; 0xa3
 801c4bc:	6013      	str	r3, [r2, #0]
 801c4be:	e785      	b.n	801c3cc <__gethex+0x128>
 801c4c0:	1e73      	subs	r3, r6, #1
 801c4c2:	9a05      	ldr	r2, [sp, #20]
 801c4c4:	9303      	str	r3, [sp, #12]
 801c4c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c4ca:	4293      	cmp	r3, r2
 801c4cc:	d019      	beq.n	801c502 <__gethex+0x25e>
 801c4ce:	f1bb 0f20 	cmp.w	fp, #32
 801c4d2:	d107      	bne.n	801c4e4 <__gethex+0x240>
 801c4d4:	9b02      	ldr	r3, [sp, #8]
 801c4d6:	9a00      	ldr	r2, [sp, #0]
 801c4d8:	f843 2b04 	str.w	r2, [r3], #4
 801c4dc:	9302      	str	r3, [sp, #8]
 801c4de:	2300      	movs	r3, #0
 801c4e0:	469b      	mov	fp, r3
 801c4e2:	9300      	str	r3, [sp, #0]
 801c4e4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c4e8:	f7ff fec7 	bl	801c27a <__hexdig_fun>
 801c4ec:	f000 000f 	and.w	r0, r0, #15
 801c4f0:	9b00      	ldr	r3, [sp, #0]
 801c4f2:	fa00 f00b 	lsl.w	r0, r0, fp
 801c4f6:	f10b 0b04 	add.w	fp, fp, #4
 801c4fa:	4303      	orrs	r3, r0
 801c4fc:	9300      	str	r3, [sp, #0]
 801c4fe:	9b03      	ldr	r3, [sp, #12]
 801c500:	e00d      	b.n	801c51e <__gethex+0x27a>
 801c502:	9b03      	ldr	r3, [sp, #12]
 801c504:	9a06      	ldr	r2, [sp, #24]
 801c506:	4413      	add	r3, r2
 801c508:	42bb      	cmp	r3, r7
 801c50a:	d3e0      	bcc.n	801c4ce <__gethex+0x22a>
 801c50c:	4618      	mov	r0, r3
 801c50e:	4652      	mov	r2, sl
 801c510:	9901      	ldr	r1, [sp, #4]
 801c512:	9307      	str	r3, [sp, #28]
 801c514:	f001 f858 	bl	801d5c8 <strncmp>
 801c518:	9b07      	ldr	r3, [sp, #28]
 801c51a:	2800      	cmp	r0, #0
 801c51c:	d1d7      	bne.n	801c4ce <__gethex+0x22a>
 801c51e:	461e      	mov	r6, r3
 801c520:	e78b      	b.n	801c43a <__gethex+0x196>
 801c522:	f04f 0a03 	mov.w	sl, #3
 801c526:	e7b8      	b.n	801c49a <__gethex+0x1f6>
 801c528:	da0a      	bge.n	801c540 <__gethex+0x29c>
 801c52a:	1a37      	subs	r7, r6, r0
 801c52c:	4621      	mov	r1, r4
 801c52e:	ee18 0a10 	vmov	r0, s16
 801c532:	463a      	mov	r2, r7
 801c534:	1bed      	subs	r5, r5, r7
 801c536:	f000 fc49 	bl	801cdcc <__lshift>
 801c53a:	4604      	mov	r4, r0
 801c53c:	f100 0914 	add.w	r9, r0, #20
 801c540:	f04f 0a00 	mov.w	sl, #0
 801c544:	e7ae      	b.n	801c4a4 <__gethex+0x200>
 801c546:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c54a:	42a8      	cmp	r0, r5
 801c54c:	dd72      	ble.n	801c634 <__gethex+0x390>
 801c54e:	1b45      	subs	r5, r0, r5
 801c550:	42ae      	cmp	r6, r5
 801c552:	dc35      	bgt.n	801c5c0 <__gethex+0x31c>
 801c554:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c558:	2b02      	cmp	r3, #2
 801c55a:	d029      	beq.n	801c5b0 <__gethex+0x30c>
 801c55c:	2b03      	cmp	r3, #3
 801c55e:	d02b      	beq.n	801c5b8 <__gethex+0x314>
 801c560:	2b01      	cmp	r3, #1
 801c562:	d11b      	bne.n	801c59c <__gethex+0x2f8>
 801c564:	42ae      	cmp	r6, r5
 801c566:	d119      	bne.n	801c59c <__gethex+0x2f8>
 801c568:	2e01      	cmp	r6, #1
 801c56a:	d111      	bne.n	801c590 <__gethex+0x2ec>
 801c56c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c570:	2762      	movs	r7, #98	; 0x62
 801c572:	9a04      	ldr	r2, [sp, #16]
 801c574:	6013      	str	r3, [r2, #0]
 801c576:	2301      	movs	r3, #1
 801c578:	6123      	str	r3, [r4, #16]
 801c57a:	f8c9 3000 	str.w	r3, [r9]
 801c57e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c580:	601c      	str	r4, [r3, #0]
 801c582:	e723      	b.n	801c3cc <__gethex+0x128>
 801c584:	08073ac0 	.word	0x08073ac0
 801c588:	08073a48 	.word	0x08073a48
 801c58c:	08073a59 	.word	0x08073a59
 801c590:	1e71      	subs	r1, r6, #1
 801c592:	4620      	mov	r0, r4
 801c594:	f000 fe62 	bl	801d25c <__any_on>
 801c598:	2800      	cmp	r0, #0
 801c59a:	d1e7      	bne.n	801c56c <__gethex+0x2c8>
 801c59c:	4621      	mov	r1, r4
 801c59e:	ee18 0a10 	vmov	r0, s16
 801c5a2:	f000 f9f7 	bl	801c994 <_Bfree>
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c5aa:	2750      	movs	r7, #80	; 0x50
 801c5ac:	6013      	str	r3, [r2, #0]
 801c5ae:	e70d      	b.n	801c3cc <__gethex+0x128>
 801c5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d1f2      	bne.n	801c59c <__gethex+0x2f8>
 801c5b6:	e7d9      	b.n	801c56c <__gethex+0x2c8>
 801c5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d1d6      	bne.n	801c56c <__gethex+0x2c8>
 801c5be:	e7ed      	b.n	801c59c <__gethex+0x2f8>
 801c5c0:	1e6f      	subs	r7, r5, #1
 801c5c2:	f1ba 0f00 	cmp.w	sl, #0
 801c5c6:	d132      	bne.n	801c62e <__gethex+0x38a>
 801c5c8:	b127      	cbz	r7, 801c5d4 <__gethex+0x330>
 801c5ca:	4639      	mov	r1, r7
 801c5cc:	4620      	mov	r0, r4
 801c5ce:	f000 fe45 	bl	801d25c <__any_on>
 801c5d2:	4682      	mov	sl, r0
 801c5d4:	117b      	asrs	r3, r7, #5
 801c5d6:	2101      	movs	r1, #1
 801c5d8:	f007 071f 	and.w	r7, r7, #31
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c5e2:	1b76      	subs	r6, r6, r5
 801c5e4:	fa01 f707 	lsl.w	r7, r1, r7
 801c5e8:	4629      	mov	r1, r5
 801c5ea:	421f      	tst	r7, r3
 801c5ec:	f04f 0702 	mov.w	r7, #2
 801c5f0:	bf18      	it	ne
 801c5f2:	f04a 0a02 	orrne.w	sl, sl, #2
 801c5f6:	f7ff fdef 	bl	801c1d8 <rshift>
 801c5fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c5fe:	f1ba 0f00 	cmp.w	sl, #0
 801c602:	d048      	beq.n	801c696 <__gethex+0x3f2>
 801c604:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c608:	2b02      	cmp	r3, #2
 801c60a:	d015      	beq.n	801c638 <__gethex+0x394>
 801c60c:	2b03      	cmp	r3, #3
 801c60e:	d017      	beq.n	801c640 <__gethex+0x39c>
 801c610:	2b01      	cmp	r3, #1
 801c612:	d109      	bne.n	801c628 <__gethex+0x384>
 801c614:	f01a 0f02 	tst.w	sl, #2
 801c618:	d006      	beq.n	801c628 <__gethex+0x384>
 801c61a:	f8d9 0000 	ldr.w	r0, [r9]
 801c61e:	ea4a 0a00 	orr.w	sl, sl, r0
 801c622:	f01a 0f01 	tst.w	sl, #1
 801c626:	d10e      	bne.n	801c646 <__gethex+0x3a2>
 801c628:	f047 0710 	orr.w	r7, r7, #16
 801c62c:	e033      	b.n	801c696 <__gethex+0x3f2>
 801c62e:	f04f 0a01 	mov.w	sl, #1
 801c632:	e7cf      	b.n	801c5d4 <__gethex+0x330>
 801c634:	2701      	movs	r7, #1
 801c636:	e7e2      	b.n	801c5fe <__gethex+0x35a>
 801c638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c63a:	f1c3 0301 	rsb	r3, r3, #1
 801c63e:	9315      	str	r3, [sp, #84]	; 0x54
 801c640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c642:	2b00      	cmp	r3, #0
 801c644:	d0f0      	beq.n	801c628 <__gethex+0x384>
 801c646:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c64a:	f104 0314 	add.w	r3, r4, #20
 801c64e:	f04f 0c00 	mov.w	ip, #0
 801c652:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c656:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c65a:	4618      	mov	r0, r3
 801c65c:	f853 2b04 	ldr.w	r2, [r3], #4
 801c660:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c664:	d01c      	beq.n	801c6a0 <__gethex+0x3fc>
 801c666:	3201      	adds	r2, #1
 801c668:	6002      	str	r2, [r0, #0]
 801c66a:	2f02      	cmp	r7, #2
 801c66c:	f104 0314 	add.w	r3, r4, #20
 801c670:	d13f      	bne.n	801c6f2 <__gethex+0x44e>
 801c672:	f8d8 2000 	ldr.w	r2, [r8]
 801c676:	3a01      	subs	r2, #1
 801c678:	42b2      	cmp	r2, r6
 801c67a:	d10a      	bne.n	801c692 <__gethex+0x3ee>
 801c67c:	1171      	asrs	r1, r6, #5
 801c67e:	2201      	movs	r2, #1
 801c680:	f006 061f 	and.w	r6, r6, #31
 801c684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c688:	fa02 f606 	lsl.w	r6, r2, r6
 801c68c:	421e      	tst	r6, r3
 801c68e:	bf18      	it	ne
 801c690:	4617      	movne	r7, r2
 801c692:	f047 0720 	orr.w	r7, r7, #32
 801c696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c698:	601c      	str	r4, [r3, #0]
 801c69a:	9b04      	ldr	r3, [sp, #16]
 801c69c:	601d      	str	r5, [r3, #0]
 801c69e:	e695      	b.n	801c3cc <__gethex+0x128>
 801c6a0:	4299      	cmp	r1, r3
 801c6a2:	f843 cc04 	str.w	ip, [r3, #-4]
 801c6a6:	d8d8      	bhi.n	801c65a <__gethex+0x3b6>
 801c6a8:	68a3      	ldr	r3, [r4, #8]
 801c6aa:	459b      	cmp	fp, r3
 801c6ac:	db19      	blt.n	801c6e2 <__gethex+0x43e>
 801c6ae:	6861      	ldr	r1, [r4, #4]
 801c6b0:	ee18 0a10 	vmov	r0, s16
 801c6b4:	3101      	adds	r1, #1
 801c6b6:	f000 f92d 	bl	801c914 <_Balloc>
 801c6ba:	4681      	mov	r9, r0
 801c6bc:	b918      	cbnz	r0, 801c6c6 <__gethex+0x422>
 801c6be:	4b1b      	ldr	r3, [pc, #108]	; (801c72c <__gethex+0x488>)
 801c6c0:	4602      	mov	r2, r0
 801c6c2:	2184      	movs	r1, #132	; 0x84
 801c6c4:	e6a8      	b.n	801c418 <__gethex+0x174>
 801c6c6:	6922      	ldr	r2, [r4, #16]
 801c6c8:	f104 010c 	add.w	r1, r4, #12
 801c6cc:	300c      	adds	r0, #12
 801c6ce:	3202      	adds	r2, #2
 801c6d0:	0092      	lsls	r2, r2, #2
 801c6d2:	f7fd f899 	bl	8019808 <memcpy>
 801c6d6:	4621      	mov	r1, r4
 801c6d8:	464c      	mov	r4, r9
 801c6da:	ee18 0a10 	vmov	r0, s16
 801c6de:	f000 f959 	bl	801c994 <_Bfree>
 801c6e2:	6923      	ldr	r3, [r4, #16]
 801c6e4:	1c5a      	adds	r2, r3, #1
 801c6e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c6ea:	6122      	str	r2, [r4, #16]
 801c6ec:	2201      	movs	r2, #1
 801c6ee:	615a      	str	r2, [r3, #20]
 801c6f0:	e7bb      	b.n	801c66a <__gethex+0x3c6>
 801c6f2:	6922      	ldr	r2, [r4, #16]
 801c6f4:	455a      	cmp	r2, fp
 801c6f6:	dd0b      	ble.n	801c710 <__gethex+0x46c>
 801c6f8:	2101      	movs	r1, #1
 801c6fa:	4620      	mov	r0, r4
 801c6fc:	f7ff fd6c 	bl	801c1d8 <rshift>
 801c700:	3501      	adds	r5, #1
 801c702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c706:	42ab      	cmp	r3, r5
 801c708:	f6ff aed0 	blt.w	801c4ac <__gethex+0x208>
 801c70c:	2701      	movs	r7, #1
 801c70e:	e7c0      	b.n	801c692 <__gethex+0x3ee>
 801c710:	f016 061f 	ands.w	r6, r6, #31
 801c714:	d0fa      	beq.n	801c70c <__gethex+0x468>
 801c716:	4453      	add	r3, sl
 801c718:	f1c6 0620 	rsb	r6, r6, #32
 801c71c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c720:	f000 f9ec 	bl	801cafc <__hi0bits>
 801c724:	42b0      	cmp	r0, r6
 801c726:	dbe7      	blt.n	801c6f8 <__gethex+0x454>
 801c728:	e7f0      	b.n	801c70c <__gethex+0x468>
 801c72a:	bf00      	nop
 801c72c:	08073a48 	.word	0x08073a48

0801c730 <L_shift>:
 801c730:	f1c2 0208 	rsb	r2, r2, #8
 801c734:	0092      	lsls	r2, r2, #2
 801c736:	b570      	push	{r4, r5, r6, lr}
 801c738:	f1c2 0620 	rsb	r6, r2, #32
 801c73c:	6843      	ldr	r3, [r0, #4]
 801c73e:	6804      	ldr	r4, [r0, #0]
 801c740:	fa03 f506 	lsl.w	r5, r3, r6
 801c744:	40d3      	lsrs	r3, r2
 801c746:	432c      	orrs	r4, r5
 801c748:	6004      	str	r4, [r0, #0]
 801c74a:	f840 3f04 	str.w	r3, [r0, #4]!
 801c74e:	4288      	cmp	r0, r1
 801c750:	d3f4      	bcc.n	801c73c <L_shift+0xc>
 801c752:	bd70      	pop	{r4, r5, r6, pc}

0801c754 <__match>:
 801c754:	6803      	ldr	r3, [r0, #0]
 801c756:	3301      	adds	r3, #1
 801c758:	b530      	push	{r4, r5, lr}
 801c75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c75e:	b914      	cbnz	r4, 801c766 <__match+0x12>
 801c760:	6003      	str	r3, [r0, #0]
 801c762:	2001      	movs	r0, #1
 801c764:	bd30      	pop	{r4, r5, pc}
 801c766:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c76a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c76e:	2d19      	cmp	r5, #25
 801c770:	bf98      	it	ls
 801c772:	3220      	addls	r2, #32
 801c774:	42a2      	cmp	r2, r4
 801c776:	d0f0      	beq.n	801c75a <__match+0x6>
 801c778:	2000      	movs	r0, #0
 801c77a:	e7f3      	b.n	801c764 <__match+0x10>

0801c77c <__hexnan>:
 801c77c:	680b      	ldr	r3, [r1, #0]
 801c77e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c782:	115e      	asrs	r6, r3, #5
 801c784:	f013 031f 	ands.w	r3, r3, #31
 801c788:	f04f 0500 	mov.w	r5, #0
 801c78c:	b087      	sub	sp, #28
 801c78e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c792:	4690      	mov	r8, r2
 801c794:	4682      	mov	sl, r0
 801c796:	6802      	ldr	r2, [r0, #0]
 801c798:	bf18      	it	ne
 801c79a:	3604      	addne	r6, #4
 801c79c:	46ab      	mov	fp, r5
 801c79e:	9301      	str	r3, [sp, #4]
 801c7a0:	1f37      	subs	r7, r6, #4
 801c7a2:	f846 5c04 	str.w	r5, [r6, #-4]
 801c7a6:	9502      	str	r5, [sp, #8]
 801c7a8:	46b9      	mov	r9, r7
 801c7aa:	463c      	mov	r4, r7
 801c7ac:	1c53      	adds	r3, r2, #1
 801c7ae:	7851      	ldrb	r1, [r2, #1]
 801c7b0:	9303      	str	r3, [sp, #12]
 801c7b2:	b341      	cbz	r1, 801c806 <__hexnan+0x8a>
 801c7b4:	4608      	mov	r0, r1
 801c7b6:	9205      	str	r2, [sp, #20]
 801c7b8:	9104      	str	r1, [sp, #16]
 801c7ba:	f7ff fd5e 	bl	801c27a <__hexdig_fun>
 801c7be:	2800      	cmp	r0, #0
 801c7c0:	d14f      	bne.n	801c862 <__hexnan+0xe6>
 801c7c2:	9904      	ldr	r1, [sp, #16]
 801c7c4:	9a05      	ldr	r2, [sp, #20]
 801c7c6:	2920      	cmp	r1, #32
 801c7c8:	d818      	bhi.n	801c7fc <__hexnan+0x80>
 801c7ca:	9b02      	ldr	r3, [sp, #8]
 801c7cc:	459b      	cmp	fp, r3
 801c7ce:	dd13      	ble.n	801c7f8 <__hexnan+0x7c>
 801c7d0:	454c      	cmp	r4, r9
 801c7d2:	d206      	bcs.n	801c7e2 <__hexnan+0x66>
 801c7d4:	2d07      	cmp	r5, #7
 801c7d6:	dc04      	bgt.n	801c7e2 <__hexnan+0x66>
 801c7d8:	462a      	mov	r2, r5
 801c7da:	4649      	mov	r1, r9
 801c7dc:	4620      	mov	r0, r4
 801c7de:	f7ff ffa7 	bl	801c730 <L_shift>
 801c7e2:	4544      	cmp	r4, r8
 801c7e4:	d94f      	bls.n	801c886 <__hexnan+0x10a>
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	f1a4 0904 	sub.w	r9, r4, #4
 801c7ec:	f8cd b008 	str.w	fp, [sp, #8]
 801c7f0:	f844 3c04 	str.w	r3, [r4, #-4]
 801c7f4:	461d      	mov	r5, r3
 801c7f6:	464c      	mov	r4, r9
 801c7f8:	9a03      	ldr	r2, [sp, #12]
 801c7fa:	e7d7      	b.n	801c7ac <__hexnan+0x30>
 801c7fc:	2929      	cmp	r1, #41	; 0x29
 801c7fe:	d155      	bne.n	801c8ac <__hexnan+0x130>
 801c800:	3202      	adds	r2, #2
 801c802:	f8ca 2000 	str.w	r2, [sl]
 801c806:	f1bb 0f00 	cmp.w	fp, #0
 801c80a:	d04f      	beq.n	801c8ac <__hexnan+0x130>
 801c80c:	454c      	cmp	r4, r9
 801c80e:	d206      	bcs.n	801c81e <__hexnan+0xa2>
 801c810:	2d07      	cmp	r5, #7
 801c812:	dc04      	bgt.n	801c81e <__hexnan+0xa2>
 801c814:	462a      	mov	r2, r5
 801c816:	4649      	mov	r1, r9
 801c818:	4620      	mov	r0, r4
 801c81a:	f7ff ff89 	bl	801c730 <L_shift>
 801c81e:	4544      	cmp	r4, r8
 801c820:	d933      	bls.n	801c88a <__hexnan+0x10e>
 801c822:	f1a8 0204 	sub.w	r2, r8, #4
 801c826:	4623      	mov	r3, r4
 801c828:	f853 1b04 	ldr.w	r1, [r3], #4
 801c82c:	429f      	cmp	r7, r3
 801c82e:	f842 1f04 	str.w	r1, [r2, #4]!
 801c832:	d2f9      	bcs.n	801c828 <__hexnan+0xac>
 801c834:	1b3b      	subs	r3, r7, r4
 801c836:	3e03      	subs	r6, #3
 801c838:	3401      	adds	r4, #1
 801c83a:	2200      	movs	r2, #0
 801c83c:	f023 0303 	bic.w	r3, r3, #3
 801c840:	3304      	adds	r3, #4
 801c842:	42b4      	cmp	r4, r6
 801c844:	bf88      	it	hi
 801c846:	2304      	movhi	r3, #4
 801c848:	4443      	add	r3, r8
 801c84a:	f843 2b04 	str.w	r2, [r3], #4
 801c84e:	429f      	cmp	r7, r3
 801c850:	d2fb      	bcs.n	801c84a <__hexnan+0xce>
 801c852:	683b      	ldr	r3, [r7, #0]
 801c854:	b91b      	cbnz	r3, 801c85e <__hexnan+0xe2>
 801c856:	4547      	cmp	r7, r8
 801c858:	d126      	bne.n	801c8a8 <__hexnan+0x12c>
 801c85a:	2301      	movs	r3, #1
 801c85c:	603b      	str	r3, [r7, #0]
 801c85e:	2005      	movs	r0, #5
 801c860:	e025      	b.n	801c8ae <__hexnan+0x132>
 801c862:	3501      	adds	r5, #1
 801c864:	f10b 0b01 	add.w	fp, fp, #1
 801c868:	2d08      	cmp	r5, #8
 801c86a:	dd05      	ble.n	801c878 <__hexnan+0xfc>
 801c86c:	4544      	cmp	r4, r8
 801c86e:	d9c3      	bls.n	801c7f8 <__hexnan+0x7c>
 801c870:	2300      	movs	r3, #0
 801c872:	3c04      	subs	r4, #4
 801c874:	2501      	movs	r5, #1
 801c876:	6023      	str	r3, [r4, #0]
 801c878:	6822      	ldr	r2, [r4, #0]
 801c87a:	f000 000f 	and.w	r0, r0, #15
 801c87e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c882:	6022      	str	r2, [r4, #0]
 801c884:	e7b8      	b.n	801c7f8 <__hexnan+0x7c>
 801c886:	2508      	movs	r5, #8
 801c888:	e7b6      	b.n	801c7f8 <__hexnan+0x7c>
 801c88a:	9b01      	ldr	r3, [sp, #4]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d0e0      	beq.n	801c852 <__hexnan+0xd6>
 801c890:	f04f 32ff 	mov.w	r2, #4294967295
 801c894:	f1c3 0320 	rsb	r3, r3, #32
 801c898:	fa22 f303 	lsr.w	r3, r2, r3
 801c89c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c8a0:	401a      	ands	r2, r3
 801c8a2:	f846 2c04 	str.w	r2, [r6, #-4]
 801c8a6:	e7d4      	b.n	801c852 <__hexnan+0xd6>
 801c8a8:	3f04      	subs	r7, #4
 801c8aa:	e7d2      	b.n	801c852 <__hexnan+0xd6>
 801c8ac:	2004      	movs	r0, #4
 801c8ae:	b007      	add	sp, #28
 801c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8b4 <_localeconv_r>:
 801c8b4:	4800      	ldr	r0, [pc, #0]	; (801c8b8 <_localeconv_r+0x4>)
 801c8b6:	4770      	bx	lr
 801c8b8:	20000a54 	.word	0x20000a54

0801c8bc <__ascii_mbtowc>:
 801c8bc:	b082      	sub	sp, #8
 801c8be:	b901      	cbnz	r1, 801c8c2 <__ascii_mbtowc+0x6>
 801c8c0:	a901      	add	r1, sp, #4
 801c8c2:	b142      	cbz	r2, 801c8d6 <__ascii_mbtowc+0x1a>
 801c8c4:	b14b      	cbz	r3, 801c8da <__ascii_mbtowc+0x1e>
 801c8c6:	7813      	ldrb	r3, [r2, #0]
 801c8c8:	600b      	str	r3, [r1, #0]
 801c8ca:	7812      	ldrb	r2, [r2, #0]
 801c8cc:	1e10      	subs	r0, r2, #0
 801c8ce:	bf18      	it	ne
 801c8d0:	2001      	movne	r0, #1
 801c8d2:	b002      	add	sp, #8
 801c8d4:	4770      	bx	lr
 801c8d6:	4610      	mov	r0, r2
 801c8d8:	e7fb      	b.n	801c8d2 <__ascii_mbtowc+0x16>
 801c8da:	f06f 0001 	mvn.w	r0, #1
 801c8de:	e7f8      	b.n	801c8d2 <__ascii_mbtowc+0x16>

0801c8e0 <memchr>:
 801c8e0:	b2c9      	uxtb	r1, r1
 801c8e2:	4402      	add	r2, r0
 801c8e4:	b510      	push	{r4, lr}
 801c8e6:	4290      	cmp	r0, r2
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	d101      	bne.n	801c8f0 <memchr+0x10>
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	e003      	b.n	801c8f8 <memchr+0x18>
 801c8f0:	781c      	ldrb	r4, [r3, #0]
 801c8f2:	3001      	adds	r0, #1
 801c8f4:	428c      	cmp	r4, r1
 801c8f6:	d1f6      	bne.n	801c8e6 <memchr+0x6>
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	bd10      	pop	{r4, pc}

0801c8fc <__malloc_lock>:
 801c8fc:	4801      	ldr	r0, [pc, #4]	; (801c904 <__malloc_lock+0x8>)
 801c8fe:	f000 beb6 	b.w	801d66e <__retarget_lock_acquire_recursive>
 801c902:	bf00      	nop
 801c904:	20004064 	.word	0x20004064

0801c908 <__malloc_unlock>:
 801c908:	4801      	ldr	r0, [pc, #4]	; (801c910 <__malloc_unlock+0x8>)
 801c90a:	f000 beb1 	b.w	801d670 <__retarget_lock_release_recursive>
 801c90e:	bf00      	nop
 801c910:	20004064 	.word	0x20004064

0801c914 <_Balloc>:
 801c914:	b570      	push	{r4, r5, r6, lr}
 801c916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c918:	4604      	mov	r4, r0
 801c91a:	460d      	mov	r5, r1
 801c91c:	b976      	cbnz	r6, 801c93c <_Balloc+0x28>
 801c91e:	2010      	movs	r0, #16
 801c920:	f7fc ff62 	bl	80197e8 <malloc>
 801c924:	4602      	mov	r2, r0
 801c926:	6260      	str	r0, [r4, #36]	; 0x24
 801c928:	b920      	cbnz	r0, 801c934 <_Balloc+0x20>
 801c92a:	4b18      	ldr	r3, [pc, #96]	; (801c98c <_Balloc+0x78>)
 801c92c:	2166      	movs	r1, #102	; 0x66
 801c92e:	4818      	ldr	r0, [pc, #96]	; (801c990 <_Balloc+0x7c>)
 801c930:	f000 fe6c 	bl	801d60c <__assert_func>
 801c934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c938:	6006      	str	r6, [r0, #0]
 801c93a:	60c6      	str	r6, [r0, #12]
 801c93c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c93e:	68f3      	ldr	r3, [r6, #12]
 801c940:	b183      	cbz	r3, 801c964 <_Balloc+0x50>
 801c942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c944:	68db      	ldr	r3, [r3, #12]
 801c946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c94a:	b9b8      	cbnz	r0, 801c97c <_Balloc+0x68>
 801c94c:	2101      	movs	r1, #1
 801c94e:	4620      	mov	r0, r4
 801c950:	fa01 f605 	lsl.w	r6, r1, r5
 801c954:	1d72      	adds	r2, r6, #5
 801c956:	0092      	lsls	r2, r2, #2
 801c958:	f7fc ff6b 	bl	8019832 <_calloc_r>
 801c95c:	b160      	cbz	r0, 801c978 <_Balloc+0x64>
 801c95e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c962:	e00e      	b.n	801c982 <_Balloc+0x6e>
 801c964:	2221      	movs	r2, #33	; 0x21
 801c966:	2104      	movs	r1, #4
 801c968:	4620      	mov	r0, r4
 801c96a:	f7fc ff62 	bl	8019832 <_calloc_r>
 801c96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c970:	60f0      	str	r0, [r6, #12]
 801c972:	68db      	ldr	r3, [r3, #12]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d1e4      	bne.n	801c942 <_Balloc+0x2e>
 801c978:	2000      	movs	r0, #0
 801c97a:	bd70      	pop	{r4, r5, r6, pc}
 801c97c:	6802      	ldr	r2, [r0, #0]
 801c97e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c982:	2300      	movs	r3, #0
 801c984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c988:	e7f7      	b.n	801c97a <_Balloc+0x66>
 801c98a:	bf00      	nop
 801c98c:	080739d6 	.word	0x080739d6
 801c990:	08073ad4 	.word	0x08073ad4

0801c994 <_Bfree>:
 801c994:	b570      	push	{r4, r5, r6, lr}
 801c996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c998:	4605      	mov	r5, r0
 801c99a:	460c      	mov	r4, r1
 801c99c:	b976      	cbnz	r6, 801c9bc <_Bfree+0x28>
 801c99e:	2010      	movs	r0, #16
 801c9a0:	f7fc ff22 	bl	80197e8 <malloc>
 801c9a4:	4602      	mov	r2, r0
 801c9a6:	6268      	str	r0, [r5, #36]	; 0x24
 801c9a8:	b920      	cbnz	r0, 801c9b4 <_Bfree+0x20>
 801c9aa:	4b09      	ldr	r3, [pc, #36]	; (801c9d0 <_Bfree+0x3c>)
 801c9ac:	218a      	movs	r1, #138	; 0x8a
 801c9ae:	4809      	ldr	r0, [pc, #36]	; (801c9d4 <_Bfree+0x40>)
 801c9b0:	f000 fe2c 	bl	801d60c <__assert_func>
 801c9b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c9b8:	6006      	str	r6, [r0, #0]
 801c9ba:	60c6      	str	r6, [r0, #12]
 801c9bc:	b13c      	cbz	r4, 801c9ce <_Bfree+0x3a>
 801c9be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c9c0:	6862      	ldr	r2, [r4, #4]
 801c9c2:	68db      	ldr	r3, [r3, #12]
 801c9c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c9c8:	6021      	str	r1, [r4, #0]
 801c9ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c9ce:	bd70      	pop	{r4, r5, r6, pc}
 801c9d0:	080739d6 	.word	0x080739d6
 801c9d4:	08073ad4 	.word	0x08073ad4

0801c9d8 <__multadd>:
 801c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9dc:	f101 0c14 	add.w	ip, r1, #20
 801c9e0:	4607      	mov	r7, r0
 801c9e2:	460c      	mov	r4, r1
 801c9e4:	461e      	mov	r6, r3
 801c9e6:	690d      	ldr	r5, [r1, #16]
 801c9e8:	2000      	movs	r0, #0
 801c9ea:	f8dc 3000 	ldr.w	r3, [ip]
 801c9ee:	3001      	adds	r0, #1
 801c9f0:	b299      	uxth	r1, r3
 801c9f2:	4285      	cmp	r5, r0
 801c9f4:	fb02 6101 	mla	r1, r2, r1, r6
 801c9f8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c9fc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801ca00:	b289      	uxth	r1, r1
 801ca02:	fb02 3306 	mla	r3, r2, r6, r3
 801ca06:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ca0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ca0e:	f84c 1b04 	str.w	r1, [ip], #4
 801ca12:	dcea      	bgt.n	801c9ea <__multadd+0x12>
 801ca14:	b30e      	cbz	r6, 801ca5a <__multadd+0x82>
 801ca16:	68a3      	ldr	r3, [r4, #8]
 801ca18:	42ab      	cmp	r3, r5
 801ca1a:	dc19      	bgt.n	801ca50 <__multadd+0x78>
 801ca1c:	6861      	ldr	r1, [r4, #4]
 801ca1e:	4638      	mov	r0, r7
 801ca20:	3101      	adds	r1, #1
 801ca22:	f7ff ff77 	bl	801c914 <_Balloc>
 801ca26:	4680      	mov	r8, r0
 801ca28:	b928      	cbnz	r0, 801ca36 <__multadd+0x5e>
 801ca2a:	4602      	mov	r2, r0
 801ca2c:	4b0c      	ldr	r3, [pc, #48]	; (801ca60 <__multadd+0x88>)
 801ca2e:	21b5      	movs	r1, #181	; 0xb5
 801ca30:	480c      	ldr	r0, [pc, #48]	; (801ca64 <__multadd+0x8c>)
 801ca32:	f000 fdeb 	bl	801d60c <__assert_func>
 801ca36:	6922      	ldr	r2, [r4, #16]
 801ca38:	f104 010c 	add.w	r1, r4, #12
 801ca3c:	300c      	adds	r0, #12
 801ca3e:	3202      	adds	r2, #2
 801ca40:	0092      	lsls	r2, r2, #2
 801ca42:	f7fc fee1 	bl	8019808 <memcpy>
 801ca46:	4621      	mov	r1, r4
 801ca48:	4644      	mov	r4, r8
 801ca4a:	4638      	mov	r0, r7
 801ca4c:	f7ff ffa2 	bl	801c994 <_Bfree>
 801ca50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ca54:	3501      	adds	r5, #1
 801ca56:	615e      	str	r6, [r3, #20]
 801ca58:	6125      	str	r5, [r4, #16]
 801ca5a:	4620      	mov	r0, r4
 801ca5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca60:	08073a48 	.word	0x08073a48
 801ca64:	08073ad4 	.word	0x08073ad4

0801ca68 <__s2b>:
 801ca68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca6c:	4615      	mov	r5, r2
 801ca6e:	461f      	mov	r7, r3
 801ca70:	2209      	movs	r2, #9
 801ca72:	3308      	adds	r3, #8
 801ca74:	460c      	mov	r4, r1
 801ca76:	4606      	mov	r6, r0
 801ca78:	2100      	movs	r1, #0
 801ca7a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ca7e:	2201      	movs	r2, #1
 801ca80:	429a      	cmp	r2, r3
 801ca82:	db09      	blt.n	801ca98 <__s2b+0x30>
 801ca84:	4630      	mov	r0, r6
 801ca86:	f7ff ff45 	bl	801c914 <_Balloc>
 801ca8a:	b940      	cbnz	r0, 801ca9e <__s2b+0x36>
 801ca8c:	4602      	mov	r2, r0
 801ca8e:	4b19      	ldr	r3, [pc, #100]	; (801caf4 <__s2b+0x8c>)
 801ca90:	21ce      	movs	r1, #206	; 0xce
 801ca92:	4819      	ldr	r0, [pc, #100]	; (801caf8 <__s2b+0x90>)
 801ca94:	f000 fdba 	bl	801d60c <__assert_func>
 801ca98:	0052      	lsls	r2, r2, #1
 801ca9a:	3101      	adds	r1, #1
 801ca9c:	e7f0      	b.n	801ca80 <__s2b+0x18>
 801ca9e:	9b08      	ldr	r3, [sp, #32]
 801caa0:	2d09      	cmp	r5, #9
 801caa2:	6143      	str	r3, [r0, #20]
 801caa4:	f04f 0301 	mov.w	r3, #1
 801caa8:	6103      	str	r3, [r0, #16]
 801caaa:	dd16      	ble.n	801cada <__s2b+0x72>
 801caac:	f104 0909 	add.w	r9, r4, #9
 801cab0:	442c      	add	r4, r5
 801cab2:	46c8      	mov	r8, r9
 801cab4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cab8:	4601      	mov	r1, r0
 801caba:	220a      	movs	r2, #10
 801cabc:	4630      	mov	r0, r6
 801cabe:	3b30      	subs	r3, #48	; 0x30
 801cac0:	f7ff ff8a 	bl	801c9d8 <__multadd>
 801cac4:	45a0      	cmp	r8, r4
 801cac6:	d1f5      	bne.n	801cab4 <__s2b+0x4c>
 801cac8:	f1a5 0408 	sub.w	r4, r5, #8
 801cacc:	444c      	add	r4, r9
 801cace:	1b2d      	subs	r5, r5, r4
 801cad0:	1963      	adds	r3, r4, r5
 801cad2:	42bb      	cmp	r3, r7
 801cad4:	db04      	blt.n	801cae0 <__s2b+0x78>
 801cad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cada:	340a      	adds	r4, #10
 801cadc:	2509      	movs	r5, #9
 801cade:	e7f6      	b.n	801cace <__s2b+0x66>
 801cae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cae4:	4601      	mov	r1, r0
 801cae6:	220a      	movs	r2, #10
 801cae8:	4630      	mov	r0, r6
 801caea:	3b30      	subs	r3, #48	; 0x30
 801caec:	f7ff ff74 	bl	801c9d8 <__multadd>
 801caf0:	e7ee      	b.n	801cad0 <__s2b+0x68>
 801caf2:	bf00      	nop
 801caf4:	08073a48 	.word	0x08073a48
 801caf8:	08073ad4 	.word	0x08073ad4

0801cafc <__hi0bits>:
 801cafc:	0c03      	lsrs	r3, r0, #16
 801cafe:	041b      	lsls	r3, r3, #16
 801cb00:	b9d3      	cbnz	r3, 801cb38 <__hi0bits+0x3c>
 801cb02:	0400      	lsls	r0, r0, #16
 801cb04:	2310      	movs	r3, #16
 801cb06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cb0a:	bf04      	itt	eq
 801cb0c:	0200      	lsleq	r0, r0, #8
 801cb0e:	3308      	addeq	r3, #8
 801cb10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cb14:	bf04      	itt	eq
 801cb16:	0100      	lsleq	r0, r0, #4
 801cb18:	3304      	addeq	r3, #4
 801cb1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cb1e:	bf04      	itt	eq
 801cb20:	0080      	lsleq	r0, r0, #2
 801cb22:	3302      	addeq	r3, #2
 801cb24:	2800      	cmp	r0, #0
 801cb26:	db05      	blt.n	801cb34 <__hi0bits+0x38>
 801cb28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cb2c:	f103 0301 	add.w	r3, r3, #1
 801cb30:	bf08      	it	eq
 801cb32:	2320      	moveq	r3, #32
 801cb34:	4618      	mov	r0, r3
 801cb36:	4770      	bx	lr
 801cb38:	2300      	movs	r3, #0
 801cb3a:	e7e4      	b.n	801cb06 <__hi0bits+0xa>

0801cb3c <__lo0bits>:
 801cb3c:	6803      	ldr	r3, [r0, #0]
 801cb3e:	4601      	mov	r1, r0
 801cb40:	f013 0207 	ands.w	r2, r3, #7
 801cb44:	d00b      	beq.n	801cb5e <__lo0bits+0x22>
 801cb46:	07da      	lsls	r2, r3, #31
 801cb48:	d423      	bmi.n	801cb92 <__lo0bits+0x56>
 801cb4a:	0798      	lsls	r0, r3, #30
 801cb4c:	bf47      	ittee	mi
 801cb4e:	085b      	lsrmi	r3, r3, #1
 801cb50:	2001      	movmi	r0, #1
 801cb52:	089b      	lsrpl	r3, r3, #2
 801cb54:	2002      	movpl	r0, #2
 801cb56:	bf4c      	ite	mi
 801cb58:	600b      	strmi	r3, [r1, #0]
 801cb5a:	600b      	strpl	r3, [r1, #0]
 801cb5c:	4770      	bx	lr
 801cb5e:	b298      	uxth	r0, r3
 801cb60:	b9a8      	cbnz	r0, 801cb8e <__lo0bits+0x52>
 801cb62:	0c1b      	lsrs	r3, r3, #16
 801cb64:	2010      	movs	r0, #16
 801cb66:	b2da      	uxtb	r2, r3
 801cb68:	b90a      	cbnz	r2, 801cb6e <__lo0bits+0x32>
 801cb6a:	3008      	adds	r0, #8
 801cb6c:	0a1b      	lsrs	r3, r3, #8
 801cb6e:	071a      	lsls	r2, r3, #28
 801cb70:	bf04      	itt	eq
 801cb72:	091b      	lsreq	r3, r3, #4
 801cb74:	3004      	addeq	r0, #4
 801cb76:	079a      	lsls	r2, r3, #30
 801cb78:	bf04      	itt	eq
 801cb7a:	089b      	lsreq	r3, r3, #2
 801cb7c:	3002      	addeq	r0, #2
 801cb7e:	07da      	lsls	r2, r3, #31
 801cb80:	d403      	bmi.n	801cb8a <__lo0bits+0x4e>
 801cb82:	085b      	lsrs	r3, r3, #1
 801cb84:	f100 0001 	add.w	r0, r0, #1
 801cb88:	d005      	beq.n	801cb96 <__lo0bits+0x5a>
 801cb8a:	600b      	str	r3, [r1, #0]
 801cb8c:	4770      	bx	lr
 801cb8e:	4610      	mov	r0, r2
 801cb90:	e7e9      	b.n	801cb66 <__lo0bits+0x2a>
 801cb92:	2000      	movs	r0, #0
 801cb94:	4770      	bx	lr
 801cb96:	2020      	movs	r0, #32
 801cb98:	4770      	bx	lr
	...

0801cb9c <__i2b>:
 801cb9c:	b510      	push	{r4, lr}
 801cb9e:	460c      	mov	r4, r1
 801cba0:	2101      	movs	r1, #1
 801cba2:	f7ff feb7 	bl	801c914 <_Balloc>
 801cba6:	4602      	mov	r2, r0
 801cba8:	b928      	cbnz	r0, 801cbb6 <__i2b+0x1a>
 801cbaa:	4b05      	ldr	r3, [pc, #20]	; (801cbc0 <__i2b+0x24>)
 801cbac:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cbb0:	4804      	ldr	r0, [pc, #16]	; (801cbc4 <__i2b+0x28>)
 801cbb2:	f000 fd2b 	bl	801d60c <__assert_func>
 801cbb6:	2301      	movs	r3, #1
 801cbb8:	6144      	str	r4, [r0, #20]
 801cbba:	6103      	str	r3, [r0, #16]
 801cbbc:	bd10      	pop	{r4, pc}
 801cbbe:	bf00      	nop
 801cbc0:	08073a48 	.word	0x08073a48
 801cbc4:	08073ad4 	.word	0x08073ad4

0801cbc8 <__multiply>:
 801cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbcc:	4691      	mov	r9, r2
 801cbce:	690a      	ldr	r2, [r1, #16]
 801cbd0:	460c      	mov	r4, r1
 801cbd2:	b085      	sub	sp, #20
 801cbd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	bfbe      	ittt	lt
 801cbdc:	460b      	movlt	r3, r1
 801cbde:	464c      	movlt	r4, r9
 801cbe0:	4699      	movlt	r9, r3
 801cbe2:	6927      	ldr	r7, [r4, #16]
 801cbe4:	68a3      	ldr	r3, [r4, #8]
 801cbe6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cbea:	6861      	ldr	r1, [r4, #4]
 801cbec:	eb07 060a 	add.w	r6, r7, sl
 801cbf0:	42b3      	cmp	r3, r6
 801cbf2:	bfb8      	it	lt
 801cbf4:	3101      	addlt	r1, #1
 801cbf6:	f7ff fe8d 	bl	801c914 <_Balloc>
 801cbfa:	b930      	cbnz	r0, 801cc0a <__multiply+0x42>
 801cbfc:	4602      	mov	r2, r0
 801cbfe:	4b44      	ldr	r3, [pc, #272]	; (801cd10 <__multiply+0x148>)
 801cc00:	f240 115d 	movw	r1, #349	; 0x15d
 801cc04:	4843      	ldr	r0, [pc, #268]	; (801cd14 <__multiply+0x14c>)
 801cc06:	f000 fd01 	bl	801d60c <__assert_func>
 801cc0a:	f100 0514 	add.w	r5, r0, #20
 801cc0e:	2200      	movs	r2, #0
 801cc10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cc14:	462b      	mov	r3, r5
 801cc16:	4543      	cmp	r3, r8
 801cc18:	d321      	bcc.n	801cc5e <__multiply+0x96>
 801cc1a:	f104 0314 	add.w	r3, r4, #20
 801cc1e:	f104 0115 	add.w	r1, r4, #21
 801cc22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cc26:	f109 0314 	add.w	r3, r9, #20
 801cc2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cc2e:	9202      	str	r2, [sp, #8]
 801cc30:	1b3a      	subs	r2, r7, r4
 801cc32:	3a15      	subs	r2, #21
 801cc34:	f022 0203 	bic.w	r2, r2, #3
 801cc38:	3204      	adds	r2, #4
 801cc3a:	428f      	cmp	r7, r1
 801cc3c:	bf38      	it	cc
 801cc3e:	2204      	movcc	r2, #4
 801cc40:	9201      	str	r2, [sp, #4]
 801cc42:	9a02      	ldr	r2, [sp, #8]
 801cc44:	9303      	str	r3, [sp, #12]
 801cc46:	429a      	cmp	r2, r3
 801cc48:	d80c      	bhi.n	801cc64 <__multiply+0x9c>
 801cc4a:	2e00      	cmp	r6, #0
 801cc4c:	dd03      	ble.n	801cc56 <__multiply+0x8e>
 801cc4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d05a      	beq.n	801cd0c <__multiply+0x144>
 801cc56:	6106      	str	r6, [r0, #16]
 801cc58:	b005      	add	sp, #20
 801cc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc5e:	f843 2b04 	str.w	r2, [r3], #4
 801cc62:	e7d8      	b.n	801cc16 <__multiply+0x4e>
 801cc64:	f8b3 a000 	ldrh.w	sl, [r3]
 801cc68:	f1ba 0f00 	cmp.w	sl, #0
 801cc6c:	d024      	beq.n	801ccb8 <__multiply+0xf0>
 801cc6e:	f104 0e14 	add.w	lr, r4, #20
 801cc72:	46a9      	mov	r9, r5
 801cc74:	f04f 0c00 	mov.w	ip, #0
 801cc78:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cc7c:	f8d9 1000 	ldr.w	r1, [r9]
 801cc80:	fa1f fb82 	uxth.w	fp, r2
 801cc84:	4577      	cmp	r7, lr
 801cc86:	b289      	uxth	r1, r1
 801cc88:	fb0a 110b 	mla	r1, sl, fp, r1
 801cc8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cc90:	f8d9 2000 	ldr.w	r2, [r9]
 801cc94:	4461      	add	r1, ip
 801cc96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cc9a:	fb0a c20b 	mla	r2, sl, fp, ip
 801cc9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cca2:	b289      	uxth	r1, r1
 801cca4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cca8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ccac:	f849 1b04 	str.w	r1, [r9], #4
 801ccb0:	d8e2      	bhi.n	801cc78 <__multiply+0xb0>
 801ccb2:	9a01      	ldr	r2, [sp, #4]
 801ccb4:	f845 c002 	str.w	ip, [r5, r2]
 801ccb8:	9a03      	ldr	r2, [sp, #12]
 801ccba:	3304      	adds	r3, #4
 801ccbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ccc0:	f1b9 0f00 	cmp.w	r9, #0
 801ccc4:	d020      	beq.n	801cd08 <__multiply+0x140>
 801ccc6:	6829      	ldr	r1, [r5, #0]
 801ccc8:	f104 0c14 	add.w	ip, r4, #20
 801cccc:	46ae      	mov	lr, r5
 801ccce:	f04f 0a00 	mov.w	sl, #0
 801ccd2:	f8bc b000 	ldrh.w	fp, [ip]
 801ccd6:	b289      	uxth	r1, r1
 801ccd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ccdc:	fb09 220b 	mla	r2, r9, fp, r2
 801cce0:	4492      	add	sl, r2
 801cce2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cce6:	f84e 1b04 	str.w	r1, [lr], #4
 801ccea:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ccee:	f8be 1000 	ldrh.w	r1, [lr]
 801ccf2:	0c12      	lsrs	r2, r2, #16
 801ccf4:	4567      	cmp	r7, ip
 801ccf6:	fb09 1102 	mla	r1, r9, r2, r1
 801ccfa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ccfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cd02:	d8e6      	bhi.n	801ccd2 <__multiply+0x10a>
 801cd04:	9a01      	ldr	r2, [sp, #4]
 801cd06:	50a9      	str	r1, [r5, r2]
 801cd08:	3504      	adds	r5, #4
 801cd0a:	e79a      	b.n	801cc42 <__multiply+0x7a>
 801cd0c:	3e01      	subs	r6, #1
 801cd0e:	e79c      	b.n	801cc4a <__multiply+0x82>
 801cd10:	08073a48 	.word	0x08073a48
 801cd14:	08073ad4 	.word	0x08073ad4

0801cd18 <__pow5mult>:
 801cd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd1c:	4615      	mov	r5, r2
 801cd1e:	f012 0203 	ands.w	r2, r2, #3
 801cd22:	4606      	mov	r6, r0
 801cd24:	460f      	mov	r7, r1
 801cd26:	d007      	beq.n	801cd38 <__pow5mult+0x20>
 801cd28:	3a01      	subs	r2, #1
 801cd2a:	4c25      	ldr	r4, [pc, #148]	; (801cdc0 <__pow5mult+0xa8>)
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cd32:	f7ff fe51 	bl	801c9d8 <__multadd>
 801cd36:	4607      	mov	r7, r0
 801cd38:	10ad      	asrs	r5, r5, #2
 801cd3a:	d03d      	beq.n	801cdb8 <__pow5mult+0xa0>
 801cd3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cd3e:	b97c      	cbnz	r4, 801cd60 <__pow5mult+0x48>
 801cd40:	2010      	movs	r0, #16
 801cd42:	f7fc fd51 	bl	80197e8 <malloc>
 801cd46:	4602      	mov	r2, r0
 801cd48:	6270      	str	r0, [r6, #36]	; 0x24
 801cd4a:	b928      	cbnz	r0, 801cd58 <__pow5mult+0x40>
 801cd4c:	4b1d      	ldr	r3, [pc, #116]	; (801cdc4 <__pow5mult+0xac>)
 801cd4e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cd52:	481d      	ldr	r0, [pc, #116]	; (801cdc8 <__pow5mult+0xb0>)
 801cd54:	f000 fc5a 	bl	801d60c <__assert_func>
 801cd58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cd5c:	6004      	str	r4, [r0, #0]
 801cd5e:	60c4      	str	r4, [r0, #12]
 801cd60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cd64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cd68:	b94c      	cbnz	r4, 801cd7e <__pow5mult+0x66>
 801cd6a:	f240 2171 	movw	r1, #625	; 0x271
 801cd6e:	4630      	mov	r0, r6
 801cd70:	f7ff ff14 	bl	801cb9c <__i2b>
 801cd74:	2300      	movs	r3, #0
 801cd76:	4604      	mov	r4, r0
 801cd78:	f8c8 0008 	str.w	r0, [r8, #8]
 801cd7c:	6003      	str	r3, [r0, #0]
 801cd7e:	f04f 0900 	mov.w	r9, #0
 801cd82:	07eb      	lsls	r3, r5, #31
 801cd84:	d50a      	bpl.n	801cd9c <__pow5mult+0x84>
 801cd86:	4639      	mov	r1, r7
 801cd88:	4622      	mov	r2, r4
 801cd8a:	4630      	mov	r0, r6
 801cd8c:	f7ff ff1c 	bl	801cbc8 <__multiply>
 801cd90:	4680      	mov	r8, r0
 801cd92:	4639      	mov	r1, r7
 801cd94:	4630      	mov	r0, r6
 801cd96:	4647      	mov	r7, r8
 801cd98:	f7ff fdfc 	bl	801c994 <_Bfree>
 801cd9c:	106d      	asrs	r5, r5, #1
 801cd9e:	d00b      	beq.n	801cdb8 <__pow5mult+0xa0>
 801cda0:	6820      	ldr	r0, [r4, #0]
 801cda2:	b938      	cbnz	r0, 801cdb4 <__pow5mult+0x9c>
 801cda4:	4622      	mov	r2, r4
 801cda6:	4621      	mov	r1, r4
 801cda8:	4630      	mov	r0, r6
 801cdaa:	f7ff ff0d 	bl	801cbc8 <__multiply>
 801cdae:	6020      	str	r0, [r4, #0]
 801cdb0:	f8c0 9000 	str.w	r9, [r0]
 801cdb4:	4604      	mov	r4, r0
 801cdb6:	e7e4      	b.n	801cd82 <__pow5mult+0x6a>
 801cdb8:	4638      	mov	r0, r7
 801cdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdbe:	bf00      	nop
 801cdc0:	08073c20 	.word	0x08073c20
 801cdc4:	080739d6 	.word	0x080739d6
 801cdc8:	08073ad4 	.word	0x08073ad4

0801cdcc <__lshift>:
 801cdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdd0:	460c      	mov	r4, r1
 801cdd2:	4607      	mov	r7, r0
 801cdd4:	4691      	mov	r9, r2
 801cdd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cdda:	6923      	ldr	r3, [r4, #16]
 801cddc:	6849      	ldr	r1, [r1, #4]
 801cdde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cde2:	68a3      	ldr	r3, [r4, #8]
 801cde4:	f108 0601 	add.w	r6, r8, #1
 801cde8:	42b3      	cmp	r3, r6
 801cdea:	db0b      	blt.n	801ce04 <__lshift+0x38>
 801cdec:	4638      	mov	r0, r7
 801cdee:	f7ff fd91 	bl	801c914 <_Balloc>
 801cdf2:	4605      	mov	r5, r0
 801cdf4:	b948      	cbnz	r0, 801ce0a <__lshift+0x3e>
 801cdf6:	4602      	mov	r2, r0
 801cdf8:	4b2a      	ldr	r3, [pc, #168]	; (801cea4 <__lshift+0xd8>)
 801cdfa:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cdfe:	482a      	ldr	r0, [pc, #168]	; (801cea8 <__lshift+0xdc>)
 801ce00:	f000 fc04 	bl	801d60c <__assert_func>
 801ce04:	3101      	adds	r1, #1
 801ce06:	005b      	lsls	r3, r3, #1
 801ce08:	e7ee      	b.n	801cde8 <__lshift+0x1c>
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	f100 0114 	add.w	r1, r0, #20
 801ce10:	f100 0210 	add.w	r2, r0, #16
 801ce14:	4618      	mov	r0, r3
 801ce16:	4553      	cmp	r3, sl
 801ce18:	db37      	blt.n	801ce8a <__lshift+0xbe>
 801ce1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ce1e:	f104 0314 	add.w	r3, r4, #20
 801ce22:	6920      	ldr	r0, [r4, #16]
 801ce24:	f019 091f 	ands.w	r9, r9, #31
 801ce28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ce2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ce30:	d02f      	beq.n	801ce92 <__lshift+0xc6>
 801ce32:	f1c9 0e20 	rsb	lr, r9, #32
 801ce36:	468a      	mov	sl, r1
 801ce38:	f04f 0c00 	mov.w	ip, #0
 801ce3c:	681a      	ldr	r2, [r3, #0]
 801ce3e:	fa02 f209 	lsl.w	r2, r2, r9
 801ce42:	ea42 020c 	orr.w	r2, r2, ip
 801ce46:	f84a 2b04 	str.w	r2, [sl], #4
 801ce4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce4e:	4298      	cmp	r0, r3
 801ce50:	fa22 fc0e 	lsr.w	ip, r2, lr
 801ce54:	d8f2      	bhi.n	801ce3c <__lshift+0x70>
 801ce56:	1b03      	subs	r3, r0, r4
 801ce58:	f104 0215 	add.w	r2, r4, #21
 801ce5c:	3b15      	subs	r3, #21
 801ce5e:	f023 0303 	bic.w	r3, r3, #3
 801ce62:	3304      	adds	r3, #4
 801ce64:	4290      	cmp	r0, r2
 801ce66:	bf38      	it	cc
 801ce68:	2304      	movcc	r3, #4
 801ce6a:	f841 c003 	str.w	ip, [r1, r3]
 801ce6e:	f1bc 0f00 	cmp.w	ip, #0
 801ce72:	d001      	beq.n	801ce78 <__lshift+0xac>
 801ce74:	f108 0602 	add.w	r6, r8, #2
 801ce78:	3e01      	subs	r6, #1
 801ce7a:	4638      	mov	r0, r7
 801ce7c:	4621      	mov	r1, r4
 801ce7e:	612e      	str	r6, [r5, #16]
 801ce80:	f7ff fd88 	bl	801c994 <_Bfree>
 801ce84:	4628      	mov	r0, r5
 801ce86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce8a:	3301      	adds	r3, #1
 801ce8c:	f842 0f04 	str.w	r0, [r2, #4]!
 801ce90:	e7c1      	b.n	801ce16 <__lshift+0x4a>
 801ce92:	3904      	subs	r1, #4
 801ce94:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce98:	4298      	cmp	r0, r3
 801ce9a:	f841 2f04 	str.w	r2, [r1, #4]!
 801ce9e:	d8f9      	bhi.n	801ce94 <__lshift+0xc8>
 801cea0:	e7ea      	b.n	801ce78 <__lshift+0xac>
 801cea2:	bf00      	nop
 801cea4:	08073a48 	.word	0x08073a48
 801cea8:	08073ad4 	.word	0x08073ad4

0801ceac <__mcmp>:
 801ceac:	6902      	ldr	r2, [r0, #16]
 801ceae:	b530      	push	{r4, r5, lr}
 801ceb0:	690c      	ldr	r4, [r1, #16]
 801ceb2:	1b12      	subs	r2, r2, r4
 801ceb4:	d10e      	bne.n	801ced4 <__mcmp+0x28>
 801ceb6:	f100 0314 	add.w	r3, r0, #20
 801ceba:	3114      	adds	r1, #20
 801cebc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cec0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cec4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cec8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cecc:	42a5      	cmp	r5, r4
 801cece:	d003      	beq.n	801ced8 <__mcmp+0x2c>
 801ced0:	d305      	bcc.n	801cede <__mcmp+0x32>
 801ced2:	2201      	movs	r2, #1
 801ced4:	4610      	mov	r0, r2
 801ced6:	bd30      	pop	{r4, r5, pc}
 801ced8:	4283      	cmp	r3, r0
 801ceda:	d3f3      	bcc.n	801cec4 <__mcmp+0x18>
 801cedc:	e7fa      	b.n	801ced4 <__mcmp+0x28>
 801cede:	f04f 32ff 	mov.w	r2, #4294967295
 801cee2:	e7f7      	b.n	801ced4 <__mcmp+0x28>

0801cee4 <__mdiff>:
 801cee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cee8:	460c      	mov	r4, r1
 801ceea:	4606      	mov	r6, r0
 801ceec:	4611      	mov	r1, r2
 801ceee:	4692      	mov	sl, r2
 801cef0:	4620      	mov	r0, r4
 801cef2:	f7ff ffdb 	bl	801ceac <__mcmp>
 801cef6:	1e05      	subs	r5, r0, #0
 801cef8:	d110      	bne.n	801cf1c <__mdiff+0x38>
 801cefa:	4629      	mov	r1, r5
 801cefc:	4630      	mov	r0, r6
 801cefe:	f7ff fd09 	bl	801c914 <_Balloc>
 801cf02:	b930      	cbnz	r0, 801cf12 <__mdiff+0x2e>
 801cf04:	4b3d      	ldr	r3, [pc, #244]	; (801cffc <__mdiff+0x118>)
 801cf06:	4602      	mov	r2, r0
 801cf08:	f240 2132 	movw	r1, #562	; 0x232
 801cf0c:	483c      	ldr	r0, [pc, #240]	; (801d000 <__mdiff+0x11c>)
 801cf0e:	f000 fb7d 	bl	801d60c <__assert_func>
 801cf12:	2301      	movs	r3, #1
 801cf14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cf18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf1c:	bfa4      	itt	ge
 801cf1e:	4653      	movge	r3, sl
 801cf20:	46a2      	movge	sl, r4
 801cf22:	4630      	mov	r0, r6
 801cf24:	bfa8      	it	ge
 801cf26:	2500      	movge	r5, #0
 801cf28:	f8da 1004 	ldr.w	r1, [sl, #4]
 801cf2c:	bfac      	ite	ge
 801cf2e:	461c      	movge	r4, r3
 801cf30:	2501      	movlt	r5, #1
 801cf32:	f7ff fcef 	bl	801c914 <_Balloc>
 801cf36:	b920      	cbnz	r0, 801cf42 <__mdiff+0x5e>
 801cf38:	4b30      	ldr	r3, [pc, #192]	; (801cffc <__mdiff+0x118>)
 801cf3a:	4602      	mov	r2, r0
 801cf3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cf40:	e7e4      	b.n	801cf0c <__mdiff+0x28>
 801cf42:	f8da 7010 	ldr.w	r7, [sl, #16]
 801cf46:	f104 0914 	add.w	r9, r4, #20
 801cf4a:	6926      	ldr	r6, [r4, #16]
 801cf4c:	f100 0814 	add.w	r8, r0, #20
 801cf50:	60c5      	str	r5, [r0, #12]
 801cf52:	f10a 0514 	add.w	r5, sl, #20
 801cf56:	f10a 0210 	add.w	r2, sl, #16
 801cf5a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cf5e:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 801cf62:	46c2      	mov	sl, r8
 801cf64:	f04f 0c00 	mov.w	ip, #0
 801cf68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cf6c:	f859 3b04 	ldr.w	r3, [r9], #4
 801cf70:	fa1f f18b 	uxth.w	r1, fp
 801cf74:	454e      	cmp	r6, r9
 801cf76:	448c      	add	ip, r1
 801cf78:	b299      	uxth	r1, r3
 801cf7a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801cf7e:	ebac 0101 	sub.w	r1, ip, r1
 801cf82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cf86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801cf8a:	b289      	uxth	r1, r1
 801cf8c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801cf90:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801cf94:	f84a 3b04 	str.w	r3, [sl], #4
 801cf98:	d8e6      	bhi.n	801cf68 <__mdiff+0x84>
 801cf9a:	1b33      	subs	r3, r6, r4
 801cf9c:	3415      	adds	r4, #21
 801cf9e:	3b15      	subs	r3, #21
 801cfa0:	f023 0303 	bic.w	r3, r3, #3
 801cfa4:	3304      	adds	r3, #4
 801cfa6:	42a6      	cmp	r6, r4
 801cfa8:	bf38      	it	cc
 801cfaa:	2304      	movcc	r3, #4
 801cfac:	441d      	add	r5, r3
 801cfae:	4443      	add	r3, r8
 801cfb0:	462c      	mov	r4, r5
 801cfb2:	461e      	mov	r6, r3
 801cfb4:	4574      	cmp	r4, lr
 801cfb6:	d30e      	bcc.n	801cfd6 <__mdiff+0xf2>
 801cfb8:	f10e 0203 	add.w	r2, lr, #3
 801cfbc:	1b52      	subs	r2, r2, r5
 801cfbe:	3d03      	subs	r5, #3
 801cfc0:	f022 0203 	bic.w	r2, r2, #3
 801cfc4:	45ae      	cmp	lr, r5
 801cfc6:	bf38      	it	cc
 801cfc8:	2200      	movcc	r2, #0
 801cfca:	441a      	add	r2, r3
 801cfcc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cfd0:	b18b      	cbz	r3, 801cff6 <__mdiff+0x112>
 801cfd2:	6107      	str	r7, [r0, #16]
 801cfd4:	e7a0      	b.n	801cf18 <__mdiff+0x34>
 801cfd6:	f854 8b04 	ldr.w	r8, [r4], #4
 801cfda:	fa1f f288 	uxth.w	r2, r8
 801cfde:	4462      	add	r2, ip
 801cfe0:	1411      	asrs	r1, r2, #16
 801cfe2:	b292      	uxth	r2, r2
 801cfe4:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 801cfe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801cfec:	ea4f 4c21 	mov.w	ip, r1, asr #16
 801cff0:	f846 2b04 	str.w	r2, [r6], #4
 801cff4:	e7de      	b.n	801cfb4 <__mdiff+0xd0>
 801cff6:	3f01      	subs	r7, #1
 801cff8:	e7e8      	b.n	801cfcc <__mdiff+0xe8>
 801cffa:	bf00      	nop
 801cffc:	08073a48 	.word	0x08073a48
 801d000:	08073ad4 	.word	0x08073ad4

0801d004 <__ulp>:
 801d004:	b082      	sub	sp, #8
 801d006:	4913      	ldr	r1, [pc, #76]	; (801d054 <__ulp+0x50>)
 801d008:	ed8d 0b00 	vstr	d0, [sp]
 801d00c:	9b01      	ldr	r3, [sp, #4]
 801d00e:	4019      	ands	r1, r3
 801d010:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d014:	2900      	cmp	r1, #0
 801d016:	dd05      	ble.n	801d024 <__ulp+0x20>
 801d018:	2200      	movs	r2, #0
 801d01a:	460b      	mov	r3, r1
 801d01c:	ec43 2b10 	vmov	d0, r2, r3
 801d020:	b002      	add	sp, #8
 801d022:	4770      	bx	lr
 801d024:	4249      	negs	r1, r1
 801d026:	2200      	movs	r2, #0
 801d028:	2300      	movs	r3, #0
 801d02a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d02e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d032:	da04      	bge.n	801d03e <__ulp+0x3a>
 801d034:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d038:	fa41 f300 	asr.w	r3, r1, r0
 801d03c:	e7ee      	b.n	801d01c <__ulp+0x18>
 801d03e:	f1a0 0114 	sub.w	r1, r0, #20
 801d042:	291e      	cmp	r1, #30
 801d044:	bfd6      	itet	le
 801d046:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d04a:	2101      	movgt	r1, #1
 801d04c:	fa20 f101 	lsrle.w	r1, r0, r1
 801d050:	460a      	mov	r2, r1
 801d052:	e7e3      	b.n	801d01c <__ulp+0x18>
 801d054:	7ff00000 	.word	0x7ff00000

0801d058 <__b2d>:
 801d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d05a:	6905      	ldr	r5, [r0, #16]
 801d05c:	f100 0714 	add.w	r7, r0, #20
 801d060:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d064:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d068:	1f2e      	subs	r6, r5, #4
 801d06a:	4620      	mov	r0, r4
 801d06c:	f7ff fd46 	bl	801cafc <__hi0bits>
 801d070:	f1c0 0320 	rsb	r3, r0, #32
 801d074:	280a      	cmp	r0, #10
 801d076:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d0f4 <__b2d+0x9c>
 801d07a:	600b      	str	r3, [r1, #0]
 801d07c:	dc15      	bgt.n	801d0aa <__b2d+0x52>
 801d07e:	f1c0 0e0b 	rsb	lr, r0, #11
 801d082:	42b7      	cmp	r7, r6
 801d084:	f100 0015 	add.w	r0, r0, #21
 801d088:	fa24 f10e 	lsr.w	r1, r4, lr
 801d08c:	fa04 f000 	lsl.w	r0, r4, r0
 801d090:	ea41 030c 	orr.w	r3, r1, ip
 801d094:	bf34      	ite	cc
 801d096:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d09a:	2100      	movcs	r1, #0
 801d09c:	fa21 f10e 	lsr.w	r1, r1, lr
 801d0a0:	ea40 0201 	orr.w	r2, r0, r1
 801d0a4:	ec43 2b10 	vmov	d0, r2, r3
 801d0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0aa:	42b7      	cmp	r7, r6
 801d0ac:	bf3a      	itte	cc
 801d0ae:	f1a5 0608 	subcc.w	r6, r5, #8
 801d0b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d0b6:	2100      	movcs	r1, #0
 801d0b8:	380b      	subs	r0, #11
 801d0ba:	d017      	beq.n	801d0ec <__b2d+0x94>
 801d0bc:	f1c0 0c20 	rsb	ip, r0, #32
 801d0c0:	fa04 f500 	lsl.w	r5, r4, r0
 801d0c4:	42be      	cmp	r6, r7
 801d0c6:	fa01 f000 	lsl.w	r0, r1, r0
 801d0ca:	fa21 f40c 	lsr.w	r4, r1, ip
 801d0ce:	ea45 0504 	orr.w	r5, r5, r4
 801d0d2:	bf8c      	ite	hi
 801d0d4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d0d8:	2400      	movls	r4, #0
 801d0da:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d0de:	fa24 f40c 	lsr.w	r4, r4, ip
 801d0e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d0e6:	ea40 0204 	orr.w	r2, r0, r4
 801d0ea:	e7db      	b.n	801d0a4 <__b2d+0x4c>
 801d0ec:	ea44 030c 	orr.w	r3, r4, ip
 801d0f0:	460a      	mov	r2, r1
 801d0f2:	e7d7      	b.n	801d0a4 <__b2d+0x4c>
 801d0f4:	3ff00000 	.word	0x3ff00000

0801d0f8 <__d2b>:
 801d0f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d0fc:	4689      	mov	r9, r1
 801d0fe:	2101      	movs	r1, #1
 801d100:	4690      	mov	r8, r2
 801d102:	ec57 6b10 	vmov	r6, r7, d0
 801d106:	f7ff fc05 	bl	801c914 <_Balloc>
 801d10a:	4604      	mov	r4, r0
 801d10c:	b930      	cbnz	r0, 801d11c <__d2b+0x24>
 801d10e:	4602      	mov	r2, r0
 801d110:	4b25      	ldr	r3, [pc, #148]	; (801d1a8 <__d2b+0xb0>)
 801d112:	f240 310a 	movw	r1, #778	; 0x30a
 801d116:	4825      	ldr	r0, [pc, #148]	; (801d1ac <__d2b+0xb4>)
 801d118:	f000 fa78 	bl	801d60c <__assert_func>
 801d11c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d124:	bb35      	cbnz	r5, 801d174 <__d2b+0x7c>
 801d126:	2e00      	cmp	r6, #0
 801d128:	9301      	str	r3, [sp, #4]
 801d12a:	d028      	beq.n	801d17e <__d2b+0x86>
 801d12c:	4668      	mov	r0, sp
 801d12e:	9600      	str	r6, [sp, #0]
 801d130:	f7ff fd04 	bl	801cb3c <__lo0bits>
 801d134:	9900      	ldr	r1, [sp, #0]
 801d136:	b300      	cbz	r0, 801d17a <__d2b+0x82>
 801d138:	9a01      	ldr	r2, [sp, #4]
 801d13a:	f1c0 0320 	rsb	r3, r0, #32
 801d13e:	fa02 f303 	lsl.w	r3, r2, r3
 801d142:	40c2      	lsrs	r2, r0
 801d144:	430b      	orrs	r3, r1
 801d146:	9201      	str	r2, [sp, #4]
 801d148:	6163      	str	r3, [r4, #20]
 801d14a:	9b01      	ldr	r3, [sp, #4]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	61a3      	str	r3, [r4, #24]
 801d150:	bf14      	ite	ne
 801d152:	2202      	movne	r2, #2
 801d154:	2201      	moveq	r2, #1
 801d156:	6122      	str	r2, [r4, #16]
 801d158:	b1d5      	cbz	r5, 801d190 <__d2b+0x98>
 801d15a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d15e:	4405      	add	r5, r0
 801d160:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d164:	f8c9 5000 	str.w	r5, [r9]
 801d168:	f8c8 0000 	str.w	r0, [r8]
 801d16c:	4620      	mov	r0, r4
 801d16e:	b003      	add	sp, #12
 801d170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d178:	e7d5      	b.n	801d126 <__d2b+0x2e>
 801d17a:	6161      	str	r1, [r4, #20]
 801d17c:	e7e5      	b.n	801d14a <__d2b+0x52>
 801d17e:	a801      	add	r0, sp, #4
 801d180:	f7ff fcdc 	bl	801cb3c <__lo0bits>
 801d184:	9b01      	ldr	r3, [sp, #4]
 801d186:	2201      	movs	r2, #1
 801d188:	3020      	adds	r0, #32
 801d18a:	6163      	str	r3, [r4, #20]
 801d18c:	6122      	str	r2, [r4, #16]
 801d18e:	e7e3      	b.n	801d158 <__d2b+0x60>
 801d190:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d194:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d198:	f8c9 0000 	str.w	r0, [r9]
 801d19c:	6918      	ldr	r0, [r3, #16]
 801d19e:	f7ff fcad 	bl	801cafc <__hi0bits>
 801d1a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d1a6:	e7df      	b.n	801d168 <__d2b+0x70>
 801d1a8:	08073a48 	.word	0x08073a48
 801d1ac:	08073ad4 	.word	0x08073ad4

0801d1b0 <__ratio>:
 801d1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1b4:	4688      	mov	r8, r1
 801d1b6:	4681      	mov	r9, r0
 801d1b8:	4669      	mov	r1, sp
 801d1ba:	f7ff ff4d 	bl	801d058 <__b2d>
 801d1be:	a901      	add	r1, sp, #4
 801d1c0:	4640      	mov	r0, r8
 801d1c2:	ec55 4b10 	vmov	r4, r5, d0
 801d1c6:	f7ff ff47 	bl	801d058 <__b2d>
 801d1ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d1ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d1d2:	462f      	mov	r7, r5
 801d1d4:	eba3 0c02 	sub.w	ip, r3, r2
 801d1d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d1dc:	ec51 0b10 	vmov	r0, r1, d0
 801d1e0:	1a9b      	subs	r3, r3, r2
 801d1e2:	468b      	mov	fp, r1
 801d1e4:	4620      	mov	r0, r4
 801d1e6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	bfd5      	itete	le
 801d1ee:	460a      	movle	r2, r1
 801d1f0:	462a      	movgt	r2, r5
 801d1f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d1f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d1fa:	bfd8      	it	le
 801d1fc:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d200:	ee10 2a10 	vmov	r2, s0
 801d204:	4639      	mov	r1, r7
 801d206:	465b      	mov	r3, fp
 801d208:	f7e3 fb24 	bl	8000854 <__aeabi_ddiv>
 801d20c:	ec41 0b10 	vmov	d0, r0, r1
 801d210:	b003      	add	sp, #12
 801d212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d216 <__copybits>:
 801d216:	3901      	subs	r1, #1
 801d218:	f102 0314 	add.w	r3, r2, #20
 801d21c:	1149      	asrs	r1, r1, #5
 801d21e:	b570      	push	{r4, r5, r6, lr}
 801d220:	3101      	adds	r1, #1
 801d222:	6914      	ldr	r4, [r2, #16]
 801d224:	1f05      	subs	r5, r0, #4
 801d226:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d22a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d22e:	42a3      	cmp	r3, r4
 801d230:	d30c      	bcc.n	801d24c <__copybits+0x36>
 801d232:	1aa3      	subs	r3, r4, r2
 801d234:	3211      	adds	r2, #17
 801d236:	3b11      	subs	r3, #17
 801d238:	f023 0303 	bic.w	r3, r3, #3
 801d23c:	42a2      	cmp	r2, r4
 801d23e:	bf88      	it	hi
 801d240:	2300      	movhi	r3, #0
 801d242:	4418      	add	r0, r3
 801d244:	2300      	movs	r3, #0
 801d246:	4288      	cmp	r0, r1
 801d248:	d305      	bcc.n	801d256 <__copybits+0x40>
 801d24a:	bd70      	pop	{r4, r5, r6, pc}
 801d24c:	f853 6b04 	ldr.w	r6, [r3], #4
 801d250:	f845 6f04 	str.w	r6, [r5, #4]!
 801d254:	e7eb      	b.n	801d22e <__copybits+0x18>
 801d256:	f840 3b04 	str.w	r3, [r0], #4
 801d25a:	e7f4      	b.n	801d246 <__copybits+0x30>

0801d25c <__any_on>:
 801d25c:	f100 0214 	add.w	r2, r0, #20
 801d260:	114b      	asrs	r3, r1, #5
 801d262:	6900      	ldr	r0, [r0, #16]
 801d264:	4298      	cmp	r0, r3
 801d266:	b510      	push	{r4, lr}
 801d268:	db11      	blt.n	801d28e <__any_on+0x32>
 801d26a:	dd0a      	ble.n	801d282 <__any_on+0x26>
 801d26c:	f011 011f 	ands.w	r1, r1, #31
 801d270:	d007      	beq.n	801d282 <__any_on+0x26>
 801d272:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d276:	fa24 f001 	lsr.w	r0, r4, r1
 801d27a:	fa00 f101 	lsl.w	r1, r0, r1
 801d27e:	428c      	cmp	r4, r1
 801d280:	d10b      	bne.n	801d29a <__any_on+0x3e>
 801d282:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d286:	4293      	cmp	r3, r2
 801d288:	d803      	bhi.n	801d292 <__any_on+0x36>
 801d28a:	2000      	movs	r0, #0
 801d28c:	bd10      	pop	{r4, pc}
 801d28e:	4603      	mov	r3, r0
 801d290:	e7f7      	b.n	801d282 <__any_on+0x26>
 801d292:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d296:	2900      	cmp	r1, #0
 801d298:	d0f5      	beq.n	801d286 <__any_on+0x2a>
 801d29a:	2001      	movs	r0, #1
 801d29c:	e7f6      	b.n	801d28c <__any_on+0x30>

0801d29e <_realloc_r>:
 801d29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2a2:	4680      	mov	r8, r0
 801d2a4:	4614      	mov	r4, r2
 801d2a6:	460e      	mov	r6, r1
 801d2a8:	b921      	cbnz	r1, 801d2b4 <_realloc_r+0x16>
 801d2aa:	4611      	mov	r1, r2
 801d2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d2b0:	f7fc bb42 	b.w	8019938 <_malloc_r>
 801d2b4:	b92a      	cbnz	r2, 801d2c2 <_realloc_r+0x24>
 801d2b6:	4625      	mov	r5, r4
 801d2b8:	f7fc fad2 	bl	8019860 <_free_r>
 801d2bc:	4628      	mov	r0, r5
 801d2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2c2:	f000 f9f0 	bl	801d6a6 <_malloc_usable_size_r>
 801d2c6:	4284      	cmp	r4, r0
 801d2c8:	4607      	mov	r7, r0
 801d2ca:	d802      	bhi.n	801d2d2 <_realloc_r+0x34>
 801d2cc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d2d0:	d812      	bhi.n	801d2f8 <_realloc_r+0x5a>
 801d2d2:	4621      	mov	r1, r4
 801d2d4:	4640      	mov	r0, r8
 801d2d6:	f7fc fb2f 	bl	8019938 <_malloc_r>
 801d2da:	4605      	mov	r5, r0
 801d2dc:	2800      	cmp	r0, #0
 801d2de:	d0ed      	beq.n	801d2bc <_realloc_r+0x1e>
 801d2e0:	42bc      	cmp	r4, r7
 801d2e2:	4622      	mov	r2, r4
 801d2e4:	4631      	mov	r1, r6
 801d2e6:	bf28      	it	cs
 801d2e8:	463a      	movcs	r2, r7
 801d2ea:	f7fc fa8d 	bl	8019808 <memcpy>
 801d2ee:	4631      	mov	r1, r6
 801d2f0:	4640      	mov	r0, r8
 801d2f2:	f7fc fab5 	bl	8019860 <_free_r>
 801d2f6:	e7e1      	b.n	801d2bc <_realloc_r+0x1e>
 801d2f8:	4635      	mov	r5, r6
 801d2fa:	e7df      	b.n	801d2bc <_realloc_r+0x1e>

0801d2fc <__ssputs_r>:
 801d2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d300:	688e      	ldr	r6, [r1, #8]
 801d302:	4682      	mov	sl, r0
 801d304:	460c      	mov	r4, r1
 801d306:	4690      	mov	r8, r2
 801d308:	429e      	cmp	r6, r3
 801d30a:	461f      	mov	r7, r3
 801d30c:	d838      	bhi.n	801d380 <__ssputs_r+0x84>
 801d30e:	898a      	ldrh	r2, [r1, #12]
 801d310:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d314:	d032      	beq.n	801d37c <__ssputs_r+0x80>
 801d316:	6825      	ldr	r5, [r4, #0]
 801d318:	3301      	adds	r3, #1
 801d31a:	6909      	ldr	r1, [r1, #16]
 801d31c:	eba5 0901 	sub.w	r9, r5, r1
 801d320:	6965      	ldr	r5, [r4, #20]
 801d322:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d326:	444b      	add	r3, r9
 801d328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d32c:	106d      	asrs	r5, r5, #1
 801d32e:	429d      	cmp	r5, r3
 801d330:	bf38      	it	cc
 801d332:	461d      	movcc	r5, r3
 801d334:	0553      	lsls	r3, r2, #21
 801d336:	d531      	bpl.n	801d39c <__ssputs_r+0xa0>
 801d338:	4629      	mov	r1, r5
 801d33a:	f7fc fafd 	bl	8019938 <_malloc_r>
 801d33e:	4606      	mov	r6, r0
 801d340:	b950      	cbnz	r0, 801d358 <__ssputs_r+0x5c>
 801d342:	230c      	movs	r3, #12
 801d344:	f04f 30ff 	mov.w	r0, #4294967295
 801d348:	f8ca 3000 	str.w	r3, [sl]
 801d34c:	89a3      	ldrh	r3, [r4, #12]
 801d34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d352:	81a3      	strh	r3, [r4, #12]
 801d354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d358:	464a      	mov	r2, r9
 801d35a:	6921      	ldr	r1, [r4, #16]
 801d35c:	f7fc fa54 	bl	8019808 <memcpy>
 801d360:	89a3      	ldrh	r3, [r4, #12]
 801d362:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d36a:	81a3      	strh	r3, [r4, #12]
 801d36c:	6126      	str	r6, [r4, #16]
 801d36e:	444e      	add	r6, r9
 801d370:	6165      	str	r5, [r4, #20]
 801d372:	eba5 0509 	sub.w	r5, r5, r9
 801d376:	6026      	str	r6, [r4, #0]
 801d378:	463e      	mov	r6, r7
 801d37a:	60a5      	str	r5, [r4, #8]
 801d37c:	42be      	cmp	r6, r7
 801d37e:	d900      	bls.n	801d382 <__ssputs_r+0x86>
 801d380:	463e      	mov	r6, r7
 801d382:	4632      	mov	r2, r6
 801d384:	4641      	mov	r1, r8
 801d386:	6820      	ldr	r0, [r4, #0]
 801d388:	f000 f973 	bl	801d672 <memmove>
 801d38c:	68a3      	ldr	r3, [r4, #8]
 801d38e:	2000      	movs	r0, #0
 801d390:	1b9b      	subs	r3, r3, r6
 801d392:	60a3      	str	r3, [r4, #8]
 801d394:	6823      	ldr	r3, [r4, #0]
 801d396:	4433      	add	r3, r6
 801d398:	6023      	str	r3, [r4, #0]
 801d39a:	e7db      	b.n	801d354 <__ssputs_r+0x58>
 801d39c:	462a      	mov	r2, r5
 801d39e:	f7ff ff7e 	bl	801d29e <_realloc_r>
 801d3a2:	4606      	mov	r6, r0
 801d3a4:	2800      	cmp	r0, #0
 801d3a6:	d1e1      	bne.n	801d36c <__ssputs_r+0x70>
 801d3a8:	6921      	ldr	r1, [r4, #16]
 801d3aa:	4650      	mov	r0, sl
 801d3ac:	f7fc fa58 	bl	8019860 <_free_r>
 801d3b0:	e7c7      	b.n	801d342 <__ssputs_r+0x46>
	...

0801d3b4 <_svfiprintf_r>:
 801d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b8:	4698      	mov	r8, r3
 801d3ba:	898b      	ldrh	r3, [r1, #12]
 801d3bc:	b09d      	sub	sp, #116	; 0x74
 801d3be:	4607      	mov	r7, r0
 801d3c0:	061b      	lsls	r3, r3, #24
 801d3c2:	460d      	mov	r5, r1
 801d3c4:	4614      	mov	r4, r2
 801d3c6:	d50e      	bpl.n	801d3e6 <_svfiprintf_r+0x32>
 801d3c8:	690b      	ldr	r3, [r1, #16]
 801d3ca:	b963      	cbnz	r3, 801d3e6 <_svfiprintf_r+0x32>
 801d3cc:	2140      	movs	r1, #64	; 0x40
 801d3ce:	f7fc fab3 	bl	8019938 <_malloc_r>
 801d3d2:	6028      	str	r0, [r5, #0]
 801d3d4:	6128      	str	r0, [r5, #16]
 801d3d6:	b920      	cbnz	r0, 801d3e2 <_svfiprintf_r+0x2e>
 801d3d8:	230c      	movs	r3, #12
 801d3da:	603b      	str	r3, [r7, #0]
 801d3dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d3e0:	e0d1      	b.n	801d586 <_svfiprintf_r+0x1d2>
 801d3e2:	2340      	movs	r3, #64	; 0x40
 801d3e4:	616b      	str	r3, [r5, #20]
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d3ec:	f04f 0901 	mov.w	r9, #1
 801d3f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801d5a0 <_svfiprintf_r+0x1ec>
 801d3f4:	9309      	str	r3, [sp, #36]	; 0x24
 801d3f6:	2320      	movs	r3, #32
 801d3f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d3fc:	2330      	movs	r3, #48	; 0x30
 801d3fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d402:	4623      	mov	r3, r4
 801d404:	469a      	mov	sl, r3
 801d406:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d40a:	b10a      	cbz	r2, 801d410 <_svfiprintf_r+0x5c>
 801d40c:	2a25      	cmp	r2, #37	; 0x25
 801d40e:	d1f9      	bne.n	801d404 <_svfiprintf_r+0x50>
 801d410:	ebba 0b04 	subs.w	fp, sl, r4
 801d414:	d00b      	beq.n	801d42e <_svfiprintf_r+0x7a>
 801d416:	465b      	mov	r3, fp
 801d418:	4622      	mov	r2, r4
 801d41a:	4629      	mov	r1, r5
 801d41c:	4638      	mov	r0, r7
 801d41e:	f7ff ff6d 	bl	801d2fc <__ssputs_r>
 801d422:	3001      	adds	r0, #1
 801d424:	f000 80aa 	beq.w	801d57c <_svfiprintf_r+0x1c8>
 801d428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d42a:	445a      	add	r2, fp
 801d42c:	9209      	str	r2, [sp, #36]	; 0x24
 801d42e:	f89a 3000 	ldrb.w	r3, [sl]
 801d432:	2b00      	cmp	r3, #0
 801d434:	f000 80a2 	beq.w	801d57c <_svfiprintf_r+0x1c8>
 801d438:	2300      	movs	r3, #0
 801d43a:	f04f 32ff 	mov.w	r2, #4294967295
 801d43e:	f10a 0a01 	add.w	sl, sl, #1
 801d442:	9304      	str	r3, [sp, #16]
 801d444:	9307      	str	r3, [sp, #28]
 801d446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d44a:	931a      	str	r3, [sp, #104]	; 0x68
 801d44c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d450:	4654      	mov	r4, sl
 801d452:	2205      	movs	r2, #5
 801d454:	4852      	ldr	r0, [pc, #328]	; (801d5a0 <_svfiprintf_r+0x1ec>)
 801d456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d45a:	f7ff fa41 	bl	801c8e0 <memchr>
 801d45e:	9a04      	ldr	r2, [sp, #16]
 801d460:	b9d8      	cbnz	r0, 801d49a <_svfiprintf_r+0xe6>
 801d462:	06d0      	lsls	r0, r2, #27
 801d464:	bf44      	itt	mi
 801d466:	2320      	movmi	r3, #32
 801d468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d46c:	0711      	lsls	r1, r2, #28
 801d46e:	bf44      	itt	mi
 801d470:	232b      	movmi	r3, #43	; 0x2b
 801d472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d476:	f89a 3000 	ldrb.w	r3, [sl]
 801d47a:	2b2a      	cmp	r3, #42	; 0x2a
 801d47c:	d015      	beq.n	801d4aa <_svfiprintf_r+0xf6>
 801d47e:	9a07      	ldr	r2, [sp, #28]
 801d480:	4654      	mov	r4, sl
 801d482:	2000      	movs	r0, #0
 801d484:	f04f 0c0a 	mov.w	ip, #10
 801d488:	4621      	mov	r1, r4
 801d48a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d48e:	3b30      	subs	r3, #48	; 0x30
 801d490:	2b09      	cmp	r3, #9
 801d492:	d94e      	bls.n	801d532 <_svfiprintf_r+0x17e>
 801d494:	b1b0      	cbz	r0, 801d4c4 <_svfiprintf_r+0x110>
 801d496:	9207      	str	r2, [sp, #28]
 801d498:	e014      	b.n	801d4c4 <_svfiprintf_r+0x110>
 801d49a:	eba0 0308 	sub.w	r3, r0, r8
 801d49e:	46a2      	mov	sl, r4
 801d4a0:	fa09 f303 	lsl.w	r3, r9, r3
 801d4a4:	4313      	orrs	r3, r2
 801d4a6:	9304      	str	r3, [sp, #16]
 801d4a8:	e7d2      	b.n	801d450 <_svfiprintf_r+0x9c>
 801d4aa:	9b03      	ldr	r3, [sp, #12]
 801d4ac:	1d19      	adds	r1, r3, #4
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	9103      	str	r1, [sp, #12]
 801d4b4:	bfbb      	ittet	lt
 801d4b6:	425b      	neglt	r3, r3
 801d4b8:	f042 0202 	orrlt.w	r2, r2, #2
 801d4bc:	9307      	strge	r3, [sp, #28]
 801d4be:	9307      	strlt	r3, [sp, #28]
 801d4c0:	bfb8      	it	lt
 801d4c2:	9204      	strlt	r2, [sp, #16]
 801d4c4:	7823      	ldrb	r3, [r4, #0]
 801d4c6:	2b2e      	cmp	r3, #46	; 0x2e
 801d4c8:	d10c      	bne.n	801d4e4 <_svfiprintf_r+0x130>
 801d4ca:	7863      	ldrb	r3, [r4, #1]
 801d4cc:	2b2a      	cmp	r3, #42	; 0x2a
 801d4ce:	d135      	bne.n	801d53c <_svfiprintf_r+0x188>
 801d4d0:	9b03      	ldr	r3, [sp, #12]
 801d4d2:	3402      	adds	r4, #2
 801d4d4:	1d1a      	adds	r2, r3, #4
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	9203      	str	r2, [sp, #12]
 801d4dc:	bfb8      	it	lt
 801d4de:	f04f 33ff 	movlt.w	r3, #4294967295
 801d4e2:	9305      	str	r3, [sp, #20]
 801d4e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d5b0 <_svfiprintf_r+0x1fc>
 801d4e8:	2203      	movs	r2, #3
 801d4ea:	7821      	ldrb	r1, [r4, #0]
 801d4ec:	4650      	mov	r0, sl
 801d4ee:	f7ff f9f7 	bl	801c8e0 <memchr>
 801d4f2:	b140      	cbz	r0, 801d506 <_svfiprintf_r+0x152>
 801d4f4:	2340      	movs	r3, #64	; 0x40
 801d4f6:	eba0 000a 	sub.w	r0, r0, sl
 801d4fa:	3401      	adds	r4, #1
 801d4fc:	fa03 f000 	lsl.w	r0, r3, r0
 801d500:	9b04      	ldr	r3, [sp, #16]
 801d502:	4303      	orrs	r3, r0
 801d504:	9304      	str	r3, [sp, #16]
 801d506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d50a:	2206      	movs	r2, #6
 801d50c:	4825      	ldr	r0, [pc, #148]	; (801d5a4 <_svfiprintf_r+0x1f0>)
 801d50e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d512:	f7ff f9e5 	bl	801c8e0 <memchr>
 801d516:	2800      	cmp	r0, #0
 801d518:	d038      	beq.n	801d58c <_svfiprintf_r+0x1d8>
 801d51a:	4b23      	ldr	r3, [pc, #140]	; (801d5a8 <_svfiprintf_r+0x1f4>)
 801d51c:	bb1b      	cbnz	r3, 801d566 <_svfiprintf_r+0x1b2>
 801d51e:	9b03      	ldr	r3, [sp, #12]
 801d520:	3307      	adds	r3, #7
 801d522:	f023 0307 	bic.w	r3, r3, #7
 801d526:	3308      	adds	r3, #8
 801d528:	9303      	str	r3, [sp, #12]
 801d52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d52c:	4433      	add	r3, r6
 801d52e:	9309      	str	r3, [sp, #36]	; 0x24
 801d530:	e767      	b.n	801d402 <_svfiprintf_r+0x4e>
 801d532:	fb0c 3202 	mla	r2, ip, r2, r3
 801d536:	460c      	mov	r4, r1
 801d538:	2001      	movs	r0, #1
 801d53a:	e7a5      	b.n	801d488 <_svfiprintf_r+0xd4>
 801d53c:	2300      	movs	r3, #0
 801d53e:	3401      	adds	r4, #1
 801d540:	f04f 0c0a 	mov.w	ip, #10
 801d544:	4619      	mov	r1, r3
 801d546:	9305      	str	r3, [sp, #20]
 801d548:	4620      	mov	r0, r4
 801d54a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d54e:	3a30      	subs	r2, #48	; 0x30
 801d550:	2a09      	cmp	r2, #9
 801d552:	d903      	bls.n	801d55c <_svfiprintf_r+0x1a8>
 801d554:	2b00      	cmp	r3, #0
 801d556:	d0c5      	beq.n	801d4e4 <_svfiprintf_r+0x130>
 801d558:	9105      	str	r1, [sp, #20]
 801d55a:	e7c3      	b.n	801d4e4 <_svfiprintf_r+0x130>
 801d55c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d560:	4604      	mov	r4, r0
 801d562:	2301      	movs	r3, #1
 801d564:	e7f0      	b.n	801d548 <_svfiprintf_r+0x194>
 801d566:	ab03      	add	r3, sp, #12
 801d568:	462a      	mov	r2, r5
 801d56a:	a904      	add	r1, sp, #16
 801d56c:	4638      	mov	r0, r7
 801d56e:	9300      	str	r3, [sp, #0]
 801d570:	4b0e      	ldr	r3, [pc, #56]	; (801d5ac <_svfiprintf_r+0x1f8>)
 801d572:	f7fc faf5 	bl	8019b60 <_printf_float>
 801d576:	1c42      	adds	r2, r0, #1
 801d578:	4606      	mov	r6, r0
 801d57a:	d1d6      	bne.n	801d52a <_svfiprintf_r+0x176>
 801d57c:	89ab      	ldrh	r3, [r5, #12]
 801d57e:	065b      	lsls	r3, r3, #25
 801d580:	f53f af2c 	bmi.w	801d3dc <_svfiprintf_r+0x28>
 801d584:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d586:	b01d      	add	sp, #116	; 0x74
 801d588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d58c:	ab03      	add	r3, sp, #12
 801d58e:	462a      	mov	r2, r5
 801d590:	a904      	add	r1, sp, #16
 801d592:	4638      	mov	r0, r7
 801d594:	9300      	str	r3, [sp, #0]
 801d596:	4b05      	ldr	r3, [pc, #20]	; (801d5ac <_svfiprintf_r+0x1f8>)
 801d598:	f7fc fd88 	bl	801a0ac <_printf_i>
 801d59c:	e7eb      	b.n	801d576 <_svfiprintf_r+0x1c2>
 801d59e:	bf00      	nop
 801d5a0:	08073c2c 	.word	0x08073c2c
 801d5a4:	08073c36 	.word	0x08073c36
 801d5a8:	08019b61 	.word	0x08019b61
 801d5ac:	0801d2fd 	.word	0x0801d2fd
 801d5b0:	08073c32 	.word	0x08073c32
 801d5b4:	00000000 	.word	0x00000000

0801d5b8 <nan>:
 801d5b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d5c0 <nan+0x8>
 801d5bc:	4770      	bx	lr
 801d5be:	bf00      	nop
 801d5c0:	00000000 	.word	0x00000000
 801d5c4:	7ff80000 	.word	0x7ff80000

0801d5c8 <strncmp>:
 801d5c8:	b510      	push	{r4, lr}
 801d5ca:	b17a      	cbz	r2, 801d5ec <strncmp+0x24>
 801d5cc:	4603      	mov	r3, r0
 801d5ce:	3901      	subs	r1, #1
 801d5d0:	1884      	adds	r4, r0, r2
 801d5d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d5d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d5da:	4290      	cmp	r0, r2
 801d5dc:	d101      	bne.n	801d5e2 <strncmp+0x1a>
 801d5de:	42a3      	cmp	r3, r4
 801d5e0:	d101      	bne.n	801d5e6 <strncmp+0x1e>
 801d5e2:	1a80      	subs	r0, r0, r2
 801d5e4:	bd10      	pop	{r4, pc}
 801d5e6:	2800      	cmp	r0, #0
 801d5e8:	d1f3      	bne.n	801d5d2 <strncmp+0xa>
 801d5ea:	e7fa      	b.n	801d5e2 <strncmp+0x1a>
 801d5ec:	4610      	mov	r0, r2
 801d5ee:	e7f9      	b.n	801d5e4 <strncmp+0x1c>

0801d5f0 <__ascii_wctomb>:
 801d5f0:	b149      	cbz	r1, 801d606 <__ascii_wctomb+0x16>
 801d5f2:	2aff      	cmp	r2, #255	; 0xff
 801d5f4:	bf8d      	iteet	hi
 801d5f6:	238a      	movhi	r3, #138	; 0x8a
 801d5f8:	2001      	movls	r0, #1
 801d5fa:	700a      	strbls	r2, [r1, #0]
 801d5fc:	6003      	strhi	r3, [r0, #0]
 801d5fe:	bf88      	it	hi
 801d600:	f04f 30ff 	movhi.w	r0, #4294967295
 801d604:	4770      	bx	lr
 801d606:	4608      	mov	r0, r1
 801d608:	4770      	bx	lr
	...

0801d60c <__assert_func>:
 801d60c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d60e:	4614      	mov	r4, r2
 801d610:	461a      	mov	r2, r3
 801d612:	4b09      	ldr	r3, [pc, #36]	; (801d638 <__assert_func+0x2c>)
 801d614:	4605      	mov	r5, r0
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	68d8      	ldr	r0, [r3, #12]
 801d61a:	b14c      	cbz	r4, 801d630 <__assert_func+0x24>
 801d61c:	4b07      	ldr	r3, [pc, #28]	; (801d63c <__assert_func+0x30>)
 801d61e:	9100      	str	r1, [sp, #0]
 801d620:	4907      	ldr	r1, [pc, #28]	; (801d640 <__assert_func+0x34>)
 801d622:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d626:	462b      	mov	r3, r5
 801d628:	f000 f80e 	bl	801d648 <fiprintf>
 801d62c:	f000 fa5c 	bl	801dae8 <abort>
 801d630:	4b04      	ldr	r3, [pc, #16]	; (801d644 <__assert_func+0x38>)
 801d632:	461c      	mov	r4, r3
 801d634:	e7f3      	b.n	801d61e <__assert_func+0x12>
 801d636:	bf00      	nop
 801d638:	200008fc 	.word	0x200008fc
 801d63c:	08073c3d 	.word	0x08073c3d
 801d640:	08073c4a 	.word	0x08073c4a
 801d644:	08073c78 	.word	0x08073c78

0801d648 <fiprintf>:
 801d648:	b40e      	push	{r1, r2, r3}
 801d64a:	b503      	push	{r0, r1, lr}
 801d64c:	ab03      	add	r3, sp, #12
 801d64e:	4601      	mov	r1, r0
 801d650:	4805      	ldr	r0, [pc, #20]	; (801d668 <fiprintf+0x20>)
 801d652:	f853 2b04 	ldr.w	r2, [r3], #4
 801d656:	6800      	ldr	r0, [r0, #0]
 801d658:	9301      	str	r3, [sp, #4]
 801d65a:	f000 f855 	bl	801d708 <_vfiprintf_r>
 801d65e:	b002      	add	sp, #8
 801d660:	f85d eb04 	ldr.w	lr, [sp], #4
 801d664:	b003      	add	sp, #12
 801d666:	4770      	bx	lr
 801d668:	200008fc 	.word	0x200008fc

0801d66c <__retarget_lock_init_recursive>:
 801d66c:	4770      	bx	lr

0801d66e <__retarget_lock_acquire_recursive>:
 801d66e:	4770      	bx	lr

0801d670 <__retarget_lock_release_recursive>:
 801d670:	4770      	bx	lr

0801d672 <memmove>:
 801d672:	4288      	cmp	r0, r1
 801d674:	b510      	push	{r4, lr}
 801d676:	eb01 0402 	add.w	r4, r1, r2
 801d67a:	d902      	bls.n	801d682 <memmove+0x10>
 801d67c:	4284      	cmp	r4, r0
 801d67e:	4623      	mov	r3, r4
 801d680:	d807      	bhi.n	801d692 <memmove+0x20>
 801d682:	1e43      	subs	r3, r0, #1
 801d684:	42a1      	cmp	r1, r4
 801d686:	d008      	beq.n	801d69a <memmove+0x28>
 801d688:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d68c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d690:	e7f8      	b.n	801d684 <memmove+0x12>
 801d692:	4402      	add	r2, r0
 801d694:	4601      	mov	r1, r0
 801d696:	428a      	cmp	r2, r1
 801d698:	d100      	bne.n	801d69c <memmove+0x2a>
 801d69a:	bd10      	pop	{r4, pc}
 801d69c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d6a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d6a4:	e7f7      	b.n	801d696 <memmove+0x24>

0801d6a6 <_malloc_usable_size_r>:
 801d6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d6aa:	1f18      	subs	r0, r3, #4
 801d6ac:	2b00      	cmp	r3, #0
 801d6ae:	bfbc      	itt	lt
 801d6b0:	580b      	ldrlt	r3, [r1, r0]
 801d6b2:	18c0      	addlt	r0, r0, r3
 801d6b4:	4770      	bx	lr

0801d6b6 <__sfputc_r>:
 801d6b6:	6893      	ldr	r3, [r2, #8]
 801d6b8:	3b01      	subs	r3, #1
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	6093      	str	r3, [r2, #8]
 801d6be:	b410      	push	{r4}
 801d6c0:	da08      	bge.n	801d6d4 <__sfputc_r+0x1e>
 801d6c2:	6994      	ldr	r4, [r2, #24]
 801d6c4:	42a3      	cmp	r3, r4
 801d6c6:	db01      	blt.n	801d6cc <__sfputc_r+0x16>
 801d6c8:	290a      	cmp	r1, #10
 801d6ca:	d103      	bne.n	801d6d4 <__sfputc_r+0x1e>
 801d6cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d6d0:	f000 b94a 	b.w	801d968 <__swbuf_r>
 801d6d4:	6813      	ldr	r3, [r2, #0]
 801d6d6:	1c58      	adds	r0, r3, #1
 801d6d8:	6010      	str	r0, [r2, #0]
 801d6da:	4608      	mov	r0, r1
 801d6dc:	7019      	strb	r1, [r3, #0]
 801d6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d6e2:	4770      	bx	lr

0801d6e4 <__sfputs_r>:
 801d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6e6:	4606      	mov	r6, r0
 801d6e8:	460f      	mov	r7, r1
 801d6ea:	4614      	mov	r4, r2
 801d6ec:	18d5      	adds	r5, r2, r3
 801d6ee:	42ac      	cmp	r4, r5
 801d6f0:	d101      	bne.n	801d6f6 <__sfputs_r+0x12>
 801d6f2:	2000      	movs	r0, #0
 801d6f4:	e007      	b.n	801d706 <__sfputs_r+0x22>
 801d6f6:	463a      	mov	r2, r7
 801d6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6fc:	4630      	mov	r0, r6
 801d6fe:	f7ff ffda 	bl	801d6b6 <__sfputc_r>
 801d702:	1c43      	adds	r3, r0, #1
 801d704:	d1f3      	bne.n	801d6ee <__sfputs_r+0xa>
 801d706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d708 <_vfiprintf_r>:
 801d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d70c:	460d      	mov	r5, r1
 801d70e:	b09d      	sub	sp, #116	; 0x74
 801d710:	4614      	mov	r4, r2
 801d712:	4698      	mov	r8, r3
 801d714:	4606      	mov	r6, r0
 801d716:	b118      	cbz	r0, 801d720 <_vfiprintf_r+0x18>
 801d718:	6983      	ldr	r3, [r0, #24]
 801d71a:	b90b      	cbnz	r3, 801d720 <_vfiprintf_r+0x18>
 801d71c:	f000 fb04 	bl	801dd28 <__sinit>
 801d720:	4b89      	ldr	r3, [pc, #548]	; (801d948 <_vfiprintf_r+0x240>)
 801d722:	429d      	cmp	r5, r3
 801d724:	d11b      	bne.n	801d75e <_vfiprintf_r+0x56>
 801d726:	6875      	ldr	r5, [r6, #4]
 801d728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d72a:	07d9      	lsls	r1, r3, #31
 801d72c:	d405      	bmi.n	801d73a <_vfiprintf_r+0x32>
 801d72e:	89ab      	ldrh	r3, [r5, #12]
 801d730:	059a      	lsls	r2, r3, #22
 801d732:	d402      	bmi.n	801d73a <_vfiprintf_r+0x32>
 801d734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d736:	f7ff ff9a 	bl	801d66e <__retarget_lock_acquire_recursive>
 801d73a:	89ab      	ldrh	r3, [r5, #12]
 801d73c:	071b      	lsls	r3, r3, #28
 801d73e:	d501      	bpl.n	801d744 <_vfiprintf_r+0x3c>
 801d740:	692b      	ldr	r3, [r5, #16]
 801d742:	b9eb      	cbnz	r3, 801d780 <_vfiprintf_r+0x78>
 801d744:	4629      	mov	r1, r5
 801d746:	4630      	mov	r0, r6
 801d748:	f000 f960 	bl	801da0c <__swsetup_r>
 801d74c:	b1c0      	cbz	r0, 801d780 <_vfiprintf_r+0x78>
 801d74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d750:	07dc      	lsls	r4, r3, #31
 801d752:	d50e      	bpl.n	801d772 <_vfiprintf_r+0x6a>
 801d754:	f04f 30ff 	mov.w	r0, #4294967295
 801d758:	b01d      	add	sp, #116	; 0x74
 801d75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d75e:	4b7b      	ldr	r3, [pc, #492]	; (801d94c <_vfiprintf_r+0x244>)
 801d760:	429d      	cmp	r5, r3
 801d762:	d101      	bne.n	801d768 <_vfiprintf_r+0x60>
 801d764:	68b5      	ldr	r5, [r6, #8]
 801d766:	e7df      	b.n	801d728 <_vfiprintf_r+0x20>
 801d768:	4b79      	ldr	r3, [pc, #484]	; (801d950 <_vfiprintf_r+0x248>)
 801d76a:	429d      	cmp	r5, r3
 801d76c:	bf08      	it	eq
 801d76e:	68f5      	ldreq	r5, [r6, #12]
 801d770:	e7da      	b.n	801d728 <_vfiprintf_r+0x20>
 801d772:	89ab      	ldrh	r3, [r5, #12]
 801d774:	0598      	lsls	r0, r3, #22
 801d776:	d4ed      	bmi.n	801d754 <_vfiprintf_r+0x4c>
 801d778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d77a:	f7ff ff79 	bl	801d670 <__retarget_lock_release_recursive>
 801d77e:	e7e9      	b.n	801d754 <_vfiprintf_r+0x4c>
 801d780:	2300      	movs	r3, #0
 801d782:	f8cd 800c 	str.w	r8, [sp, #12]
 801d786:	f04f 0901 	mov.w	r9, #1
 801d78a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801d954 <_vfiprintf_r+0x24c>
 801d78e:	9309      	str	r3, [sp, #36]	; 0x24
 801d790:	2320      	movs	r3, #32
 801d792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d796:	2330      	movs	r3, #48	; 0x30
 801d798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d79c:	4623      	mov	r3, r4
 801d79e:	469a      	mov	sl, r3
 801d7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7a4:	b10a      	cbz	r2, 801d7aa <_vfiprintf_r+0xa2>
 801d7a6:	2a25      	cmp	r2, #37	; 0x25
 801d7a8:	d1f9      	bne.n	801d79e <_vfiprintf_r+0x96>
 801d7aa:	ebba 0b04 	subs.w	fp, sl, r4
 801d7ae:	d00b      	beq.n	801d7c8 <_vfiprintf_r+0xc0>
 801d7b0:	465b      	mov	r3, fp
 801d7b2:	4622      	mov	r2, r4
 801d7b4:	4629      	mov	r1, r5
 801d7b6:	4630      	mov	r0, r6
 801d7b8:	f7ff ff94 	bl	801d6e4 <__sfputs_r>
 801d7bc:	3001      	adds	r0, #1
 801d7be:	f000 80aa 	beq.w	801d916 <_vfiprintf_r+0x20e>
 801d7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d7c4:	445a      	add	r2, fp
 801d7c6:	9209      	str	r2, [sp, #36]	; 0x24
 801d7c8:	f89a 3000 	ldrb.w	r3, [sl]
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	f000 80a2 	beq.w	801d916 <_vfiprintf_r+0x20e>
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	f04f 32ff 	mov.w	r2, #4294967295
 801d7d8:	f10a 0a01 	add.w	sl, sl, #1
 801d7dc:	9304      	str	r3, [sp, #16]
 801d7de:	9307      	str	r3, [sp, #28]
 801d7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d7e4:	931a      	str	r3, [sp, #104]	; 0x68
 801d7e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d7ea:	4654      	mov	r4, sl
 801d7ec:	2205      	movs	r2, #5
 801d7ee:	4859      	ldr	r0, [pc, #356]	; (801d954 <_vfiprintf_r+0x24c>)
 801d7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7f4:	f7ff f874 	bl	801c8e0 <memchr>
 801d7f8:	9a04      	ldr	r2, [sp, #16]
 801d7fa:	b9d8      	cbnz	r0, 801d834 <_vfiprintf_r+0x12c>
 801d7fc:	06d1      	lsls	r1, r2, #27
 801d7fe:	bf44      	itt	mi
 801d800:	2320      	movmi	r3, #32
 801d802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d806:	0713      	lsls	r3, r2, #28
 801d808:	bf44      	itt	mi
 801d80a:	232b      	movmi	r3, #43	; 0x2b
 801d80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d810:	f89a 3000 	ldrb.w	r3, [sl]
 801d814:	2b2a      	cmp	r3, #42	; 0x2a
 801d816:	d015      	beq.n	801d844 <_vfiprintf_r+0x13c>
 801d818:	9a07      	ldr	r2, [sp, #28]
 801d81a:	4654      	mov	r4, sl
 801d81c:	2000      	movs	r0, #0
 801d81e:	f04f 0c0a 	mov.w	ip, #10
 801d822:	4621      	mov	r1, r4
 801d824:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d828:	3b30      	subs	r3, #48	; 0x30
 801d82a:	2b09      	cmp	r3, #9
 801d82c:	d94e      	bls.n	801d8cc <_vfiprintf_r+0x1c4>
 801d82e:	b1b0      	cbz	r0, 801d85e <_vfiprintf_r+0x156>
 801d830:	9207      	str	r2, [sp, #28]
 801d832:	e014      	b.n	801d85e <_vfiprintf_r+0x156>
 801d834:	eba0 0308 	sub.w	r3, r0, r8
 801d838:	46a2      	mov	sl, r4
 801d83a:	fa09 f303 	lsl.w	r3, r9, r3
 801d83e:	4313      	orrs	r3, r2
 801d840:	9304      	str	r3, [sp, #16]
 801d842:	e7d2      	b.n	801d7ea <_vfiprintf_r+0xe2>
 801d844:	9b03      	ldr	r3, [sp, #12]
 801d846:	1d19      	adds	r1, r3, #4
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	9103      	str	r1, [sp, #12]
 801d84e:	bfbb      	ittet	lt
 801d850:	425b      	neglt	r3, r3
 801d852:	f042 0202 	orrlt.w	r2, r2, #2
 801d856:	9307      	strge	r3, [sp, #28]
 801d858:	9307      	strlt	r3, [sp, #28]
 801d85a:	bfb8      	it	lt
 801d85c:	9204      	strlt	r2, [sp, #16]
 801d85e:	7823      	ldrb	r3, [r4, #0]
 801d860:	2b2e      	cmp	r3, #46	; 0x2e
 801d862:	d10c      	bne.n	801d87e <_vfiprintf_r+0x176>
 801d864:	7863      	ldrb	r3, [r4, #1]
 801d866:	2b2a      	cmp	r3, #42	; 0x2a
 801d868:	d135      	bne.n	801d8d6 <_vfiprintf_r+0x1ce>
 801d86a:	9b03      	ldr	r3, [sp, #12]
 801d86c:	3402      	adds	r4, #2
 801d86e:	1d1a      	adds	r2, r3, #4
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	2b00      	cmp	r3, #0
 801d874:	9203      	str	r2, [sp, #12]
 801d876:	bfb8      	it	lt
 801d878:	f04f 33ff 	movlt.w	r3, #4294967295
 801d87c:	9305      	str	r3, [sp, #20]
 801d87e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d964 <_vfiprintf_r+0x25c>
 801d882:	2203      	movs	r2, #3
 801d884:	7821      	ldrb	r1, [r4, #0]
 801d886:	4650      	mov	r0, sl
 801d888:	f7ff f82a 	bl	801c8e0 <memchr>
 801d88c:	b140      	cbz	r0, 801d8a0 <_vfiprintf_r+0x198>
 801d88e:	2340      	movs	r3, #64	; 0x40
 801d890:	eba0 000a 	sub.w	r0, r0, sl
 801d894:	3401      	adds	r4, #1
 801d896:	fa03 f000 	lsl.w	r0, r3, r0
 801d89a:	9b04      	ldr	r3, [sp, #16]
 801d89c:	4303      	orrs	r3, r0
 801d89e:	9304      	str	r3, [sp, #16]
 801d8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8a4:	2206      	movs	r2, #6
 801d8a6:	482c      	ldr	r0, [pc, #176]	; (801d958 <_vfiprintf_r+0x250>)
 801d8a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d8ac:	f7ff f818 	bl	801c8e0 <memchr>
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	d03f      	beq.n	801d934 <_vfiprintf_r+0x22c>
 801d8b4:	4b29      	ldr	r3, [pc, #164]	; (801d95c <_vfiprintf_r+0x254>)
 801d8b6:	bb1b      	cbnz	r3, 801d900 <_vfiprintf_r+0x1f8>
 801d8b8:	9b03      	ldr	r3, [sp, #12]
 801d8ba:	3307      	adds	r3, #7
 801d8bc:	f023 0307 	bic.w	r3, r3, #7
 801d8c0:	3308      	adds	r3, #8
 801d8c2:	9303      	str	r3, [sp, #12]
 801d8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8c6:	443b      	add	r3, r7
 801d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 801d8ca:	e767      	b.n	801d79c <_vfiprintf_r+0x94>
 801d8cc:	fb0c 3202 	mla	r2, ip, r2, r3
 801d8d0:	460c      	mov	r4, r1
 801d8d2:	2001      	movs	r0, #1
 801d8d4:	e7a5      	b.n	801d822 <_vfiprintf_r+0x11a>
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	3401      	adds	r4, #1
 801d8da:	f04f 0c0a 	mov.w	ip, #10
 801d8de:	4619      	mov	r1, r3
 801d8e0:	9305      	str	r3, [sp, #20]
 801d8e2:	4620      	mov	r0, r4
 801d8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d8e8:	3a30      	subs	r2, #48	; 0x30
 801d8ea:	2a09      	cmp	r2, #9
 801d8ec:	d903      	bls.n	801d8f6 <_vfiprintf_r+0x1ee>
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d0c5      	beq.n	801d87e <_vfiprintf_r+0x176>
 801d8f2:	9105      	str	r1, [sp, #20]
 801d8f4:	e7c3      	b.n	801d87e <_vfiprintf_r+0x176>
 801d8f6:	fb0c 2101 	mla	r1, ip, r1, r2
 801d8fa:	4604      	mov	r4, r0
 801d8fc:	2301      	movs	r3, #1
 801d8fe:	e7f0      	b.n	801d8e2 <_vfiprintf_r+0x1da>
 801d900:	ab03      	add	r3, sp, #12
 801d902:	462a      	mov	r2, r5
 801d904:	a904      	add	r1, sp, #16
 801d906:	4630      	mov	r0, r6
 801d908:	9300      	str	r3, [sp, #0]
 801d90a:	4b15      	ldr	r3, [pc, #84]	; (801d960 <_vfiprintf_r+0x258>)
 801d90c:	f7fc f928 	bl	8019b60 <_printf_float>
 801d910:	4607      	mov	r7, r0
 801d912:	1c78      	adds	r0, r7, #1
 801d914:	d1d6      	bne.n	801d8c4 <_vfiprintf_r+0x1bc>
 801d916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d918:	07d9      	lsls	r1, r3, #31
 801d91a:	d405      	bmi.n	801d928 <_vfiprintf_r+0x220>
 801d91c:	89ab      	ldrh	r3, [r5, #12]
 801d91e:	059a      	lsls	r2, r3, #22
 801d920:	d402      	bmi.n	801d928 <_vfiprintf_r+0x220>
 801d922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d924:	f7ff fea4 	bl	801d670 <__retarget_lock_release_recursive>
 801d928:	89ab      	ldrh	r3, [r5, #12]
 801d92a:	065b      	lsls	r3, r3, #25
 801d92c:	f53f af12 	bmi.w	801d754 <_vfiprintf_r+0x4c>
 801d930:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d932:	e711      	b.n	801d758 <_vfiprintf_r+0x50>
 801d934:	ab03      	add	r3, sp, #12
 801d936:	462a      	mov	r2, r5
 801d938:	a904      	add	r1, sp, #16
 801d93a:	4630      	mov	r0, r6
 801d93c:	9300      	str	r3, [sp, #0]
 801d93e:	4b08      	ldr	r3, [pc, #32]	; (801d960 <_vfiprintf_r+0x258>)
 801d940:	f7fc fbb4 	bl	801a0ac <_printf_i>
 801d944:	e7e4      	b.n	801d910 <_vfiprintf_r+0x208>
 801d946:	bf00      	nop
 801d948:	08073c9c 	.word	0x08073c9c
 801d94c:	08073cbc 	.word	0x08073cbc
 801d950:	08073c7c 	.word	0x08073c7c
 801d954:	08073c2c 	.word	0x08073c2c
 801d958:	08073c36 	.word	0x08073c36
 801d95c:	08019b61 	.word	0x08019b61
 801d960:	0801d6e5 	.word	0x0801d6e5
 801d964:	08073c32 	.word	0x08073c32

0801d968 <__swbuf_r>:
 801d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d96a:	460e      	mov	r6, r1
 801d96c:	4614      	mov	r4, r2
 801d96e:	4605      	mov	r5, r0
 801d970:	b118      	cbz	r0, 801d97a <__swbuf_r+0x12>
 801d972:	6983      	ldr	r3, [r0, #24]
 801d974:	b90b      	cbnz	r3, 801d97a <__swbuf_r+0x12>
 801d976:	f000 f9d7 	bl	801dd28 <__sinit>
 801d97a:	4b21      	ldr	r3, [pc, #132]	; (801da00 <__swbuf_r+0x98>)
 801d97c:	429c      	cmp	r4, r3
 801d97e:	d12b      	bne.n	801d9d8 <__swbuf_r+0x70>
 801d980:	686c      	ldr	r4, [r5, #4]
 801d982:	69a3      	ldr	r3, [r4, #24]
 801d984:	60a3      	str	r3, [r4, #8]
 801d986:	89a3      	ldrh	r3, [r4, #12]
 801d988:	071a      	lsls	r2, r3, #28
 801d98a:	d52f      	bpl.n	801d9ec <__swbuf_r+0x84>
 801d98c:	6923      	ldr	r3, [r4, #16]
 801d98e:	b36b      	cbz	r3, 801d9ec <__swbuf_r+0x84>
 801d990:	6923      	ldr	r3, [r4, #16]
 801d992:	b2f6      	uxtb	r6, r6
 801d994:	6820      	ldr	r0, [r4, #0]
 801d996:	4637      	mov	r7, r6
 801d998:	1ac0      	subs	r0, r0, r3
 801d99a:	6963      	ldr	r3, [r4, #20]
 801d99c:	4283      	cmp	r3, r0
 801d99e:	dc04      	bgt.n	801d9aa <__swbuf_r+0x42>
 801d9a0:	4621      	mov	r1, r4
 801d9a2:	4628      	mov	r0, r5
 801d9a4:	f000 f92c 	bl	801dc00 <_fflush_r>
 801d9a8:	bb30      	cbnz	r0, 801d9f8 <__swbuf_r+0x90>
 801d9aa:	68a3      	ldr	r3, [r4, #8]
 801d9ac:	3001      	adds	r0, #1
 801d9ae:	3b01      	subs	r3, #1
 801d9b0:	60a3      	str	r3, [r4, #8]
 801d9b2:	6823      	ldr	r3, [r4, #0]
 801d9b4:	1c5a      	adds	r2, r3, #1
 801d9b6:	6022      	str	r2, [r4, #0]
 801d9b8:	701e      	strb	r6, [r3, #0]
 801d9ba:	6963      	ldr	r3, [r4, #20]
 801d9bc:	4283      	cmp	r3, r0
 801d9be:	d004      	beq.n	801d9ca <__swbuf_r+0x62>
 801d9c0:	89a3      	ldrh	r3, [r4, #12]
 801d9c2:	07db      	lsls	r3, r3, #31
 801d9c4:	d506      	bpl.n	801d9d4 <__swbuf_r+0x6c>
 801d9c6:	2e0a      	cmp	r6, #10
 801d9c8:	d104      	bne.n	801d9d4 <__swbuf_r+0x6c>
 801d9ca:	4621      	mov	r1, r4
 801d9cc:	4628      	mov	r0, r5
 801d9ce:	f000 f917 	bl	801dc00 <_fflush_r>
 801d9d2:	b988      	cbnz	r0, 801d9f8 <__swbuf_r+0x90>
 801d9d4:	4638      	mov	r0, r7
 801d9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9d8:	4b0a      	ldr	r3, [pc, #40]	; (801da04 <__swbuf_r+0x9c>)
 801d9da:	429c      	cmp	r4, r3
 801d9dc:	d101      	bne.n	801d9e2 <__swbuf_r+0x7a>
 801d9de:	68ac      	ldr	r4, [r5, #8]
 801d9e0:	e7cf      	b.n	801d982 <__swbuf_r+0x1a>
 801d9e2:	4b09      	ldr	r3, [pc, #36]	; (801da08 <__swbuf_r+0xa0>)
 801d9e4:	429c      	cmp	r4, r3
 801d9e6:	bf08      	it	eq
 801d9e8:	68ec      	ldreq	r4, [r5, #12]
 801d9ea:	e7ca      	b.n	801d982 <__swbuf_r+0x1a>
 801d9ec:	4621      	mov	r1, r4
 801d9ee:	4628      	mov	r0, r5
 801d9f0:	f000 f80c 	bl	801da0c <__swsetup_r>
 801d9f4:	2800      	cmp	r0, #0
 801d9f6:	d0cb      	beq.n	801d990 <__swbuf_r+0x28>
 801d9f8:	f04f 37ff 	mov.w	r7, #4294967295
 801d9fc:	e7ea      	b.n	801d9d4 <__swbuf_r+0x6c>
 801d9fe:	bf00      	nop
 801da00:	08073c9c 	.word	0x08073c9c
 801da04:	08073cbc 	.word	0x08073cbc
 801da08:	08073c7c 	.word	0x08073c7c

0801da0c <__swsetup_r>:
 801da0c:	4b32      	ldr	r3, [pc, #200]	; (801dad8 <__swsetup_r+0xcc>)
 801da0e:	b570      	push	{r4, r5, r6, lr}
 801da10:	681d      	ldr	r5, [r3, #0]
 801da12:	4606      	mov	r6, r0
 801da14:	460c      	mov	r4, r1
 801da16:	b125      	cbz	r5, 801da22 <__swsetup_r+0x16>
 801da18:	69ab      	ldr	r3, [r5, #24]
 801da1a:	b913      	cbnz	r3, 801da22 <__swsetup_r+0x16>
 801da1c:	4628      	mov	r0, r5
 801da1e:	f000 f983 	bl	801dd28 <__sinit>
 801da22:	4b2e      	ldr	r3, [pc, #184]	; (801dadc <__swsetup_r+0xd0>)
 801da24:	429c      	cmp	r4, r3
 801da26:	d10f      	bne.n	801da48 <__swsetup_r+0x3c>
 801da28:	686c      	ldr	r4, [r5, #4]
 801da2a:	89a3      	ldrh	r3, [r4, #12]
 801da2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801da30:	0719      	lsls	r1, r3, #28
 801da32:	d42c      	bmi.n	801da8e <__swsetup_r+0x82>
 801da34:	06dd      	lsls	r5, r3, #27
 801da36:	d411      	bmi.n	801da5c <__swsetup_r+0x50>
 801da38:	2309      	movs	r3, #9
 801da3a:	6033      	str	r3, [r6, #0]
 801da3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801da40:	f04f 30ff 	mov.w	r0, #4294967295
 801da44:	81a3      	strh	r3, [r4, #12]
 801da46:	e03e      	b.n	801dac6 <__swsetup_r+0xba>
 801da48:	4b25      	ldr	r3, [pc, #148]	; (801dae0 <__swsetup_r+0xd4>)
 801da4a:	429c      	cmp	r4, r3
 801da4c:	d101      	bne.n	801da52 <__swsetup_r+0x46>
 801da4e:	68ac      	ldr	r4, [r5, #8]
 801da50:	e7eb      	b.n	801da2a <__swsetup_r+0x1e>
 801da52:	4b24      	ldr	r3, [pc, #144]	; (801dae4 <__swsetup_r+0xd8>)
 801da54:	429c      	cmp	r4, r3
 801da56:	bf08      	it	eq
 801da58:	68ec      	ldreq	r4, [r5, #12]
 801da5a:	e7e6      	b.n	801da2a <__swsetup_r+0x1e>
 801da5c:	0758      	lsls	r0, r3, #29
 801da5e:	d512      	bpl.n	801da86 <__swsetup_r+0x7a>
 801da60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da62:	b141      	cbz	r1, 801da76 <__swsetup_r+0x6a>
 801da64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da68:	4299      	cmp	r1, r3
 801da6a:	d002      	beq.n	801da72 <__swsetup_r+0x66>
 801da6c:	4630      	mov	r0, r6
 801da6e:	f7fb fef7 	bl	8019860 <_free_r>
 801da72:	2300      	movs	r3, #0
 801da74:	6363      	str	r3, [r4, #52]	; 0x34
 801da76:	89a3      	ldrh	r3, [r4, #12]
 801da78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801da7c:	81a3      	strh	r3, [r4, #12]
 801da7e:	2300      	movs	r3, #0
 801da80:	6063      	str	r3, [r4, #4]
 801da82:	6923      	ldr	r3, [r4, #16]
 801da84:	6023      	str	r3, [r4, #0]
 801da86:	89a3      	ldrh	r3, [r4, #12]
 801da88:	f043 0308 	orr.w	r3, r3, #8
 801da8c:	81a3      	strh	r3, [r4, #12]
 801da8e:	6923      	ldr	r3, [r4, #16]
 801da90:	b94b      	cbnz	r3, 801daa6 <__swsetup_r+0x9a>
 801da92:	89a3      	ldrh	r3, [r4, #12]
 801da94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801da98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801da9c:	d003      	beq.n	801daa6 <__swsetup_r+0x9a>
 801da9e:	4621      	mov	r1, r4
 801daa0:	4630      	mov	r0, r6
 801daa2:	f000 fa03 	bl	801deac <__smakebuf_r>
 801daa6:	89a0      	ldrh	r0, [r4, #12]
 801daa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801daac:	f010 0301 	ands.w	r3, r0, #1
 801dab0:	d00a      	beq.n	801dac8 <__swsetup_r+0xbc>
 801dab2:	2300      	movs	r3, #0
 801dab4:	60a3      	str	r3, [r4, #8]
 801dab6:	6963      	ldr	r3, [r4, #20]
 801dab8:	425b      	negs	r3, r3
 801daba:	61a3      	str	r3, [r4, #24]
 801dabc:	6923      	ldr	r3, [r4, #16]
 801dabe:	b943      	cbnz	r3, 801dad2 <__swsetup_r+0xc6>
 801dac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dac4:	d1ba      	bne.n	801da3c <__swsetup_r+0x30>
 801dac6:	bd70      	pop	{r4, r5, r6, pc}
 801dac8:	0781      	lsls	r1, r0, #30
 801daca:	bf58      	it	pl
 801dacc:	6963      	ldrpl	r3, [r4, #20]
 801dace:	60a3      	str	r3, [r4, #8]
 801dad0:	e7f4      	b.n	801dabc <__swsetup_r+0xb0>
 801dad2:	2000      	movs	r0, #0
 801dad4:	e7f7      	b.n	801dac6 <__swsetup_r+0xba>
 801dad6:	bf00      	nop
 801dad8:	200008fc 	.word	0x200008fc
 801dadc:	08073c9c 	.word	0x08073c9c
 801dae0:	08073cbc 	.word	0x08073cbc
 801dae4:	08073c7c 	.word	0x08073c7c

0801dae8 <abort>:
 801dae8:	2006      	movs	r0, #6
 801daea:	b508      	push	{r3, lr}
 801daec:	f000 fa46 	bl	801df7c <raise>
 801daf0:	2001      	movs	r0, #1
 801daf2:	f7e5 fc35 	bl	8003360 <_exit>
	...

0801daf8 <__sflush_r>:
 801daf8:	898a      	ldrh	r2, [r1, #12]
 801dafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dafe:	4605      	mov	r5, r0
 801db00:	0710      	lsls	r0, r2, #28
 801db02:	460c      	mov	r4, r1
 801db04:	d458      	bmi.n	801dbb8 <__sflush_r+0xc0>
 801db06:	684b      	ldr	r3, [r1, #4]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	dc05      	bgt.n	801db18 <__sflush_r+0x20>
 801db0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801db0e:	2b00      	cmp	r3, #0
 801db10:	dc02      	bgt.n	801db18 <__sflush_r+0x20>
 801db12:	2000      	movs	r0, #0
 801db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801db1a:	2e00      	cmp	r6, #0
 801db1c:	d0f9      	beq.n	801db12 <__sflush_r+0x1a>
 801db1e:	2300      	movs	r3, #0
 801db20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801db24:	682f      	ldr	r7, [r5, #0]
 801db26:	602b      	str	r3, [r5, #0]
 801db28:	d032      	beq.n	801db90 <__sflush_r+0x98>
 801db2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801db2c:	89a3      	ldrh	r3, [r4, #12]
 801db2e:	075a      	lsls	r2, r3, #29
 801db30:	d505      	bpl.n	801db3e <__sflush_r+0x46>
 801db32:	6863      	ldr	r3, [r4, #4]
 801db34:	1ac0      	subs	r0, r0, r3
 801db36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801db38:	b10b      	cbz	r3, 801db3e <__sflush_r+0x46>
 801db3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801db3c:	1ac0      	subs	r0, r0, r3
 801db3e:	2300      	movs	r3, #0
 801db40:	4602      	mov	r2, r0
 801db42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801db44:	4628      	mov	r0, r5
 801db46:	6a21      	ldr	r1, [r4, #32]
 801db48:	47b0      	blx	r6
 801db4a:	1c43      	adds	r3, r0, #1
 801db4c:	89a3      	ldrh	r3, [r4, #12]
 801db4e:	d106      	bne.n	801db5e <__sflush_r+0x66>
 801db50:	6829      	ldr	r1, [r5, #0]
 801db52:	291d      	cmp	r1, #29
 801db54:	d82c      	bhi.n	801dbb0 <__sflush_r+0xb8>
 801db56:	4a29      	ldr	r2, [pc, #164]	; (801dbfc <__sflush_r+0x104>)
 801db58:	40ca      	lsrs	r2, r1
 801db5a:	07d6      	lsls	r6, r2, #31
 801db5c:	d528      	bpl.n	801dbb0 <__sflush_r+0xb8>
 801db5e:	2200      	movs	r2, #0
 801db60:	04d9      	lsls	r1, r3, #19
 801db62:	6062      	str	r2, [r4, #4]
 801db64:	6922      	ldr	r2, [r4, #16]
 801db66:	6022      	str	r2, [r4, #0]
 801db68:	d504      	bpl.n	801db74 <__sflush_r+0x7c>
 801db6a:	1c42      	adds	r2, r0, #1
 801db6c:	d101      	bne.n	801db72 <__sflush_r+0x7a>
 801db6e:	682b      	ldr	r3, [r5, #0]
 801db70:	b903      	cbnz	r3, 801db74 <__sflush_r+0x7c>
 801db72:	6560      	str	r0, [r4, #84]	; 0x54
 801db74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db76:	602f      	str	r7, [r5, #0]
 801db78:	2900      	cmp	r1, #0
 801db7a:	d0ca      	beq.n	801db12 <__sflush_r+0x1a>
 801db7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db80:	4299      	cmp	r1, r3
 801db82:	d002      	beq.n	801db8a <__sflush_r+0x92>
 801db84:	4628      	mov	r0, r5
 801db86:	f7fb fe6b 	bl	8019860 <_free_r>
 801db8a:	2000      	movs	r0, #0
 801db8c:	6360      	str	r0, [r4, #52]	; 0x34
 801db8e:	e7c1      	b.n	801db14 <__sflush_r+0x1c>
 801db90:	6a21      	ldr	r1, [r4, #32]
 801db92:	2301      	movs	r3, #1
 801db94:	4628      	mov	r0, r5
 801db96:	47b0      	blx	r6
 801db98:	1c41      	adds	r1, r0, #1
 801db9a:	d1c7      	bne.n	801db2c <__sflush_r+0x34>
 801db9c:	682b      	ldr	r3, [r5, #0]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d0c4      	beq.n	801db2c <__sflush_r+0x34>
 801dba2:	2b1d      	cmp	r3, #29
 801dba4:	d001      	beq.n	801dbaa <__sflush_r+0xb2>
 801dba6:	2b16      	cmp	r3, #22
 801dba8:	d101      	bne.n	801dbae <__sflush_r+0xb6>
 801dbaa:	602f      	str	r7, [r5, #0]
 801dbac:	e7b1      	b.n	801db12 <__sflush_r+0x1a>
 801dbae:	89a3      	ldrh	r3, [r4, #12]
 801dbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbb4:	81a3      	strh	r3, [r4, #12]
 801dbb6:	e7ad      	b.n	801db14 <__sflush_r+0x1c>
 801dbb8:	690f      	ldr	r7, [r1, #16]
 801dbba:	2f00      	cmp	r7, #0
 801dbbc:	d0a9      	beq.n	801db12 <__sflush_r+0x1a>
 801dbbe:	0793      	lsls	r3, r2, #30
 801dbc0:	680e      	ldr	r6, [r1, #0]
 801dbc2:	600f      	str	r7, [r1, #0]
 801dbc4:	bf0c      	ite	eq
 801dbc6:	694b      	ldreq	r3, [r1, #20]
 801dbc8:	2300      	movne	r3, #0
 801dbca:	eba6 0807 	sub.w	r8, r6, r7
 801dbce:	608b      	str	r3, [r1, #8]
 801dbd0:	f1b8 0f00 	cmp.w	r8, #0
 801dbd4:	dd9d      	ble.n	801db12 <__sflush_r+0x1a>
 801dbd6:	4643      	mov	r3, r8
 801dbd8:	463a      	mov	r2, r7
 801dbda:	6a21      	ldr	r1, [r4, #32]
 801dbdc:	4628      	mov	r0, r5
 801dbde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dbe0:	47b0      	blx	r6
 801dbe2:	2800      	cmp	r0, #0
 801dbe4:	dc06      	bgt.n	801dbf4 <__sflush_r+0xfc>
 801dbe6:	89a3      	ldrh	r3, [r4, #12]
 801dbe8:	f04f 30ff 	mov.w	r0, #4294967295
 801dbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbf0:	81a3      	strh	r3, [r4, #12]
 801dbf2:	e78f      	b.n	801db14 <__sflush_r+0x1c>
 801dbf4:	4407      	add	r7, r0
 801dbf6:	eba8 0800 	sub.w	r8, r8, r0
 801dbfa:	e7e9      	b.n	801dbd0 <__sflush_r+0xd8>
 801dbfc:	20400001 	.word	0x20400001

0801dc00 <_fflush_r>:
 801dc00:	b538      	push	{r3, r4, r5, lr}
 801dc02:	690b      	ldr	r3, [r1, #16]
 801dc04:	4605      	mov	r5, r0
 801dc06:	460c      	mov	r4, r1
 801dc08:	b913      	cbnz	r3, 801dc10 <_fflush_r+0x10>
 801dc0a:	2500      	movs	r5, #0
 801dc0c:	4628      	mov	r0, r5
 801dc0e:	bd38      	pop	{r3, r4, r5, pc}
 801dc10:	b118      	cbz	r0, 801dc1a <_fflush_r+0x1a>
 801dc12:	6983      	ldr	r3, [r0, #24]
 801dc14:	b90b      	cbnz	r3, 801dc1a <_fflush_r+0x1a>
 801dc16:	f000 f887 	bl	801dd28 <__sinit>
 801dc1a:	4b14      	ldr	r3, [pc, #80]	; (801dc6c <_fflush_r+0x6c>)
 801dc1c:	429c      	cmp	r4, r3
 801dc1e:	d11b      	bne.n	801dc58 <_fflush_r+0x58>
 801dc20:	686c      	ldr	r4, [r5, #4]
 801dc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d0ef      	beq.n	801dc0a <_fflush_r+0xa>
 801dc2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dc2c:	07d0      	lsls	r0, r2, #31
 801dc2e:	d404      	bmi.n	801dc3a <_fflush_r+0x3a>
 801dc30:	0599      	lsls	r1, r3, #22
 801dc32:	d402      	bmi.n	801dc3a <_fflush_r+0x3a>
 801dc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc36:	f7ff fd1a 	bl	801d66e <__retarget_lock_acquire_recursive>
 801dc3a:	4628      	mov	r0, r5
 801dc3c:	4621      	mov	r1, r4
 801dc3e:	f7ff ff5b 	bl	801daf8 <__sflush_r>
 801dc42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc44:	4605      	mov	r5, r0
 801dc46:	07da      	lsls	r2, r3, #31
 801dc48:	d4e0      	bmi.n	801dc0c <_fflush_r+0xc>
 801dc4a:	89a3      	ldrh	r3, [r4, #12]
 801dc4c:	059b      	lsls	r3, r3, #22
 801dc4e:	d4dd      	bmi.n	801dc0c <_fflush_r+0xc>
 801dc50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc52:	f7ff fd0d 	bl	801d670 <__retarget_lock_release_recursive>
 801dc56:	e7d9      	b.n	801dc0c <_fflush_r+0xc>
 801dc58:	4b05      	ldr	r3, [pc, #20]	; (801dc70 <_fflush_r+0x70>)
 801dc5a:	429c      	cmp	r4, r3
 801dc5c:	d101      	bne.n	801dc62 <_fflush_r+0x62>
 801dc5e:	68ac      	ldr	r4, [r5, #8]
 801dc60:	e7df      	b.n	801dc22 <_fflush_r+0x22>
 801dc62:	4b04      	ldr	r3, [pc, #16]	; (801dc74 <_fflush_r+0x74>)
 801dc64:	429c      	cmp	r4, r3
 801dc66:	bf08      	it	eq
 801dc68:	68ec      	ldreq	r4, [r5, #12]
 801dc6a:	e7da      	b.n	801dc22 <_fflush_r+0x22>
 801dc6c:	08073c9c 	.word	0x08073c9c
 801dc70:	08073cbc 	.word	0x08073cbc
 801dc74:	08073c7c 	.word	0x08073c7c

0801dc78 <std>:
 801dc78:	2300      	movs	r3, #0
 801dc7a:	b510      	push	{r4, lr}
 801dc7c:	4604      	mov	r4, r0
 801dc7e:	6083      	str	r3, [r0, #8]
 801dc80:	8181      	strh	r1, [r0, #12]
 801dc82:	4619      	mov	r1, r3
 801dc84:	6643      	str	r3, [r0, #100]	; 0x64
 801dc86:	81c2      	strh	r2, [r0, #14]
 801dc88:	2208      	movs	r2, #8
 801dc8a:	6183      	str	r3, [r0, #24]
 801dc8c:	e9c0 3300 	strd	r3, r3, [r0]
 801dc90:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dc94:	305c      	adds	r0, #92	; 0x5c
 801dc96:	f7fb fdc4 	bl	8019822 <memset>
 801dc9a:	4b05      	ldr	r3, [pc, #20]	; (801dcb0 <std+0x38>)
 801dc9c:	6224      	str	r4, [r4, #32]
 801dc9e:	6263      	str	r3, [r4, #36]	; 0x24
 801dca0:	4b04      	ldr	r3, [pc, #16]	; (801dcb4 <std+0x3c>)
 801dca2:	62a3      	str	r3, [r4, #40]	; 0x28
 801dca4:	4b04      	ldr	r3, [pc, #16]	; (801dcb8 <std+0x40>)
 801dca6:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dca8:	4b04      	ldr	r3, [pc, #16]	; (801dcbc <std+0x44>)
 801dcaa:	6323      	str	r3, [r4, #48]	; 0x30
 801dcac:	bd10      	pop	{r4, pc}
 801dcae:	bf00      	nop
 801dcb0:	0801dfb5 	.word	0x0801dfb5
 801dcb4:	0801dfd7 	.word	0x0801dfd7
 801dcb8:	0801e00f 	.word	0x0801e00f
 801dcbc:	0801e033 	.word	0x0801e033

0801dcc0 <_cleanup_r>:
 801dcc0:	4901      	ldr	r1, [pc, #4]	; (801dcc8 <_cleanup_r+0x8>)
 801dcc2:	f000 b8af 	b.w	801de24 <_fwalk_reent>
 801dcc6:	bf00      	nop
 801dcc8:	0801dc01 	.word	0x0801dc01

0801dccc <__sfmoreglue>:
 801dccc:	b570      	push	{r4, r5, r6, lr}
 801dcce:	2268      	movs	r2, #104	; 0x68
 801dcd0:	1e4d      	subs	r5, r1, #1
 801dcd2:	460e      	mov	r6, r1
 801dcd4:	4355      	muls	r5, r2
 801dcd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dcda:	f7fb fe2d 	bl	8019938 <_malloc_r>
 801dcde:	4604      	mov	r4, r0
 801dce0:	b140      	cbz	r0, 801dcf4 <__sfmoreglue+0x28>
 801dce2:	2100      	movs	r1, #0
 801dce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dce8:	e9c0 1600 	strd	r1, r6, [r0]
 801dcec:	300c      	adds	r0, #12
 801dcee:	60a0      	str	r0, [r4, #8]
 801dcf0:	f7fb fd97 	bl	8019822 <memset>
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	bd70      	pop	{r4, r5, r6, pc}

0801dcf8 <__sfp_lock_acquire>:
 801dcf8:	4801      	ldr	r0, [pc, #4]	; (801dd00 <__sfp_lock_acquire+0x8>)
 801dcfa:	f7ff bcb8 	b.w	801d66e <__retarget_lock_acquire_recursive>
 801dcfe:	bf00      	nop
 801dd00:	20004065 	.word	0x20004065

0801dd04 <__sfp_lock_release>:
 801dd04:	4801      	ldr	r0, [pc, #4]	; (801dd0c <__sfp_lock_release+0x8>)
 801dd06:	f7ff bcb3 	b.w	801d670 <__retarget_lock_release_recursive>
 801dd0a:	bf00      	nop
 801dd0c:	20004065 	.word	0x20004065

0801dd10 <__sinit_lock_acquire>:
 801dd10:	4801      	ldr	r0, [pc, #4]	; (801dd18 <__sinit_lock_acquire+0x8>)
 801dd12:	f7ff bcac 	b.w	801d66e <__retarget_lock_acquire_recursive>
 801dd16:	bf00      	nop
 801dd18:	20004066 	.word	0x20004066

0801dd1c <__sinit_lock_release>:
 801dd1c:	4801      	ldr	r0, [pc, #4]	; (801dd24 <__sinit_lock_release+0x8>)
 801dd1e:	f7ff bca7 	b.w	801d670 <__retarget_lock_release_recursive>
 801dd22:	bf00      	nop
 801dd24:	20004066 	.word	0x20004066

0801dd28 <__sinit>:
 801dd28:	b510      	push	{r4, lr}
 801dd2a:	4604      	mov	r4, r0
 801dd2c:	f7ff fff0 	bl	801dd10 <__sinit_lock_acquire>
 801dd30:	69a3      	ldr	r3, [r4, #24]
 801dd32:	b11b      	cbz	r3, 801dd3c <__sinit+0x14>
 801dd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd38:	f7ff bff0 	b.w	801dd1c <__sinit_lock_release>
 801dd3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dd40:	6523      	str	r3, [r4, #80]	; 0x50
 801dd42:	4620      	mov	r0, r4
 801dd44:	4b12      	ldr	r3, [pc, #72]	; (801dd90 <__sinit+0x68>)
 801dd46:	4a13      	ldr	r2, [pc, #76]	; (801dd94 <__sinit+0x6c>)
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	62a2      	str	r2, [r4, #40]	; 0x28
 801dd4c:	42a3      	cmp	r3, r4
 801dd4e:	bf04      	itt	eq
 801dd50:	2301      	moveq	r3, #1
 801dd52:	61a3      	streq	r3, [r4, #24]
 801dd54:	f000 f820 	bl	801dd98 <__sfp>
 801dd58:	6060      	str	r0, [r4, #4]
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	f000 f81c 	bl	801dd98 <__sfp>
 801dd60:	60a0      	str	r0, [r4, #8]
 801dd62:	4620      	mov	r0, r4
 801dd64:	f000 f818 	bl	801dd98 <__sfp>
 801dd68:	2200      	movs	r2, #0
 801dd6a:	2104      	movs	r1, #4
 801dd6c:	60e0      	str	r0, [r4, #12]
 801dd6e:	6860      	ldr	r0, [r4, #4]
 801dd70:	f7ff ff82 	bl	801dc78 <std>
 801dd74:	2201      	movs	r2, #1
 801dd76:	2109      	movs	r1, #9
 801dd78:	68a0      	ldr	r0, [r4, #8]
 801dd7a:	f7ff ff7d 	bl	801dc78 <std>
 801dd7e:	2202      	movs	r2, #2
 801dd80:	2112      	movs	r1, #18
 801dd82:	68e0      	ldr	r0, [r4, #12]
 801dd84:	f7ff ff78 	bl	801dc78 <std>
 801dd88:	2301      	movs	r3, #1
 801dd8a:	61a3      	str	r3, [r4, #24]
 801dd8c:	e7d2      	b.n	801dd34 <__sinit+0xc>
 801dd8e:	bf00      	nop
 801dd90:	08073834 	.word	0x08073834
 801dd94:	0801dcc1 	.word	0x0801dcc1

0801dd98 <__sfp>:
 801dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd9a:	4607      	mov	r7, r0
 801dd9c:	f7ff ffac 	bl	801dcf8 <__sfp_lock_acquire>
 801dda0:	4b1e      	ldr	r3, [pc, #120]	; (801de1c <__sfp+0x84>)
 801dda2:	681e      	ldr	r6, [r3, #0]
 801dda4:	69b3      	ldr	r3, [r6, #24]
 801dda6:	b913      	cbnz	r3, 801ddae <__sfp+0x16>
 801dda8:	4630      	mov	r0, r6
 801ddaa:	f7ff ffbd 	bl	801dd28 <__sinit>
 801ddae:	3648      	adds	r6, #72	; 0x48
 801ddb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ddb4:	3b01      	subs	r3, #1
 801ddb6:	d503      	bpl.n	801ddc0 <__sfp+0x28>
 801ddb8:	6833      	ldr	r3, [r6, #0]
 801ddba:	b30b      	cbz	r3, 801de00 <__sfp+0x68>
 801ddbc:	6836      	ldr	r6, [r6, #0]
 801ddbe:	e7f7      	b.n	801ddb0 <__sfp+0x18>
 801ddc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ddc4:	b9d5      	cbnz	r5, 801ddfc <__sfp+0x64>
 801ddc6:	4b16      	ldr	r3, [pc, #88]	; (801de20 <__sfp+0x88>)
 801ddc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ddcc:	6665      	str	r5, [r4, #100]	; 0x64
 801ddce:	60e3      	str	r3, [r4, #12]
 801ddd0:	f7ff fc4c 	bl	801d66c <__retarget_lock_init_recursive>
 801ddd4:	f7ff ff96 	bl	801dd04 <__sfp_lock_release>
 801ddd8:	2208      	movs	r2, #8
 801ddda:	4629      	mov	r1, r5
 801dddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dde0:	6025      	str	r5, [r4, #0]
 801dde2:	61a5      	str	r5, [r4, #24]
 801dde4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dde8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ddec:	f7fb fd19 	bl	8019822 <memset>
 801ddf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ddf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ddf8:	4620      	mov	r0, r4
 801ddfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddfc:	3468      	adds	r4, #104	; 0x68
 801ddfe:	e7d9      	b.n	801ddb4 <__sfp+0x1c>
 801de00:	2104      	movs	r1, #4
 801de02:	4638      	mov	r0, r7
 801de04:	f7ff ff62 	bl	801dccc <__sfmoreglue>
 801de08:	4604      	mov	r4, r0
 801de0a:	6030      	str	r0, [r6, #0]
 801de0c:	2800      	cmp	r0, #0
 801de0e:	d1d5      	bne.n	801ddbc <__sfp+0x24>
 801de10:	f7ff ff78 	bl	801dd04 <__sfp_lock_release>
 801de14:	230c      	movs	r3, #12
 801de16:	603b      	str	r3, [r7, #0]
 801de18:	e7ee      	b.n	801ddf8 <__sfp+0x60>
 801de1a:	bf00      	nop
 801de1c:	08073834 	.word	0x08073834
 801de20:	ffff0001 	.word	0xffff0001

0801de24 <_fwalk_reent>:
 801de24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de28:	4606      	mov	r6, r0
 801de2a:	4688      	mov	r8, r1
 801de2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801de30:	2700      	movs	r7, #0
 801de32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801de36:	f1b9 0901 	subs.w	r9, r9, #1
 801de3a:	d505      	bpl.n	801de48 <_fwalk_reent+0x24>
 801de3c:	6824      	ldr	r4, [r4, #0]
 801de3e:	2c00      	cmp	r4, #0
 801de40:	d1f7      	bne.n	801de32 <_fwalk_reent+0xe>
 801de42:	4638      	mov	r0, r7
 801de44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de48:	89ab      	ldrh	r3, [r5, #12]
 801de4a:	2b01      	cmp	r3, #1
 801de4c:	d907      	bls.n	801de5e <_fwalk_reent+0x3a>
 801de4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801de52:	3301      	adds	r3, #1
 801de54:	d003      	beq.n	801de5e <_fwalk_reent+0x3a>
 801de56:	4629      	mov	r1, r5
 801de58:	4630      	mov	r0, r6
 801de5a:	47c0      	blx	r8
 801de5c:	4307      	orrs	r7, r0
 801de5e:	3568      	adds	r5, #104	; 0x68
 801de60:	e7e9      	b.n	801de36 <_fwalk_reent+0x12>

0801de62 <__swhatbuf_r>:
 801de62:	b570      	push	{r4, r5, r6, lr}
 801de64:	460e      	mov	r6, r1
 801de66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de6a:	b096      	sub	sp, #88	; 0x58
 801de6c:	4614      	mov	r4, r2
 801de6e:	2900      	cmp	r1, #0
 801de70:	461d      	mov	r5, r3
 801de72:	da08      	bge.n	801de86 <__swhatbuf_r+0x24>
 801de74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801de78:	2200      	movs	r2, #0
 801de7a:	602a      	str	r2, [r5, #0]
 801de7c:	061a      	lsls	r2, r3, #24
 801de7e:	d410      	bmi.n	801dea2 <__swhatbuf_r+0x40>
 801de80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de84:	e00e      	b.n	801dea4 <__swhatbuf_r+0x42>
 801de86:	466a      	mov	r2, sp
 801de88:	f000 f8fa 	bl	801e080 <_fstat_r>
 801de8c:	2800      	cmp	r0, #0
 801de8e:	dbf1      	blt.n	801de74 <__swhatbuf_r+0x12>
 801de90:	9a01      	ldr	r2, [sp, #4]
 801de92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801de96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801de9a:	425a      	negs	r2, r3
 801de9c:	415a      	adcs	r2, r3
 801de9e:	602a      	str	r2, [r5, #0]
 801dea0:	e7ee      	b.n	801de80 <__swhatbuf_r+0x1e>
 801dea2:	2340      	movs	r3, #64	; 0x40
 801dea4:	2000      	movs	r0, #0
 801dea6:	6023      	str	r3, [r4, #0]
 801dea8:	b016      	add	sp, #88	; 0x58
 801deaa:	bd70      	pop	{r4, r5, r6, pc}

0801deac <__smakebuf_r>:
 801deac:	898b      	ldrh	r3, [r1, #12]
 801deae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801deb0:	079d      	lsls	r5, r3, #30
 801deb2:	4606      	mov	r6, r0
 801deb4:	460c      	mov	r4, r1
 801deb6:	d507      	bpl.n	801dec8 <__smakebuf_r+0x1c>
 801deb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801debc:	6023      	str	r3, [r4, #0]
 801debe:	6123      	str	r3, [r4, #16]
 801dec0:	2301      	movs	r3, #1
 801dec2:	6163      	str	r3, [r4, #20]
 801dec4:	b002      	add	sp, #8
 801dec6:	bd70      	pop	{r4, r5, r6, pc}
 801dec8:	ab01      	add	r3, sp, #4
 801deca:	466a      	mov	r2, sp
 801decc:	f7ff ffc9 	bl	801de62 <__swhatbuf_r>
 801ded0:	9900      	ldr	r1, [sp, #0]
 801ded2:	4605      	mov	r5, r0
 801ded4:	4630      	mov	r0, r6
 801ded6:	f7fb fd2f 	bl	8019938 <_malloc_r>
 801deda:	b948      	cbnz	r0, 801def0 <__smakebuf_r+0x44>
 801dedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dee0:	059a      	lsls	r2, r3, #22
 801dee2:	d4ef      	bmi.n	801dec4 <__smakebuf_r+0x18>
 801dee4:	f023 0303 	bic.w	r3, r3, #3
 801dee8:	f043 0302 	orr.w	r3, r3, #2
 801deec:	81a3      	strh	r3, [r4, #12]
 801deee:	e7e3      	b.n	801deb8 <__smakebuf_r+0xc>
 801def0:	4b0d      	ldr	r3, [pc, #52]	; (801df28 <__smakebuf_r+0x7c>)
 801def2:	62b3      	str	r3, [r6, #40]	; 0x28
 801def4:	89a3      	ldrh	r3, [r4, #12]
 801def6:	6020      	str	r0, [r4, #0]
 801def8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801defc:	6120      	str	r0, [r4, #16]
 801defe:	81a3      	strh	r3, [r4, #12]
 801df00:	9b00      	ldr	r3, [sp, #0]
 801df02:	6163      	str	r3, [r4, #20]
 801df04:	9b01      	ldr	r3, [sp, #4]
 801df06:	b15b      	cbz	r3, 801df20 <__smakebuf_r+0x74>
 801df08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df0c:	4630      	mov	r0, r6
 801df0e:	f000 f8c9 	bl	801e0a4 <_isatty_r>
 801df12:	b128      	cbz	r0, 801df20 <__smakebuf_r+0x74>
 801df14:	89a3      	ldrh	r3, [r4, #12]
 801df16:	f023 0303 	bic.w	r3, r3, #3
 801df1a:	f043 0301 	orr.w	r3, r3, #1
 801df1e:	81a3      	strh	r3, [r4, #12]
 801df20:	89a0      	ldrh	r0, [r4, #12]
 801df22:	4305      	orrs	r5, r0
 801df24:	81a5      	strh	r5, [r4, #12]
 801df26:	e7cd      	b.n	801dec4 <__smakebuf_r+0x18>
 801df28:	0801dcc1 	.word	0x0801dcc1

0801df2c <_raise_r>:
 801df2c:	291f      	cmp	r1, #31
 801df2e:	b538      	push	{r3, r4, r5, lr}
 801df30:	4604      	mov	r4, r0
 801df32:	460d      	mov	r5, r1
 801df34:	d904      	bls.n	801df40 <_raise_r+0x14>
 801df36:	2316      	movs	r3, #22
 801df38:	6003      	str	r3, [r0, #0]
 801df3a:	f04f 30ff 	mov.w	r0, #4294967295
 801df3e:	bd38      	pop	{r3, r4, r5, pc}
 801df40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801df42:	b112      	cbz	r2, 801df4a <_raise_r+0x1e>
 801df44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df48:	b94b      	cbnz	r3, 801df5e <_raise_r+0x32>
 801df4a:	4620      	mov	r0, r4
 801df4c:	f000 f830 	bl	801dfb0 <_getpid_r>
 801df50:	462a      	mov	r2, r5
 801df52:	4601      	mov	r1, r0
 801df54:	4620      	mov	r0, r4
 801df56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df5a:	f000 b817 	b.w	801df8c <_kill_r>
 801df5e:	2b01      	cmp	r3, #1
 801df60:	d00a      	beq.n	801df78 <_raise_r+0x4c>
 801df62:	1c59      	adds	r1, r3, #1
 801df64:	d103      	bne.n	801df6e <_raise_r+0x42>
 801df66:	2316      	movs	r3, #22
 801df68:	6003      	str	r3, [r0, #0]
 801df6a:	2001      	movs	r0, #1
 801df6c:	e7e7      	b.n	801df3e <_raise_r+0x12>
 801df6e:	2400      	movs	r4, #0
 801df70:	4628      	mov	r0, r5
 801df72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801df76:	4798      	blx	r3
 801df78:	2000      	movs	r0, #0
 801df7a:	e7e0      	b.n	801df3e <_raise_r+0x12>

0801df7c <raise>:
 801df7c:	4b02      	ldr	r3, [pc, #8]	; (801df88 <raise+0xc>)
 801df7e:	4601      	mov	r1, r0
 801df80:	6818      	ldr	r0, [r3, #0]
 801df82:	f7ff bfd3 	b.w	801df2c <_raise_r>
 801df86:	bf00      	nop
 801df88:	200008fc 	.word	0x200008fc

0801df8c <_kill_r>:
 801df8c:	b538      	push	{r3, r4, r5, lr}
 801df8e:	2300      	movs	r3, #0
 801df90:	4d06      	ldr	r5, [pc, #24]	; (801dfac <_kill_r+0x20>)
 801df92:	4604      	mov	r4, r0
 801df94:	4608      	mov	r0, r1
 801df96:	4611      	mov	r1, r2
 801df98:	602b      	str	r3, [r5, #0]
 801df9a:	f7e5 f9d1 	bl	8003340 <_kill>
 801df9e:	1c43      	adds	r3, r0, #1
 801dfa0:	d102      	bne.n	801dfa8 <_kill_r+0x1c>
 801dfa2:	682b      	ldr	r3, [r5, #0]
 801dfa4:	b103      	cbz	r3, 801dfa8 <_kill_r+0x1c>
 801dfa6:	6023      	str	r3, [r4, #0]
 801dfa8:	bd38      	pop	{r3, r4, r5, pc}
 801dfaa:	bf00      	nop
 801dfac:	20004060 	.word	0x20004060

0801dfb0 <_getpid_r>:
 801dfb0:	f7e5 b9be 	b.w	8003330 <_getpid>

0801dfb4 <__sread>:
 801dfb4:	b510      	push	{r4, lr}
 801dfb6:	460c      	mov	r4, r1
 801dfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfbc:	f000 f894 	bl	801e0e8 <_read_r>
 801dfc0:	2800      	cmp	r0, #0
 801dfc2:	bfab      	itete	ge
 801dfc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dfc6:	89a3      	ldrhlt	r3, [r4, #12]
 801dfc8:	181b      	addge	r3, r3, r0
 801dfca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dfce:	bfac      	ite	ge
 801dfd0:	6563      	strge	r3, [r4, #84]	; 0x54
 801dfd2:	81a3      	strhlt	r3, [r4, #12]
 801dfd4:	bd10      	pop	{r4, pc}

0801dfd6 <__swrite>:
 801dfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfda:	461f      	mov	r7, r3
 801dfdc:	898b      	ldrh	r3, [r1, #12]
 801dfde:	4605      	mov	r5, r0
 801dfe0:	460c      	mov	r4, r1
 801dfe2:	05db      	lsls	r3, r3, #23
 801dfe4:	4616      	mov	r6, r2
 801dfe6:	d505      	bpl.n	801dff4 <__swrite+0x1e>
 801dfe8:	2302      	movs	r3, #2
 801dfea:	2200      	movs	r2, #0
 801dfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dff0:	f000 f868 	bl	801e0c4 <_lseek_r>
 801dff4:	89a3      	ldrh	r3, [r4, #12]
 801dff6:	4632      	mov	r2, r6
 801dff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dffc:	4628      	mov	r0, r5
 801dffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e002:	81a3      	strh	r3, [r4, #12]
 801e004:	463b      	mov	r3, r7
 801e006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e00a:	f000 b817 	b.w	801e03c <_write_r>

0801e00e <__sseek>:
 801e00e:	b510      	push	{r4, lr}
 801e010:	460c      	mov	r4, r1
 801e012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e016:	f000 f855 	bl	801e0c4 <_lseek_r>
 801e01a:	1c43      	adds	r3, r0, #1
 801e01c:	89a3      	ldrh	r3, [r4, #12]
 801e01e:	bf15      	itete	ne
 801e020:	6560      	strne	r0, [r4, #84]	; 0x54
 801e022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e02a:	81a3      	strheq	r3, [r4, #12]
 801e02c:	bf18      	it	ne
 801e02e:	81a3      	strhne	r3, [r4, #12]
 801e030:	bd10      	pop	{r4, pc}

0801e032 <__sclose>:
 801e032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e036:	f000 b813 	b.w	801e060 <_close_r>
	...

0801e03c <_write_r>:
 801e03c:	b538      	push	{r3, r4, r5, lr}
 801e03e:	4604      	mov	r4, r0
 801e040:	4d06      	ldr	r5, [pc, #24]	; (801e05c <_write_r+0x20>)
 801e042:	4608      	mov	r0, r1
 801e044:	4611      	mov	r1, r2
 801e046:	2200      	movs	r2, #0
 801e048:	602a      	str	r2, [r5, #0]
 801e04a:	461a      	mov	r2, r3
 801e04c:	f7e5 f9af 	bl	80033ae <_write>
 801e050:	1c43      	adds	r3, r0, #1
 801e052:	d102      	bne.n	801e05a <_write_r+0x1e>
 801e054:	682b      	ldr	r3, [r5, #0]
 801e056:	b103      	cbz	r3, 801e05a <_write_r+0x1e>
 801e058:	6023      	str	r3, [r4, #0]
 801e05a:	bd38      	pop	{r3, r4, r5, pc}
 801e05c:	20004060 	.word	0x20004060

0801e060 <_close_r>:
 801e060:	b538      	push	{r3, r4, r5, lr}
 801e062:	2300      	movs	r3, #0
 801e064:	4d05      	ldr	r5, [pc, #20]	; (801e07c <_close_r+0x1c>)
 801e066:	4604      	mov	r4, r0
 801e068:	4608      	mov	r0, r1
 801e06a:	602b      	str	r3, [r5, #0]
 801e06c:	f7e5 f9bb 	bl	80033e6 <_close>
 801e070:	1c43      	adds	r3, r0, #1
 801e072:	d102      	bne.n	801e07a <_close_r+0x1a>
 801e074:	682b      	ldr	r3, [r5, #0]
 801e076:	b103      	cbz	r3, 801e07a <_close_r+0x1a>
 801e078:	6023      	str	r3, [r4, #0]
 801e07a:	bd38      	pop	{r3, r4, r5, pc}
 801e07c:	20004060 	.word	0x20004060

0801e080 <_fstat_r>:
 801e080:	b538      	push	{r3, r4, r5, lr}
 801e082:	2300      	movs	r3, #0
 801e084:	4d06      	ldr	r5, [pc, #24]	; (801e0a0 <_fstat_r+0x20>)
 801e086:	4604      	mov	r4, r0
 801e088:	4608      	mov	r0, r1
 801e08a:	4611      	mov	r1, r2
 801e08c:	602b      	str	r3, [r5, #0]
 801e08e:	f7e5 f9b6 	bl	80033fe <_fstat>
 801e092:	1c43      	adds	r3, r0, #1
 801e094:	d102      	bne.n	801e09c <_fstat_r+0x1c>
 801e096:	682b      	ldr	r3, [r5, #0]
 801e098:	b103      	cbz	r3, 801e09c <_fstat_r+0x1c>
 801e09a:	6023      	str	r3, [r4, #0]
 801e09c:	bd38      	pop	{r3, r4, r5, pc}
 801e09e:	bf00      	nop
 801e0a0:	20004060 	.word	0x20004060

0801e0a4 <_isatty_r>:
 801e0a4:	b538      	push	{r3, r4, r5, lr}
 801e0a6:	2300      	movs	r3, #0
 801e0a8:	4d05      	ldr	r5, [pc, #20]	; (801e0c0 <_isatty_r+0x1c>)
 801e0aa:	4604      	mov	r4, r0
 801e0ac:	4608      	mov	r0, r1
 801e0ae:	602b      	str	r3, [r5, #0]
 801e0b0:	f7e5 f9b5 	bl	800341e <_isatty>
 801e0b4:	1c43      	adds	r3, r0, #1
 801e0b6:	d102      	bne.n	801e0be <_isatty_r+0x1a>
 801e0b8:	682b      	ldr	r3, [r5, #0]
 801e0ba:	b103      	cbz	r3, 801e0be <_isatty_r+0x1a>
 801e0bc:	6023      	str	r3, [r4, #0]
 801e0be:	bd38      	pop	{r3, r4, r5, pc}
 801e0c0:	20004060 	.word	0x20004060

0801e0c4 <_lseek_r>:
 801e0c4:	b538      	push	{r3, r4, r5, lr}
 801e0c6:	4604      	mov	r4, r0
 801e0c8:	4d06      	ldr	r5, [pc, #24]	; (801e0e4 <_lseek_r+0x20>)
 801e0ca:	4608      	mov	r0, r1
 801e0cc:	4611      	mov	r1, r2
 801e0ce:	2200      	movs	r2, #0
 801e0d0:	602a      	str	r2, [r5, #0]
 801e0d2:	461a      	mov	r2, r3
 801e0d4:	f7e5 f9ae 	bl	8003434 <_lseek>
 801e0d8:	1c43      	adds	r3, r0, #1
 801e0da:	d102      	bne.n	801e0e2 <_lseek_r+0x1e>
 801e0dc:	682b      	ldr	r3, [r5, #0]
 801e0de:	b103      	cbz	r3, 801e0e2 <_lseek_r+0x1e>
 801e0e0:	6023      	str	r3, [r4, #0]
 801e0e2:	bd38      	pop	{r3, r4, r5, pc}
 801e0e4:	20004060 	.word	0x20004060

0801e0e8 <_read_r>:
 801e0e8:	b538      	push	{r3, r4, r5, lr}
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	4d06      	ldr	r5, [pc, #24]	; (801e108 <_read_r+0x20>)
 801e0ee:	4608      	mov	r0, r1
 801e0f0:	4611      	mov	r1, r2
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	602a      	str	r2, [r5, #0]
 801e0f6:	461a      	mov	r2, r3
 801e0f8:	f7e5 f93c 	bl	8003374 <_read>
 801e0fc:	1c43      	adds	r3, r0, #1
 801e0fe:	d102      	bne.n	801e106 <_read_r+0x1e>
 801e100:	682b      	ldr	r3, [r5, #0]
 801e102:	b103      	cbz	r3, 801e106 <_read_r+0x1e>
 801e104:	6023      	str	r3, [r4, #0]
 801e106:	bd38      	pop	{r3, r4, r5, pc}
 801e108:	20004060 	.word	0x20004060

0801e10c <round>:
 801e10c:	ec51 0b10 	vmov	r0, r1, d0
 801e110:	b570      	push	{r4, r5, r6, lr}
 801e112:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801e116:	460b      	mov	r3, r1
 801e118:	ee10 2a10 	vmov	r2, s0
 801e11c:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801e120:	2c13      	cmp	r4, #19
 801e122:	dc19      	bgt.n	801e158 <round+0x4c>
 801e124:	2c00      	cmp	r4, #0
 801e126:	da09      	bge.n	801e13c <round+0x30>
 801e128:	3401      	adds	r4, #1
 801e12a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801e12e:	d103      	bne.n	801e138 <round+0x2c>
 801e130:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801e134:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e138:	2200      	movs	r2, #0
 801e13a:	e028      	b.n	801e18e <round+0x82>
 801e13c:	4d15      	ldr	r5, [pc, #84]	; (801e194 <round+0x88>)
 801e13e:	4125      	asrs	r5, r4
 801e140:	ea01 0605 	and.w	r6, r1, r5
 801e144:	4332      	orrs	r2, r6
 801e146:	d00e      	beq.n	801e166 <round+0x5a>
 801e148:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801e14c:	fa42 f404 	asr.w	r4, r2, r4
 801e150:	4423      	add	r3, r4
 801e152:	ea23 0305 	bic.w	r3, r3, r5
 801e156:	e7ef      	b.n	801e138 <round+0x2c>
 801e158:	2c33      	cmp	r4, #51	; 0x33
 801e15a:	dd07      	ble.n	801e16c <round+0x60>
 801e15c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801e160:	d101      	bne.n	801e166 <round+0x5a>
 801e162:	f7e2 f897 	bl	8000294 <__adddf3>
 801e166:	ec41 0b10 	vmov	d0, r0, r1
 801e16a:	bd70      	pop	{r4, r5, r6, pc}
 801e16c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801e170:	f04f 35ff 	mov.w	r5, #4294967295
 801e174:	40f5      	lsrs	r5, r6
 801e176:	4228      	tst	r0, r5
 801e178:	d0f5      	beq.n	801e166 <round+0x5a>
 801e17a:	2101      	movs	r1, #1
 801e17c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801e180:	fa01 f404 	lsl.w	r4, r1, r4
 801e184:	1912      	adds	r2, r2, r4
 801e186:	bf28      	it	cs
 801e188:	185b      	addcs	r3, r3, r1
 801e18a:	ea22 0205 	bic.w	r2, r2, r5
 801e18e:	4619      	mov	r1, r3
 801e190:	4610      	mov	r0, r2
 801e192:	e7e8      	b.n	801e166 <round+0x5a>
 801e194:	000fffff 	.word	0x000fffff

0801e198 <log10>:
 801e198:	b538      	push	{r3, r4, r5, lr}
 801e19a:	ec55 4b10 	vmov	r4, r5, d0
 801e19e:	ed2d 8b02 	vpush	{d8}
 801e1a2:	f000 f88d 	bl	801e2c0 <__ieee754_log10>
 801e1a6:	4622      	mov	r2, r4
 801e1a8:	462b      	mov	r3, r5
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	4629      	mov	r1, r5
 801e1ae:	eeb0 8a40 	vmov.f32	s16, s0
 801e1b2:	eef0 8a60 	vmov.f32	s17, s1
 801e1b6:	f7e2 fcbd 	bl	8000b34 <__aeabi_dcmpun>
 801e1ba:	b998      	cbnz	r0, 801e1e4 <log10+0x4c>
 801e1bc:	2200      	movs	r2, #0
 801e1be:	2300      	movs	r3, #0
 801e1c0:	4620      	mov	r0, r4
 801e1c2:	4629      	mov	r1, r5
 801e1c4:	f7e2 fc98 	bl	8000af8 <__aeabi_dcmple>
 801e1c8:	b160      	cbz	r0, 801e1e4 <log10+0x4c>
 801e1ca:	2200      	movs	r2, #0
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	4620      	mov	r0, r4
 801e1d0:	4629      	mov	r1, r5
 801e1d2:	f7e2 fc7d 	bl	8000ad0 <__aeabi_dcmpeq>
 801e1d6:	b160      	cbz	r0, 801e1f2 <log10+0x5a>
 801e1d8:	f7fb fadc 	bl	8019794 <__errno>
 801e1dc:	2322      	movs	r3, #34	; 0x22
 801e1de:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801e208 <log10+0x70>
 801e1e2:	6003      	str	r3, [r0, #0]
 801e1e4:	eeb0 0a48 	vmov.f32	s0, s16
 801e1e8:	eef0 0a68 	vmov.f32	s1, s17
 801e1ec:	ecbd 8b02 	vpop	{d8}
 801e1f0:	bd38      	pop	{r3, r4, r5, pc}
 801e1f2:	f7fb facf 	bl	8019794 <__errno>
 801e1f6:	2321      	movs	r3, #33	; 0x21
 801e1f8:	ecbd 8b02 	vpop	{d8}
 801e1fc:	6003      	str	r3, [r0, #0]
 801e1fe:	4804      	ldr	r0, [pc, #16]	; (801e210 <log10+0x78>)
 801e200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e204:	f7ff b9d8 	b.w	801d5b8 <nan>
 801e208:	00000000 	.word	0x00000000
 801e20c:	fff00000 	.word	0xfff00000
 801e210:	08073c78 	.word	0x08073c78

0801e214 <expf>:
 801e214:	b508      	push	{r3, lr}
 801e216:	ed2d 8b02 	vpush	{d8}
 801e21a:	eef0 8a40 	vmov.f32	s17, s0
 801e21e:	f000 f8d9 	bl	801e3d4 <__ieee754_expf>
 801e222:	eeb0 8a40 	vmov.f32	s16, s0
 801e226:	eeb0 0a68 	vmov.f32	s0, s17
 801e22a:	f000 f9c7 	bl	801e5bc <finitef>
 801e22e:	b160      	cbz	r0, 801e24a <expf+0x36>
 801e230:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e270 <expf+0x5c>
 801e234:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e23c:	dd0a      	ble.n	801e254 <expf+0x40>
 801e23e:	f7fb faa9 	bl	8019794 <__errno>
 801e242:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801e274 <expf+0x60>
 801e246:	2322      	movs	r3, #34	; 0x22
 801e248:	6003      	str	r3, [r0, #0]
 801e24a:	eeb0 0a48 	vmov.f32	s0, s16
 801e24e:	ecbd 8b02 	vpop	{d8}
 801e252:	bd08      	pop	{r3, pc}
 801e254:	eddf 7a08 	vldr	s15, [pc, #32]	; 801e278 <expf+0x64>
 801e258:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e260:	d5f3      	bpl.n	801e24a <expf+0x36>
 801e262:	f7fb fa97 	bl	8019794 <__errno>
 801e266:	2322      	movs	r3, #34	; 0x22
 801e268:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801e27c <expf+0x68>
 801e26c:	6003      	str	r3, [r0, #0]
 801e26e:	e7ec      	b.n	801e24a <expf+0x36>
 801e270:	42b17180 	.word	0x42b17180
 801e274:	7f800000 	.word	0x7f800000
 801e278:	c2cff1b5 	.word	0xc2cff1b5
 801e27c:	00000000 	.word	0x00000000

0801e280 <sqrtf>:
 801e280:	b508      	push	{r3, lr}
 801e282:	ed2d 8b02 	vpush	{d8}
 801e286:	eeb0 8a40 	vmov.f32	s16, s0
 801e28a:	f000 f971 	bl	801e570 <__ieee754_sqrtf>
 801e28e:	eeb4 8a48 	vcmp.f32	s16, s16
 801e292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e296:	d60c      	bvs.n	801e2b2 <sqrtf+0x32>
 801e298:	eddf 8a07 	vldr	s17, [pc, #28]	; 801e2b8 <sqrtf+0x38>
 801e29c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801e2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2a4:	d505      	bpl.n	801e2b2 <sqrtf+0x32>
 801e2a6:	f7fb fa75 	bl	8019794 <__errno>
 801e2aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801e2ae:	2321      	movs	r3, #33	; 0x21
 801e2b0:	6003      	str	r3, [r0, #0]
 801e2b2:	ecbd 8b02 	vpop	{d8}
 801e2b6:	bd08      	pop	{r3, pc}
	...

0801e2c0 <__ieee754_log10>:
 801e2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2c4:	ec55 4b10 	vmov	r4, r5, d0
 801e2c8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801e2cc:	462b      	mov	r3, r5
 801e2ce:	da2f      	bge.n	801e330 <__ieee754_log10+0x70>
 801e2d0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801e2d4:	4322      	orrs	r2, r4
 801e2d6:	d109      	bne.n	801e2ec <__ieee754_log10+0x2c>
 801e2d8:	2200      	movs	r2, #0
 801e2da:	2300      	movs	r3, #0
 801e2dc:	2000      	movs	r0, #0
 801e2de:	493a      	ldr	r1, [pc, #232]	; (801e3c8 <__ieee754_log10+0x108>)
 801e2e0:	f7e2 fab8 	bl	8000854 <__aeabi_ddiv>
 801e2e4:	ec41 0b10 	vmov	d0, r0, r1
 801e2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2ec:	2d00      	cmp	r5, #0
 801e2ee:	da09      	bge.n	801e304 <__ieee754_log10+0x44>
 801e2f0:	ee10 2a10 	vmov	r2, s0
 801e2f4:	ee10 0a10 	vmov	r0, s0
 801e2f8:	4629      	mov	r1, r5
 801e2fa:	f7e1 ffc9 	bl	8000290 <__aeabi_dsub>
 801e2fe:	2200      	movs	r2, #0
 801e300:	2300      	movs	r3, #0
 801e302:	e7ed      	b.n	801e2e0 <__ieee754_log10+0x20>
 801e304:	2200      	movs	r2, #0
 801e306:	4b31      	ldr	r3, [pc, #196]	; (801e3cc <__ieee754_log10+0x10c>)
 801e308:	4629      	mov	r1, r5
 801e30a:	ee10 0a10 	vmov	r0, s0
 801e30e:	f7e2 f977 	bl	8000600 <__aeabi_dmul>
 801e312:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801e316:	4604      	mov	r4, r0
 801e318:	460d      	mov	r5, r1
 801e31a:	460b      	mov	r3, r1
 801e31c:	492c      	ldr	r1, [pc, #176]	; (801e3d0 <__ieee754_log10+0x110>)
 801e31e:	428b      	cmp	r3, r1
 801e320:	dd08      	ble.n	801e334 <__ieee754_log10+0x74>
 801e322:	4622      	mov	r2, r4
 801e324:	462b      	mov	r3, r5
 801e326:	4620      	mov	r0, r4
 801e328:	4629      	mov	r1, r5
 801e32a:	f7e1 ffb3 	bl	8000294 <__adddf3>
 801e32e:	e7d9      	b.n	801e2e4 <__ieee754_log10+0x24>
 801e330:	2200      	movs	r2, #0
 801e332:	e7f3      	b.n	801e31c <__ieee754_log10+0x5c>
 801e334:	1518      	asrs	r0, r3, #20
 801e336:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801e33a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801e33e:	4410      	add	r0, r2
 801e340:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801e344:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e348:	f7e2 f8f0 	bl	800052c <__aeabi_i2d>
 801e34c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801e350:	4606      	mov	r6, r0
 801e352:	460f      	mov	r7, r1
 801e354:	3303      	adds	r3, #3
 801e356:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801e35a:	ec45 4b10 	vmov	d0, r4, r5
 801e35e:	f000 f93b 	bl	801e5d8 <__ieee754_log>
 801e362:	4630      	mov	r0, r6
 801e364:	4639      	mov	r1, r7
 801e366:	a312      	add	r3, pc, #72	; (adr r3, 801e3b0 <__ieee754_log10+0xf0>)
 801e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e36c:	ec59 8b10 	vmov	r8, r9, d0
 801e370:	f7e2 f946 	bl	8000600 <__aeabi_dmul>
 801e374:	4604      	mov	r4, r0
 801e376:	460d      	mov	r5, r1
 801e378:	4640      	mov	r0, r8
 801e37a:	4649      	mov	r1, r9
 801e37c:	a30e      	add	r3, pc, #56	; (adr r3, 801e3b8 <__ieee754_log10+0xf8>)
 801e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e382:	f7e2 f93d 	bl	8000600 <__aeabi_dmul>
 801e386:	4602      	mov	r2, r0
 801e388:	460b      	mov	r3, r1
 801e38a:	4620      	mov	r0, r4
 801e38c:	4629      	mov	r1, r5
 801e38e:	f7e1 ff81 	bl	8000294 <__adddf3>
 801e392:	4604      	mov	r4, r0
 801e394:	460d      	mov	r5, r1
 801e396:	4630      	mov	r0, r6
 801e398:	4639      	mov	r1, r7
 801e39a:	a309      	add	r3, pc, #36	; (adr r3, 801e3c0 <__ieee754_log10+0x100>)
 801e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3a0:	f7e2 f92e 	bl	8000600 <__aeabi_dmul>
 801e3a4:	4602      	mov	r2, r0
 801e3a6:	460b      	mov	r3, r1
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	4629      	mov	r1, r5
 801e3ac:	e7bd      	b.n	801e32a <__ieee754_log10+0x6a>
 801e3ae:	bf00      	nop
 801e3b0:	11f12b36 	.word	0x11f12b36
 801e3b4:	3d59fef3 	.word	0x3d59fef3
 801e3b8:	1526e50e 	.word	0x1526e50e
 801e3bc:	3fdbcb7b 	.word	0x3fdbcb7b
 801e3c0:	509f6000 	.word	0x509f6000
 801e3c4:	3fd34413 	.word	0x3fd34413
 801e3c8:	c3500000 	.word	0xc3500000
 801e3cc:	43500000 	.word	0x43500000
 801e3d0:	7fefffff 	.word	0x7fefffff

0801e3d4 <__ieee754_expf>:
 801e3d4:	ee10 2a10 	vmov	r2, s0
 801e3d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801e3dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e3e0:	d902      	bls.n	801e3e8 <__ieee754_expf+0x14>
 801e3e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e3e6:	4770      	bx	lr
 801e3e8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801e3ec:	d105      	bne.n	801e3fa <__ieee754_expf+0x26>
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e528 <__ieee754_expf+0x154>
 801e3f4:	fe00 0a27 	vseleq.f32	s0, s0, s15
 801e3f8:	4770      	bx	lr
 801e3fa:	484c      	ldr	r0, [pc, #304]	; (801e52c <__ieee754_expf+0x158>)
 801e3fc:	4282      	cmp	r2, r0
 801e3fe:	dd02      	ble.n	801e406 <__ieee754_expf+0x32>
 801e400:	2000      	movs	r0, #0
 801e402:	f000 b8d5 	b.w	801e5b0 <__math_oflowf>
 801e406:	2a00      	cmp	r2, #0
 801e408:	da05      	bge.n	801e416 <__ieee754_expf+0x42>
 801e40a:	4a49      	ldr	r2, [pc, #292]	; (801e530 <__ieee754_expf+0x15c>)
 801e40c:	4291      	cmp	r1, r2
 801e40e:	d902      	bls.n	801e416 <__ieee754_expf+0x42>
 801e410:	2000      	movs	r0, #0
 801e412:	f000 b8c7 	b.w	801e5a4 <__math_uflowf>
 801e416:	4a47      	ldr	r2, [pc, #284]	; (801e534 <__ieee754_expf+0x160>)
 801e418:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e41c:	4291      	cmp	r1, r2
 801e41e:	d952      	bls.n	801e4c6 <__ieee754_expf+0xf2>
 801e420:	4a45      	ldr	r2, [pc, #276]	; (801e538 <__ieee754_expf+0x164>)
 801e422:	4291      	cmp	r1, r2
 801e424:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801e428:	d834      	bhi.n	801e494 <__ieee754_expf+0xc0>
 801e42a:	4944      	ldr	r1, [pc, #272]	; (801e53c <__ieee754_expf+0x168>)
 801e42c:	4411      	add	r1, r2
 801e42e:	ed91 7a00 	vldr	s14, [r1]
 801e432:	4943      	ldr	r1, [pc, #268]	; (801e540 <__ieee754_expf+0x16c>)
 801e434:	ee30 7a47 	vsub.f32	s14, s0, s14
 801e438:	440a      	add	r2, r1
 801e43a:	edd2 7a00 	vldr	s15, [r2]
 801e43e:	f1c3 0201 	rsb	r2, r3, #1
 801e442:	1ad2      	subs	r2, r2, r3
 801e444:	ee37 0a67 	vsub.f32	s0, s14, s15
 801e448:	ee20 6a00 	vmul.f32	s12, s0, s0
 801e44c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801e544 <__ieee754_expf+0x170>
 801e450:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e548 <__ieee754_expf+0x174>
 801e454:	eee6 6a05 	vfma.f32	s13, s12, s10
 801e458:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801e54c <__ieee754_expf+0x178>
 801e45c:	eea6 5a86 	vfma.f32	s10, s13, s12
 801e460:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801e550 <__ieee754_expf+0x17c>
 801e464:	eee5 6a06 	vfma.f32	s13, s10, s12
 801e468:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801e554 <__ieee754_expf+0x180>
 801e46c:	eea6 5a86 	vfma.f32	s10, s13, s12
 801e470:	eef0 6a40 	vmov.f32	s13, s0
 801e474:	eee5 6a46 	vfms.f32	s13, s10, s12
 801e478:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801e47c:	ee20 5a26 	vmul.f32	s10, s0, s13
 801e480:	bb92      	cbnz	r2, 801e4e8 <__ieee754_expf+0x114>
 801e482:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801e486:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801e48a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e48e:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801e492:	4770      	bx	lr
 801e494:	4b30      	ldr	r3, [pc, #192]	; (801e558 <__ieee754_expf+0x184>)
 801e496:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801e55c <__ieee754_expf+0x188>
 801e49a:	4413      	add	r3, r2
 801e49c:	eddf 6a30 	vldr	s13, [pc, #192]	; 801e560 <__ieee754_expf+0x18c>
 801e4a0:	edd3 7a00 	vldr	s15, [r3]
 801e4a4:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e4a8:	eeb0 7a40 	vmov.f32	s14, s0
 801e4ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e4b0:	ee17 2a90 	vmov	r2, s15
 801e4b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4b8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801e4bc:	eddf 6a29 	vldr	s13, [pc, #164]	; 801e564 <__ieee754_expf+0x190>
 801e4c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e4c4:	e7be      	b.n	801e444 <__ieee754_expf+0x70>
 801e4c6:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801e4ca:	d20b      	bcs.n	801e4e4 <__ieee754_expf+0x110>
 801e4cc:	eddf 6a26 	vldr	s13, [pc, #152]	; 801e568 <__ieee754_expf+0x194>
 801e4d0:	ee70 6a26 	vadd.f32	s13, s0, s13
 801e4d4:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4dc:	dd02      	ble.n	801e4e4 <__ieee754_expf+0x110>
 801e4de:	ee30 0a25 	vadd.f32	s0, s0, s11
 801e4e2:	4770      	bx	lr
 801e4e4:	2200      	movs	r2, #0
 801e4e6:	e7af      	b.n	801e448 <__ieee754_expf+0x74>
 801e4e8:	ee76 6a66 	vsub.f32	s13, s12, s13
 801e4ec:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801e4f0:	bfb8      	it	lt
 801e4f2:	3264      	addlt	r2, #100	; 0x64
 801e4f4:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801e4f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e4fc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801e500:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801e504:	ee17 3a90 	vmov	r3, s15
 801e508:	bfb5      	itete	lt
 801e50a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801e56c <__ieee754_expf+0x198>
 801e50e:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801e512:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801e516:	ee00 3a10 	vmovge	s0, r3
 801e51a:	bfbc      	itt	lt
 801e51c:	ee00 3a10 	vmovlt	s0, r3
 801e520:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801e524:	4770      	bx	lr
 801e526:	bf00      	nop
 801e528:	00000000 	.word	0x00000000
 801e52c:	42b17217 	.word	0x42b17217
 801e530:	42cff1b5 	.word	0x42cff1b5
 801e534:	3eb17218 	.word	0x3eb17218
 801e538:	3f851591 	.word	0x3f851591
 801e53c:	08073ce4 	.word	0x08073ce4
 801e540:	08073cec 	.word	0x08073cec
 801e544:	3331bb4c 	.word	0x3331bb4c
 801e548:	b5ddea0e 	.word	0xb5ddea0e
 801e54c:	388ab355 	.word	0x388ab355
 801e550:	bb360b61 	.word	0xbb360b61
 801e554:	3e2aaaab 	.word	0x3e2aaaab
 801e558:	08073cdc 	.word	0x08073cdc
 801e55c:	3fb8aa3b 	.word	0x3fb8aa3b
 801e560:	3f317180 	.word	0x3f317180
 801e564:	3717f7d1 	.word	0x3717f7d1
 801e568:	7149f2ca 	.word	0x7149f2ca
 801e56c:	0d800000 	.word	0x0d800000

0801e570 <__ieee754_sqrtf>:
 801e570:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e574:	4770      	bx	lr

0801e576 <with_errnof>:
 801e576:	b513      	push	{r0, r1, r4, lr}
 801e578:	4604      	mov	r4, r0
 801e57a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e57e:	f7fb f909 	bl	8019794 <__errno>
 801e582:	ed9d 0a01 	vldr	s0, [sp, #4]
 801e586:	6004      	str	r4, [r0, #0]
 801e588:	b002      	add	sp, #8
 801e58a:	bd10      	pop	{r4, pc}

0801e58c <xflowf>:
 801e58c:	b130      	cbz	r0, 801e59c <xflowf+0x10>
 801e58e:	eef1 7a40 	vneg.f32	s15, s0
 801e592:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e596:	2022      	movs	r0, #34	; 0x22
 801e598:	f7ff bfed 	b.w	801e576 <with_errnof>
 801e59c:	eef0 7a40 	vmov.f32	s15, s0
 801e5a0:	e7f7      	b.n	801e592 <xflowf+0x6>
	...

0801e5a4 <__math_uflowf>:
 801e5a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e5ac <__math_uflowf+0x8>
 801e5a8:	f7ff bff0 	b.w	801e58c <xflowf>
 801e5ac:	10000000 	.word	0x10000000

0801e5b0 <__math_oflowf>:
 801e5b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e5b8 <__math_oflowf+0x8>
 801e5b4:	f7ff bfea 	b.w	801e58c <xflowf>
 801e5b8:	70000000 	.word	0x70000000

0801e5bc <finitef>:
 801e5bc:	b082      	sub	sp, #8
 801e5be:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e5c2:	9801      	ldr	r0, [sp, #4]
 801e5c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e5c8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801e5cc:	bfac      	ite	ge
 801e5ce:	2000      	movge	r0, #0
 801e5d0:	2001      	movlt	r0, #1
 801e5d2:	b002      	add	sp, #8
 801e5d4:	4770      	bx	lr
	...

0801e5d8 <__ieee754_log>:
 801e5d8:	ec51 0b10 	vmov	r0, r1, d0
 801e5dc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801e5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5e4:	460d      	mov	r5, r1
 801e5e6:	ed2d 8b04 	vpush	{d8-d9}
 801e5ea:	b083      	sub	sp, #12
 801e5ec:	da29      	bge.n	801e642 <__ieee754_log+0x6a>
 801e5ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e5f2:	ee10 2a10 	vmov	r2, s0
 801e5f6:	4303      	orrs	r3, r0
 801e5f8:	d10c      	bne.n	801e614 <__ieee754_log+0x3c>
 801e5fa:	2200      	movs	r2, #0
 801e5fc:	2300      	movs	r3, #0
 801e5fe:	2000      	movs	r0, #0
 801e600:	49cd      	ldr	r1, [pc, #820]	; (801e938 <__ieee754_log+0x360>)
 801e602:	f7e2 f927 	bl	8000854 <__aeabi_ddiv>
 801e606:	ec41 0b10 	vmov	d0, r0, r1
 801e60a:	b003      	add	sp, #12
 801e60c:	ecbd 8b04 	vpop	{d8-d9}
 801e610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e614:	2900      	cmp	r1, #0
 801e616:	da05      	bge.n	801e624 <__ieee754_log+0x4c>
 801e618:	460b      	mov	r3, r1
 801e61a:	f7e1 fe39 	bl	8000290 <__aeabi_dsub>
 801e61e:	2200      	movs	r2, #0
 801e620:	2300      	movs	r3, #0
 801e622:	e7ee      	b.n	801e602 <__ieee754_log+0x2a>
 801e624:	4bc5      	ldr	r3, [pc, #788]	; (801e93c <__ieee754_log+0x364>)
 801e626:	2200      	movs	r2, #0
 801e628:	f7e1 ffea 	bl	8000600 <__aeabi_dmul>
 801e62c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801e630:	460d      	mov	r5, r1
 801e632:	4ac3      	ldr	r2, [pc, #780]	; (801e940 <__ieee754_log+0x368>)
 801e634:	4295      	cmp	r5, r2
 801e636:	dd06      	ble.n	801e646 <__ieee754_log+0x6e>
 801e638:	4602      	mov	r2, r0
 801e63a:	460b      	mov	r3, r1
 801e63c:	f7e1 fe2a 	bl	8000294 <__adddf3>
 801e640:	e7e1      	b.n	801e606 <__ieee754_log+0x2e>
 801e642:	2300      	movs	r3, #0
 801e644:	e7f5      	b.n	801e632 <__ieee754_log+0x5a>
 801e646:	152c      	asrs	r4, r5, #20
 801e648:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801e64c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801e650:	441c      	add	r4, r3
 801e652:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801e656:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801e65a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e65e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801e662:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801e666:	4bb7      	ldr	r3, [pc, #732]	; (801e944 <__ieee754_log+0x36c>)
 801e668:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801e66c:	ea42 0105 	orr.w	r1, r2, r5
 801e670:	2200      	movs	r2, #0
 801e672:	f7e1 fe0d 	bl	8000290 <__aeabi_dsub>
 801e676:	1cab      	adds	r3, r5, #2
 801e678:	4682      	mov	sl, r0
 801e67a:	468b      	mov	fp, r1
 801e67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e680:	2200      	movs	r2, #0
 801e682:	2b02      	cmp	r3, #2
 801e684:	dc53      	bgt.n	801e72e <__ieee754_log+0x156>
 801e686:	2300      	movs	r3, #0
 801e688:	f7e2 fa22 	bl	8000ad0 <__aeabi_dcmpeq>
 801e68c:	b1d0      	cbz	r0, 801e6c4 <__ieee754_log+0xec>
 801e68e:	2c00      	cmp	r4, #0
 801e690:	f000 8122 	beq.w	801e8d8 <__ieee754_log+0x300>
 801e694:	4620      	mov	r0, r4
 801e696:	f7e1 ff49 	bl	800052c <__aeabi_i2d>
 801e69a:	4606      	mov	r6, r0
 801e69c:	460f      	mov	r7, r1
 801e69e:	a390      	add	r3, pc, #576	; (adr r3, 801e8e0 <__ieee754_log+0x308>)
 801e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a4:	f7e1 ffac 	bl	8000600 <__aeabi_dmul>
 801e6a8:	4604      	mov	r4, r0
 801e6aa:	460d      	mov	r5, r1
 801e6ac:	4630      	mov	r0, r6
 801e6ae:	4639      	mov	r1, r7
 801e6b0:	a38d      	add	r3, pc, #564	; (adr r3, 801e8e8 <__ieee754_log+0x310>)
 801e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b6:	f7e1 ffa3 	bl	8000600 <__aeabi_dmul>
 801e6ba:	4602      	mov	r2, r0
 801e6bc:	460b      	mov	r3, r1
 801e6be:	4620      	mov	r0, r4
 801e6c0:	4629      	mov	r1, r5
 801e6c2:	e7bb      	b.n	801e63c <__ieee754_log+0x64>
 801e6c4:	a38a      	add	r3, pc, #552	; (adr r3, 801e8f0 <__ieee754_log+0x318>)
 801e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6ca:	4650      	mov	r0, sl
 801e6cc:	4659      	mov	r1, fp
 801e6ce:	f7e1 ff97 	bl	8000600 <__aeabi_dmul>
 801e6d2:	4602      	mov	r2, r0
 801e6d4:	460b      	mov	r3, r1
 801e6d6:	2000      	movs	r0, #0
 801e6d8:	499b      	ldr	r1, [pc, #620]	; (801e948 <__ieee754_log+0x370>)
 801e6da:	f7e1 fdd9 	bl	8000290 <__aeabi_dsub>
 801e6de:	4606      	mov	r6, r0
 801e6e0:	460f      	mov	r7, r1
 801e6e2:	4652      	mov	r2, sl
 801e6e4:	465b      	mov	r3, fp
 801e6e6:	4650      	mov	r0, sl
 801e6e8:	4659      	mov	r1, fp
 801e6ea:	f7e1 ff89 	bl	8000600 <__aeabi_dmul>
 801e6ee:	4602      	mov	r2, r0
 801e6f0:	460b      	mov	r3, r1
 801e6f2:	4630      	mov	r0, r6
 801e6f4:	4639      	mov	r1, r7
 801e6f6:	f7e1 ff83 	bl	8000600 <__aeabi_dmul>
 801e6fa:	4606      	mov	r6, r0
 801e6fc:	460f      	mov	r7, r1
 801e6fe:	b914      	cbnz	r4, 801e706 <__ieee754_log+0x12e>
 801e700:	4632      	mov	r2, r6
 801e702:	463b      	mov	r3, r7
 801e704:	e0a2      	b.n	801e84c <__ieee754_log+0x274>
 801e706:	4620      	mov	r0, r4
 801e708:	f7e1 ff10 	bl	800052c <__aeabi_i2d>
 801e70c:	4680      	mov	r8, r0
 801e70e:	4689      	mov	r9, r1
 801e710:	a373      	add	r3, pc, #460	; (adr r3, 801e8e0 <__ieee754_log+0x308>)
 801e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e716:	f7e1 ff73 	bl	8000600 <__aeabi_dmul>
 801e71a:	4604      	mov	r4, r0
 801e71c:	460d      	mov	r5, r1
 801e71e:	4640      	mov	r0, r8
 801e720:	4649      	mov	r1, r9
 801e722:	a371      	add	r3, pc, #452	; (adr r3, 801e8e8 <__ieee754_log+0x310>)
 801e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e728:	f7e1 ff6a 	bl	8000600 <__aeabi_dmul>
 801e72c:	e0a7      	b.n	801e87e <__ieee754_log+0x2a6>
 801e72e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e732:	f7e1 fdaf 	bl	8000294 <__adddf3>
 801e736:	4602      	mov	r2, r0
 801e738:	460b      	mov	r3, r1
 801e73a:	4650      	mov	r0, sl
 801e73c:	4659      	mov	r1, fp
 801e73e:	f7e2 f889 	bl	8000854 <__aeabi_ddiv>
 801e742:	ec41 0b18 	vmov	d8, r0, r1
 801e746:	4620      	mov	r0, r4
 801e748:	f7e1 fef0 	bl	800052c <__aeabi_i2d>
 801e74c:	ec53 2b18 	vmov	r2, r3, d8
 801e750:	ec41 0b19 	vmov	d9, r0, r1
 801e754:	ec51 0b18 	vmov	r0, r1, d8
 801e758:	f7e1 ff52 	bl	8000600 <__aeabi_dmul>
 801e75c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801e760:	4602      	mov	r2, r0
 801e762:	4680      	mov	r8, r0
 801e764:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801e768:	4689      	mov	r9, r1
 801e76a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801e76e:	9301      	str	r3, [sp, #4]
 801e770:	460b      	mov	r3, r1
 801e772:	f7e1 ff45 	bl	8000600 <__aeabi_dmul>
 801e776:	4606      	mov	r6, r0
 801e778:	460f      	mov	r7, r1
 801e77a:	3551      	adds	r5, #81	; 0x51
 801e77c:	a35e      	add	r3, pc, #376	; (adr r3, 801e8f8 <__ieee754_log+0x320>)
 801e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e782:	f7e1 ff3d 	bl	8000600 <__aeabi_dmul>
 801e786:	a35e      	add	r3, pc, #376	; (adr r3, 801e900 <__ieee754_log+0x328>)
 801e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e78c:	f7e1 fd82 	bl	8000294 <__adddf3>
 801e790:	4632      	mov	r2, r6
 801e792:	463b      	mov	r3, r7
 801e794:	f7e1 ff34 	bl	8000600 <__aeabi_dmul>
 801e798:	a35b      	add	r3, pc, #364	; (adr r3, 801e908 <__ieee754_log+0x330>)
 801e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e79e:	f7e1 fd79 	bl	8000294 <__adddf3>
 801e7a2:	4632      	mov	r2, r6
 801e7a4:	463b      	mov	r3, r7
 801e7a6:	f7e1 ff2b 	bl	8000600 <__aeabi_dmul>
 801e7aa:	a359      	add	r3, pc, #356	; (adr r3, 801e910 <__ieee754_log+0x338>)
 801e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b0:	f7e1 fd70 	bl	8000294 <__adddf3>
 801e7b4:	4642      	mov	r2, r8
 801e7b6:	464b      	mov	r3, r9
 801e7b8:	f7e1 ff22 	bl	8000600 <__aeabi_dmul>
 801e7bc:	4680      	mov	r8, r0
 801e7be:	4689      	mov	r9, r1
 801e7c0:	4630      	mov	r0, r6
 801e7c2:	4639      	mov	r1, r7
 801e7c4:	a354      	add	r3, pc, #336	; (adr r3, 801e918 <__ieee754_log+0x340>)
 801e7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ca:	f7e1 ff19 	bl	8000600 <__aeabi_dmul>
 801e7ce:	a354      	add	r3, pc, #336	; (adr r3, 801e920 <__ieee754_log+0x348>)
 801e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d4:	f7e1 fd5e 	bl	8000294 <__adddf3>
 801e7d8:	4632      	mov	r2, r6
 801e7da:	463b      	mov	r3, r7
 801e7dc:	f7e1 ff10 	bl	8000600 <__aeabi_dmul>
 801e7e0:	a351      	add	r3, pc, #324	; (adr r3, 801e928 <__ieee754_log+0x350>)
 801e7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7e6:	f7e1 fd55 	bl	8000294 <__adddf3>
 801e7ea:	4632      	mov	r2, r6
 801e7ec:	463b      	mov	r3, r7
 801e7ee:	f7e1 ff07 	bl	8000600 <__aeabi_dmul>
 801e7f2:	460b      	mov	r3, r1
 801e7f4:	4602      	mov	r2, r0
 801e7f6:	4649      	mov	r1, r9
 801e7f8:	4640      	mov	r0, r8
 801e7fa:	f7e1 fd4b 	bl	8000294 <__adddf3>
 801e7fe:	9b01      	ldr	r3, [sp, #4]
 801e800:	4680      	mov	r8, r0
 801e802:	4689      	mov	r9, r1
 801e804:	431d      	orrs	r5, r3
 801e806:	2d00      	cmp	r5, #0
 801e808:	dd48      	ble.n	801e89c <__ieee754_log+0x2c4>
 801e80a:	2200      	movs	r2, #0
 801e80c:	4b4e      	ldr	r3, [pc, #312]	; (801e948 <__ieee754_log+0x370>)
 801e80e:	4650      	mov	r0, sl
 801e810:	4659      	mov	r1, fp
 801e812:	f7e1 fef5 	bl	8000600 <__aeabi_dmul>
 801e816:	4652      	mov	r2, sl
 801e818:	465b      	mov	r3, fp
 801e81a:	f7e1 fef1 	bl	8000600 <__aeabi_dmul>
 801e81e:	4602      	mov	r2, r0
 801e820:	460b      	mov	r3, r1
 801e822:	4606      	mov	r6, r0
 801e824:	460f      	mov	r7, r1
 801e826:	4640      	mov	r0, r8
 801e828:	4649      	mov	r1, r9
 801e82a:	f7e1 fd33 	bl	8000294 <__adddf3>
 801e82e:	ec53 2b18 	vmov	r2, r3, d8
 801e832:	f7e1 fee5 	bl	8000600 <__aeabi_dmul>
 801e836:	4680      	mov	r8, r0
 801e838:	4689      	mov	r9, r1
 801e83a:	b964      	cbnz	r4, 801e856 <__ieee754_log+0x27e>
 801e83c:	4602      	mov	r2, r0
 801e83e:	460b      	mov	r3, r1
 801e840:	4630      	mov	r0, r6
 801e842:	4639      	mov	r1, r7
 801e844:	f7e1 fd24 	bl	8000290 <__aeabi_dsub>
 801e848:	4602      	mov	r2, r0
 801e84a:	460b      	mov	r3, r1
 801e84c:	4650      	mov	r0, sl
 801e84e:	4659      	mov	r1, fp
 801e850:	f7e1 fd1e 	bl	8000290 <__aeabi_dsub>
 801e854:	e6d7      	b.n	801e606 <__ieee754_log+0x2e>
 801e856:	a322      	add	r3, pc, #136	; (adr r3, 801e8e0 <__ieee754_log+0x308>)
 801e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e85c:	ec51 0b19 	vmov	r0, r1, d9
 801e860:	f7e1 fece 	bl	8000600 <__aeabi_dmul>
 801e864:	4604      	mov	r4, r0
 801e866:	460d      	mov	r5, r1
 801e868:	a31f      	add	r3, pc, #124	; (adr r3, 801e8e8 <__ieee754_log+0x310>)
 801e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e86e:	ec51 0b19 	vmov	r0, r1, d9
 801e872:	f7e1 fec5 	bl	8000600 <__aeabi_dmul>
 801e876:	4642      	mov	r2, r8
 801e878:	464b      	mov	r3, r9
 801e87a:	f7e1 fd0b 	bl	8000294 <__adddf3>
 801e87e:	4602      	mov	r2, r0
 801e880:	460b      	mov	r3, r1
 801e882:	4630      	mov	r0, r6
 801e884:	4639      	mov	r1, r7
 801e886:	f7e1 fd03 	bl	8000290 <__aeabi_dsub>
 801e88a:	4652      	mov	r2, sl
 801e88c:	465b      	mov	r3, fp
 801e88e:	f7e1 fcff 	bl	8000290 <__aeabi_dsub>
 801e892:	4602      	mov	r2, r0
 801e894:	460b      	mov	r3, r1
 801e896:	4620      	mov	r0, r4
 801e898:	4629      	mov	r1, r5
 801e89a:	e7d9      	b.n	801e850 <__ieee754_log+0x278>
 801e89c:	4602      	mov	r2, r0
 801e89e:	460b      	mov	r3, r1
 801e8a0:	4650      	mov	r0, sl
 801e8a2:	4659      	mov	r1, fp
 801e8a4:	f7e1 fcf4 	bl	8000290 <__aeabi_dsub>
 801e8a8:	ec53 2b18 	vmov	r2, r3, d8
 801e8ac:	f7e1 fea8 	bl	8000600 <__aeabi_dmul>
 801e8b0:	4606      	mov	r6, r0
 801e8b2:	460f      	mov	r7, r1
 801e8b4:	2c00      	cmp	r4, #0
 801e8b6:	f43f af23 	beq.w	801e700 <__ieee754_log+0x128>
 801e8ba:	a309      	add	r3, pc, #36	; (adr r3, 801e8e0 <__ieee754_log+0x308>)
 801e8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8c0:	ec51 0b19 	vmov	r0, r1, d9
 801e8c4:	f7e1 fe9c 	bl	8000600 <__aeabi_dmul>
 801e8c8:	4604      	mov	r4, r0
 801e8ca:	460d      	mov	r5, r1
 801e8cc:	a306      	add	r3, pc, #24	; (adr r3, 801e8e8 <__ieee754_log+0x310>)
 801e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8d2:	ec51 0b19 	vmov	r0, r1, d9
 801e8d6:	e727      	b.n	801e728 <__ieee754_log+0x150>
 801e8d8:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801e930 <__ieee754_log+0x358>
 801e8dc:	e695      	b.n	801e60a <__ieee754_log+0x32>
 801e8de:	bf00      	nop
 801e8e0:	fee00000 	.word	0xfee00000
 801e8e4:	3fe62e42 	.word	0x3fe62e42
 801e8e8:	35793c76 	.word	0x35793c76
 801e8ec:	3dea39ef 	.word	0x3dea39ef
 801e8f0:	55555555 	.word	0x55555555
 801e8f4:	3fd55555 	.word	0x3fd55555
 801e8f8:	df3e5244 	.word	0xdf3e5244
 801e8fc:	3fc2f112 	.word	0x3fc2f112
 801e900:	96cb03de 	.word	0x96cb03de
 801e904:	3fc74664 	.word	0x3fc74664
 801e908:	94229359 	.word	0x94229359
 801e90c:	3fd24924 	.word	0x3fd24924
 801e910:	55555593 	.word	0x55555593
 801e914:	3fe55555 	.word	0x3fe55555
 801e918:	d078c69f 	.word	0xd078c69f
 801e91c:	3fc39a09 	.word	0x3fc39a09
 801e920:	1d8e78af 	.word	0x1d8e78af
 801e924:	3fcc71c5 	.word	0x3fcc71c5
 801e928:	9997fa04 	.word	0x9997fa04
 801e92c:	3fd99999 	.word	0x3fd99999
	...
 801e938:	c3500000 	.word	0xc3500000
 801e93c:	43500000 	.word	0x43500000
 801e940:	7fefffff 	.word	0x7fefffff
 801e944:	3ff00000 	.word	0x3ff00000
 801e948:	3fe00000 	.word	0x3fe00000

0801e94c <_init>:
 801e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e94e:	bf00      	nop
 801e950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e952:	bc08      	pop	{r3}
 801e954:	469e      	mov	lr, r3
 801e956:	4770      	bx	lr

0801e958 <_fini>:
 801e958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e95a:	bf00      	nop
 801e95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e95e:	bc08      	pop	{r3}
 801e960:	469e      	mov	lr, r3
 801e962:	4770      	bx	lr
