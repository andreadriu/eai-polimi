
ai_vibration_analysis_stwin_bm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f338  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00055394  0801f580  0801f580  0002f580  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08074914  08074914  00084914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0807491c  0807491c  0008491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08074920  08074920  00084920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000ae4  20000000  08074924  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000039f7  20000b00  08075408  00090b00  2**5
                  ALLOC
  8 ._user_heap_stack 00000601  200044f7  08075408  000944f7  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00090ae4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006986d  00000000  00000000  00090b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a058  00000000  00000000  000fa387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004460  00000000  00000000  001043e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00004038  00000000  00000000  00108840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046bc7  00000000  00000000  0010c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00052b5f  00000000  00000000  0015343f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019ff4d  00000000  00000000  001a5f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000140  00000000  00000000  00345eeb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00013b78  00000000  00000000  0034602c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00004344  00000000  00000000  00359ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000b00 	.word	0x20000b00
 8000254:	00000000 	.word	0x00000000
 8000258:	0801f558 	.word	0x0801f558

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000b04 	.word	0x20000b04
 8000274:	0801f558 	.word	0x0801f558

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b8 	b.w	8001018 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d32:	4604      	mov	r4, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d148      	bne.n	8000dcc <__udivmoddi4+0xa0>
 8000d3a:	428a      	cmp	r2, r1
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	d961      	bls.n	8000e04 <__udivmoddi4+0xd8>
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	b143      	cbz	r3, 8000d58 <__udivmoddi4+0x2c>
 8000d46:	f1c3 0120 	rsb	r1, r3, #32
 8000d4a:	409f      	lsls	r7, r3
 8000d4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d50:	409c      	lsls	r4, r3
 8000d52:	fa20 f101 	lsr.w	r1, r0, r1
 8000d56:	430f      	orrs	r7, r1
 8000d58:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	0c22      	lsrs	r2, r4, #16
 8000d62:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d66:	fb01 7716 	mls	r7, r1, r6, r7
 8000d6a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d6e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d72:	4290      	cmp	r0, r2
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x5c>
 8000d76:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x5a>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f200 8137 	bhi.w	8000ff4 <__udivmoddi4+0x2c8>
 8000d86:	463e      	mov	r6, r7
 8000d88:	1a12      	subs	r2, r2, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d90:	fb01 2210 	mls	r2, r1, r0, r2
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x86>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	d202      	bcs.n	8000db0 <__udivmoddi4+0x84>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f200 811c 	bhi.w	8000fe8 <__udivmoddi4+0x2bc>
 8000db0:	4610      	mov	r0, r2
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	2600      	movs	r6, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0x9a>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	f000 80fd 	beq.w	8000fd0 <__udivmoddi4+0x2a4>
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4631      	mov	r1, r6
 8000de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de4:	fab3 f683 	clz	r6, r3
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d14b      	bne.n	8000e84 <__udivmoddi4+0x158>
 8000dec:	428b      	cmp	r3, r1
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f240 80ef 	bls.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4630      	mov	r0, r6
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e3      	beq.n	8000dc6 <__udivmoddi4+0x9a>
 8000dfe:	e9c5 4700 	strd	r4, r7, [r5]
 8000e02:	e7e0      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xdc>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f382 	clz	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 809d 	bne.w	8000f4c <__udivmoddi4+0x220>
 8000e12:	1a89      	subs	r1, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b297      	uxth	r7, r2
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	0c20      	lsrs	r0, r4, #16
 8000e1e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e22:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2a:	fb07 f002 	mul.w	r0, r7, r2
 8000e2e:	4288      	cmp	r0, r1
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f102 38ff 	add.w	r8, r2, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4288      	cmp	r0, r1
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80cf 	beq.w	8000fee <__udivmoddi4+0x2c2>
 8000e50:	4642      	mov	r2, r8
 8000e52:	1a09      	subs	r1, r1, r0
 8000e54:	b2a4      	uxth	r4, r4
 8000e56:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5e:	fb00 f707 	mul.w	r7, r0, r7
 8000e62:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e66:	42a7      	cmp	r7, r4
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x150>
 8000e6a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x14e>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f200 80b4 	bhi.w	8000fe2 <__udivmoddi4+0x2b6>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	1be4      	subs	r4, r4, r7
 8000e7e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e82:	e79b      	b.n	8000dbc <__udivmoddi4+0x90>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	40f9      	lsrs	r1, r7
 8000e94:	40b2      	lsls	r2, r6
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fa00 f306 	lsl.w	r3, r0, r6
 8000eac:	0c20      	lsrs	r0, r4, #16
 8000eae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eb2:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eba:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebe:	4288      	cmp	r0, r1
 8000ec0:	d90f      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 808d 	beq.w	8000ffa <__udivmoddi4+0x2ce>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	1a09      	subs	r1, r1, r0
 8000ee4:	b2a4      	uxth	r4, r4
 8000ee6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eea:	fb09 1110 	mls	r1, r9, r0, r1
 8000eee:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1de>
 8000efa:	eb1c 0101 	adds.w	r1, ip, r1
 8000efe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f02:	d201      	bcs.n	8000f08 <__udivmoddi4+0x1dc>
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d87f      	bhi.n	8001008 <__udivmoddi4+0x2dc>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	fba0 9802 	umull	r9, r8, r0, r2
 8000f16:	4541      	cmp	r1, r8
 8000f18:	464c      	mov	r4, r9
 8000f1a:	46c6      	mov	lr, r8
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x1f8>
 8000f1e:	d106      	bne.n	8000f2e <__udivmoddi4+0x202>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d204      	bcs.n	8000f2e <__udivmoddi4+0x202>
 8000f24:	3801      	subs	r0, #1
 8000f26:	ebb9 0402 	subs.w	r4, r9, r2
 8000f2a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d070      	beq.n	8001014 <__udivmoddi4+0x2e8>
 8000f32:	1b1a      	subs	r2, r3, r4
 8000f34:	eb61 010e 	sbc.w	r1, r1, lr
 8000f38:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3c:	fa01 f707 	lsl.w	r7, r1, r7
 8000f40:	40f1      	lsrs	r1, r6
 8000f42:	2600      	movs	r6, #0
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	e73c      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0020 	rsb	r0, r3, #32
 8000f54:	fa01 f203 	lsl.w	r2, r1, r3
 8000f58:	fa21 f600 	lsr.w	r6, r1, r0
 8000f5c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f60:	fa24 f100 	lsr.w	r1, r4, r0
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	409c      	lsls	r4, r3
 8000f6a:	4311      	orrs	r1, r2
 8000f6c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f70:	0c0a      	lsrs	r2, r1, #16
 8000f72:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f76:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f7a:	fb00 f607 	mul.w	r6, r0, r7
 8000f7e:	4296      	cmp	r6, r2
 8000f80:	d90e      	bls.n	8000fa0 <__udivmoddi4+0x274>
 8000f82:	eb1c 0202 	adds.w	r2, ip, r2
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	bf2c      	ite	cs
 8000f8c:	f04f 0901 	movcs.w	r9, #1
 8000f90:	f04f 0900 	movcc.w	r9, #0
 8000f94:	4296      	cmp	r6, r2
 8000f96:	d902      	bls.n	8000f9e <__udivmoddi4+0x272>
 8000f98:	f1b9 0f00 	cmp.w	r9, #0
 8000f9c:	d031      	beq.n	8001002 <__udivmoddi4+0x2d6>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	1b92      	subs	r2, r2, r6
 8000fa2:	b289      	uxth	r1, r1
 8000fa4:	fbb2 f6fe 	udiv	r6, r2, lr
 8000fa8:	fb0e 2216 	mls	r2, lr, r6, r2
 8000fac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fb0:	fb06 f207 	mul.w	r2, r6, r7
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x29c>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc0:	d201      	bcs.n	8000fc6 <__udivmoddi4+0x29a>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d823      	bhi.n	800100e <__udivmoddi4+0x2e2>
 8000fc6:	4646      	mov	r6, r8
 8000fc8:	1a89      	subs	r1, r1, r2
 8000fca:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fce:	e725      	b.n	8000e1c <__udivmoddi4+0xf0>
 8000fd0:	462e      	mov	r6, r5
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	e6f7      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000fd6:	1a84      	subs	r4, r0, r2
 8000fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	461f      	mov	r7, r3
 8000fe0:	e70b      	b.n	8000dfa <__udivmoddi4+0xce>
 8000fe2:	4464      	add	r4, ip
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	e749      	b.n	8000e7c <__udivmoddi4+0x150>
 8000fe8:	4464      	add	r4, ip
 8000fea:	3802      	subs	r0, #2
 8000fec:	e6e1      	b.n	8000db2 <__udivmoddi4+0x86>
 8000fee:	3a02      	subs	r2, #2
 8000ff0:	4461      	add	r1, ip
 8000ff2:	e72e      	b.n	8000e52 <__udivmoddi4+0x126>
 8000ff4:	3e02      	subs	r6, #2
 8000ff6:	4462      	add	r2, ip
 8000ff8:	e6c6      	b.n	8000d88 <__udivmoddi4+0x5c>
 8000ffa:	f1a8 0802 	sub.w	r8, r8, #2
 8000ffe:	4461      	add	r1, ip
 8001000:	e76f      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001002:	3802      	subs	r0, #2
 8001004:	4462      	add	r2, ip
 8001006:	e7cb      	b.n	8000fa0 <__udivmoddi4+0x274>
 8001008:	3802      	subs	r0, #2
 800100a:	4461      	add	r1, ip
 800100c:	e77d      	b.n	8000f0a <__udivmoddi4+0x1de>
 800100e:	3e02      	subs	r6, #2
 8001010:	4461      	add	r1, ip
 8001012:	e7d9      	b.n	8000fc8 <__udivmoddi4+0x29c>
 8001014:	462e      	mov	r6, r5
 8001016:	e6d6      	b.n	8000dc6 <__udivmoddi4+0x9a>

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <set_mems_int_pin_a_exti>:
extern volatile HAL_StatusTypeDef ret_hal_status;
static void mems_int_pin_a_hardware_event_isr(void);
volatile int Mems_Interrupt = 0;

void set_mems_int_pin_a_exti(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* register event irq handler */
  ret_hal_status = HAL_EXTI_GetHandle(&hexti8, EXTI_LINE_8);
 8001020:	490d      	ldr	r1, [pc, #52]	; (8001058 <set_mems_int_pin_a_exti+0x3c>)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <set_mems_int_pin_a_exti+0x40>)
 8001024:	f009 f84f 	bl	800a0c6 <HAL_EXTI_GetHandle>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <set_mems_int_pin_a_exti+0x44>)
 800102e:	701a      	strb	r2, [r3, #0]
  ret_hal_status = HAL_EXTI_RegisterCallback(&hexti8, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <set_mems_int_pin_a_exti+0x48>)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <set_mems_int_pin_a_exti+0x40>)
 8001036:	f009 f81a 	bl	800a06e <HAL_EXTI_RegisterCallback>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <set_mems_int_pin_a_exti+0x44>)
 8001040:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2013      	movs	r0, #19
 8001048:	f006 ffa9 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 800104c:	2013      	movs	r0, #19
 800104e:	f006 ffc0 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	06000008 	.word	0x06000008
 800105c:	20000000 	.word	0x20000000
 8001060:	20001dac 	.word	0x20001dac
 8001064:	08001069 	.word	0x08001069

08001068 <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

	MemsEventDetected = 1;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <mems_int_pin_a_hardware_event_isr+0x14>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]

}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20001dad 	.word	0x20001dad

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f006 fa32 	bl	80074ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f835 	bl	80010f6 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800108c:	f000 f898 	bl	80011c0 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001090:	f000 f8e3 	bl	800125a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 ff38 	bl	8001f08 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001098:	f000 fa52 	bl	8001540 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 800109c:	f000 f8e6 	bl	800126c <MX_ADC1_Init>
  MX_ADF1_Init();
 80010a0:	f000 f92a 	bl	80012f8 <MX_ADF1_Init>
  MX_MDF1_Init();
 80010a4:	f000 f992 	bl	80013cc <MX_MDF1_Init>
  MX_DAC1_Init();
 80010a8:	f000 fa02 	bl	80014b0 <MX_DAC1_Init>
  MX_I2C1_Init();
 80010ac:	f000 fa90 	bl	80015d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010b0:	f000 face 	bl	8001650 <MX_I2C2_Init>
  MX_I2C3_Init();
 80010b4:	f000 fb0c 	bl	80016d0 <MX_I2C3_Init>
  MX_ICACHE_Init();
 80010b8:	f000 fb4a 	bl	8001750 <MX_ICACHE_Init>
  MX_RTC_Init();
 80010bc:	f000 fb5c 	bl	8001778 <MX_RTC_Init>
  MX_SAI1_Init();
 80010c0:	f000 fba8 	bl	8001814 <MX_SAI1_Init>
  MX_SPI1_Init();
 80010c4:	f000 fc6c 	bl	80019a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80010c8:	f000 fcda 	bl	8001a80 <MX_SPI2_Init>
  MX_SPI3_Init();
 80010cc:	f000 fd4a 	bl	8001b64 <MX_SPI3_Init>
  MX_TAMP_RTC_Init();
 80010d0:	f000 fdb8 	bl	8001c44 <MX_TAMP_RTC_Init>
  MX_TIM3_Init();
 80010d4:	f000 fdfc 	bl	8001cd0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010d8:	f000 fe4e 	bl	8001d78 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010dc:	f000 fe9a 	bl	8001e14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010e0:	f000 fee6 	bl	8001eb0 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 80010e4:	f000 f9c2 	bl	800146c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 80010e8:	f015 fa08 	bl	80164fc <MX_USB_Device_Init>

  // Sensor app init
  sensor_init();
 80010ec:	f001 f934 	bl	8002358 <sensor_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    sensor_process();
 80010f0:	f001 f996 	bl	8002420 <sensor_process>
 80010f4:	e7fc      	b.n	80010f0 <main+0x70>

080010f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b09e      	sub	sp, #120	; 0x78
 80010fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	2260      	movs	r2, #96	; 0x60
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f019 fc2a 	bl	801a95e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800111a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800111e:	f00b f903 	bl	800c328 <HAL_PWREx_ControlVoltageScaling>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001128:	f001 f910 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800112c:	232b      	movs	r3, #43	; 0x2b
 800112e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001134:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001142:	2310      	movs	r3, #16
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001146:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001154:	2303      	movs	r3, #3
 8001156:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001160:	230a      	movs	r3, #10
 8001162:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001170:	230c      	movs	r3, #12
 8001172:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4618      	mov	r0, r3
 800117e:	f00b f985 	bl	800c48c <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001188:	f001 f8e0 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	231f      	movs	r3, #31
 800118e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2303      	movs	r3, #3
 8001192:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2104      	movs	r1, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00c f845 	bl	800d238 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b4:	f001 f8ca 	bl	800234c <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3778      	adds	r7, #120	; 0x78
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0b2      	sub	sp, #200	; 0xc8
 80011c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	22c8      	movs	r2, #200	; 0xc8
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f019 fbc6 	bl	801a95e <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_MDF1|RCC_PERIPHCLK_ADF1
 80011d2:	f44f 3260 	mov.w	r2, #229376	; 0x38000
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_ADCDAC;
  PeriphClkInit.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_PLL3;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_PLL3;
 80011e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 80011f4:	2303      	movs	r3, #3
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 48;
 80011fc:	2330      	movs	r3, #48	; 0x30
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 25;
 8001204:	2319      	movs	r3, #25
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 800120c:	230c      	movs	r3, #12
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVQ;
 8001214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001218:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800121a:	2303      	movs	r3, #3
 800121c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 48;
 8001222:	2330      	movs	r3, #48	; 0x30
 8001224:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8001226:	2302      	movs	r3, #2
 8001228:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 7;
 800122a:	2307      	movs	r3, #7
 800122c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 25;
 800122e:	2319      	movs	r3, #25
 8001230:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001232:	230c      	movs	r3, #12
 8001234:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800123a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4618      	mov	r0, r3
 8001244:	f00c fbce 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <PeriphCommonClock_Config+0x92>
  {
    Error_Handler();
 800124e:	f001 f87d 	bl	800234c <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	37c8      	adds	r7, #200	; 0xc8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800125e:	f00b f8f5 	bl	800c44c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001262:	f00b f903 	bl	800c46c <HAL_PWREx_DisableUCPDDeadBattery>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_ADC1_Init+0x84>)
 8001272:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <MX_ADC1_Init+0x88>)
 8001274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_ADC1_Init+0x84>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_ADC1_Init+0x84>)
 800127e:	2204      	movs	r2, #4
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_ADC1_Init+0x84>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_ADC1_Init+0x84>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_ADC1_Init+0x84>)
 8001290:	2204      	movs	r2, #4
 8001292:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_ADC1_Init+0x84>)
 8001296:	2200      	movs	r2, #0
 8001298:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_ADC1_Init+0x84>)
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_MDF;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012ce:	2202      	movs	r2, #2
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_ADC1_Init+0x84>)
 80012dc:	f006 fa66 	bl	80077ac <HAL_ADC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80012e6:	f001 f831 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000b1c 	.word	0x20000b1c
 80012f4:	42028000 	.word	0x42028000

080012f8 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <MX_ADF1_Init+0xc8>)
 80012fe:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <MX_ADF1_Init+0xcc>)
 8001300:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001304:	2201      	movs	r2, #1
 8001306:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = ENABLE;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <MX_ADF1_Init+0xc8>)
 800130a:	2201      	movs	r2, #1
 800130c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.CommonParam.OutputClock.Pins = MDF_OUTPUT_CLOCK_0;
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001310:	2220      	movs	r2, #32
 8001312:	611a      	str	r2, [r3, #16]
  AdfHandle0.Init.CommonParam.OutputClock.Divider = 5;
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001316:	2205      	movs	r2, #5
 8001318:	615a      	str	r2, [r3, #20]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Activation = ENABLE;
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_ADF1_Init+0xc8>)
 800131c:	2201      	movs	r2, #1
 800131e:	761a      	strb	r2, [r3, #24]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Edge = MDF_CLOCK_TRIG_FALLING_EDGE;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132c:	621a      	str	r2, [r3, #32]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001338:	2210      	movs	r2, #16
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_ADF1_Init+0xc8>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 31;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001344:	221f      	movs	r2, #31
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_ADF1_Init+0xc8>)
 800134a:	2201      	movs	r2, #1
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800134e:	481c      	ldr	r0, [pc, #112]	; (80013c0 <MX_ADF1_Init+0xc8>)
 8001350:	f009 fb6c 	bl	800aa2c <HAL_MDF_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADF1_Init+0x66>
  {
    Error_Handler();
 800135a:	f000 fff7 	bl	800234c <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_ADF1_Init+0xd0>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_ADF1_Init+0xd0>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_ADF1_Init+0xd0>)
 800136c:	2250      	movs	r2, #80	; 0x50
 800136e:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 16;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_ADF1_Init+0xd0>)
 8001372:	2210      	movs	r2, #16
 8001374:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 1;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_ADF1_Init+0xd0>)
 8001378:	2201      	movs	r2, #1
 800137a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = ENABLE;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_ADF1_Init+0xd0>)
 800137e:	2201      	movs	r2, #1
 8001380:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.ReshapeFilter.DecimationRatio = MDF_RSF_DECIMATION_RATIO_4;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_ADF1_Init+0xd0>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  AdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_ADF1_Init+0xd0>)
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <MX_ADF1_Init+0xd0>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_ADF1_Init+0xd0>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_SYNC_CONT;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_ADF1_Init+0xd0>)
 80013a0:	2220      	movs	r2, #32
 80013a2:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_ADF1_Init+0xd0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_ADF1_Init+0xd0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	66da      	str	r2, [r3, #108]	; 0x6c
  AdfFilterConfig0.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <MX_ADF1_Init+0xd0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	671a      	str	r2, [r3, #112]	; 0x70
  AdfFilterConfig0.Trigger.Edge = MDF_FILTER_TRIG_RISING_EDGE;
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <MX_ADF1_Init+0xd0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	675a      	str	r2, [r3, #116]	; 0x74
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000ba8 	.word	0x20000ba8
 80013c4:	46024080 	.word	0x46024080
 80013c8:	20000bec 	.word	0x20000bec

080013cc <MX_MDF1_Init>:
  * @brief MDF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_MDF1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END MDF1_Init 1 */

  /**
    MdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  MdfHandle0.Instance = MDF1_Filter0;
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <MX_MDF1_Init+0x94>)
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <MX_MDF1_Init+0x98>)
 80013d4:	601a      	str	r2, [r3, #0]
  MdfHandle0.Init.CommonParam.InterleavedFilters = 0;
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_MDF1_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  MdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_MDF1_Init+0x94>)
 80013de:	2201      	movs	r2, #1
 80013e0:	609a      	str	r2, [r3, #8]
  MdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_MDF1_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	731a      	strb	r2, [r3, #12]
  MdfHandle0.Init.SerialInterface.Activation = DISABLE;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_MDF1_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  if (HAL_MDF_Init(&MdfHandle0) != HAL_OK)
 80013f0:	481b      	ldr	r0, [pc, #108]	; (8001460 <MX_MDF1_Init+0x94>)
 80013f2:	f009 fb1b 	bl	800aa2c <HAL_MDF_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_MDF1_Init+0x34>
  {
    Error_Handler();
 80013fc:	f000 ffa6 	bl	800234c <Error_Handler>
  /**
    MdfFilterConfig0, MdfOldConfig0 and/or MdfScdConfig0 structures initialization

    WARNING : only structures are filled, no specific init function call for filter
  */
  MdfFilterConfig0.DataSource = MDF_DATA_SOURCE_ADCITF1;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001402:	2202      	movs	r2, #2
 8001404:	601a      	str	r2, [r3, #0]
  MdfFilterConfig0.Delay = 0;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  MdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_MDF1_Init+0x9c>)
 800140e:	2250      	movs	r2, #80	; 0x50
 8001410:	609a      	str	r2, [r3, #8]
  MdfFilterConfig0.DecimationRatio = 4;
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001414:	2204      	movs	r2, #4
 8001416:	60da      	str	r2, [r3, #12]
  MdfFilterConfig0.Offset = 0;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_MDF1_Init+0x9c>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  MdfFilterConfig0.Gain = 4;
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001420:	2204      	movs	r2, #4
 8001422:	615a      	str	r2, [r3, #20]
  MdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001426:	2200      	movs	r2, #0
 8001428:	761a      	strb	r2, [r3, #24]
  MdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_MDF1_Init+0x9c>)
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2020 	strb.w	r2, [r3, #32]
  MdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  MdfFilterConfig0.Integrator.Activation = DISABLE;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_MDF1_Init+0x9c>)
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  MdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  MdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_MDF1_Init+0x9c>)
 800144a:	2200      	movs	r2, #0
 800144c:	665a      	str	r2, [r3, #100]	; 0x64
  MdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001450:	2200      	movs	r2, #0
 8001452:	669a      	str	r2, [r3, #104]	; 0x68
  MdfFilterConfig0.DiscardSamples = 0;
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <MX_MDF1_Init+0x9c>)
 8001456:	2200      	movs	r2, #0
 8001458:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN MDF1_Init 2 */

  /* USER CODE END MDF1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000c68 	.word	0x20000c68
 8001464:	40025080 	.word	0x40025080
 8001468:	20000cac 	.word	0x20000cac

0800146c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <MX_CRC_Init+0x3c>)
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <MX_CRC_Init+0x40>)
 8001474:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_CRC_Init+0x3c>)
 8001478:	2200      	movs	r2, #0
 800147a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_CRC_Init+0x3c>)
 800147e:	2200      	movs	r2, #0
 8001480:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_CRC_Init+0x3c>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_CRC_Init+0x3c>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_CRC_Init+0x3c>)
 8001490:	2201      	movs	r2, #1
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_CRC_Init+0x3c>)
 8001496:	f006 fdc5 	bl	8008024 <HAL_CRC_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014a0:	f000 ff54 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000e90 	.word	0x20000e90
 80014ac:	40023000 	.word	0x40023000

080014b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	2230      	movs	r2, #48	; 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f019 fa4d 	bl	801a95e <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_DAC1_Init+0x88>)
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <MX_DAC1_Init+0x8c>)
 80014cc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014ce:	481a      	ldr	r0, [pc, #104]	; (8001538 <MX_DAC1_Init+0x88>)
 80014d0:	f006 fe92 	bl	80081f8 <HAL_DAC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 80014da:	f000 ff37 	bl	800234c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80014f6:	2304      	movs	r3, #4
 80014f8:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_DAC1_Init+0x88>)
 8001508:	f006 fe98 	bl	800823c <HAL_DAC_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8001512:	f000 ff1b 	bl	800234c <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_DAC1_Init+0x88>)
 8001520:	f007 f826 	bl	8008570 <HAL_DACEx_SetConfigAutonomousMode>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 800152a:	f000 ff0f 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3738      	adds	r7, #56	; 0x38
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000eb4 	.word	0x20000eb4
 800153c:	46021800 	.word	0x46021800

08001540 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_GPDMA1_Init+0x8c>)
 8001548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154c:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <MX_GPDMA1_Init+0x8c>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_GPDMA1_Init+0x8c>)
 8001558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	201d      	movs	r0, #29
 800156a:	f006 fd18 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800156e:	201d      	movs	r0, #29
 8001570:	f006 fd2f 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	201e      	movs	r0, #30
 800157a:	f006 fd10 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800157e:	201e      	movs	r0, #30
 8001580:	f006 fd27 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	201f      	movs	r0, #31
 800158a:	f006 fd08 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800158e:	201f      	movs	r0, #31
 8001590:	f006 fd1f 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2020      	movs	r0, #32
 800159a:	f006 fd00 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800159e:	2020      	movs	r0, #32
 80015a0:	f006 fd17 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2021      	movs	r0, #33	; 0x21
 80015aa:	f006 fcf8 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80015ae:	2021      	movs	r0, #33	; 0x21
 80015b0:	f006 fd0f 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2022      	movs	r0, #34	; 0x22
 80015ba:	f006 fcf0 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80015be:	2022      	movs	r0, #34	; 0x22
 80015c0:	f006 fd07 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	46020c00 	.word	0x46020c00

080015d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_I2C1_Init+0x74>)
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_I2C1_Init+0x78>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_I2C1_Init+0x74>)
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <MX_I2C1_Init+0x7c>)
 80015de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_I2C1_Init+0x74>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_I2C1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <MX_I2C1_Init+0x74>)
 800160c:	f009 f8b7 	bl	800a77e <HAL_I2C_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001616:	f000 fe99 	bl	800234c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161a:	2100      	movs	r1, #0
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <MX_I2C1_Init+0x74>)
 800161e:	f009 f93d 	bl	800a89c <HAL_I2CEx_ConfigAnalogFilter>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001628:	f000 fe90 	bl	800234c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_I2C1_Init+0x74>)
 8001630:	f009 f97f 	bl	800a932 <HAL_I2CEx_ConfigDigitalFilter>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800163a:	f000 fe87 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000ec8 	.word	0x20000ec8
 8001648:	40005400 	.word	0x40005400
 800164c:	00f07bff 	.word	0x00f07bff

08001650 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_I2C2_Init+0x74>)
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_I2C2_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_I2C2_Init+0x74>)
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <MX_I2C2_Init+0x7c>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_I2C2_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_I2C2_Init+0x74>)
 8001668:	2201      	movs	r2, #1
 800166a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_I2C2_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_I2C2_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_I2C2_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_I2C2_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_I2C2_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800168a:	480e      	ldr	r0, [pc, #56]	; (80016c4 <MX_I2C2_Init+0x74>)
 800168c:	f009 f877 	bl	800a77e <HAL_I2C_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001696:	f000 fe59 	bl	800234c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <MX_I2C2_Init+0x74>)
 800169e:	f009 f8fd 	bl	800a89c <HAL_I2CEx_ConfigAnalogFilter>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016a8:	f000 fe50 	bl	800234c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_I2C2_Init+0x74>)
 80016b0:	f009 f93f 	bl	800a932 <HAL_I2CEx_ConfigDigitalFilter>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016ba:	f000 fe47 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000f14 	.word	0x20000f14
 80016c8:	40005800 	.word	0x40005800
 80016cc:	00f07bff 	.word	0x00f07bff

080016d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_I2C3_Init+0x74>)
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <MX_I2C3_Init+0x78>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F07BFF;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_I2C3_Init+0x74>)
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <MX_I2C3_Init+0x7c>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_I2C3_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_I2C3_Init+0x74>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_I2C3_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_I2C3_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_I2C3_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_I2C3_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_I2C3_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <MX_I2C3_Init+0x74>)
 800170c:	f009 f837 	bl	800a77e <HAL_I2C_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001716:	f000 fe19 	bl	800234c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <MX_I2C3_Init+0x74>)
 800171e:	f009 f8bd 	bl	800a89c <HAL_I2CEx_ConfigAnalogFilter>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 fe10 	bl	800234c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_I2C3_Init+0x74>)
 8001730:	f009 f8ff 	bl	800a932 <HAL_I2CEx_ConfigDigitalFilter>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 fe07 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000f60 	.word	0x20000f60
 8001748:	46002800 	.word	0x46002800
 800174c:	00f07bff 	.word	0x00f07bff

08001750 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001754:	2000      	movs	r0, #0
 8001756:	f009 f939 	bl	800a9cc <HAL_ICACHE_ConfigAssociativityMode>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001760:	f000 fdf4 	bl	800234c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001764:	f009 f952 	bl	800aa0c <HAL_ICACHE_Enable>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800176e:	f000 fded 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <MX_RTC_Init+0x94>)
 8001792:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <MX_RTC_Init+0x98>)
 8001794:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_RTC_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <MX_RTC_Init+0x94>)
 800179e:	227f      	movs	r2, #127	; 0x7f
 80017a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_RTC_Init+0x94>)
 80017a4:	22ff      	movs	r2, #255	; 0xff
 80017a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_RTC_Init+0x94>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_RTC_Init+0x94>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_RTC_Init+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_RTC_Init+0x94>)
 80017bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_RTC_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_RTC_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ce:	480f      	ldr	r0, [pc, #60]	; (800180c <MX_RTC_Init+0x94>)
 80017d0:	f00e fd94 	bl	80102fc <HAL_RTC_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80017da:	f000 fdb7 	bl	800234c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <MX_RTC_Init+0x94>)
 80017f4:	f00e ff08 	bl	8010608 <HAL_RTCEx_PrivilegeModeSet>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80017fe:	f000 fda5 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000109c 	.word	0x2000109c
 8001810:	46007800 	.word	0x46007800

08001814 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001818:	4b5c      	ldr	r3, [pc, #368]	; (800198c <MX_SAI1_Init+0x178>)
 800181a:	4a5d      	ldr	r2, [pc, #372]	; (8001990 <MX_SAI1_Init+0x17c>)
 800181c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <MX_SAI1_Init+0x178>)
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001824:	4b59      	ldr	r3, [pc, #356]	; (800198c <MX_SAI1_Init+0x178>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800182a:	4b58      	ldr	r3, [pc, #352]	; (800198c <MX_SAI1_Init+0x178>)
 800182c:	2240      	movs	r2, #64	; 0x40
 800182e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <MX_SAI1_Init+0x178>)
 8001832:	2200      	movs	r2, #0
 8001834:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001836:	4b55      	ldr	r3, [pc, #340]	; (800198c <MX_SAI1_Init+0x178>)
 8001838:	2200      	movs	r2, #0
 800183a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800183c:	4b53      	ldr	r3, [pc, #332]	; (800198c <MX_SAI1_Init+0x178>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <MX_SAI1_Init+0x178>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <MX_SAI1_Init+0x178>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800184e:	4b4f      	ldr	r3, [pc, #316]	; (800198c <MX_SAI1_Init+0x178>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001854:	4b4d      	ldr	r3, [pc, #308]	; (800198c <MX_SAI1_Init+0x178>)
 8001856:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <MX_SAI1_Init+0x180>)
 8001858:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <MX_SAI1_Init+0x178>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <MX_SAI1_Init+0x178>)
 8001862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001866:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001868:	4b48      	ldr	r3, [pc, #288]	; (800198c <MX_SAI1_Init+0x178>)
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <MX_SAI1_Init+0x178>)
 8001870:	2200      	movs	r2, #0
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001874:	4b45      	ldr	r3, [pc, #276]	; (800198c <MX_SAI1_Init+0x178>)
 8001876:	2200      	movs	r2, #0
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 800187a:	4b44      	ldr	r3, [pc, #272]	; (800198c <MX_SAI1_Init+0x178>)
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <MX_SAI1_Init+0x178>)
 8001884:	2201      	movs	r2, #1
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <MX_SAI1_Init+0x178>)
 800188a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <MX_SAI1_Init+0x178>)
 8001892:	2208      	movs	r2, #8
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001896:	4b3d      	ldr	r3, [pc, #244]	; (800198c <MX_SAI1_Init+0x178>)
 8001898:	2201      	movs	r2, #1
 800189a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <MX_SAI1_Init+0x178>)
 800189e:	2200      	movs	r2, #0
 80018a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <MX_SAI1_Init+0x178>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <MX_SAI1_Init+0x178>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <MX_SAI1_Init+0x178>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <MX_SAI1_Init+0x178>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <MX_SAI1_Init+0x178>)
 80018bc:	2201      	movs	r2, #1
 80018be:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80018c0:	4b32      	ldr	r3, [pc, #200]	; (800198c <MX_SAI1_Init+0x178>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80018c6:	4831      	ldr	r0, [pc, #196]	; (800198c <MX_SAI1_Init+0x178>)
 80018c8:	f00e fecc 	bl	8010664 <HAL_SAI_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_SAI1_Init+0xc2>
  {
    Error_Handler();
 80018d2:	f000 fd3b 	bl	800234c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <MX_SAI1_Init+0x184>)
 80018d8:	4a30      	ldr	r2, [pc, #192]	; (800199c <MX_SAI1_Init+0x188>)
 80018da:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <MX_SAI1_Init+0x184>)
 80018de:	2200      	movs	r2, #0
 80018e0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <MX_SAI1_Init+0x184>)
 80018e4:	2203      	movs	r2, #3
 80018e6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <MX_SAI1_Init+0x184>)
 80018ea:	2240      	movs	r2, #64	; 0x40
 80018ec:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <MX_SAI1_Init+0x184>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <MX_SAI1_Init+0x184>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <MX_SAI1_Init+0x184>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <MX_SAI1_Init+0x184>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <MX_SAI1_Init+0x184>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <MX_SAI1_Init+0x184>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <MX_SAI1_Init+0x184>)
 8001914:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001918:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <MX_SAI1_Init+0x184>)
 800191c:	2200      	movs	r2, #0
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <MX_SAI1_Init+0x184>)
 8001922:	2200      	movs	r2, #0
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_SAI1_Init+0x184>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_SAI1_Init+0x184>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_SAI1_Init+0x184>)
 8001936:	2201      	movs	r2, #1
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_SAI1_Init+0x184>)
 800193c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_SAI1_Init+0x184>)
 8001944:	2208      	movs	r2, #8
 8001946:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_SAI1_Init+0x184>)
 800194a:	2201      	movs	r2, #1
 800194c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_SAI1_Init+0x184>)
 8001950:	2200      	movs	r2, #0
 8001952:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_SAI1_Init+0x184>)
 8001956:	2200      	movs	r2, #0
 8001958:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_SAI1_Init+0x184>)
 800195c:	2200      	movs	r2, #0
 800195e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <MX_SAI1_Init+0x184>)
 8001962:	2200      	movs	r2, #0
 8001964:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_SAI1_Init+0x184>)
 8001968:	2200      	movs	r2, #0
 800196a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_SAI1_Init+0x184>)
 800196e:	2201      	movs	r2, #1
 8001970:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_SAI1_Init+0x184>)
 8001974:	2200      	movs	r2, #0
 8001976:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_SAI1_Init+0x184>)
 800197a:	f00e fe73 	bl	8010664 <HAL_SAI_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_SAI1_Init+0x174>
  {
    Error_Handler();
 8001984:	f000 fce2 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200010cc 	.word	0x200010cc
 8001990:	40015404 	.word	0x40015404
 8001994:	0002ee00 	.word	0x0002ee00
 8001998:	20001164 	.word	0x20001164
 800199c:	40015424 	.word	0x40015424

080019a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019b2:	4a32      	ldr	r2, [pc, #200]	; (8001a7c <MX_SPI1_Init+0xdc>)
 80019b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019c6:	2207      	movs	r2, #7
 80019c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_SPI1_Init+0xd8>)
 80019fe:	2207      	movs	r2, #7
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3e:	480e      	ldr	r0, [pc, #56]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a40:	f00f f83e 	bl	8010ac0 <HAL_SPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8001a4a:	f000 fc7f 	bl	800234c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001a52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_SPI1_Init+0xd8>)
 8001a62:	f010 fa74 	bl	8011f4e <HAL_SPIEx_SetConfigAutonomousMode>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8001a6c:	f000 fc6e 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200011fc 	.word	0x200011fc
 8001a7c:	40013000 	.word	0x40013000

08001a80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001a92:	4a32      	ldr	r2, [pc, #200]	; (8001b5c <MX_SPI2_Init+0xdc>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001a98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ab8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001abc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ac0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001ade:	2207      	movs	r2, #7
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b1e:	480e      	ldr	r0, [pc, #56]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001b20:	f00e ffce 	bl	8010ac0 <HAL_SPI_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_SPI2_Init+0xae>
  {
    Error_Handler();
 8001b2a:	f000 fc0f 	bl	800234c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_SPI2_Init+0xe0>)
 8001b34:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_SPI2_Init+0xd8>)
 8001b40:	f010 fa05 	bl	8011f4e <HAL_SPIEx_SetConfigAutonomousMode>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8001b4a:	f000 fbff 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000128c 	.word	0x2000128c
 8001b5c:	40003800 	.word	0x40003800
 8001b60:	10010000 	.word	0x10010000

08001b64 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001b76:	4a32      	ldr	r2, [pc, #200]	; (8001c40 <MX_SPI3_Init+0xdc>)
 8001b78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001b7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b94:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b9c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001ba0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ba4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001ba8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c02:	480e      	ldr	r0, [pc, #56]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001c04:	f00e ff5c 	bl	8010ac0 <HAL_SPI_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_SPI3_Init+0xae>
  {
    Error_Handler();
 8001c0e:	f000 fb9d 	bl	800234c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001c16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_SPI3_Init+0xd8>)
 8001c26:	f010 f992 	bl	8011f4e <HAL_SPIEx_SetConfigAutonomousMode>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_SPI3_Init+0xd0>
  {
    Error_Handler();
 8001c30:	f000 fb8c 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000131c 	.word	0x2000131c
 8001c40:	46002000 	.word	0x46002000

08001c44 <MX_TAMP_RTC_Init>:
  * @brief TAMP Initialization Function
  * @param None
  * @retval None
  */
static void MX_TAMP_RTC_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b090      	sub	sp, #64	; 0x40
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TAMP_Init 0 */

  /* USER CODE END TAMP_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]
  RTC_TamperTypeDef sTamper = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2224      	movs	r2, #36	; 0x24
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f018 fe7a 	bl	801a95e <memset>

  /* USER CODE END TAMP_Init 1 */

  /** Enable the RTC Active Tamper
  */
  privilegeState.tampPrivilegeFull = TAMP_PRIVILEGE_FULL_YES;
 8001c6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.MonotonicCounterPrivilege = TAMP_MONOTONIC_CNT_PRIVILEGE_NO;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <MX_TAMP_RTC_Init+0x88>)
 8001c7c:	f00e fcc4 	bl	8010608 <HAL_RTCEx_PrivilegeModeSet>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TAMP_RTC_Init+0x46>
  {
    Error_Handler();
 8001c86:	f000 fb61 	bl	800234c <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8001caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cae:	623b      	str	r3, [r7, #32]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <MX_TAMP_RTC_Init+0x88>)
 8001cb6:	f00e fc33 	bl	8010520 <HAL_RTCEx_SetTamper>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TAMP_RTC_Init+0x80>
  {
    Error_Handler();
 8001cc0:	f000 fb44 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TAMP_Init 2 */

  /* USER CODE END TAMP_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3740      	adds	r7, #64	; 0x40
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000109c 	.word	0x2000109c

08001cd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cf0:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <MX_TIM3_Init+0xa4>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4.294967295E9;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d14:	4816      	ldr	r0, [pc, #88]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d16:	f010 f95b 	bl	8011fd0 <HAL_TIM_IC_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d20:	f000 fb14 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	480f      	ldr	r0, [pc, #60]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d34:	f010 fc86 	bl	8012644 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001d3e:	f000 fb05 	bl	800234c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d46:	2301      	movs	r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d5a:	f010 f990 	bl	801207e <HAL_TIM_IC_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d64:	f000 faf2 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000149c 	.word	0x2000149c
 8001d74:	40000400 	.word	0x40000400

08001d78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d7e:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <MX_USART2_UART_Init+0x98>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d84:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001dc4:	f010 fd00 	bl	80127c8 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001dce:	f000 fabd 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001dd6:	f011 f97d 	bl	80130d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001de0:	f000 fab4 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de4:	2100      	movs	r1, #0
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001de8:	f011 f9b2 	bl	8013150 <HAL_UARTEx_SetRxFifoThreshold>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001df2:	f000 faab 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART2_UART_Init+0x94>)
 8001df8:	f011 f933 	bl	8013062 <HAL_UARTEx_DisableFifoMode>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001e02:	f000 faa3 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200014e8 	.word	0x200014e8
 8001e10:	40004400 	.word	0x40004400

08001e14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e1a:	4a24      	ldr	r2, [pc, #144]	; (8001eac <MX_USART3_UART_Init+0x98>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e40:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e44:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e5e:	4812      	ldr	r0, [pc, #72]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e60:	f010 fcb2 	bl	80127c8 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001e6a:	f000 fa6f 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e72:	f011 f92f 	bl	80130d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8001e7c:	f000 fa66 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e80:	2100      	movs	r1, #0
 8001e82:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e84:	f011 f964 	bl	8013150 <HAL_UARTEx_SetRxFifoThreshold>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8001e8e:	f000 fa5d 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e94:	f011 f8e5 	bl	8013062 <HAL_UARTEx_DisableFifoMode>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8001e9e:	f000 fa55 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20001578 	.word	0x20001578
 8001eac:	40004800 	.word	0x40004800

08001eb0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001eec:	f008 ff3a 	bl	800ad64 <HAL_PCD_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001ef6:	f000 fa29 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20001608 	.word	0x20001608
 8001f04:	42040000 	.word	0x42040000

08001f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1e:	4bbf      	ldr	r3, [pc, #764]	; (800221c <MX_GPIO_Init+0x314>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f24:	4abd      	ldr	r2, [pc, #756]	; (800221c <MX_GPIO_Init+0x314>)
 8001f26:	f043 0310 	orr.w	r3, r3, #16
 8001f2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f2e:	4bbb      	ldr	r3, [pc, #748]	; (800221c <MX_GPIO_Init+0x314>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f3c:	4bb7      	ldr	r3, [pc, #732]	; (800221c <MX_GPIO_Init+0x314>)
 8001f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f42:	4ab6      	ldr	r2, [pc, #728]	; (800221c <MX_GPIO_Init+0x314>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f4c:	4bb3      	ldr	r3, [pc, #716]	; (800221c <MX_GPIO_Init+0x314>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f5a:	4bb0      	ldr	r3, [pc, #704]	; (800221c <MX_GPIO_Init+0x314>)
 8001f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f60:	4aae      	ldr	r2, [pc, #696]	; (800221c <MX_GPIO_Init+0x314>)
 8001f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f6a:	4bac      	ldr	r3, [pc, #688]	; (800221c <MX_GPIO_Init+0x314>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f78:	4ba8      	ldr	r3, [pc, #672]	; (800221c <MX_GPIO_Init+0x314>)
 8001f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f7e:	4aa7      	ldr	r2, [pc, #668]	; (800221c <MX_GPIO_Init+0x314>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f88:	4ba4      	ldr	r3, [pc, #656]	; (800221c <MX_GPIO_Init+0x314>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4ba1      	ldr	r3, [pc, #644]	; (800221c <MX_GPIO_Init+0x314>)
 8001f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9c:	4a9f      	ldr	r2, [pc, #636]	; (800221c <MX_GPIO_Init+0x314>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fa6:	4b9d      	ldr	r3, [pc, #628]	; (800221c <MX_GPIO_Init+0x314>)
 8001fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb4:	4b99      	ldr	r3, [pc, #612]	; (800221c <MX_GPIO_Init+0x314>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fba:	4a98      	ldr	r2, [pc, #608]	; (800221c <MX_GPIO_Init+0x314>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fc4:	4b95      	ldr	r3, [pc, #596]	; (800221c <MX_GPIO_Init+0x314>)
 8001fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	4b92      	ldr	r3, [pc, #584]	; (800221c <MX_GPIO_Init+0x314>)
 8001fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd8:	4a90      	ldr	r2, [pc, #576]	; (800221c <MX_GPIO_Init+0x314>)
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fe2:	4b8e      	ldr	r3, [pc, #568]	; (800221c <MX_GPIO_Init+0x314>)
 8001fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff0:	4b8a      	ldr	r3, [pc, #552]	; (800221c <MX_GPIO_Init+0x314>)
 8001ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff6:	4a89      	ldr	r2, [pc, #548]	; (800221c <MX_GPIO_Init+0x314>)
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002000:	4b86      	ldr	r3, [pc, #536]	; (800221c <MX_GPIO_Init+0x314>)
 8002002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <MX_GPIO_Init+0x314>)
 8002010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002014:	4a81      	ldr	r2, [pc, #516]	; (800221c <MX_GPIO_Init+0x314>)
 8002016:	f043 0320 	orr.w	r3, r3, #32
 800201a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <MX_GPIO_Init+0x314>)
 8002020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8002032:	487b      	ldr	r0, [pc, #492]	; (8002220 <MX_GPIO_Init+0x318>)
 8002034:	f008 fb5a 	bl	800a6ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2181      	movs	r1, #129	; 0x81
 800203c:	4879      	ldr	r0, [pc, #484]	; (8002224 <MX_GPIO_Init+0x31c>)
 800203e:	f008 fb55 	bl	800a6ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2102      	movs	r1, #2
 8002046:	4878      	ldr	r0, [pc, #480]	; (8002228 <MX_GPIO_Init+0x320>)
 8002048:	f008 fb50 	bl	800a6ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002052:	4876      	ldr	r0, [pc, #472]	; (800222c <MX_GPIO_Init+0x324>)
 8002054:	f008 fb4a 	bl	800a6ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205c:	4b74      	ldr	r3, [pc, #464]	; (8002230 <MX_GPIO_Init+0x328>)
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	486e      	ldr	r0, [pc, #440]	; (8002224 <MX_GPIO_Init+0x31c>)
 800206c:	f008 f888 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8002070:	f248 0362 	movw	r3, #32866	; 0x8062
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002076:	2303      	movs	r3, #3
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002082:	4619      	mov	r1, r3
 8002084:	486b      	ldr	r0, [pc, #428]	; (8002234 <MX_GPIO_Init+0x32c>)
 8002086:	f008 f87b 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin CS_DLPC_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin;
 800208a:	f248 03c0 	movw	r3, #32960	; 0x80c0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	485f      	ldr	r0, [pc, #380]	; (8002220 <MX_GPIO_Init+0x318>)
 80020a4:	f008 f86c 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 80020a8:	2324      	movs	r3, #36	; 0x24
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ac:	2303      	movs	r3, #3
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	485a      	ldr	r0, [pc, #360]	; (8002224 <MX_GPIO_Init+0x31c>)
 80020bc:	f008 f860 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 80020c0:	f24a 2301 	movw	r3, #41473	; 0xa201
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c6:	2303      	movs	r3, #3
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4858      	ldr	r0, [pc, #352]	; (8002238 <MX_GPIO_Init+0x330>)
 80020d6:	f008 f853 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 80020da:	2381      	movs	r3, #129	; 0x81
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	484c      	ldr	r0, [pc, #304]	; (8002224 <MX_GPIO_Init+0x31c>)
 80020f2:	f008 f845 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin BOOT0_Pin LED2_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|BOOT0_Pin|LED2_Pin|STSAFE_RESET_Pin;
 80020f6:	f241 6308 	movw	r3, #5640	; 0x1608
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020fc:	2303      	movs	r3, #3
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	4619      	mov	r1, r3
 800210a:	4845      	ldr	r0, [pc, #276]	; (8002220 <MX_GPIO_Init+0x318>)
 800210c:	f008 f838 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8002110:	2302      	movs	r3, #2
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4840      	ldr	r0, [pc, #256]	; (8002228 <MX_GPIO_Init+0x320>)
 8002128:	f008 f82a 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 800212c:	2381      	movs	r3, #129	; 0x81
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002130:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <MX_GPIO_Init+0x328>)
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	483a      	ldr	r0, [pc, #232]	; (8002228 <MX_GPIO_Init+0x320>)
 8002140:	f008 f81e 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8002144:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <MX_GPIO_Init+0x328>)
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	4838      	ldr	r0, [pc, #224]	; (800223c <MX_GPIO_Init+0x334>)
 800215a:	f008 f811 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 800215e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002164:	2303      	movs	r3, #3
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	482e      	ldr	r0, [pc, #184]	; (800222c <MX_GPIO_Init+0x324>)
 8002174:	f008 f804 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8002178:	f64c 233e 	movw	r3, #51774	; 0xca3e
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <MX_GPIO_Init+0x328>)
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	4827      	ldr	r0, [pc, #156]	; (800222c <MX_GPIO_Init+0x324>)
 800218e:	f007 fff7 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 8002192:	f240 1301 	movw	r3, #257	; 0x101
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002198:	2303      	movs	r3, #3
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4826      	ldr	r0, [pc, #152]	; (8002240 <MX_GPIO_Init+0x338>)
 80021a8:	f007 ffea 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 80021ac:	230c      	movs	r3, #12
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	4821      	ldr	r0, [pc, #132]	; (8002244 <MX_GPIO_Init+0x33c>)
 80021c0:	f007 ffde 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 80021c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	4813      	ldr	r0, [pc, #76]	; (800222c <MX_GPIO_Init+0x324>)
 80021de:	f007 ffcf 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 80021e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_GPIO_Init+0x328>)
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4810      	ldr	r0, [pc, #64]	; (8002238 <MX_GPIO_Init+0x330>)
 80021f8:	f007 ffc2 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 80021fc:	f248 0302 	movw	r3, #32770	; 0x8002
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002202:	2303      	movs	r3, #3
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	480a      	ldr	r0, [pc, #40]	; (800223c <MX_GPIO_Init+0x334>)
 8002212:	f007 ffb5 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8002216:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800221a:	e015      	b.n	8002248 <MX_GPIO_Init+0x340>
 800221c:	46020c00 	.word	0x46020c00
 8002220:	42021c00 	.word	0x42021c00
 8002224:	42022000 	.word	0x42022000
 8002228:	42021000 	.word	0x42021000
 800222c:	42021400 	.word	0x42021400
 8002230:	10110000 	.word	0x10110000
 8002234:	42021800 	.word	0x42021800
 8002238:	42020c00 	.word	0x42020c00
 800223c:	42020400 	.word	0x42020400
 8002240:	42020000 	.word	0x42020000
 8002244:	42020800 	.word	0x42020800
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224a:	2303      	movs	r3, #3
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	483b      	ldr	r0, [pc, #236]	; (8002348 <MX_GPIO_Init+0x440>)
 800225a:	f007 ff91 	bl	800a180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2107      	movs	r1, #7
 8002262:	200b      	movs	r0, #11
 8002264:	f005 fe9b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002268:	200b      	movs	r0, #11
 800226a:	f005 feb2 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2107      	movs	r1, #7
 8002272:	200c      	movs	r0, #12
 8002274:	f005 fe93 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002278:	200c      	movs	r0, #12
 800227a:	f005 feaa 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2107      	movs	r1, #7
 8002282:	200d      	movs	r0, #13
 8002284:	f005 fe8b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002288:	200d      	movs	r0, #13
 800228a:	f005 fea2 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2107      	movs	r1, #7
 8002292:	200e      	movs	r0, #14
 8002294:	f005 fe83 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002298:	200e      	movs	r0, #14
 800229a:	f005 fe9a 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2107      	movs	r1, #7
 80022a2:	200f      	movs	r0, #15
 80022a4:	f005 fe7b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022a8:	200f      	movs	r0, #15
 80022aa:	f005 fe92 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2107      	movs	r1, #7
 80022b2:	2010      	movs	r0, #16
 80022b4:	f005 fe73 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80022b8:	2010      	movs	r0, #16
 80022ba:	f005 fe8a 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2107      	movs	r1, #7
 80022c2:	2011      	movs	r0, #17
 80022c4:	f005 fe6b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 80022c8:	2011      	movs	r0, #17
 80022ca:	f005 fe82 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2107      	movs	r1, #7
 80022d2:	2012      	movs	r0, #18
 80022d4:	f005 fe63 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80022d8:	2012      	movs	r0, #18
 80022da:	f005 fe7a 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2107      	movs	r1, #7
 80022e2:	2013      	movs	r0, #19
 80022e4:	f005 fe5b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 80022e8:	2013      	movs	r0, #19
 80022ea:	f005 fe72 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2107      	movs	r1, #7
 80022f2:	2014      	movs	r0, #20
 80022f4:	f005 fe53 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 80022f8:	2014      	movs	r0, #20
 80022fa:	f005 fe6a 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2107      	movs	r1, #7
 8002302:	2015      	movs	r0, #21
 8002304:	f005 fe4b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8002308:	2015      	movs	r0, #21
 800230a:	f005 fe62 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2107      	movs	r1, #7
 8002312:	2016      	movs	r0, #22
 8002314:	f005 fe43 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002318:	2016      	movs	r0, #22
 800231a:	f005 fe5a 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2107      	movs	r1, #7
 8002322:	2018      	movs	r0, #24
 8002324:	f005 fe3b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8002328:	2018      	movs	r0, #24
 800232a:	f005 fe52 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2107      	movs	r1, #7
 8002332:	2019      	movs	r0, #25
 8002334:	f005 fe33 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8002338:	2019      	movs	r0, #25
 800233a:	f005 fe4a 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

}
 800233e:	bf00      	nop
 8002340:	3738      	adds	r7, #56	; 0x38
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	42021000 	.word	0x42021000

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002354:	e7fe      	b.n	8002354 <Error_Handler+0x8>
	...

08002358 <sensor_init>:
// time measurement variables
int32_t time_elapsed=0;
int32_t post_FIFO_read;
int32_t pre_FIFO_read;

void sensor_init(void){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0

	// init GREEN LED and Turn it on
	BSP_LED_Init(LED1);
 800235c:	2000      	movs	r0, #0
 800235e:	f004 f99f 	bl	80066a0 <BSP_LED_Init>

	// init mems exti 8
	set_mems_int_pin_a_exti();
 8002362:	f7fe fe5b 	bl	800101c <set_mems_int_pin_a_exti>

	// init ism330dhcx sensor
	ret_uint = Sensor_IO_SPI_CS_Init_All();
 8002366:	f004 fa33 	bl	80067d0 <Sensor_IO_SPI_CS_Init_All>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <sensor_init+0xb4>)
 8002370:	701a      	strb	r2, [r3, #0]
	ret = BSP_MOTION_SENSOR_Init(ISM330DHCX_0,MOTION_ACCELERO);
 8002372:	2102      	movs	r1, #2
 8002374:	2000      	movs	r0, #0
 8002376:	f004 fc4d 	bl	8006c14 <BSP_MOTION_SENSOR_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	4a24      	ldr	r2, [pc, #144]	; (8002410 <sensor_init+0xb8>)
 800237e:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DHCX_0, MOTION_ACCELERO,ISM330DHCX_ODR);
 8002380:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002414 <sensor_init+0xbc>
 8002384:	2102      	movs	r1, #2
 8002386:	2000      	movs	r0, #0
 8002388:	f004 fd10 	bl	8006dac <BSP_MOTION_SENSOR_SetOutputDataRate>
 800238c:	4603      	mov	r3, r0
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <sensor_init+0xb8>)
 8002390:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_BDR( ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_ODR);
 8002392:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8002414 <sensor_init+0xbc>
 8002396:	2102      	movs	r1, #2
 8002398:	2000      	movs	r0, #0
 800239a:	f004 ff51 	bl	8007240 <BSP_MOTION_SENSOR_FIFO_Set_BDR>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <sensor_init+0xb8>)
 80023a2:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_SetFullScale( ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_FS);
 80023a4:	2202      	movs	r2, #2
 80023a6:	2102      	movs	r1, #2
 80023a8:	2000      	movs	r0, #0
 80023aa:	f004 fd45 	bl	8006e38 <BSP_MOTION_SENSOR_SetFullScale>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a17      	ldr	r2, [pc, #92]	; (8002410 <sensor_init+0xb8>)
 80023b2:	6013      	str	r3, [r2, #0]

	// get sensor sensitivity
	ret = BSP_MOTION_SENSOR_GetSensitivity(ISM330DHCX_0, MOTION_ACCELERO, &ism330dhcx_acc_sensitivity);
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <sensor_init+0xc0>)
 80023b6:	2102      	movs	r1, #2
 80023b8:	2000      	movs	r0, #0
 80023ba:	f004 fcb3 	bl	8006d24 <BSP_MOTION_SENSOR_GetSensitivity>
 80023be:	4603      	mov	r3, r0
 80023c0:	4a13      	ldr	r2, [pc, #76]	; (8002410 <sensor_init+0xb8>)
 80023c2:	6013      	str	r3, [r2, #0]

	// sensor fifo init
	ret = BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_0, ENABLE);
 80023c4:	2101      	movs	r1, #1
 80023c6:	2000      	movs	r0, #0
 80023c8:	f004 ff84 	bl	80072d4 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <sensor_init+0xb8>)
 80023d0:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level( ISM330DHCX_0, INPUT_BUFFER_SIZE);
 80023d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d6:	2000      	movs	r0, #0
 80023d8:	f004 ffa4 	bl	8007324 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 80023dc:	4603      	mov	r3, r0
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <sensor_init+0xb8>)
 80023e0:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(ISM330DHCX_0,  ENABLE);
 80023e2:	2101      	movs	r1, #1
 80023e4:	2000      	movs	r0, #0
 80023e6:	f004 ffc5 	bl	8007374 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a08      	ldr	r2, [pc, #32]	; (8002410 <sensor_init+0xb8>)
 80023ee:	6013      	str	r3, [r2, #0]
	ret = BSP_MOTION_SENSOR_FIFO_Set_Mode(ISM330DHCX_0,  ISM330DHCX_STREAM_MODE);
 80023f0:	2106      	movs	r1, #6
 80023f2:	2000      	movs	r0, #0
 80023f4:	f005 f82c 	bl	8007450 <BSP_MOTION_SENSOR_FIFO_Set_Mode>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <sensor_init+0xb8>)
 80023fc:	6013      	str	r3, [r2, #0]

	// AI init
	aiInit();
 80023fe:	f014 fd51 	bl	8016ea4 <aiInit>
	// PRE PROCESSING init
	pre_processing_init(&pre_processing_data);
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <sensor_init+0xc4>)
 8002404:	f001 fccd 	bl	8003da2 <pre_processing_init>

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20001b38 	.word	0x20001b38
 8002410:	20001b34 	.word	0x20001b34
 8002414:	43500000 	.word	0x43500000
 8002418:	20001da8 	.word	0x20001da8
 800241c:	20001b3c 	.word	0x20001b3c

08002420 <sensor_process>:

void sensor_process(void){
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af04      	add	r7, sp, #16

	if (MemsEventDetected == 1){
 8002426:	4b64      	ldr	r3, [pc, #400]	; (80025b8 <sensor_process+0x198>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	f040 80b5 	bne.w	800259a <sensor_process+0x17a>

		//pre_FIFO_read = BSP_GetTick();
		MemsEventDetected = 0;
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <sensor_process+0x198>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]

		BSP_LED_On(LED1);
 8002436:	2000      	movs	r0, #0
 8002438:	f004 f97a 	bl	8006730 <BSP_LED_On>

		for(int jj=0;jj<num_samples;jj++){
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	e075      	b.n	800252e <sensor_process+0x10e>
			BSP_MOTION_SENSOR_FIFO_Get_Data_Word(ISM330DHCX_0, MOTION_ACCELERO, DataOut);
 8002442:	4a5e      	ldr	r2, [pc, #376]	; (80025bc <sensor_process+0x19c>)
 8002444:	2102      	movs	r1, #2
 8002446:	2000      	movs	r0, #0
 8002448:	f004 ffbc 	bl	80073c4 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>
			ism330dhcx_acc[jj].x = ((float)DataOut[0])*ism330dhcx_acc_sensitivity*0.001; // from [mg] to [g]
 800244c:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <sensor_process+0x19c>)
 800244e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245a:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <sensor_process+0x1a0>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	ee17 0a90 	vmov	r0, s15
 8002468:	f7fe f872 	bl	8000550 <__aeabi_f2d>
 800246c:	a350      	add	r3, pc, #320	; (adr r3, 80025b0 <sensor_process+0x190>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe f8c5 	bl	8000600 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fbb7 	bl	8000bf0 <__aeabi_d2f>
 8002482:	4601      	mov	r1, r0
 8002484:	484f      	ldr	r0, [pc, #316]	; (80025c4 <sensor_process+0x1a4>)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4403      	add	r3, r0
 8002492:	6019      	str	r1, [r3, #0]
			ism330dhcx_acc[jj].y = ((float)DataOut[1])*ism330dhcx_acc_sensitivity*0.001;
 8002494:	4b49      	ldr	r3, [pc, #292]	; (80025bc <sensor_process+0x19c>)
 8002496:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <sensor_process+0x1a0>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ac:	ee17 0a90 	vmov	r0, s15
 80024b0:	f7fe f84e 	bl	8000550 <__aeabi_f2d>
 80024b4:	a33e      	add	r3, pc, #248	; (adr r3, 80025b0 <sensor_process+0x190>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f8a1 	bl	8000600 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb93 	bl	8000bf0 <__aeabi_d2f>
 80024ca:	4601      	mov	r1, r0
 80024cc:	483d      	ldr	r0, [pc, #244]	; (80025c4 <sensor_process+0x1a4>)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4403      	add	r3, r0
 80024da:	3304      	adds	r3, #4
 80024dc:	6019      	str	r1, [r3, #0]
			ism330dhcx_acc[jj].z = ((float)DataOut[2])*ism330dhcx_acc_sensitivity*0.001;
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <sensor_process+0x19c>)
 80024e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ec:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <sensor_process+0x1a0>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	ee17 0a90 	vmov	r0, s15
 80024fa:	f7fe f829 	bl	8000550 <__aeabi_f2d>
 80024fe:	a32c      	add	r3, pc, #176	; (adr r3, 80025b0 <sensor_process+0x190>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe f87c 	bl	8000600 <__aeabi_dmul>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f7fe fb6e 	bl	8000bf0 <__aeabi_d2f>
 8002514:	4601      	mov	r1, r0
 8002516:	482b      	ldr	r0, [pc, #172]	; (80025c4 <sensor_process+0x1a4>)
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4403      	add	r3, r0
 8002524:	3308      	adds	r3, #8
 8002526:	6019      	str	r1, [r3, #0]
		for(int jj=0;jj<num_samples;jj++){
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3301      	adds	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <sensor_process+0x1a8>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4293      	cmp	r3, r2
 8002538:	db83      	blt.n	8002442 <sensor_process+0x22>
		}

		// call pre_processing_functions
		pre_processing_process(ism330dhcx_acc, INPUT_BUFFER_SIZE, preprocessing_output_array, INPUT_BUFFER_SIZE/2, &pre_processing_data);
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <sensor_process+0x1ac>)
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <sensor_process+0x1b0>)
 8002542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002546:	481f      	ldr	r0, [pc, #124]	; (80025c4 <sensor_process+0x1a4>)
 8002548:	f001 fc56 	bl	8003df8 <pre_processing_process>

		// call ai process
		aiProcess(preprocessing_output_array, ai_out);
 800254c:	4921      	ldr	r1, [pc, #132]	; (80025d4 <sensor_process+0x1b4>)
 800254e:	4820      	ldr	r0, [pc, #128]	; (80025d0 <sensor_process+0x1b0>)
 8002550:	f014 fcd4 	bl	8016efc <aiProcess>

		// print to Virtual COM
		snprintf(string_out, sizeof(string_out), "label: %.0f , Accuracy: %.2f \r\n", ai_out[0], ai_out[1]);
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <sensor_process+0x1b4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fff9 	bl	8000550 <__aeabi_f2d>
 800255e:	4604      	mov	r4, r0
 8002560:	460d      	mov	r5, r1
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <sensor_process+0x1b4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd fff2 	bl	8000550 <__aeabi_f2d>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002574:	e9cd 4500 	strd	r4, r5, [sp]
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <sensor_process+0x1b8>)
 800257a:	211e      	movs	r1, #30
 800257c:	4817      	ldr	r0, [pc, #92]	; (80025dc <sensor_process+0x1bc>)
 800257e:	f019 f96b 	bl	801b858 <sniprintf>
		CDC_Transmit_FS((uint8_t*)string_out, strlen(string_out));
 8002582:	4816      	ldr	r0, [pc, #88]	; (80025dc <sensor_process+0x1bc>)
 8002584:	f7fd fe78 	bl	8000278 <strlen>
 8002588:	4603      	mov	r3, r0
 800258a:	b29b      	uxth	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	4813      	ldr	r0, [pc, #76]	; (80025dc <sensor_process+0x1bc>)
 8002590:	f014 f874 	bl	801667c <CDC_Transmit_FS>

		// print to STLINK
		//printf("Class: %f, Accuracy: %f \r\n",ai_out[0],ai_out[1]);

		BSP_LED_Off(LED1);
 8002594:	2000      	movs	r0, #0
 8002596:	f004 f8e5 	bl	8006764 <BSP_LED_Off>

		//time_elapsed = post_FIFO_read - pre_FIFO_read;
	}

	//Get number of unread FIFO samples
	BSP_MOTION_SENSOR_FIFO_Get_Num_Samples(ISM330DHCX_0, &num_samples);
 800259a:	490b      	ldr	r1, [pc, #44]	; (80025c8 <sensor_process+0x1a8>)
 800259c:	2000      	movs	r0, #0
 800259e:	f004 ff7f 	bl	80074a0 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	f3af 8000 	nop.w
 80025b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80025b4:	3f50624d 	.word	0x3f50624d
 80025b8:	20001dad 	.word	0x20001dad
 80025bc:	20001db0 	.word	0x20001db0
 80025c0:	20001da8 	.word	0x20001da8
 80025c4:	20001db8 	.word	0x20001db8
 80025c8:	20001dae 	.word	0x20001dae
 80025cc:	20001b3c 	.word	0x20001b3c
 80025d0:	200029b8 	.word	0x200029b8
 80025d4:	20002bb8 	.word	0x20002bb8
 80025d8:	0801f580 	.word	0x0801f580
 80025dc:	20001b14 	.word	0x20001b14

080025e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_MspInit+0x30>)
 80025e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ec:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_MspInit+0x30>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_MspInit+0x30>)
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	46020c00 	.word	0x46020c00

08002614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_ADC_MspInit+0x80>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d129      	bne.n	800268a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_ADC_MspInit+0x84>)
 8002638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800263c:	4a16      	ldr	r2, [pc, #88]	; (8002698 <HAL_ADC_MspInit+0x84>)
 800263e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002642:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_ADC_MspInit+0x84>)
 8002648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_ADC_MspInit+0x84>)
 8002656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265a:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_ADC_MspInit+0x84>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_ADC_MspInit+0x84>)
 8002666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002672:	2303      	movs	r3, #3
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002676:	2303      	movs	r3, #3
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <HAL_ADC_MspInit+0x88>)
 8002686:	f007 fd7b 	bl	800a180 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	42028000 	.word	0x42028000
 8002698:	46020c00 	.word	0x46020c00
 800269c:	42020800 	.word	0x42020800

080026a0 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0a6      	sub	sp, #152	; 0x98
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(IS_ADF_INSTANCE(hmdf->Instance))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_MDF_MspInit+0x17c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	f040 80ba 	bne.w	8002838 <HAL_MDF_MspInit+0x198>
  {
  /* USER CODE BEGIN ADF1_MspInit 0 */

  /* USER CODE END ADF1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 80026c4:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_MDF_MspInit+0x180>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_MDF_MspInit+0x180>)
 80026cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80026d4:	4b52      	ldr	r3, [pc, #328]	; (8002820 <HAL_MDF_MspInit+0x180>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026e2:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <HAL_MDF_MspInit+0x180>)
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e8:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <HAL_MDF_MspInit+0x180>)
 80026ea:	f043 0310 	orr.w	r3, r3, #16
 80026ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026f2:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <HAL_MDF_MspInit+0x180>)
 80026f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002700:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 800271a:	2303      	movs	r3, #3
 800271c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002720:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002724:	4619      	mov	r1, r3
 8002726:	483f      	ldr	r0, [pc, #252]	; (8002824 <HAL_MDF_MspInit+0x184>)
 8002728:	f007 fd2a 	bl	800a180 <HAL_GPIO_Init>

    /* ADF1 DMA Init */
    /* GPDMA1_REQUEST_ADF1_FLT0 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800272c:	2321      	movs	r3, #33	; 0x21
 800272e:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADF1_FLT0;
 8002730:	2362      	movs	r3, #98	; 0x62
 8002732:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002746:	2301      	movs	r3, #1
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800274a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
    NodeConfig.Init.SrcBurstLength = 1;
 8002750:	2301      	movs	r3, #1
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
    NodeConfig.Init.DestBurstLength = 1;
 8002754:	2301      	movs	r3, #1
 8002756:	643b      	str	r3, [r7, #64]	; 0x40
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8002758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
    NodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800275e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002764:	2300      	movs	r3, #0
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002768:	2300      	movs	r3, #0
 800276a:	65fb      	str	r3, [r7, #92]	; 0x5c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800276c:	2300      	movs	r3, #0
 800276e:	653b      	str	r3, [r7, #80]	; 0x50
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_UNPACK;
 8002770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002774:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 8002776:	f107 0318 	add.w	r3, r7, #24
 800277a:	492b      	ldr	r1, [pc, #172]	; (8002828 <HAL_MDF_MspInit+0x188>)
 800277c:	4618      	mov	r0, r3
 800277e:	f006 febb 	bl	80094f8 <HAL_DMAEx_List_BuildNode>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_MDF_MspInit+0xec>
    {
      Error_Handler();
 8002788:	f7ff fde0 	bl	800234c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 800278c:	4a26      	ldr	r2, [pc, #152]	; (8002828 <HAL_MDF_MspInit+0x188>)
 800278e:	2100      	movs	r1, #0
 8002790:	4826      	ldr	r0, [pc, #152]	; (800282c <HAL_MDF_MspInit+0x18c>)
 8002792:	f006 fec7 	bl	8009524 <HAL_DMAEx_List_InsertNode>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_MDF_MspInit+0x100>
    {
      Error_Handler();
 800279c:	f7ff fdd6 	bl	800234c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 80027a0:	4822      	ldr	r0, [pc, #136]	; (800282c <HAL_MDF_MspInit+0x18c>)
 80027a2:	f006 ff88 	bl	80096b6 <HAL_DMAEx_List_SetCircularMode>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_MDF_MspInit+0x110>
    {
      Error_Handler();
 80027ac:	f7ff fdce 	bl	800234c <Error_Handler>
    }

    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_MDF_MspInit+0x194>)
 80027b4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027b8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027cc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027d4:	2281      	movs	r2, #129	; 0x81
 80027d6:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 80027d8:	4815      	ldr	r0, [pc, #84]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027da:	f006 fd5f 	bl	800929c <HAL_DMAEx_List_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_MDF_MspInit+0x148>
    {
      Error_Handler();
 80027e4:	f7ff fdb2 	bl	800234c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 80027e8:	4910      	ldr	r1, [pc, #64]	; (800282c <HAL_MDF_MspInit+0x18c>)
 80027ea:	4811      	ldr	r0, [pc, #68]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027ec:	f006 ffc4 	bl	8009778 <HAL_DMAEx_List_LinkQ>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_MDF_MspInit+0x15a>
    {
      Error_Handler();
 80027f6:	f7ff fda9 	bl	800234c <Error_Handler>
    }

    __HAL_LINKDMA(hmdf, hdma, handle_GPDMA1_Channel5);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_MDF_MspInit+0x190>)
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002800:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <HAL_MDF_MspInit+0x190>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002806:	2110      	movs	r1, #16
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <HAL_MDF_MspInit+0x190>)
 800280a:	f006 fa8a 	bl	8008d22 <HAL_DMA_ConfigChannelAttributes>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80d9 	beq.w	80029c8 <HAL_MDF_MspInit+0x328>
    {
      Error_Handler();
 8002816:	f7ff fd99 	bl	800234c <Error_Handler>
  /* USER CODE BEGIN MDF1_MspInit 1 */

  /* USER CODE END MDF1_MspInit 1 */
  }

}
 800281a:	e0d5      	b.n	80029c8 <HAL_MDF_MspInit+0x328>
 800281c:	46024080 	.word	0x46024080
 8002820:	46020c00 	.word	0x46020c00
 8002824:	42021000 	.word	0x42021000
 8002828:	20000d28 	.word	0x20000d28
 800282c:	20000d4c 	.word	0x20000d4c
 8002830:	20000d64 	.word	0x20000d64
 8002834:	400202d0 	.word	0x400202d0
  else if(IS_MDF_INSTANCE(hmdf->Instance))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a64      	ldr	r2, [pc, #400]	; (80029d0 <HAL_MDF_MspInit+0x330>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d019      	beq.n	8002876 <HAL_MDF_MspInit+0x1d6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <HAL_MDF_MspInit+0x334>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d014      	beq.n	8002876 <HAL_MDF_MspInit+0x1d6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a61      	ldr	r2, [pc, #388]	; (80029d8 <HAL_MDF_MspInit+0x338>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00f      	beq.n	8002876 <HAL_MDF_MspInit+0x1d6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_MDF_MspInit+0x33c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00a      	beq.n	8002876 <HAL_MDF_MspInit+0x1d6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5e      	ldr	r2, [pc, #376]	; (80029e0 <HAL_MDF_MspInit+0x340>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d005      	beq.n	8002876 <HAL_MDF_MspInit+0x1d6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5d      	ldr	r2, [pc, #372]	; (80029e4 <HAL_MDF_MspInit+0x344>)
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 80a9 	bne.w	80029c8 <HAL_MDF_MspInit+0x328>
    __HAL_RCC_MDF1_CLK_ENABLE();
 8002876:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <HAL_MDF_MspInit+0x348>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	4a5a      	ldr	r2, [pc, #360]	; (80029e8 <HAL_MDF_MspInit+0x348>)
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002886:	4b58      	ldr	r3, [pc, #352]	; (80029e8 <HAL_MDF_MspInit+0x348>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002894:	4b54      	ldr	r3, [pc, #336]	; (80029e8 <HAL_MDF_MspInit+0x348>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289a:	4a53      	ldr	r2, [pc, #332]	; (80029e8 <HAL_MDF_MspInit+0x348>)
 800289c:	f043 0320 	orr.w	r3, r3, #32
 80028a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_MDF_MspInit+0x348>)
 80028a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO3_EX_Pin;
 80028b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80028cc:	2306      	movs	r3, #6
 80028ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIO3_EX_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80028d6:	4619      	mov	r1, r3
 80028d8:	4844      	ldr	r0, [pc, #272]	; (80029ec <HAL_MDF_MspInit+0x34c>)
 80028da:	f007 fc51 	bl	800a180 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80028de:	2321      	movs	r3, #33	; 0x21
 80028e0:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Request = GPDMA1_REQUEST_MDF1_FLT0;
 80028e2:	235c      	movs	r3, #92	; 0x5c
 80028e4:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80028f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80028f8:	2301      	movs	r3, #1
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80028fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
    NodeConfig.Init.SrcBurstLength = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
    NodeConfig.Init.DestBurstLength = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800290a:	2300      	movs	r3, #0
 800290c:	647b      	str	r3, [r7, #68]	; 0x44
    NodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800290e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002912:	64bb      	str	r3, [r7, #72]	; 0x48
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002914:	2300      	movs	r3, #0
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002918:	2300      	movs	r3, #0
 800291a:	65fb      	str	r3, [r7, #92]	; 0x5c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800291c:	2300      	movs	r3, #0
 800291e:	653b      	str	r3, [r7, #80]	; 0x50
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_UNPACK;
 8002920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002924:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 8002926:	f107 0318 	add.w	r3, r7, #24
 800292a:	4931      	ldr	r1, [pc, #196]	; (80029f0 <HAL_MDF_MspInit+0x350>)
 800292c:	4618      	mov	r0, r3
 800292e:	f006 fde3 	bl	80094f8 <HAL_DMAEx_List_BuildNode>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_MDF_MspInit+0x29c>
      Error_Handler();
 8002938:	f7ff fd08 	bl	800234c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 800293c:	4a2c      	ldr	r2, [pc, #176]	; (80029f0 <HAL_MDF_MspInit+0x350>)
 800293e:	2100      	movs	r1, #0
 8002940:	482c      	ldr	r0, [pc, #176]	; (80029f4 <HAL_MDF_MspInit+0x354>)
 8002942:	f006 fdef 	bl	8009524 <HAL_DMAEx_List_InsertNode>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_MDF_MspInit+0x2b0>
      Error_Handler();
 800294c:	f7ff fcfe 	bl	800234c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8002950:	4828      	ldr	r0, [pc, #160]	; (80029f4 <HAL_MDF_MspInit+0x354>)
 8002952:	f006 feb0 	bl	80096b6 <HAL_DMAEx_List_SetCircularMode>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_MDF_MspInit+0x2c0>
      Error_Handler();
 800295c:	f7ff fcf6 	bl	800234c <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 8002962:	4a26      	ldr	r2, [pc, #152]	; (80029fc <HAL_MDF_MspInit+0x35c>)
 8002964:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 8002968:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 8002970:	2200      	movs	r2, #0
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 8002976:	2200      	movs	r2, #0
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 800297c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 8002984:	2281      	movs	r2, #129	; 0x81
 8002986:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8002988:	481b      	ldr	r0, [pc, #108]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 800298a:	f006 fc87 	bl	800929c <HAL_DMAEx_List_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_MDF_MspInit+0x2f8>
      Error_Handler();
 8002994:	f7ff fcda 	bl	800234c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 8002998:	4916      	ldr	r1, [pc, #88]	; (80029f4 <HAL_MDF_MspInit+0x354>)
 800299a:	4817      	ldr	r0, [pc, #92]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 800299c:	f006 feec 	bl	8009778 <HAL_DMAEx_List_LinkQ>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_MDF_MspInit+0x30a>
      Error_Handler();
 80029a6:	f7ff fcd1 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hmdf, hdma, handle_GPDMA1_Channel4);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 80029b6:	2110      	movs	r1, #16
 80029b8:	480f      	ldr	r0, [pc, #60]	; (80029f8 <HAL_MDF_MspInit+0x358>)
 80029ba:	f006 f9b2 	bl	8008d22 <HAL_DMA_ConfigChannelAttributes>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_MDF_MspInit+0x328>
      Error_Handler();
 80029c4:	f7ff fcc2 	bl	800234c <Error_Handler>
}
 80029c8:	bf00      	nop
 80029ca:	3798      	adds	r7, #152	; 0x98
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40025080 	.word	0x40025080
 80029d4:	40025100 	.word	0x40025100
 80029d8:	40025180 	.word	0x40025180
 80029dc:	40025200 	.word	0x40025200
 80029e0:	40025280 	.word	0x40025280
 80029e4:	40025300 	.word	0x40025300
 80029e8:	46020c00 	.word	0x46020c00
 80029ec:	42021400 	.word	0x42021400
 80029f0:	20000ddc 	.word	0x20000ddc
 80029f4:	20000e00 	.word	0x20000e00
 80029f8:	20000e18 	.word	0x20000e18
 80029fc:	40020250 	.word	0x40020250

08002a00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <HAL_CRC_MspInit+0x3c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_CRC_MspInit+0x40>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_CRC_MspInit+0x40>)
 8002a1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_CRC_MspInit+0x40>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40023000 	.word	0x40023000
 8002a40:	46020c00 	.word	0x46020c00

08002a44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0bc      	sub	sp, #240	; 0xf0
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a5c:	f107 0310 	add.w	r3, r7, #16
 8002a60:	22c8      	movs	r2, #200	; 0xc8
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f017 ff7a 	bl	801a95e <memset>
  if(hdac->Instance==DAC1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <HAL_DAC_MspInit+0xbc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d140      	bne.n	8002af6 <HAL_DAC_MspInit+0xb2>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1;
 8002a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8002a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00a ffa9 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_DAC_MspInit+0x58>
    {
      Error_Handler();
 8002a98:	f7ff fc58 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_DAC_MspInit+0xc0>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa2:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <HAL_DAC_MspInit+0xc0>)
 8002aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_DAC_MspInit+0xc0>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_DAC_MspInit+0xc0>)
 8002abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_DAC_MspInit+0xc0>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_DAC_MspInit+0xc0>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ad8:	2310      	movs	r3, #16
 8002ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aee:	4619      	mov	r1, r3
 8002af0:	4805      	ldr	r0, [pc, #20]	; (8002b08 <HAL_DAC_MspInit+0xc4>)
 8002af2:	f007 fb45 	bl	800a180 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002af6:	bf00      	nop
 8002af8:	37f0      	adds	r7, #240	; 0xf0
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	46021800 	.word	0x46021800
 8002b04:	46020c00 	.word	0x46020c00
 8002b08:	42020000 	.word	0x42020000

08002b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0c2      	sub	sp, #264	; 0x108
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b1a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b30:	22c8      	movs	r2, #200	; 0xc8
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f017 ff12 	bl	801a95e <memset>
  if(hi2c->Instance==I2C1)
 8002b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4aaa      	ldr	r2, [pc, #680]	; (8002df0 <HAL_I2C_MspInit+0x2e4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d147      	bne.n	8002bdc <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b4c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b62:	4618      	mov	r0, r3
 8002b64:	f00a ff3e 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002b6e:	f7ff fbed 	bl	800234c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	4ba0      	ldr	r3, [pc, #640]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b78:	4a9e      	ldr	r2, [pc, #632]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002b7a:	f043 0302 	orr.w	r3, r3, #2
 8002b7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b82:	4b9c      	ldr	r3, [pc, #624]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002b90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b98:	2312      	movs	r3, #18
 8002b9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002baa:	2304      	movs	r3, #4
 8002bac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4890      	ldr	r0, [pc, #576]	; (8002df8 <HAL_I2C_MspInit+0x2ec>)
 8002bb8:	f007 fae2 	bl	800a180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bbc:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc2:	4a8c      	ldr	r2, [pc, #560]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002bcc:	4b89      	ldr	r3, [pc, #548]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002bda:	e16d      	b.n	8002eb8 <HAL_I2C_MspInit+0x3ac>
  else if(hi2c->Instance==I2C2)
 8002bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a84      	ldr	r2, [pc, #528]	; (8002dfc <HAL_I2C_MspInit+0x2f0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f040 8114 	bne.w	8002e18 <HAL_I2C_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bf0:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c06:	4618      	mov	r0, r3
 8002c08:	f00a feec 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8002c12:	f7ff fb9b 	bl	800234c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c16:	4b77      	ldr	r3, [pc, #476]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c1c:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c34:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3a:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c44:	4b6b      	ldr	r3, [pc, #428]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c58:	2312      	movs	r3, #18
 8002c5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c70:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4862      	ldr	r0, [pc, #392]	; (8002e00 <HAL_I2C_MspInit+0x2f4>)
 8002c78:	f007 fa82 	bl	800a180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c82:	2312      	movs	r3, #18
 8002c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c94:	2304      	movs	r3, #4
 8002c96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c9a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4858      	ldr	r0, [pc, #352]	; (8002e04 <HAL_I2C_MspInit+0x2f8>)
 8002ca2:	f007 fa6d 	bl	800a180 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ca6:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cac:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cb2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002cb6:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <HAL_I2C_MspInit+0x2e8>)
 8002cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002cc6:	4a51      	ldr	r2, [pc, #324]	; (8002e0c <HAL_I2C_MspInit+0x300>)
 8002cc8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 8002cca:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002ccc:	2210      	movs	r2, #16
 8002cce:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cdc:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8002ce4:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002cf0:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8002cfc:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002d08:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8002d14:	4b3c      	ldr	r3, [pc, #240]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002d1a:	483b      	ldr	r0, [pc, #236]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d1c:	f005 fc58 	bl	80085d0 <HAL_DMA_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_MspInit+0x21e>
      Error_Handler();
 8002d26:	f7ff fb11 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8002d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
 8002d38:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d46:	2110      	movs	r1, #16
 8002d48:	482f      	ldr	r0, [pc, #188]	; (8002e08 <HAL_I2C_MspInit+0x2fc>)
 8002d4a:	f005 ffea 	bl	8008d22 <HAL_DMA_ConfigChannelAttributes>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 8002d54:	f7ff fafa 	bl	800234c <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d5a:	4a2e      	ldr	r2, [pc, #184]	; (8002e14 <HAL_I2C_MspInit+0x308>)
 8002d5c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d60:	220f      	movs	r2, #15
 8002d62:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d6a:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d7c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002d84:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002d8a:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002d90:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002dae:	4818      	ldr	r0, [pc, #96]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002db0:	f005 fc0e 	bl	80085d0 <HAL_DMA_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_MspInit+0x2b2>
      Error_Handler();
 8002dba:	f7ff fac7 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 8002dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dcc:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002dda:	2110      	movs	r1, #16
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <HAL_I2C_MspInit+0x304>)
 8002dde:	f005 ffa0 	bl	8008d22 <HAL_DMA_ConfigChannelAttributes>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d067      	beq.n	8002eb8 <HAL_I2C_MspInit+0x3ac>
      Error_Handler();
 8002de8:	f7ff fab0 	bl	800234c <Error_Handler>
}
 8002dec:	e064      	b.n	8002eb8 <HAL_I2C_MspInit+0x3ac>
 8002dee:	bf00      	nop
 8002df0:	40005400 	.word	0x40005400
 8002df4:	46020c00 	.word	0x46020c00
 8002df8:	42020400 	.word	0x42020400
 8002dfc:	40005800 	.word	0x40005800
 8002e00:	42021400 	.word	0x42021400
 8002e04:	42021c00 	.word	0x42021c00
 8002e08:	20000fac 	.word	0x20000fac
 8002e0c:	400201d0 	.word	0x400201d0
 8002e10:	20001024 	.word	0x20001024
 8002e14:	40020150 	.word	0x40020150
  else if(hi2c->Instance==I2C3)
 8002e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <HAL_I2C_MspInit+0x3b8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d146      	bne.n	8002eb8 <HAL_I2C_MspInit+0x3ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00a fdcf 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_MspInit+0x344>
      Error_Handler();
 8002e4c:	f7ff fa7e 	bl	800234c <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_I2C_MspInit+0x3bc>)
 8002e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_I2C_MspInit+0x3bc>)
 8002e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_I2C_MspInit+0x3bc>)
 8002e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002e6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e76:	2312      	movs	r3, #18
 8002e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e88:	2304      	movs	r3, #4
 8002e8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e8e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e92:	4619      	mov	r1, r3
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <HAL_I2C_MspInit+0x3c0>)
 8002e96:	f007 f973 	bl	800a180 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_I2C_MspInit+0x3bc>)
 8002e9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_I2C_MspInit+0x3bc>)
 8002ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_I2C_MspInit+0x3bc>)
 8002eac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	46002800 	.word	0x46002800
 8002ec8:	46020c00 	.word	0x46020c00
 8002ecc:	42021800 	.word	0x42021800

08002ed0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b0b6      	sub	sp, #216	; 0xd8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	22c8      	movs	r2, #200	; 0xc8
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f017 fd3c 	bl	801a95e <memset>
  if(hrtc->Instance==RTC)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_RTC_MspInit+0x80>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d12a      	bne.n	8002f46 <HAL_RTC_MspInit+0x76>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ef0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f00a fd6b 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002f14:	f7ff fa1a 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <HAL_RTC_MspInit+0x84>)
 8002f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f1e:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_RTC_MspInit+0x84>)
 8002f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RTC_MspInit+0x84>)
 8002f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_RTC_MspInit+0x84>)
 8002f30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f34:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RTC_MspInit+0x84>)
 8002f3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f46:	bf00      	nop
 8002f48:	37d8      	adds	r7, #216	; 0xd8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	46007800 	.word	0x46007800
 8002f54:	46020c00 	.word	0x46020c00

08002f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0c4      	sub	sp, #272	; 0x110
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f66:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f7c:	22c8      	movs	r2, #200	; 0xc8
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f017 fcec 	bl	801a95e <memset>
  if(hspi->Instance==SPI1)
 8002f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4aaf      	ldr	r2, [pc, #700]	; (8003250 <HAL_SPI_MspInit+0x2f8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d147      	bne.n	8003028 <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002fa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f00a fd17 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002fbc:	f7ff f9c6 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc0:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8002fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fc6:	4aa3      	ldr	r2, [pc, #652]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8002fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fcc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002fd0:	4ba0      	ldr	r3, [pc, #640]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8002fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fde:	4b9d      	ldr	r3, [pc, #628]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8002fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe4:	4a9b      	ldr	r2, [pc, #620]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8002fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fee:	4b99      	ldr	r3, [pc, #612]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8002ffc:	231c      	movs	r3, #28
 8002ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003014:	2305      	movs	r3, #5
 8003016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800301a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800301e:	4619      	mov	r1, r3
 8003020:	488d      	ldr	r0, [pc, #564]	; (8003258 <HAL_SPI_MspInit+0x300>)
 8003022:	f007 f8ad 	bl	800a180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003026:	e1d1      	b.n	80033cc <HAL_SPI_MspInit+0x474>
  else if(hspi->Instance==SPI2)
 8003028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800302c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a89      	ldr	r2, [pc, #548]	; (800325c <HAL_SPI_MspInit+0x304>)
 8003036:	4293      	cmp	r3, r2
 8003038:	f040 811e 	bne.w	8003278 <HAL_SPI_MspInit+0x320>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800303c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800304e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003052:	4618      	mov	r0, r3
 8003054:	f00a fcc6 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 800305e:	f7ff f975 	bl	800234c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003062:	4b7c      	ldr	r3, [pc, #496]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8003064:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003068:	4a7a      	ldr	r2, [pc, #488]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 800306a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003072:	4b78      	ldr	r3, [pc, #480]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8003074:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003080:	4b74      	ldr	r3, [pc, #464]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8003082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003086:	4a73      	ldr	r2, [pc, #460]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003090:	4b70      	ldr	r3, [pc, #448]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 8003092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800309e:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 80030a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a4:	4a6b      	ldr	r2, [pc, #428]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030ae:	4b69      	ldr	r3, [pc, #420]	; (8003254 <HAL_SPI_MspInit+0x2fc>)
 80030b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80030bc:	230a      	movs	r3, #10
 80030be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030d4:	2305      	movs	r3, #5
 80030d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030da:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80030de:	4619      	mov	r1, r3
 80030e0:	485f      	ldr	r0, [pc, #380]	; (8003260 <HAL_SPI_MspInit+0x308>)
 80030e2:	f007 f84d 	bl	800a180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030e6:	2308      	movs	r3, #8
 80030e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030fe:	2305      	movs	r3, #5
 8003100:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003104:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003108:	4619      	mov	r1, r3
 800310a:	4856      	ldr	r0, [pc, #344]	; (8003264 <HAL_SPI_MspInit+0x30c>)
 800310c:	f007 f838 	bl	800a180 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8003110:	4b55      	ldr	r3, [pc, #340]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003112:	4a56      	ldr	r2, [pc, #344]	; (800326c <HAL_SPI_MspInit+0x314>)
 8003114:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 8003116:	4b54      	ldr	r3, [pc, #336]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003118:	2209      	movs	r2, #9
 800311a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800311c:	4b52      	ldr	r3, [pc, #328]	; (8003268 <HAL_SPI_MspInit+0x310>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003122:	4b51      	ldr	r3, [pc, #324]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003128:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 800312a:	4b4f      	ldr	r3, [pc, #316]	; (8003268 <HAL_SPI_MspInit+0x310>)
 800312c:	2208      	movs	r2, #8
 800312e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8003130:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003132:	2200      	movs	r2, #0
 8003134:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003136:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800313c:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_SPI_MspInit+0x310>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003144:	2200      	movs	r2, #0
 8003146:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8003148:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_SPI_MspInit+0x310>)
 800314a:	2201      	movs	r2, #1
 800314c:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 800314e:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003150:	2201      	movs	r2, #1
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003154:	4b44      	ldr	r3, [pc, #272]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003156:	2200      	movs	r2, #0
 8003158:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_SPI_MspInit+0x310>)
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8003160:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003162:	2200      	movs	r2, #0
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8003166:	4840      	ldr	r0, [pc, #256]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003168:	f005 fa32 	bl	80085d0 <HAL_DMA_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_SPI_MspInit+0x21e>
      Error_Handler();
 8003172:	f7ff f8eb 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8003176:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800317a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a39      	ldr	r2, [pc, #228]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003186:	4a38      	ldr	r2, [pc, #224]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003188:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800318c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003194:	2110      	movs	r1, #16
 8003196:	4834      	ldr	r0, [pc, #208]	; (8003268 <HAL_SPI_MspInit+0x310>)
 8003198:	f005 fdc3 	bl	8008d22 <HAL_DMA_ConfigChannelAttributes>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 80031a2:	f7ff f8d3 	bl	800234c <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80031a6:	4b32      	ldr	r3, [pc, #200]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031a8:	4a32      	ldr	r2, [pc, #200]	; (8003274 <HAL_SPI_MspInit+0x31c>)
 80031aa:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80031ac:	4b30      	ldr	r3, [pc, #192]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031ae:	2208      	movs	r2, #8
 80031b0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80031b2:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031ca:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80031cc:	4b28      	ldr	r3, [pc, #160]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031da:	2200      	movs	r2, #0
 80031dc:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80031ea:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80031f0:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80031fc:	481c      	ldr	r0, [pc, #112]	; (8003270 <HAL_SPI_MspInit+0x318>)
 80031fe:	f005 f9e7 	bl	80085d0 <HAL_DMA_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_SPI_MspInit+0x2b4>
      Error_Handler();
 8003208:	f7ff f8a0 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 800320c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003210:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a16      	ldr	r2, [pc, #88]	; (8003270 <HAL_SPI_MspInit+0x318>)
 8003218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800321c:	4a14      	ldr	r2, [pc, #80]	; (8003270 <HAL_SPI_MspInit+0x318>)
 800321e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800322a:	2110      	movs	r1, #16
 800322c:	4810      	ldr	r0, [pc, #64]	; (8003270 <HAL_SPI_MspInit+0x318>)
 800322e:	f005 fd78 	bl	8008d22 <HAL_DMA_ConfigChannelAttributes>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_SPI_MspInit+0x2e4>
      Error_Handler();
 8003238:	f7ff f888 	bl	800234c <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800323c:	2200      	movs	r2, #0
 800323e:	2100      	movs	r1, #0
 8003240:	203c      	movs	r0, #60	; 0x3c
 8003242:	f004 feac 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003246:	203c      	movs	r0, #60	; 0x3c
 8003248:	f004 fec3 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
}
 800324c:	e0be      	b.n	80033cc <HAL_SPI_MspInit+0x474>
 800324e:	bf00      	nop
 8003250:	40013000 	.word	0x40013000
 8003254:	46020c00 	.word	0x46020c00
 8003258:	42021800 	.word	0x42021800
 800325c:	40003800 	.word	0x40003800
 8003260:	42022000 	.word	0x42022000
 8003264:	42020c00 	.word	0x42020c00
 8003268:	200013ac 	.word	0x200013ac
 800326c:	400200d0 	.word	0x400200d0
 8003270:	20001424 	.word	0x20001424
 8003274:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 8003278:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800327c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <HAL_SPI_MspInit+0x480>)
 8003286:	4293      	cmp	r3, r2
 8003288:	f040 80a0 	bne.w	80033cc <HAL_SPI_MspInit+0x474>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800328c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8003298:	2310      	movs	r3, #16
 800329a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800329e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00a fb9e 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_SPI_MspInit+0x35a>
      Error_Handler();
 80032ae:	f7ff f84d 	bl	800234c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032b8:	4a48      	ldr	r2, [pc, #288]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032ba:	f043 0320 	orr.w	r3, r3, #32
 80032be:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80032c2:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d0:	4b42      	ldr	r3, [pc, #264]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d6:	4a41      	ldr	r2, [pc, #260]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f4:	4a39      	ldr	r2, [pc, #228]	; (80033dc <HAL_SPI_MspInit+0x484>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_SPI_MspInit+0x484>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	f003 0201 	and.w	r2, r3, #1
 8003308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800330c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003316:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800331a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_SPI_MspInit+0x484>)
 800331e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <HAL_SPI_MspInit+0x484>)
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_SPI_MspInit+0x484>)
 800332e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003332:	f003 0202 	and.w	r2, r3, #2
 8003336:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800333a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003348:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800334a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003358:	2301      	movs	r3, #1
 800335a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003364:	2306      	movs	r3, #6
 8003366:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800336a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800336e:	4619      	mov	r1, r3
 8003370:	481b      	ldr	r0, [pc, #108]	; (80033e0 <HAL_SPI_MspInit+0x488>)
 8003372:	f006 ff05 	bl	800a180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003390:	2306      	movs	r3, #6
 8003392:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800339a:	4619      	mov	r1, r3
 800339c:	4811      	ldr	r0, [pc, #68]	; (80033e4 <HAL_SPI_MspInit+0x48c>)
 800339e:	f006 feef 	bl	800a180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033a2:	2330      	movs	r3, #48	; 0x30
 80033a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033ba:	2306      	movs	r3, #6
 80033bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80033c4:	4619      	mov	r1, r3
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <HAL_SPI_MspInit+0x490>)
 80033c8:	f006 feda 	bl	800a180 <HAL_GPIO_Init>
}
 80033cc:	bf00      	nop
 80033ce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	46002000 	.word	0x46002000
 80033dc:	46020c00 	.word	0x46020c00
 80033e0:	42021800 	.word	0x42021800
 80033e4:	42020000 	.word	0x42020000
 80033e8:	42020400 	.word	0x42020400

080033ec <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <HAL_SPI_MspDeInit+0xb4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10c      	bne.n	8003418 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <HAL_SPI_MspDeInit+0xb8>)
 8003400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_SPI_MspDeInit+0xb8>)
 8003406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800340a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2);
 800340e:	211c      	movs	r1, #28
 8003410:	4825      	ldr	r0, [pc, #148]	; (80034a8 <HAL_SPI_MspDeInit+0xbc>)
 8003412:	f007 f88d 	bl	800a530 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8003416:	e03f      	b.n	8003498 <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a23      	ldr	r2, [pc, #140]	; (80034ac <HAL_SPI_MspDeInit+0xc0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d11f      	bne.n	8003462 <HAL_SPI_MspDeInit+0x76>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_SPI_MspDeInit+0xb8>)
 8003424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003428:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <HAL_SPI_MspDeInit+0xb8>)
 800342a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800342e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1|GPIO_PIN_3);
 8003432:	210a      	movs	r1, #10
 8003434:	481e      	ldr	r0, [pc, #120]	; (80034b0 <HAL_SPI_MspDeInit+0xc4>)
 8003436:	f007 f87b 	bl	800a530 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 800343a:	2108      	movs	r1, #8
 800343c:	481d      	ldr	r0, [pc, #116]	; (80034b4 <HAL_SPI_MspDeInit+0xc8>)
 800343e:	f007 f877 	bl	800a530 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003448:	4618      	mov	r0, r3
 800344a:	f005 f9f3 	bl	8008834 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003454:	4618      	mov	r0, r3
 8003456:	f005 f9ed 	bl	8008834 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800345a:	203c      	movs	r0, #60	; 0x3c
 800345c:	f004 fdc7 	bl	8007fee <HAL_NVIC_DisableIRQ>
}
 8003460:	e01a      	b.n	8003498 <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <HAL_SPI_MspDeInit+0xcc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d115      	bne.n	8003498 <HAL_SPI_MspDeInit+0xac>
    __HAL_RCC_SPI3_CLK_DISABLE();
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <HAL_SPI_MspDeInit+0xb8>)
 800346e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <HAL_SPI_MspDeInit+0xb8>)
 8003474:	f023 0320 	bic.w	r3, r3, #32
 8003478:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800347c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003480:	4809      	ldr	r0, [pc, #36]	; (80034a8 <HAL_SPI_MspDeInit+0xbc>)
 8003482:	f007 f855 	bl	800a530 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8003486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800348a:	480c      	ldr	r0, [pc, #48]	; (80034bc <HAL_SPI_MspDeInit+0xd0>)
 800348c:	f007 f850 	bl	800a530 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4|GPIO_PIN_5);
 8003490:	2130      	movs	r1, #48	; 0x30
 8003492:	480b      	ldr	r0, [pc, #44]	; (80034c0 <HAL_SPI_MspDeInit+0xd4>)
 8003494:	f007 f84c 	bl	800a530 <HAL_GPIO_DeInit>
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013000 	.word	0x40013000
 80034a4:	46020c00 	.word	0x46020c00
 80034a8:	42021800 	.word	0x42021800
 80034ac:	40003800 	.word	0x40003800
 80034b0:	42022000 	.word	0x42022000
 80034b4:	42020c00 	.word	0x42020c00
 80034b8:	46002000 	.word	0x46002000
 80034bc:	42020000 	.word	0x42020000
 80034c0:	42020400 	.word	0x42020400

080034c4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1a      	ldr	r2, [pc, #104]	; (800354c <HAL_TIM_IC_MspInit+0x88>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d12d      	bne.n	8003542 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_TIM_IC_MspInit+0x8c>)
 80034e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_TIM_IC_MspInit+0x8c>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <HAL_TIM_IC_MspInit+0x8c>)
 80034f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_TIM_IC_MspInit+0x8c>)
 8003506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350a:	4a11      	ldr	r2, [pc, #68]	; (8003550 <HAL_TIM_IC_MspInit+0x8c>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_TIM_IC_MspInit+0x8c>)
 8003516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_PWM_Pin;
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003532:	2302      	movs	r3, #2
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4619      	mov	r1, r3
 800353c:	4805      	ldr	r0, [pc, #20]	; (8003554 <HAL_TIM_IC_MspInit+0x90>)
 800353e:	f006 fe1f 	bl	800a180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003542:	bf00      	nop
 8003544:	3728      	adds	r7, #40	; 0x28
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40000400 	.word	0x40000400
 8003550:	46020c00 	.word	0x46020c00
 8003554:	42020800 	.word	0x42020800

08003558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0c0      	sub	sp, #256	; 0x100
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003570:	f107 0320 	add.w	r3, r7, #32
 8003574:	22c8      	movs	r2, #200	; 0xc8
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f017 f9f0 	bl	801a95e <memset>
  if(huart->Instance==USART2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <HAL_UART_MspInit+0x1a4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d145      	bne.n	8003614 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003588:	f04f 0202 	mov.w	r2, #2
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003594:	2300      	movs	r3, #0
 8003596:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003598:	f107 0320 	add.w	r3, r7, #32
 800359c:	4618      	mov	r0, r3
 800359e:	f00a fa21 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80035a8:	f7fe fed0 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ac:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 80035ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035b2:	4a53      	ldr	r2, [pc, #332]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80035bc:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 80035be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ca:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d0:	4a4b      	ldr	r2, [pc, #300]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 80035d2:	f043 0308 	orr.w	r3, r3, #8
 80035d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 80035dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 80035e8:	2370      	movs	r3, #112	; 0x70
 80035ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003600:	2307      	movs	r3, #7
 8003602:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003606:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800360a:	4619      	mov	r1, r3
 800360c:	483d      	ldr	r0, [pc, #244]	; (8003704 <HAL_UART_MspInit+0x1ac>)
 800360e:	f006 fdb7 	bl	800a180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003612:	e06e      	b.n	80036f2 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3b      	ldr	r2, [pc, #236]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d169      	bne.n	80036f2 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800361e:	f04f 0204 	mov.w	r2, #4
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800362a:	2300      	movs	r3, #0
 800362c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	4618      	mov	r0, r3
 8003634:	f00a f9d6 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_MspInit+0xea>
      Error_Handler();
 800363e:	f7fe fe85 	bl	800234c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003642:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 800364a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003654:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003666:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003670:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003684:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003686:	f043 0308 	orr.w	r3, r3, #8
 800368a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800368e:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <HAL_UART_MspInit+0x1a8>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 800369c:	23a0      	movs	r3, #160	; 0xa0
 800369e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036b4:	2307      	movs	r3, #7
 80036b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036be:	4619      	mov	r1, r3
 80036c0:	4812      	ldr	r0, [pc, #72]	; (800370c <HAL_UART_MspInit+0x1b4>)
 80036c2:	f006 fd5d 	bl	800a180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80036c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80036ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036e0:	2307      	movs	r3, #7
 80036e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036ea:	4619      	mov	r1, r3
 80036ec:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_UART_MspInit+0x1ac>)
 80036ee:	f006 fd47 	bl	800a180 <HAL_GPIO_Init>
}
 80036f2:	bf00      	nop
 80036f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40004400 	.word	0x40004400
 8003700:	46020c00 	.word	0x46020c00
 8003704:	42020c00 	.word	0x42020c00
 8003708:	40004800 	.word	0x40004800
 800370c:	42020000 	.word	0x42020000

08003710 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0be      	sub	sp, #248	; 0xf8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003728:	f107 0318 	add.w	r3, r7, #24
 800372c:	22c8      	movs	r2, #200	; 0xc8
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f017 f914 	bl	801a95e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <HAL_PCD_MspInit+0x11c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d171      	bne.n	8003824 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003740:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003752:	f107 0318 	add.w	r3, r7, #24
 8003756:	4618      	mov	r0, r3
 8003758:	f00a f944 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8003762:	f7fe fdf3 	bl	800234c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_PCD_MspInit+0x120>)
 8003768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376c:	4a30      	ldr	r2, [pc, #192]	; (8003830 <HAL_PCD_MspInit+0x120>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_PCD_MspInit+0x120>)
 8003778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8003784:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003788:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	2302      	movs	r3, #2
 800378e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800379e:	230a      	movs	r3, #10
 80037a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4822      	ldr	r0, [pc, #136]	; (8003834 <HAL_PCD_MspInit+0x124>)
 80037ac:	f006 fce8 	bl	800a180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <HAL_PCD_MspInit+0x120>)
 80037b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_PCD_MspInit+0x120>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_PCD_MspInit+0x120>)
 80037c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_PCD_MspInit+0x120>)
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d119      	bne.n	8003810 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_PCD_MspInit+0x120>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_PCD_MspInit+0x120>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_PCD_MspInit+0x120>)
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80037fa:	f008 fe17 	bl	800c42c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_PCD_MspInit+0x120>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <HAL_PCD_MspInit+0x120>)
 8003806:	f023 0304 	bic.w	r3, r3, #4
 800380a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800380e:	e001      	b.n	8003814 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8003810:	f008 fe0c 	bl	800c42c <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003814:	2200      	movs	r2, #0
 8003816:	2100      	movs	r1, #0
 8003818:	2049      	movs	r0, #73	; 0x49
 800381a:	f004 fbc0 	bl	8007f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800381e:	2049      	movs	r0, #73	; 0x49
 8003820:	f004 fbd7 	bl	8007fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003824:	bf00      	nop
 8003826:	37f8      	adds	r7, #248	; 0xf8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	42040000 	.word	0x42040000
 8003830:	46020c00 	.word	0x46020c00
 8003834:	42020000 	.word	0x42020000

08003838 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b0bc      	sub	sp, #240	; 0xf0
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003840:	f107 0310 	add.w	r3, r7, #16
 8003844:	22c8      	movs	r2, #200	; 0xc8
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f017 f888 	bl	801a95e <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a46      	ldr	r2, [pc, #280]	; (800396c <HAL_SAI_MspInit+0x134>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d13f      	bne.n	80038d8 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8003858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 8003864:	2340      	movs	r3, #64	; 0x40
 8003866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f00a f8b8 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_SAI_MspInit+0x46>
    {
      Error_Handler();
 800387a:	f7fe fd67 	bl	800234c <Error_Handler>
    }

    if (SAI1_client == 0)
 800387e:	4b3c      	ldr	r3, [pc, #240]	; (8003970 <HAL_SAI_MspInit+0x138>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10e      	bne.n	80038a4 <HAL_SAI_MspInit+0x6c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_SAI_MspInit+0x13c>)
 8003888:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800388c:	4a39      	ldr	r2, [pc, #228]	; (8003974 <HAL_SAI_MspInit+0x13c>)
 800388e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003892:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003896:	4b37      	ldr	r3, [pc, #220]	; (8003974 <HAL_SAI_MspInit+0x13c>)
 8003898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800389c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_SAI_MspInit+0x138>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a31      	ldr	r2, [pc, #196]	; (8003970 <HAL_SAI_MspInit+0x138>)
 80038ac:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80038ae:	2374      	movs	r3, #116	; 0x74
 80038b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80038c6:	230d      	movs	r3, #13
 80038c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038d0:	4619      	mov	r1, r3
 80038d2:	4829      	ldr	r0, [pc, #164]	; (8003978 <HAL_SAI_MspInit+0x140>)
 80038d4:	f006 fc54 	bl	800a180 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a27      	ldr	r2, [pc, #156]	; (800397c <HAL_SAI_MspInit+0x144>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d13f      	bne.n	8003962 <HAL_SAI_MspInit+0x12a>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80038e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 80038ee:	2340      	movs	r3, #64	; 0x40
 80038f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00a f873 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 8003904:	f7fe fd22 	bl	800234c <Error_Handler>
    }

      if (SAI1_client == 0)
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_SAI_MspInit+0x138>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10e      	bne.n	800392e <HAL_SAI_MspInit+0xf6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003910:	4b18      	ldr	r3, [pc, #96]	; (8003974 <HAL_SAI_MspInit+0x13c>)
 8003912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <HAL_SAI_MspInit+0x13c>)
 8003918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800391c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <HAL_SAI_MspInit+0x13c>)
 8003922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_SAI_MspInit+0x138>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <HAL_SAI_MspInit+0x138>)
 8003936:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003938:	2308      	movs	r3, #8
 800393a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003950:	230d      	movs	r3, #13
 8003952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003956:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800395a:	4619      	mov	r1, r3
 800395c:	4806      	ldr	r0, [pc, #24]	; (8003978 <HAL_SAI_MspInit+0x140>)
 800395e:	f006 fc0f 	bl	800a180 <HAL_GPIO_Init>

    }
}
 8003962:	bf00      	nop
 8003964:	37f0      	adds	r7, #240	; 0xf0
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40015404 	.word	0x40015404
 8003970:	20002bc0 	.word	0x20002bc0
 8003974:	46020c00 	.word	0x46020c00
 8003978:	42021000 	.word	0x42021000
 800397c:	40015424 	.word	0x40015424

08003980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003984:	e7fe      	b.n	8003984 <NMI_Handler+0x4>

08003986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398a:	e7fe      	b.n	800398a <HardFault_Handler+0x4>

0800398c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <MemManage_Handler+0x4>

08003992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <BusFault_Handler+0x4>

08003998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <UsageFault_Handler+0x4>

0800399e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039cc:	f003 fdf2 	bl	80075b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 80039d8:	2001      	movs	r0, #1
 80039da:	f006 fe9f 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 80039e6:	2002      	movs	r0, #2
 80039e8:	f006 fe98 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 80039f4:	2004      	movs	r0, #4
 80039f6:	f006 fe91 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}

080039fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8003a02:	2008      	movs	r0, #8
 8003a04:	f006 fe8a 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a08:	bf00      	nop
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8003a10:	2010      	movs	r0, #16
 8003a12:	f006 fe83 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8003a1e:	2020      	movs	r0, #32
 8003a20:	f006 fe7c 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8003a2c:	2040      	movs	r0, #64	; 0x40
 8003a2e:	f006 fe75 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8003a3a:	2080      	movs	r0, #128	; 0x80
 8003a3c:	f006 fe6e 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8003a48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a4c:	f006 fe66 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8003a58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a5c:	f006 fe5e 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 8003a68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a6c:	f006 fe56 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 8003a78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a7c:	f006 fe4e 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8003a88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a8c:	f006 fe46 	bl	800a71c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <GPDMA1_Channel0_IRQHandler+0x10>)
 8003a9a:	f004 ffce 	bl	8008a3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20001424 	.word	0x20001424

08003aa8 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <GPDMA1_Channel1_IRQHandler+0x10>)
 8003aae:	f004 ffc4 	bl	8008a3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200013ac 	.word	0x200013ac

08003abc <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <GPDMA1_Channel2_IRQHandler+0x10>)
 8003ac2:	f004 ffba 	bl	8008a3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20001024 	.word	0x20001024

08003ad0 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <GPDMA1_Channel3_IRQHandler+0x10>)
 8003ad6:	f004 ffb0 	bl	8008a3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000fac 	.word	0x20000fac

08003ae4 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <GPDMA1_Channel4_IRQHandler+0x10>)
 8003aea:	f004 ffa6 	bl	8008a3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000e18 	.word	0x20000e18

08003af8 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <GPDMA1_Channel5_IRQHandler+0x10>)
 8003afe:	f004 ff9c 	bl	8008a3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000d64 	.word	0x20000d64

08003b0c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <SPI2_IRQHandler+0x10>)
 8003b12:	f00d ff11 	bl	8011938 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	2000128c 	.word	0x2000128c

08003b20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <OTG_FS_IRQHandler+0x10>)
 8003b26:	f007 fa70 	bl	800b00a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20001608 	.word	0x20001608

08003b34 <EXTI8_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI8_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
	HAL_EXTI_IRQHandler(&H_EXTI_8);
 8003b38:	4804      	ldr	r0, [pc, #16]	; (8003b4c <EXTI8_IRQHandler+0x18>)
 8003b3a:	f006 fad9 	bl	800a0f0 <HAL_EXTI_IRQHandler>
	count++;
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <EXTI8_IRQHandler+0x1c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a02      	ldr	r2, [pc, #8]	; (8003b50 <EXTI8_IRQHandler+0x1c>)
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	20002bc4 	.word	0x20002bc4

08003b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return 1;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <_kill>:

int _kill(int pid, int sig)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b6e:	f016 feb7 	bl	801a8e0 <__errno>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2216      	movs	r2, #22
 8003b76:	601a      	str	r2, [r3, #0]
  return -1;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_exit>:

void _exit (int status)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffe7 	bl	8003b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b96:	e7fe      	b.n	8003b96 <_exit+0x12>

08003b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e00a      	b.n	8003bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003baa:	e000      	b.n	8003bae <_read+0x16>
 8003bac:	bf00      	nop
 8003bae:	4601      	mov	r1, r0
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	60ba      	str	r2, [r7, #8]
 8003bb6:	b2ca      	uxtb	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	dbf0      	blt.n	8003baa <_read+0x12>
  }

  return len;
 8003bc8:	687b      	ldr	r3, [r7, #4]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	e009      	b.n	8003bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60ba      	str	r2, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f002 fdd3 	bl	8006798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbf1      	blt.n	8003be4 <_write+0x12>
  }
  return len;
 8003c00:	687b      	ldr	r3, [r7, #4]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_close>:

int _close(int file)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c32:	605a      	str	r2, [r3, #4]
  return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <_isatty>:

int _isatty(int file)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c4a:	2301      	movs	r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <_sbrk+0x5c>)
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <_sbrk+0x60>)
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <_sbrk+0x64>)
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <_sbrk+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d207      	bcs.n	8003cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca4:	f016 fe1c 	bl	801a8e0 <__errno>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	220c      	movs	r2, #12
 8003cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e009      	b.n	8003cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <_sbrk+0x64>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <_sbrk+0x64>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <_sbrk+0x64>)
 8003cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	200c0000 	.word	0x200c0000
 8003cd4:	00000400 	.word	0x00000400
 8003cd8:	20002bc8 	.word	0x20002bc8
 8003cdc:	200044f8 	.word	0x200044f8

08003ce0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ce4:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <SystemInit+0x68>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <SystemInit+0x68>)
 8003cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <SystemInit+0x6c>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <SystemInit+0x6c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <SystemInit+0x6c>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <SystemInit+0x6c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <SystemInit+0x6c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <SystemInit+0x6c>)
 8003d12:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003d16:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <SystemInit+0x6c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <SystemInit+0x6c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <SystemInit+0x6c>)
 8003d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <SystemInit+0x6c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <SystemInit+0x68>)
 8003d36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d3a:	609a      	str	r2, [r3, #8]
  #endif
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000ed00 	.word	0xe000ed00
 8003d4c:	46020c00 	.word	0x46020c00

08003d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d56:	e003      	b.n	8003d60 <LoopCopyDataInit>

08003d58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d5e:	3104      	adds	r1, #4

08003d60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d60:	480b      	ldr	r0, [pc, #44]	; (8003d90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d68:	d3f6      	bcc.n	8003d58 <CopyDataInit>
	ldr	r2, =_sbss
 8003d6a:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d6c:	e002      	b.n	8003d74 <LoopFillZerobss>

08003d6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d70:	f842 3b04 	str.w	r3, [r2], #4

08003d74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <LoopForever+0x16>)
	cmp	r2, r3
 8003d76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d78:	d3f9      	bcc.n	8003d6e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d7a:	f7ff ffb1 	bl	8003ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d7e:	f016 fdb5 	bl	801a8ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d82:	f7fd f97d 	bl	8001080 <main>

08003d86 <LoopForever>:

LoopForever:
    b LoopForever
 8003d86:	e7fe      	b.n	8003d86 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003d88:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8003d8c:	08074924 	.word	0x08074924
	ldr	r0, =_sdata
 8003d90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d94:	20000ae4 	.word	0x20000ae4
	ldr	r2, =_sbss
 8003d98:	20000b00 	.word	0x20000b00
	ldr	r3, = _ebss
 8003d9c:	200044f7 	.word	0x200044f7

08003da0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003da0:	e7fe      	b.n	8003da0 <ADC1_IRQHandler>

08003da2 <pre_processing_init>:

#include "arm_math.h"
#include "params.h"
#include "pre_processing_app.h"

void pre_processing_init(pre_processing_data_t * pre_processing_data) {
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	6078      	str	r0, [r7, #4]
	arm_status status;

	arm_rfft_fast_init_f32(&((*pre_processing_data).fft_handler), INPUT_BUFFER_SIZE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3318      	adds	r3, #24
 8003dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003db2:	4618      	mov	r0, r3
 8003db4:	f015 fcc4 	bl	8019740 <arm_rfft_fast_init_f32>
	status=arm_dct4_init_f32(&((*pre_processing_data).dct4f32), &((*pre_processing_data).rfftf32), &((*pre_processing_data).cfftradix4f32), TRIANGULAR_FILTERS_BANK_SIZE, TRIANGULAR_FILTERS_BANK_SIZE/2, 0.125);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003dc6:	2340      	movs	r3, #64	; 0x40
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	f016 f95a 	bl	801a088 <arm_dct4_init_f32>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]


	pre_processing_data->axis = SELECTED_AXIS;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
	pre_processing_data->triangular_filters_scale = TRIANGULAR_FILTERS_SCALE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
	pre_processing_data->signal_windowing = SIGNAL_WINDOWING;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a

	// Calculation of the triangular filters bank.
	//triangular_filters_bank(INPUT_BUFFER_SIZE, ISM330DHCX_ODR, pre_processing_data->triangular_filters_scale, (*pre_processing_data).bin);
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <pre_processing_process>:

void pre_processing_process(tridimensional_data_t * data_in , uint32_t data_in_size , float32_t * data_out, uint32_t data_out_size, pre_processing_data_t * pre_processing_data) {
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	b08d      	sub	sp, #52	; 0x34
 8003dfe:	af02      	add	r7, sp, #8
 8003e00:	6178      	str	r0, [r7, #20]
 8003e02:	6139      	str	r1, [r7, #16]
 8003e04:	60fa      	str	r2, [r7, #12]
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	466b      	mov	r3, sp
 8003e0a:	461e      	mov	r6, r3
	// Accelerometer axes selection among X, Y, Z.
	float32_t data_1[data_in_size];
 8003e0c:	6939      	ldr	r1, [r7, #16]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	2300      	movs	r3, #0
 8003e16:	6039      	str	r1, [r7, #0]
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	0143      	lsls	r3, r0, #5
 8003e26:	6838      	ldr	r0, [r7, #0]
 8003e28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	0142      	lsls	r2, r0, #5
 8003e30:	2300      	movs	r3, #0
 8003e32:	468a      	mov	sl, r1
 8003e34:	469b      	mov	fp, r3
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8003e42:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003e46:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003e4a:	008b      	lsls	r3, r1, #2
 8003e4c:	3307      	adds	r3, #7
 8003e4e:	08db      	lsrs	r3, r3, #3
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	ebad 0d03 	sub.w	sp, sp, r3
 8003e56:	ab02      	add	r3, sp, #8
 8003e58:	3303      	adds	r3, #3
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	623b      	str	r3, [r7, #32]
	axis_selection(data_in, data_in_size, data_1, data_in_size, pre_processing_data->axis);
 8003e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e62:	f893 3268 	ldrb.w	r3, [r3, #616]	; 0x268
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6a3a      	ldr	r2, [r7, #32]
 8003e6c:	6939      	ldr	r1, [r7, #16]
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f000 f85c 	bl	8003f2c <axis_selection>

	// Remove mean value from the signal.
	float32_t data_2[data_in_size];
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	460b      	mov	r3, r1
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4688      	mov	r8, r1
 8003e80:	4699      	mov	r9, r3
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003e8e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003e92:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003e96:	2300      	movs	r3, #0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	016b      	lsls	r3, r5, #5
 8003ea6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003eaa:	0162      	lsls	r2, r4, #5
 8003eac:	008b      	lsls	r3, r1, #2
 8003eae:	3307      	adds	r3, #7
 8003eb0:	08db      	lsrs	r3, r3, #3
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	ebad 0d03 	sub.w	sp, sp, r3
 8003eb8:	ab02      	add	r3, sp, #8
 8003eba:	3303      	adds	r3, #3
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
	mean_removal(data_1, data_in_size, data_2, data_in_size);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	6939      	ldr	r1, [r7, #16]
 8003ec8:	6a38      	ldr	r0, [r7, #32]
 8003eca:	f000 f893 	bl	8003ff4 <mean_removal>

	// Mel Frequency Cepstral Coefficient calculation.
	//mfcc(data_2, data_in_size, data_out, data_out_size, ((*pre_processing_data).bin), &((*pre_processing_data).dct4f32), &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
	fft( data_2,  data_in_size, data_out,  data_out_size, &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ed4:	f892 226a 	ldrb.w	r2, [r2, #618]	; 0x26a
 8003ed8:	9201      	str	r2, [sp, #4]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	69b8      	ldr	r0, [r7, #24]
 8003ee4:	f000 f90c 	bl	8004100 <fft>
 8003ee8:	46b5      	mov	sp, r6
}
 8003eea:	bf00      	nop
 8003eec:	372c      	adds	r7, #44	; 0x2c
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ef4 <complex_abs>:
/*----------------------------------------------------------------------------*/
/* Support functions          			      						          */
/*----------------------------------------------------------------------------*/

// calculation of the complex absolute value
float complex_abs(float real, float compl) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	ed87 0a01 	vstr	s0, [r7, #4]
 8003efe:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8003f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f06:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003f0a:	edd7 7a00 	vldr	s15, [r7]
 8003f0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f16:	eeb0 0a67 	vmov.f32	s0, s15
 8003f1a:	f01b f9fd 	bl	801f318 <sqrtf>
 8003f1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003f22:	eeb0 0a67 	vmov.f32	s0, s15
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <axis_selection>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Axis selection        						      */
/*----------------------------------------------------------------------------*/

void axis_selection( tridimensional_data_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, axis_t axis) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
	if (axis == X)
 8003f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d118      	bne.n	8003f74 <axis_selection+0x48>
	{
		for (int i=0; i<data_out_size ; i++){
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e010      	b.n	8003f6a <axis_selection+0x3e>
	    	data_out[i]=data_in[i].x;
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	441a      	add	r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	440b      	add	r3, r1
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d8ea      	bhi.n	8003f48 <axis_selection+0x1c>
	{
		for (int i=0; i<data_out_size ; i++){
	    	data_out[i]=data_in[i].z;
	    }
	}
}
 8003f72:	e038      	b.n	8003fe6 <axis_selection+0xba>
	else if (axis == Y)
 8003f74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d118      	bne.n	8003fae <axis_selection+0x82>
		for (int i=0; i<data_out_size ; i++){
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	e010      	b.n	8003fa4 <axis_selection+0x78>
	    	data_out[i]=data_in[i].y;
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	441a      	add	r2, r3
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	440b      	add	r3, r1
 8003f9a:	6852      	ldr	r2, [r2, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d8ea      	bhi.n	8003f82 <axis_selection+0x56>
}
 8003fac:	e01b      	b.n	8003fe6 <axis_selection+0xba>
	else if (axis == Z)
 8003fae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d117      	bne.n	8003fe6 <axis_selection+0xba>
		for (int i=0; i<data_out_size ; i++){
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e010      	b.n	8003fde <axis_selection+0xb2>
	    	data_out[i]=data_in[i].z;
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	441a      	add	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	440b      	add	r3, r1
 8003fd4:	6892      	ldr	r2, [r2, #8]
 8003fd6:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d8ea      	bhi.n	8003fbc <axis_selection+0x90>
}
 8003fe6:	bf00      	nop
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <mean_removal>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Remove mean from signal     			          */
/*----------------------------------------------------------------------------*/

void mean_removal (float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]

	static float32_t mean;

	// calculation of the signal mean value
	arm_mean_f32(data_in, data_in_size, &mean);
 8004002:	4a12      	ldr	r2, [pc, #72]	; (800404c <mean_removal+0x58>)
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f015 fa26 	bl	8019458 <arm_mean_f32>

	// subtract the mean value from the signal in order to remove gravity effect on the accelerometric data
	for (int i=0 ; i < data_out_size ; i++){
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e013      	b.n	800403a <mean_removal+0x46>
		data_out[i] = data_in[i] - mean;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	ed93 7a00 	vldr	s14, [r3]
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <mean_removal+0x58>)
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004030:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0 ; i < data_out_size ; i++){
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d8e7      	bhi.n	8004012 <mean_removal+0x1e>
	}
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20002bcc 	.word	0x20002bcc

08004050 <hanning>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Multiply the Hanning window to the input signal   */
/*----------------------------------------------------------------------------*/

void hanning(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < data_in_size; i++) {
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e03e      	b.n	80040e2 <hanning+0x92>
		float32_t multiplier = 0.5 * (1 - arm_cos_f32((float32_t) 2*PI*i/(data_out_size-1)));
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800406e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80040f4 <hanning+0xa4>
 8004072:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3b01      	subs	r3, #1
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004086:	eeb0 0a66 	vmov.f32	s0, s13
 800408a:	f016 f871 	bl	801a170 <arm_cos_f32>
 800408e:	eef0 7a40 	vmov.f32	s15, s0
 8004092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800409a:	ee17 0a90 	vmov	r0, s15
 800409e:	f7fc fa57 	bl	8000550 <__aeabi_f2d>
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <hanning+0xa8>)
 80040a8:	f7fc faaa 	bl	8000600 <__aeabi_dmul>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	f7fc fd9c 	bl	8000bf0 <__aeabi_d2f>
 80040b8:	4603      	mov	r3, r0
 80040ba:	613b      	str	r3, [r7, #16]
		data_out[i] = multiplier * data_in[i];
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	ed93 7a00 	vldr	s14, [r3]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4413      	add	r3, r2
 80040d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80040d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data_in_size; i++) {
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3301      	adds	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d8bc      	bhi.n	8004064 <hanning+0x14>
	}
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40c90fdb 	.word	0x40c90fdb
 80040f8:	3fe00000 	.word	0x3fe00000
 80040fc:	00000000 	.word	0x00000000

08004100 <fft>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  FFT Calculation using CMSIS DSP Library           */
/*----------------------------------------------------------------------------*/

void fft(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, arm_rfft_fast_instance_f32 * fft_handler, signal_windowing_t signal_windowing) {
 8004100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004104:	b089      	sub	sp, #36	; 0x24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	466b      	mov	r3, sp
 8004112:	461e      	mov	r6, r3

	float32_t fft_out_buf[data_in_size];
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	460b      	mov	r3, r1
 8004118:	3b01      	subs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	2300      	movs	r3, #0
 800411e:	4688      	mov	r8, r1
 8004120:	4699      	mov	r9, r3
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800412e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8004132:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8004136:	2300      	movs	r3, #0
 8004138:	460c      	mov	r4, r1
 800413a:	461d      	mov	r5, r3
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	016b      	lsls	r3, r5, #5
 8004146:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800414a:	0162      	lsls	r2, r4, #5
 800414c:	008b      	lsls	r3, r1, #2
 800414e:	3307      	adds	r3, #7
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	ebad 0d03 	sub.w	sp, sp, r3
 8004158:	466b      	mov	r3, sp
 800415a:	3303      	adds	r3, #3
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	613b      	str	r3, [r7, #16]

	switch (signal_windowing){
 8004162:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004166:	2b01      	cmp	r3, #1
 8004168:	d106      	bne.n	8004178 <fft+0x78>
		case HANNING:
		{
			hanning(data_in, data_in_size, data_in, data_in_size);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff ff6d 	bl	8004050 <hanning>
			break;
 8004176:	e000      	b.n	800417a <fft+0x7a>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8004178:	bf00      	nop
		}
	}

	arm_rfft_fast_f32(fft_handler, (float32_t*)  data_in, (float32_t*) fft_out_buf, 0);
 800417a:	2300      	movs	r3, #0
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004182:	f015 fbc3 	bl	801990c <arm_rfft_fast_f32>

	int freqpoint = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]

	for (int i=0;   i<data_in_size   ; i=i+2) {
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e036      	b.n	80041fe <fft+0xfe>
	  data_out[freqpoint] =(complex_abs(fft_out_buf[i], fft_out_buf[i+1])); //(sqrt(data_in_size));
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	3301      	adds	r3, #1
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	ed93 7a00 	vldr	s14, [r3]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	18d4      	adds	r4, r2, r3
 80041b2:	eef0 0a47 	vmov.f32	s1, s14
 80041b6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ba:	f7ff fe9b 	bl	8003ef4 <complex_abs>
 80041be:	eef0 7a40 	vmov.f32	s15, s0
 80041c2:	edc4 7a00 	vstr	s15, [r4]
	  //data_out[freqpoint] = 2 * data_out[freqpoint]*data_out[freqpoint] /(float32_t)ISM330DHCX_ODR;

	  if(data_out[freqpoint] < 1e-3){
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f9bd 	bl	8000550 <__aeabi_f2d>
 80041d6:	a311      	add	r3, pc, #68	; (adr r3, 800421c <fft+0x11c>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc fc82 	bl	8000ae4 <__aeabi_dcmplt>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <fft+0xf2>
		  data_out[freqpoint] = 1e-3;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <fft+0x118>)
 80041f0:	601a      	str	r2, [r3, #0]
	  }
	  freqpoint++;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	3301      	adds	r3, #1
 80041f6:	61bb      	str	r3, [r7, #24]
	for (int i=0;   i<data_in_size   ; i=i+2) {
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3302      	adds	r3, #2
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d8c4      	bhi.n	8004190 <fft+0x90>
 8004206:	46b5      	mov	sp, r6
	}
}
 8004208:	bf00      	nop
 800420a:	3724      	adds	r7, #36	; 0x24
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004212:	bf00      	nop
 8004214:	f3af 8000 	nop.w
 8004218:	3a83126f 	.word	0x3a83126f
 800421c:	d2f1a9fc 	.word	0xd2f1a9fc
 8004220:	3f50624d 	.word	0x3f50624d

08004224 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8004238:	f04f 33ff 	mov.w	r3, #4294967295
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e04d      	b.n	80042dc <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	7b1a      	ldrb	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <ISM330DHCX_RegisterBusIO+0xc4>)
 800427c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <ISM330DHCX_RegisterBusIO+0xc8>)
 8004282:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e020      	b.n	80042dc <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4798      	blx	r3
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e016      	b.n	80042dc <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d112      	bne.n	80042dc <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80042c0:	230c      	movs	r3, #12
 80042c2:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80042c4:	7afb      	ldrb	r3, [r7, #11]
 80042c6:	461a      	mov	r2, r3
 80042c8:	2112      	movs	r1, #18
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fd61 	bl	8004d92 <ISM330DHCX_Write_Reg>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	08005625 	.word	0x08005625
 80042ec:	0800565b 	.word	0x0800565b

080042f0 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	331c      	adds	r3, #28
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 ff43 	bl	800618a <ism330dhcx_device_conf_set>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e078      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	331c      	adds	r3, #28
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f001 ffba 	bl	8006290 <ism330dhcx_auto_increment_set>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	e06c      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	331c      	adds	r3, #28
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f001 ff88 	bl	8006244 <ism330dhcx_reset_set>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	e060      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	331c      	adds	r3, #28
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f001 ffa2 	bl	8006290 <ism330dhcx_auto_increment_set>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	e054      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	331c      	adds	r3, #28
 800435c:	2101      	movs	r1, #1
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fe46 	bl	8005ff0 <ism330dhcx_block_data_update_set>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e048      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	331c      	adds	r3, #28
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f002 f858 	bl	800642c <ism330dhcx_fifo_mode_set>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	e03c      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2204      	movs	r2, #4
 800438c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	331c      	adds	r3, #28
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fa08 	bl	80057ac <ism330dhcx_xl_data_rate_set>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	e02c      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	331c      	adds	r3, #28
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 f99e 	bl	80056f0 <ism330dhcx_xl_full_scale_set>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	e020      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2204      	movs	r2, #4
 80043c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	331c      	adds	r3, #28
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fc3c 	bl	8005c4c <ism330dhcx_gy_data_rate_set>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	e010      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	331c      	adds	r3, #28
 80043e4:	210c      	movs	r1, #12
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 fbb8 	bl	8005b5c <ism330dhcx_gy_full_scale_set>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	e004      	b.n	8004402 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f888 	bl	8004528 <ISM330DHCX_ACC_Disable>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	e015      	b.n	8004450 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fa92 	bl	800494e <ISM330DHCX_GYRO_Disable>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	e00c      	b.n	8004450 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	331c      	adds	r3, #28
 8004466:	6839      	ldr	r1, [r7, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f001 feda 	bl	8006222 <ism330dhcx_device_id_get>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	e000      	b.n	800447c <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2200      	movs	r2, #0
 800449e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044ac:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2210      	movs	r2, #16
 80044b2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	4a07      	ldr	r2, [pc, #28]	; (80044dc <ISM330DHCX_GetCapabilities+0x58>)
 80044be:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4a06      	ldr	r2, [pc, #24]	; (80044dc <ISM330DHCX_GetCapabilities+0x58>)
 80044c4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	45d05800 	.word	0x45d05800

080044e0 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e014      	b.n	8004520 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f103 021c 	add.w	r2, r3, #28
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f001 f951 	bl	80057ac <ism330dhcx_xl_data_rate_set>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
 8004514:	e004      	b.n	8004520 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e01f      	b.n	800457e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f103 021c 	add.w	r2, r3, #28
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	332b      	adds	r3, #43	; 0x2b
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f001 fa9e 	bl	8005a8c <ism330dhcx_xl_data_rate_get>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	e010      	b.n	800457e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	331c      	adds	r3, #28
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f001 f922 	bl	80057ac <ism330dhcx_xl_data_rate_set>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
 8004572:	e004      	b.n	800457e <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	331c      	adds	r3, #28
 800459a:	f107 020b 	add.w	r2, r7, #11
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 f8cb 	bl	800573c <ism330dhcx_xl_full_scale_get>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	e023      	b.n	80045fa <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80045b2:	7afb      	ldrb	r3, [r7, #11]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d81b      	bhi.n	80045f0 <ISM330DHCX_ACC_GetSensitivity+0x68>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e1 	.word	0x080045e1
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 80045d4:	601a      	str	r2, [r3, #0]
      break;
 80045d6:	e00f      	b.n	80045f8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 80045dc:	601a      	str	r2, [r3, #0]
      break;
 80045de:	e00b      	b.n	80045f8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <ISM330DHCX_ACC_GetSensitivity+0x84>)
 80045e4:	601a      	str	r2, [r3, #0]
      break;
 80045e6:	e007      	b.n	80045f8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 80045ec:	601a      	str	r2, [r3, #0]
      break;
 80045ee:	e003      	b.n	80045f8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	60fb      	str	r3, [r7, #12]
      break;
 80045f6:	bf00      	nop
  }

  return ret;
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	3d79db23 	.word	0x3d79db23
 8004608:	3df9db23 	.word	0x3df9db23
 800460c:	3e79db23 	.word	0x3e79db23
 8004610:	3ef9db23 	.word	0x3ef9db23

08004614 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	331c      	adds	r3, #28
 8004626:	f107 020b 	add.w	r2, r7, #11
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f001 fa2d 	bl	8005a8c <ism330dhcx_xl_data_rate_get>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	e04e      	b.n	80046dc <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800463e:	7afb      	ldrb	r3, [r7, #11]
 8004640:	2b0a      	cmp	r3, #10
 8004642:	d846      	bhi.n	80046d2 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004679 	.word	0x08004679
 8004650:	08004683 	.word	0x08004683
 8004654:	0800468b 	.word	0x0800468b
 8004658:	08004693 	.word	0x08004693
 800465c:	0800469b 	.word	0x0800469b
 8004660:	080046a3 	.word	0x080046a3
 8004664:	080046ab 	.word	0x080046ab
 8004668:	080046b3 	.word	0x080046b3
 800466c:	080046bb 	.word	0x080046bb
 8004670:	080046c3 	.word	0x080046c3
 8004674:	080046cb 	.word	0x080046cb
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
      break;
 8004680:	e02b      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8004686:	601a      	str	r2, [r3, #0]
      break;
 8004688:	e027      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 800468e:	601a      	str	r2, [r3, #0]
      break;
 8004690:	e023      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8004696:	601a      	str	r2, [r3, #0]
      break;
 8004698:	e01f      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 800469e:	601a      	str	r2, [r3, #0]
      break;
 80046a0:	e01b      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 80046a6:	601a      	str	r2, [r3, #0]
      break;
 80046a8:	e017      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 80046ae:	601a      	str	r2, [r3, #0]
      break;
 80046b0:	e013      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4a11      	ldr	r2, [pc, #68]	; (80046fc <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 80046b6:	601a      	str	r2, [r3, #0]
      break;
 80046b8:	e00f      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4a10      	ldr	r2, [pc, #64]	; (8004700 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 80046be:	601a      	str	r2, [r3, #0]
      break;
 80046c0:	e00b      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 80046c6:	601a      	str	r2, [r3, #0]
      break;
 80046c8:	e007      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 80046ce:	601a      	str	r2, [r3, #0]
      break;
 80046d0:	e003      	b.n	80046da <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	60fb      	str	r3, [r7, #12]
      break;
 80046d8:	bf00      	nop
  }

  return ret;
 80046da:	68fb      	ldr	r3, [r7, #12]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	41480000 	.word	0x41480000
 80046e8:	41d00000 	.word	0x41d00000
 80046ec:	42500000 	.word	0x42500000
 80046f0:	42d00000 	.word	0x42d00000
 80046f4:	43500000 	.word	0x43500000
 80046f8:	43d00000 	.word	0x43d00000
 80046fc:	44504000 	.word	0x44504000
 8004700:	44d04000 	.word	0x44d04000
 8004704:	45504000 	.word	0x45504000
 8004708:	45d05800 	.word	0x45d05800

0800470c <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800471e:	2b01      	cmp	r3, #1
 8004720:	d106      	bne.n	8004730 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004722:	ed97 0a00 	vldr	s0, [r7]
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fd60 	bl	80051ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 800472c:	4603      	mov	r3, r0
 800472e:	e005      	b.n	800473c <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004730:	ed97 0a00 	vldr	s0, [r7]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fde5 	bl	8005304 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 800473a:	4603      	mov	r3, r0
  }
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	331c      	adds	r3, #28
 8004756:	f107 020b 	add.w	r2, r7, #11
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f000 ffed 	bl	800573c <ism330dhcx_xl_full_scale_get>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	e023      	b.n	80047b6 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d81b      	bhi.n	80047ac <ISM330DHCX_ACC_GetFullScale+0x68>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <ISM330DHCX_ACC_GetFullScale+0x38>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	0800478d 	.word	0x0800478d
 8004780:	080047a5 	.word	0x080047a5
 8004784:	08004795 	.word	0x08004795
 8004788:	0800479d 	.word	0x0800479d
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2202      	movs	r2, #2
 8004790:	601a      	str	r2, [r3, #0]
      break;
 8004792:	e00f      	b.n	80047b4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2204      	movs	r2, #4
 8004798:	601a      	str	r2, [r3, #0]
      break;
 800479a:	e00b      	b.n	80047b4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2208      	movs	r2, #8
 80047a0:	601a      	str	r2, [r3, #0]
      break;
 80047a2:	e007      	b.n	80047b4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2210      	movs	r2, #16
 80047a8:	601a      	str	r2, [r3, #0]
      break;
 80047aa:	e003      	b.n	80047b4 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	60fb      	str	r3, [r7, #12]
      break;
 80047b2:	bf00      	nop
  }

  return ret;
 80047b4:	68fb      	ldr	r3, [r7, #12]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop

080047c0 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	dd0b      	ble.n	80047e8 <ISM330DHCX_ACC_SetFullScale+0x28>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	dd06      	ble.n	80047e4 <ISM330DHCX_ACC_SetFullScale+0x24>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	dc01      	bgt.n	80047e0 <ISM330DHCX_ACC_SetFullScale+0x20>
 80047dc:	2303      	movs	r3, #3
 80047de:	e004      	b.n	80047ea <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e002      	b.n	80047ea <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e000      	b.n	80047ea <ISM330DHCX_ACC_SetFullScale+0x2a>
 80047e8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 80047ea:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	331c      	adds	r3, #28
 80047f0:	7bfa      	ldrb	r2, [r7, #15]
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 ff7b 	bl	80056f0 <ism330dhcx_xl_full_scale_set>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8004800:	f04f 33ff 	mov.w	r3, #4294967295
 8004804:	e000      	b.n	8004808 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	331c      	adds	r3, #28
 800481e:	f107 0208 	add.w	r2, r7, #8
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fc54 	bl	80060d2 <ism330dhcx_acceleration_raw_get>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	e00c      	b.n	8004850 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004836:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800483e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004846:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	331c      	adds	r3, #28
 800486c:	f107 0210 	add.w	r2, r7, #16
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f001 fc2d 	bl	80060d2 <ism330dhcx_acceleration_raw_get>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	e03c      	b.n	80048fe <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fe7c 	bl	8004588 <ISM330DHCX_ACC_GetSensitivity>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e030      	b.n	80048fe <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800489c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b4:	ee17 2a90 	vmov	r2, s15
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80048bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048d4:	ee17 2a90 	vmov	r2, s15
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80048dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f4:	ee17 2a90 	vmov	r2, s15
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	e014      	b.n	8004946 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f103 021c 	add.w	r2, r3, #28
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f001 f98e 	bl	8005c4c <ism330dhcx_gy_data_rate_set>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e004      	b.n	8004946 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e01f      	b.n	80049a4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f103 021c 	add.w	r2, r3, #28
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	332c      	adds	r3, #44	; 0x2c
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f001 fadb 	bl	8005f2c <ism330dhcx_gy_data_rate_get>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	e010      	b.n	80049a4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	331c      	adds	r3, #28
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f95f 	bl	8005c4c <ism330dhcx_gy_data_rate_set>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	e004      	b.n	80049a4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	331c      	adds	r3, #28
 80049be:	f107 020b 	add.w	r2, r7, #11
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 f8ef 	bl	8005ba8 <ism330dhcx_gy_full_scale_get>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	e039      	b.n	8004a4a <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	2b0c      	cmp	r3, #12
 80049da:	d831      	bhi.n	8004a40 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a21 	.word	0x08004a21
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004a41 	.word	0x08004a41
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a41 	.word	0x08004a41
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a41 	.word	0x08004a41
 8004a14:	08004a39 	.word	0x08004a39
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8004a1c:	601a      	str	r2, [r3, #0]
      break;
 8004a1e:	e013      	b.n	8004a48 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4a0d      	ldr	r2, [pc, #52]	; (8004a58 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8004a24:	601a      	str	r2, [r3, #0]
      break;
 8004a26:	e00f      	b.n	8004a48 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8004a2c:	601a      	str	r2, [r3, #0]
      break;
 8004a2e:	e00b      	b.n	8004a48 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8004a34:	601a      	str	r2, [r3, #0]
      break;
 8004a36:	e007      	b.n	8004a48 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8004a3c:	601a      	str	r2, [r3, #0]
      break;
 8004a3e:	e003      	b.n	8004a48 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295
 8004a44:	60fb      	str	r3, [r7, #12]
      break;
 8004a46:	bf00      	nop
  }

  return ret;
 8004a48:	68fb      	ldr	r3, [r7, #12]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	408c0000 	.word	0x408c0000
 8004a58:	410c0000 	.word	0x410c0000
 8004a5c:	418c0000 	.word	0x418c0000
 8004a60:	420c0000 	.word	0x420c0000
 8004a64:	428c0000 	.word	0x428c0000

08004a68 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	331c      	adds	r3, #28
 8004a7a:	f107 020b 	add.w	r2, r7, #11
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fa53 	bl	8005f2c <ism330dhcx_gy_data_rate_get>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	e04e      	b.n	8004b30 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004a92:	7afb      	ldrb	r3, [r7, #11]
 8004a94:	2b0a      	cmp	r3, #10
 8004a96:	d846      	bhi.n	8004b26 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004ad7 	.word	0x08004ad7
 8004aa8:	08004adf 	.word	0x08004adf
 8004aac:	08004ae7 	.word	0x08004ae7
 8004ab0:	08004aef 	.word	0x08004aef
 8004ab4:	08004af7 	.word	0x08004af7
 8004ab8:	08004aff 	.word	0x08004aff
 8004abc:	08004b07 	.word	0x08004b07
 8004ac0:	08004b0f 	.word	0x08004b0f
 8004ac4:	08004b17 	.word	0x08004b17
 8004ac8:	08004b1f 	.word	0x08004b1f
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
      break;
 8004ad4:	e02b      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004ada:	601a      	str	r2, [r3, #0]
      break;
 8004adc:	e027      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004ae2:	601a      	str	r2, [r3, #0]
      break;
 8004ae4:	e023      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8004aea:	601a      	str	r2, [r3, #0]
      break;
 8004aec:	e01f      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004af2:	601a      	str	r2, [r3, #0]
      break;
 8004af4:	e01b      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8004afa:	601a      	str	r2, [r3, #0]
      break;
 8004afc:	e017      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8004b02:	601a      	str	r2, [r3, #0]
      break;
 8004b04:	e013      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8004b0a:	601a      	str	r2, [r3, #0]
      break;
 8004b0c:	e00f      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004b12:	601a      	str	r2, [r3, #0]
      break;
 8004b14:	e00b      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8004b1a:	601a      	str	r2, [r3, #0]
      break;
 8004b1c:	e007      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004b22:	601a      	str	r2, [r3, #0]
      break;
 8004b24:	e003      	b.n	8004b2e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	60fb      	str	r3, [r7, #12]
      break;
 8004b2c:	bf00      	nop
  }

  return ret;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	41480000 	.word	0x41480000
 8004b3c:	41d00000 	.word	0x41d00000
 8004b40:	42500000 	.word	0x42500000
 8004b44:	42d00000 	.word	0x42d00000
 8004b48:	43500000 	.word	0x43500000
 8004b4c:	43d00000 	.word	0x43d00000
 8004b50:	44504000 	.word	0x44504000
 8004b54:	44d04000 	.word	0x44d04000
 8004b58:	45504000 	.word	0x45504000
 8004b5c:	45d05800 	.word	0x45d05800

08004b60 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d106      	bne.n	8004b84 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004b76:	ed97 0a00 	vldr	s0, [r7]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fc44 	bl	8005408 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004b80:	4603      	mov	r3, r0
 8004b82:	e005      	b.n	8004b90 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004b84:	ed97 0a00 	vldr	s0, [r7]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fcc9 	bl	8005520 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004b8e:	4603      	mov	r3, r0
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	331c      	adds	r3, #28
 8004baa:	f107 020b 	add.w	r2, r7, #11
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fff9 	bl	8005ba8 <ism330dhcx_gy_full_scale_get>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc0:	e03c      	b.n	8004c3c <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d834      	bhi.n	8004c32 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c0d 	.word	0x08004c0d
 8004bd4:	08004c33 	.word	0x08004c33
 8004bd8:	08004c05 	.word	0x08004c05
 8004bdc:	08004c33 	.word	0x08004c33
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c33 	.word	0x08004c33
 8004be8:	08004c33 	.word	0x08004c33
 8004bec:	08004c33 	.word	0x08004c33
 8004bf0:	08004c1f 	.word	0x08004c1f
 8004bf4:	08004c33 	.word	0x08004c33
 8004bf8:	08004c33 	.word	0x08004c33
 8004bfc:	08004c33 	.word	0x08004c33
 8004c00:	08004c29 	.word	0x08004c29
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	227d      	movs	r2, #125	; 0x7d
 8004c08:	601a      	str	r2, [r3, #0]
      break;
 8004c0a:	e016      	b.n	8004c3a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	22fa      	movs	r2, #250	; 0xfa
 8004c10:	601a      	str	r2, [r3, #0]
      break;
 8004c12:	e012      	b.n	8004c3a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c1a:	601a      	str	r2, [r3, #0]
      break;
 8004c1c:	e00d      	b.n	8004c3a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c24:	601a      	str	r2, [r3, #0]
      break;
 8004c26:	e008      	b.n	8004c3a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c2e:	601a      	str	r2, [r3, #0]
      break;
 8004c30:	e003      	b.n	8004c3a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	60fb      	str	r3, [r7, #12]
      break;
 8004c38:	bf00      	nop
  }

  return ret;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b7d      	cmp	r3, #125	; 0x7d
 8004c52:	dd12      	ble.n	8004c7a <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2bfa      	cmp	r3, #250	; 0xfa
 8004c58:	dd0d      	ble.n	8004c76 <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c60:	dd07      	ble.n	8004c72 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c68:	dc01      	bgt.n	8004c6e <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	e006      	b.n	8004c7c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	e004      	b.n	8004c7c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c72:	2304      	movs	r3, #4
 8004c74:	e002      	b.n	8004c7c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004c7a:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004c7c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	331c      	adds	r3, #28
 8004c82:	7bfa      	ldrb	r2, [r7, #15]
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff68 	bl	8005b5c <ism330dhcx_gy_full_scale_set>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
 8004c96:	e000      	b.n	8004c9a <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	331c      	adds	r3, #28
 8004cb0:	f107 0208 	add.w	r2, r7, #8
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 f9c0 	bl	800603c <ism330dhcx_angular_rate_raw_get>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e00c      	b.n	8004ce2 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004cd0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004cd8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	331c      	adds	r3, #28
 8004cf8:	f107 0210 	add.w	r2, r7, #16
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 f99c 	bl	800603c <ism330dhcx_angular_rate_raw_get>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0e:	e03c      	b.n	8004d8a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004d10:	f107 030c 	add.w	r3, r7, #12
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fe48 	bl	80049ac <ISM330DHCX_GYRO_GetSensitivity>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	e030      	b.n	8004d8a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d40:	ee17 2a90 	vmov	r2, s15
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d60:	ee17 2a90 	vmov	r2, s15
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d6c:	ee07 3a90 	vmov	s15, r3
 8004d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d80:	ee17 2a90 	vmov	r2, s15
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70fb      	strb	r3, [r7, #3]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f103 001c 	add.w	r0, r3, #28
 8004da8:	1cba      	adds	r2, r7, #2
 8004daa:	78f9      	ldrb	r1, [r7, #3]
 8004dac:	2301      	movs	r3, #1
 8004dae:	f000 fc87 	bl	80056c0 <ism330dhcx_write_reg>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004db8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbc:	e000      	b.n	8004dc0 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <ISM330DHCX_FIFO_Get_Num_Samples>:
  * @param  pObj the device pObj
  * @param  NumSamples number of samples
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Num_Samples(ISM330DHCX_Object_t *pObj, uint16_t *NumSamples)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_data_level_get(&(pObj->Ctx), NumSamples) != ISM330DHCX_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	331c      	adds	r3, #28
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 fb4d 	bl	8006478 <ism330dhcx_fifo_data_level_get>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <ISM330DHCX_FIFO_Get_Num_Samples+0x22>
  {
    return ISM330DHCX_ERROR;
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	e000      	b.n	8004dec <ISM330DHCX_FIFO_Get_Num_Samples+0x24>
  }

  return ISM330DHCX_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <ISM330DHCX_FIFO_ACC_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_ACC_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_xl_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 8004e00:	edd7 7a00 	vldr	s15, [r7]
 8004e04:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e10:	d801      	bhi.n	8004e16 <ISM330DHCX_FIFO_ACC_Set_BDR+0x22>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e058      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e16:	edd7 7a00 	vldr	s15, [r7]
 8004e1a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	d801      	bhi.n	8004e2c <ISM330DHCX_FIFO_ACC_Set_BDR+0x38>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e04d      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e2c:	edd7 7a00 	vldr	s15, [r7]
 8004e30:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004ef0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xfc>
 8004e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	d801      	bhi.n	8004e42 <ISM330DHCX_FIFO_ACC_Set_BDR+0x4e>
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e042      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e42:	edd7 7a00 	vldr	s15, [r7]
 8004e46:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004ef4 <ISM330DHCX_FIFO_ACC_Set_BDR+0x100>
 8004e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	d801      	bhi.n	8004e58 <ISM330DHCX_FIFO_ACC_Set_BDR+0x64>
 8004e54:	2304      	movs	r3, #4
 8004e56:	e037      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e58:	edd7 7a00 	vldr	s15, [r7]
 8004e5c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ef8 <ISM330DHCX_FIFO_ACC_Set_BDR+0x104>
 8004e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e68:	d801      	bhi.n	8004e6e <ISM330DHCX_FIFO_ACC_Set_BDR+0x7a>
 8004e6a:	2305      	movs	r3, #5
 8004e6c:	e02c      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e6e:	edd7 7a00 	vldr	s15, [r7]
 8004e72:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004efc <ISM330DHCX_FIFO_ACC_Set_BDR+0x108>
 8004e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	d801      	bhi.n	8004e84 <ISM330DHCX_FIFO_ACC_Set_BDR+0x90>
 8004e80:	2306      	movs	r3, #6
 8004e82:	e021      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e84:	edd7 7a00 	vldr	s15, [r7]
 8004e88:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004f00 <ISM330DHCX_FIFO_ACC_Set_BDR+0x10c>
 8004e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	d801      	bhi.n	8004e9a <ISM330DHCX_FIFO_ACC_Set_BDR+0xa6>
 8004e96:	2307      	movs	r3, #7
 8004e98:	e016      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004e9a:	edd7 7a00 	vldr	s15, [r7]
 8004e9e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f04 <ISM330DHCX_FIFO_ACC_Set_BDR+0x110>
 8004ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eaa:	d801      	bhi.n	8004eb0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xbc>
 8004eac:	2308      	movs	r3, #8
 8004eae:	e00b      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004eb0:	edd7 7a00 	vldr	s15, [r7]
 8004eb4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f08 <ISM330DHCX_FIFO_ACC_Set_BDR+0x114>
 8004eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	d801      	bhi.n	8004ec6 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd2>
 8004ec2:	2309      	movs	r3, #9
 8004ec4:	e000      	b.n	8004ec8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004ec6:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
 8004ec8:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_XL_BATCHED_AT_3333Hz
            :                    ISM330DHCX_XL_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	331c      	adds	r3, #28
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 fa5e 	bl	8006394 <ism330dhcx_fifo_xl_batch_set>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <ISM330DHCX_FIFO_ACC_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	e000      	b.n	8004ee6 <ISM330DHCX_FIFO_ACC_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	42500000 	.word	0x42500000
 8004ef4:	42d00000 	.word	0x42d00000
 8004ef8:	43500000 	.word	0x43500000
 8004efc:	43d08000 	.word	0x43d08000
 8004f00:	44504000 	.word	0x44504000
 8004f04:	44d06000 	.word	0x44d06000
 8004f08:	45505000 	.word	0x45505000

08004f0c <ISM330DHCX_FIFO_GYRO_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_GYRO_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_gy_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 8004f18:	edd7 7a00 	vldr	s15, [r7]
 8004f1c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	d801      	bhi.n	8004f2e <ISM330DHCX_FIFO_GYRO_Set_BDR+0x22>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e058      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f2e:	edd7 7a00 	vldr	s15, [r7]
 8004f32:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3e:	d801      	bhi.n	8004f44 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x38>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e04d      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f44:	edd7 7a00 	vldr	s15, [r7]
 8004f48:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005008 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xfc>
 8004f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	d801      	bhi.n	8004f5a <ISM330DHCX_FIFO_GYRO_Set_BDR+0x4e>
 8004f56:	2303      	movs	r3, #3
 8004f58:	e042      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f5a:	edd7 7a00 	vldr	s15, [r7]
 8004f5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800500c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x100>
 8004f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6a:	d801      	bhi.n	8004f70 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x64>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	e037      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f70:	edd7 7a00 	vldr	s15, [r7]
 8004f74:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005010 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x104>
 8004f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f80:	d801      	bhi.n	8004f86 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x7a>
 8004f82:	2305      	movs	r3, #5
 8004f84:	e02c      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f86:	edd7 7a00 	vldr	s15, [r7]
 8004f8a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005014 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x108>
 8004f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f96:	d801      	bhi.n	8004f9c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x90>
 8004f98:	2306      	movs	r3, #6
 8004f9a:	e021      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004f9c:	edd7 7a00 	vldr	s15, [r7]
 8004fa0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005018 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x10c>
 8004fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	d801      	bhi.n	8004fb2 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa6>
 8004fae:	2307      	movs	r3, #7
 8004fb0:	e016      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004fb2:	edd7 7a00 	vldr	s15, [r7]
 8004fb6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800501c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x110>
 8004fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc2:	d801      	bhi.n	8004fc8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xbc>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	e00b      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004fc8:	edd7 7a00 	vldr	s15, [r7]
 8004fcc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005020 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x114>
 8004fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd8:	d801      	bhi.n	8004fde <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd2>
 8004fda:	2309      	movs	r3, #9
 8004fdc:	e000      	b.n	8004fe0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004fde:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
 8004fe0:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_GY_BATCHED_AT_3333Hz
            :                    ISM330DHCX_GY_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_gy_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	331c      	adds	r3, #28
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 f9f8 	bl	80063e0 <ism330dhcx_fifo_gy_batch_set>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffa:	e000      	b.n	8004ffe <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	42500000 	.word	0x42500000
 800500c:	42d00000 	.word	0x42d00000
 8005010:	43500000 	.word	0x43500000
 8005014:	43d08000 	.word	0x43d08000
 8005018:	44504000 	.word	0x44504000
 800501c:	44d06000 	.word	0x44d06000
 8005020:	45505000 	.word	0x45505000

08005024 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>:
  * @param  pObj the device pObj
  * @param  Status FIFO full interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_reg_t reg;

  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f103 001c 	add.w	r0, r3, #28
 8005036:	f107 020c 	add.w	r2, r7, #12
 800503a:	2301      	movs	r3, #1
 800503c:	210d      	movs	r1, #13
 800503e:	f000 fb27 	bl	8005690 <ism330dhcx_read_reg>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return ISM330DHCX_ERROR;
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	e017      	b.n	800507e <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_fifo_full = Status;
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	7b3b      	ldrb	r3, [r7, #12]
 8005058:	f362 1345 	bfi	r3, r2, #5, #1
 800505c:	733b      	strb	r3, [r7, #12]

  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f103 001c 	add.w	r0, r3, #28
 8005064:	f107 020c 	add.w	r2, r7, #12
 8005068:	2301      	movs	r3, #1
 800506a:	210d      	movs	r1, #13
 800506c:	f000 fb28 	bl	80056c0 <ism330dhcx_write_reg>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return ISM330DHCX_ERROR;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	e000      	b.n	800507e <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return ISM330DHCX_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <ISM330DHCX_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Watermark_Level(ISM330DHCX_Object_t *pObj, uint16_t Watermark)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	460b      	mov	r3, r1
 8005090:	807b      	strh	r3, [r7, #2]
  if (ism330dhcx_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DHCX_OK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	331c      	adds	r3, #28
 8005096:	887a      	ldrh	r2, [r7, #2]
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f001 f91e 	bl	80062dc <ism330dhcx_fifo_watermark_set>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <ISM330DHCX_FIFO_Set_Watermark_Level+0x26>
  {
    return ISM330DHCX_ERROR;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	e000      	b.n	80050ae <ISM330DHCX_FIFO_Set_Watermark_Level+0x28>
  }

  return ISM330DHCX_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <ISM330DHCX_FIFO_Set_Stop_On_Fth>:
  * @param  pObj the device pObj
  * @param  Status FIFO stop on watermark status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Stop_On_Fth(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	70fb      	strb	r3, [r7, #3]
  if (ism330dhcx_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DHCX_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	331c      	adds	r3, #28
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	4611      	mov	r1, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f93c 	bl	8006348 <ism330dhcx_fifo_stop_on_wtm_set>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x26>
  {
    return ISM330DHCX_ERROR;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	e000      	b.n	80050de <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x28>
  }

  return ISM330DHCX_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <ISM330DHCX_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Mode(ISM330DHCX_Object_t *pObj, uint8_t Mode)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330DHCX_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((ism330dhcx_fifo_mode_t)Mode)
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2b06      	cmp	r3, #6
 80050fa:	bf8c      	ite	hi
 80050fc:	2201      	movhi	r2, #1
 80050fe:	2200      	movls	r2, #0
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	2a00      	cmp	r2, #0
 8005104:	d10b      	bne.n	800511e <ISM330DHCX_FIFO_Set_Mode+0x38>
 8005106:	2201      	movs	r2, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <ISM330DHCX_FIFO_Set_Mode+0x40>
    case ISM330DHCX_BYPASS_TO_STREAM_MODE:
    case ISM330DHCX_STREAM_MODE:
      break;

    default:
      ret = ISM330DHCX_ERROR;
 800511e:	f04f 33ff 	mov.w	r3, #4294967295
 8005122:	60fb      	str	r3, [r7, #12]
      break;
 8005124:	e000      	b.n	8005128 <ISM330DHCX_FIFO_Set_Mode+0x42>
      break;
 8005126:	bf00      	nop
  }

  if (ret == ISM330DHCX_ERROR)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d101      	bne.n	8005134 <ISM330DHCX_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	e00d      	b.n	8005150 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), (ism330dhcx_fifo_mode_t)Mode) != ISM330DHCX_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	331c      	adds	r3, #28
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f975 	bl	800642c <ism330dhcx_fifo_mode_set>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <ISM330DHCX_FIFO_Set_Mode+0x68>
  {
    return ISM330DHCX_ERROR;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
 800514c:	e000      	b.n	8005150 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  return ret;
 800514e:	68fb      	ldr	r3, [r7, #12]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <ISM330DHCX_FIFO_Get_Data>:
  * @param  pObj the device pObj
  * @param  Data FIFO raw data array [6]
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data(ISM330DHCX_Object_t *pObj, uint8_t *Data)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_out_raw_get(&(pObj->Ctx), Data) != ISM330DHCX_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	331c      	adds	r3, #28
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fffd 	bl	8006168 <ism330dhcx_fifo_out_raw_get>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <ISM330DHCX_FIFO_Get_Data+0x22>
  {
    return ISM330DHCX_ERROR;
 8005174:	f04f 33ff 	mov.w	r3, #4294967295
 8005178:	e000      	b.n	800517c <ISM330DHCX_FIFO_Get_Data+0x24>
  }

  return ISM330DHCX_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <ISM330DHCX_FIFO_Get_Data_Word>:
  * @param  pObj the device pObj
  * @param  Acceleration FIFO single data
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data_Word(ISM330DHCX_Object_t *pObj, int16_t *data_raw)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  if (ISM330DHCX_FIFO_Get_Data(pObj, data) != ISM330DHCX_OK)
 800518e:	f107 0308 	add.w	r3, r7, #8
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ffdf 	bl	8005158 <ISM330DHCX_FIFO_Get_Data>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <ISM330DHCX_FIFO_Get_Data_Word+0x22>
  {
    return ISM330DHCX_ERROR;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	e01d      	b.n	80051e2 <ISM330DHCX_FIFO_Get_Data_Word+0x5e>
  }

  data_raw[0] = ((int16_t)data[1] << 8) | data[0];
 80051a6:	7a7b      	ldrb	r3, [r7, #9]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	b21a      	sxth	r2, r3
 80051ac:	7a3b      	ldrb	r3, [r7, #8]
 80051ae:	b21b      	sxth	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	801a      	strh	r2, [r3, #0]
  data_raw[1] = ((int16_t)data[3] << 8) | data[2];
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	b219      	sxth	r1, r3
 80051be:	7abb      	ldrb	r3, [r7, #10]
 80051c0:	b21a      	sxth	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	3302      	adds	r3, #2
 80051c6:	430a      	orrs	r2, r1
 80051c8:	b212      	sxth	r2, r2
 80051ca:	801a      	strh	r2, [r3, #0]
  data_raw[2] = ((int16_t)data[5] << 8) | data[4];
 80051cc:	7b7b      	ldrb	r3, [r7, #13]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	b219      	sxth	r1, r3
 80051d2:	7b3b      	ldrb	r3, [r7, #12]
 80051d4:	b21a      	sxth	r2, r3
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	3304      	adds	r3, #4
 80051da:	430a      	orrs	r2, r1
 80051dc:	b212      	sxth	r2, r2
 80051de:	801a      	strh	r2, [r3, #0]

  return ISM330DHCX_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80051f8:	edd7 7a00 	vldr	s15, [r7]
 80051fc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005208:	d801      	bhi.n	800520e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800520a:	2301      	movs	r3, #1
 800520c:	e058      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800520e:	edd7 7a00 	vldr	s15, [r7]
 8005212:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	d801      	bhi.n	8005224 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005220:	2302      	movs	r3, #2
 8005222:	e04d      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005224:	edd7 7a00 	vldr	s15, [r7]
 8005228:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80052e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800522c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005234:	d801      	bhi.n	800523a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005236:	2303      	movs	r3, #3
 8005238:	e042      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800523a:	edd7 7a00 	vldr	s15, [r7]
 800523e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80052ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	d801      	bhi.n	8005250 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 800524c:	2304      	movs	r3, #4
 800524e:	e037      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005250:	edd7 7a00 	vldr	s15, [r7]
 8005254:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80052f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005260:	d801      	bhi.n	8005266 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005262:	2305      	movs	r3, #5
 8005264:	e02c      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005266:	edd7 7a00 	vldr	s15, [r7]
 800526a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80052f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800526e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	d801      	bhi.n	800527c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005278:	2306      	movs	r3, #6
 800527a:	e021      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800527c:	edd7 7a00 	vldr	s15, [r7]
 8005280:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80052f8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	d801      	bhi.n	8005292 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800528e:	2307      	movs	r3, #7
 8005290:	e016      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005292:	edd7 7a00 	vldr	s15, [r7]
 8005296:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80052fc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800529a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a2:	d801      	bhi.n	80052a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80052a4:	2308      	movs	r3, #8
 80052a6:	e00b      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052a8:	edd7 7a00 	vldr	s15, [r7]
 80052ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005300 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80052b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b8:	d801      	bhi.n	80052be <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80052ba:	2309      	movs	r3, #9
 80052bc:	e000      	b.n	80052c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052be:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80052c0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	331c      	adds	r3, #28
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fa6e 	bl	80057ac <ism330dhcx_xl_data_rate_set>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	e000      	b.n	80052de <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	42500000 	.word	0x42500000
 80052ec:	42d00000 	.word	0x42d00000
 80052f0:	43500000 	.word	0x43500000
 80052f4:	43d00000 	.word	0x43d00000
 80052f8:	44504000 	.word	0x44504000
 80052fc:	44d04000 	.word	0x44d04000
 8005300:	45504000 	.word	0x45504000

08005304 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8005310:	edd7 7a00 	vldr	s15, [r7]
 8005314:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005320:	d801      	bhi.n	8005326 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005322:	2301      	movs	r3, #1
 8005324:	e058      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005326:	edd7 7a00 	vldr	s15, [r7]
 800532a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800532e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	d801      	bhi.n	800533c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005338:	2302      	movs	r3, #2
 800533a:	e04d      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800533c:	edd7 7a00 	vldr	s15, [r7]
 8005340:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80053ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534c:	d801      	bhi.n	8005352 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800534e:	2303      	movs	r3, #3
 8005350:	e042      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005352:	edd7 7a00 	vldr	s15, [r7]
 8005356:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80053f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800535a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005362:	d801      	bhi.n	8005368 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005364:	2304      	movs	r3, #4
 8005366:	e037      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005368:	edd7 7a00 	vldr	s15, [r7]
 800536c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80053f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005378:	d801      	bhi.n	800537e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800537a:	2305      	movs	r3, #5
 800537c:	e02c      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800537e:	edd7 7a00 	vldr	s15, [r7]
 8005382:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80053f8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538e:	d801      	bhi.n	8005394 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005390:	2306      	movs	r3, #6
 8005392:	e021      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005394:	edd7 7a00 	vldr	s15, [r7]
 8005398:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80053fc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800539c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a4:	d801      	bhi.n	80053aa <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80053a6:	2307      	movs	r3, #7
 80053a8:	e016      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053aa:	edd7 7a00 	vldr	s15, [r7]
 80053ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005400 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80053b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ba:	d801      	bhi.n	80053c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80053bc:	2308      	movs	r3, #8
 80053be:	e00b      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053c0:	edd7 7a00 	vldr	s15, [r7]
 80053c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005404 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80053c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	d801      	bhi.n	80053d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80053d2:	2309      	movs	r3, #9
 80053d4:	e000      	b.n	80053d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053d6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	42500000 	.word	0x42500000
 80053f0:	42d00000 	.word	0x42d00000
 80053f4:	43500000 	.word	0x43500000
 80053f8:	43d00000 	.word	0x43d00000
 80053fc:	44504000 	.word	0x44504000
 8005400:	44d04000 	.word	0x44d04000
 8005404:	45504000 	.word	0x45504000

08005408 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8005414:	edd7 7a00 	vldr	s15, [r7]
 8005418:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800541c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005424:	d801      	bhi.n	800542a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005426:	2301      	movs	r3, #1
 8005428:	e058      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800542a:	edd7 7a00 	vldr	s15, [r7]
 800542e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d801      	bhi.n	8005440 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800543c:	2302      	movs	r3, #2
 800543e:	e04d      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005440:	edd7 7a00 	vldr	s15, [r7]
 8005444:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005504 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005450:	d801      	bhi.n	8005456 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005452:	2303      	movs	r3, #3
 8005454:	e042      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005456:	edd7 7a00 	vldr	s15, [r7]
 800545a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005508 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800545e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d801      	bhi.n	800546c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005468:	2304      	movs	r3, #4
 800546a:	e037      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800546c:	edd7 7a00 	vldr	s15, [r7]
 8005470:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800550c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547c:	d801      	bhi.n	8005482 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800547e:	2305      	movs	r3, #5
 8005480:	e02c      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005482:	edd7 7a00 	vldr	s15, [r7]
 8005486:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005510 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800548a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005492:	d801      	bhi.n	8005498 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005494:	2306      	movs	r3, #6
 8005496:	e021      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005498:	edd7 7a00 	vldr	s15, [r7]
 800549c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005514 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80054a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	d801      	bhi.n	80054ae <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80054aa:	2307      	movs	r3, #7
 80054ac:	e016      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054ae:	edd7 7a00 	vldr	s15, [r7]
 80054b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005518 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80054b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	d801      	bhi.n	80054c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80054c0:	2308      	movs	r3, #8
 80054c2:	e00b      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054c4:	edd7 7a00 	vldr	s15, [r7]
 80054c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800551c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80054cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d4:	d801      	bhi.n	80054da <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80054d6:	2309      	movs	r3, #9
 80054d8:	e000      	b.n	80054dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054da:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80054dc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	331c      	adds	r3, #28
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fbb0 	bl	8005c4c <ism330dhcx_gy_data_rate_set>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	e000      	b.n	80054fa <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	42500000 	.word	0x42500000
 8005508:	42d00000 	.word	0x42d00000
 800550c:	43500000 	.word	0x43500000
 8005510:	43d00000 	.word	0x43d00000
 8005514:	44504000 	.word	0x44504000
 8005518:	44d04000 	.word	0x44d04000
 800551c:	45504000 	.word	0x45504000

08005520 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800552c:	edd7 7a00 	vldr	s15, [r7]
 8005530:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553c:	d801      	bhi.n	8005542 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800553e:	2301      	movs	r3, #1
 8005540:	e058      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005542:	edd7 7a00 	vldr	s15, [r7]
 8005546:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800554a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800554e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005552:	d801      	bhi.n	8005558 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005554:	2302      	movs	r3, #2
 8005556:	e04d      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005558:	edd7 7a00 	vldr	s15, [r7]
 800555c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005568:	d801      	bhi.n	800556e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800556a:	2303      	movs	r3, #3
 800556c:	e042      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800556e:	edd7 7a00 	vldr	s15, [r7]
 8005572:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800560c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557e:	d801      	bhi.n	8005584 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005580:	2304      	movs	r3, #4
 8005582:	e037      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005584:	edd7 7a00 	vldr	s15, [r7]
 8005588:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005610 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800558c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005594:	d801      	bhi.n	800559a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005596:	2305      	movs	r3, #5
 8005598:	e02c      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800559a:	edd7 7a00 	vldr	s15, [r7]
 800559e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005614 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80055a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055aa:	d801      	bhi.n	80055b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80055ac:	2306      	movs	r3, #6
 80055ae:	e021      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055b0:	edd7 7a00 	vldr	s15, [r7]
 80055b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005618 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80055b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c0:	d801      	bhi.n	80055c6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80055c2:	2307      	movs	r3, #7
 80055c4:	e016      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055c6:	edd7 7a00 	vldr	s15, [r7]
 80055ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800561c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80055ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d6:	d801      	bhi.n	80055dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80055d8:	2308      	movs	r3, #8
 80055da:	e00b      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055dc:	edd7 7a00 	vldr	s15, [r7]
 80055e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005620 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80055e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ec:	d801      	bhi.n	80055f2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80055ee:	2309      	movs	r3, #9
 80055f0:	e000      	b.n	80055f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055f2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	42500000 	.word	0x42500000
 800560c:	42d00000 	.word	0x42d00000
 8005610:	43500000 	.word	0x43500000
 8005614:	43d00000 	.word	0x43d00000
 8005618:	44504000 	.word	0x44504000
 800561c:	44d04000 	.word	0x44d04000
 8005620:	45504000 	.word	0x45504000

08005624 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005624:	b590      	push	{r4, r7, lr}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	461a      	mov	r2, r3
 8005630:	460b      	mov	r3, r1
 8005632:	72fb      	strb	r3, [r7, #11]
 8005634:	4613      	mov	r3, r2
 8005636:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	695c      	ldr	r4, [r3, #20]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	7b1b      	ldrb	r3, [r3, #12]
 8005644:	b298      	uxth	r0, r3
 8005646:	7afb      	ldrb	r3, [r7, #11]
 8005648:	b299      	uxth	r1, r3
 800564a:	893b      	ldrh	r3, [r7, #8]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	47a0      	blx	r4
 8005650:	4603      	mov	r3, r0
}
 8005652:	4618      	mov	r0, r3
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}

0800565a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800565a:	b590      	push	{r4, r7, lr}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	461a      	mov	r2, r3
 8005666:	460b      	mov	r3, r1
 8005668:	72fb      	strb	r3, [r7, #11]
 800566a:	4613      	mov	r3, r2
 800566c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	691c      	ldr	r4, [r3, #16]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	7b1b      	ldrb	r3, [r3, #12]
 800567a:	b298      	uxth	r0, r3
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	b299      	uxth	r1, r3
 8005680:	893b      	ldrh	r3, [r7, #8]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	47a0      	blx	r4
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd90      	pop	{r4, r7, pc}

08005690 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	461a      	mov	r2, r3
 800569c:	460b      	mov	r3, r1
 800569e:	72fb      	strb	r3, [r7, #11]
 80056a0:	4613      	mov	r3, r2
 80056a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685c      	ldr	r4, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6898      	ldr	r0, [r3, #8]
 80056ac:	893b      	ldrh	r3, [r7, #8]
 80056ae:	7af9      	ldrb	r1, [r7, #11]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	47a0      	blx	r4
 80056b4:	6178      	str	r0, [r7, #20]

  return ret;
 80056b6:	697b      	ldr	r3, [r7, #20]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd90      	pop	{r4, r7, pc}

080056c0 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	461a      	mov	r2, r3
 80056cc:	460b      	mov	r3, r1
 80056ce:	72fb      	strb	r3, [r7, #11]
 80056d0:	4613      	mov	r3, r2
 80056d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681c      	ldr	r4, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6898      	ldr	r0, [r3, #8]
 80056dc:	893b      	ldrh	r3, [r7, #8]
 80056de:	7af9      	ldrb	r1, [r7, #11]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	47a0      	blx	r4
 80056e4:	6178      	str	r0, [r7, #20]

  return ret;
 80056e6:	697b      	ldr	r3, [r7, #20]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd90      	pop	{r4, r7, pc}

080056f0 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80056fc:	f107 0208 	add.w	r2, r7, #8
 8005700:	2301      	movs	r3, #1
 8005702:	2110      	movs	r1, #16
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ffc3 	bl	8005690 <ism330dhcx_read_reg>
 800570a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	b2da      	uxtb	r2, r3
 800571a:	7a3b      	ldrb	r3, [r7, #8]
 800571c:	f362 0383 	bfi	r3, r2, #2, #2
 8005720:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005722:	f107 0208 	add.w	r2, r7, #8
 8005726:	2301      	movs	r3, #1
 8005728:	2110      	movs	r1, #16
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff ffc8 	bl	80056c0 <ism330dhcx_write_reg>
 8005730:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	2301      	movs	r3, #1
 800574c:	2110      	movs	r1, #16
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ff9e 	bl	8005690 <ism330dhcx_read_reg>
 8005754:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8005756:	7a3b      	ldrb	r3, [r7, #8]
 8005758:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b03      	cmp	r3, #3
 8005760:	d81a      	bhi.n	8005798 <ism330dhcx_xl_full_scale_get+0x5c>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <ism330dhcx_xl_full_scale_get+0x2c>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005779 	.word	0x08005779
 800576c:	08005781 	.word	0x08005781
 8005770:	08005789 	.word	0x08005789
 8005774:	08005791 	.word	0x08005791
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
      break;
 800577e:	e00f      	b.n	80057a0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
      break;
 8005786:	e00b      	b.n	80057a0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2202      	movs	r2, #2
 800578c:	701a      	strb	r2, [r3, #0]
      break;
 800578e:	e007      	b.n	80057a0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2203      	movs	r2, #3
 8005794:	701a      	strb	r2, [r3, #0]
      break;
 8005796:	e003      	b.n	80057a0 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
      break;
 800579e:	bf00      	nop
  }

  return ret;
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80057bc:	f107 030c 	add.w	r3, r7, #12
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fe86 	bl	80064d4 <ism330dhcx_fsm_enable_get>
 80057c8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 80c4 	bne.w	800595a <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80057d2:	7b3b      	ldrb	r3, [r7, #12]
 80057d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80057da:	7b3b      	ldrb	r3, [r7, #12]
 80057dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057e0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80057e2:	4313      	orrs	r3, r2
 80057e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80057e6:	7b3b      	ldrb	r3, [r7, #12]
 80057e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80057ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80057ee:	4313      	orrs	r3, r2
 80057f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80057f2:	7b3b      	ldrb	r3, [r7, #12]
 80057f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80057fa:	4313      	orrs	r3, r2
 80057fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80057fe:	7b3b      	ldrb	r3, [r7, #12]
 8005800:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005806:	4313      	orrs	r3, r2
 8005808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800580a:	7b3b      	ldrb	r3, [r7, #12]
 800580c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005812:	4313      	orrs	r3, r2
 8005814:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005816:	7b3b      	ldrb	r3, [r7, #12]
 8005818:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800581c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800581e:	4313      	orrs	r3, r2
 8005820:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005822:	7b3b      	ldrb	r3, [r7, #12]
 8005824:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005828:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800582a:	4313      	orrs	r3, r2
 800582c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800582e:	7b7b      	ldrb	r3, [r7, #13]
 8005830:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005834:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005836:	4313      	orrs	r3, r2
 8005838:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800583a:	7b7b      	ldrb	r3, [r7, #13]
 800583c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005840:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005842:	4313      	orrs	r3, r2
 8005844:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005846:	7b7b      	ldrb	r3, [r7, #13]
 8005848:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800584c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800584e:	4313      	orrs	r3, r2
 8005850:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005852:	7b7b      	ldrb	r3, [r7, #13]
 8005854:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005858:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800585a:	4313      	orrs	r3, r2
 800585c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800585e:	7b7b      	ldrb	r3, [r7, #13]
 8005860:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005864:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005866:	4313      	orrs	r3, r2
 8005868:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800586a:	7b7b      	ldrb	r3, [r7, #13]
 800586c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005870:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005872:	4313      	orrs	r3, r2
 8005874:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005876:	7b7b      	ldrb	r3, [r7, #13]
 8005878:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800587c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800587e:	4313      	orrs	r3, r2
 8005880:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005882:	7b7b      	ldrb	r3, [r7, #13]
 8005884:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005888:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800588a:	4313      	orrs	r3, r2
 800588c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800588e:	2b01      	cmp	r3, #1
 8005890:	d163      	bne.n	800595a <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005892:	f107 030b 	add.w	r3, r7, #11
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fe47 	bl	800652c <ism330dhcx_fsm_data_rate_get>
 800589e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d159      	bne.n	800595a <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d853      	bhi.n	8005954 <ism330dhcx_xl_data_rate_set+0x1a8>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <ism330dhcx_xl_data_rate_set+0x108>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058c5 	.word	0x080058c5
 80058b8:	080058d7 	.word	0x080058d7
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	0800591f 	.word	0x0800591f
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80058ca:	2301      	movs	r3, #1
 80058cc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80058ce:	e045      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	75fb      	strb	r3, [r7, #23]
            break;
 80058d4:	e042      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80058dc:	2302      	movs	r3, #2
 80058de:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80058e0:	e03c      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d102      	bne.n	80058ee <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80058e8:	2302      	movs	r3, #2
 80058ea:	75fb      	strb	r3, [r7, #23]
            break;
 80058ec:	e036      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	75fb      	strb	r3, [r7, #23]
            break;
 80058f2:	e033      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80058fa:	2303      	movs	r3, #3
 80058fc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80058fe:	e02d      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d102      	bne.n	800590c <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005906:	2303      	movs	r3, #3
 8005908:	75fb      	strb	r3, [r7, #23]
            break;
 800590a:	e027      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d102      	bne.n	8005918 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005912:	2303      	movs	r3, #3
 8005914:	75fb      	strb	r3, [r7, #23]
            break;
 8005916:	e021      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	75fb      	strb	r3, [r7, #23]
            break;
 800591c:	e01e      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005924:	2304      	movs	r3, #4
 8005926:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005928:	e018      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d102      	bne.n	8005936 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005930:	2304      	movs	r3, #4
 8005932:	75fb      	strb	r3, [r7, #23]
            break;
 8005934:	e012      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d102      	bne.n	8005942 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800593c:	2304      	movs	r3, #4
 800593e:	75fb      	strb	r3, [r7, #23]
            break;
 8005940:	e00c      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d102      	bne.n	800594e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005948:	2304      	movs	r3, #4
 800594a:	75fb      	strb	r3, [r7, #23]
            break;
 800594c:	e006      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	75fb      	strb	r3, [r7, #23]
            break;
 8005952:	e003      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	75fb      	strb	r3, [r7, #23]
            break;
 8005958:	e000      	b.n	800595c <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 800595a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800595c:	2300      	movs	r3, #0
 800595e:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d16d      	bne.n	8005a42 <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005966:	f107 030a 	add.w	r3, r7, #10
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fe25 	bl	80065bc <ism330dhcx_mlc_get>
 8005972:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005974:	7abb      	ldrb	r3, [r7, #10]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d163      	bne.n	8005a42 <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800597a:	f107 0309 	add.w	r3, r7, #9
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fe45 	bl	8006610 <ism330dhcx_mlc_data_rate_get>
 8005986:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d159      	bne.n	8005a42 <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 800598e:	7a7b      	ldrb	r3, [r7, #9]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d853      	bhi.n	8005a3c <ism330dhcx_xl_data_rate_set+0x290>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <ism330dhcx_xl_data_rate_set+0x1f0>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059bf 	.word	0x080059bf
 80059a4:	080059dd 	.word	0x080059dd
 80059a8:	08005a07 	.word	0x08005a07
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80059b6:	e045      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	75fb      	strb	r3, [r7, #23]
            break;
 80059bc:	e042      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80059c4:	2302      	movs	r3, #2
 80059c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80059c8:	e03c      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80059d0:	2302      	movs	r3, #2
 80059d2:	75fb      	strb	r3, [r7, #23]
            break;
 80059d4:	e036      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	75fb      	strb	r3, [r7, #23]
            break;
 80059da:	e033      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80059e2:	2303      	movs	r3, #3
 80059e4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80059e6:	e02d      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d102      	bne.n	80059f4 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80059ee:	2303      	movs	r3, #3
 80059f0:	75fb      	strb	r3, [r7, #23]
            break;
 80059f2:	e027      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d102      	bne.n	8005a00 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80059fa:	2303      	movs	r3, #3
 80059fc:	75fb      	strb	r3, [r7, #23]
            break;
 80059fe:	e021      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	75fb      	strb	r3, [r7, #23]
            break;
 8005a04:	e01e      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005a10:	e018      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d102      	bne.n	8005a1e <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005a18:	2304      	movs	r3, #4
 8005a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a1c:	e012      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d102      	bne.n	8005a2a <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005a24:	2304      	movs	r3, #4
 8005a26:	75fb      	strb	r3, [r7, #23]
            break;
 8005a28:	e00c      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d102      	bne.n	8005a36 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005a30:	2304      	movs	r3, #4
 8005a32:	75fb      	strb	r3, [r7, #23]
            break;
 8005a34:	e006      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	75fb      	strb	r3, [r7, #23]
            break;
 8005a3a:	e003      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8005a40:	e000      	b.n	8005a44 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8005a42:	bf00      	nop
    }
  }

  if (ret == 0)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d107      	bne.n	8005a5a <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005a4a:	f107 0208 	add.w	r2, r7, #8
 8005a4e:	2301      	movs	r3, #1
 8005a50:	2110      	movs	r1, #16
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fe1c 	bl	8005690 <ism330dhcx_read_reg>
 8005a58:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10f      	bne.n	8005a80 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	7a3b      	ldrb	r3, [r7, #8]
 8005a6a:	f362 1307 	bfi	r3, r2, #4, #4
 8005a6e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005a70:	f107 0208 	add.w	r2, r7, #8
 8005a74:	2301      	movs	r3, #1
 8005a76:	2110      	movs	r1, #16
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff fe21 	bl	80056c0 <ism330dhcx_write_reg>
 8005a7e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005a80:	693b      	ldr	r3, [r7, #16]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop

08005a8c <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005a96:	f107 0208 	add.w	r2, r7, #8
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	2110      	movs	r1, #16
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fdf6 	bl	8005690 <ism330dhcx_read_reg>
 8005aa4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8005aa6:	7a3b      	ldrb	r3, [r7, #8]
 8005aa8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b0b      	cmp	r3, #11
 8005ab0:	d84a      	bhi.n	8005b48 <ism330dhcx_xl_data_rate_get+0xbc>
 8005ab2:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <ism330dhcx_xl_data_rate_get+0x2c>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ae9 	.word	0x08005ae9
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005af9 	.word	0x08005af9
 8005ac4:	08005b01 	.word	0x08005b01
 8005ac8:	08005b09 	.word	0x08005b09
 8005acc:	08005b11 	.word	0x08005b11
 8005ad0:	08005b19 	.word	0x08005b19
 8005ad4:	08005b21 	.word	0x08005b21
 8005ad8:	08005b29 	.word	0x08005b29
 8005adc:	08005b31 	.word	0x08005b31
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b41 	.word	0x08005b41
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
      break;
 8005aee:	e02f      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
      break;
 8005af6:	e02b      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2202      	movs	r2, #2
 8005afc:	701a      	strb	r2, [r3, #0]
      break;
 8005afe:	e027      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2203      	movs	r2, #3
 8005b04:	701a      	strb	r2, [r3, #0]
      break;
 8005b06:	e023      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	701a      	strb	r2, [r3, #0]
      break;
 8005b0e:	e01f      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2205      	movs	r2, #5
 8005b14:	701a      	strb	r2, [r3, #0]
      break;
 8005b16:	e01b      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2206      	movs	r2, #6
 8005b1c:	701a      	strb	r2, [r3, #0]
      break;
 8005b1e:	e017      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2207      	movs	r2, #7
 8005b24:	701a      	strb	r2, [r3, #0]
      break;
 8005b26:	e013      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	701a      	strb	r2, [r3, #0]
      break;
 8005b2e:	e00f      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2209      	movs	r2, #9
 8005b34:	701a      	strb	r2, [r3, #0]
      break;
 8005b36:	e00b      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	701a      	strb	r2, [r3, #0]
      break;
 8005b3e:	e007      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	220b      	movs	r2, #11
 8005b44:	701a      	strb	r2, [r3, #0]
      break;
 8005b46:	e003      	b.n	8005b50 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
      break;
 8005b4e:	bf00      	nop
  }

  return ret;
 8005b50:	68fb      	ldr	r3, [r7, #12]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop

08005b5c <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005b68:	f107 0208 	add.w	r2, r7, #8
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	2111      	movs	r1, #17
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff fd8d 	bl	8005690 <ism330dhcx_read_reg>
 8005b76:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	7a3b      	ldrb	r3, [r7, #8]
 8005b88:	f362 0303 	bfi	r3, r2, #0, #4
 8005b8c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005b8e:	f107 0208 	add.w	r2, r7, #8
 8005b92:	2301      	movs	r3, #1
 8005b94:	2111      	movs	r1, #17
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff fd92 	bl	80056c0 <ism330dhcx_write_reg>
 8005b9c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005bb2:	f107 0208 	add.w	r2, r7, #8
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	2111      	movs	r1, #17
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff fd68 	bl	8005690 <ism330dhcx_read_reg>
 8005bc0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8005bc2:	7a3b      	ldrb	r3, [r7, #8]
 8005bc4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d834      	bhi.n	8005c38 <ism330dhcx_gy_full_scale_get+0x90>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <ism330dhcx_gy_full_scale_get+0x2c>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c11 	.word	0x08005c11
 8005bd8:	08005c31 	.word	0x08005c31
 8005bdc:	08005c09 	.word	0x08005c09
 8005be0:	08005c39 	.word	0x08005c39
 8005be4:	08005c19 	.word	0x08005c19
 8005be8:	08005c39 	.word	0x08005c39
 8005bec:	08005c39 	.word	0x08005c39
 8005bf0:	08005c39 	.word	0x08005c39
 8005bf4:	08005c21 	.word	0x08005c21
 8005bf8:	08005c39 	.word	0x08005c39
 8005bfc:	08005c39 	.word	0x08005c39
 8005c00:	08005c39 	.word	0x08005c39
 8005c04:	08005c29 	.word	0x08005c29
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	701a      	strb	r2, [r3, #0]
      break;
 8005c0e:	e017      	b.n	8005c40 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
      break;
 8005c16:	e013      	b.n	8005c40 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	701a      	strb	r2, [r3, #0]
      break;
 8005c1e:	e00f      	b.n	8005c40 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2208      	movs	r2, #8
 8005c24:	701a      	strb	r2, [r3, #0]
      break;
 8005c26:	e00b      	b.n	8005c40 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	220c      	movs	r2, #12
 8005c2c:	701a      	strb	r2, [r3, #0]
      break;
 8005c2e:	e007      	b.n	8005c40 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
      break;
 8005c36:	e003      	b.n	8005c40 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	701a      	strb	r2, [r3, #0]
      break;
 8005c3e:	bf00      	nop
  }

  return ret;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop

08005c4c <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005c5c:	f107 030c 	add.w	r3, r7, #12
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fc36 	bl	80064d4 <ism330dhcx_fsm_enable_get>
 8005c68:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 80c4 	bne.w	8005dfa <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005c72:	7b3b      	ldrb	r3, [r7, #12]
 8005c74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005c7a:	7b3b      	ldrb	r3, [r7, #12]
 8005c7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c80:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005c86:	7b3b      	ldrb	r3, [r7, #12]
 8005c88:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005c92:	7b3b      	ldrb	r3, [r7, #12]
 8005c94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005c9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ca0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ca4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005caa:	7b3b      	ldrb	r3, [r7, #12]
 8005cac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005cb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005cb6:	7b3b      	ldrb	r3, [r7, #12]
 8005cb8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005cbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005cc2:	7b3b      	ldrb	r3, [r7, #12]
 8005cc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005cc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005cce:	7b7b      	ldrb	r3, [r7, #13]
 8005cd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005cd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005cda:	7b7b      	ldrb	r3, [r7, #13]
 8005cdc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ce0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005ce6:	7b7b      	ldrb	r3, [r7, #13]
 8005ce8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005cec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005cf2:	7b7b      	ldrb	r3, [r7, #13]
 8005cf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005cf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005cfe:	7b7b      	ldrb	r3, [r7, #13]
 8005d00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005d0a:	7b7b      	ldrb	r3, [r7, #13]
 8005d0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005d12:	4313      	orrs	r3, r2
 8005d14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005d16:	7b7b      	ldrb	r3, [r7, #13]
 8005d18:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005d22:	7b7b      	ldrb	r3, [r7, #13]
 8005d24:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d163      	bne.n	8005dfa <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005d32:	f107 030b 	add.w	r3, r7, #11
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fbf7 	bl	800652c <ism330dhcx_fsm_data_rate_get>
 8005d3e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d159      	bne.n	8005dfa <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005d46:	7afb      	ldrb	r3, [r7, #11]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d853      	bhi.n	8005df4 <ism330dhcx_gy_data_rate_set+0x1a8>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <ism330dhcx_gy_data_rate_set+0x108>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d77 	.word	0x08005d77
 8005d5c:	08005d95 	.word	0x08005d95
 8005d60:	08005dbf 	.word	0x08005dbf
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d6e:	e045      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	75fb      	strb	r3, [r7, #23]
            break;
 8005d74:	e042      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d80:	e03c      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8005d8c:	e036      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	75fb      	strb	r3, [r7, #23]
            break;
 8005d92:	e033      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005d9e:	e02d      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d102      	bne.n	8005dac <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005da6:	2303      	movs	r3, #3
 8005da8:	75fb      	strb	r3, [r7, #23]
            break;
 8005daa:	e027      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d102      	bne.n	8005db8 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005db2:	2303      	movs	r3, #3
 8005db4:	75fb      	strb	r3, [r7, #23]
            break;
 8005db6:	e021      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	75fb      	strb	r3, [r7, #23]
            break;
 8005dbc:	e01e      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005dc8:	e018      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	75fb      	strb	r3, [r7, #23]
            break;
 8005dd4:	e012      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d102      	bne.n	8005de2 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005ddc:	2304      	movs	r3, #4
 8005dde:	75fb      	strb	r3, [r7, #23]
            break;
 8005de0:	e00c      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d102      	bne.n	8005dee <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005de8:	2304      	movs	r3, #4
 8005dea:	75fb      	strb	r3, [r7, #23]
            break;
 8005dec:	e006      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	75fb      	strb	r3, [r7, #23]
            break;
 8005df2:	e003      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	75fb      	strb	r3, [r7, #23]
            break;
 8005df8:	e000      	b.n	8005dfc <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8005dfa:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d16d      	bne.n	8005ee2 <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005e06:	f107 030a 	add.w	r3, r7, #10
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fbd5 	bl	80065bc <ism330dhcx_mlc_get>
 8005e12:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005e14:	7abb      	ldrb	r3, [r7, #10]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d163      	bne.n	8005ee2 <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005e1a:	f107 0309 	add.w	r3, r7, #9
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fbf5 	bl	8006610 <ism330dhcx_mlc_data_rate_get>
 8005e26:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d159      	bne.n	8005ee2 <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8005e2e:	7a7b      	ldrb	r3, [r7, #9]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d853      	bhi.n	8005edc <ism330dhcx_gy_data_rate_set+0x290>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <ism330dhcx_gy_data_rate_set+0x1f0>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e4d 	.word	0x08005e4d
 8005e40:	08005e5f 	.word	0x08005e5f
 8005e44:	08005e7d 	.word	0x08005e7d
 8005e48:	08005ea7 	.word	0x08005ea7
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e56:	e045      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e5c:	e042      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005e64:	2302      	movs	r3, #2
 8005e66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e68:	e03c      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d102      	bne.n	8005e76 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005e70:	2302      	movs	r3, #2
 8005e72:	75fb      	strb	r3, [r7, #23]
            break;
 8005e74:	e036      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	75fb      	strb	r3, [r7, #23]
            break;
 8005e7a:	e033      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e82:	2303      	movs	r3, #3
 8005e84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005e86:	e02d      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	75fb      	strb	r3, [r7, #23]
            break;
 8005e92:	e027      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d102      	bne.n	8005ea0 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	75fb      	strb	r3, [r7, #23]
            break;
 8005e9e:	e021      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ea4:	e01e      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d102      	bne.n	8005eb2 <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005eac:	2304      	movs	r3, #4
 8005eae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005eb0:	e018      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d102      	bne.n	8005ebe <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005eb8:	2304      	movs	r3, #4
 8005eba:	75fb      	strb	r3, [r7, #23]
            break;
 8005ebc:	e012      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d102      	bne.n	8005eca <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ec8:	e00c      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d102      	bne.n	8005ed6 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ed4:	e006      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	75fb      	strb	r3, [r7, #23]
            break;
 8005eda:	e003      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	75fb      	strb	r3, [r7, #23]
            break;
 8005ee0:	e000      	b.n	8005ee4 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8005ee2:	bf00      	nop
    }
  }

  if (ret == 0)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d107      	bne.n	8005efa <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005eea:	f107 0208 	add.w	r2, r7, #8
 8005eee:	2301      	movs	r3, #1
 8005ef0:	2111      	movs	r1, #17
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fbcc 	bl	8005690 <ism330dhcx_read_reg>
 8005ef8:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10f      	bne.n	8005f20 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	7a3b      	ldrb	r3, [r7, #8]
 8005f0a:	f362 1307 	bfi	r3, r2, #4, #4
 8005f0e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005f10:	f107 0208 	add.w	r2, r7, #8
 8005f14:	2301      	movs	r3, #1
 8005f16:	2111      	movs	r1, #17
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff fbd1 	bl	80056c0 <ism330dhcx_write_reg>
 8005f1e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005f20:	693b      	ldr	r3, [r7, #16]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop

08005f2c <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005f36:	f107 0208 	add.w	r2, r7, #8
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	2111      	movs	r1, #17
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fba6 	bl	8005690 <ism330dhcx_read_reg>
 8005f44:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8005f46:	7a3b      	ldrb	r3, [r7, #8]
 8005f48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b0a      	cmp	r3, #10
 8005f50:	d844      	bhi.n	8005fdc <ism330dhcx_gy_data_rate_get+0xb0>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <ism330dhcx_gy_data_rate_get+0x2c>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	08005f8d 	.word	0x08005f8d
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005f9d 	.word	0x08005f9d
 8005f68:	08005fa5 	.word	0x08005fa5
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	08005fb5 	.word	0x08005fb5
 8005f74:	08005fbd 	.word	0x08005fbd
 8005f78:	08005fc5 	.word	0x08005fc5
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005fd5 	.word	0x08005fd5
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
      break;
 8005f8a:	e02b      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
      break;
 8005f92:	e027      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2202      	movs	r2, #2
 8005f98:	701a      	strb	r2, [r3, #0]
      break;
 8005f9a:	e023      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	701a      	strb	r2, [r3, #0]
      break;
 8005fa2:	e01f      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	701a      	strb	r2, [r3, #0]
      break;
 8005faa:	e01b      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2205      	movs	r2, #5
 8005fb0:	701a      	strb	r2, [r3, #0]
      break;
 8005fb2:	e017      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2206      	movs	r2, #6
 8005fb8:	701a      	strb	r2, [r3, #0]
      break;
 8005fba:	e013      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2207      	movs	r2, #7
 8005fc0:	701a      	strb	r2, [r3, #0]
      break;
 8005fc2:	e00f      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	701a      	strb	r2, [r3, #0]
      break;
 8005fca:	e00b      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2209      	movs	r2, #9
 8005fd0:	701a      	strb	r2, [r3, #0]
      break;
 8005fd2:	e007      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	220a      	movs	r2, #10
 8005fd8:	701a      	strb	r2, [r3, #0]
      break;
 8005fda:	e003      	b.n	8005fe4 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
      break;
 8005fe2:	bf00      	nop
  }

  return ret;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop

08005ff0 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005ffc:	f107 0208 	add.w	r2, r7, #8
 8006000:	2301      	movs	r3, #1
 8006002:	2112      	movs	r1, #18
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fb43 	bl	8005690 <ism330dhcx_read_reg>
 800600a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10f      	bne.n	8006032 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	7a3b      	ldrb	r3, [r7, #8]
 800601c:	f362 1386 	bfi	r3, r2, #6, #1
 8006020:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8006022:	f107 0208 	add.w	r2, r7, #8
 8006026:	2301      	movs	r3, #1
 8006028:	2112      	movs	r1, #18
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff fb48 	bl	80056c0 <ism330dhcx_write_reg>
 8006030:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006032:	68fb      	ldr	r3, [r7, #12]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8006046:	f107 020c 	add.w	r2, r7, #12
 800604a:	2306      	movs	r3, #6
 800604c:	2122      	movs	r1, #34	; 0x22
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fb1e 	bl	8005690 <ism330dhcx_read_reg>
 8006054:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006056:	7b7b      	ldrb	r3, [r7, #13]
 8006058:	b21a      	sxth	r2, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006064:	b29b      	uxth	r3, r3
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	b29a      	uxth	r2, r3
 800606a:	7b3b      	ldrb	r3, [r7, #12]
 800606c:	b29b      	uxth	r3, r3
 800606e:	4413      	add	r3, r2
 8006070:	b29b      	uxth	r3, r3
 8006072:	b21a      	sxth	r2, r3
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006078:	7bfa      	ldrb	r2, [r7, #15]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	3302      	adds	r3, #2
 800607e:	b212      	sxth	r2, r2
 8006080:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	3302      	adds	r3, #2
 8006086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800608a:	b29b      	uxth	r3, r3
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	b29a      	uxth	r2, r3
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	b29b      	uxth	r3, r3
 8006094:	4413      	add	r3, r2
 8006096:	b29a      	uxth	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	3302      	adds	r3, #2
 800609c:	b212      	sxth	r2, r2
 800609e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80060a0:	7c7a      	ldrb	r2, [r7, #17]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	3304      	adds	r3, #4
 80060a6:	b212      	sxth	r2, r2
 80060a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	3304      	adds	r3, #4
 80060ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	7c3b      	ldrb	r3, [r7, #16]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	4413      	add	r3, r2
 80060be:	b29a      	uxth	r2, r3
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	3304      	adds	r3, #4
 80060c4:	b212      	sxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]

  return ret;
 80060c8:	697b      	ldr	r3, [r7, #20]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80060dc:	f107 020c 	add.w	r2, r7, #12
 80060e0:	2306      	movs	r3, #6
 80060e2:	2128      	movs	r1, #40	; 0x28
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fad3 	bl	8005690 <ism330dhcx_read_reg>
 80060ea:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80060ec:	7b7b      	ldrb	r3, [r7, #13]
 80060ee:	b21a      	sxth	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	b29a      	uxth	r2, r3
 8006100:	7b3b      	ldrb	r3, [r7, #12]
 8006102:	b29b      	uxth	r3, r3
 8006104:	4413      	add	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	b21a      	sxth	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	3302      	adds	r3, #2
 8006114:	b212      	sxth	r2, r2
 8006116:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	3302      	adds	r3, #2
 800611c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006120:	b29b      	uxth	r3, r3
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	b29a      	uxth	r2, r3
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	b29b      	uxth	r3, r3
 800612a:	4413      	add	r3, r2
 800612c:	b29a      	uxth	r2, r3
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	3302      	adds	r3, #2
 8006132:	b212      	sxth	r2, r2
 8006134:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006136:	7c7a      	ldrb	r2, [r7, #17]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	3304      	adds	r3, #4
 800613c:	b212      	sxth	r2, r2
 800613e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	3304      	adds	r3, #4
 8006144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006148:	b29b      	uxth	r3, r3
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	b29a      	uxth	r2, r3
 800614e:	7c3b      	ldrb	r3, [r7, #16]
 8006150:	b29b      	uxth	r3, r3
 8006152:	4413      	add	r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	3304      	adds	r3, #4
 800615a:	b212      	sxth	r2, r2
 800615c:	801a      	strh	r2, [r3, #0]

  return ret;
 800615e:	697b      	ldr	r3, [r7, #20]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <ism330dhcx_fifo_out_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_out_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_X_L, buff, 6);
 8006172:	2306      	movs	r3, #6
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	2179      	movs	r1, #121	; 0x79
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fa89 	bl	8005690 <ism330dhcx_read_reg>
 800617e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006180:	68fb      	ldr	r3, [r7, #12]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8006196:	f107 0208 	add.w	r2, r7, #8
 800619a:	2301      	movs	r3, #1
 800619c:	2118      	movs	r1, #24
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fa76 	bl	8005690 <ism330dhcx_read_reg>
 80061a4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10f      	bne.n	80061cc <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	7a3b      	ldrb	r3, [r7, #8]
 80061b6:	f362 0341 	bfi	r3, r2, #1, #1
 80061ba:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 80061bc:	f107 0208 	add.w	r2, r7, #8
 80061c0:	2301      	movs	r3, #1
 80061c2:	2118      	movs	r1, #24
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fa7b 	bl	80056c0 <ism330dhcx_write_reg>
 80061ca:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 80061cc:	68fb      	ldr	r3, [r7, #12]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80061e2:	f107 0208 	add.w	r2, r7, #8
 80061e6:	2301      	movs	r3, #1
 80061e8:	2101      	movs	r1, #1
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fa50 	bl	8005690 <ism330dhcx_read_reg>
 80061f0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10f      	bne.n	8006218 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	7a3b      	ldrb	r3, [r7, #8]
 8006202:	f362 1387 	bfi	r3, r2, #6, #2
 8006206:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8006208:	f107 0208 	add.w	r2, r7, #8
 800620c:	2301      	movs	r3, #1
 800620e:	2101      	movs	r1, #1
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fa55 	bl	80056c0 <ism330dhcx_write_reg>
 8006216:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8006218:	68fb      	ldr	r3, [r7, #12]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800622c:	2301      	movs	r3, #1
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	210f      	movs	r1, #15
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fa2c 	bl	8005690 <ism330dhcx_read_reg>
 8006238:	60f8      	str	r0, [r7, #12]

  return ret;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8006250:	f107 0208 	add.w	r2, r7, #8
 8006254:	2301      	movs	r3, #1
 8006256:	2112      	movs	r1, #18
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff fa19 	bl	8005690 <ism330dhcx_read_reg>
 800625e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	b2da      	uxtb	r2, r3
 800626e:	7a3b      	ldrb	r3, [r7, #8]
 8006270:	f362 0300 	bfi	r3, r2, #0, #1
 8006274:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8006276:	f107 0208 	add.w	r2, r7, #8
 800627a:	2301      	movs	r3, #1
 800627c:	2112      	movs	r1, #18
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff fa1e 	bl	80056c0 <ism330dhcx_write_reg>
 8006284:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800629c:	f107 0208 	add.w	r2, r7, #8
 80062a0:	2301      	movs	r3, #1
 80062a2:	2112      	movs	r1, #18
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff f9f3 	bl	8005690 <ism330dhcx_read_reg>
 80062aa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10f      	bne.n	80062d2 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	7a3b      	ldrb	r3, [r7, #8]
 80062bc:	f362 0382 	bfi	r3, r2, #2, #1
 80062c0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80062c2:	f107 0208 	add.w	r2, r7, #8
 80062c6:	2301      	movs	r3, #1
 80062c8:	2112      	movs	r1, #18
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff f9f8 	bl	80056c0 <ism330dhcx_write_reg>
 80062d0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80062e8:	f107 020c 	add.w	r2, r7, #12
 80062ec:	2301      	movs	r3, #1
 80062ee:	2108      	movs	r1, #8
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff f9cd 	bl	8005690 <ism330dhcx_read_reg>
 80062f6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d111      	bne.n	8006322 <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	b29b      	uxth	r3, r3
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	b2da      	uxtb	r2, r3
 800630a:	7b3b      	ldrb	r3, [r7, #12]
 800630c:	f362 0300 	bfi	r3, r2, #0, #1
 8006310:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8006312:	f107 020c 	add.w	r2, r7, #12
 8006316:	2301      	movs	r3, #1
 8006318:	2108      	movs	r1, #8
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff f9d0 	bl	80056c0 <ism330dhcx_write_reg>
 8006320:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 8006328:	887b      	ldrh	r3, [r7, #2]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 800632e:	f107 0210 	add.w	r2, r7, #16
 8006332:	2301      	movs	r3, #1
 8006334:	2107      	movs	r1, #7
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff f9c2 	bl	80056c0 <ism330dhcx_write_reg>
 800633c:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 800633e:	697b      	ldr	r3, [r7, #20]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <ism330dhcx_fifo_stop_on_wtm_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8006354:	f107 0208 	add.w	r2, r7, #8
 8006358:	2301      	movs	r3, #1
 800635a:	2108      	movs	r1, #8
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff f997 	bl	8005690 <ism330dhcx_read_reg>
 8006362:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <ism330dhcx_fifo_stop_on_wtm_set+0x42>
  {
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	7a3b      	ldrb	r3, [r7, #8]
 8006374:	f362 13c7 	bfi	r3, r2, #7, #1
 8006378:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800637a:	f107 0208 	add.w	r2, r7, #8
 800637e:	2301      	movs	r3, #1
 8006380:	2108      	movs	r1, #8
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff f99c 	bl	80056c0 <ism330dhcx_write_reg>
 8006388:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 800638a:	68fb      	ldr	r3, [r7, #12]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80063a0:	f107 0208 	add.w	r2, r7, #8
 80063a4:	2301      	movs	r3, #1
 80063a6:	2109      	movs	r1, #9
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff f971 	bl	8005690 <ism330dhcx_read_reg>
 80063ae:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10f      	bne.n	80063d6 <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	7a3b      	ldrb	r3, [r7, #8]
 80063c0:	f362 0303 	bfi	r3, r2, #0, #4
 80063c4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80063c6:	f107 0208 	add.w	r2, r7, #8
 80063ca:	2301      	movs	r3, #1
 80063cc:	2109      	movs	r1, #9
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff f976 	bl	80056c0 <ism330dhcx_write_reg>
 80063d4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80063ec:	f107 0208 	add.w	r2, r7, #8
 80063f0:	2301      	movs	r3, #1
 80063f2:	2109      	movs	r1, #9
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff f94b 	bl	8005690 <ism330dhcx_read_reg>
 80063fa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10f      	bne.n	8006422 <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	b2da      	uxtb	r2, r3
 800640a:	7a3b      	ldrb	r3, [r7, #8]
 800640c:	f362 1307 	bfi	r3, r2, #4, #4
 8006410:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8006412:	f107 0208 	add.w	r2, r7, #8
 8006416:	2301      	movs	r3, #1
 8006418:	2109      	movs	r1, #9
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff f950 	bl	80056c0 <ism330dhcx_write_reg>
 8006420:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006438:	f107 0208 	add.w	r2, r7, #8
 800643c:	2301      	movs	r3, #1
 800643e:	210a      	movs	r1, #10
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff f925 	bl	8005690 <ism330dhcx_read_reg>
 8006446:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10f      	bne.n	800646e <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	b2da      	uxtb	r2, r3
 8006456:	7a3b      	ldrb	r3, [r7, #8]
 8006458:	f362 0302 	bfi	r3, r2, #0, #3
 800645c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800645e:	f107 0208 	add.w	r2, r7, #8
 8006462:	2301      	movs	r3, #1
 8006464:	210a      	movs	r1, #10
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff f92a 	bl	80056c0 <ism330dhcx_write_reg>
 800646c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 800646e:	68fb      	ldr	r3, [r7, #12]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <ism330dhcx_fifo_data_level_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_data_level_get(stmdev_ctx_t *ctx,
                                       uint16_t *val)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  ism330dhcx_fifo_status1_t fifo_status1;
  ism330dhcx_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS1,
 8006482:	f107 0210 	add.w	r2, r7, #16
 8006486:	2301      	movs	r3, #1
 8006488:	213a      	movs	r1, #58	; 0x3a
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff f900 	bl	8005690 <ism330dhcx_read_reg>
 8006490:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d118      	bne.n	80064ca <ism330dhcx_fifo_data_level_get+0x52>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS2,
 8006498:	f107 020c 	add.w	r2, r7, #12
 800649c:	2301      	movs	r3, #1
 800649e:	213b      	movs	r1, #59	; 0x3b
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff f8f5 	bl	8005690 <ism330dhcx_read_reg>
 80064a6:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_status2, 1);
    *val = fifo_status2.diff_fifo;
 80064a8:	7b3b      	ldrb	r3, [r7, #12]
 80064aa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256U) +  fifo_status1.diff_fifo;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b29a      	uxth	r2, r3
 80064be:	7c3b      	ldrb	r3, [r7, #16]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80064ca:	697b      	ldr	r3, [r7, #20]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80064de:	2102      	movs	r1, #2
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fe78 	bl	80061d6 <ism330dhcx_mem_bank_set>
 80064e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80064ee:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80064f0:	2301      	movs	r3, #1
 80064f2:	2146      	movs	r1, #70	; 0x46
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f8cb 	bl	8005690 <ism330dhcx_read_reg>
 80064fa:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8006506:	2301      	movs	r3, #1
 8006508:	2147      	movs	r1, #71	; 0x47
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff f8c0 	bl	8005690 <ism330dhcx_read_reg>
 8006510:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006518:	2100      	movs	r1, #0
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fe5b 	bl	80061d6 <ism330dhcx_mem_bank_set>
 8006520:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006536:	2102      	movs	r1, #2
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff fe4c 	bl	80061d6 <ism330dhcx_mem_bank_set>
 800653e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d107      	bne.n	8006556 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8006546:	f107 0208 	add.w	r2, r7, #8
 800654a:	2301      	movs	r3, #1
 800654c:	215f      	movs	r1, #95	; 0x5f
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff f89e 	bl	8005690 <ism330dhcx_read_reg>
 8006554:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800655c:	2100      	movs	r1, #0
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fe39 	bl	80061d6 <ism330dhcx_mem_bank_set>
 8006564:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006566:	7a3b      	ldrb	r3, [r7, #8]
 8006568:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d81a      	bhi.n	80065a8 <ism330dhcx_fsm_data_rate_get+0x7c>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006589 	.word	0x08006589
 800657c:	08006591 	.word	0x08006591
 8006580:	08006599 	.word	0x08006599
 8006584:	080065a1 	.word	0x080065a1
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
      break;
 800658e:	e00f      	b.n	80065b0 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
      break;
 8006596:	e00b      	b.n	80065b0 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2202      	movs	r2, #2
 800659c:	701a      	strb	r2, [r3, #0]
      break;
 800659e:	e007      	b.n	80065b0 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2203      	movs	r2, #3
 80065a4:	701a      	strb	r2, [r3, #0]
      break;
 80065a6:	e003      	b.n	80065b0 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
      break;
 80065ae:	bf00      	nop
  }

  return ret;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80065c6:	2102      	movs	r1, #2
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fe04 	bl	80061d6 <ism330dhcx_mem_bank_set>
 80065ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d107      	bne.n	80065e6 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80065d6:	f107 0208 	add.w	r2, r7, #8
 80065da:	2301      	movs	r3, #1
 80065dc:	2105      	movs	r1, #5
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff f856 	bl	8005690 <ism330dhcx_read_reg>
 80065e4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80065ec:	2100      	movs	r1, #0
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fdf1 	bl	80061d6 <ism330dhcx_mem_bank_set>
 80065f4:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80065f6:	7a3b      	ldrb	r3, [r7, #8]
 80065f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800661a:	2102      	movs	r1, #2
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fdda 	bl	80061d6 <ism330dhcx_mem_bank_set>
 8006622:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d107      	bne.n	800663a <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800662a:	f107 0208 	add.w	r2, r7, #8
 800662e:	2301      	movs	r3, #1
 8006630:	2160      	movs	r1, #96	; 0x60
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff f82c 	bl	8005690 <ism330dhcx_read_reg>
 8006638:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d12a      	bne.n	8006696 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8006640:	7a3b      	ldrb	r3, [r7, #8]
 8006642:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b03      	cmp	r3, #3
 800664a:	d81b      	bhi.n	8006684 <ism330dhcx_mlc_data_rate_get+0x74>
 800664c:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <ism330dhcx_mlc_data_rate_get+0x44>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	08006665 	.word	0x08006665
 8006658:	0800666d 	.word	0x0800666d
 800665c:	08006675 	.word	0x08006675
 8006660:	0800667d 	.word	0x0800667d
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
        break;
 800666a:	e00f      	b.n	800668c <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
        break;
 8006672:	e00b      	b.n	800668c <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
        break;
 800667a:	e007      	b.n	800668c <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2203      	movs	r2, #3
 8006680:	701a      	strb	r2, [r3, #0]
        break;
 8006682:	e003      	b.n	800668c <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
        break;
 800668a:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800668c:	2100      	movs	r1, #0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fda1 	bl	80061d6 <ism330dhcx_mem_bank_set>
 8006694:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006696:	68fb      	ldr	r3, [r7, #12]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <BSP_LED_Init>:
 *          This parameter can be one of the following values:
 *            @arg  LED1
 * @retval None
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	; 0x28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t )Led);
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10f      	bne.n	80066d0 <BSP_LED_Init+0x30>
 80066b0:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <BSP_LED_Init+0x84>)
 80066b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b6:	4a1b      	ldr	r2, [pc, #108]	; (8006724 <BSP_LED_Init+0x84>)
 80066b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066c0:	4b18      	ldr	r3, [pc, #96]	; (8006724 <BSP_LED_Init+0x84>)
 80066c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	e00e      	b.n	80066ee <BSP_LED_Init+0x4e>
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <BSP_LED_Init+0x84>)
 80066d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d6:	4a13      	ldr	r2, [pc, #76]	; (8006724 <BSP_LED_Init+0x84>)
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066e0:	4b10      	ldr	r3, [pc, #64]	; (8006724 <BSP_LED_Init+0x84>)
 80066e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	4a0d      	ldr	r2, [pc, #52]	; (8006728 <BSP_LED_Init+0x88>)
 80066f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066f8:	2301      	movs	r3, #1
 80066fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006700:	2302      	movs	r3, #2
 8006702:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	4a09      	ldr	r2, [pc, #36]	; (800672c <BSP_LED_Init+0x8c>)
 8006708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800670c:	f107 0214 	add.w	r2, r7, #20
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f003 fd34 	bl	800a180 <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3728      	adds	r7, #40	; 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	46020c00 	.word	0x46020c00
 8006728:	0801f684 	.word	0x0801f684
 800672c:	20000068 	.word	0x20000068

08006730 <BSP_LED_On>:
 *            @arg  LED1
 *            @arg  LED2
 * @retval None
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	4a07      	ldr	r2, [pc, #28]	; (800675c <BSP_LED_On+0x2c>)
 800673e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	4a06      	ldr	r2, [pc, #24]	; (8006760 <BSP_LED_On+0x30>)
 8006746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674a:	2201      	movs	r2, #1
 800674c:	4619      	mov	r1, r3
 800674e:	f003 ffcd 	bl	800a6ec <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000068 	.word	0x20000068
 8006760:	0801f684 	.word	0x0801f684

08006764 <BSP_LED_Off>:
 *            @arg  LED1
 *            @arg  LED2
 * @retval None
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	4a07      	ldr	r2, [pc, #28]	; (8006790 <BSP_LED_Off+0x2c>)
 8006772:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4a06      	ldr	r2, [pc, #24]	; (8006794 <BSP_LED_Off+0x30>)
 800677a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800677e:	2200      	movs	r2, #0
 8006780:	4619      	mov	r1, r3
 8006782:	f003 ffb3 	bl	800a6ec <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20000068 	.word	0x20000068
 8006794:	0801f684 	.word	0x0801f684

08006798 <__io_putchar>:
#ifdef __GNUC__
__weak int __io_putchar(int ch)
#else
__weak int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t*) &ch, 1, COM_POLL_TIMEOUT);
 80067a0:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <__io_putchar+0x30>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	4613      	mov	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4413      	add	r3, r2
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	4a07      	ldr	r2, [pc, #28]	; (80067cc <__io_putchar+0x34>)
 80067b0:	1898      	adds	r0, r3, r2
 80067b2:	1d39      	adds	r1, r7, #4
 80067b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067b8:	2201      	movs	r2, #1
 80067ba:	f00c f855 	bl	8012868 <HAL_UART_Transmit>
  return ch;
 80067be:	687b      	ldr	r3, [r7, #4]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20002c60 	.word	0x20002c60
 80067cc:	20002bd0 	.word	0x20002bd0

080067d0 <Sensor_IO_SPI_CS_Init_All>:
 * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
 * @param  None
 * @retval HAL_StatusTypeDef HAL Status
 */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_IIS2DLPC_CS_GPIO_CLK_ENABLE();
 80067d6:	4b4e      	ldr	r3, [pc, #312]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80067d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067dc:	4a4c      	ldr	r2, [pc, #304]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80067de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067e6:	4b4a      	ldr	r3, [pc, #296]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80067e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	693b      	ldr	r3, [r7, #16]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 80067f4:	4b46      	ldr	r3, [pc, #280]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80067f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fa:	4a45      	ldr	r2, [pc, #276]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006804:	4b42      	ldr	r3, [pc, #264]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006812:	4b3f      	ldr	r3, [pc, #252]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	4a3d      	ldr	r2, [pc, #244]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 800681a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006822:	4b3b      	ldr	r3, [pc, #236]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	68bb      	ldr	r3, [r7, #8]
  BSP_IIS2ICLX_CS_GPIO_CLK_ENABLE();
 8006830:	4b37      	ldr	r3, [pc, #220]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006836:	4a36      	ldr	r2, [pc, #216]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006840:	4b33      	ldr	r3, [pc, #204]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
  BSP_EXT_SPI3_CS_GPIO_CLK_ENABLE();
 800684e:	4b30      	ldr	r3, [pc, #192]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006854:	4a2e      	ldr	r2, [pc, #184]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800685e:	4b2c      	ldr	r3, [pc, #176]	; (8006910 <Sensor_IO_SPI_CS_Init_All+0x140>)
 8006860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(BSP_IIS2DLPC_CS_PORT, BSP_IIS2DLPC_CS_PIN, GPIO_PIN_SET);
 800686c:	2201      	movs	r2, #1
 800686e:	2140      	movs	r1, #64	; 0x40
 8006870:	4828      	ldr	r0, [pc, #160]	; (8006914 <Sensor_IO_SPI_CS_Init_All+0x144>)
 8006872:	f003 ff3b 	bl	800a6ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006876:	2201      	movs	r2, #1
 8006878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800687c:	4826      	ldr	r0, [pc, #152]	; (8006918 <Sensor_IO_SPI_CS_Init_All+0x148>)
 800687e:	f003 ff35 	bl	800a6ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006882:	2201      	movs	r2, #1
 8006884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006888:	4822      	ldr	r0, [pc, #136]	; (8006914 <Sensor_IO_SPI_CS_Init_All+0x144>)
 800688a:	f003 ff2f 	bl	800a6ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS2ICLX_CS_PORT, BSP_IIS2ICLX_CS_PIN, GPIO_PIN_SET);
 800688e:	2201      	movs	r2, #1
 8006890:	2180      	movs	r1, #128	; 0x80
 8006892:	4822      	ldr	r0, [pc, #136]	; (800691c <Sensor_IO_SPI_CS_Init_All+0x14c>)
 8006894:	f003 ff2a 	bl	800a6ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_EXT_SPI3_CS_PORT, BSP_EXT_SPI3_CS_PIN, GPIO_PIN_SET);
 8006898:	2201      	movs	r2, #1
 800689a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800689e:	4820      	ldr	r0, [pc, #128]	; (8006920 <Sensor_IO_SPI_CS_Init_All+0x150>)
 80068a0:	f003 ff24 	bl	800a6ec <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a4:	2300      	movs	r3, #0
 80068a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068ac:	2301      	movs	r3, #1
 80068ae:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = BSP_IIS2DLPC_CS_PIN;
 80068b0:	2340      	movs	r3, #64	; 0x40
 80068b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS2DLPC_CS_PORT, &GPIO_InitStruct);
 80068b4:	f107 0314 	add.w	r3, r7, #20
 80068b8:	4619      	mov	r1, r3
 80068ba:	4816      	ldr	r0, [pc, #88]	; (8006914 <Sensor_IO_SPI_CS_Init_All+0x144>)
 80068bc:	f003 fc60 	bl	800a180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 80068c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 80068c6:	f107 0314 	add.w	r3, r7, #20
 80068ca:	4619      	mov	r1, r3
 80068cc:	4812      	ldr	r0, [pc, #72]	; (8006918 <Sensor_IO_SPI_CS_Init_All+0x148>)
 80068ce:	f003 fc57 	bl	800a180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 80068d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	4619      	mov	r1, r3
 80068de:	480d      	ldr	r0, [pc, #52]	; (8006914 <Sensor_IO_SPI_CS_Init_All+0x144>)
 80068e0:	f003 fc4e 	bl	800a180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_IIS2ICLX_CS_PIN;
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_IIS2ICLX_CS_PORT, &GPIO_InitStruct);
 80068e8:	f107 0314 	add.w	r3, r7, #20
 80068ec:	4619      	mov	r1, r3
 80068ee:	480b      	ldr	r0, [pc, #44]	; (800691c <Sensor_IO_SPI_CS_Init_All+0x14c>)
 80068f0:	f003 fc46 	bl	800a180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BSP_EXT_SPI3_CS_PIN;
 80068f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_EXT_SPI3_CS_PORT, &GPIO_InitStruct);
 80068fa:	f107 0314 	add.w	r3, r7, #20
 80068fe:	4619      	mov	r1, r3
 8006900:	4807      	ldr	r0, [pc, #28]	; (8006920 <Sensor_IO_SPI_CS_Init_All+0x150>)
 8006902:	f003 fc3d 	bl	800a180 <HAL_GPIO_Init>

  return 0;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	46020c00 	.word	0x46020c00
 8006914:	42021c00 	.word	0x42021c00
 8006918:	42021400 	.word	0x42021400
 800691c:	42022000 	.word	0x42022000
 8006920:	42020000 	.word	0x42020000

08006924 <BSP_SPI2_Init>:
 * @brief  Initializes SPI HAL.
 * @retval None
 * @retval BSP status
 */
int32_t BSP_SPI2_Init(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800692a:	2300      	movs	r3, #0
 800692c:	607b      	str	r3, [r7, #4]

  hbusspi2.Instance = SPI2;
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <BSP_SPI2_Init+0x50>)
 8006930:	4a11      	ldr	r2, [pc, #68]	; (8006978 <BSP_SPI2_Init+0x54>)
 8006932:	601a      	str	r2, [r3, #0]
  if(HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 8006934:	480f      	ldr	r0, [pc, #60]	; (8006974 <BSP_SPI2_Init+0x50>)
 8006936:	f00b f9f9 	bl	8011d2c <HAL_SPI_GetState>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <BSP_SPI2_Init+0x34>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI2_MspInit(&hbusspi2);
 8006940:	480c      	ldr	r0, [pc, #48]	; (8006974 <BSP_SPI2_Init+0x50>)
 8006942:	f000 f8ed 	bl	8006b20 <SPI2_MspInit>
      }
    }
#endif   

    /* Init the SPI */
    if(MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8006946:	480b      	ldr	r0, [pc, #44]	; (8006974 <BSP_SPI2_Init+0x50>)
 8006948:	f000 f870 	bl	8006a2c <MX_SPI2_Init>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <BSP_SPI2_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8006952:	f06f 0307 	mvn.w	r3, #7
 8006956:	607b      	str	r3, [r7, #4]
    }
  }

  __HAL_SPI_ENABLE(&hbusspi2);
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <BSP_SPI2_Init+0x50>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <BSP_SPI2_Init+0x50>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  return ret;
 8006968:	687b      	ldr	r3, [r7, #4]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20002c64 	.word	0x20002c64
 8006978:	40003800 	.word	0x40003800

0800697c <BSP_SPI2_DeInit>:
 * @brief  DeInitializes SPI HAL.
 * @retval None
 * @retval BSP status
 */
int32_t BSP_SPI2_DeInit(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8006982:	f06f 0307 	mvn.w	r3, #7
 8006986:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI2_MspDeInit(&hbusspi2);
 8006988:	4807      	ldr	r0, [pc, #28]	; (80069a8 <BSP_SPI2_DeInit+0x2c>)
 800698a:	f000 f925 	bl	8006bd8 <SPI2_MspDeInit>
#endif  

  if(HAL_SPI_DeInit(&hbusspi2) == HAL_OK)
 800698e:	4806      	ldr	r0, [pc, #24]	; (80069a8 <BSP_SPI2_DeInit+0x2c>)
 8006990:	f00a f98e 	bl	8010cb0 <HAL_SPI_DeInit>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <BSP_SPI2_DeInit+0x22>
  {
    ret = BSP_ERROR_NONE;
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800699e:	687b      	ldr	r3, [r7, #4]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20002c64 	.word	0x20002c64

080069ac <BSP_SPI2_Send>:
 * @param  pData: Data
 * @param  len: Length of data in byte
 * @retval BSP status
 */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t len)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80069b8:	f06f 0305 	mvn.w	r3, #5
 80069bc:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80069be:	887a      	ldrh	r2, [r7, #2]
 80069c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	4806      	ldr	r0, [pc, #24]	; (80069e0 <BSP_SPI2_Send+0x34>)
 80069c8:	f00a f99c 	bl	8010d04 <HAL_SPI_Transmit>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_NONE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80069d6:	68fb      	ldr	r3, [r7, #12]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20002c64 	.word	0x20002c64

080069e4 <BSP_SPI2_Recv>:
 * @param  pData: Data
 * @param  len: Length of data in byte
 * @retval BSP status
 */
int32_t BSP_SPI2_Recv(uint8_t *pData, uint16_t len)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80069f0:	f06f 0305 	mvn.w	r3, #5
 80069f4:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80069f6:	887a      	ldrh	r2, [r7, #2]
 80069f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4806      	ldr	r0, [pc, #24]	; (8006a18 <BSP_SPI2_Recv+0x34>)
 8006a00:	f00a fb92 	bl	8011128 <HAL_SPI_Receive>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_NONE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20002c64 	.word	0x20002c64

08006a1c <BSP_GetTick>:
/**
 * @brief  Return system tick in ms
 * @retval Current HAL time base time stamp
 */
int32_t BSP_GetTick(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  return (int32_t) HAL_GetTick();
 8006a20:	f000 fddc 	bl	80075dc <HAL_GetTick>
 8006a24:	4603      	mov	r3, r0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <MX_SPI2_Init>:
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4);
}

/* SPI2 init function */
__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct =
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi->Instance = SPI2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a35      	ldr	r2, [pc, #212]	; (8006b1c <MX_SPI2_Init+0xf0>)
 8006a48:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006a50:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2207      	movs	r2, #7
 8006a5c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a64:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a6c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a74:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006a7c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 0x7;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2207      	movs	r2, #7
 8006a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	659a      	str	r2, [r3, #88]	; 0x58
  hspi->Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
  if(HAL_SPI_Init(hspi) != HAL_OK)
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f009 ffee 	bl	8010ac0 <HAL_SPI_Init>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <MX_SPI2_Init+0xc2>
  {
    ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8006af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006af6:	60fb      	str	r3, [r7, #12]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
  if(HAL_SPIEx_SetConfigAutonomousMode(hspi, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8006afc:	f107 0308 	add.w	r3, r7, #8
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f00b fa23 	bl	8011f4e <HAL_SPIEx_SetConfigAutonomousMode>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <MX_SPI2_Init+0xe6>
  {
    ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40003800 	.word	0x40003800

08006b20 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	; 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable Peripheral clock */
  __HAL_RCC_SPI2_CLK_ENABLE();
 8006b28:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b2e:	4a27      	ldr	r2, [pc, #156]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006b38:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b46:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4c:	4a1f      	ldr	r2, [pc, #124]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b64:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b6a:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b6c:	f043 0308 	orr.w	r3, r3, #8
 8006b70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <SPI2_MspInit+0xac>)
 8006b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	68bb      	ldr	r3, [r7, #8]
   PI1     ------> SPI2_SCK
   PD3     ------> SPI2_MISO
   PI3     ------> SPI2_MOSI
   */

  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8006b82:	230a      	movs	r3, #10
 8006b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b86:	2302      	movs	r3, #2
 8006b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b92:	2305      	movs	r3, #5
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006b96:	f107 0314 	add.w	r3, r7, #20
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	480c      	ldr	r0, [pc, #48]	; (8006bd0 <SPI2_MspInit+0xb0>)
 8006b9e:	f003 faef 	bl	800a180 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006bb2:	2305      	movs	r3, #5
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bb6:	f107 0314 	add.w	r3, r7, #20
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4805      	ldr	r0, [pc, #20]	; (8006bd4 <SPI2_MspInit+0xb4>)
 8006bbe:	f003 fadf 	bl	800a180 <HAL_GPIO_Init>
}
 8006bc2:	bf00      	nop
 8006bc4:	3728      	adds	r7, #40	; 0x28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	46020c00 	.word	0x46020c00
 8006bd0:	42022000 	.word	0x42022000
 8006bd4:	42020c00 	.word	0x42020c00

08006bd8 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef *spiHandle)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);

  /* Peripheral clock disable */
  __HAL_RCC_SPI2_CLK_DISABLE();
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <SPI2_MspDeInit+0x30>)
 8006be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be6:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <SPI2_MspDeInit+0x30>)
 8006be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  /**SPI2 GPIO Configuration
   PI1     ------> SPI2_SCK
   PD3     ------> SPI2_MISO
   PI3     ------> SPI2_MOSI
   */
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1 | GPIO_PIN_3);
 8006bf0:	210a      	movs	r1, #10
 8006bf2:	4806      	ldr	r0, [pc, #24]	; (8006c0c <SPI2_MspDeInit+0x34>)
 8006bf4:	f003 fc9c 	bl	800a530 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 8006bf8:	2108      	movs	r1, #8
 8006bfa:	4805      	ldr	r0, [pc, #20]	; (8006c10 <SPI2_MspDeInit+0x38>)
 8006bfc:	f003 fc98 	bl	800a530 <HAL_GPIO_DeInit>
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	46020c00 	.word	0x46020c00
 8006c0c:	42022000 	.word	0x42022000
 8006c10:	42020c00 	.word	0x42020c00

08006c14 <BSP_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @param  Instance Motion sensor instance
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08e      	sub	sp, #56	; 0x38
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8006c22:	2301      	movs	r3, #1
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	62bb      	str	r3, [r7, #40]	; 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch(Instance)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d131      	bne.n	8006c94 <BSP_MOTION_SENSOR_Init+0x80>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8006c30:	6838      	ldr	r0, [r7, #0]
 8006c32:	f000 f945 	bl	8006ec0 <ISM330DHCX_0_Probe>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <BSP_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c40:	e064      	b.n	8006d0c <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if(MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void*) &cap) != BSP_ERROR_NONE)
 8006c42:	4a34      	ldr	r2, [pc, #208]	; (8006d14 <BSP_MOTION_SENSOR_Init+0x100>)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	4932      	ldr	r1, [pc, #200]	; (8006d18 <BSP_MOTION_SENSOR_Init+0x104>)
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006c54:	f107 010c 	add.w	r1, r7, #12
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <BSP_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006c62:	f06f 0306 	mvn.w	r3, #6
 8006c66:	e051      	b.n	8006d0c <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if(cap.Acc == 1U)
 8006c68:	7b3b      	ldrb	r3, [r7, #12]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d103      	bne.n	8006c76 <BSP_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if(cap.Gyro == 1U)
 8006c76:	7b7b      	ldrb	r3, [r7, #13]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d103      	bne.n	8006c84 <BSP_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if(cap.Magneto == 1U)
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d108      	bne.n	8006c9c <BSP_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	f043 0304 	orr.w	r3, r3, #4
 8006c90:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006c92:	e003      	b.n	8006c9c <BSP_MOTION_SENSOR_Init+0x88>
        component_functions |= MOTION_MAGNETO;
      }
      break;
#endif      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006c94:	f06f 0301 	mvn.w	r3, #1
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006c9a:	e000      	b.n	8006c9e <BSP_MOTION_SENSOR_Init+0x8a>
      break;
 8006c9c:	bf00      	nop
  }

  if(ret != BSP_ERROR_NONE)
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <BSP_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca6:	e031      	b.n	8006d0c <BSP_MOTION_SENSOR_Init+0xf8>
  }

  for(i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cac:	e02a      	b.n	8006d04 <BSP_MOTION_SENSOR_Init+0xf0>
  {
    if(((Functions & function) == function) && ((component_functions & function) == function))
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d11e      	bne.n	8006cf8 <BSP_MOTION_SENSOR_Init+0xe4>
 8006cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d118      	bne.n	8006cf8 <BSP_MOTION_SENSOR_Init+0xe4>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006cc6:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <BSP_MOTION_SENSOR_Init+0x108>)
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006cce:	4814      	ldr	r0, [pc, #80]	; (8006d20 <BSP_MOTION_SENSOR_Init+0x10c>)
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	4413      	add	r3, r2
 8006cd8:	440b      	add	r3, r1
 8006cda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	490d      	ldr	r1, [pc, #52]	; (8006d18 <BSP_MOTION_SENSOR_Init+0x104>)
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <BSP_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006cf2:	f06f 0304 	mvn.w	r3, #4
 8006cf6:	e009      	b.n	8006d0c <BSP_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	633b      	str	r3, [r7, #48]	; 0x30
  for(i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	3301      	adds	r3, #1
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d9d1      	bls.n	8006cae <BSP_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3738      	adds	r7, #56	; 0x38
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20002d04 	.word	0x20002d04
 8006d18:	20002cf4 	.word	0x20002cf4
 8006d1c:	20000070 	.word	0x20000070
 8006d20:	20002cf8 	.word	0x20002cf8

08006d24 <BSP_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <BSP_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006d36:	f06f 0301 	mvn.w	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e029      	b.n	8006d92 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8006d3e:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <BSP_MOTION_SENSOR_GetSensitivity+0x78>)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d11d      	bne.n	8006d8c <BSP_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance], Sensitivity) != BSP_ERROR_NONE)
 8006d50:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <BSP_MOTION_SENSOR_GetSensitivity+0x7c>)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d58:	4812      	ldr	r0, [pc, #72]	; (8006da4 <BSP_MOTION_SENSOR_GetSensitivity+0x80>)
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	440b      	add	r3, r1
 8006d64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	490f      	ldr	r1, [pc, #60]	; (8006da8 <BSP_MOTION_SENSOR_GetSensitivity+0x84>)
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	4610      	mov	r0, r2
 8006d76:	4798      	blx	r3
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <BSP_MOTION_SENSOR_GetSensitivity+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d7e:	f06f 0304 	mvn.w	r3, #4
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e005      	b.n	8006d92 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e002      	b.n	8006d92 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006d8c:	f06f 0301 	mvn.w	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006d92:	697b      	ldr	r3, [r7, #20]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20002d08 	.word	0x20002d08
 8006da0:	20000070 	.word	0x20000070
 8006da4:	20002cf8 	.word	0x20002cf8
 8006da8:	20002cf4 	.word	0x20002cf4

08006dac <BSP_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006dc0:	f06f 0301 	mvn.w	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	e02a      	b.n	8006e1e <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8006dc8:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d11e      	bne.n	8006e18 <BSP_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <BSP_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006de2:	4813      	ldr	r0, [pc, #76]	; (8006e30 <BSP_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4613      	mov	r3, r2
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	4413      	add	r3, r2
 8006dec:	440b      	add	r3, r1
 8006dee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	490f      	ldr	r1, [pc, #60]	; (8006e34 <BSP_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006dfc:	ed97 0a01 	vldr	s0, [r7, #4]
 8006e00:	4610      	mov	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <BSP_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e0a:	f06f 0304 	mvn.w	r3, #4
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e005      	b.n	8006e1e <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	e002      	b.n	8006e1e <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006e18:	f06f 0301 	mvn.w	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006e1e:	697b      	ldr	r3, [r7, #20]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20002d08 	.word	0x20002d08
 8006e2c:	20000070 	.word	0x20000070
 8006e30:	20002cf8 	.word	0x20002cf8
 8006e34:	20002cf4 	.word	0x20002cf4

08006e38 <BSP_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= MOTION_INSTANCES_NBR)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <BSP_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006e4a:	f06f 0301 	mvn.w	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e029      	b.n	8006ea6 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if((MotionCtx[Instance].Functions & Function) == Function)
 8006e52:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <BSP_MOTION_SENSOR_SetFullScale+0x78>)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d11d      	bne.n	8006ea0 <BSP_MOTION_SENSOR_SetFullScale+0x68>
    {
      if(MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8006e64:	4a13      	ldr	r2, [pc, #76]	; (8006eb4 <BSP_MOTION_SENSOR_SetFullScale+0x7c>)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e6c:	4812      	ldr	r0, [pc, #72]	; (8006eb8 <BSP_MOTION_SENSOR_SetFullScale+0x80>)
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4613      	mov	r3, r2
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	4413      	add	r3, r2
 8006e76:	440b      	add	r3, r1
 8006e78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	490f      	ldr	r1, [pc, #60]	; (8006ebc <BSP_MOTION_SENSOR_SetFullScale+0x84>)
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <BSP_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e92:	f06f 0304 	mvn.w	r3, #4
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	e005      	b.n	8006ea6 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e002      	b.n	8006ea6 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006ea0:	f06f 0301 	mvn.w	r3, #1
 8006ea4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20002d08 	.word	0x20002d08
 8006eb4:	20000070 	.word	0x20000070
 8006eb8:	20002cf8 	.word	0x20002cf8
 8006ebc:	20002cf4 	.word	0x20002cf4

08006ec0 <ISM330DHCX_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b092      	sub	sp, #72	; 0x48
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t io_ctx;
  uint8_t id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t cap;
  int32_t ret = BSP_ERROR_NONE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006ecc:	2301      	movs	r3, #1
 8006ece:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address = 0x0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init = BSP_ISM330DHCX_Init;
 8006ed6:	4b47      	ldr	r3, [pc, #284]	; (8006ff4 <ISM330DHCX_0_Probe+0x134>)
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit = BSP_ISM330DHCX_DeInit;
 8006eda:	4b47      	ldr	r3, [pc, #284]	; (8006ff8 <ISM330DHCX_0_Probe+0x138>)
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg = BSP_ISM330DHCX_ReadReg;
 8006ede:	4b47      	ldr	r3, [pc, #284]	; (8006ffc <ISM330DHCX_0_Probe+0x13c>)
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg = BSP_ISM330DHCX_WriteReg;
 8006ee2:	4b47      	ldr	r3, [pc, #284]	; (8007000 <ISM330DHCX_0_Probe+0x140>)
 8006ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick = BSP_GetTick;
 8006ee6:	4b47      	ldr	r3, [pc, #284]	; (8007004 <ISM330DHCX_0_Probe+0x144>)
 8006ee8:	643b      	str	r3, [r7, #64]	; 0x40

  if(ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4845      	ldr	r0, [pc, #276]	; (8007008 <ISM330DHCX_0_Probe+0x148>)
 8006ef2:	f7fd f997 	bl	8004224 <ISM330DHCX_RegisterBusIO>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006efc:	f06f 0306 	mvn.w	r3, #6
 8006f00:	647b      	str	r3, [r7, #68]	; 0x44
 8006f02:	e071      	b.n	8006fe8 <ISM330DHCX_0_Probe+0x128>
  }
  else if(ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8006f04:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006f08:	4619      	mov	r1, r3
 8006f0a:	483f      	ldr	r0, [pc, #252]	; (8007008 <ISM330DHCX_0_Probe+0x148>)
 8006f0c:	f7fd faa4 	bl	8004458 <ISM330DHCX_ReadID>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006f16:	f06f 0306 	mvn.w	r3, #6
 8006f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1c:	e064      	b.n	8006fe8 <ISM330DHCX_0_Probe+0x128>
  }
  else if(id != ISM330DHCX_ID)
 8006f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f22:	2b6b      	cmp	r3, #107	; 0x6b
 8006f24:	d003      	beq.n	8006f2e <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006f26:	f06f 0306 	mvn.w	r3, #6
 8006f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2c:	e05c      	b.n	8006fe8 <ISM330DHCX_0_Probe+0x128>
  }
  else
  {
    (void) ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4619      	mov	r1, r3
 8006f34:	4834      	ldr	r0, [pc, #208]	; (8007008 <ISM330DHCX_0_Probe+0x148>)
 8006f36:	f7fd faa5 	bl	8004484 <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t) cap.Gyro) | ((uint32_t) cap.Acc << 1) | ((uint32_t) cap.Magneto << 2);
 8006f3a:	7a7b      	ldrb	r3, [r7, #9]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	7a3b      	ldrb	r3, [r7, #8]
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	431a      	orrs	r2, r3
 8006f44:	7abb      	ldrb	r3, [r7, #10]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	4a30      	ldr	r2, [pc, #192]	; (800700c <ISM330DHCX_0_Probe+0x14c>)
 8006f4c:	6013      	str	r3, [r2, #0]

    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 8006f4e:	4b30      	ldr	r3, [pc, #192]	; (8007010 <ISM330DHCX_0_Probe+0x150>)
 8006f50:	4a2d      	ldr	r2, [pc, #180]	; (8007008 <ISM330DHCX_0_Probe+0x148>)
 8006f52:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t*) (void*) &ISM330DHCX_COMMON_Driver;
 8006f54:	4b2f      	ldr	r3, [pc, #188]	; (8007014 <ISM330DHCX_0_Probe+0x154>)
 8006f56:	4a30      	ldr	r2, [pc, #192]	; (8007018 <ISM330DHCX_0_Probe+0x158>)
 8006f58:	601a      	str	r2, [r3, #0]

    if(((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d018      	beq.n	8006f96 <ISM330DHCX_0_Probe+0xd6>
 8006f64:	7a3b      	ldrb	r3, [r7, #8]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d115      	bne.n	8006f96 <ISM330DHCX_0_Probe+0xd6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t*) (void*) &ISM330DHCX_ACC_Driver;
 8006f6a:	4b2c      	ldr	r3, [pc, #176]	; (800701c <ISM330DHCX_0_Probe+0x15c>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <ISM330DHCX_0_Probe+0x160>)
 8006f70:	492c      	ldr	r1, [pc, #176]	; (8007024 <ISM330DHCX_0_Probe+0x164>)
 8006f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if(MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006f76:	4b27      	ldr	r3, [pc, #156]	; (8007014 <ISM330DHCX_0_Probe+0x154>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a24      	ldr	r2, [pc, #144]	; (8007010 <ISM330DHCX_0_Probe+0x150>)
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <ISM330DHCX_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f8a:	f06f 0304 	mvn.w	r3, #4
 8006f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f90:	e001      	b.n	8006f96 <ISM330DHCX_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }

    if(((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d018      	beq.n	8006fd2 <ISM330DHCX_0_Probe+0x112>
 8006fa0:	7a7b      	ldrb	r3, [r7, #9]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d115      	bne.n	8006fd2 <ISM330DHCX_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t*) (void*) &ISM330DHCX_GYRO_Driver;
 8006fa6:	4b1d      	ldr	r3, [pc, #116]	; (800701c <ISM330DHCX_0_Probe+0x15c>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <ISM330DHCX_0_Probe+0x160>)
 8006fac:	491e      	ldr	r1, [pc, #120]	; (8007028 <ISM330DHCX_0_Probe+0x168>)
 8006fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if(MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006fb2:	4b18      	ldr	r3, [pc, #96]	; (8007014 <ISM330DHCX_0_Probe+0x154>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a15      	ldr	r2, [pc, #84]	; (8007010 <ISM330DHCX_0_Probe+0x150>)
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <ISM330DHCX_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fc6:	f06f 0304 	mvn.w	r3, #4
 8006fca:	647b      	str	r3, [r7, #68]	; 0x44
 8006fcc:	e001      	b.n	8006fd2 <ISM330DHCX_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if(((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 0U))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <ISM330DHCX_0_Probe+0x128>
 8006fdc:	7abb      	ldrb	r3, [r7, #10]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <ISM330DHCX_0_Probe+0x128>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fe2:	f06f 0304 	mvn.w	r3, #4
 8006fe6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3748      	adds	r7, #72	; 0x48
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	0800702d 	.word	0x0800702d
 8006ff8:	08007145 	.word	0x08007145
 8006ffc:	080071d1 	.word	0x080071d1
 8007000:	08007169 	.word	0x08007169
 8007004:	08006a1d 	.word	0x08006a1d
 8007008:	20002d0c 	.word	0x20002d0c
 800700c:	20002d08 	.word	0x20002d08
 8007010:	20002cf4 	.word	0x20002cf4
 8007014:	20002d04 	.word	0x20002d04
 8007018:	20000010 	.word	0x20000010
 800701c:	20000070 	.word	0x20000070
 8007020:	20002cf8 	.word	0x20002cf8
 8007024:	20000020 	.word	0x20000020
 8007028:	20000044 	.word	0x20000044

0800702c <BSP_ISM330DHCX_Init>:

static int32_t BSP_ISM330DHCX_Init(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	; 0x28
 8007030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007032:	f06f 0305 	mvn.w	r3, #5
 8007036:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure ISM330DHCX INT1 pin */
  BSP_ISM330DHCX_INT1_GPIO_CLK_ENABLE();
 8007038:	4b3d      	ldr	r3, [pc, #244]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 800703a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800703e:	4a3c      	ldr	r2, [pc, #240]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 8007040:	f043 0302 	orr.w	r3, r3, #2
 8007044:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007048:	4b39      	ldr	r3, [pc, #228]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 800704a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT1_PIN;
 8007056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800705a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800705c:	4b35      	ldr	r3, [pc, #212]	; (8007134 <BSP_ISM330DHCX_Init+0x108>)
 800705e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007060:	2302      	movs	r3, #2
 8007062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT1_PORT, &GPIO_InitStruct);
 8007068:	f107 0310 	add.w	r3, r7, #16
 800706c:	4619      	mov	r1, r3
 800706e:	4832      	ldr	r0, [pc, #200]	; (8007138 <BSP_ISM330DHCX_Init+0x10c>)
 8007070:	f003 f886 	bl	800a180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT1_EXTI_IRQn, BSP_ISM330DHCX_INT1_EXTI_IRQ_PP, BSP_ISM330DHCX_INT1_EXTI_IRQ_SP);
 8007074:	2200      	movs	r2, #0
 8007076:	2101      	movs	r1, #1
 8007078:	2013      	movs	r0, #19
 800707a:	f000 ff90 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT1_EXTI_IRQn);
 800707e:	2013      	movs	r0, #19
 8007080:	f000 ffa7 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  /* Configure ISM330DHCX INT2 pin */
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8007084:	4b2a      	ldr	r3, [pc, #168]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 8007086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708a:	4a29      	ldr	r2, [pc, #164]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 800708c:	f043 0320 	orr.w	r3, r3, #32
 8007090:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007094:	4b26      	ldr	r3, [pc, #152]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 8007096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 80070a2:	2310      	movs	r3, #16
 80070a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80070a6:	4b23      	ldr	r3, [pc, #140]	; (8007134 <BSP_ISM330DHCX_Init+0x108>)
 80070a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070aa:	2302      	movs	r3, #2
 80070ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 80070b2:	f107 0310 	add.w	r3, r7, #16
 80070b6:	4619      	mov	r1, r3
 80070b8:	4820      	ldr	r0, [pc, #128]	; (800713c <BSP_ISM330DHCX_Init+0x110>)
 80070ba:	f003 f861 	bl	800a180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 80070be:	2200      	movs	r2, #0
 80070c0:	2101      	movs	r1, #1
 80070c2:	200f      	movs	r0, #15
 80070c4:	f000 ff6b 	bl	8007f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 80070c8:	200f      	movs	r0, #15
 80070ca:	f000 ff82 	bl	8007fd2 <HAL_NVIC_EnableIRQ>

  /* Configure ISM330DHCX CS pin */
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 80070d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d4:	4a16      	ldr	r2, [pc, #88]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 80070d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070de:	4b14      	ldr	r3, [pc, #80]	; (8007130 <BSP_ISM330DHCX_Init+0x104>)
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80070ec:	2201      	movs	r2, #1
 80070ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070f2:	4813      	ldr	r0, [pc, #76]	; (8007140 <BSP_ISM330DHCX_Init+0x114>)
 80070f4:	f003 fafa 	bl	800a6ec <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070f8:	2302      	movs	r3, #2
 80070fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007100:	2301      	movs	r3, #1
 8007102:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8007104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007108:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 800710a:	f107 0310 	add.w	r3, r7, #16
 800710e:	4619      	mov	r1, r3
 8007110:	480b      	ldr	r0, [pc, #44]	; (8007140 <BSP_ISM330DHCX_Init+0x114>)
 8007112:	f003 f835 	bl	800a180 <HAL_GPIO_Init>

  if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 8007116:	f7ff fc05 	bl	8006924 <BSP_SPI2_Init>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <BSP_ISM330DHCX_Init+0xf8>
  {
    ret = BSP_ERROR_NONE;
 8007120:	2300      	movs	r3, #0
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007126:	4618      	mov	r0, r3
 8007128:	3728      	adds	r7, #40	; 0x28
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	46020c00 	.word	0x46020c00
 8007134:	10110000 	.word	0x10110000
 8007138:	42020400 	.word	0x42020400
 800713c:	42021400 	.word	0x42021400
 8007140:	42021c00 	.word	0x42021c00

08007144 <BSP_ISM330DHCX_DeInit>:

static int32_t BSP_ISM330DHCX_DeInit(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800714a:	f06f 0305 	mvn.w	r3, #5
 800714e:	607b      	str	r3, [r7, #4]

  if(BSP_SPI2_DeInit() == BSP_ERROR_NONE)
 8007150:	f7ff fc14 	bl	800697c <BSP_SPI2_DeInit>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <BSP_ISM330DHCX_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800715a:	2300      	movs	r3, #0
 800715c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800715e:	687b      	ldr	r3, [r7, #4]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <BSP_ISM330DHCX_WriteReg>:

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60ba      	str	r2, [r7, #8]
 8007170:	461a      	mov	r2, r3
 8007172:	4603      	mov	r3, r0
 8007174:	81fb      	strh	r3, [r7, #14]
 8007176:	460b      	mov	r3, r1
 8007178:	81bb      	strh	r3, [r7, #12]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t) Reg;
 8007182:	89bb      	ldrh	r3, [r7, #12]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8007188:	2200      	movs	r2, #0
 800718a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800718e:	480f      	ldr	r0, [pc, #60]	; (80071cc <BSP_ISM330DHCX_WriteReg+0x64>)
 8007190:	f003 faac 	bl	800a6ec <HAL_GPIO_WritePin>

  ret = BSP_SPI2_Send(&dataReg, 1);
 8007194:	f107 0313 	add.w	r3, r7, #19
 8007198:	2101      	movs	r1, #1
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fc06 	bl	80069ac <BSP_SPI2_Send>
 80071a0:	6178      	str	r0, [r7, #20]

  if(ret == BSP_ERROR_NONE)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <BSP_ISM330DHCX_WriteReg+0x4c>
  {
    ret = BSP_SPI2_Send(pdata, len);
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	4619      	mov	r1, r3
 80071ac:	68b8      	ldr	r0, [r7, #8]
 80071ae:	f7ff fbfd 	bl	80069ac <BSP_SPI2_Send>
 80071b2:	6178      	str	r0, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80071b4:	2201      	movs	r2, #1
 80071b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071ba:	4804      	ldr	r0, [pc, #16]	; (80071cc <BSP_ISM330DHCX_WriteReg+0x64>)
 80071bc:	f003 fa96 	bl	800a6ec <HAL_GPIO_WritePin>

  return ret;
 80071c0:	697b      	ldr	r3, [r7, #20]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	42021c00 	.word	0x42021c00

080071d0 <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60ba      	str	r2, [r7, #8]
 80071d8:	461a      	mov	r2, r3
 80071da:	4603      	mov	r3, r0
 80071dc:	81fb      	strh	r3, [r7, #14]
 80071de:	460b      	mov	r3, r1
 80071e0:	81bb      	strh	r3, [r7, #12]
 80071e2:	4613      	mov	r3, r2
 80071e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t) Reg;
 80071ea:	89bb      	ldrh	r3, [r7, #12]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80U;
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80071fa:	2200      	movs	r2, #0
 80071fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007200:	480e      	ldr	r0, [pc, #56]	; (800723c <BSP_ISM330DHCX_ReadReg+0x6c>)
 8007202:	f003 fa73 	bl	800a6ec <HAL_GPIO_WritePin>

  ret = BSP_SPI2_Send(&dataReg, 1);
 8007206:	f107 0313 	add.w	r3, r7, #19
 800720a:	2101      	movs	r1, #1
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff fbcd 	bl	80069ac <BSP_SPI2_Send>
 8007212:	6178      	str	r0, [r7, #20]

  if(ret == BSP_ERROR_NONE)
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d105      	bne.n	8007226 <BSP_ISM330DHCX_ReadReg+0x56>
  {
    ret = BSP_SPI2_Recv(pdata, len);
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	4619      	mov	r1, r3
 800721e:	68b8      	ldr	r0, [r7, #8]
 8007220:	f7ff fbe0 	bl	80069e4 <BSP_SPI2_Recv>
 8007224:	6178      	str	r0, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8007226:	2201      	movs	r2, #1
 8007228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800722c:	4803      	ldr	r0, [pc, #12]	; (800723c <BSP_ISM330DHCX_ReadReg+0x6c>)
 800722e:	f003 fa5d 	bl	800a6ec <HAL_GPIO_WritePin>

  return ret;
 8007232:	697b      	ldr	r3, [r7, #20]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	42021c00 	.word	0x42021c00

08007240 <BSP_MOTION_SENSOR_FIFO_Set_BDR>:
 * @param  Instance the device instance
 * @param  Odr FIFO ODR value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  switch(Instance)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d133      	bne.n	80072bc <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x7c>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d012      	beq.n	8007284 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x44>
      {
        if(ISM330DHCX_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 800725e:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007266:	ed97 0a01 	vldr	s0, [r7, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	f7fd fdc2 	bl	8004df4 <ISM330DHCX_FIFO_ACC_Set_BDR>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x3e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007276:	f06f 0304 	mvn.w	r3, #4
 800727a:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 800727c:	e022      	b.n	80072c4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
          ret = BSP_ERROR_NONE;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]
      break;
 8007282:	e01f      	b.n	80072c4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
      else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d012      	beq.n	80072b4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x74>
        if(ISM330DHCX_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 800728e:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007296:	ed97 0a01 	vldr	s0, [r7, #4]
 800729a:	4618      	mov	r0, r3
 800729c:	f7fd fe36 	bl	8004f0c <ISM330DHCX_FIFO_GYRO_Set_BDR>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x6e>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80072a6:	f06f 0304 	mvn.w	r3, #4
 80072aa:	617b      	str	r3, [r7, #20]
      break;
 80072ac:	e00a      	b.n	80072c4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
          ret = BSP_ERROR_NONE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
      break;
 80072b2:	e007      	b.n	80072c4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
        ret = BSP_ERROR_WRONG_PARAM;
 80072b4:	f06f 0301 	mvn.w	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
      break;
 80072ba:	e003      	b.n	80072c4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80072bc:	f06f 0301 	mvn.w	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
      break;
 80072c2:	bf00      	nop
  }

  return ret;
 80072c4:	697b      	ldr	r3, [r7, #20]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20002cf4 	.word	0x20002cf4

080072d4 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d112      	bne.n	800730c <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 80072e6:	4a0e      	ldr	r2, [pc, #56]	; (8007320 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	4611      	mov	r1, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd fe96 	bl	8005024 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80072fe:	f06f 0304 	mvn.w	r3, #4
 8007302:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007304:	e006      	b.n	8007314 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
        ret = BSP_ERROR_NONE;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
      break;
 800730a:	e003      	b.n	8007314 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif      

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800730c:	f06f 0301 	mvn.w	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
      break;
 8007312:	bf00      	nop
  }

  return ret;
 8007314:	68fb      	ldr	r3, [r7, #12]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20002cf4 	.word	0x20002cf4

08007324 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch(Instance)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d112      	bne.n	800735c <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
      break;
#endif 

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 8007336:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800733e:	887a      	ldrh	r2, [r7, #2]
 8007340:	4611      	mov	r1, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f7fd fe9f 	bl	8005086 <ISM330DHCX_FIFO_Set_Watermark_Level>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800734e:	f06f 0304 	mvn.w	r3, #4
 8007352:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007354:	e006      	b.n	8007364 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
        ret = BSP_ERROR_NONE;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
      break;
 800735a:	e003      	b.n	8007364 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800735c:	f06f 0301 	mvn.w	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
      break;
 8007362:	bf00      	nop
  }

  return ret;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20002cf4 	.word	0x20002cf4

08007374 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d112      	bne.n	80073ac <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8007386:	4a0e      	ldr	r2, [pc, #56]	; (80073c0 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	4611      	mov	r1, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd fe8f 	bl	80050b6 <ISM330DHCX_FIFO_Set_Stop_On_Fth>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800739e:	f06f 0304 	mvn.w	r3, #4
 80073a2:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80073a4:	e006      	b.n	80073b4 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
        ret = BSP_ERROR_NONE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
      break;
 80073aa:	e003      	b.n	80073b4 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif 

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80073ac:	f06f 0301 	mvn.w	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
      break;
 80073b2:	bf00      	nop
  }

  return ret;
 80073b4:	68fb      	ldr	r3, [r7, #12]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20002cf4 	.word	0x20002cf4

080073c4 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>:
 *         - MOTION_GYRO or MOTION_ACCELERO
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Get_Data_Word(uint32_t Instance, uint32_t Function, int16_t *Data)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch(Instance)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d131      	bne.n	800743a <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x76>
  {
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d011      	beq.n	8007404 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x40>
      {
        if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 80073e0:	4a1a      	ldr	r2, [pc, #104]	; (800744c <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd feca 	bl	8005184 <ISM330DHCX_FIFO_Get_Data_Word>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x3a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80073f6:	f06f 0304 	mvn.w	r3, #4
 80073fa:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 80073fc:	e021      	b.n	8007442 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
      break;
 8007402:	e01e      	b.n	8007442 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
      else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d011      	beq.n	8007432 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x6e>
        if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 800740e:	4a0f      	ldr	r2, [pc, #60]	; (800744c <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	f7fd feb3 	bl	8005184 <ISM330DHCX_FIFO_Get_Data_Word>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x68>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007424:	f06f 0304 	mvn.w	r3, #4
 8007428:	617b      	str	r3, [r7, #20]
      break;
 800742a:	e00a      	b.n	8007442 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
      break;
 8007430:	e007      	b.n	8007442 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
        ret = BSP_ERROR_WRONG_PARAM;
 8007432:	f06f 0301 	mvn.w	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
      break;
 8007438:	e003      	b.n	8007442 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800743a:	f06f 0301 	mvn.w	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
      break;
 8007440:	bf00      	nop
  }

  return ret;
 8007442:	697b      	ldr	r3, [r7, #20]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20002cf4 	.word	0x20002cf4

08007450 <BSP_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch(Instance)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d112      	bne.n	8007488 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x38>
      break;
#endif   

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8007462:	4a0e      	ldr	r2, [pc, #56]	; (800749c <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800746a:	78fa      	ldrb	r2, [r7, #3]
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f7fd fe39 	bl	80050e6 <ISM330DHCX_FIFO_Set_Mode>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800747a:	f06f 0304 	mvn.w	r3, #4
 800747e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007480:	e006      	b.n	8007490 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
      break;
 8007486:	e003      	b.n	8007490 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007488:	f06f 0301 	mvn.w	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
      break;
 800748e:	bf00      	nop
  }

  return ret;
 8007490:	68fb      	ldr	r3, [r7, #12]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20002cf4 	.word	0x20002cf4

080074a0 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples>:
 * @param  Instance the device instance
 * @param  NumSamples number of unread FIFO samples
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Get_Num_Samples(uint32_t Instance, uint16_t *NumSamples)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch(Instance)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d111      	bne.n	80074d4 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x34>
      break;
#endif

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if(ISM330DHCX_FIFO_Get_Num_Samples(MotionCompObj[Instance], NumSamples) != BSP_ERROR_NONE)
 80074b0:	4a0d      	ldr	r2, [pc, #52]	; (80074e8 <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x48>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fd fc84 	bl	8004dc8 <ISM330DHCX_FIFO_Get_Num_Samples>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80074c6:	f06f 0304 	mvn.w	r3, #4
 80074ca:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80074cc:	e006      	b.n	80074dc <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
        ret = BSP_ERROR_NONE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
      break;
 80074d2:	e003      	b.n	80074dc <BSP_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80074d4:	f06f 0301 	mvn.w	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
      break;
 80074da:	bf00      	nop
  }

  return ret;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20002cf4 	.word	0x20002cf4

080074ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074f0:	4b11      	ldr	r3, [pc, #68]	; (8007538 <HAL_Init+0x4c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a10      	ldr	r2, [pc, #64]	; (8007538 <HAL_Init+0x4c>)
 80074f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074fc:	2003      	movs	r0, #3
 80074fe:	f000 fd43 	bl	8007f88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007502:	f006 f88b 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 8007506:	4602      	mov	r2, r0
 8007508:	4b0c      	ldr	r3, [pc, #48]	; (800753c <HAL_Init+0x50>)
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	490b      	ldr	r1, [pc, #44]	; (8007540 <HAL_Init+0x54>)
 8007512:	5ccb      	ldrb	r3, [r1, r3]
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
 8007518:	4a0a      	ldr	r2, [pc, #40]	; (8007544 <HAL_Init+0x58>)
 800751a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800751c:	200f      	movs	r0, #15
 800751e:	f000 f813 	bl	8007548 <HAL_InitTick>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e002      	b.n	8007532 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800752c:	f7fb f858 	bl	80025e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	40022000 	.word	0x40022000
 800753c:	46020c00 	.word	0x46020c00
 8007540:	0801f62c 	.word	0x0801f62c
 8007544:	2000000c 	.word	0x2000000c

08007548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8007550:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <HAL_InitTick+0x60>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e021      	b.n	80075a0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800755c:	4b13      	ldr	r3, [pc, #76]	; (80075ac <HAL_InitTick+0x64>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <HAL_InitTick+0x60>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	4619      	mov	r1, r3
 8007566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800756a:	fbb3 f3f1 	udiv	r3, r3, r1
 800756e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fd49 	bl	800800a <HAL_SYSTICK_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e00e      	b.n	80075a0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b0f      	cmp	r3, #15
 8007586:	d80a      	bhi.n	800759e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007588:	2200      	movs	r2, #0
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	f000 fd05 	bl	8007f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007594:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <HAL_InitTick+0x68>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e000      	b.n	80075a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000088 	.word	0x20000088
 80075ac:	2000000c 	.word	0x2000000c
 80075b0:	20000084 	.word	0x20000084

080075b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80075b8:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <HAL_IncTick+0x20>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <HAL_IncTick+0x24>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4413      	add	r3, r2
 80075c4:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <HAL_IncTick+0x24>)
 80075c6:	6013      	str	r3, [r2, #0]
}
 80075c8:	bf00      	nop
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000088 	.word	0x20000088
 80075d8:	20002d3c 	.word	0x20002d3c

080075dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  return uwTick;
 80075e0:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <HAL_GetTick+0x14>)
 80075e2:	681b      	ldr	r3, [r3, #0]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20002d3c 	.word	0x20002d3c

080075f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800762c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	2a00      	cmp	r2, #0
 8007644:	d002      	beq.n	800764c <LL_ADC_SetGainCompensation+0x32>
 8007646:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800764a:	e000      	b.n	800764e <LL_ADC_SetGainCompensation+0x34>
 800764c:	2200      	movs	r2, #0
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2107      	movs	r1, #7
 8007678:	fa01 f303 	lsl.w	r3, r1, r3
 800767c:	43db      	mvns	r3, r3
 800767e:	401a      	ands	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	fa01 f303 	lsl.w	r3, r1, r3
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80076ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6093      	str	r3, [r2, #8]
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d6:	d101      	bne.n	80076dc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80076fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80076fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	609a      	str	r2, [r3, #8]
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007726:	d101      	bne.n	800772c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <LL_ADC_IsEnabled+0x18>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <LL_ADC_IsEnabled+0x1a>
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b04      	cmp	r3, #4
 8007772:	d101      	bne.n	8007778 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b08      	cmp	r3, #8
 8007798:	d101      	bne.n	800779e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	; 0x28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e2e3      	b.n	8007d94 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a92      	ldr	r2, [pc, #584]	; (8007a24 <HAL_ADC_Init+0x278>)
 80077da:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7fa ff15 	bl	8002614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff ff60 	bl	80076c2 <LL_ADC_IsDeepPowerDownEnabled>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff ff46 	bl	800769e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff ff7b 	bl	8007712 <LL_ADC_IsInternalRegulatorEnabled>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d115      	bne.n	800784e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff ff5f 	bl	80076ea <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800782c:	4b7e      	ldr	r3, [pc, #504]	; (8007a28 <HAL_ADC_Init+0x27c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	099b      	lsrs	r3, r3, #6
 8007832:	4a7e      	ldr	r2, [pc, #504]	; (8007a2c <HAL_ADC_Init+0x280>)
 8007834:	fba2 2303 	umull	r2, r3, r2, r3
 8007838:	099b      	lsrs	r3, r3, #6
 800783a:	3301      	adds	r3, #1
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007840:	e002      	b.n	8007848 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	3b01      	subs	r3, #1
 8007846:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f9      	bne.n	8007842 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff ff5d 	bl	8007712 <LL_ADC_IsInternalRegulatorEnabled>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10e      	bne.n	800787c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007862:	f043 0210 	orr.w	r2, r3, #16
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786e:	f043 0201 	orr.w	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff ff6d 	bl	8007760 <LL_ADC_REG_IsConversionOngoing>
 8007886:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	f040 8274 	bne.w	8007d7e <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 8270 	bne.w	8007d7e <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80078a6:	f043 0202 	orr.w	r2, r3, #2
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff ff41 	bl	800773a <LL_ADC_IsEnabled>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d14e      	bne.n	800795c <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a58      	ldr	r2, [pc, #352]	; (8007a24 <HAL_ADC_Init+0x278>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d028      	beq.n	800791a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a58      	ldr	r2, [pc, #352]	; (8007a30 <HAL_ADC_Init+0x284>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d109      	bne.n	80078e6 <HAL_ADC_Init+0x13a>
 80078d2:	4857      	ldr	r0, [pc, #348]	; (8007a30 <HAL_ADC_Init+0x284>)
 80078d4:	f7ff ff31 	bl	800773a <LL_ADC_IsEnabled>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bf0c      	ite	eq
 80078de:	2301      	moveq	r3, #1
 80078e0:	2300      	movne	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	e008      	b.n	80078f8 <HAL_ADC_Init+0x14c>
 80078e6:	484f      	ldr	r0, [pc, #316]	; (8007a24 <HAL_ADC_Init+0x278>)
 80078e8:	f7ff ff27 	bl	800773a <LL_ADC_IsEnabled>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf0c      	ite	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	2300      	movne	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d02f      	beq.n	800795c <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a4b      	ldr	r2, [pc, #300]	; (8007a30 <HAL_ADC_Init+0x284>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d101      	bne.n	800790a <HAL_ADC_Init+0x15e>
 8007906:	4a4b      	ldr	r2, [pc, #300]	; (8007a34 <HAL_ADC_Init+0x288>)
 8007908:	e000      	b.n	800790c <HAL_ADC_Init+0x160>
 800790a:	4a4b      	ldr	r2, [pc, #300]	; (8007a38 <HAL_ADC_Init+0x28c>)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f7ff fe6e 	bl	80075f4 <LL_ADC_SetCommonClock>
 8007918:	e020      	b.n	800795c <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f023 010c 	bic.w	r1, r3, #12
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800792c:	4293      	cmp	r3, r2
 800792e:	d005      	beq.n	800793c <HAL_ADC_Init+0x190>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	3b01      	subs	r3, #1
 8007936:	f003 030c 	and.w	r3, r3, #12
 800793a:	e000      	b.n	800793e <HAL_ADC_Init+0x192>
 800793c:	230c      	movs	r3, #12
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	430b      	orrs	r3, r1
 8007944:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8007946:	4b3c      	ldr	r3, [pc, #240]	; (8007a38 <HAL_ADC_Init+0x28c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007956:	4938      	ldr	r1, [pc, #224]	; (8007a38 <HAL_ADC_Init+0x28c>)
 8007958:	4313      	orrs	r3, r2
 800795a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a30      	ldr	r2, [pc, #192]	; (8007a24 <HAL_ADC_Init+0x278>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d010      	beq.n	8007988 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800796c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007972:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8007978:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007980:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8007982:	4313      	orrs	r3, r2
 8007984:	623b      	str	r3, [r7, #32]
 8007986:	e030      	b.n	80079ea <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7f1b      	ldrb	r3, [r3, #28]
 800798c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007994:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007996:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800799c:	2a00      	cmp	r2, #0
 800799e:	d002      	beq.n	80079a6 <HAL_ADC_Init+0x1fa>
 80079a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80079a4:	e000      	b.n	80079a8 <HAL_ADC_Init+0x1fc>
 80079a6:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80079a8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80079ae:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da04      	bge.n	80079c2 <HAL_ADC_Init+0x216>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079c0:	e001      	b.n	80079c6 <HAL_ADC_Init+0x21a>
 80079c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80079c6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4918      	ldr	r1, [pc, #96]	; (8007a30 <HAL_ADC_Init+0x284>)
 80079ce:	428b      	cmp	r3, r1
 80079d0:	d103      	bne.n	80079da <HAL_ADC_Init+0x22e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079d8:	e003      	b.n	80079e2 <HAL_ADC_Init+0x236>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079e0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80079e2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80079e4:	6a3a      	ldr	r2, [r7, #32]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d12f      	bne.n	8007a54 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <HAL_ADC_Init+0x278>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	3b01      	subs	r3, #1
 8007a04:	045b      	lsls	r3, r3, #17
 8007a06:	6a3a      	ldr	r2, [r7, #32]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	623b      	str	r3, [r7, #32]
 8007a0c:	e022      	b.n	8007a54 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d111      	bne.n	8007a3c <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a1e:	623b      	str	r3, [r7, #32]
 8007a20:	e018      	b.n	8007a54 <HAL_ADC_Init+0x2a8>
 8007a22:	bf00      	nop
 8007a24:	46021000 	.word	0x46021000
 8007a28:	2000000c 	.word	0x2000000c
 8007a2c:	053e2d63 	.word	0x053e2d63
 8007a30:	42028000 	.word	0x42028000
 8007a34:	42028308 	.word	0x42028308
 8007a38:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a40:	f043 0220 	orr.w	r2, r3, #32
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4c:	f043 0201 	orr.w	r2, r3, #1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a93      	ldr	r2, [pc, #588]	; (8007ca8 <HAL_ADC_Init+0x4fc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d018      	beq.n	8007a90 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	4313      	orrs	r3, r2
 8007a74:	6a3a      	ldr	r2, [r7, #32]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	4b8a      	ldr	r3, [pc, #552]	; (8007cac <HAL_ADC_Init+0x500>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6812      	ldr	r2, [r2, #0]
 8007a88:	6a39      	ldr	r1, [r7, #32]
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	60d3      	str	r3, [r2, #12]
 8007a8e:	e033      	b.n	8007af8 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d009      	beq.n	8007aac <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	6a3a      	ldr	r2, [r7, #32]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8007ab6:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	6a39      	ldr	r1, [r7, #32]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d008      	beq.n	8007ade <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a6a      	ldr	r2, [pc, #424]	; (8007ca8 <HAL_ADC_Init+0x4fc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	f000 8093 	beq.w	8007c2a <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fe29 	bl	8007760 <LL_ADC_REG_IsConversionOngoing>
 8007b0e:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff fe36 	bl	8007786 <LL_ADC_INJ_IsConversionOngoing>
 8007b1a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d161      	bne.n	8007be6 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d15e      	bne.n	8007be6 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7f1b      	ldrb	r3, [r3, #28]
 8007b2c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	495f      	ldr	r1, [pc, #380]	; (8007cb0 <HAL_ADC_Init+0x504>)
 8007b34:	428b      	cmp	r3, r1
 8007b36:	d102      	bne.n	8007b3e <HAL_ADC_Init+0x392>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	e002      	b.n	8007b44 <HAL_ADC_Init+0x398>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007b44:	4313      	orrs	r3, r2
 8007b46:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	6a39      	ldr	r1, [r7, #32]
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7ff fd51 	bl	800761a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d11e      	bne.n	8007bc0 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b86:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	4b49      	ldr	r3, [pc, #292]	; (8007cb4 <HAL_ADC_Init+0x508>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b96:	0411      	lsls	r1, r2, #16
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b9c:	4311      	orrs	r1, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8007ba2:	4311      	orrs	r1, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007ba8:	4311      	orrs	r1, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007bae:	0892      	lsrs	r2, r2, #2
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0201 	orr.w	r2, r2, #1
 8007bbc:	611a      	str	r2, [r3, #16]
 8007bbe:	e007      	b.n	8007bd0 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10c      	bne.n	8007c08 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	f023 010f 	bic.w	r1, r3, #15
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	1e5a      	subs	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
 8007c06:	e007      	b.n	8007c18 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 020f 	bic.w	r2, r2, #15
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1c:	f023 0303 	bic.w	r3, r3, #3
 8007c20:	f043 0201 	orr.w	r2, r3, #1
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007c28:	e0b2      	b.n	8007d90 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8007c32:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8007c38:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8007c3e:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d103      	bne.n	8007c58 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f043 0301 	orr.w	r3, r3, #1
 8007c56:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <HAL_ADC_Init+0x50c>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	69f9      	ldr	r1, [r7, #28]
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c74:	461a      	mov	r2, r3
 8007c76:	2100      	movs	r1, #0
 8007c78:	f7ff fcf2 	bl	8007660 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c84:	461a      	mov	r2, r3
 8007c86:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8007c8a:	f7ff fce9 	bl	8007660 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d112      	bne.n	8007cbc <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f062 020f 	orn	r2, r2, #15
 8007ca4:	629a      	str	r2, [r3, #40]	; 0x28
 8007ca6:	e044      	b.n	8007d32 <HAL_ADC_Init+0x586>
 8007ca8:	46021000 	.word	0x46021000
 8007cac:	fff0c013 	.word	0xfff0c013
 8007cb0:	42028000 	.word	0x42028000
 8007cb4:	fc00f81e 	.word	0xfc00f81e
 8007cb8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cc4:	d135      	bne.n	8007d32 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	e00d      	b.n	8007ce8 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	2b0f      	cmp	r3, #15
 8007ce0:	d006      	beq.n	8007cf0 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b07      	cmp	r3, #7
 8007cec:	d9ee      	bls.n	8007ccc <HAL_ADC_Init+0x520>
 8007cee:	e000      	b.n	8007cf2 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8007cf0:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d108      	bne.n	8007d0a <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f062 020f 	orn	r2, r2, #15
 8007d06:	629a      	str	r2, [r3, #40]	; 0x28
 8007d08:	e013      	b.n	8007d32 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	3b01      	subs	r3, #1
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	f003 031c 	and.w	r3, r3, #28
 8007d1c:	f06f 020f 	mvn.w	r2, #15
 8007d20:	fa02 f103 	lsl.w	r1, r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	4b18      	ldr	r3, [pc, #96]	; (8007d9c <HAL_ADC_Init+0x5f0>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d10b      	bne.n	8007d5a <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4c:	f023 0303 	bic.w	r3, r3, #3
 8007d50:	f043 0201 	orr.w	r2, r3, #1
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007d58:	e01a      	b.n	8007d90 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d5e:	f023 0312 	bic.w	r3, r3, #18
 8007d62:	f043 0210 	orr.w	r2, r3, #16
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	f043 0201 	orr.w	r2, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8007d7c:	e008      	b.n	8007d90 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d82:	f043 0210 	orr.w	r2, r3, #16
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8007d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3728      	adds	r7, #40	; 0x28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	833ffff3 	.word	0x833ffff3

08007da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007db0:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <__NVIC_SetPriorityGrouping+0x44>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dd2:	4a04      	ldr	r2, [pc, #16]	; (8007de4 <__NVIC_SetPriorityGrouping+0x44>)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	60d3      	str	r3, [r2, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	e000ed00 	.word	0xe000ed00

08007de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007dec:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <__NVIC_GetPriorityGrouping+0x18>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	0a1b      	lsrs	r3, r3, #8
 8007df2:	f003 0307 	and.w	r3, r3, #7
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	e000ed00 	.word	0xe000ed00

08007e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	db0b      	blt.n	8007e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	f003 021f 	and.w	r2, r3, #31
 8007e1c:	4907      	ldr	r1, [pc, #28]	; (8007e3c <__NVIC_EnableIRQ+0x38>)
 8007e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	2001      	movs	r0, #1
 8007e26:	fa00 f202 	lsl.w	r2, r0, r2
 8007e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	e000e100 	.word	0xe000e100

08007e40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	db12      	blt.n	8007e78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	f003 021f 	and.w	r2, r3, #31
 8007e58:	490a      	ldr	r1, [pc, #40]	; (8007e84 <__NVIC_DisableIRQ+0x44>)
 8007e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	2001      	movs	r0, #1
 8007e62:	fa00 f202 	lsl.w	r2, r0, r2
 8007e66:	3320      	adds	r3, #32
 8007e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007e6c:	f3bf 8f4f 	dsb	sy
}
 8007e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e72:	f3bf 8f6f 	isb	sy
}
 8007e76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	e000e100 	.word	0xe000e100

08007e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	db0a      	blt.n	8007eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	490c      	ldr	r1, [pc, #48]	; (8007ed4 <__NVIC_SetPriority+0x4c>)
 8007ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea6:	0112      	lsls	r2, r2, #4
 8007ea8:	b2d2      	uxtb	r2, r2
 8007eaa:	440b      	add	r3, r1
 8007eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007eb0:	e00a      	b.n	8007ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	4908      	ldr	r1, [pc, #32]	; (8007ed8 <__NVIC_SetPriority+0x50>)
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	3b04      	subs	r3, #4
 8007ec0:	0112      	lsls	r2, r2, #4
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	761a      	strb	r2, [r3, #24]
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	e000e100 	.word	0xe000e100
 8007ed8:	e000ed00 	.word	0xe000ed00

08007edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b089      	sub	sp, #36	; 0x24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f1c3 0307 	rsb	r3, r3, #7
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	bf28      	it	cs
 8007efa:	2304      	movcs	r3, #4
 8007efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3304      	adds	r3, #4
 8007f02:	2b06      	cmp	r3, #6
 8007f04:	d902      	bls.n	8007f0c <NVIC_EncodePriority+0x30>
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	3b03      	subs	r3, #3
 8007f0a:	e000      	b.n	8007f0e <NVIC_EncodePriority+0x32>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	43da      	mvns	r2, r3
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	401a      	ands	r2, r3
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f24:	f04f 31ff 	mov.w	r1, #4294967295
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2e:	43d9      	mvns	r1, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f34:	4313      	orrs	r3, r2
         );
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3724      	adds	r7, #36	; 0x24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f54:	d301      	bcc.n	8007f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f56:	2301      	movs	r3, #1
 8007f58:	e00f      	b.n	8007f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f5a:	4a0a      	ldr	r2, [pc, #40]	; (8007f84 <SysTick_Config+0x40>)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f62:	210f      	movs	r1, #15
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	f7ff ff8e 	bl	8007e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <SysTick_Config+0x40>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f72:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <SysTick_Config+0x40>)
 8007f74:	2207      	movs	r2, #7
 8007f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	e000e010 	.word	0xe000e010

08007f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff ff05 	bl	8007da0 <__NVIC_SetPriorityGrouping>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
 8007faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007fac:	f7ff ff1c 	bl	8007de8 <__NVIC_GetPriorityGrouping>
 8007fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	6978      	ldr	r0, [r7, #20]
 8007fb8:	f7ff ff90 	bl	8007edc <NVIC_EncodePriority>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff ff5f 	bl	8007e88 <__NVIC_SetPriority>
}
 8007fca:	bf00      	nop
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	4603      	mov	r3, r0
 8007fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff ff0f 	bl	8007e04 <__NVIC_EnableIRQ>
}
 8007fe6:	bf00      	nop
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff ff1f 	bl	8007e40 <__NVIC_DisableIRQ>
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff ff96 	bl	8007f44 <SysTick_Config>
 8008018:	4603      	mov	r3, r0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e054      	b.n	80080e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	7f5b      	ldrb	r3, [r3, #29]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d105      	bne.n	800804c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fa fcda 	bl	8002a00 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	791b      	ldrb	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10c      	bne.n	8008074 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a22      	ldr	r2, [pc, #136]	; (80080e8 <HAL_CRC_Init+0xc4>)
 8008060:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0218 	bic.w	r2, r2, #24
 8008070:	609a      	str	r2, [r3, #8]
 8008072:	e00c      	b.n	800808e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6899      	ldr	r1, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	461a      	mov	r2, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f834 	bl	80080ec <HAL_CRCEx_Polynomial_Set>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e028      	b.n	80080e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	795b      	ldrb	r3, [r3, #5]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d105      	bne.n	80080a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f04f 32ff 	mov.w	r2, #4294967295
 800809e:	611a      	str	r2, [r3, #16]
 80080a0:	e004      	b.n	80080ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	6912      	ldr	r2, [r2, #16]
 80080aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695a      	ldr	r2, [r3, #20]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	699a      	ldr	r2, [r3, #24]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	04c11db7 	.word	0x04c11db7

080080ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80080fc:	231f      	movs	r3, #31
 80080fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008100:	bf00      	nop
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	613a      	str	r2, [r7, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d009      	beq.n	8008120 <HAL_CRCEx_Polynomial_Set+0x34>
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0f0      	beq.n	8008102 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b18      	cmp	r3, #24
 8008124:	d846      	bhi.n	80081b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <HAL_CRCEx_Polynomial_Set+0x40>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	080081bb 	.word	0x080081bb
 8008130:	080081b5 	.word	0x080081b5
 8008134:	080081b5 	.word	0x080081b5
 8008138:	080081b5 	.word	0x080081b5
 800813c:	080081b5 	.word	0x080081b5
 8008140:	080081b5 	.word	0x080081b5
 8008144:	080081b5 	.word	0x080081b5
 8008148:	080081b5 	.word	0x080081b5
 800814c:	080081a9 	.word	0x080081a9
 8008150:	080081b5 	.word	0x080081b5
 8008154:	080081b5 	.word	0x080081b5
 8008158:	080081b5 	.word	0x080081b5
 800815c:	080081b5 	.word	0x080081b5
 8008160:	080081b5 	.word	0x080081b5
 8008164:	080081b5 	.word	0x080081b5
 8008168:	080081b5 	.word	0x080081b5
 800816c:	0800819d 	.word	0x0800819d
 8008170:	080081b5 	.word	0x080081b5
 8008174:	080081b5 	.word	0x080081b5
 8008178:	080081b5 	.word	0x080081b5
 800817c:	080081b5 	.word	0x080081b5
 8008180:	080081b5 	.word	0x080081b5
 8008184:	080081b5 	.word	0x080081b5
 8008188:	080081b5 	.word	0x080081b5
 800818c:	08008191 	.word	0x08008191
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2b06      	cmp	r3, #6
 8008194:	d913      	bls.n	80081be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800819a:	e010      	b.n	80081be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	2b07      	cmp	r3, #7
 80081a0:	d90f      	bls.n	80081c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80081a6:	e00c      	b.n	80081c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d90b      	bls.n	80081c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80081b2:	e008      	b.n	80081c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	75fb      	strb	r3, [r7, #23]
      break;
 80081b8:	e006      	b.n	80081c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081ba:	bf00      	nop
 80081bc:	e004      	b.n	80081c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081be:	bf00      	nop
 80081c0:	e002      	b.n	80081c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081c2:	bf00      	nop
 80081c4:	e000      	b.n	80081c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10d      	bne.n	80081ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f023 0118 	bic.w	r1, r3, #24
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e014      	b.n	8008234 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	791b      	ldrb	r3, [r3, #4]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fa fc12 	bl	8002a44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	; 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	795b      	ldrb	r3, [r3, #5]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_DAC_ConfigChannel+0x18>
 8008250:	2302      	movs	r3, #2
 8008252:	e185      	b.n	8008560 <HAL_DAC_ConfigChannel+0x324>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2202      	movs	r2, #2
 800825e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b04      	cmp	r3, #4
 8008266:	f040 8081 	bne.w	800836c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800826a:	f7ff f9b7 	bl	80075dc <HAL_GetTick>
 800826e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d140      	bne.n	80082f8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008276:	e018      	b.n	80082aa <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008278:	f7ff f9b0 	bl	80075dc <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	2b01      	cmp	r3, #1
 8008284:	d911      	bls.n	80082aa <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f043 0208 	orr.w	r2, r3, #8
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2203      	movs	r2, #3
 80082a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e15a      	b.n	8008560 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1df      	bne.n	8008278 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80082b8:	2001      	movs	r0, #1
 80082ba:	f00e fd8d 	bl	8016dd8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40
 80082c8:	e023      	b.n	8008312 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80082ca:	f7ff f987 	bl	80075dc <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d90f      	bls.n	80082f8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da0a      	bge.n	80082f8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f043 0208 	orr.w	r2, r3, #8
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2203      	movs	r2, #3
 80082f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e133      	b.n	8008560 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dbe3      	blt.n	80082ca <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8008302:	2001      	movs	r0, #1
 8008304:	f00e fd68 	bl	8016dd8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008310:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f003 0310 	and.w	r3, r3, #16
 800831e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008322:	fa01 f303 	lsl.w	r3, r1, r3
 8008326:	43db      	mvns	r3, r3
 8008328:	ea02 0103 	and.w	r1, r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	409a      	lsls	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	21ff      	movs	r1, #255	; 0xff
 800834e:	fa01 f303 	lsl.w	r3, r1, r3
 8008352:	43db      	mvns	r3, r3
 8008354:	ea02 0103 	and.w	r1, r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	409a      	lsls	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008372:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d11d      	bne.n	80083c6 <HAL_DAC_ConfigChannel+0x18a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	221f      	movs	r2, #31
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	43db      	mvns	r3, r3
 80083a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a2:	4013      	ands	r3, r2
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ba:	4313      	orrs	r3, r2
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2207      	movs	r2, #7
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	43db      	mvns	r3, r3
 80083dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083de:	4013      	ands	r3, r2
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d102      	bne.n	80083f0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = 0x00000000UL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	623b      	str	r3, [r7, #32]
 80083ee:	e00f      	b.n	8008410 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d102      	bne.n	80083fe <HAL_DAC_ConfigChannel+0x1c2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80083f8:	2301      	movs	r3, #1
 80083fa:	623b      	str	r3, [r7, #32]
 80083fc:	e008      	b.n	8008410 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <HAL_DAC_ConfigChannel+0x1d0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008406:	2301      	movs	r3, #1
 8008408:	623b      	str	r3, [r7, #32]
 800840a:	e001      	b.n	8008410 <HAL_DAC_ConfigChannel+0x1d4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800840c:	2300      	movs	r3, #0
 800840e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	6a3a      	ldr	r2, [r7, #32]
 800841c:	4313      	orrs	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f003 0310 	and.w	r3, r3, #16
 8008426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	43db      	mvns	r3, r3
 8008430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008432:	4013      	ands	r3, r2
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	7a1b      	ldrb	r3, [r3, #8]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d102      	bne.n	8008444 <HAL_DAC_ConfigChannel+0x208>
 800843e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008442:	e000      	b.n	8008446 <HAL_DAC_ConfigChannel+0x20a>
 8008444:	2300      	movs	r3, #0
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	4313      	orrs	r3, r2
 800844a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f003 0310 	and.w	r3, r3, #16
 8008452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008456:	fa02 f303 	lsl.w	r3, r2, r3
 800845a:	43db      	mvns	r3, r3
 800845c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845e:	4013      	ands	r3, r2
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	7a5b      	ldrb	r3, [r3, #9]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d102      	bne.n	8008470 <HAL_DAC_ConfigChannel+0x234>
 800846a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800846e:	e000      	b.n	8008472 <HAL_DAC_ConfigChannel+0x236>
 8008470:	2300      	movs	r3, #0
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	4313      	orrs	r3, r2
 8008476:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d114      	bne.n	80084b2 <HAL_DAC_ConfigChannel+0x276>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008488:	f005 f9d0 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800848c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	4a35      	ldr	r2, [pc, #212]	; (8008568 <HAL_DAC_ConfigChannel+0x32c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d904      	bls.n	80084a0 <HAL_DAC_ConfigChannel+0x264>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
 800849e:	e00f      	b.n	80084c0 <HAL_DAC_ConfigChannel+0x284>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	4a32      	ldr	r2, [pc, #200]	; (800856c <HAL_DAC_ConfigChannel+0x330>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d90a      	bls.n	80084be <HAL_DAC_ConfigChannel+0x282>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
 80084b0:	e006      	b.n	80084c0 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b8:	4313      	orrs	r3, r2
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
 80084bc:	e000      	b.n	80084c0 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80084be:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ce:	4313      	orrs	r3, r2
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f003 0310 	and.w	r3, r3, #16
 80084e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80084ea:	fa02 f303 	lsl.w	r3, r2, r3
 80084ee:	43da      	mvns	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	400a      	ands	r2, r1
 80084f6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f003 0310 	and.w	r3, r3, #16
 8008506:	f640 72fe 	movw	r2, #4094	; 0xffe
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43db      	mvns	r3, r3
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	4013      	ands	r3, r2
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f003 0310 	and.w	r3, r3, #16
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852a:	4313      	orrs	r3, r2
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008534:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f003 0310 	and.w	r3, r3, #16
 8008542:	22c0      	movs	r2, #192	; 0xc0
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	43da      	mvns	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	400a      	ands	r2, r1
 8008550:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3728      	adds	r7, #40	; 0x28
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	09896800 	.word	0x09896800
 800856c:	04c4b400 	.word	0x04c4b400

08008570 <HAL_DACEx_SetConfigAutonomousMode>:
  *        the configuration information for the specified DAC.
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac, DAC_AutonomousModeConfTypeDef *sConfig)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	791b      	ldrb	r3, [r3, #4]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b01      	cmp	r3, #1
 8008582:	d11e      	bne.n	80085c2 <HAL_DACEx_SetConfigAutonomousMode+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	795b      	ldrb	r3, [r3, #5]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d101      	bne.n	8008590 <HAL_DACEx_SetConfigAutonomousMode+0x20>
 800858c:	2302      	movs	r3, #2
 800858e:	e019      	b.n	80085c4 <HAL_DACEx_SetConfigAutonomousMode+0x54>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2202      	movs	r2, #2
 800859a:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a2:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e000      	b.n	80085c4 <HAL_DACEx_SetConfigAutonomousMode+0x54>
  }
  else
  {
    return HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80085d8:	f7ff f800 	bl	80075dc <HAL_GetTick>
 80085dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e0e0      	b.n	80087aa <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a6f      	ldr	r2, [pc, #444]	; (80087b4 <HAL_DMA_Init+0x1e4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	f000 809f 	beq.w	800873a <HAL_DMA_Init+0x16a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a6d      	ldr	r2, [pc, #436]	; (80087b8 <HAL_DMA_Init+0x1e8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	f000 8099 	beq.w	800873a <HAL_DMA_Init+0x16a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a6b      	ldr	r2, [pc, #428]	; (80087bc <HAL_DMA_Init+0x1ec>)
 800860e:	4293      	cmp	r3, r2
 8008610:	f000 8093 	beq.w	800873a <HAL_DMA_Init+0x16a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a69      	ldr	r2, [pc, #420]	; (80087c0 <HAL_DMA_Init+0x1f0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	f000 808d 	beq.w	800873a <HAL_DMA_Init+0x16a>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a67      	ldr	r2, [pc, #412]	; (80087c4 <HAL_DMA_Init+0x1f4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	f000 8087 	beq.w	800873a <HAL_DMA_Init+0x16a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a65      	ldr	r2, [pc, #404]	; (80087c8 <HAL_DMA_Init+0x1f8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	f000 8081 	beq.w	800873a <HAL_DMA_Init+0x16a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a63      	ldr	r2, [pc, #396]	; (80087cc <HAL_DMA_Init+0x1fc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d07b      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a62      	ldr	r2, [pc, #392]	; (80087d0 <HAL_DMA_Init+0x200>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d076      	beq.n	800873a <HAL_DMA_Init+0x16a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a60      	ldr	r2, [pc, #384]	; (80087d4 <HAL_DMA_Init+0x204>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d071      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a5f      	ldr	r2, [pc, #380]	; (80087d8 <HAL_DMA_Init+0x208>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d06c      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a5d      	ldr	r2, [pc, #372]	; (80087dc <HAL_DMA_Init+0x20c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d067      	beq.n	800873a <HAL_DMA_Init+0x16a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a5c      	ldr	r2, [pc, #368]	; (80087e0 <HAL_DMA_Init+0x210>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d062      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a5a      	ldr	r2, [pc, #360]	; (80087e4 <HAL_DMA_Init+0x214>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d05d      	beq.n	800873a <HAL_DMA_Init+0x16a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a59      	ldr	r2, [pc, #356]	; (80087e8 <HAL_DMA_Init+0x218>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d058      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a57      	ldr	r2, [pc, #348]	; (80087ec <HAL_DMA_Init+0x21c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d053      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a56      	ldr	r2, [pc, #344]	; (80087f0 <HAL_DMA_Init+0x220>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d04e      	beq.n	800873a <HAL_DMA_Init+0x16a>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a54      	ldr	r2, [pc, #336]	; (80087f4 <HAL_DMA_Init+0x224>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d049      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a53      	ldr	r2, [pc, #332]	; (80087f8 <HAL_DMA_Init+0x228>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d044      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a51      	ldr	r2, [pc, #324]	; (80087fc <HAL_DMA_Init+0x22c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d03f      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a50      	ldr	r2, [pc, #320]	; (8008800 <HAL_DMA_Init+0x230>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d03a      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a4e      	ldr	r2, [pc, #312]	; (8008804 <HAL_DMA_Init+0x234>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d035      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a4d      	ldr	r2, [pc, #308]	; (8008808 <HAL_DMA_Init+0x238>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d030      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a4b      	ldr	r2, [pc, #300]	; (800880c <HAL_DMA_Init+0x23c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d02b      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a4a      	ldr	r2, [pc, #296]	; (8008810 <HAL_DMA_Init+0x240>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d026      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a48      	ldr	r2, [pc, #288]	; (8008814 <HAL_DMA_Init+0x244>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d021      	beq.n	800873a <HAL_DMA_Init+0x16a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a47      	ldr	r2, [pc, #284]	; (8008818 <HAL_DMA_Init+0x248>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d01c      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a45      	ldr	r2, [pc, #276]	; (800881c <HAL_DMA_Init+0x24c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d017      	beq.n	800873a <HAL_DMA_Init+0x16a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a44      	ldr	r2, [pc, #272]	; (8008820 <HAL_DMA_Init+0x250>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d012      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a42      	ldr	r2, [pc, #264]	; (8008824 <HAL_DMA_Init+0x254>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00d      	beq.n	800873a <HAL_DMA_Init+0x16a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a41      	ldr	r2, [pc, #260]	; (8008828 <HAL_DMA_Init+0x258>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d008      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a3f      	ldr	r2, [pc, #252]	; (800882c <HAL_DMA_Init+0x25c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d003      	beq.n	800873a <HAL_DMA_Init+0x16a>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a3e      	ldr	r2, [pc, #248]	; (8008830 <HAL_DMA_Init+0x260>)
 8008738:	4293      	cmp	r3, r2
 800873a:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695a      	ldr	r2, [r3, #20]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0206 	orr.w	r2, r2, #6
 800875a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800875c:	e00f      	b.n	800877e <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800875e:	f7fe ff3d 	bl	80075dc <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b05      	cmp	r3, #5
 800876a:	d908      	bls.n	800877e <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2210      	movs	r2, #16
 8008770:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2203      	movs	r2, #3
 8008776:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e015      	b.n	80087aa <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e8      	bne.n	800875e <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fb05 	bl	8008d9c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	40020050 	.word	0x40020050
 80087b8:	50020050 	.word	0x50020050
 80087bc:	400200d0 	.word	0x400200d0
 80087c0:	500200d0 	.word	0x500200d0
 80087c4:	40020150 	.word	0x40020150
 80087c8:	50020150 	.word	0x50020150
 80087cc:	400201d0 	.word	0x400201d0
 80087d0:	500201d0 	.word	0x500201d0
 80087d4:	40020250 	.word	0x40020250
 80087d8:	50020250 	.word	0x50020250
 80087dc:	400202d0 	.word	0x400202d0
 80087e0:	500202d0 	.word	0x500202d0
 80087e4:	40020350 	.word	0x40020350
 80087e8:	50020350 	.word	0x50020350
 80087ec:	400203d0 	.word	0x400203d0
 80087f0:	500203d0 	.word	0x500203d0
 80087f4:	40020450 	.word	0x40020450
 80087f8:	50020450 	.word	0x50020450
 80087fc:	400204d0 	.word	0x400204d0
 8008800:	500204d0 	.word	0x500204d0
 8008804:	40020550 	.word	0x40020550
 8008808:	50020550 	.word	0x50020550
 800880c:	400205d0 	.word	0x400205d0
 8008810:	500205d0 	.word	0x500205d0
 8008814:	40020650 	.word	0x40020650
 8008818:	50020650 	.word	0x50020650
 800881c:	400206d0 	.word	0x400206d0
 8008820:	500206d0 	.word	0x500206d0
 8008824:	40020750 	.word	0x40020750
 8008828:	50020750 	.word	0x50020750
 800882c:	400207d0 	.word	0x400207d0
 8008830:	500207d0 	.word	0x500207d0

08008834 <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance;
  uint32_t tickstart = HAL_GetTick();
 800883c:	f7fe fece 	bl	80075dc <HAL_GetTick>
 8008840:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e0b9      	b.n	80089c0 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008854:	f023 030f 	bic.w	r3, r3, #15
 8008858:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	695a      	ldr	r2, [r3, #20]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0206 	orr.w	r2, r2, #6
 8008868:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800886a:	e00f      	b.n	800888c <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800886c:	f7fe feb6 	bl	80075dc <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b05      	cmp	r3, #5
 8008878:	d908      	bls.n	800888c <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2210      	movs	r2, #16
 800887e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2203      	movs	r2, #3
 8008884:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e099      	b.n	80089c0 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e8      	bne.n	800886c <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->Instance->CTR2  = 0U;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2200      	movs	r2, #0
 80088b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->Instance->CBR1  = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->Instance->CSAR  = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2200      	movs	r2, #0
 80088c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->Instance->CDAR  = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2200      	movs	r2, #0
 80088d0:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->Instance->CLLR  = 0U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2200      	movs	r2, #0
 80088d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a3a      	ldr	r2, [pc, #232]	; (80089c8 <HAL_DMA_DeInit+0x194>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d022      	beq.n	800892a <HAL_DMA_DeInit+0xf6>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a38      	ldr	r2, [pc, #224]	; (80089cc <HAL_DMA_DeInit+0x198>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d01d      	beq.n	800892a <HAL_DMA_DeInit+0xf6>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a37      	ldr	r2, [pc, #220]	; (80089d0 <HAL_DMA_DeInit+0x19c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d018      	beq.n	800892a <HAL_DMA_DeInit+0xf6>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a35      	ldr	r2, [pc, #212]	; (80089d4 <HAL_DMA_DeInit+0x1a0>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_DMA_DeInit+0xf6>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a34      	ldr	r2, [pc, #208]	; (80089d8 <HAL_DMA_DeInit+0x1a4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00e      	beq.n	800892a <HAL_DMA_DeInit+0xf6>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a32      	ldr	r2, [pc, #200]	; (80089dc <HAL_DMA_DeInit+0x1a8>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_DMA_DeInit+0xf6>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a31      	ldr	r2, [pc, #196]	; (80089e0 <HAL_DMA_DeInit+0x1ac>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_DMA_DeInit+0xf6>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a2f      	ldr	r2, [pc, #188]	; (80089e4 <HAL_DMA_DeInit+0x1b0>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d101      	bne.n	800892e <HAL_DMA_DeInit+0xfa>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <HAL_DMA_DeInit+0xfc>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d007      	beq.n	8008944 <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2200      	movs	r2, #0
 800893a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->Instance->CBR2 = 0U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2200      	movs	r2, #0
 8008942:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008950:	3b50      	subs	r3, #80	; 0x50
 8008952:	09db      	lsrs	r3, r3, #7
 8008954:	f003 031f 	and.w	r3, r3, #31
 8008958:	2101      	movs	r1, #1
 800895a:	fa01 f303 	lsl.w	r3, r1, r3
 800895e:	43db      	mvns	r3, r3
 8008960:	401a      	ands	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800896e:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->XferHalfCpltCallback = NULL;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->XferErrorCallback    = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	669a      	str	r2, [r3, #104]	; 0x68
  hdma->XferAbortCallback    = NULL;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	; 0x6c
  hdma->XferSuspendCallback  = NULL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	40020650 	.word	0x40020650
 80089cc:	50020650 	.word	0x50020650
 80089d0:	400206d0 	.word	0x400206d0
 80089d4:	500206d0 	.word	0x500206d0
 80089d8:	40020750 	.word	0x40020750
 80089dc:	50020750 	.word	0x50020750
 80089e0:	400207d0 	.word	0x400207d0
 80089e4:	500207d0 	.word	0x500207d0

080089e8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e019      	b.n	8008a2e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d004      	beq.n	8008a10 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e00e      	b.n	8008a2e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2204      	movs	r2, #4
 8008a14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6812      	ldr	r2, [r2, #0]
 8008a22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a26:	f043 0304 	orr.w	r3, r3, #4
 8008a2a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008a4a:	f023 030f 	bic.w	r3, r3, #15
 8008a4e:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a58:	3b50      	subs	r3, #80	; 0x50
 8008a5a:	09db      	lsrs	r3, r3, #7
 8008a5c:	f003 031f 	and.w	r3, r3, #31
 8008a60:	2201      	movs	r2, #1
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 8150 	beq.w	8008d16 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d011      	beq.n	8008aa8 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a9a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa0:	f043 0201 	orr.w	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d011      	beq.n	8008ada <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008acc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad2:	f043 0202 	orr.w	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d011      	beq.n	8008b0c <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008afe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b04:	f043 0204 	orr.w	r2, r3, #4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b30:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b36:	f043 0208 	orr.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d013      	beq.n	8008b74 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00c      	beq.n	8008b74 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b62:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d055      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d04e      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b98:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d137      	bne.n	8008c16 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	695a      	ldr	r2, [r3, #20]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bb4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	695a      	ldr	r2, [r3, #20]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0202 	orr.w	r2, r2, #2
 8008bc4:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008bdc:	e003      	b.n	8008be6 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 8087 	beq.w	8008d1a <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4798      	blx	r3
        }

        return;
 8008c14:	e081      	b.n	8008d1a <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d039      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d032      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d012      	beq.n	8008c7c <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d116      	bne.n	8008c8e <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d111      	bne.n	8008c8e <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c76:	2201      	movs	r2, #1
 8008c78:	731a      	strb	r2, [r3, #12]
 8008c7a:	e008      	b.n	8008c8e <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008c96:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d031      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695a      	ldr	r2, [r3, #20]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0202 	orr.w	r2, r2, #2
 8008cc6:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d004      	beq.n	8008ce0 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008cde:	e003      	b.n	8008ce8 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d007      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
 8008d14:	e002      	b.n	8008d1c <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8008d16:	bf00      	nop
 8008d18:	e000      	b.n	8008d1c <HAL_DMA_IRQHandler+0x2e2>
        return;
 8008d1a:	bf00      	nop
    }
  }
}
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e02b      	b.n	8008d8e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008d3e:	f023 030f 	bic.w	r3, r3, #15
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d4c:	3b50      	subs	r3, #80	; 0x50
 8008d4e:	09db      	lsrs	r3, r3, #7
 8008d50:	f003 031f 	and.w	r3, r3, #31
 8008d54:	2201      	movs	r2, #1
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d012      	beq.n	8008d8c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	f003 0311 	and.w	r3, r3, #17
 8008d6c:	2b11      	cmp	r3, #17
 8008d6e:	d106      	bne.n	8008d7e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	431a      	orrs	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	605a      	str	r2, [r3, #4]
 8008d7c:	e006      	b.n	8008d8c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	43db      	mvns	r3, r3
 8008d86:	401a      	ands	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a53      	ldr	r2, [pc, #332]	; (8008f28 <DMA_Init+0x18c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	f000 80a0 	beq.w	8008f22 <DMA_Init+0x186>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a51      	ldr	r2, [pc, #324]	; (8008f2c <DMA_Init+0x190>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	f000 809a 	beq.w	8008f22 <DMA_Init+0x186>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a4f      	ldr	r2, [pc, #316]	; (8008f30 <DMA_Init+0x194>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	f000 8094 	beq.w	8008f22 <DMA_Init+0x186>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a4d      	ldr	r2, [pc, #308]	; (8008f34 <DMA_Init+0x198>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	f000 808e 	beq.w	8008f22 <DMA_Init+0x186>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a4b      	ldr	r2, [pc, #300]	; (8008f38 <DMA_Init+0x19c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	f000 8088 	beq.w	8008f22 <DMA_Init+0x186>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a49      	ldr	r2, [pc, #292]	; (8008f3c <DMA_Init+0x1a0>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	f000 8082 	beq.w	8008f22 <DMA_Init+0x186>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a47      	ldr	r2, [pc, #284]	; (8008f40 <DMA_Init+0x1a4>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d07c      	beq.n	8008f22 <DMA_Init+0x186>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a45      	ldr	r2, [pc, #276]	; (8008f44 <DMA_Init+0x1a8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d077      	beq.n	8008f22 <DMA_Init+0x186>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a44      	ldr	r2, [pc, #272]	; (8008f48 <DMA_Init+0x1ac>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d072      	beq.n	8008f22 <DMA_Init+0x186>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a42      	ldr	r2, [pc, #264]	; (8008f4c <DMA_Init+0x1b0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d06d      	beq.n	8008f22 <DMA_Init+0x186>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a41      	ldr	r2, [pc, #260]	; (8008f50 <DMA_Init+0x1b4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d068      	beq.n	8008f22 <DMA_Init+0x186>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a3f      	ldr	r2, [pc, #252]	; (8008f54 <DMA_Init+0x1b8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d063      	beq.n	8008f22 <DMA_Init+0x186>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a3e      	ldr	r2, [pc, #248]	; (8008f58 <DMA_Init+0x1bc>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d05e      	beq.n	8008f22 <DMA_Init+0x186>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a3c      	ldr	r2, [pc, #240]	; (8008f5c <DMA_Init+0x1c0>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d059      	beq.n	8008f22 <DMA_Init+0x186>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a3b      	ldr	r2, [pc, #236]	; (8008f60 <DMA_Init+0x1c4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d054      	beq.n	8008f22 <DMA_Init+0x186>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a39      	ldr	r2, [pc, #228]	; (8008f64 <DMA_Init+0x1c8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d04f      	beq.n	8008f22 <DMA_Init+0x186>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a38      	ldr	r2, [pc, #224]	; (8008f68 <DMA_Init+0x1cc>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d04a      	beq.n	8008f22 <DMA_Init+0x186>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a36      	ldr	r2, [pc, #216]	; (8008f6c <DMA_Init+0x1d0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d045      	beq.n	8008f22 <DMA_Init+0x186>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a35      	ldr	r2, [pc, #212]	; (8008f70 <DMA_Init+0x1d4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d040      	beq.n	8008f22 <DMA_Init+0x186>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a33      	ldr	r2, [pc, #204]	; (8008f74 <DMA_Init+0x1d8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d03b      	beq.n	8008f22 <DMA_Init+0x186>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a32      	ldr	r2, [pc, #200]	; (8008f78 <DMA_Init+0x1dc>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d036      	beq.n	8008f22 <DMA_Init+0x186>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a30      	ldr	r2, [pc, #192]	; (8008f7c <DMA_Init+0x1e0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d031      	beq.n	8008f22 <DMA_Init+0x186>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a2f      	ldr	r2, [pc, #188]	; (8008f80 <DMA_Init+0x1e4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d02c      	beq.n	8008f22 <DMA_Init+0x186>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	; (8008f84 <DMA_Init+0x1e8>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d027      	beq.n	8008f22 <DMA_Init+0x186>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a2c      	ldr	r2, [pc, #176]	; (8008f88 <DMA_Init+0x1ec>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d022      	beq.n	8008f22 <DMA_Init+0x186>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <DMA_Init+0x1f0>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d01d      	beq.n	8008f22 <DMA_Init+0x186>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a29      	ldr	r2, [pc, #164]	; (8008f90 <DMA_Init+0x1f4>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d018      	beq.n	8008f22 <DMA_Init+0x186>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a27      	ldr	r2, [pc, #156]	; (8008f94 <DMA_Init+0x1f8>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d013      	beq.n	8008f22 <DMA_Init+0x186>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a26      	ldr	r2, [pc, #152]	; (8008f98 <DMA_Init+0x1fc>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00e      	beq.n	8008f22 <DMA_Init+0x186>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a24      	ldr	r2, [pc, #144]	; (8008f9c <DMA_Init+0x200>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d009      	beq.n	8008f22 <DMA_Init+0x186>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a23      	ldr	r2, [pc, #140]	; (8008fa0 <DMA_Init+0x204>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d004      	beq.n	8008f22 <DMA_Init+0x186>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a21      	ldr	r2, [pc, #132]	; (8008fa4 <DMA_Init+0x208>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d142      	bne.n	8008fa8 <DMA_Init+0x20c>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e041      	b.n	8008faa <DMA_Init+0x20e>
 8008f26:	bf00      	nop
 8008f28:	40020050 	.word	0x40020050
 8008f2c:	50020050 	.word	0x50020050
 8008f30:	400200d0 	.word	0x400200d0
 8008f34:	500200d0 	.word	0x500200d0
 8008f38:	40020150 	.word	0x40020150
 8008f3c:	50020150 	.word	0x50020150
 8008f40:	400201d0 	.word	0x400201d0
 8008f44:	500201d0 	.word	0x500201d0
 8008f48:	40020250 	.word	0x40020250
 8008f4c:	50020250 	.word	0x50020250
 8008f50:	400202d0 	.word	0x400202d0
 8008f54:	500202d0 	.word	0x500202d0
 8008f58:	40020350 	.word	0x40020350
 8008f5c:	50020350 	.word	0x50020350
 8008f60:	400203d0 	.word	0x400203d0
 8008f64:	500203d0 	.word	0x500203d0
 8008f68:	40020450 	.word	0x40020450
 8008f6c:	50020450 	.word	0x50020450
 8008f70:	400204d0 	.word	0x400204d0
 8008f74:	500204d0 	.word	0x500204d0
 8008f78:	40020550 	.word	0x40020550
 8008f7c:	50020550 	.word	0x50020550
 8008f80:	400205d0 	.word	0x400205d0
 8008f84:	500205d0 	.word	0x500205d0
 8008f88:	40020650 	.word	0x40020650
 8008f8c:	50020650 	.word	0x50020650
 8008f90:	400206d0 	.word	0x400206d0
 8008f94:	500206d0 	.word	0x500206d0
 8008f98:	40020750 	.word	0x40020750
 8008f9c:	50020750 	.word	0x50020750
 8008fa0:	400207d0 	.word	0x400207d0
 8008fa4:	500207d0 	.word	0x500207d0
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d012      	beq.n	8008fd4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	051b      	lsls	r3, r3, #20
 8008fba:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008fbe:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008fcc:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009006:	f040 80b0 	bne.w	800916a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a82      	ldr	r2, [pc, #520]	; (8009218 <DMA_Init+0x47c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	f000 80a0 	beq.w	8009156 <DMA_Init+0x3ba>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a80      	ldr	r2, [pc, #512]	; (800921c <DMA_Init+0x480>)
 800901c:	4293      	cmp	r3, r2
 800901e:	f000 809a 	beq.w	8009156 <DMA_Init+0x3ba>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a7e      	ldr	r2, [pc, #504]	; (8009220 <DMA_Init+0x484>)
 8009028:	4293      	cmp	r3, r2
 800902a:	f000 8094 	beq.w	8009156 <DMA_Init+0x3ba>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a7c      	ldr	r2, [pc, #496]	; (8009224 <DMA_Init+0x488>)
 8009034:	4293      	cmp	r3, r2
 8009036:	f000 808e 	beq.w	8009156 <DMA_Init+0x3ba>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a7a      	ldr	r2, [pc, #488]	; (8009228 <DMA_Init+0x48c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	f000 8088 	beq.w	8009156 <DMA_Init+0x3ba>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a78      	ldr	r2, [pc, #480]	; (800922c <DMA_Init+0x490>)
 800904c:	4293      	cmp	r3, r2
 800904e:	f000 8082 	beq.w	8009156 <DMA_Init+0x3ba>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a76      	ldr	r2, [pc, #472]	; (8009230 <DMA_Init+0x494>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d07c      	beq.n	8009156 <DMA_Init+0x3ba>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a74      	ldr	r2, [pc, #464]	; (8009234 <DMA_Init+0x498>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d077      	beq.n	8009156 <DMA_Init+0x3ba>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a73      	ldr	r2, [pc, #460]	; (8009238 <DMA_Init+0x49c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d072      	beq.n	8009156 <DMA_Init+0x3ba>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a71      	ldr	r2, [pc, #452]	; (800923c <DMA_Init+0x4a0>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d06d      	beq.n	8009156 <DMA_Init+0x3ba>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a70      	ldr	r2, [pc, #448]	; (8009240 <DMA_Init+0x4a4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d068      	beq.n	8009156 <DMA_Init+0x3ba>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a6e      	ldr	r2, [pc, #440]	; (8009244 <DMA_Init+0x4a8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d063      	beq.n	8009156 <DMA_Init+0x3ba>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a6d      	ldr	r2, [pc, #436]	; (8009248 <DMA_Init+0x4ac>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d05e      	beq.n	8009156 <DMA_Init+0x3ba>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a6b      	ldr	r2, [pc, #428]	; (800924c <DMA_Init+0x4b0>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d059      	beq.n	8009156 <DMA_Init+0x3ba>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a6a      	ldr	r2, [pc, #424]	; (8009250 <DMA_Init+0x4b4>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d054      	beq.n	8009156 <DMA_Init+0x3ba>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a68      	ldr	r2, [pc, #416]	; (8009254 <DMA_Init+0x4b8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d04f      	beq.n	8009156 <DMA_Init+0x3ba>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a67      	ldr	r2, [pc, #412]	; (8009258 <DMA_Init+0x4bc>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d04a      	beq.n	8009156 <DMA_Init+0x3ba>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a65      	ldr	r2, [pc, #404]	; (800925c <DMA_Init+0x4c0>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d045      	beq.n	8009156 <DMA_Init+0x3ba>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a64      	ldr	r2, [pc, #400]	; (8009260 <DMA_Init+0x4c4>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d040      	beq.n	8009156 <DMA_Init+0x3ba>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a62      	ldr	r2, [pc, #392]	; (8009264 <DMA_Init+0x4c8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d03b      	beq.n	8009156 <DMA_Init+0x3ba>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a61      	ldr	r2, [pc, #388]	; (8009268 <DMA_Init+0x4cc>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d036      	beq.n	8009156 <DMA_Init+0x3ba>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a5f      	ldr	r2, [pc, #380]	; (800926c <DMA_Init+0x4d0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d031      	beq.n	8009156 <DMA_Init+0x3ba>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a5e      	ldr	r2, [pc, #376]	; (8009270 <DMA_Init+0x4d4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d02c      	beq.n	8009156 <DMA_Init+0x3ba>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a5c      	ldr	r2, [pc, #368]	; (8009274 <DMA_Init+0x4d8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d027      	beq.n	8009156 <DMA_Init+0x3ba>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a5b      	ldr	r2, [pc, #364]	; (8009278 <DMA_Init+0x4dc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d022      	beq.n	8009156 <DMA_Init+0x3ba>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a59      	ldr	r2, [pc, #356]	; (800927c <DMA_Init+0x4e0>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d01d      	beq.n	8009156 <DMA_Init+0x3ba>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a58      	ldr	r2, [pc, #352]	; (8009280 <DMA_Init+0x4e4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d018      	beq.n	8009156 <DMA_Init+0x3ba>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a56      	ldr	r2, [pc, #344]	; (8009284 <DMA_Init+0x4e8>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d013      	beq.n	8009156 <DMA_Init+0x3ba>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a55      	ldr	r2, [pc, #340]	; (8009288 <DMA_Init+0x4ec>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00e      	beq.n	8009156 <DMA_Init+0x3ba>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a53      	ldr	r2, [pc, #332]	; (800928c <DMA_Init+0x4f0>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d009      	beq.n	8009156 <DMA_Init+0x3ba>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a52      	ldr	r2, [pc, #328]	; (8009290 <DMA_Init+0x4f4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d004      	beq.n	8009156 <DMA_Init+0x3ba>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a50      	ldr	r2, [pc, #320]	; (8009294 <DMA_Init+0x4f8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d101      	bne.n	800915a <DMA_Init+0x3be>
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <DMA_Init+0x3c0>
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00d      	beq.n	800917c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	e008      	b.n	800917c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009172:	d103      	bne.n	800917c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800917a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009182:	4b45      	ldr	r3, [pc, #276]	; (8009298 <DMA_Init+0x4fc>)
 8009184:	4013      	ands	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	430b      	orrs	r3, r1
 800918e:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2200      	movs	r2, #0
 8009196:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a36      	ldr	r2, [pc, #216]	; (8009278 <DMA_Init+0x4dc>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d022      	beq.n	80091e8 <DMA_Init+0x44c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a35      	ldr	r2, [pc, #212]	; (800927c <DMA_Init+0x4e0>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d01d      	beq.n	80091e8 <DMA_Init+0x44c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a33      	ldr	r2, [pc, #204]	; (8009280 <DMA_Init+0x4e4>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d018      	beq.n	80091e8 <DMA_Init+0x44c>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a32      	ldr	r2, [pc, #200]	; (8009284 <DMA_Init+0x4e8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <DMA_Init+0x44c>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a30      	ldr	r2, [pc, #192]	; (8009288 <DMA_Init+0x4ec>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00e      	beq.n	80091e8 <DMA_Init+0x44c>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a2f      	ldr	r2, [pc, #188]	; (800928c <DMA_Init+0x4f0>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d009      	beq.n	80091e8 <DMA_Init+0x44c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a2d      	ldr	r2, [pc, #180]	; (8009290 <DMA_Init+0x4f4>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d004      	beq.n	80091e8 <DMA_Init+0x44c>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <DMA_Init+0x4f8>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d101      	bne.n	80091ec <DMA_Init+0x450>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <DMA_Init+0x452>
 80091ec:	2300      	movs	r3, #0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2200      	movs	r2, #0
 80091f8:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800920a:	bf00      	nop
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40020050 	.word	0x40020050
 800921c:	50020050 	.word	0x50020050
 8009220:	400200d0 	.word	0x400200d0
 8009224:	500200d0 	.word	0x500200d0
 8009228:	40020150 	.word	0x40020150
 800922c:	50020150 	.word	0x50020150
 8009230:	400201d0 	.word	0x400201d0
 8009234:	500201d0 	.word	0x500201d0
 8009238:	40020250 	.word	0x40020250
 800923c:	50020250 	.word	0x50020250
 8009240:	400202d0 	.word	0x400202d0
 8009244:	500202d0 	.word	0x500202d0
 8009248:	40020350 	.word	0x40020350
 800924c:	50020350 	.word	0x50020350
 8009250:	400203d0 	.word	0x400203d0
 8009254:	500203d0 	.word	0x500203d0
 8009258:	40020450 	.word	0x40020450
 800925c:	50020450 	.word	0x50020450
 8009260:	400204d0 	.word	0x400204d0
 8009264:	500204d0 	.word	0x500204d0
 8009268:	40020550 	.word	0x40020550
 800926c:	50020550 	.word	0x50020550
 8009270:	400205d0 	.word	0x400205d0
 8009274:	500205d0 	.word	0x500205d0
 8009278:	40020650 	.word	0x40020650
 800927c:	50020650 	.word	0x50020650
 8009280:	400206d0 	.word	0x400206d0
 8009284:	500206d0 	.word	0x500206d0
 8009288:	40020750 	.word	0x40020750
 800928c:	50020750 	.word	0x50020750
 8009290:	400207d0 	.word	0x400207d0
 8009294:	500207d0 	.word	0x500207d0
 8009298:	3cc03180 	.word	0x3cc03180

0800929c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80092a4:	f7fe f99a 	bl	80075dc <HAL_GetTick>
 80092a8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0dc      	b.n	800946e <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a6f      	ldr	r2, [pc, #444]	; (8009478 <HAL_DMAEx_List_Init+0x1dc>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	f000 809f 	beq.w	80093fe <HAL_DMAEx_List_Init+0x162>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a6d      	ldr	r2, [pc, #436]	; (800947c <HAL_DMAEx_List_Init+0x1e0>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	f000 8099 	beq.w	80093fe <HAL_DMAEx_List_Init+0x162>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a6b      	ldr	r2, [pc, #428]	; (8009480 <HAL_DMAEx_List_Init+0x1e4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	f000 8093 	beq.w	80093fe <HAL_DMAEx_List_Init+0x162>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a69      	ldr	r2, [pc, #420]	; (8009484 <HAL_DMAEx_List_Init+0x1e8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	f000 808d 	beq.w	80093fe <HAL_DMAEx_List_Init+0x162>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a67      	ldr	r2, [pc, #412]	; (8009488 <HAL_DMAEx_List_Init+0x1ec>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	f000 8087 	beq.w	80093fe <HAL_DMAEx_List_Init+0x162>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a65      	ldr	r2, [pc, #404]	; (800948c <HAL_DMAEx_List_Init+0x1f0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	f000 8081 	beq.w	80093fe <HAL_DMAEx_List_Init+0x162>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a63      	ldr	r2, [pc, #396]	; (8009490 <HAL_DMAEx_List_Init+0x1f4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d07b      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a62      	ldr	r2, [pc, #392]	; (8009494 <HAL_DMAEx_List_Init+0x1f8>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d076      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a60      	ldr	r2, [pc, #384]	; (8009498 <HAL_DMAEx_List_Init+0x1fc>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d071      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a5f      	ldr	r2, [pc, #380]	; (800949c <HAL_DMAEx_List_Init+0x200>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d06c      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a5d      	ldr	r2, [pc, #372]	; (80094a0 <HAL_DMAEx_List_Init+0x204>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d067      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a5c      	ldr	r2, [pc, #368]	; (80094a4 <HAL_DMAEx_List_Init+0x208>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d062      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a5a      	ldr	r2, [pc, #360]	; (80094a8 <HAL_DMAEx_List_Init+0x20c>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d05d      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a59      	ldr	r2, [pc, #356]	; (80094ac <HAL_DMAEx_List_Init+0x210>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d058      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a57      	ldr	r2, [pc, #348]	; (80094b0 <HAL_DMAEx_List_Init+0x214>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d053      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a56      	ldr	r2, [pc, #344]	; (80094b4 <HAL_DMAEx_List_Init+0x218>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d04e      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a54      	ldr	r2, [pc, #336]	; (80094b8 <HAL_DMAEx_List_Init+0x21c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d049      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a53      	ldr	r2, [pc, #332]	; (80094bc <HAL_DMAEx_List_Init+0x220>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d044      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a51      	ldr	r2, [pc, #324]	; (80094c0 <HAL_DMAEx_List_Init+0x224>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d03f      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a50      	ldr	r2, [pc, #320]	; (80094c4 <HAL_DMAEx_List_Init+0x228>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d03a      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a4e      	ldr	r2, [pc, #312]	; (80094c8 <HAL_DMAEx_List_Init+0x22c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d035      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a4d      	ldr	r2, [pc, #308]	; (80094cc <HAL_DMAEx_List_Init+0x230>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d030      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a4b      	ldr	r2, [pc, #300]	; (80094d0 <HAL_DMAEx_List_Init+0x234>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d02b      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a4a      	ldr	r2, [pc, #296]	; (80094d4 <HAL_DMAEx_List_Init+0x238>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d026      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a48      	ldr	r2, [pc, #288]	; (80094d8 <HAL_DMAEx_List_Init+0x23c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d021      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a47      	ldr	r2, [pc, #284]	; (80094dc <HAL_DMAEx_List_Init+0x240>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d01c      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a45      	ldr	r2, [pc, #276]	; (80094e0 <HAL_DMAEx_List_Init+0x244>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d017      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a44      	ldr	r2, [pc, #272]	; (80094e4 <HAL_DMAEx_List_Init+0x248>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d012      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a42      	ldr	r2, [pc, #264]	; (80094e8 <HAL_DMAEx_List_Init+0x24c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00d      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a41      	ldr	r2, [pc, #260]	; (80094ec <HAL_DMAEx_List_Init+0x250>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d008      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a3f      	ldr	r2, [pc, #252]	; (80094f0 <HAL_DMAEx_List_Init+0x254>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <HAL_DMAEx_List_Init+0x162>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a3e      	ldr	r2, [pc, #248]	; (80094f4 <HAL_DMAEx_List_Init+0x258>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	695a      	ldr	r2, [r3, #20]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0206 	orr.w	r2, r2, #6
 800941e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8009420:	e00f      	b.n	8009442 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8009422:	f7fe f8db 	bl	80075dc <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b05      	cmp	r3, #5
 800942e:	d908      	bls.n	8009442 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2210      	movs	r2, #16
 8009434:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2203      	movs	r2, #3
 800943a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e015      	b.n	800946e <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e8      	bne.n	8009422 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fa27 	bl	80098a4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40020050 	.word	0x40020050
 800947c:	50020050 	.word	0x50020050
 8009480:	400200d0 	.word	0x400200d0
 8009484:	500200d0 	.word	0x500200d0
 8009488:	40020150 	.word	0x40020150
 800948c:	50020150 	.word	0x50020150
 8009490:	400201d0 	.word	0x400201d0
 8009494:	500201d0 	.word	0x500201d0
 8009498:	40020250 	.word	0x40020250
 800949c:	50020250 	.word	0x50020250
 80094a0:	400202d0 	.word	0x400202d0
 80094a4:	500202d0 	.word	0x500202d0
 80094a8:	40020350 	.word	0x40020350
 80094ac:	50020350 	.word	0x50020350
 80094b0:	400203d0 	.word	0x400203d0
 80094b4:	500203d0 	.word	0x500203d0
 80094b8:	40020450 	.word	0x40020450
 80094bc:	50020450 	.word	0x50020450
 80094c0:	400204d0 	.word	0x400204d0
 80094c4:	500204d0 	.word	0x500204d0
 80094c8:	40020550 	.word	0x40020550
 80094cc:	50020550 	.word	0x50020550
 80094d0:	400205d0 	.word	0x400205d0
 80094d4:	500205d0 	.word	0x500205d0
 80094d8:	40020650 	.word	0x40020650
 80094dc:	50020650 	.word	0x50020650
 80094e0:	400206d0 	.word	0x400206d0
 80094e4:	500206d0 	.word	0x500206d0
 80094e8:	40020750 	.word	0x40020750
 80094ec:	50020750 	.word	0x50020750
 80094f0:	400207d0 	.word	0x400207d0
 80094f4:	500207d0 	.word	0x500207d0

080094f8 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <HAL_DMAEx_List_BuildNode+0x16>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e004      	b.n	800951c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fb1d 	bl	8009b54 <DMA_List_BuildNode>

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08c      	sub	sp, #48	; 0x30
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <HAL_DMAEx_List_InsertNode+0x18>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e0b6      	b.n	80096ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d104      	bne.n	8009552 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2204      	movs	r2, #4
 800954c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e0ad      	b.n	80096ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fc4c 	bl	8009df8 <DMA_List_CheckNodesBaseAddresses>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2205      	movs	r2, #5
 800956a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e09e      	b.n	80096ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fc6d 	bl	8009e58 <DMA_List_CheckNodesTypes>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2204      	movs	r2, #4
 8009588:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e08f      	b.n	80096ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2202      	movs	r2, #2
 8009592:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800959a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800959e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fc93 	bl	8009ed0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d11a      	bne.n	80095e8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	609a      	str	r2, [r3, #8]
 80095c4:	e06c      	b.n	80096a0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80095d2:	4013      	ands	r3, r2
 80095d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d8:	4319      	orrs	r1, r3
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2202      	movs	r2, #2
 80095e4:	609a      	str	r2, [r3, #8]
 80095e6:	e05b      	b.n	80096a0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10f      	bne.n	800960e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80095f8:	4013      	ands	r3, r2
 80095fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095fe:	4319      	orrs	r1, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e043      	b.n	8009696 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8009612:	f107 0314 	add.w	r3, r7, #20
 8009616:	461a      	mov	r2, r3
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 fc88 	bl	8009f30 <DMA_List_FindNode>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d132      	bne.n	800968c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8009626:	69fa      	ldr	r2, [r7, #28]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	429a      	cmp	r2, r3
 800962e:	d11a      	bne.n	8009666 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	461a      	mov	r2, r3
 800963e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009642:	4013      	ands	r3, r2
 8009644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009648:	4319      	orrs	r1, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009656:	4013      	ands	r3, r2
 8009658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800965a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800965c:	4319      	orrs	r1, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009664:	e017      	b.n	8009696 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8009666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800967c:	4013      	ands	r3, r2
 800967e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009682:	4319      	orrs	r1, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800968a:	e004      	b.n	8009696 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2206      	movs	r2, #6
 8009690:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e00b      	b.n	80096ae <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3730      	adds	r7, #48	; 0x30
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b08a      	sub	sp, #40	; 0x28
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e052      	b.n	800976e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d104      	bne.n	80096da <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e049      	b.n	800976e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00c      	beq.n	80096fc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d101      	bne.n	80096f2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	e03d      	b.n	800976e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2204      	movs	r2, #4
 80096f6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e038      	b.n	800976e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d104      	bne.n	800970e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2204      	movs	r2, #4
 8009708:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e02f      	b.n	800976e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2202      	movs	r2, #2
 8009712:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f107 0220 	add.w	r2, r7, #32
 8009722:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fbd2 	bl	8009ed0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8009730:	f107 030c 	add.w	r3, r7, #12
 8009734:	461a      	mov	r2, r3
 8009736:	2100      	movs	r1, #0
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fbf9 	bl	8009f30 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009748:	4013      	ands	r3, r2
 800974a:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	4610      	mov	r0, r2
 8009750:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009752:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009754:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3728      	adds	r7, #40	; 0x28
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <HAL_DMAEx_List_LinkQ+0x16>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e072      	b.n	8009878 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009798:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d002      	beq.n	80097ac <HAL_DMAEx_List_LinkQ+0x34>
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	2b05      	cmp	r3, #5
 80097aa:	d108      	bne.n	80097be <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2240      	movs	r2, #64	; 0x40
 80097b0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e05c      	b.n	8009878 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	7b1b      	ldrb	r3, [r3, #12]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d104      	bne.n	80097d2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2201      	movs	r2, #1
 80097cc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e052      	b.n	8009878 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a2b      	ldr	r2, [pc, #172]	; (8009884 <HAL_DMAEx_List_LinkQ+0x10c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d022      	beq.n	8009822 <HAL_DMAEx_List_LinkQ+0xaa>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a29      	ldr	r2, [pc, #164]	; (8009888 <HAL_DMAEx_List_LinkQ+0x110>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d01d      	beq.n	8009822 <HAL_DMAEx_List_LinkQ+0xaa>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a28      	ldr	r2, [pc, #160]	; (800988c <HAL_DMAEx_List_LinkQ+0x114>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d018      	beq.n	8009822 <HAL_DMAEx_List_LinkQ+0xaa>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a26      	ldr	r2, [pc, #152]	; (8009890 <HAL_DMAEx_List_LinkQ+0x118>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d013      	beq.n	8009822 <HAL_DMAEx_List_LinkQ+0xaa>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a25      	ldr	r2, [pc, #148]	; (8009894 <HAL_DMAEx_List_LinkQ+0x11c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00e      	beq.n	8009822 <HAL_DMAEx_List_LinkQ+0xaa>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a23      	ldr	r2, [pc, #140]	; (8009898 <HAL_DMAEx_List_LinkQ+0x120>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d009      	beq.n	8009822 <HAL_DMAEx_List_LinkQ+0xaa>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a22      	ldr	r2, [pc, #136]	; (800989c <HAL_DMAEx_List_LinkQ+0x124>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d004      	beq.n	8009822 <HAL_DMAEx_List_LinkQ+0xaa>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a20      	ldr	r2, [pc, #128]	; (80098a0 <HAL_DMAEx_List_LinkQ+0x128>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d101      	bne.n	8009826 <HAL_DMAEx_List_LinkQ+0xae>
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <HAL_DMAEx_List_LinkQ+0xb0>
 8009826:	2300      	movs	r3, #0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10b      	bne.n	8009844 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2203      	movs	r2, #3
 800983e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e019      	b.n	8009878 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	2b81      	cmp	r3, #129	; 0x81
 800984a:	d108      	bne.n	800985e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10d      	bne.n	8009870 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2204      	movs	r2, #4
 8009858:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e00c      	b.n	8009878 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d004      	beq.n	8009870 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2204      	movs	r2, #4
 800986a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e003      	b.n	8009878 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	40020650 	.word	0x40020650
 8009888:	50020650 	.word	0x50020650
 800988c:	400206d0 	.word	0x400206d0
 8009890:	500206d0 	.word	0x500206d0
 8009894:	40020750 	.word	0x40020750
 8009898:	50020750 	.word	0x50020750
 800989c:	400207d0 	.word	0x400207d0
 80098a0:	500207d0 	.word	0x500207d0

080098a4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b4:	4313      	orrs	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a85      	ldr	r2, [pc, #532]	; (8009ad4 <DMA_List_Init+0x230>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	f000 80a0 	beq.w	8009a04 <DMA_List_Init+0x160>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a83      	ldr	r2, [pc, #524]	; (8009ad8 <DMA_List_Init+0x234>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	f000 809a 	beq.w	8009a04 <DMA_List_Init+0x160>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a81      	ldr	r2, [pc, #516]	; (8009adc <DMA_List_Init+0x238>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	f000 8094 	beq.w	8009a04 <DMA_List_Init+0x160>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a7f      	ldr	r2, [pc, #508]	; (8009ae0 <DMA_List_Init+0x23c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	f000 808e 	beq.w	8009a04 <DMA_List_Init+0x160>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a7d      	ldr	r2, [pc, #500]	; (8009ae4 <DMA_List_Init+0x240>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	f000 8088 	beq.w	8009a04 <DMA_List_Init+0x160>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a7b      	ldr	r2, [pc, #492]	; (8009ae8 <DMA_List_Init+0x244>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	f000 8082 	beq.w	8009a04 <DMA_List_Init+0x160>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a79      	ldr	r2, [pc, #484]	; (8009aec <DMA_List_Init+0x248>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d07c      	beq.n	8009a04 <DMA_List_Init+0x160>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a78      	ldr	r2, [pc, #480]	; (8009af0 <DMA_List_Init+0x24c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d077      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a76      	ldr	r2, [pc, #472]	; (8009af4 <DMA_List_Init+0x250>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d072      	beq.n	8009a04 <DMA_List_Init+0x160>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a75      	ldr	r2, [pc, #468]	; (8009af8 <DMA_List_Init+0x254>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d06d      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a73      	ldr	r2, [pc, #460]	; (8009afc <DMA_List_Init+0x258>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d068      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a72      	ldr	r2, [pc, #456]	; (8009b00 <DMA_List_Init+0x25c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d063      	beq.n	8009a04 <DMA_List_Init+0x160>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a70      	ldr	r2, [pc, #448]	; (8009b04 <DMA_List_Init+0x260>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d05e      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a6f      	ldr	r2, [pc, #444]	; (8009b08 <DMA_List_Init+0x264>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d059      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a6d      	ldr	r2, [pc, #436]	; (8009b0c <DMA_List_Init+0x268>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d054      	beq.n	8009a04 <DMA_List_Init+0x160>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a6c      	ldr	r2, [pc, #432]	; (8009b10 <DMA_List_Init+0x26c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d04f      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a6a      	ldr	r2, [pc, #424]	; (8009b14 <DMA_List_Init+0x270>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d04a      	beq.n	8009a04 <DMA_List_Init+0x160>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a69      	ldr	r2, [pc, #420]	; (8009b18 <DMA_List_Init+0x274>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d045      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a67      	ldr	r2, [pc, #412]	; (8009b1c <DMA_List_Init+0x278>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d040      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a66      	ldr	r2, [pc, #408]	; (8009b20 <DMA_List_Init+0x27c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d03b      	beq.n	8009a04 <DMA_List_Init+0x160>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a64      	ldr	r2, [pc, #400]	; (8009b24 <DMA_List_Init+0x280>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d036      	beq.n	8009a04 <DMA_List_Init+0x160>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a63      	ldr	r2, [pc, #396]	; (8009b28 <DMA_List_Init+0x284>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d031      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a61      	ldr	r2, [pc, #388]	; (8009b2c <DMA_List_Init+0x288>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d02c      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a60      	ldr	r2, [pc, #384]	; (8009b30 <DMA_List_Init+0x28c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d027      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a5e      	ldr	r2, [pc, #376]	; (8009b34 <DMA_List_Init+0x290>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d022      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a5d      	ldr	r2, [pc, #372]	; (8009b38 <DMA_List_Init+0x294>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d01d      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a5b      	ldr	r2, [pc, #364]	; (8009b3c <DMA_List_Init+0x298>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d018      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a5a      	ldr	r2, [pc, #360]	; (8009b40 <DMA_List_Init+0x29c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d013      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a58      	ldr	r2, [pc, #352]	; (8009b44 <DMA_List_Init+0x2a0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d00e      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a57      	ldr	r2, [pc, #348]	; (8009b48 <DMA_List_Init+0x2a4>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d009      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a55      	ldr	r2, [pc, #340]	; (8009b4c <DMA_List_Init+0x2a8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d004      	beq.n	8009a04 <DMA_List_Init+0x160>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a54      	ldr	r2, [pc, #336]	; (8009b50 <DMA_List_Init+0x2ac>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d101      	bne.n	8009a08 <DMA_List_Init+0x164>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <DMA_List_Init+0x166>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2200      	movs	r2, #0
 8009a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009a3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2200      	movs	r2, #0
 8009a44:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2200      	movs	r2, #0
 8009a54:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a36      	ldr	r2, [pc, #216]	; (8009b34 <DMA_List_Init+0x290>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d022      	beq.n	8009aa6 <DMA_List_Init+0x202>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a34      	ldr	r2, [pc, #208]	; (8009b38 <DMA_List_Init+0x294>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01d      	beq.n	8009aa6 <DMA_List_Init+0x202>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a33      	ldr	r2, [pc, #204]	; (8009b3c <DMA_List_Init+0x298>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d018      	beq.n	8009aa6 <DMA_List_Init+0x202>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a31      	ldr	r2, [pc, #196]	; (8009b40 <DMA_List_Init+0x29c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d013      	beq.n	8009aa6 <DMA_List_Init+0x202>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a30      	ldr	r2, [pc, #192]	; (8009b44 <DMA_List_Init+0x2a0>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00e      	beq.n	8009aa6 <DMA_List_Init+0x202>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a2e      	ldr	r2, [pc, #184]	; (8009b48 <DMA_List_Init+0x2a4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d009      	beq.n	8009aa6 <DMA_List_Init+0x202>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a2d      	ldr	r2, [pc, #180]	; (8009b4c <DMA_List_Init+0x2a8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d004      	beq.n	8009aa6 <DMA_List_Init+0x202>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a2b      	ldr	r2, [pc, #172]	; (8009b50 <DMA_List_Init+0x2ac>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d101      	bne.n	8009aaa <DMA_List_Init+0x206>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <DMA_List_Init+0x208>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d007      	beq.n	8009ac0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2200      	movs	r2, #0
 8009abe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009ac8:	bf00      	nop
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	40020050 	.word	0x40020050
 8009ad8:	50020050 	.word	0x50020050
 8009adc:	400200d0 	.word	0x400200d0
 8009ae0:	500200d0 	.word	0x500200d0
 8009ae4:	40020150 	.word	0x40020150
 8009ae8:	50020150 	.word	0x50020150
 8009aec:	400201d0 	.word	0x400201d0
 8009af0:	500201d0 	.word	0x500201d0
 8009af4:	40020250 	.word	0x40020250
 8009af8:	50020250 	.word	0x50020250
 8009afc:	400202d0 	.word	0x400202d0
 8009b00:	500202d0 	.word	0x500202d0
 8009b04:	40020350 	.word	0x40020350
 8009b08:	50020350 	.word	0x50020350
 8009b0c:	400203d0 	.word	0x400203d0
 8009b10:	500203d0 	.word	0x500203d0
 8009b14:	40020450 	.word	0x40020450
 8009b18:	50020450 	.word	0x50020450
 8009b1c:	400204d0 	.word	0x400204d0
 8009b20:	500204d0 	.word	0x500204d0
 8009b24:	40020550 	.word	0x40020550
 8009b28:	50020550 	.word	0x50020550
 8009b2c:	400205d0 	.word	0x400205d0
 8009b30:	500205d0 	.word	0x500205d0
 8009b34:	40020650 	.word	0x40020650
 8009b38:	50020650 	.word	0x50020650
 8009b3c:	400206d0 	.word	0x400206d0
 8009b40:	500206d0 	.word	0x500206d0
 8009b44:	40020750 	.word	0x40020750
 8009b48:	50020750 	.word	0x50020750
 8009b4c:	400207d0 	.word	0x400207d0
 8009b50:	500207d0 	.word	0x500207d0

08009b54 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009b66:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8009b6c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009b72:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8009b78:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d017      	beq.n	8009bba <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b96:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	051b      	lsls	r3, r3, #20
 8009ba0:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009ba4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	3b01      	subs	r3, #1
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009bb2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6859      	ldr	r1, [r3, #4]
 8009bc2:	f240 237f 	movw	r3, #639	; 0x27f
 8009bc6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bd6:	d10c      	bne.n	8009bf2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d011      	beq.n	8009c08 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	605a      	str	r2, [r3, #4]
 8009bf0:	e00a      	b.n	8009c08 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bfa:	d105      	bne.n	8009c08 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00f      	beq.n	8009c30 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c22:	041b      	lsls	r3, r3, #16
 8009c24:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009c28:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d04e      	beq.n	8009ce4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	0419      	lsls	r1, r3, #16
 8009c52:	4b67      	ldr	r3, [pc, #412]	; (8009df0 <DMA_List_BuildNode+0x29c>)
 8009c54:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009c56:	431a      	orrs	r2, r3
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da06      	bge.n	8009c72 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	609a      	str	r2, [r3, #8]
 8009c70:	e005      	b.n	8009c7e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	da06      	bge.n	8009c94 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	609a      	str	r2, [r3, #8]
 8009c92:	e005      	b.n	8009ca0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da06      	bge.n	8009cb6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	609a      	str	r2, [r3, #8]
 8009cb4:	e005      	b.n	8009cc2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da06      	bge.n	8009cd8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	609a      	str	r2, [r3, #8]
 8009cd6:	e005      	b.n	8009ce4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d059      	beq.n	8009db4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	da09      	bge.n	8009d1c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	425b      	negs	r3, r3
 8009d0e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	615a      	str	r2, [r3, #20]
 8009d1a:	e005      	b.n	8009d28 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d20:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	da0d      	bge.n	8009d4c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d34:	425b      	negs	r3, r3
 8009d36:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	695a      	ldr	r2, [r3, #20]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	0419      	lsls	r1, r3, #16
 8009d40:	4b2c      	ldr	r3, [pc, #176]	; (8009df4 <DMA_List_BuildNode+0x2a0>)
 8009d42:	400b      	ands	r3, r1
 8009d44:	431a      	orrs	r2, r3
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	615a      	str	r2, [r3, #20]
 8009d4a:	e009      	b.n	8009d60 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d54:	0419      	lsls	r1, r3, #16
 8009d56:	4b27      	ldr	r3, [pc, #156]	; (8009df4 <DMA_List_BuildNode+0x2a0>)
 8009d58:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da08      	bge.n	8009d7a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d6c:	425b      	negs	r3, r3
 8009d6e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	619a      	str	r2, [r3, #24]
 8009d78:	e004      	b.n	8009d84 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	da0b      	bge.n	8009da4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d90:	425b      	negs	r3, r3
 8009d92:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	619a      	str	r2, [r3, #24]
 8009da2:	e007      	b.n	8009db4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dac:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009dae:	431a      	orrs	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8009dd4:	e005      	b.n	8009de2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	621a      	str	r2, [r3, #32]
}
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	07ff0000 	.word	0x07ff0000
 8009df4:	1fff0000 	.word	0x1fff0000

08009df8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	0c1b      	lsrs	r3, r3, #16
 8009e10:	041b      	lsls	r3, r3, #16
 8009e12:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	617b      	str	r3, [r7, #20]
 8009e22:	e00a      	b.n	8009e3a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	e004      	b.n	8009e3a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	0c1b      	lsrs	r3, r3, #16
 8009e3e:	041b      	lsls	r3, r3, #16
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d001      	beq.n	8009e4a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e000      	b.n	8009e4c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	e00e      	b.n	8009e96 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	e006      	b.n	8009e96 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d007      	beq.n	8009eac <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d001      	beq.n	8009eac <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e00b      	b.n	8009ec4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d001      	beq.n	8009ec2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e000      	b.n	8009ec4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6a1b      	ldr	r3, [r3, #32]
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00c      	beq.n	8009f02 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4a0d      	ldr	r2, [pc, #52]	; (8009f28 <DMA_List_GetCLLRNodeInfo+0x58>)
 8009ef2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00f      	beq.n	8009f1a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2207      	movs	r2, #7
 8009efe:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8009f00:	e00b      	b.n	8009f1a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d002      	beq.n	8009f0e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	4a08      	ldr	r2, [pc, #32]	; (8009f2c <DMA_List_GetCLLRNodeInfo+0x5c>)
 8009f0c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2205      	movs	r2, #5
 8009f18:	601a      	str	r2, [r3, #0]
}
 8009f1a:	bf00      	nop
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	fe010000 	.word	0xfe010000
 8009f2c:	f8010000 	.word	0xf8010000

08009f30 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b089      	sub	sp, #36	; 0x24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d142      	bne.n	8009fda <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8009f54:	e01d      	b.n	8009f92 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d107      	bne.n	8009f6c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	461a      	mov	r2, r3
 8009f62:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009f66:	4013      	ands	r3, r2
 8009f68:	61bb      	str	r3, [r7, #24]
 8009f6a:	e00f      	b.n	8009f8c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	0c1b      	lsrs	r3, r3, #16
 8009f76:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8009f84:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009f88:	4013      	ands	r3, r2
 8009f8a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d3dc      	bcc.n	8009f56 <DMA_List_FindNode+0x26>
 8009f9c:	e029      	b.n	8009ff2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d107      	bne.n	8009fb4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009fae:	4013      	ands	r3, r2
 8009fb0:	61bb      	str	r3, [r7, #24]
 8009fb2:	e00f      	b.n	8009fd4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	0c1b      	lsrs	r3, r3, #16
 8009fbe:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8009fcc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d206      	bcs.n	8009ff2 <DMA_List_FindNode+0xc2>
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009fea:	4013      	ands	r3, r2
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d1d5      	bne.n	8009f9e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d008      	beq.n	800a00a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009ffe:	4013      	ands	r3, r2
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	429a      	cmp	r2, r3
 800a004:	d001      	beq.n	800a00a <DMA_List_FindNode+0xda>
    {
      return 1U;
 800a006:	2301      	movs	r3, #1
 800a008:	e02b      	b.n	800a062 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69fa      	ldr	r2, [r7, #28]
 800a00e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	0c1b      	lsrs	r3, r3, #16
 800a016:	041b      	lsls	r3, r3, #16
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	0c1b      	lsrs	r3, r3, #16
 800a026:	041b      	lsls	r3, r3, #16
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	431a      	orrs	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	461a      	mov	r2, r3
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00f      	beq.n	800a060 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	461a      	mov	r2, r3
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a04c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a050:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	0c1b      	lsrs	r3, r3, #16
 800a058:	041b      	lsls	r3, r3, #16
 800a05a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3724      	adds	r7, #36	; 0x24
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800a06e:	b480      	push	{r7}
 800a070:	b087      	sub	sp, #28
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	460b      	mov	r3, r1
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a080:	7afb      	ldrb	r3, [r7, #11]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d011      	beq.n	800a0aa <HAL_EXTI_RegisterCallback+0x3c>
 800a086:	2b02      	cmp	r3, #2
 800a088:	dc13      	bgt.n	800a0b2 <HAL_EXTI_RegisterCallback+0x44>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <HAL_EXTI_RegisterCallback+0x26>
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d007      	beq.n	800a0a2 <HAL_EXTI_RegisterCallback+0x34>
 800a092:	e00e      	b.n	800a0b2 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	609a      	str	r2, [r3, #8]
      break;
 800a0a0:	e00a      	b.n	800a0b8 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	605a      	str	r2, [r3, #4]
      break;
 800a0a8:	e006      	b.n	800a0b8 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	609a      	str	r2, [r3, #8]
      break;
 800a0b0:	e002      	b.n	800a0b8 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b6:	bf00      	nop
  }

  return status;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b083      	sub	sp, #12
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e003      	b.n	800a0e2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
  }
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
	...

0800a0f0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	0c1b      	lsrs	r3, r3, #16
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 031f 	and.w	r3, r3, #31
 800a10c:	2201      	movs	r2, #1
 800a10e:	fa02 f303 	lsl.w	r3, r2, r3
 800a112:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	4b17      	ldr	r3, [pc, #92]	; (800a178 <HAL_EXTI_IRQHandler+0x88>)
 800a11a:	4413      	add	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	4013      	ands	r3, r2
 800a126:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d009      	beq.n	800a142 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <HAL_EXTI_IRQHandler+0x8c>)
 800a148:	4413      	add	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4013      	ands	r3, r2
 800a154:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	4798      	blx	r3
    }
  }
}
 800a170:	bf00      	nop
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	4602200c 	.word	0x4602200c
 800a17c:	46022010 	.word	0x46022010

0800a180 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a180:	b480      	push	{r7}
 800a182:	b089      	sub	sp, #36	; 0x24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a192:	e1ba      	b.n	800a50a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	2101      	movs	r1, #1
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 81aa 	beq.w	800a504 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a55      	ldr	r2, [pc, #340]	; (800a308 <HAL_GPIO_Init+0x188>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d15d      	bne.n	800a274 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a1be:	2201      	movs	r2, #1
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c6:	43db      	mvns	r3, r3
 800a1c8:	69fa      	ldr	r2, [r7, #28]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f003 0201 	and.w	r2, r3, #1
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1dc:	69fa      	ldr	r2, [r7, #28]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	69fa      	ldr	r2, [r7, #28]
 800a1e6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a1e8:	4a48      	ldr	r2, [pc, #288]	; (800a30c <HAL_GPIO_Init+0x18c>)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a1f0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a1f2:	4a46      	ldr	r2, [pc, #280]	; (800a30c <HAL_GPIO_Init+0x18c>)
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	08da      	lsrs	r2, r3, #3
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	3208      	adds	r2, #8
 800a206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	220f      	movs	r2, #15
 800a216:	fa02 f303 	lsl.w	r3, r2, r3
 800a21a:	43db      	mvns	r3, r3
 800a21c:	69fa      	ldr	r2, [r7, #28]
 800a21e:	4013      	ands	r3, r2
 800a220:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	f003 0307 	and.w	r3, r3, #7
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	220b      	movs	r2, #11
 800a22c:	fa02 f303 	lsl.w	r3, r2, r3
 800a230:	69fa      	ldr	r2, [r7, #28]
 800a232:	4313      	orrs	r3, r2
 800a234:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	08da      	lsrs	r2, r3, #3
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	3208      	adds	r2, #8
 800a23e:	69f9      	ldr	r1, [r7, #28]
 800a240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	2203      	movs	r2, #3
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	43db      	mvns	r3, r3
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	4013      	ands	r3, r2
 800a25a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	2202      	movs	r2, #2
 800a262:	fa02 f303 	lsl.w	r3, r2, r3
 800a266:	69fa      	ldr	r2, [r7, #28]
 800a268:	4313      	orrs	r3, r2
 800a26a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	e067      	b.n	800a344 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d003      	beq.n	800a284 <HAL_GPIO_Init+0x104>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	2b12      	cmp	r3, #18
 800a282:	d145      	bne.n	800a310 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	08da      	lsrs	r2, r3, #3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3208      	adds	r2, #8
 800a28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a290:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f003 0307 	and.w	r3, r3, #7
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	220f      	movs	r2, #15
 800a29c:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f003 020f 	and.w	r2, r3, #15
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2bc:	69fa      	ldr	r2, [r7, #28]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	08da      	lsrs	r2, r3, #3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3208      	adds	r2, #8
 800a2ca:	69f9      	ldr	r1, [r7, #28]
 800a2cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	2203      	movs	r2, #3
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	43db      	mvns	r3, r3
 800a2e2:	69fa      	ldr	r2, [r7, #28]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f003 0203 	and.w	r2, r3, #3
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f8:	69fa      	ldr	r2, [r7, #28]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	e01e      	b.n	800a344 <HAL_GPIO_Init+0x1c4>
 800a306:	bf00      	nop
 800a308:	46020000 	.word	0x46020000
 800a30c:	0801f688 	.word	0x0801f688
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	2203      	movs	r2, #3
 800a31c:	fa02 f303 	lsl.w	r3, r2, r3
 800a320:	43db      	mvns	r3, r3
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	4013      	ands	r3, r2
 800a326:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f003 0203 	and.w	r2, r3, #3
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	fa02 f303 	lsl.w	r3, r2, r3
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	69fa      	ldr	r2, [r7, #28]
 800a342:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d00b      	beq.n	800a364 <HAL_GPIO_Init+0x1e4>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	2b02      	cmp	r3, #2
 800a352:	d007      	beq.n	800a364 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a358:	2b11      	cmp	r3, #17
 800a35a:	d003      	beq.n	800a364 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	2b12      	cmp	r3, #18
 800a362:	d130      	bne.n	800a3c6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	2203      	movs	r2, #3
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	43db      	mvns	r3, r3
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	4013      	ands	r3, r2
 800a37a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	fa02 f303 	lsl.w	r3, r2, r3
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	69fa      	ldr	r2, [r7, #28]
 800a392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a39a:	2201      	movs	r2, #1
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a2:	43db      	mvns	r3, r3
 800a3a4:	69fa      	ldr	r2, [r7, #28]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	091b      	lsrs	r3, r3, #4
 800a3b0:	f003 0201 	and.w	r2, r3, #1
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d017      	beq.n	800a3fe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	2203      	movs	r2, #3
 800a3da:	fa02 f303 	lsl.w	r3, r2, r3
 800a3de:	43db      	mvns	r3, r3
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	69fa      	ldr	r2, [r7, #28]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d07c      	beq.n	800a504 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a40a:	4a47      	ldr	r2, [pc, #284]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	089b      	lsrs	r3, r3, #2
 800a410:	3318      	adds	r3, #24
 800a412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a416:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	220f      	movs	r2, #15
 800a422:	fa02 f303 	lsl.w	r3, r2, r3
 800a426:	43db      	mvns	r3, r3
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	4013      	ands	r3, r2
 800a42c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	0a9a      	lsrs	r2, r3, #10
 800a432:	4b3e      	ldr	r3, [pc, #248]	; (800a52c <HAL_GPIO_Init+0x3ac>)
 800a434:	4013      	ands	r3, r2
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	f002 0203 	and.w	r2, r2, #3
 800a43c:	00d2      	lsls	r2, r2, #3
 800a43e:	4093      	lsls	r3, r2
 800a440:	69fa      	ldr	r2, [r7, #28]
 800a442:	4313      	orrs	r3, r2
 800a444:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a446:	4938      	ldr	r1, [pc, #224]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	089b      	lsrs	r3, r3, #2
 800a44c:	3318      	adds	r3, #24
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a454:	4b34      	ldr	r3, [pc, #208]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	43db      	mvns	r3, r3
 800a45e:	69fa      	ldr	r2, [r7, #28]
 800a460:	4013      	ands	r3, r2
 800a462:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a470:	69fa      	ldr	r2, [r7, #28]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4313      	orrs	r3, r2
 800a476:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a478:	4a2b      	ldr	r2, [pc, #172]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a47e:	4b2a      	ldr	r3, [pc, #168]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	43db      	mvns	r3, r3
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	4013      	ands	r3, r2
 800a48c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a4a2:	4a21      	ldr	r2, [pc, #132]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a4a8:	4b1f      	ldr	r3, [pc, #124]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	43db      	mvns	r3, r3
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a4ce:	4a16      	ldr	r2, [pc, #88]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800a4d6:	4b14      	ldr	r3, [pc, #80]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	43db      	mvns	r3, r3
 800a4e2:	69fa      	ldr	r2, [r7, #28]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a4fc:	4a0a      	ldr	r2, [pc, #40]	; (800a528 <HAL_GPIO_Init+0x3a8>)
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	3301      	adds	r3, #1
 800a508:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	f47f ae3d 	bne.w	800a194 <HAL_GPIO_Init+0x14>
  }
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	3724      	adds	r7, #36	; 0x24
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	46022000 	.word	0x46022000
 800a52c:	002f7f7f 	.word	0x002f7f7f

0800a530 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a530:	b480      	push	{r7}
 800a532:	b089      	sub	sp, #36	; 0x24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a542:	e0bc      	b.n	800a6be <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a544:	2201      	movs	r2, #1
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	fa02 f303 	lsl.w	r3, r2, r3
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	4013      	ands	r3, r2
 800a550:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80ad 	beq.w	800a6b8 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a5e      	ldr	r2, [pc, #376]	; (800a6dc <HAL_GPIO_DeInit+0x1ac>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d115      	bne.n	800a592 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a566:	4a5e      	ldr	r2, [pc, #376]	; (800a6e0 <HAL_GPIO_DeInit+0x1b0>)
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a56e:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a570:	4a5b      	ldr	r2, [pc, #364]	; (800a6e0 <HAL_GPIO_DeInit+0x1b0>)
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	4413      	add	r3, r2
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a57c:	4b57      	ldr	r3, [pc, #348]	; (800a6dc <HAL_GPIO_DeInit+0x1ac>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	2101      	movs	r1, #1
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	fa01 f303 	lsl.w	r3, r1, r3
 800a588:	43db      	mvns	r3, r3
 800a58a:	4954      	ldr	r1, [pc, #336]	; (800a6dc <HAL_GPIO_DeInit+0x1ac>)
 800a58c:	4013      	ands	r3, r2
 800a58e:	600b      	str	r3, [r1, #0]
 800a590:	e053      	b.n	800a63a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a592:	4a54      	ldr	r2, [pc, #336]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	089b      	lsrs	r3, r3, #2
 800a598:	3318      	adds	r3, #24
 800a59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a59e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f003 0303 	and.w	r3, r3, #3
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	220f      	movs	r2, #15
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	0a9a      	lsrs	r2, r3, #10
 800a5b8:	4b4b      	ldr	r3, [pc, #300]	; (800a6e8 <HAL_GPIO_DeInit+0x1b8>)
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	f002 0203 	and.w	r2, r2, #3
 800a5c2:	00d2      	lsls	r2, r2, #3
 800a5c4:	4093      	lsls	r3, r2
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d136      	bne.n	800a63a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a5cc:	4b45      	ldr	r3, [pc, #276]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a5ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	4943      	ldr	r1, [pc, #268]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a5de:	4b41      	ldr	r3, [pc, #260]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a5e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	43db      	mvns	r3, r3
 800a5e8:	493e      	ldr	r1, [pc, #248]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a5f0:	4b3c      	ldr	r3, [pc, #240]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	43db      	mvns	r3, r3
 800a5f8:	493a      	ldr	r1, [pc, #232]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a5fe:	4b39      	ldr	r3, [pc, #228]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	43db      	mvns	r3, r3
 800a606:	4937      	ldr	r1, [pc, #220]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a608:	4013      	ands	r3, r2
 800a60a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	f003 0303 	and.w	r3, r3, #3
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	220f      	movs	r2, #15
 800a616:	fa02 f303 	lsl.w	r3, r2, r3
 800a61a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a61c:	4a31      	ldr	r2, [pc, #196]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	089b      	lsrs	r3, r3, #2
 800a622:	3318      	adds	r3, #24
 800a624:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	43da      	mvns	r2, r3
 800a62c:	482d      	ldr	r0, [pc, #180]	; (800a6e4 <HAL_GPIO_DeInit+0x1b4>)
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	089b      	lsrs	r3, r3, #2
 800a632:	400a      	ands	r2, r1
 800a634:	3318      	adds	r3, #24
 800a636:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	2103      	movs	r1, #3
 800a644:	fa01 f303 	lsl.w	r3, r1, r3
 800a648:	431a      	orrs	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	08da      	lsrs	r2, r3, #3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	3208      	adds	r2, #8
 800a656:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	220f      	movs	r2, #15
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	43db      	mvns	r3, r3
 800a66a:	69fa      	ldr	r2, [r7, #28]
 800a66c:	08d2      	lsrs	r2, r2, #3
 800a66e:	4019      	ands	r1, r3
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	3208      	adds	r2, #8
 800a674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	2103      	movs	r1, #3
 800a682:	fa01 f303 	lsl.w	r3, r1, r3
 800a686:	43db      	mvns	r3, r3
 800a688:	401a      	ands	r2, r3
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	2101      	movs	r1, #1
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	fa01 f303 	lsl.w	r3, r1, r3
 800a69a:	43db      	mvns	r3, r3
 800a69c:	401a      	ands	r2, r3
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	2103      	movs	r1, #3
 800a6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b0:	43db      	mvns	r3, r3
 800a6b2:	401a      	ands	r2, r3
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f47f af3c 	bne.w	800a544 <HAL_GPIO_DeInit+0x14>
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	bf00      	nop
 800a6d0:	3724      	adds	r7, #36	; 0x24
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	46020000 	.word	0x46020000
 800a6e0:	0801f688 	.word	0x0801f688
 800a6e4:	46022000 	.word	0x46022000
 800a6e8:	002f7f7f 	.word	0x002f7f7f

0800a6ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	807b      	strh	r3, [r7, #2]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6fc:	787b      	ldrb	r3, [r7, #1]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a702:	887a      	ldrh	r2, [r7, #2]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a708:	e002      	b.n	800a710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a70a:	887a      	ldrh	r2, [r7, #2]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a726:	4b0f      	ldr	r3, [pc, #60]	; (800a764 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	88fb      	ldrh	r3, [r7, #6]
 800a72c:	4013      	ands	r3, r2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d006      	beq.n	800a740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a732:	4a0c      	ldr	r2, [pc, #48]	; (800a764 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a734:	88fb      	ldrh	r3, [r7, #6]
 800a736:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f00b fed2 	bl	80164e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a740:	4b08      	ldr	r3, [pc, #32]	; (800a764 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	4013      	ands	r3, r2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d006      	beq.n	800a75a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a74c:	4a05      	ldr	r2, [pc, #20]	; (800a764 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a74e:	88fb      	ldrh	r3, [r7, #6]
 800a750:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a752:	88fb      	ldrh	r3, [r7, #6]
 800a754:	4618      	mov	r0, r3
 800a756:	f000 f807 	bl	800a768 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a75a:	bf00      	nop
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	46022000 	.word	0x46022000

0800a768 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e081      	b.n	800a894 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7f8 f9b1 	bl	8002b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2224      	movs	r2, #36	; 0x24
 800a7ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f022 0201 	bic.w	r2, r2, #1
 800a7c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a7ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d107      	bne.n	800a7f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689a      	ldr	r2, [r3, #8]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7f4:	609a      	str	r2, [r3, #8]
 800a7f6:	e006      	b.n	800a806 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a804:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d104      	bne.n	800a818 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a816:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a82a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a83a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691a      	ldr	r2, [r3, #16]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	69d9      	ldr	r1, [r3, #28]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a1a      	ldr	r2, [r3, #32]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	430a      	orrs	r2, r1
 800a864:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f042 0201 	orr.w	r2, r2, #1
 800a874:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b20      	cmp	r3, #32
 800a8b0:	d138      	bne.n	800a924 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e032      	b.n	800a926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2224      	movs	r2, #36	; 0x24
 800a8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0201 	bic.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6819      	ldr	r1, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0201 	orr.w	r2, r2, #1
 800a90e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2220      	movs	r2, #32
 800a914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	e000      	b.n	800a926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a924:	2302      	movs	r3, #2
  }
}
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a932:	b480      	push	{r7}
 800a934:	b085      	sub	sp, #20
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b20      	cmp	r3, #32
 800a946:	d139      	bne.n	800a9bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d101      	bne.n	800a956 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a952:	2302      	movs	r3, #2
 800a954:	e033      	b.n	800a9be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2224      	movs	r2, #36	; 0x24
 800a962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0201 	bic.w	r2, r2, #1
 800a974:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a984:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	021b      	lsls	r3, r3, #8
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0201 	orr.w	r2, r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2220      	movs	r2, #32
 800a9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e000      	b.n	800a9be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a9bc:	2302      	movs	r3, #2
  }
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
	...

0800a9cc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800a9d8:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]
 800a9e8:	e007      	b.n	800a9fa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800a9ea:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f023 0204 	bic.w	r2, r3, #4
 800a9f2:	4905      	ldr	r1, [pc, #20]	; (800aa08 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	600b      	str	r3, [r1, #0]
  }

  return status;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	40030400 	.word	0x40030400

0800aa0c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800aa10:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <HAL_ICACHE_Enable+0x1c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a04      	ldr	r2, [pc, #16]	; (800aa28 <HAL_ICACHE_Enable+0x1c>)
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	40030400 	.word	0x40030400

0800aa2c <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d102      	bne.n	800aa44 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	73fb      	strb	r3, [r7, #15]
 800aa42:	e141      	b.n	800acc8 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f947 	bl	800acdc <MDF_GetHandleNumberFromInstance>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	4a86      	ldr	r2, [pc, #536]	; (800ac6c <HAL_MDF_Init+0x240>)
 800aa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]
 800aa5e:	e133      	b.n	800acc8 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7f7 fe1d 	bl	80026a0 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800aa66:	4b82      	ldr	r3, [pc, #520]	; (800ac70 <HAL_MDF_Init+0x244>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d11d      	bne.n	800aaaa <HAL_MDF_Init+0x7e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a80      	ldr	r2, [pc, #512]	; (800ac74 <HAL_MDF_Init+0x248>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d023      	beq.n	800aac0 <HAL_MDF_Init+0x94>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a7e      	ldr	r2, [pc, #504]	; (800ac78 <HAL_MDF_Init+0x24c>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d01e      	beq.n	800aac0 <HAL_MDF_Init+0x94>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a7d      	ldr	r2, [pc, #500]	; (800ac7c <HAL_MDF_Init+0x250>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d019      	beq.n	800aac0 <HAL_MDF_Init+0x94>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a7b      	ldr	r2, [pc, #492]	; (800ac80 <HAL_MDF_Init+0x254>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d014      	beq.n	800aac0 <HAL_MDF_Init+0x94>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a7a      	ldr	r2, [pc, #488]	; (800ac84 <HAL_MDF_Init+0x258>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00f      	beq.n	800aac0 <HAL_MDF_Init+0x94>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a78      	ldr	r2, [pc, #480]	; (800ac88 <HAL_MDF_Init+0x25c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00a      	beq.n	800aac0 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800aaaa:	4b78      	ldr	r3, [pc, #480]	; (800ac8c <HAL_MDF_Init+0x260>)
 800aaac:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f040 8090 	bne.w	800abd4 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a75      	ldr	r2, [pc, #468]	; (800ac90 <HAL_MDF_Init+0x264>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	f040 808a 	bne.w	800abd4 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a72      	ldr	r2, [pc, #456]	; (800ac90 <HAL_MDF_Init+0x264>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d101      	bne.n	800aace <HAL_MDF_Init+0xa2>
 800aaca:	4b72      	ldr	r3, [pc, #456]	; (800ac94 <HAL_MDF_Init+0x268>)
 800aacc:	e000      	b.n	800aad0 <HAL_MDF_Init+0xa4>
 800aace:	4b72      	ldr	r3, [pc, #456]	; (800ac98 <HAL_MDF_Init+0x26c>)
 800aad0:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	da02      	bge.n	800aae0 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	73fb      	strb	r3, [r7, #15]
 800aade:	e079      	b.n	800abd4 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a63      	ldr	r2, [pc, #396]	; (800ac74 <HAL_MDF_Init+0x248>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d018      	beq.n	800ab1c <HAL_MDF_Init+0xf0>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a62      	ldr	r2, [pc, #392]	; (800ac78 <HAL_MDF_Init+0x24c>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d013      	beq.n	800ab1c <HAL_MDF_Init+0xf0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a60      	ldr	r2, [pc, #384]	; (800ac7c <HAL_MDF_Init+0x250>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00e      	beq.n	800ab1c <HAL_MDF_Init+0xf0>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a5f      	ldr	r2, [pc, #380]	; (800ac80 <HAL_MDF_Init+0x254>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d009      	beq.n	800ab1c <HAL_MDF_Init+0xf0>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a5d      	ldr	r2, [pc, #372]	; (800ac84 <HAL_MDF_Init+0x258>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d004      	beq.n	800ab1c <HAL_MDF_Init+0xf0>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a5c      	ldr	r2, [pc, #368]	; (800ac88 <HAL_MDF_Init+0x25c>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d10d      	bne.n	800ab38 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	011b      	lsls	r3, r3, #4
 800ab32:	431a      	orrs	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	061b      	lsls	r3, r3, #24
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7b1b      	ldrb	r3, [r3, #12]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d137      	bne.n	800abc8 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800ab68:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800ab70:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800ab72:	431a      	orrs	r2, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7e1b      	ldrb	r3, [r3, #24]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d123      	bne.n	800abc8 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a3b      	ldr	r2, [pc, #236]	; (800ac74 <HAL_MDF_Init+0x248>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d012      	beq.n	800abb0 <HAL_MDF_Init+0x184>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a3a      	ldr	r2, [pc, #232]	; (800ac78 <HAL_MDF_Init+0x24c>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d00d      	beq.n	800abb0 <HAL_MDF_Init+0x184>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a38      	ldr	r2, [pc, #224]	; (800ac7c <HAL_MDF_Init+0x250>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d008      	beq.n	800abb0 <HAL_MDF_Init+0x184>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a37      	ldr	r2, [pc, #220]	; (800ac80 <HAL_MDF_Init+0x254>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d003      	beq.n	800abb0 <HAL_MDF_Init+0x184>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a35      	ldr	r2, [pc, #212]	; (800ac84 <HAL_MDF_Init+0x258>)
 800abae:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800abbc:	430b      	orrs	r3, r1
 800abbe:	4313      	orrs	r3, r2
 800abc0:	f043 0210 	orr.w	r2, r3, #16
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f043 0201 	orr.w	r2, r3, #1
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d128      	bne.n	800ac2c <HAL_MDF_Init+0x200>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d123      	bne.n	800ac2c <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	da02      	bge.n	800abf4 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	73fb      	strb	r3, [r7, #15]
 800abf2:	e01b      	b.n	800ac2c <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6819      	ldr	r1, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac06:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800ac0c:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac12:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0201 	orr.w	r2, r2, #1
 800ac2a:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d14a      	bne.n	800acc8 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f022 021f 	bic.w	r2, r2, #31
 800ac40:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6859      	ldr	r1, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a0d      	ldr	r2, [pc, #52]	; (800ac90 <HAL_MDF_Init+0x264>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d11e      	bne.n	800ac9c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 800ac5e:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <HAL_MDF_Init+0x260>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	4a09      	ldr	r2, [pc, #36]	; (800ac8c <HAL_MDF_Init+0x260>)
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	e01d      	b.n	800aca6 <HAL_MDF_Init+0x27a>
 800ac6a:	bf00      	nop
 800ac6c:	20002d48 	.word	0x20002d48
 800ac70:	20002d40 	.word	0x20002d40
 800ac74:	40025080 	.word	0x40025080
 800ac78:	40025100 	.word	0x40025100
 800ac7c:	40025180 	.word	0x40025180
 800ac80:	40025200 	.word	0x40025200
 800ac84:	40025280 	.word	0x40025280
 800ac88:	40025300 	.word	0x40025300
 800ac8c:	20002d44 	.word	0x20002d44
 800ac90:	46024080 	.word	0x46024080
 800ac94:	46024000 	.word	0x46024000
 800ac98:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 800ac9c:	4b0d      	ldr	r3, [pc, #52]	; (800acd4 <HAL_MDF_Init+0x2a8>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3301      	adds	r3, #1
 800aca2:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <HAL_MDF_Init+0x2a8>)
 800aca4:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 f816 	bl	800acdc <MDF_GetHandleNumberFromInstance>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4909      	ldr	r1, [pc, #36]	; (800acd8 <HAL_MDF_Init+0x2ac>)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20002d40 	.word	0x20002d40
 800acd8:	20002d48 	.word	0x20002d48

0800acdc <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a19      	ldr	r2, [pc, #100]	; (800ad4c <MDF_GetHandleNumberFromInstance+0x70>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d102      	bne.n	800acf2 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 800acec:	2300      	movs	r3, #0
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e024      	b.n	800ad3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a16      	ldr	r2, [pc, #88]	; (800ad50 <MDF_GetHandleNumberFromInstance+0x74>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d102      	bne.n	800ad00 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 800acfa:	2301      	movs	r3, #1
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	e01d      	b.n	800ad3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a14      	ldr	r2, [pc, #80]	; (800ad54 <MDF_GetHandleNumberFromInstance+0x78>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d102      	bne.n	800ad0e <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 800ad08:	2302      	movs	r3, #2
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	e016      	b.n	800ad3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a11      	ldr	r2, [pc, #68]	; (800ad58 <MDF_GetHandleNumberFromInstance+0x7c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d102      	bne.n	800ad1c <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 800ad16:	2303      	movs	r3, #3
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	e00f      	b.n	800ad3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a0f      	ldr	r2, [pc, #60]	; (800ad5c <MDF_GetHandleNumberFromInstance+0x80>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d102      	bne.n	800ad2a <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 800ad24:	2304      	movs	r3, #4
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	e008      	b.n	800ad3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a0c      	ldr	r2, [pc, #48]	; (800ad60 <MDF_GetHandleNumberFromInstance+0x84>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d102      	bne.n	800ad38 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 800ad32:	2305      	movs	r3, #5
 800ad34:	60fb      	str	r3, [r7, #12]
 800ad36:	e001      	b.n	800ad3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 800ad38:	2306      	movs	r3, #6
 800ad3a:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	40025080 	.word	0x40025080
 800ad50:	40025100 	.word	0x40025100
 800ad54:	40025180 	.word	0x40025180
 800ad58:	40025200 	.word	0x40025200
 800ad5c:	40025280 	.word	0x40025280
 800ad60:	40025300 	.word	0x40025300

0800ad64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad66:	b08f      	sub	sp, #60	; 0x3c
 800ad68:	af0a      	add	r7, sp, #40	; 0x28
 800ad6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e116      	b.n	800afa4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d106      	bne.n	800ad96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7f8 fcbd 	bl	8003710 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2203      	movs	r2, #3
 800ad9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d102      	bne.n	800adb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f008 fb36 	bl	8013426 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	687e      	ldr	r6, [r7, #4]
 800adc2:	466d      	mov	r5, sp
 800adc4:	f106 0410 	add.w	r4, r6, #16
 800adc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800adca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800adcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800adce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800add0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800add4:	e885 0003 	stmia.w	r5, {r0, r1}
 800add8:	1d33      	adds	r3, r6, #4
 800adda:	cb0e      	ldmia	r3, {r1, r2, r3}
 800addc:	6838      	ldr	r0, [r7, #0]
 800adde:	f008 fa43 	bl	8013268 <USB_CoreInit>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d005      	beq.n	800adf4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2202      	movs	r2, #2
 800adec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0d7      	b.n	800afa4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2100      	movs	r1, #0
 800adfa:	4618      	mov	r0, r3
 800adfc:	f008 fb24 	bl	8013448 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae00:	2300      	movs	r3, #0
 800ae02:	73fb      	strb	r3, [r7, #15]
 800ae04:	e04a      	b.n	800ae9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ae06:	7bfa      	ldrb	r2, [r7, #15]
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	333d      	adds	r3, #61	; 0x3d
 800ae16:	2201      	movs	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ae1a:	7bfa      	ldrb	r2, [r7, #15]
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	440b      	add	r3, r1
 800ae28:	333c      	adds	r3, #60	; 0x3c
 800ae2a:	7bfa      	ldrb	r2, [r7, #15]
 800ae2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ae2e:	7bfa      	ldrb	r2, [r7, #15]
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	b298      	uxth	r0, r3
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	4613      	mov	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	440b      	add	r3, r1
 800ae40:	3344      	adds	r3, #68	; 0x44
 800ae42:	4602      	mov	r2, r0
 800ae44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ae46:	7bfa      	ldrb	r2, [r7, #15]
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	3340      	adds	r3, #64	; 0x40
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ae5a:	7bfa      	ldrb	r2, [r7, #15]
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	440b      	add	r3, r1
 800ae68:	3348      	adds	r3, #72	; 0x48
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae6e:	7bfa      	ldrb	r2, [r7, #15]
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	00db      	lsls	r3, r3, #3
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	440b      	add	r3, r1
 800ae7c:	334c      	adds	r3, #76	; 0x4c
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae82:	7bfa      	ldrb	r2, [r7, #15]
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4613      	mov	r3, r2
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	440b      	add	r3, r1
 800ae90:	3354      	adds	r3, #84	; 0x54
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	73fb      	strb	r3, [r7, #15]
 800ae9c:	7bfa      	ldrb	r2, [r7, #15]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d3af      	bcc.n	800ae06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]
 800aeaa:	e044      	b.n	800af36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aeac:	7bfa      	ldrb	r2, [r7, #15]
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	440b      	add	r3, r1
 800aeba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aec2:	7bfa      	ldrb	r2, [r7, #15]
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	00db      	lsls	r3, r3, #3
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800aed4:	7bfa      	ldrb	r2, [r7, #15]
 800aed6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aed8:	7bfa      	ldrb	r2, [r7, #15]
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aeee:	7bfa      	ldrb	r2, [r7, #15]
 800aef0:	6879      	ldr	r1, [r7, #4]
 800aef2:	4613      	mov	r3, r2
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800af04:	7bfa      	ldrb	r2, [r7, #15]
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	4613      	mov	r3, r2
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	4413      	add	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	440b      	add	r3, r1
 800af12:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800af1a:	7bfa      	ldrb	r2, [r7, #15]
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	4613      	mov	r3, r2
 800af20:	00db      	lsls	r3, r3, #3
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	440b      	add	r3, r1
 800af28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800af2c:	2200      	movs	r2, #0
 800af2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	3301      	adds	r3, #1
 800af34:	73fb      	strb	r3, [r7, #15]
 800af36:	7bfa      	ldrb	r2, [r7, #15]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d3b5      	bcc.n	800aeac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	603b      	str	r3, [r7, #0]
 800af46:	687e      	ldr	r6, [r7, #4]
 800af48:	466d      	mov	r5, sp
 800af4a:	f106 0410 	add.w	r4, r6, #16
 800af4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af56:	e894 0003 	ldmia.w	r4, {r0, r1}
 800af5a:	e885 0003 	stmia.w	r5, {r0, r1}
 800af5e:	1d33      	adds	r3, r6, #4
 800af60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af62:	6838      	ldr	r0, [r7, #0]
 800af64:	f008 fabc 	bl	80134e0 <USB_DevInit>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d005      	beq.n	800af7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2202      	movs	r2, #2
 800af72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e014      	b.n	800afa4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d102      	bne.n	800af98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f001 f988 	bl	800c2a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f009 fbee 	bl	801477e <USB_DevDisconnect>

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_PCD_Start+0x1c>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e01c      	b.n	800b002 <HAL_PCD_Start+0x56>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (STM32U575xx) || defined (STM32U585xx)
  if (hpcd->Init.battery_charging_enable == 1U)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d105      	bne.n	800afe4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f008 fa0b 	bl	8013404 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f009 fba2 	bl	801473c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b00a:	b590      	push	{r4, r7, lr}
 800b00c:	b08d      	sub	sp, #52	; 0x34
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4618      	mov	r0, r3
 800b022:	f009 fc60 	bl	80148e6 <USB_GetMode>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 84b7 	bne.w	800b99c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4618      	mov	r0, r3
 800b034:	f009 fbc4 	bl	80147c0 <USB_ReadInterrupts>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 84ad 	beq.w	800b99a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	0a1b      	lsrs	r3, r3, #8
 800b04a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4618      	mov	r0, r3
 800b05a:	f009 fbb1 	bl	80147c0 <USB_ReadInterrupts>
 800b05e:	4603      	mov	r3, r0
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b02      	cmp	r3, #2
 800b066:	d107      	bne.n	800b078 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	695a      	ldr	r2, [r3, #20]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f002 0202 	and.w	r2, r2, #2
 800b076:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f009 fb9f 	bl	80147c0 <USB_ReadInterrupts>
 800b082:	4603      	mov	r3, r0
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d161      	bne.n	800b150 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	699a      	ldr	r2, [r3, #24]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f022 0210 	bic.w	r2, r2, #16
 800b09a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	f003 020f 	and.w	r2, r3, #15
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	0c5b      	lsrs	r3, r3, #17
 800b0c0:	f003 030f 	and.w	r3, r3, #15
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d124      	bne.n	800b112 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d035      	beq.n	800b140 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	091b      	lsrs	r3, r3, #4
 800b0dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b0de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	6a38      	ldr	r0, [r7, #32]
 800b0e8:	f009 f9d6 	bl	8014498 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	691a      	ldr	r2, [r3, #16]
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	091b      	lsrs	r3, r3, #4
 800b0f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0f8:	441a      	add	r2, r3
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	6a1a      	ldr	r2, [r3, #32]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	091b      	lsrs	r3, r3, #4
 800b106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b10a:	441a      	add	r2, r3
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	621a      	str	r2, [r3, #32]
 800b110:	e016      	b.n	800b140 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	0c5b      	lsrs	r3, r3, #17
 800b116:	f003 030f 	and.w	r3, r3, #15
 800b11a:	2b06      	cmp	r3, #6
 800b11c:	d110      	bne.n	800b140 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b124:	2208      	movs	r2, #8
 800b126:	4619      	mov	r1, r3
 800b128:	6a38      	ldr	r0, [r7, #32]
 800b12a:	f009 f9b5 	bl	8014498 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	6a1a      	ldr	r2, [r3, #32]
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	091b      	lsrs	r3, r3, #4
 800b136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b13a:	441a      	add	r2, r3
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	699a      	ldr	r2, [r3, #24]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f042 0210 	orr.w	r2, r2, #16
 800b14e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f009 fb33 	bl	80147c0 <USB_ReadInterrupts>
 800b15a:	4603      	mov	r3, r0
 800b15c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b160:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b164:	f040 80a7 	bne.w	800b2b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b168:	2300      	movs	r3, #0
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4618      	mov	r0, r3
 800b172:	f009 fb38 	bl	80147e6 <USB_ReadDevAllOutEpInterrupt>
 800b176:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b178:	e099      	b.n	800b2ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 808e 	beq.w	800b2a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18c:	b2d2      	uxtb	r2, r2
 800b18e:	4611      	mov	r1, r2
 800b190:	4618      	mov	r0, r3
 800b192:	f009 fb5c 	bl	801484e <USB_ReadDevOutEPInterrupt>
 800b196:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00c      	beq.n	800b1bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b1b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fef0 	bl	800bf9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f003 0308 	and.w	r3, r3, #8
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00c      	beq.n	800b1e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	2308      	movs	r3, #8
 800b1d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 ffc6 	bl	800c16c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f003 0310 	and.w	r3, r3, #16
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d008      	beq.n	800b1fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	015a      	lsls	r2, r3, #5
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	2310      	movs	r3, #16
 800b1fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d030      	beq.n	800b268 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20e:	2b80      	cmp	r3, #128	; 0x80
 800b210:	d109      	bne.n	800b226 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b224:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b228:	4613      	mov	r3, r2
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	4413      	add	r3, r2
 800b238:	3304      	adds	r3, #4
 800b23a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	78db      	ldrb	r3, [r3, #3]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d108      	bne.n	800b256 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	2200      	movs	r2, #0
 800b248:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f00b fbdb 	bl	8016a0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b262:	461a      	mov	r2, r3
 800b264:	2302      	movs	r3, #2
 800b266:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f003 0320 	and.w	r3, r3, #32
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d008      	beq.n	800b284 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27e:	461a      	mov	r2, r3
 800b280:	2320      	movs	r3, #32
 800b282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b29a:	461a      	mov	r2, r3
 800b29c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f47f af62 	bne.w	800b17a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f009 fa80 	bl	80147c0 <USB_ReadInterrupts>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2ca:	f040 80db 	bne.w	800b484 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f009 faa1 	bl	801481a <USB_ReadDevAllInEpInterrupt>
 800b2d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b2de:	e0cd      	b.n	800b47c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 80c2 	beq.w	800b470 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2f2:	b2d2      	uxtb	r2, r2
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f009 fac7 	bl	801488a <USB_ReadDevInEPInterrupt>
 800b2fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d057      	beq.n	800b3b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	f003 030f 	and.w	r3, r3, #15
 800b30e:	2201      	movs	r2, #1
 800b310:	fa02 f303 	lsl.w	r3, r2, r3
 800b314:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	43db      	mvns	r3, r3
 800b322:	69f9      	ldr	r1, [r7, #28]
 800b324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b328:	4013      	ands	r3, r2
 800b32a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	015a      	lsls	r2, r3, #5
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	4413      	add	r3, r2
 800b334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b338:	461a      	mov	r2, r3
 800b33a:	2301      	movs	r3, #1
 800b33c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d132      	bne.n	800b3ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34a:	4613      	mov	r3, r2
 800b34c:	00db      	lsls	r3, r3, #3
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	440b      	add	r3, r1
 800b354:	334c      	adds	r3, #76	; 0x4c
 800b356:	6819      	ldr	r1, [r3, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35c:	4613      	mov	r3, r2
 800b35e:	00db      	lsls	r3, r3, #3
 800b360:	4413      	add	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4403      	add	r3, r0
 800b366:	3348      	adds	r3, #72	; 0x48
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4419      	add	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b370:	4613      	mov	r3, r2
 800b372:	00db      	lsls	r3, r3, #3
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4403      	add	r3, r0
 800b37a:	334c      	adds	r3, #76	; 0x4c
 800b37c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	2b00      	cmp	r3, #0
 800b382:	d113      	bne.n	800b3ac <HAL_PCD_IRQHandler+0x3a2>
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b388:	4613      	mov	r3, r2
 800b38a:	00db      	lsls	r3, r3, #3
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	440b      	add	r3, r1
 800b392:	3354      	adds	r3, #84	; 0x54
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d108      	bne.n	800b3ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6818      	ldr	r0, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	f009 face 	bl	8014948 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f00b fa77 	bl	80168a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f003 0308 	and.w	r3, r3, #8
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d008      	beq.n	800b3d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	2308      	movs	r3, #8
 800b3d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	f003 0310 	and.w	r3, r3, #16
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d008      	beq.n	800b3f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e0:	015a      	lsls	r2, r3, #5
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	2310      	movs	r3, #16
 800b3ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d008      	beq.n	800b40c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	015a      	lsls	r2, r3, #5
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4413      	add	r3, r2
 800b402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b406:	461a      	mov	r2, r3
 800b408:	2340      	movs	r3, #64	; 0x40
 800b40a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d023      	beq.n	800b45e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b418:	6a38      	ldr	r0, [r7, #32]
 800b41a:	f008 f9af 	bl	801377c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b420:	4613      	mov	r3, r2
 800b422:	00db      	lsls	r3, r3, #3
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	3338      	adds	r3, #56	; 0x38
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	3304      	adds	r3, #4
 800b430:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	78db      	ldrb	r3, [r3, #3]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d108      	bne.n	800b44c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2200      	movs	r2, #0
 800b43e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	b2db      	uxtb	r3, r3
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f00b faf2 	bl	8016a30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	015a      	lsls	r2, r3, #5
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	4413      	add	r3, r2
 800b454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b458:	461a      	mov	r2, r3
 800b45a:	2302      	movs	r3, #2
 800b45c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fd08 	bl	800be80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	3301      	adds	r3, #1
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	085b      	lsrs	r3, r3, #1
 800b47a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f47f af2e 	bne.w	800b2e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4618      	mov	r0, r3
 800b48a:	f009 f999 	bl	80147c0 <USB_ReadInterrupts>
 800b48e:	4603      	mov	r3, r0
 800b490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b498:	d122      	bne.n	800b4e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	69fa      	ldr	r2, [r7, #28]
 800b4a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4a8:	f023 0301 	bic.w	r3, r3, #1
 800b4ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d108      	bne.n	800b4ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 ff14 	bl	800c2f0 <HAL_PCDEx_LPM_Callback>
 800b4c8:	e002      	b.n	800b4d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f00b fa76 	bl	80169bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	695a      	ldr	r2, [r3, #20]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b4de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f009 f96b 	bl	80147c0 <USB_ReadInterrupts>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f4:	d112      	bne.n	800b51c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	f003 0301 	and.w	r3, r3, #1
 800b502:	2b01      	cmp	r3, #1
 800b504:	d102      	bne.n	800b50c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f00b fa14 	bl	8016934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	695a      	ldr	r2, [r3, #20]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b51a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	f009 f94d 	bl	80147c0 <USB_ReadInterrupts>
 800b526:	4603      	mov	r3, r0
 800b528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b52c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b530:	d121      	bne.n	800b576 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	695a      	ldr	r2, [r3, #20]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b540:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d111      	bne.n	800b570 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b55a:	089b      	lsrs	r3, r3, #2
 800b55c:	f003 020f 	and.w	r2, r3, #15
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b566:	2101      	movs	r1, #1
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fec1 	bl	800c2f0 <HAL_PCDEx_LPM_Callback>
 800b56e:	e002      	b.n	800b576 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f00b f9df 	bl	8016934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f009 f920 	bl	80147c0 <USB_ReadInterrupts>
 800b580:	4603      	mov	r3, r0
 800b582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b58a:	f040 80b7 	bne.w	800b6fc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	69fa      	ldr	r2, [r7, #28]
 800b598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b59c:	f023 0301 	bic.w	r3, r3, #1
 800b5a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2110      	movs	r1, #16
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f008 f8e7 	bl	801377c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5b2:	e046      	b.n	800b642 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b5c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5d8:	0151      	lsls	r1, r2, #5
 800b5da:	69fa      	ldr	r2, [r7, #28]
 800b5dc:	440a      	add	r2, r1
 800b5de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	015a      	lsls	r2, r3, #5
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b5fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	4413      	add	r3, r2
 800b604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b60c:	0151      	lsls	r1, r2, #5
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	440a      	add	r2, r1
 800b612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b61a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	69fa      	ldr	r2, [r7, #28]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b63a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	3301      	adds	r3, #1
 800b640:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b648:	429a      	cmp	r2, r3
 800b64a:	d3b3      	bcc.n	800b5b4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	69fa      	ldr	r2, [r7, #28]
 800b656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b65a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b65e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b664:	2b00      	cmp	r3, #0
 800b666:	d016      	beq.n	800b696 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b672:	69fa      	ldr	r2, [r7, #28]
 800b674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b678:	f043 030b 	orr.w	r3, r3, #11
 800b67c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b688:	69fa      	ldr	r2, [r7, #28]
 800b68a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b68e:	f043 030b 	orr.w	r3, r3, #11
 800b692:	6453      	str	r3, [r2, #68]	; 0x44
 800b694:	e015      	b.n	800b6c2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	69fa      	ldr	r2, [r7, #28]
 800b6a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b6a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b6ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	69fa      	ldr	r2, [r7, #28]
 800b6b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6bc:	f043 030b 	orr.w	r3, r3, #11
 800b6c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	69fa      	ldr	r2, [r7, #28]
 800b6cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b6d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f009 f92e 	bl	8014948 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	695a      	ldr	r2, [r3, #20]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b6fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4618      	mov	r0, r3
 800b702:	f009 f85d 	bl	80147c0 <USB_ReadInterrupts>
 800b706:	4603      	mov	r3, r0
 800b708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b70c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b710:	d124      	bne.n	800b75c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4618      	mov	r0, r3
 800b718:	f009 f8f3 	bl	8014902 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f008 f8a8 	bl	8013876 <USB_GetDevSpeed>
 800b726:	4603      	mov	r3, r0
 800b728:	461a      	mov	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681c      	ldr	r4, [r3, #0]
 800b732:	f002 f87b 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800b736:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	461a      	mov	r2, r3
 800b740:	4620      	mov	r0, r4
 800b742:	f007 fdbd 	bl	80132c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f00b f8d5 	bl	80168f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	695a      	ldr	r2, [r3, #20]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b75a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4618      	mov	r0, r3
 800b762:	f009 f82d 	bl	80147c0 <USB_ReadInterrupts>
 800b766:	4603      	mov	r3, r0
 800b768:	f003 0308 	and.w	r3, r3, #8
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d10a      	bne.n	800b786 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f00b f8b2 	bl	80168da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	695a      	ldr	r2, [r3, #20]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f002 0208 	and.w	r2, r2, #8
 800b784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f009 f818 	bl	80147c0 <USB_ReadInterrupts>
 800b790:	4603      	mov	r3, r0
 800b792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b796:	2b80      	cmp	r3, #128	; 0x80
 800b798:	d122      	bne.n	800b7e0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7aa:	e014      	b.n	800b7d6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d105      	bne.n	800b7d0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fb27 	bl	800be1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d3e5      	bcc.n	800b7ac <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f008 ffeb 	bl	80147c0 <USB_ReadInterrupts>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7f4:	d13b      	bne.n	800b86e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7fa:	e02b      	b.n	800b854 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	4413      	add	r3, r2
 800b804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b810:	4613      	mov	r3, r2
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	440b      	add	r3, r1
 800b81a:	3340      	adds	r3, #64	; 0x40
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d115      	bne.n	800b84e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b822:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b824:	2b00      	cmp	r3, #0
 800b826:	da12      	bge.n	800b84e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b828:	6879      	ldr	r1, [r7, #4]
 800b82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b82c:	4613      	mov	r3, r2
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	4413      	add	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	440b      	add	r3, r1
 800b836:	333f      	adds	r3, #63	; 0x3f
 800b838:	2201      	movs	r2, #1
 800b83a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b844:	b2db      	uxtb	r3, r3
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fae8 	bl	800be1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	3301      	adds	r3, #1
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d3ce      	bcc.n	800b7fc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	695a      	ldr	r2, [r3, #20]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b86c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4618      	mov	r0, r3
 800b874:	f008 ffa4 	bl	80147c0 <USB_ReadInterrupts>
 800b878:	4603      	mov	r3, r0
 800b87a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b87e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b882:	d155      	bne.n	800b930 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b884:	2301      	movs	r3, #1
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
 800b888:	e045      	b.n	800b916 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b89e:	4613      	mov	r3, r2
 800b8a0:	00db      	lsls	r3, r3, #3
 800b8a2:	4413      	add	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	440b      	add	r3, r1
 800b8a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d12e      	bne.n	800b910 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b8b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	da2b      	bge.n	800b910 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b8c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d121      	bne.n	800b910 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	440b      	add	r3, r1
 800b8da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b8de:	2201      	movs	r2, #1
 800b8e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10a      	bne.n	800b910 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	69fa      	ldr	r2, [r7, #28]
 800b904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b90c:	6053      	str	r3, [r2, #4]
            break;
 800b90e:	e007      	b.n	800b920 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	3301      	adds	r3, #1
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d3b4      	bcc.n	800b88a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	695a      	ldr	r2, [r3, #20]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b92e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4618      	mov	r0, r3
 800b936:	f008 ff43 	bl	80147c0 <USB_ReadInterrupts>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b944:	d10a      	bne.n	800b95c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f00b f884 	bl	8016a54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	695a      	ldr	r2, [r3, #20]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b95a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4618      	mov	r0, r3
 800b962:	f008 ff2d 	bl	80147c0 <USB_ReadInterrupts>
 800b966:	4603      	mov	r3, r0
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d115      	bne.n	800b99c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	f003 0304 	and.w	r3, r3, #4
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d002      	beq.n	800b988 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f00b f874 	bl	8016a70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6859      	ldr	r1, [r3, #4]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	430a      	orrs	r2, r1
 800b996:	605a      	str	r2, [r3, #4]
 800b998:	e000      	b.n	800b99c <HAL_PCD_IRQHandler+0x992>
      return;
 800b99a:	bf00      	nop
    }
  }
}
 800b99c:	3734      	adds	r7, #52	; 0x34
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd90      	pop	{r4, r7, pc}

0800b9a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b082      	sub	sp, #8
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <HAL_PCD_SetAddress+0x1a>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e013      	b.n	800b9e4 <HAL_PCD_SetAddress+0x42>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	78fa      	ldrb	r2, [r7, #3]
 800b9c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	78fa      	ldrb	r2, [r7, #3]
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f008 fe8b 	bl	80146f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	70fb      	strb	r3, [r7, #3]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	803b      	strh	r3, [r7, #0]
 800ba02:	4613      	mov	r3, r2
 800ba04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ba0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	da0f      	bge.n	800ba32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba12:	78fb      	ldrb	r3, [r7, #3]
 800ba14:	f003 020f 	and.w	r2, r3, #15
 800ba18:	4613      	mov	r3, r2
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	3338      	adds	r3, #56	; 0x38
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	4413      	add	r3, r2
 800ba26:	3304      	adds	r3, #4
 800ba28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	705a      	strb	r2, [r3, #1]
 800ba30:	e00f      	b.n	800ba52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba32:	78fb      	ldrb	r3, [r7, #3]
 800ba34:	f003 020f 	and.w	r2, r3, #15
 800ba38:	4613      	mov	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4413      	add	r3, r2
 800ba48:	3304      	adds	r3, #4
 800ba4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ba52:	78fb      	ldrb	r3, [r7, #3]
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ba5e:	883a      	ldrh	r2, [r7, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	78ba      	ldrb	r2, [r7, #2]
 800ba68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	785b      	ldrb	r3, [r3, #1]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d004      	beq.n	800ba7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ba7c:	78bb      	ldrb	r3, [r7, #2]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d102      	bne.n	800ba88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d101      	bne.n	800ba96 <HAL_PCD_EP_Open+0xaa>
 800ba92:	2302      	movs	r3, #2
 800ba94:	e00e      	b.n	800bab4 <HAL_PCD_EP_Open+0xc8>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f007 ff0b 	bl	80138c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800bab2:	7afb      	ldrb	r3, [r7, #11]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	da0f      	bge.n	800baf0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	f003 020f 	and.w	r2, r3, #15
 800bad6:	4613      	mov	r3, r2
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	4413      	add	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	3338      	adds	r3, #56	; 0x38
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	4413      	add	r3, r2
 800bae4:	3304      	adds	r3, #4
 800bae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2201      	movs	r2, #1
 800baec:	705a      	strb	r2, [r3, #1]
 800baee:	e00f      	b.n	800bb10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	f003 020f 	and.w	r2, r3, #15
 800baf6:	4613      	mov	r3, r2
 800baf8:	00db      	lsls	r3, r3, #3
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	4413      	add	r3, r2
 800bb06:	3304      	adds	r3, #4
 800bb08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	f003 030f 	and.w	r3, r3, #15
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d101      	bne.n	800bb2a <HAL_PCD_EP_Close+0x6e>
 800bb26:	2302      	movs	r3, #2
 800bb28:	e00e      	b.n	800bb48 <HAL_PCD_EP_Close+0x8c>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68f9      	ldr	r1, [r7, #12]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f007 ff49 	bl	80139d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	607a      	str	r2, [r7, #4]
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb60:	7afb      	ldrb	r3, [r7, #11]
 800bb62:	f003 020f 	and.w	r2, r3, #15
 800bb66:	4613      	mov	r3, r2
 800bb68:	00db      	lsls	r3, r3, #3
 800bb6a:	4413      	add	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	4413      	add	r3, r2
 800bb76:	3304      	adds	r3, #4
 800bb78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb92:	7afb      	ldrb	r3, [r7, #11]
 800bb94:	f003 030f 	and.w	r3, r3, #15
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d102      	bne.n	800bbac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bbac:	7afb      	ldrb	r3, [r7, #11]
 800bbae:	f003 030f 	and.w	r3, r3, #15
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d109      	bne.n	800bbca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6818      	ldr	r0, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	6979      	ldr	r1, [r7, #20]
 800bbc4:	f008 fa28 	bl	8014018 <USB_EP0StartXfer>
 800bbc8:	e008      	b.n	800bbdc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6818      	ldr	r0, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	6979      	ldr	r1, [r7, #20]
 800bbd8:	f007 ffd6 	bl	8013b88 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b083      	sub	sp, #12
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bbf2:	78fb      	ldrb	r3, [r7, #3]
 800bbf4:	f003 020f 	and.w	r2, r3, #15
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	00db      	lsls	r3, r3, #3
 800bbfe:	4413      	add	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	440b      	add	r3, r1
 800bc04:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800bc08:	681b      	ldr	r3, [r3, #0]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b086      	sub	sp, #24
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	60f8      	str	r0, [r7, #12]
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	603b      	str	r3, [r7, #0]
 800bc22:	460b      	mov	r3, r1
 800bc24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc26:	7afb      	ldrb	r3, [r7, #11]
 800bc28:	f003 020f 	and.w	r2, r3, #15
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	3338      	adds	r3, #56	; 0x38
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	2201      	movs	r2, #1
 800bc54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc56:	7afb      	ldrb	r3, [r7, #11]
 800bc58:	f003 030f 	and.w	r3, r3, #15
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d102      	bne.n	800bc70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bc70:	7afb      	ldrb	r3, [r7, #11]
 800bc72:	f003 030f 	and.w	r3, r3, #15
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d109      	bne.n	800bc8e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	461a      	mov	r2, r3
 800bc86:	6979      	ldr	r1, [r7, #20]
 800bc88:	f008 f9c6 	bl	8014018 <USB_EP0StartXfer>
 800bc8c:	e008      	b.n	800bca0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6818      	ldr	r0, [r3, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	461a      	mov	r2, r3
 800bc9a:	6979      	ldr	r1, [r7, #20]
 800bc9c:	f007 ff74 	bl	8013b88 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bcb6:	78fb      	ldrb	r3, [r7, #3]
 800bcb8:	f003 020f 	and.w	r2, r3, #15
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d901      	bls.n	800bcc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e050      	b.n	800bd6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bcc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	da0f      	bge.n	800bcf0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	f003 020f 	and.w	r2, r3, #15
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	3338      	adds	r3, #56	; 0x38
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	4413      	add	r3, r2
 800bce4:	3304      	adds	r3, #4
 800bce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2201      	movs	r2, #1
 800bcec:	705a      	strb	r2, [r3, #1]
 800bcee:	e00d      	b.n	800bd0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bcf0:	78fa      	ldrb	r2, [r7, #3]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	4413      	add	r3, r2
 800bd02:	3304      	adds	r3, #4
 800bd04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bd12:	78fb      	ldrb	r3, [r7, #3]
 800bd14:	f003 030f 	and.w	r3, r3, #15
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d101      	bne.n	800bd2c <HAL_PCD_EP_SetStall+0x82>
 800bd28:	2302      	movs	r3, #2
 800bd2a:	e01e      	b.n	800bd6a <HAL_PCD_EP_SetStall+0xc0>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68f9      	ldr	r1, [r7, #12]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f008 fc04 	bl	8014548 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10a      	bne.n	800bd60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6818      	ldr	r0, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	b2d9      	uxtb	r1, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	f008 fdf4 	bl	8014948 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	f003 020f 	and.w	r2, r3, #15
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d901      	bls.n	800bd90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e042      	b.n	800be16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	da0f      	bge.n	800bdb8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd98:	78fb      	ldrb	r3, [r7, #3]
 800bd9a:	f003 020f 	and.w	r2, r3, #15
 800bd9e:	4613      	mov	r3, r2
 800bda0:	00db      	lsls	r3, r3, #3
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	3338      	adds	r3, #56	; 0x38
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4413      	add	r3, r2
 800bdac:	3304      	adds	r3, #4
 800bdae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	705a      	strb	r2, [r3, #1]
 800bdb6:	e00f      	b.n	800bdd8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bdb8:	78fb      	ldrb	r3, [r7, #3]
 800bdba:	f003 020f 	and.w	r2, r3, #15
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	3304      	adds	r3, #4
 800bdd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bdde:	78fb      	ldrb	r3, [r7, #3]
 800bde0:	f003 030f 	and.w	r3, r3, #15
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d101      	bne.n	800bdf8 <HAL_PCD_EP_ClrStall+0x86>
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	e00e      	b.n	800be16 <HAL_PCD_EP_ClrStall+0xa4>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68f9      	ldr	r1, [r7, #12]
 800be06:	4618      	mov	r0, r3
 800be08:	f008 fc0c 	bl	8014624 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b084      	sub	sp, #16
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800be2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da0c      	bge.n	800be4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be32:	78fb      	ldrb	r3, [r7, #3]
 800be34:	f003 020f 	and.w	r2, r3, #15
 800be38:	4613      	mov	r3, r2
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	3338      	adds	r3, #56	; 0x38
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	4413      	add	r3, r2
 800be46:	3304      	adds	r3, #4
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	e00c      	b.n	800be66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be4c:	78fb      	ldrb	r3, [r7, #3]
 800be4e:	f003 020f 	and.w	r2, r3, #15
 800be52:	4613      	mov	r3, r2
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	4413      	add	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	4413      	add	r3, r2
 800be62:	3304      	adds	r3, #4
 800be64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68f9      	ldr	r1, [r7, #12]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f008 fa2b 	bl	80142c8 <USB_EPStopXfer>
 800be72:	4603      	mov	r3, r0
 800be74:	72fb      	strb	r3, [r7, #11]

  return ret;
 800be76:	7afb      	ldrb	r3, [r7, #11]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	; 0x28
 800be84:	af02      	add	r7, sp, #8
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	4613      	mov	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	4413      	add	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	3338      	adds	r3, #56	; 0x38
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4413      	add	r3, r2
 800bea4:	3304      	adds	r3, #4
 800bea6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6a1a      	ldr	r2, [r3, #32]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d901      	bls.n	800beb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e06c      	b.n	800bf92 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	699a      	ldr	r2, [r3, #24]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	69fa      	ldr	r2, [r7, #28]
 800beca:	429a      	cmp	r2, r3
 800becc:	d902      	bls.n	800bed4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	3303      	adds	r3, #3
 800bed8:	089b      	lsrs	r3, r3, #2
 800beda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bedc:	e02b      	b.n	800bf36 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	699a      	ldr	r2, [r3, #24]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	69fa      	ldr	r2, [r7, #28]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d902      	bls.n	800befa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	3303      	adds	r3, #3
 800befe:	089b      	lsrs	r3, r3, #2
 800bf00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6919      	ldr	r1, [r3, #16]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	4603      	mov	r3, r0
 800bf18:	6978      	ldr	r0, [r7, #20]
 800bf1a:	f008 fa7f 	bl	801441c <USB_WritePacket>

    ep->xfer_buff  += len;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	691a      	ldr	r2, [r3, #16]
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	441a      	add	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6a1a      	ldr	r2, [r3, #32]
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	441a      	add	r2, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	015a      	lsls	r2, r3, #5
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d809      	bhi.n	800bf60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a1a      	ldr	r2, [r3, #32]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d203      	bcs.n	800bf60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1be      	bne.n	800bede <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	699a      	ldr	r2, [r3, #24]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6a1b      	ldr	r3, [r3, #32]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d811      	bhi.n	800bf90 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	f003 030f 	and.w	r3, r3, #15
 800bf72:	2201      	movs	r2, #1
 800bf74:	fa02 f303 	lsl.w	r3, r2, r3
 800bf78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	43db      	mvns	r3, r3
 800bf86:	6939      	ldr	r1, [r7, #16]
 800bf88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3720      	adds	r7, #32
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
	...

0800bf9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	333c      	adds	r3, #60	; 0x3c
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	015a      	lsls	r2, r3, #5
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d17b      	bne.n	800c0ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	f003 0308 	and.w	r3, r3, #8
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d015      	beq.n	800c008 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	4a61      	ldr	r2, [pc, #388]	; (800c164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	f240 80b9 	bls.w	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 80b3 	beq.w	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	015a      	lsls	r2, r3, #5
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	4413      	add	r3, r2
 800bffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bffe:	461a      	mov	r2, r3
 800c000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c004:	6093      	str	r3, [r2, #8]
 800c006:	e0a7      	b.n	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d009      	beq.n	800c026 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	015a      	lsls	r2, r3, #5
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c01e:	461a      	mov	r2, r3
 800c020:	2320      	movs	r3, #32
 800c022:	6093      	str	r3, [r2, #8]
 800c024:	e098      	b.n	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f040 8093 	bne.w	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	4a4b      	ldr	r2, [pc, #300]	; (800c164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d90f      	bls.n	800c05a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00a      	beq.n	800c05a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c050:	461a      	mov	r2, r3
 800c052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c056:	6093      	str	r3, [r2, #8]
 800c058:	e07e      	b.n	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	4613      	mov	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	4413      	add	r3, r2
 800c06c:	3304      	adds	r3, #4
 800c06e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	0159      	lsls	r1, r3, #5
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	440b      	add	r3, r1
 800c07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c086:	1ad2      	subs	r2, r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d114      	bne.n	800c0bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d109      	bne.n	800c0ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	f008 fc4e 	bl	8014948 <USB_EP0_OutStart>
 800c0ac:	e006      	b.n	800c0bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	691a      	ldr	r2, [r3, #16]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	441a      	add	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f00a fbd4 	bl	8016870 <HAL_PCD_DataOutStageCallback>
 800c0c8:	e046      	b.n	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	4a26      	ldr	r2, [pc, #152]	; (800c168 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d124      	bne.n	800c11c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00a      	beq.n	800c0f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0ee:	6093      	str	r3, [r2, #8]
 800c0f0:	e032      	b.n	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f003 0320 	and.w	r3, r3, #32
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d008      	beq.n	800c10e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	4413      	add	r3, r2
 800c104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c108:	461a      	mov	r2, r3
 800c10a:	2320      	movs	r3, #32
 800c10c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f00a fbab 	bl	8016870 <HAL_PCD_DataOutStageCallback>
 800c11a:	e01d      	b.n	800c158 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d114      	bne.n	800c14c <PCD_EP_OutXfrComplete_int+0x1b0>
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	4613      	mov	r3, r2
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	440b      	add	r3, r1
 800c130:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d108      	bne.n	800c14c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6818      	ldr	r0, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c144:	461a      	mov	r2, r3
 800c146:	2100      	movs	r1, #0
 800c148:	f008 fbfe 	bl	8014948 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f00a fb8c 	bl	8016870 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3720      	adds	r7, #32
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	4f54300a 	.word	0x4f54300a
 800c168:	4f54310a 	.word	0x4f54310a

0800c16c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	333c      	adds	r3, #60	; 0x3c
 800c184:	3304      	adds	r3, #4
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	4413      	add	r3, r2
 800c192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	4a15      	ldr	r2, [pc, #84]	; (800c1f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d90e      	bls.n	800c1c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d009      	beq.n	800c1c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f00a fb43 	bl	801684c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4a0a      	ldr	r2, [pc, #40]	; (800c1f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d90c      	bls.n	800c1e8 <PCD_EP_OutSetupPacket_int+0x7c>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d108      	bne.n	800c1e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	f008 fbb0 	bl	8014948 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	4f54300a 	.word	0x4f54300a

0800c1f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
 800c204:	4613      	mov	r3, r2
 800c206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d107      	bne.n	800c226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c216:	883b      	ldrh	r3, [r7, #0]
 800c218:	0419      	lsls	r1, r3, #16
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	430a      	orrs	r2, r1
 800c222:	629a      	str	r2, [r3, #40]	; 0x28
 800c224:	e028      	b.n	800c278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22c:	0c1b      	lsrs	r3, r3, #16
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	4413      	add	r3, r2
 800c232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
 800c238:	e00d      	b.n	800c256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	3340      	adds	r3, #64	; 0x40
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	0c1b      	lsrs	r3, r3, #16
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	4413      	add	r3, r2
 800c24e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	3301      	adds	r3, #1
 800c254:	73fb      	strb	r3, [r7, #15]
 800c256:	7bfa      	ldrb	r2, [r7, #15]
 800c258:	78fb      	ldrb	r3, [r7, #3]
 800c25a:	3b01      	subs	r3, #1
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d3ec      	bcc.n	800c23a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c260:	883b      	ldrh	r3, [r7, #0]
 800c262:	0418      	lsls	r0, r3, #16
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6819      	ldr	r1, [r3, #0]
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	3b01      	subs	r3, #1
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	4302      	orrs	r2, r0
 800c270:	3340      	adds	r3, #64	; 0x40
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	440b      	add	r3, r1
 800c276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c286:	b480      	push	{r7}
 800c288:	b083      	sub	sp, #12
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	460b      	mov	r3, r1
 800c290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	887a      	ldrh	r2, [r7, #2]
 800c298:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2da:	f043 0303 	orr.w	r3, r3, #3
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800c308:	b480      	push	{r7}
 800c30a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-M33 System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 800c30c:	4b05      	ldr	r3, [pc, #20]	; (800c324 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	4a04      	ldr	r2, [pc, #16]	; (800c324 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800c312:	f043 0302 	orr.w	r3, r3, #2
 800c316:	6113      	str	r3, [r2, #16]
}
 800c318:	bf00      	nop
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	e000ed00 	.word	0xe000ed00

0800c328 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800c330:	4b34      	ldr	r3, [pc, #208]	; (800c404 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c338:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d101      	bne.n	800c346 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	e057      	b.n	800c3f6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c34c:	d90a      	bls.n	800c364 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800c34e:	4b2d      	ldr	r3, [pc, #180]	; (800c404 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4313      	orrs	r3, r2
 800c35a:	4a2a      	ldr	r2, [pc, #168]	; (800c404 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c35c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c360:	60d3      	str	r3, [r2, #12]
 800c362:	e007      	b.n	800c374 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800c364:	4b27      	ldr	r3, [pc, #156]	; (800c404 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c36c:	4925      	ldr	r1, [pc, #148]	; (800c404 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4313      	orrs	r3, r2
 800c372:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c374:	4b24      	ldr	r3, [pc, #144]	; (800c408 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a24      	ldr	r2, [pc, #144]	; (800c40c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c37a:	fba2 2303 	umull	r2, r3, r2, r3
 800c37e:	099b      	lsrs	r3, r3, #6
 800c380:	2232      	movs	r2, #50	; 0x32
 800c382:	fb02 f303 	mul.w	r3, r2, r3
 800c386:	4a21      	ldr	r2, [pc, #132]	; (800c40c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c388:	fba2 2303 	umull	r2, r3, r2, r3
 800c38c:	099b      	lsrs	r3, r3, #6
 800c38e:	3301      	adds	r3, #1
 800c390:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c392:	e002      	b.n	800c39a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3b01      	subs	r3, #1
 800c398:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c39a:	4b1a      	ldr	r3, [pc, #104]	; (800c404 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d102      	bne.n	800c3ac <HAL_PWREx_ControlVoltageScaling+0x84>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1f3      	bne.n	800c394 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d01b      	beq.n	800c3ea <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c3b2:	4b15      	ldr	r3, [pc, #84]	; (800c408 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a15      	ldr	r2, [pc, #84]	; (800c40c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3bc:	099b      	lsrs	r3, r3, #6
 800c3be:	2232      	movs	r2, #50	; 0x32
 800c3c0:	fb02 f303 	mul.w	r3, r2, r3
 800c3c4:	4a11      	ldr	r2, [pc, #68]	; (800c40c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800c3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ca:	099b      	lsrs	r3, r3, #6
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c3d0:	e002      	b.n	800c3d8 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	; (800c404 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800c3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <HAL_PWREx_ControlVoltageScaling+0xc2>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1f3      	bne.n	800c3d2 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d101      	bne.n	800c3f4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e000      	b.n	800c3f6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	46020800 	.word	0x46020800
 800c408:	2000000c 	.word	0x2000000c
 800c40c:	10624dd3 	.word	0x10624dd3

0800c410 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c410:	b480      	push	{r7}
 800c412:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800c414:	4b04      	ldr	r3, [pc, #16]	; (800c428 <HAL_PWREx_GetVoltageRange+0x18>)
 800c416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	46020800 	.word	0x46020800

0800c42c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c42c:	b480      	push	{r7}
 800c42e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800c430:	4b05      	ldr	r3, [pc, #20]	; (800c448 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	4a04      	ldr	r2, [pc, #16]	; (800c448 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c43a:	6113      	str	r3, [r2, #16]
}
 800c43c:	bf00      	nop
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	46020800 	.word	0x46020800

0800c44c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c44c:	b480      	push	{r7}
 800c44e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c450:	4b05      	ldr	r3, [pc, #20]	; (800c468 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	4a04      	ldr	r2, [pc, #16]	; (800c468 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c45a:	6113      	str	r3, [r2, #16]
}
 800c45c:	bf00      	nop
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	46020800 	.word	0x46020800

0800c46c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800c470:	4b05      	ldr	r3, [pc, #20]	; (800c488 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c474:	4a04      	ldr	r2, [pc, #16]	; (800c488 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c476:	f043 0301 	orr.w	r3, r3, #1
 800c47a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800c47c:	bf00      	nop
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	46020800 	.word	0x46020800

0800c48c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08e      	sub	sp, #56	; 0x38
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c494:	2300      	movs	r3, #0
 800c496:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	f000 bec3 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4a6:	4b9c      	ldr	r3, [pc, #624]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	f003 030c 	and.w	r3, r3, #12
 800c4ae:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c4b0:	4b99      	ldr	r3, [pc, #612]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b4:	f003 0303 	and.w	r3, r3, #3
 800c4b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0310 	and.w	r3, r3, #16
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 8172 	beq.w	800c7ac <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d007      	beq.n	800c4de <HAL_RCC_OscConfig+0x52>
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	2b0c      	cmp	r3, #12
 800c4d2:	f040 80e4 	bne.w	800c69e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	f040 80e0 	bne.w	800c69e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c4de:	4b8e      	ldr	r3, [pc, #568]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 0304 	and.w	r3, r3, #4
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d006      	beq.n	800c4f8 <HAL_RCC_OscConfig+0x6c>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d102      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	f000 be9a 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4fc:	4b86      	ldr	r3, [pc, #536]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d004      	beq.n	800c512 <HAL_RCC_OscConfig+0x86>
 800c508:	4b83      	ldr	r3, [pc, #524]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c510:	e005      	b.n	800c51e <HAL_RCC_OscConfig+0x92>
 800c512:	4b81      	ldr	r3, [pc, #516]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c518:	041b      	lsls	r3, r3, #16
 800c51a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c51e:	4293      	cmp	r3, r2
 800c520:	d255      	bcs.n	800c5ce <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10a      	bne.n	800c53e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	4618      	mov	r0, r3
 800c52e:	f001 f9d3 	bl	800d8d8 <RCC_SetFlashLatencyFromMSIRange>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	f000 be77 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c53e:	4b76      	ldr	r3, [pc, #472]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	4a75      	ldr	r2, [pc, #468]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c548:	6093      	str	r3, [r2, #8]
 800c54a:	4b73      	ldr	r3, [pc, #460]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c556:	4970      	ldr	r1, [pc, #448]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c564:	d309      	bcc.n	800c57a <HAL_RCC_OscConfig+0xee>
 800c566:	4b6c      	ldr	r3, [pc, #432]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f023 021f 	bic.w	r2, r3, #31
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	4969      	ldr	r1, [pc, #420]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c574:	4313      	orrs	r3, r2
 800c576:	60cb      	str	r3, [r1, #12]
 800c578:	e07e      	b.n	800c678 <HAL_RCC_OscConfig+0x1ec>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57e:	2b00      	cmp	r3, #0
 800c580:	da0a      	bge.n	800c598 <HAL_RCC_OscConfig+0x10c>
 800c582:	4b65      	ldr	r3, [pc, #404]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a1b      	ldr	r3, [r3, #32]
 800c58e:	015b      	lsls	r3, r3, #5
 800c590:	4961      	ldr	r1, [pc, #388]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c592:	4313      	orrs	r3, r2
 800c594:	60cb      	str	r3, [r1, #12]
 800c596:	e06f      	b.n	800c678 <HAL_RCC_OscConfig+0x1ec>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5a0:	d30a      	bcc.n	800c5b8 <HAL_RCC_OscConfig+0x12c>
 800c5a2:	4b5d      	ldr	r3, [pc, #372]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6a1b      	ldr	r3, [r3, #32]
 800c5ae:	029b      	lsls	r3, r3, #10
 800c5b0:	4959      	ldr	r1, [pc, #356]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	60cb      	str	r3, [r1, #12]
 800c5b6:	e05f      	b.n	800c678 <HAL_RCC_OscConfig+0x1ec>
 800c5b8:	4b57      	ldr	r3, [pc, #348]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	03db      	lsls	r3, r3, #15
 800c5c6:	4954      	ldr	r1, [pc, #336]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60cb      	str	r3, [r1, #12]
 800c5cc:	e054      	b.n	800c678 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c5ce:	4b52      	ldr	r3, [pc, #328]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	4a51      	ldr	r2, [pc, #324]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c5d8:	6093      	str	r3, [r2, #8]
 800c5da:	4b4f      	ldr	r3, [pc, #316]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e6:	494c      	ldr	r1, [pc, #304]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c5f4:	d309      	bcc.n	800c60a <HAL_RCC_OscConfig+0x17e>
 800c5f6:	4b48      	ldr	r3, [pc, #288]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	f023 021f 	bic.w	r2, r3, #31
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	4945      	ldr	r1, [pc, #276]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c604:	4313      	orrs	r3, r2
 800c606:	60cb      	str	r3, [r1, #12]
 800c608:	e028      	b.n	800c65c <HAL_RCC_OscConfig+0x1d0>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60e:	2b00      	cmp	r3, #0
 800c610:	da0a      	bge.n	800c628 <HAL_RCC_OscConfig+0x19c>
 800c612:	4b41      	ldr	r3, [pc, #260]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	015b      	lsls	r3, r3, #5
 800c620:	493d      	ldr	r1, [pc, #244]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c622:	4313      	orrs	r3, r2
 800c624:	60cb      	str	r3, [r1, #12]
 800c626:	e019      	b.n	800c65c <HAL_RCC_OscConfig+0x1d0>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c630:	d30a      	bcc.n	800c648 <HAL_RCC_OscConfig+0x1bc>
 800c632:	4b39      	ldr	r3, [pc, #228]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	029b      	lsls	r3, r3, #10
 800c640:	4935      	ldr	r1, [pc, #212]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c642:	4313      	orrs	r3, r2
 800c644:	60cb      	str	r3, [r1, #12]
 800c646:	e009      	b.n	800c65c <HAL_RCC_OscConfig+0x1d0>
 800c648:	4b33      	ldr	r3, [pc, #204]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	03db      	lsls	r3, r3, #15
 800c656:	4930      	ldr	r1, [pc, #192]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c658:	4313      	orrs	r3, r2
 800c65a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c666:	4618      	mov	r0, r3
 800c668:	f001 f936 	bl	800d8d8 <RCC_SetFlashLatencyFromMSIRange>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d002      	beq.n	800c678 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	f000 bdda 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c678:	f001 f8d8 	bl	800d82c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c67c:	4b27      	ldr	r3, [pc, #156]	; (800c71c <HAL_RCC_OscConfig+0x290>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4618      	mov	r0, r3
 800c682:	f7fa ff61 	bl	8007548 <HAL_InitTick>
 800c686:	4603      	mov	r3, r0
 800c688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800c68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 808a 	beq.w	800c7aa <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800c696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c69a:	f000 bdc7 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	69db      	ldr	r3, [r3, #28]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d066      	beq.n	800c774 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c6a6:	4b1c      	ldr	r3, [pc, #112]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a1b      	ldr	r2, [pc, #108]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c6ac:	f043 0301 	orr.w	r3, r3, #1
 800c6b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c6b2:	f7fa ff93 	bl	80075dc <HAL_GetTick>
 800c6b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c6b8:	e009      	b.n	800c6ce <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c6ba:	f7fa ff8f 	bl	80075dc <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d902      	bls.n	800c6ce <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	f000 bdaf 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c6ce:	4b12      	ldr	r3, [pc, #72]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f003 0304 	and.w	r3, r3, #4
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0ef      	beq.n	800c6ba <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c6da:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	4a0e      	ldr	r2, [pc, #56]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c6e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c6e4:	6093      	str	r3, [r2, #8]
 800c6e6:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f2:	4909      	ldr	r1, [pc, #36]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c700:	d30e      	bcc.n	800c720 <HAL_RCC_OscConfig+0x294>
 800c702:	4b05      	ldr	r3, [pc, #20]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f023 021f 	bic.w	r2, r3, #31
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	4902      	ldr	r1, [pc, #8]	; (800c718 <HAL_RCC_OscConfig+0x28c>)
 800c710:	4313      	orrs	r3, r2
 800c712:	60cb      	str	r3, [r1, #12]
 800c714:	e04a      	b.n	800c7ac <HAL_RCC_OscConfig+0x320>
 800c716:	bf00      	nop
 800c718:	46020c00 	.word	0x46020c00
 800c71c:	20000084 	.word	0x20000084
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	da0a      	bge.n	800c73e <HAL_RCC_OscConfig+0x2b2>
 800c728:	4b9b      	ldr	r3, [pc, #620]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6a1b      	ldr	r3, [r3, #32]
 800c734:	015b      	lsls	r3, r3, #5
 800c736:	4998      	ldr	r1, [pc, #608]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c738:	4313      	orrs	r3, r2
 800c73a:	60cb      	str	r3, [r1, #12]
 800c73c:	e036      	b.n	800c7ac <HAL_RCC_OscConfig+0x320>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c746:	d30a      	bcc.n	800c75e <HAL_RCC_OscConfig+0x2d2>
 800c748:	4b93      	ldr	r3, [pc, #588]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	029b      	lsls	r3, r3, #10
 800c756:	4990      	ldr	r1, [pc, #576]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c758:	4313      	orrs	r3, r2
 800c75a:	60cb      	str	r3, [r1, #12]
 800c75c:	e026      	b.n	800c7ac <HAL_RCC_OscConfig+0x320>
 800c75e:	4b8e      	ldr	r3, [pc, #568]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	03db      	lsls	r3, r3, #15
 800c76c:	498a      	ldr	r1, [pc, #552]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	60cb      	str	r3, [r1, #12]
 800c772:	e01b      	b.n	800c7ac <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c774:	4b88      	ldr	r3, [pc, #544]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a87      	ldr	r2, [pc, #540]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c77a:	f023 0301 	bic.w	r3, r3, #1
 800c77e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c780:	f7fa ff2c 	bl	80075dc <HAL_GetTick>
 800c784:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c786:	e009      	b.n	800c79c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c788:	f7fa ff28 	bl	80075dc <HAL_GetTick>
 800c78c:	4602      	mov	r2, r0
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	2b02      	cmp	r3, #2
 800c794:	d902      	bls.n	800c79c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	f000 bd48 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c79c:	4b7e      	ldr	r3, [pc, #504]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1ef      	bne.n	800c788 <HAL_RCC_OscConfig+0x2fc>
 800c7a8:	e000      	b.n	800c7ac <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c7aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 8094 	beq.w	800c8e2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	2b08      	cmp	r3, #8
 800c7be:	d005      	beq.n	800c7cc <HAL_RCC_OscConfig+0x340>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	2b0c      	cmp	r3, #12
 800c7c4:	d110      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d10d      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7cc:	4b72      	ldr	r3, [pc, #456]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 8083 	beq.w	800c8e0 <HAL_RCC_OscConfig+0x454>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d17e      	bne.n	800c8e0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	f000 bd22 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7f0:	d106      	bne.n	800c800 <HAL_RCC_OscConfig+0x374>
 800c7f2:	4b69      	ldr	r3, [pc, #420]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a68      	ldr	r2, [pc, #416]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c7f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7fc:	6013      	str	r3, [r2, #0]
 800c7fe:	e041      	b.n	800c884 <HAL_RCC_OscConfig+0x3f8>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c808:	d112      	bne.n	800c830 <HAL_RCC_OscConfig+0x3a4>
 800c80a:	4b63      	ldr	r3, [pc, #396]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a62      	ldr	r2, [pc, #392]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	4b60      	ldr	r3, [pc, #384]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a5f      	ldr	r2, [pc, #380]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c81c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c820:	6013      	str	r3, [r2, #0]
 800c822:	4b5d      	ldr	r3, [pc, #372]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a5c      	ldr	r2, [pc, #368]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	e029      	b.n	800c884 <HAL_RCC_OscConfig+0x3f8>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c838:	d112      	bne.n	800c860 <HAL_RCC_OscConfig+0x3d4>
 800c83a:	4b57      	ldr	r3, [pc, #348]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a56      	ldr	r2, [pc, #344]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	4b54      	ldr	r3, [pc, #336]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a53      	ldr	r2, [pc, #332]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c84c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	4b51      	ldr	r3, [pc, #324]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a50      	ldr	r2, [pc, #320]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	e011      	b.n	800c884 <HAL_RCC_OscConfig+0x3f8>
 800c860:	4b4d      	ldr	r3, [pc, #308]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a4c      	ldr	r2, [pc, #304]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	4b4a      	ldr	r3, [pc, #296]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a49      	ldr	r2, [pc, #292]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	4b47      	ldr	r3, [pc, #284]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a46      	ldr	r2, [pc, #280]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c87e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d014      	beq.n	800c8b6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800c88c:	f7fa fea6 	bl	80075dc <HAL_GetTick>
 800c890:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c892:	e009      	b.n	800c8a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c894:	f7fa fea2 	bl	80075dc <HAL_GetTick>
 800c898:	4602      	mov	r2, r0
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	2b64      	cmp	r3, #100	; 0x64
 800c8a0:	d902      	bls.n	800c8a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	f000 bcc2 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c8a8:	4b3b      	ldr	r3, [pc, #236]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d0ef      	beq.n	800c894 <HAL_RCC_OscConfig+0x408>
 800c8b4:	e015      	b.n	800c8e2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c8b6:	f7fa fe91 	bl	80075dc <HAL_GetTick>
 800c8ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c8bc:	e009      	b.n	800c8d2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8be:	f7fa fe8d 	bl	80075dc <HAL_GetTick>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	2b64      	cmp	r3, #100	; 0x64
 800c8ca:	d902      	bls.n	800c8d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800c8cc:	2303      	movs	r3, #3
 800c8ce:	f000 bcad 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c8d2:	4b31      	ldr	r3, [pc, #196]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1ef      	bne.n	800c8be <HAL_RCC_OscConfig+0x432>
 800c8de:	e000      	b.n	800c8e2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0302 	and.w	r3, r3, #2
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d066      	beq.n	800c9bc <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	d005      	beq.n	800c900 <HAL_RCC_OscConfig+0x474>
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	2b0c      	cmp	r3, #12
 800c8f8:	d11a      	bne.n	800c930 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	d117      	bne.n	800c930 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c900:	4b25      	ldr	r3, [pc, #148]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d006      	beq.n	800c91a <HAL_RCC_OscConfig+0x48e>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d102      	bne.n	800c91a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	f000 bc89 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c91a:	4b1f      	ldr	r3, [pc, #124]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	041b      	lsls	r3, r3, #16
 800c928:	491b      	ldr	r1, [pc, #108]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c92a:	4313      	orrs	r3, r2
 800c92c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c92e:	e045      	b.n	800c9bc <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d024      	beq.n	800c982 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c938:	4b17      	ldr	r3, [pc, #92]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a16      	ldr	r2, [pc, #88]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c93e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c942:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c944:	f7fa fe4a 	bl	80075dc <HAL_GetTick>
 800c948:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c94a:	e009      	b.n	800c960 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c94c:	f7fa fe46 	bl	80075dc <HAL_GetTick>
 800c950:	4602      	mov	r2, r0
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	2b02      	cmp	r3, #2
 800c958:	d902      	bls.n	800c960 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	f000 bc66 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c960:	4b0d      	ldr	r3, [pc, #52]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d0ef      	beq.n	800c94c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	041b      	lsls	r3, r3, #16
 800c97a:	4907      	ldr	r1, [pc, #28]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c97c:	4313      	orrs	r3, r2
 800c97e:	610b      	str	r3, [r1, #16]
 800c980:	e01c      	b.n	800c9bc <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c982:	4b05      	ldr	r3, [pc, #20]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a04      	ldr	r2, [pc, #16]	; (800c998 <HAL_RCC_OscConfig+0x50c>)
 800c988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c98c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c98e:	f7fa fe25 	bl	80075dc <HAL_GetTick>
 800c992:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c994:	e00c      	b.n	800c9b0 <HAL_RCC_OscConfig+0x524>
 800c996:	bf00      	nop
 800c998:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c99c:	f7fa fe1e 	bl	80075dc <HAL_GetTick>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d902      	bls.n	800c9b0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	f000 bc3e 	b.w	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c9b0:	4baf      	ldr	r3, [pc, #700]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1ef      	bne.n	800c99c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0308 	and.w	r3, r3, #8
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 80c7 	beq.w	800cb58 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9d0:	4ba7      	ldr	r3, [pc, #668]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800c9d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d111      	bne.n	800ca02 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9de:	4ba4      	ldr	r3, [pc, #656]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800c9e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9e4:	4aa2      	ldr	r2, [pc, #648]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800c9e6:	f043 0304 	orr.w	r3, r3, #4
 800c9ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c9ee:	4ba0      	ldr	r3, [pc, #640]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800c9f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9f4:	f003 0304 	and.w	r3, r3, #4
 800c9f8:	617b      	str	r3, [r7, #20]
 800c9fa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ca02:	4b9c      	ldr	r3, [pc, #624]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800ca04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d118      	bne.n	800ca40 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ca0e:	4b99      	ldr	r3, [pc, #612]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800ca10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca12:	4a98      	ldr	r2, [pc, #608]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800ca14:	f043 0301 	orr.w	r3, r3, #1
 800ca18:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca1a:	f7fa fddf 	bl	80075dc <HAL_GetTick>
 800ca1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ca20:	e008      	b.n	800ca34 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca22:	f7fa fddb 	bl	80075dc <HAL_GetTick>
 800ca26:	4602      	mov	r2, r0
 800ca28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d901      	bls.n	800ca34 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800ca30:	2303      	movs	r3, #3
 800ca32:	e3fb      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ca34:	4b8f      	ldr	r3, [pc, #572]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800ca36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0f0      	beq.n	800ca22 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	695b      	ldr	r3, [r3, #20]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d05f      	beq.n	800cb08 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800ca48:	4b89      	ldr	r3, [pc, #548]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800ca4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca4e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	699a      	ldr	r2, [r3, #24]
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d037      	beq.n	800cace <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d006      	beq.n	800ca76 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	e3da      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d01b      	beq.n	800cab8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800ca80:	4b7b      	ldr	r3, [pc, #492]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800ca82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca86:	4a7a      	ldr	r2, [pc, #488]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800ca88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800ca8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800ca90:	f7fa fda4 	bl	80075dc <HAL_GetTick>
 800ca94:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ca96:	e008      	b.n	800caaa <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca98:	f7fa fda0 	bl	80075dc <HAL_GetTick>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d901      	bls.n	800caaa <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800caa6:	2303      	movs	r3, #3
 800caa8:	e3c0      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800caaa:	4b71      	ldr	r3, [pc, #452]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800caac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1ef      	bne.n	800ca98 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800cab8:	4b6d      	ldr	r3, [pc, #436]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800caba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cabe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	496a      	ldr	r1, [pc, #424]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cac8:	4313      	orrs	r3, r2
 800caca:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800cace:	4b68      	ldr	r3, [pc, #416]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cad4:	4a66      	ldr	r2, [pc, #408]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cada:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800cade:	f7fa fd7d 	bl	80075dc <HAL_GetTick>
 800cae2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800cae4:	e008      	b.n	800caf8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cae6:	f7fa fd79 	bl	80075dc <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d901      	bls.n	800caf8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e399      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800caf8:	4b5d      	ldr	r3, [pc, #372]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cafa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cafe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0ef      	beq.n	800cae6 <HAL_RCC_OscConfig+0x65a>
 800cb06:	e01b      	b.n	800cb40 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800cb08:	4b59      	ldr	r3, [pc, #356]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb0e:	4a58      	ldr	r2, [pc, #352]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb10:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800cb14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800cb18:	f7fa fd60 	bl	80075dc <HAL_GetTick>
 800cb1c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800cb1e:	e008      	b.n	800cb32 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb20:	f7fa fd5c 	bl	80075dc <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d901      	bls.n	800cb32 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e37c      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800cb32:	4b4f      	ldr	r3, [pc, #316]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1ef      	bne.n	800cb20 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cb40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d107      	bne.n	800cb58 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb48:	4b49      	ldr	r3, [pc, #292]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb4e:	4a48      	ldr	r2, [pc, #288]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb50:	f023 0304 	bic.w	r3, r3, #4
 800cb54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 8112 	beq.w	800cd8a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800cb66:	2300      	movs	r3, #0
 800cb68:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb6c:	4b40      	ldr	r3, [pc, #256]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb72:	f003 0304 	and.w	r3, r3, #4
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d111      	bne.n	800cb9e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb7a:	4b3d      	ldr	r3, [pc, #244]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb80:	4a3b      	ldr	r2, [pc, #236]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb82:	f043 0304 	orr.w	r3, r3, #4
 800cb86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cb8a:	4b39      	ldr	r3, [pc, #228]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cb8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb90:	f003 0304 	and.w	r3, r3, #4
 800cb94:	613b      	str	r3, [r7, #16]
 800cb96:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cb9e:	4b35      	ldr	r3, [pc, #212]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800cba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba2:	f003 0301 	and.w	r3, r3, #1
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d118      	bne.n	800cbdc <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cbaa:	4b32      	ldr	r3, [pc, #200]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800cbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbae:	4a31      	ldr	r2, [pc, #196]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800cbb0:	f043 0301 	orr.w	r3, r3, #1
 800cbb4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbb6:	f7fa fd11 	bl	80075dc <HAL_GetTick>
 800cbba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cbbc:	e008      	b.n	800cbd0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbbe:	f7fa fd0d 	bl	80075dc <HAL_GetTick>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d901      	bls.n	800cbd0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e32d      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cbd0:	4b28      	ldr	r3, [pc, #160]	; (800cc74 <HAL_RCC_OscConfig+0x7e8>)
 800cbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d0f0      	beq.n	800cbbe <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01f      	beq.n	800cc28 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f003 0304 	and.w	r3, r3, #4
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d010      	beq.n	800cc16 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cbf4:	4b1e      	ldr	r3, [pc, #120]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cbf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbfa:	4a1d      	ldr	r2, [pc, #116]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cbfc:	f043 0304 	orr.w	r3, r3, #4
 800cc00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cc04:	4b1a      	ldr	r3, [pc, #104]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc0a:	4a19      	ldr	r2, [pc, #100]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc0c:	f043 0301 	orr.w	r3, r3, #1
 800cc10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800cc14:	e018      	b.n	800cc48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cc16:	4b16      	ldr	r3, [pc, #88]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc1c:	4a14      	ldr	r2, [pc, #80]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc1e:	f043 0301 	orr.w	r3, r3, #1
 800cc22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800cc26:	e00f      	b.n	800cc48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cc28:	4b11      	ldr	r3, [pc, #68]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc2e:	4a10      	ldr	r2, [pc, #64]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc30:	f023 0301 	bic.w	r3, r3, #1
 800cc34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cc38:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc3e:	4a0c      	ldr	r2, [pc, #48]	; (800cc70 <HAL_RCC_OscConfig+0x7e4>)
 800cc40:	f023 0304 	bic.w	r3, r3, #4
 800cc44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d058      	beq.n	800cd02 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800cc50:	f7fa fcc4 	bl	80075dc <HAL_GetTick>
 800cc54:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc56:	e00f      	b.n	800cc78 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc58:	f7fa fcc0 	bl	80075dc <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d906      	bls.n	800cc78 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e2de      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
 800cc6e:	bf00      	nop
 800cc70:	46020c00 	.word	0x46020c00
 800cc74:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc78:	4b9c      	ldr	r3, [pc, #624]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cc7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d0e8      	beq.n	800cc58 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d01b      	beq.n	800ccca <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cc92:	4b96      	ldr	r3, [pc, #600]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cc94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc98:	4a94      	ldr	r2, [pc, #592]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cc9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800cca2:	e00a      	b.n	800ccba <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cca4:	f7fa fc9a 	bl	80075dc <HAL_GetTick>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d901      	bls.n	800ccba <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	e2b8      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ccba:	4b8c      	ldr	r3, [pc, #560]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ccbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d0ed      	beq.n	800cca4 <HAL_RCC_OscConfig+0x818>
 800ccc8:	e053      	b.n	800cd72 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ccca:	4b88      	ldr	r3, [pc, #544]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccd0:	4a86      	ldr	r2, [pc, #536]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ccd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ccda:	e00a      	b.n	800ccf2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccdc:	f7fa fc7e 	bl	80075dc <HAL_GetTick>
 800cce0:	4602      	mov	r2, r0
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d901      	bls.n	800ccf2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e29c      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ccf2:	4b7e      	ldr	r3, [pc, #504]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ccf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1ed      	bne.n	800ccdc <HAL_RCC_OscConfig+0x850>
 800cd00:	e037      	b.n	800cd72 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800cd02:	f7fa fc6b 	bl	80075dc <HAL_GetTick>
 800cd06:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd08:	e00a      	b.n	800cd20 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd0a:	f7fa fc67 	bl	80075dc <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d901      	bls.n	800cd20 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e285      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd20:	4b72      	ldr	r3, [pc, #456]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cd22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd26:	f003 0302 	and.w	r3, r3, #2
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1ed      	bne.n	800cd0a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800cd2e:	4b6f      	ldr	r3, [pc, #444]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cd30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d01a      	beq.n	800cd72 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cd3c:	4b6b      	ldr	r3, [pc, #428]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cd3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd42:	4a6a      	ldr	r2, [pc, #424]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cd44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cd4c:	e00a      	b.n	800cd64 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd4e:	f7fa fc45 	bl	80075dc <HAL_GetTick>
 800cd52:	4602      	mov	r2, r0
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d901      	bls.n	800cd64 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e263      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cd64:	4b61      	ldr	r3, [pc, #388]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cd66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1ed      	bne.n	800cd4e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cd72:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d107      	bne.n	800cd8a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd7a:	4b5c      	ldr	r3, [pc, #368]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cd7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd80:	4a5a      	ldr	r2, [pc, #360]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cd82:	f023 0304 	bic.w	r3, r3, #4
 800cd86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 0320 	and.w	r3, r3, #32
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d036      	beq.n	800ce04 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d019      	beq.n	800cdd2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800cd9e:	4b53      	ldr	r3, [pc, #332]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a52      	ldr	r2, [pc, #328]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cda4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cda8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cdaa:	f7fa fc17 	bl	80075dc <HAL_GetTick>
 800cdae:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800cdb0:	e008      	b.n	800cdc4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cdb2:	f7fa fc13 	bl	80075dc <HAL_GetTick>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d901      	bls.n	800cdc4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e233      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800cdc4:	4b49      	ldr	r3, [pc, #292]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0f0      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x926>
 800cdd0:	e018      	b.n	800ce04 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800cdd2:	4b46      	ldr	r3, [pc, #280]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a45      	ldr	r2, [pc, #276]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cdd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cddc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cdde:	f7fa fbfd 	bl	80075dc <HAL_GetTick>
 800cde2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800cde4:	e008      	b.n	800cdf8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cde6:	f7fa fbf9 	bl	80075dc <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d901      	bls.n	800cdf8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e219      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800cdf8:	4b3c      	ldr	r3, [pc, #240]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1f0      	bne.n	800cde6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d036      	beq.n	800ce7e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d019      	beq.n	800ce4c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800ce18:	4b34      	ldr	r3, [pc, #208]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a33      	ldr	r2, [pc, #204]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ce24:	f7fa fbda 	bl	80075dc <HAL_GetTick>
 800ce28:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ce2a:	e008      	b.n	800ce3e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ce2c:	f7fa fbd6 	bl	80075dc <HAL_GetTick>
 800ce30:	4602      	mov	r2, r0
 800ce32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d901      	bls.n	800ce3e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800ce3a:	2303      	movs	r3, #3
 800ce3c:	e1f6      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ce3e:	4b2b      	ldr	r3, [pc, #172]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d0f0      	beq.n	800ce2c <HAL_RCC_OscConfig+0x9a0>
 800ce4a:	e018      	b.n	800ce7e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800ce4c:	4b27      	ldr	r3, [pc, #156]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a26      	ldr	r2, [pc, #152]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ce58:	f7fa fbc0 	bl	80075dc <HAL_GetTick>
 800ce5c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ce5e:	e008      	b.n	800ce72 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ce60:	f7fa fbbc 	bl	80075dc <HAL_GetTick>
 800ce64:	4602      	mov	r2, r0
 800ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d901      	bls.n	800ce72 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e1dc      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ce72:	4b1e      	ldr	r3, [pc, #120]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1f0      	bne.n	800ce60 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d07f      	beq.n	800cf8a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d062      	beq.n	800cf58 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800ce92:	4b16      	ldr	r3, [pc, #88]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	4a15      	ldr	r2, [pc, #84]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ce98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ce9c:	6093      	str	r3, [r2, #8]
 800ce9e:	4b13      	ldr	r3, [pc, #76]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceaa:	4910      	ldr	r1, [pc, #64]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ceac:	4313      	orrs	r3, r2
 800ceae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ceb8:	d309      	bcc.n	800cece <HAL_RCC_OscConfig+0xa42>
 800ceba:	4b0c      	ldr	r3, [pc, #48]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	f023 021f 	bic.w	r2, r3, #31
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	4909      	ldr	r1, [pc, #36]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cec8:	4313      	orrs	r3, r2
 800ceca:	60cb      	str	r3, [r1, #12]
 800cecc:	e02a      	b.n	800cf24 <HAL_RCC_OscConfig+0xa98>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	da0c      	bge.n	800cef0 <HAL_RCC_OscConfig+0xa64>
 800ced6:	4b05      	ldr	r3, [pc, #20]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a1b      	ldr	r3, [r3, #32]
 800cee2:	015b      	lsls	r3, r3, #5
 800cee4:	4901      	ldr	r1, [pc, #4]	; (800ceec <HAL_RCC_OscConfig+0xa60>)
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60cb      	str	r3, [r1, #12]
 800ceea:	e01b      	b.n	800cf24 <HAL_RCC_OscConfig+0xa98>
 800ceec:	46020c00 	.word	0x46020c00
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cef8:	d30a      	bcc.n	800cf10 <HAL_RCC_OscConfig+0xa84>
 800cefa:	4ba5      	ldr	r3, [pc, #660]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	029b      	lsls	r3, r3, #10
 800cf08:	49a1      	ldr	r1, [pc, #644]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	60cb      	str	r3, [r1, #12]
 800cf0e:	e009      	b.n	800cf24 <HAL_RCC_OscConfig+0xa98>
 800cf10:	4b9f      	ldr	r3, [pc, #636]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a1b      	ldr	r3, [r3, #32]
 800cf1c:	03db      	lsls	r3, r3, #15
 800cf1e:	499c      	ldr	r1, [pc, #624]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800cf24:	4b9a      	ldr	r3, [pc, #616]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a99      	ldr	r2, [pc, #612]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf2a:	f043 0310 	orr.w	r3, r3, #16
 800cf2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cf30:	f7fa fb54 	bl	80075dc <HAL_GetTick>
 800cf34:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cf36:	e008      	b.n	800cf4a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cf38:	f7fa fb50 	bl	80075dc <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d901      	bls.n	800cf4a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e170      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cf4a:	4b91      	ldr	r3, [pc, #580]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0320 	and.w	r3, r3, #32
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d0f0      	beq.n	800cf38 <HAL_RCC_OscConfig+0xaac>
 800cf56:	e018      	b.n	800cf8a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800cf58:	4b8d      	ldr	r3, [pc, #564]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a8c      	ldr	r2, [pc, #560]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf5e:	f023 0310 	bic.w	r3, r3, #16
 800cf62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cf64:	f7fa fb3a 	bl	80075dc <HAL_GetTick>
 800cf68:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cf6a:	e008      	b.n	800cf7e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cf6c:	f7fa fb36 	bl	80075dc <HAL_GetTick>
 800cf70:	4602      	mov	r2, r0
 800cf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	d901      	bls.n	800cf7e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800cf7a:	2303      	movs	r3, #3
 800cf7c:	e156      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cf7e:	4b84      	ldr	r3, [pc, #528]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0320 	and.w	r3, r3, #32
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1f0      	bne.n	800cf6c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f000 814b 	beq.w	800d22a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800cf94:	2300      	movs	r3, #0
 800cf96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf9a:	4b7d      	ldr	r3, [pc, #500]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cf9c:	69db      	ldr	r3, [r3, #28]
 800cf9e:	f003 030c 	and.w	r3, r3, #12
 800cfa2:	2b0c      	cmp	r3, #12
 800cfa4:	f000 80fa 	beq.w	800d19c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	f040 80cc 	bne.w	800d14a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cfb2:	4b77      	ldr	r3, [pc, #476]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a76      	ldr	r2, [pc, #472]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cfb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cfbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cfbe:	f7fa fb0d 	bl	80075dc <HAL_GetTick>
 800cfc2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cfc4:	e008      	b.n	800cfd8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfc6:	f7fa fb09 	bl	80075dc <HAL_GetTick>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d901      	bls.n	800cfd8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e129      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cfd8:	4b6d      	ldr	r3, [pc, #436]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1f0      	bne.n	800cfc6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfe4:	4b6a      	ldr	r3, [pc, #424]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cfe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfea:	f003 0304 	and.w	r3, r3, #4
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d111      	bne.n	800d016 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800cff2:	4b67      	ldr	r3, [pc, #412]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cff8:	4a65      	ldr	r2, [pc, #404]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800cffa:	f043 0304 	orr.w	r3, r3, #4
 800cffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d002:	4b63      	ldr	r3, [pc, #396]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d008:	f003 0304 	and.w	r3, r3, #4
 800d00c:	60fb      	str	r3, [r7, #12]
 800d00e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800d010:	2301      	movs	r3, #1
 800d012:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800d016:	4b5f      	ldr	r3, [pc, #380]	; (800d194 <HAL_RCC_OscConfig+0xd08>)
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d01e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d022:	d102      	bne.n	800d02a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800d024:	2301      	movs	r3, #1
 800d026:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d02a:	4b5a      	ldr	r3, [pc, #360]	; (800d194 <HAL_RCC_OscConfig+0xd08>)
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	4a59      	ldr	r2, [pc, #356]	; (800d194 <HAL_RCC_OscConfig+0xd08>)
 800d030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d034:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800d036:	4b56      	ldr	r3, [pc, #344]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d04a:	3a01      	subs	r2, #1
 800d04c:	0212      	lsls	r2, r2, #8
 800d04e:	4311      	orrs	r1, r2
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d054:	430a      	orrs	r2, r1
 800d056:	494e      	ldr	r1, [pc, #312]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	628b      	str	r3, [r1, #40]	; 0x28
 800d05c:	4b4c      	ldr	r3, [pc, #304]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d05e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d060:	4b4d      	ldr	r3, [pc, #308]	; (800d198 <HAL_RCC_OscConfig+0xd0c>)
 800d062:	4013      	ands	r3, r2
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d068:	3a01      	subs	r2, #1
 800d06a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d072:	3a01      	subs	r2, #1
 800d074:	0252      	lsls	r2, r2, #9
 800d076:	b292      	uxth	r2, r2
 800d078:	4311      	orrs	r1, r2
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d07e:	3a01      	subs	r2, #1
 800d080:	0412      	lsls	r2, r2, #16
 800d082:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d086:	4311      	orrs	r1, r2
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d08c:	3a01      	subs	r2, #1
 800d08e:	0612      	lsls	r2, r2, #24
 800d090:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d094:	430a      	orrs	r2, r1
 800d096:	493e      	ldr	r1, [pc, #248]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d098:	4313      	orrs	r3, r2
 800d09a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d09c:	4b3c      	ldr	r3, [pc, #240]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a0:	4a3b      	ldr	r2, [pc, #236]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0a2:	f023 0310 	bic.w	r3, r3, #16
 800d0a6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d0a8:	4b39      	ldr	r3, [pc, #228]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d0b8:	00d2      	lsls	r2, r2, #3
 800d0ba:	4935      	ldr	r1, [pc, #212]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d0c0:	4b33      	ldr	r3, [pc, #204]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c4:	4a32      	ldr	r2, [pc, #200]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0c6:	f043 0310 	orr.w	r3, r3, #16
 800d0ca:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800d0cc:	4b30      	ldr	r3, [pc, #192]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d0:	f023 020c 	bic.w	r2, r3, #12
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0d8:	492d      	ldr	r1, [pc, #180]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800d0de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d105      	bne.n	800d0f2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d0e6:	4b2b      	ldr	r3, [pc, #172]	; (800d194 <HAL_RCC_OscConfig+0xd08>)
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	4a2a      	ldr	r2, [pc, #168]	; (800d194 <HAL_RCC_OscConfig+0xd08>)
 800d0ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d0f0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800d0f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d107      	bne.n	800d10a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800d0fa:	4b25      	ldr	r3, [pc, #148]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d0fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d100:	4a23      	ldr	r2, [pc, #140]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d102:	f023 0304 	bic.w	r3, r3, #4
 800d106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d10a:	4b21      	ldr	r3, [pc, #132]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10e:	4a20      	ldr	r2, [pc, #128]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d114:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800d116:	4b1e      	ldr	r3, [pc, #120]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a1d      	ldr	r2, [pc, #116]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d11c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d120:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d122:	f7fa fa5b 	bl	80075dc <HAL_GetTick>
 800d126:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d128:	e008      	b.n	800d13c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d12a:	f7fa fa57 	bl	80075dc <HAL_GetTick>
 800d12e:	4602      	mov	r2, r0
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	2b02      	cmp	r3, #2
 800d136:	d901      	bls.n	800d13c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800d138:	2303      	movs	r3, #3
 800d13a:	e077      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d13c:	4b14      	ldr	r3, [pc, #80]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0f0      	beq.n	800d12a <HAL_RCC_OscConfig+0xc9e>
 800d148:	e06f      	b.n	800d22a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d14a:	4b11      	ldr	r3, [pc, #68]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a10      	ldr	r2, [pc, #64]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d154:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d156:	f7fa fa41 	bl	80075dc <HAL_GetTick>
 800d15a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d15c:	e008      	b.n	800d170 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d15e:	f7fa fa3d 	bl	80075dc <HAL_GetTick>
 800d162:	4602      	mov	r2, r0
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d901      	bls.n	800d170 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800d16c:	2303      	movs	r3, #3
 800d16e:	e05d      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d170:	4b07      	ldr	r3, [pc, #28]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1f0      	bne.n	800d15e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800d17c:	4b04      	ldr	r3, [pc, #16]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d180:	4a03      	ldr	r2, [pc, #12]	; (800d190 <HAL_RCC_OscConfig+0xd04>)
 800d182:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d186:	f023 0303 	bic.w	r3, r3, #3
 800d18a:	6293      	str	r3, [r2, #40]	; 0x28
 800d18c:	e04d      	b.n	800d22a <HAL_RCC_OscConfig+0xd9e>
 800d18e:	bf00      	nop
 800d190:	46020c00 	.word	0x46020c00
 800d194:	46020800 	.word	0x46020800
 800d198:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800d19c:	4b25      	ldr	r3, [pc, #148]	; (800d234 <HAL_RCC_OscConfig+0xda8>)
 800d19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d1a2:	4b24      	ldr	r3, [pc, #144]	; (800d234 <HAL_RCC_OscConfig+0xda8>)
 800d1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d03a      	beq.n	800d226 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	f003 0203 	and.w	r2, r3, #3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d133      	bne.n	800d226 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	0a1b      	lsrs	r3, r3, #8
 800d1c2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ca:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d12a      	bne.n	800d226 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	0b1b      	lsrs	r3, r3, #12
 800d1d4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d122      	bne.n	800d226 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1ea:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d11a      	bne.n	800d226 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	0a5b      	lsrs	r3, r3, #9
 800d1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1fc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d111      	bne.n	800d226 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	0c1b      	lsrs	r3, r3, #16
 800d206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d20e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d210:	429a      	cmp	r2, r3
 800d212:	d108      	bne.n	800d226 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	0e1b      	lsrs	r3, r3, #24
 800d218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d220:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d222:	429a      	cmp	r2, r3
 800d224:	d001      	beq.n	800d22a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	e000      	b.n	800d22c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3738      	adds	r7, #56	; 0x38
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	46020c00 	.word	0x46020c00

0800d238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d248:	2301      	movs	r3, #1
 800d24a:	e1d9      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d24c:	4b9b      	ldr	r3, [pc, #620]	; (800d4bc <HAL_RCC_ClockConfig+0x284>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 030f 	and.w	r3, r3, #15
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	429a      	cmp	r2, r3
 800d258:	d910      	bls.n	800d27c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d25a:	4b98      	ldr	r3, [pc, #608]	; (800d4bc <HAL_RCC_ClockConfig+0x284>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f023 020f 	bic.w	r2, r3, #15
 800d262:	4996      	ldr	r1, [pc, #600]	; (800d4bc <HAL_RCC_ClockConfig+0x284>)
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	4313      	orrs	r3, r2
 800d268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d26a:	4b94      	ldr	r3, [pc, #592]	; (800d4bc <HAL_RCC_ClockConfig+0x284>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 030f 	and.w	r3, r3, #15
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d001      	beq.n	800d27c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e1c1      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 0310 	and.w	r3, r3, #16
 800d284:	2b00      	cmp	r3, #0
 800d286:	d010      	beq.n	800d2aa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	695a      	ldr	r2, [r3, #20]
 800d28c:	4b8c      	ldr	r3, [pc, #560]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d294:	429a      	cmp	r2, r3
 800d296:	d908      	bls.n	800d2aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800d298:	4b89      	ldr	r3, [pc, #548]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	695b      	ldr	r3, [r3, #20]
 800d2a4:	4986      	ldr	r1, [pc, #536]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 0308 	and.w	r3, r3, #8
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d012      	beq.n	800d2dc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	691a      	ldr	r2, [r3, #16]
 800d2ba:	4b81      	ldr	r3, [pc, #516]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	091b      	lsrs	r3, r3, #4
 800d2c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d909      	bls.n	800d2dc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d2c8:	4b7d      	ldr	r3, [pc, #500]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	497a      	ldr	r1, [pc, #488]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 0304 	and.w	r3, r3, #4
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d010      	beq.n	800d30a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	4b74      	ldr	r3, [pc, #464]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d2ee:	6a1b      	ldr	r3, [r3, #32]
 800d2f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d908      	bls.n	800d30a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d2f8:	4b71      	ldr	r3, [pc, #452]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d2fa:	6a1b      	ldr	r3, [r3, #32]
 800d2fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	496e      	ldr	r1, [pc, #440]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d306:	4313      	orrs	r3, r2
 800d308:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 0302 	and.w	r3, r3, #2
 800d312:	2b00      	cmp	r3, #0
 800d314:	d010      	beq.n	800d338 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	689a      	ldr	r2, [r3, #8]
 800d31a:	4b69      	ldr	r3, [pc, #420]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	f003 030f 	and.w	r3, r3, #15
 800d322:	429a      	cmp	r2, r3
 800d324:	d908      	bls.n	800d338 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d326:	4b66      	ldr	r3, [pc, #408]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	f023 020f 	bic.w	r2, r3, #15
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	4963      	ldr	r1, [pc, #396]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d334:	4313      	orrs	r3, r2
 800d336:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 80d2 	beq.w	800d4ea <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800d346:	2300      	movs	r3, #0
 800d348:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	2b03      	cmp	r3, #3
 800d350:	d143      	bne.n	800d3da <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d352:	4b5b      	ldr	r3, [pc, #364]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d358:	f003 0304 	and.w	r3, r3, #4
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d110      	bne.n	800d382 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d360:	4b57      	ldr	r3, [pc, #348]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d366:	4a56      	ldr	r2, [pc, #344]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d368:	f043 0304 	orr.w	r3, r3, #4
 800d36c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d370:	4b53      	ldr	r3, [pc, #332]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d376:	f003 0304 	and.w	r3, r3, #4
 800d37a:	60bb      	str	r3, [r7, #8]
 800d37c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d37e:	2301      	movs	r3, #1
 800d380:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d382:	f7fa f92b 	bl	80075dc <HAL_GetTick>
 800d386:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d388:	4b4e      	ldr	r3, [pc, #312]	; (800d4c4 <HAL_RCC_ClockConfig+0x28c>)
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00f      	beq.n	800d3b4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d394:	e008      	b.n	800d3a8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d396:	f7fa f921 	bl	80075dc <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d901      	bls.n	800d3a8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e12b      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d3a8:	4b46      	ldr	r3, [pc, #280]	; (800d4c4 <HAL_RCC_ClockConfig+0x28c>)
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d0f0      	beq.n	800d396 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d107      	bne.n	800d3ca <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d3ba:	4b41      	ldr	r3, [pc, #260]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d3bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3c0:	4a3f      	ldr	r2, [pc, #252]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d3c2:	f023 0304 	bic.w	r3, r3, #4
 800d3c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d3ca:	4b3d      	ldr	r3, [pc, #244]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d121      	bne.n	800d41a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e112      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d107      	bne.n	800d3f2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d3e2:	4b37      	ldr	r3, [pc, #220]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d115      	bne.n	800d41a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e106      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d107      	bne.n	800d40a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d3fa:	4b31      	ldr	r3, [pc, #196]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0304 	and.w	r3, r3, #4
 800d402:	2b00      	cmp	r3, #0
 800d404:	d109      	bne.n	800d41a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e0fa      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d40a:	4b2d      	ldr	r3, [pc, #180]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d412:	2b00      	cmp	r3, #0
 800d414:	d101      	bne.n	800d41a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	e0f2      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d41a:	4b29      	ldr	r3, [pc, #164]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d41c:	69db      	ldr	r3, [r3, #28]
 800d41e:	f023 0203 	bic.w	r2, r3, #3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	4926      	ldr	r1, [pc, #152]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d428:	4313      	orrs	r3, r2
 800d42a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d42c:	f7fa f8d6 	bl	80075dc <HAL_GetTick>
 800d430:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	2b03      	cmp	r3, #3
 800d438:	d112      	bne.n	800d460 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d43a:	e00a      	b.n	800d452 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d43c:	f7fa f8ce 	bl	80075dc <HAL_GetTick>
 800d440:	4602      	mov	r2, r0
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	1ad3      	subs	r3, r2, r3
 800d446:	f241 3288 	movw	r2, #5000	; 0x1388
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d901      	bls.n	800d452 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d44e:	2303      	movs	r3, #3
 800d450:	e0d6      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d452:	4b1b      	ldr	r3, [pc, #108]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	f003 030c 	and.w	r3, r3, #12
 800d45a:	2b0c      	cmp	r3, #12
 800d45c:	d1ee      	bne.n	800d43c <HAL_RCC_ClockConfig+0x204>
 800d45e:	e044      	b.n	800d4ea <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	2b02      	cmp	r3, #2
 800d466:	d112      	bne.n	800d48e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d468:	e00a      	b.n	800d480 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d46a:	f7fa f8b7 	bl	80075dc <HAL_GetTick>
 800d46e:	4602      	mov	r2, r0
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	f241 3288 	movw	r2, #5000	; 0x1388
 800d478:	4293      	cmp	r3, r2
 800d47a:	d901      	bls.n	800d480 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d47c:	2303      	movs	r3, #3
 800d47e:	e0bf      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d480:	4b0f      	ldr	r3, [pc, #60]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d482:	69db      	ldr	r3, [r3, #28]
 800d484:	f003 030c 	and.w	r3, r3, #12
 800d488:	2b08      	cmp	r3, #8
 800d48a:	d1ee      	bne.n	800d46a <HAL_RCC_ClockConfig+0x232>
 800d48c:	e02d      	b.n	800d4ea <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d123      	bne.n	800d4de <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d496:	e00a      	b.n	800d4ae <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d498:	f7fa f8a0 	bl	80075dc <HAL_GetTick>
 800d49c:	4602      	mov	r2, r0
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d901      	bls.n	800d4ae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	e0a8      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d4ae:	4b04      	ldr	r3, [pc, #16]	; (800d4c0 <HAL_RCC_ClockConfig+0x288>)
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	f003 030c 	and.w	r3, r3, #12
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1ee      	bne.n	800d498 <HAL_RCC_ClockConfig+0x260>
 800d4ba:	e016      	b.n	800d4ea <HAL_RCC_ClockConfig+0x2b2>
 800d4bc:	40022000 	.word	0x40022000
 800d4c0:	46020c00 	.word	0x46020c00
 800d4c4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d4c8:	f7fa f888 	bl	80075dc <HAL_GetTick>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d901      	bls.n	800d4de <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	e090      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d4de:	4b4a      	ldr	r3, [pc, #296]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d4e0:	69db      	ldr	r3, [r3, #28]
 800d4e2:	f003 030c 	and.w	r3, r3, #12
 800d4e6:	2b04      	cmp	r3, #4
 800d4e8:	d1ee      	bne.n	800d4c8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 0302 	and.w	r3, r3, #2
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d010      	beq.n	800d518 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	689a      	ldr	r2, [r3, #8]
 800d4fa:	4b43      	ldr	r3, [pc, #268]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	f003 030f 	and.w	r3, r3, #15
 800d502:	429a      	cmp	r2, r3
 800d504:	d208      	bcs.n	800d518 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d506:	4b40      	ldr	r3, [pc, #256]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	f023 020f 	bic.w	r2, r3, #15
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	493d      	ldr	r1, [pc, #244]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d514:	4313      	orrs	r3, r2
 800d516:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d518:	4b3c      	ldr	r3, [pc, #240]	; (800d60c <HAL_RCC_ClockConfig+0x3d4>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 030f 	and.w	r3, r3, #15
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	429a      	cmp	r2, r3
 800d524:	d210      	bcs.n	800d548 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d526:	4b39      	ldr	r3, [pc, #228]	; (800d60c <HAL_RCC_ClockConfig+0x3d4>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f023 020f 	bic.w	r2, r3, #15
 800d52e:	4937      	ldr	r1, [pc, #220]	; (800d60c <HAL_RCC_ClockConfig+0x3d4>)
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	4313      	orrs	r3, r2
 800d534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d536:	4b35      	ldr	r3, [pc, #212]	; (800d60c <HAL_RCC_ClockConfig+0x3d4>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f003 030f 	and.w	r3, r3, #15
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	429a      	cmp	r2, r3
 800d542:	d001      	beq.n	800d548 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	e05b      	b.n	800d600 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	2b00      	cmp	r3, #0
 800d552:	d010      	beq.n	800d576 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	68da      	ldr	r2, [r3, #12]
 800d558:	4b2b      	ldr	r3, [pc, #172]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d55a:	6a1b      	ldr	r3, [r3, #32]
 800d55c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d560:	429a      	cmp	r2, r3
 800d562:	d208      	bcs.n	800d576 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d564:	4b28      	ldr	r3, [pc, #160]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d566:	6a1b      	ldr	r3, [r3, #32]
 800d568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	4925      	ldr	r1, [pc, #148]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d572:	4313      	orrs	r3, r2
 800d574:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d012      	beq.n	800d5a8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	691a      	ldr	r2, [r3, #16]
 800d586:	4b20      	ldr	r3, [pc, #128]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d588:	6a1b      	ldr	r3, [r3, #32]
 800d58a:	091b      	lsrs	r3, r3, #4
 800d58c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d590:	429a      	cmp	r2, r3
 800d592:	d209      	bcs.n	800d5a8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d594:	4b1c      	ldr	r3, [pc, #112]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d596:	6a1b      	ldr	r3, [r3, #32]
 800d598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	011b      	lsls	r3, r3, #4
 800d5a2:	4919      	ldr	r1, [pc, #100]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f003 0310 	and.w	r3, r3, #16
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d010      	beq.n	800d5d6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695a      	ldr	r2, [r3, #20]
 800d5b8:	4b13      	ldr	r3, [pc, #76]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d208      	bcs.n	800d5d6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d5c4:	4b10      	ldr	r3, [pc, #64]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	490d      	ldr	r1, [pc, #52]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d5d6:	f000 f821 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <HAL_RCC_ClockConfig+0x3d0>)
 800d5de:	6a1b      	ldr	r3, [r3, #32]
 800d5e0:	f003 030f 	and.w	r3, r3, #15
 800d5e4:	490a      	ldr	r1, [pc, #40]	; (800d610 <HAL_RCC_ClockConfig+0x3d8>)
 800d5e6:	5ccb      	ldrb	r3, [r1, r3]
 800d5e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ec:	4a09      	ldr	r2, [pc, #36]	; (800d614 <HAL_RCC_ClockConfig+0x3dc>)
 800d5ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d5f0:	4b09      	ldr	r3, [pc, #36]	; (800d618 <HAL_RCC_ClockConfig+0x3e0>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7f9 ffa7 	bl	8007548 <HAL_InitTick>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	73fb      	strb	r3, [r7, #15]

  return status;
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	46020c00 	.word	0x46020c00
 800d60c:	40022000 	.word	0x40022000
 800d610:	0801f62c 	.word	0x0801f62c
 800d614:	2000000c 	.word	0x2000000c
 800d618:	20000084 	.word	0x20000084

0800d61c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b08b      	sub	sp, #44	; 0x2c
 800d620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d622:	2300      	movs	r3, #0
 800d624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d626:	2300      	movs	r3, #0
 800d628:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d62a:	4b7b      	ldr	r3, [pc, #492]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d62c:	69db      	ldr	r3, [r3, #28]
 800d62e:	f003 030c 	and.w	r3, r3, #12
 800d632:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d634:	4b78      	ldr	r3, [pc, #480]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d638:	f003 0303 	and.w	r3, r3, #3
 800d63c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d005      	beq.n	800d650 <HAL_RCC_GetSysClockFreq+0x34>
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	2b0c      	cmp	r3, #12
 800d648:	d121      	bne.n	800d68e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d11e      	bne.n	800d68e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d650:	4b71      	ldr	r3, [pc, #452]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d107      	bne.n	800d66c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d65c:	4b6e      	ldr	r3, [pc, #440]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d65e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d662:	0b1b      	lsrs	r3, r3, #12
 800d664:	f003 030f 	and.w	r3, r3, #15
 800d668:	627b      	str	r3, [r7, #36]	; 0x24
 800d66a:	e005      	b.n	800d678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d66c:	4b6a      	ldr	r3, [pc, #424]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	0f1b      	lsrs	r3, r3, #28
 800d672:	f003 030f 	and.w	r3, r3, #15
 800d676:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d678:	4a68      	ldr	r2, [pc, #416]	; (800d81c <HAL_RCC_GetSysClockFreq+0x200>)
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d680:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d110      	bne.n	800d6aa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d68c:	e00d      	b.n	800d6aa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d68e:	4b62      	ldr	r3, [pc, #392]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	f003 030c 	and.w	r3, r3, #12
 800d696:	2b04      	cmp	r3, #4
 800d698:	d102      	bne.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d69a:	4b61      	ldr	r3, [pc, #388]	; (800d820 <HAL_RCC_GetSysClockFreq+0x204>)
 800d69c:	623b      	str	r3, [r7, #32]
 800d69e:	e004      	b.n	800d6aa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	2b08      	cmp	r3, #8
 800d6a4:	d101      	bne.n	800d6aa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d6a6:	4b5e      	ldr	r3, [pc, #376]	; (800d820 <HAL_RCC_GetSysClockFreq+0x204>)
 800d6a8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	2b0c      	cmp	r3, #12
 800d6ae:	f040 80ac 	bne.w	800d80a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d6b2:	4b59      	ldr	r3, [pc, #356]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b6:	f003 0303 	and.w	r3, r3, #3
 800d6ba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d6bc:	4b56      	ldr	r3, [pc, #344]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c0:	0a1b      	lsrs	r3, r3, #8
 800d6c2:	f003 030f 	and.w	r3, r3, #15
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d6ca:	4b53      	ldr	r3, [pc, #332]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ce:	091b      	lsrs	r3, r3, #4
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d6d6:	4b50      	ldr	r3, [pc, #320]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	08db      	lsrs	r3, r3, #3
 800d6dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	fb02 f303 	mul.w	r3, r2, r3
 800d6e6:	ee07 3a90 	vmov	s15, r3
 800d6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f000 8086 	beq.w	800d806 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d003      	beq.n	800d708 <HAL_RCC_GetSysClockFreq+0xec>
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	2b03      	cmp	r3, #3
 800d704:	d022      	beq.n	800d74c <HAL_RCC_GetSysClockFreq+0x130>
 800d706:	e043      	b.n	800d790 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	ee07 3a90 	vmov	s15, r3
 800d70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d712:	eddf 6a44 	vldr	s13, [pc, #272]	; 800d824 <HAL_RCC_GetSysClockFreq+0x208>
 800d716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d71a:	4b3f      	ldr	r3, [pc, #252]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d722:	ee07 3a90 	vmov	s15, r3
 800d726:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d72a:	ed97 6a01 	vldr	s12, [r7, #4]
 800d72e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d828 <HAL_RCC_GetSysClockFreq+0x20c>
 800d732:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d736:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d73a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d742:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d746:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d74a:	e046      	b.n	800d7da <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	ee07 3a90 	vmov	s15, r3
 800d752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d756:	eddf 6a33 	vldr	s13, [pc, #204]	; 800d824 <HAL_RCC_GetSysClockFreq+0x208>
 800d75a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d75e:	4b2e      	ldr	r3, [pc, #184]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d766:	ee07 3a90 	vmov	s15, r3
 800d76a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d76e:	ed97 6a01 	vldr	s12, [r7, #4]
 800d772:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800d828 <HAL_RCC_GetSysClockFreq+0x20c>
 800d776:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d77a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d77e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d782:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d78a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d78e:	e024      	b.n	800d7da <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	ee07 3a90 	vmov	s15, r3
 800d796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	ee07 3a90 	vmov	s15, r3
 800d7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7a8:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b0:	ee07 3a90 	vmov	s15, r3
 800d7b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d7b8:	ed97 6a01 	vldr	s12, [r7, #4]
 800d7bc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800d828 <HAL_RCC_GetSysClockFreq+0x20c>
 800d7c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d7c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d7c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d7d8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d7da:	4b0f      	ldr	r3, [pc, #60]	; (800d818 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7de:	0e1b      	lsrs	r3, r3, #24
 800d7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	ee07 3a90 	vmov	s15, r3
 800d7ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d7f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7fe:	ee17 3a90 	vmov	r3, s15
 800d802:	623b      	str	r3, [r7, #32]
 800d804:	e001      	b.n	800d80a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800d80a:	6a3b      	ldr	r3, [r7, #32]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	372c      	adds	r7, #44	; 0x2c
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr
 800d818:	46020c00 	.word	0x46020c00
 800d81c:	0801f644 	.word	0x0801f644
 800d820:	00f42400 	.word	0x00f42400
 800d824:	4b742400 	.word	0x4b742400
 800d828:	46000000 	.word	0x46000000

0800d82c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d830:	f7ff fef4 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800d834:	4602      	mov	r2, r0
 800d836:	4b07      	ldr	r3, [pc, #28]	; (800d854 <HAL_RCC_GetHCLKFreq+0x28>)
 800d838:	6a1b      	ldr	r3, [r3, #32]
 800d83a:	f003 030f 	and.w	r3, r3, #15
 800d83e:	4906      	ldr	r1, [pc, #24]	; (800d858 <HAL_RCC_GetHCLKFreq+0x2c>)
 800d840:	5ccb      	ldrb	r3, [r1, r3]
 800d842:	fa22 f303 	lsr.w	r3, r2, r3
 800d846:	4a05      	ldr	r2, [pc, #20]	; (800d85c <HAL_RCC_GetHCLKFreq+0x30>)
 800d848:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d84a:	4b04      	ldr	r3, [pc, #16]	; (800d85c <HAL_RCC_GetHCLKFreq+0x30>)
 800d84c:	681b      	ldr	r3, [r3, #0]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	46020c00 	.word	0x46020c00
 800d858:	0801f62c 	.word	0x0801f62c
 800d85c:	2000000c 	.word	0x2000000c

0800d860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d864:	f7ff ffe2 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800d868:	4602      	mov	r2, r0
 800d86a:	4b05      	ldr	r3, [pc, #20]	; (800d880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	091b      	lsrs	r3, r3, #4
 800d870:	f003 0307 	and.w	r3, r3, #7
 800d874:	4903      	ldr	r1, [pc, #12]	; (800d884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d876:	5ccb      	ldrb	r3, [r1, r3]
 800d878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	46020c00 	.word	0x46020c00
 800d884:	0801f63c 	.word	0x0801f63c

0800d888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d88c:	f7ff ffce 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800d890:	4602      	mov	r2, r0
 800d892:	4b05      	ldr	r3, [pc, #20]	; (800d8a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	0a1b      	lsrs	r3, r3, #8
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	4903      	ldr	r1, [pc, #12]	; (800d8ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800d89e:	5ccb      	ldrb	r3, [r1, r3]
 800d8a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	46020c00 	.word	0x46020c00
 800d8ac:	0801f63c 	.word	0x0801f63c

0800d8b0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d8b4:	f7ff ffba 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	091b      	lsrs	r3, r3, #4
 800d8c0:	f003 0307 	and.w	r3, r3, #7
 800d8c4:	4903      	ldr	r1, [pc, #12]	; (800d8d4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800d8c6:	5ccb      	ldrb	r3, [r1, r3]
 800d8c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	46020c00 	.word	0x46020c00
 800d8d4:	0801f63c 	.word	0x0801f63c

0800d8d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b086      	sub	sp, #24
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d8e0:	4b3e      	ldr	r3, [pc, #248]	; (800d9dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d8e6:	f003 0304 	and.w	r3, r3, #4
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d003      	beq.n	800d8f6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d8ee:	f7fe fd8f 	bl	800c410 <HAL_PWREx_GetVoltageRange>
 800d8f2:	6178      	str	r0, [r7, #20]
 800d8f4:	e019      	b.n	800d92a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d8f6:	4b39      	ldr	r3, [pc, #228]	; (800d9dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d8f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d8fc:	4a37      	ldr	r2, [pc, #220]	; (800d9dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d8fe:	f043 0304 	orr.w	r3, r3, #4
 800d902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d906:	4b35      	ldr	r3, [pc, #212]	; (800d9dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d914:	f7fe fd7c 	bl	800c410 <HAL_PWREx_GetVoltageRange>
 800d918:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d91a:	4b30      	ldr	r3, [pc, #192]	; (800d9dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d91c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d920:	4a2e      	ldr	r2, [pc, #184]	; (800d9dc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d922:	f023 0304 	bic.w	r3, r3, #4
 800d926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d930:	d003      	beq.n	800d93a <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d938:	d109      	bne.n	800d94e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d940:	d202      	bcs.n	800d948 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d942:	2301      	movs	r3, #1
 800d944:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d946:	e033      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d948:	2300      	movs	r3, #0
 800d94a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d94c:	e030      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d954:	d208      	bcs.n	800d968 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d95c:	d102      	bne.n	800d964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d95e:	2303      	movs	r3, #3
 800d960:	613b      	str	r3, [r7, #16]
 800d962:	e025      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d964:	2301      	movs	r3, #1
 800d966:	e035      	b.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d96e:	d90f      	bls.n	800d990 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d109      	bne.n	800d98a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d97c:	d902      	bls.n	800d984 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d97e:	2300      	movs	r3, #0
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	e015      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d984:	2301      	movs	r3, #1
 800d986:	613b      	str	r3, [r7, #16]
 800d988:	e012      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d98a:	2300      	movs	r3, #0
 800d98c:	613b      	str	r3, [r7, #16]
 800d98e:	e00f      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d996:	d109      	bne.n	800d9ac <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d99e:	d102      	bne.n	800d9a6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	613b      	str	r3, [r7, #16]
 800d9a4:	e004      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	e001      	b.n	800d9b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d9b0:	4b0b      	ldr	r3, [pc, #44]	; (800d9e0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f023 020f 	bic.w	r2, r3, #15
 800d9b8:	4909      	ldr	r1, [pc, #36]	; (800d9e0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f003 030f 	and.w	r3, r3, #15
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d001      	beq.n	800d9d2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e000      	b.n	800d9d4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	46020c00 	.word	0x46020c00
 800d9e0:	40022000 	.word	0x40022000

0800d9e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d9e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9e8:	b0ba      	sub	sp, #232	; 0xe8
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d9fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da04:	f002 0401 	and.w	r4, r2, #1
 800da08:	2500      	movs	r5, #0
 800da0a:	ea54 0305 	orrs.w	r3, r4, r5
 800da0e:	d00b      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800da10:	4bcb      	ldr	r3, [pc, #812]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da16:	f023 0103 	bic.w	r1, r3, #3
 800da1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da20:	4ac7      	ldr	r2, [pc, #796]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da22:	430b      	orrs	r3, r1
 800da24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800da28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f002 0802 	and.w	r8, r2, #2
 800da34:	f04f 0900 	mov.w	r9, #0
 800da38:	ea58 0309 	orrs.w	r3, r8, r9
 800da3c:	d00b      	beq.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800da3e:	4bc0      	ldr	r3, [pc, #768]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da44:	f023 010c 	bic.w	r1, r3, #12
 800da48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da4e:	4abc      	ldr	r2, [pc, #752]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da50:	430b      	orrs	r3, r1
 800da52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800da56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5e:	f002 0a04 	and.w	sl, r2, #4
 800da62:	f04f 0b00 	mov.w	fp, #0
 800da66:	ea5a 030b 	orrs.w	r3, sl, fp
 800da6a:	d00b      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800da6c:	4bb4      	ldr	r3, [pc, #720]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da72:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800da76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da7c:	4ab0      	ldr	r2, [pc, #704]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800da7e:	430b      	orrs	r3, r1
 800da80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800da84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	f002 0308 	and.w	r3, r2, #8
 800da90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da94:	2300      	movs	r3, #0
 800da96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800da9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800da9e:	460b      	mov	r3, r1
 800daa0:	4313      	orrs	r3, r2
 800daa2:	d00b      	beq.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800daa4:	4ba6      	ldr	r3, [pc, #664]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800daa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800daaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800daae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dab4:	4aa2      	ldr	r2, [pc, #648]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dab6:	430b      	orrs	r3, r1
 800dab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dabc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	f002 0310 	and.w	r3, r2, #16
 800dac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dacc:	2300      	movs	r3, #0
 800dace:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dad2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dad6:	460b      	mov	r3, r1
 800dad8:	4313      	orrs	r3, r2
 800dada:	d00b      	beq.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800dadc:	4b98      	ldr	r3, [pc, #608]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800daea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daec:	4a94      	ldr	r2, [pc, #592]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800daee:	430b      	orrs	r3, r1
 800daf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800daf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	f002 0320 	and.w	r3, r2, #32
 800db00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db04:	2300      	movs	r3, #0
 800db06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800db0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800db0e:	460b      	mov	r3, r1
 800db10:	4313      	orrs	r3, r2
 800db12:	d00b      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800db14:	4b8a      	ldr	r3, [pc, #552]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800db16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800db1a:	f023 0107 	bic.w	r1, r3, #7
 800db1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db24:	4a86      	ldr	r2, [pc, #536]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800db26:	430b      	orrs	r3, r1
 800db28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800db2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800db38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db3c:	2300      	movs	r3, #0
 800db3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800db46:	460b      	mov	r3, r1
 800db48:	4313      	orrs	r3, r2
 800db4a:	d00b      	beq.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800db4c:	4b7c      	ldr	r3, [pc, #496]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800db4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db52:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800db56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db5c:	4a78      	ldr	r2, [pc, #480]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800db5e:	430b      	orrs	r3, r1
 800db60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800db64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800db70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800db74:	2300      	movs	r3, #0
 800db76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db7a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800db7e:	460b      	mov	r3, r1
 800db80:	4313      	orrs	r3, r2
 800db82:	d00b      	beq.n	800db9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800db84:	4b6e      	ldr	r3, [pc, #440]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800db86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800db8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db94:	4a6a      	ldr	r2, [pc, #424]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800db96:	430b      	orrs	r3, r1
 800db98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800db9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800dba8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dbac:	2300      	movs	r3, #0
 800dbae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dbb2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	d00b      	beq.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800dbbc:	4b60      	ldr	r3, [pc, #384]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dbbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dbc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dbc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbcc:	4a5c      	ldr	r2, [pc, #368]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dbce:	430b      	orrs	r3, r1
 800dbd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dbd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbdc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800dbe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dbea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800dbee:	460b      	mov	r3, r1
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	d00b      	beq.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800dbf4:	4b52      	ldr	r3, [pc, #328]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dbf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dbfa:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800dbfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc04:	4a4e      	ldr	r2, [pc, #312]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc06:	430b      	orrs	r3, r1
 800dc08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800dc0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800dc18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dc22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800dc26:	460b      	mov	r3, r1
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	d00b      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800dc2c:	4b44      	ldr	r3, [pc, #272]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dc32:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800dc36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc3c:	4a40      	ldr	r2, [pc, #256]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc3e:	430b      	orrs	r3, r1
 800dc40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800dc44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800dc50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc54:	2300      	movs	r3, #0
 800dc56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dc5a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4313      	orrs	r3, r2
 800dc62:	d00b      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800dc64:	4b36      	ldr	r3, [pc, #216]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc6a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800dc6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc74:	4a32      	ldr	r2, [pc, #200]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc76:	430b      	orrs	r3, r1
 800dc78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800dc7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc84:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800dc88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc92:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800dc96:	460b      	mov	r3, r1
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	d00c      	beq.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800dc9c:	4b28      	ldr	r3, [pc, #160]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dc9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcae:	4a24      	ldr	r2, [pc, #144]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dcb0:	430b      	orrs	r3, r1
 800dcb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dcb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800dcc2:	67bb      	str	r3, [r7, #120]	; 0x78
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dcc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800dccc:	460b      	mov	r3, r1
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	d04f      	beq.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800dcd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcda:	2b80      	cmp	r3, #128	; 0x80
 800dcdc:	d02d      	beq.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x356>
 800dcde:	2b80      	cmp	r3, #128	; 0x80
 800dce0:	d827      	bhi.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800dce2:	2b60      	cmp	r3, #96	; 0x60
 800dce4:	d02e      	beq.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800dce6:	2b60      	cmp	r3, #96	; 0x60
 800dce8:	d823      	bhi.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800dcea:	2b40      	cmp	r3, #64	; 0x40
 800dcec:	d006      	beq.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x318>
 800dcee:	2b40      	cmp	r3, #64	; 0x40
 800dcf0:	d81f      	bhi.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d009      	beq.n	800dd0a <HAL_RCCEx_PeriphCLKConfig+0x326>
 800dcf6:	2b20      	cmp	r3, #32
 800dcf8:	d011      	beq.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800dcfa:	e01a      	b.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dcfc:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd00:	4a0f      	ldr	r2, [pc, #60]	; (800dd40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800dd02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd06:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dd08:	e01d      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dd0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd0e:	3308      	adds	r3, #8
 800dd10:	4618      	mov	r0, r3
 800dd12:	f002 f9c3 	bl	801009c <RCCEx_PLL2_Config>
 800dd16:	4603      	mov	r3, r0
 800dd18:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dd1c:	e013      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd22:	332c      	adds	r3, #44	; 0x2c
 800dd24:	4618      	mov	r0, r3
 800dd26:	f002 fa51 	bl	80101cc <RCCEx_PLL3_Config>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dd30:	e009      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dd38:	e005      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800dd3a:	bf00      	nop
 800dd3c:	e003      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800dd3e:	bf00      	nop
 800dd40:	46020c00 	.word	0x46020c00
        break;
 800dd44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10d      	bne.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800dd4e:	4bb6      	ldr	r3, [pc, #728]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dd50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd54:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800dd58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd60:	4ab1      	ldr	r2, [pc, #708]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dd62:	430b      	orrs	r3, r1
 800dd64:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dd68:	e003      	b.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dd6e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800dd72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800dd7e:	673b      	str	r3, [r7, #112]	; 0x70
 800dd80:	2300      	movs	r3, #0
 800dd82:	677b      	str	r3, [r7, #116]	; 0x74
 800dd84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	d053      	beq.n	800de36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800dd8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd9a:	d033      	beq.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800dd9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dda0:	d82c      	bhi.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dda2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dda6:	d02f      	beq.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800dda8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ddac:	d826      	bhi.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800ddae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb2:	d008      	beq.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800ddb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb8:	d820      	bhi.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00a      	beq.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800ddbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddc2:	d011      	beq.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800ddc4:	e01a      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ddc6:	4b98      	ldr	r3, [pc, #608]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ddc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddca:	4a97      	ldr	r2, [pc, #604]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ddcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ddd0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ddd2:	e01a      	b.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ddd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddd8:	3308      	adds	r3, #8
 800ddda:	4618      	mov	r0, r3
 800dddc:	f002 f95e 	bl	801009c <RCCEx_PLL2_Config>
 800dde0:	4603      	mov	r3, r0
 800dde2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dde6:	e010      	b.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dde8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddec:	332c      	adds	r3, #44	; 0x2c
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f002 f9ec 	bl	80101cc <RCCEx_PLL3_Config>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ddfa:	e006      	b.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800de02:	e002      	b.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800de04:	bf00      	nop
 800de06:	e000      	b.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800de08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d10d      	bne.n	800de2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800de12:	4b85      	ldr	r3, [pc, #532]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800de14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de18:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800de1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de24:	4a80      	ldr	r2, [pc, #512]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800de26:	430b      	orrs	r3, r1
 800de28:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800de2c:	e003      	b.n	800de36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800de32:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800de36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800de42:	66bb      	str	r3, [r7, #104]	; 0x68
 800de44:	2300      	movs	r3, #0
 800de46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800de4c:	460b      	mov	r3, r1
 800de4e:	4313      	orrs	r3, r2
 800de50:	d046      	beq.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800de52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800de5a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de5e:	d028      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800de60:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de64:	d821      	bhi.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800de66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de6a:	d022      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800de6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de70:	d81b      	bhi.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800de72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800de76:	d01c      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800de78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800de7c:	d815      	bhi.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800de7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de82:	d008      	beq.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800de84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de88:	d80f      	bhi.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d011      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800de8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de92:	d00e      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800de94:	e009      	b.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800de96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800de9a:	3308      	adds	r3, #8
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 f8fd 	bl	801009c <RCCEx_PLL2_Config>
 800dea2:	4603      	mov	r3, r0
 800dea4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dea8:	e004      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800deb0:	e000      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800deb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800deb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10d      	bne.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800debc:	4b5a      	ldr	r3, [pc, #360]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800debe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dec2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800dec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800deca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dece:	4a56      	ldr	r2, [pc, #344]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ded0:	430b      	orrs	r3, r1
 800ded2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ded6:	e003      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ded8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800dedc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800dee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800deec:	663b      	str	r3, [r7, #96]	; 0x60
 800deee:	2300      	movs	r3, #0
 800def0:	667b      	str	r3, [r7, #100]	; 0x64
 800def2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800def6:	460b      	mov	r3, r1
 800def8:	4313      	orrs	r3, r2
 800defa:	d03f      	beq.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800defc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df04:	2b04      	cmp	r3, #4
 800df06:	d81e      	bhi.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800df08:	a201      	add	r2, pc, #4	; (adr r2, 800df10 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800df0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0e:	bf00      	nop
 800df10:	0800df4f 	.word	0x0800df4f
 800df14:	0800df25 	.word	0x0800df25
 800df18:	0800df33 	.word	0x0800df33
 800df1c:	0800df4f 	.word	0x0800df4f
 800df20:	0800df4f 	.word	0x0800df4f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800df24:	4b40      	ldr	r3, [pc, #256]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800df26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df28:	4a3f      	ldr	r2, [pc, #252]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800df2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df2e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800df30:	e00e      	b.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800df32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df36:	332c      	adds	r3, #44	; 0x2c
 800df38:	4618      	mov	r0, r3
 800df3a:	f002 f947 	bl	80101cc <RCCEx_PLL3_Config>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800df44:	e004      	b.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800df4c:	e000      	b.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800df4e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800df50:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10d      	bne.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800df58:	4b33      	ldr	r3, [pc, #204]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800df5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800df5e:	f023 0107 	bic.w	r1, r3, #7
 800df62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df6a:	4a2f      	ldr	r2, [pc, #188]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800df6c:	430b      	orrs	r3, r1
 800df6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800df72:	e003      	b.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df74:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800df78:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800df7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df84:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800df88:	65bb      	str	r3, [r7, #88]	; 0x58
 800df8a:	2300      	movs	r3, #0
 800df8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800df92:	460b      	mov	r3, r1
 800df94:	4313      	orrs	r3, r2
 800df96:	d04d      	beq.n	800e034 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800df98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dfa4:	d028      	beq.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800dfa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dfaa:	d821      	bhi.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dfac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dfb0:	d024      	beq.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0x618>
 800dfb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dfb6:	d81b      	bhi.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dfb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfbc:	d00e      	beq.n	800dfdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800dfbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfc2:	d815      	bhi.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d01b      	beq.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800dfc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfcc:	d110      	bne.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dfce:	4b16      	ldr	r3, [pc, #88]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd2:	4a15      	ldr	r2, [pc, #84]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dfd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfd8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800dfda:	e012      	b.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dfdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfe0:	332c      	adds	r3, #44	; 0x2c
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f002 f8f2 	bl	80101cc <RCCEx_PLL3_Config>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dfee:	e008      	b.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800dff6:	e004      	b.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dff8:	bf00      	nop
 800dffa:	e002      	b.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dffc:	bf00      	nop
 800dffe:	e000      	b.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800e000:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e002:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e006:	2b00      	cmp	r3, #0
 800e008:	d110      	bne.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800e00a:	4b07      	ldr	r3, [pc, #28]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e00c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e010:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e01c:	4a02      	ldr	r2, [pc, #8]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e01e:	430b      	orrs	r3, r1
 800e020:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e024:	e006      	b.n	800e034 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800e026:	bf00      	nop
 800e028:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e02c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e030:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e040:	653b      	str	r3, [r7, #80]	; 0x50
 800e042:	2300      	movs	r3, #0
 800e044:	657b      	str	r3, [r7, #84]	; 0x54
 800e046:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e04a:	460b      	mov	r3, r1
 800e04c:	4313      	orrs	r3, r2
 800e04e:	f000 80b5 	beq.w	800e1bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e052:	2300      	movs	r3, #0
 800e054:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e058:	4b9d      	ldr	r3, [pc, #628]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e05a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e05e:	f003 0304 	and.w	r3, r3, #4
 800e062:	2b00      	cmp	r3, #0
 800e064:	d113      	bne.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e066:	4b9a      	ldr	r3, [pc, #616]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e06c:	4a98      	ldr	r2, [pc, #608]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e06e:	f043 0304 	orr.w	r3, r3, #4
 800e072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e076:	4b96      	ldr	r3, [pc, #600]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e07c:	f003 0304 	and.w	r3, r3, #4
 800e080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800e088:	2301      	movs	r3, #1
 800e08a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800e08e:	4b91      	ldr	r3, [pc, #580]	; (800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e092:	4a90      	ldr	r2, [pc, #576]	; (800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e094:	f043 0301 	orr.w	r3, r3, #1
 800e098:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e09a:	f7f9 fa9f 	bl	80075dc <HAL_GetTick>
 800e09e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e0a2:	e00b      	b.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0a4:	f7f9 fa9a 	bl	80075dc <HAL_GetTick>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d903      	bls.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e0ba:	e005      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e0bc:	4b85      	ldr	r3, [pc, #532]	; (800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800e0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d0ed      	beq.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800e0c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d165      	bne.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e0d0:	4b7f      	ldr	r3, [pc, #508]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e0d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800e0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d023      	beq.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800e0e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800e0ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d01b      	beq.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e0f6:	4b76      	ldr	r3, [pc, #472]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e0f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e0fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e104:	4b72      	ldr	r3, [pc, #456]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e10a:	4a71      	ldr	r2, [pc, #452]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e10c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e110:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e114:	4b6e      	ldr	r3, [pc, #440]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e11a:	4a6d      	ldr	r2, [pc, #436]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e11c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e120:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e124:	4a6a      	ldr	r2, [pc, #424]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e12a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	d019      	beq.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e13a:	f7f9 fa4f 	bl	80075dc <HAL_GetTick>
 800e13e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e142:	e00d      	b.n	800e160 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e144:	f7f9 fa4a 	bl	80075dc <HAL_GetTick>
 800e148:	4602      	mov	r2, r0
 800e14a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e14e:	1ad2      	subs	r2, r2, r3
 800e150:	f241 3388 	movw	r3, #5000	; 0x1388
 800e154:	429a      	cmp	r2, r3
 800e156:	d903      	bls.n	800e160 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800e158:	2303      	movs	r3, #3
 800e15a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800e15e:	e006      	b.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e160:	4b5b      	ldr	r3, [pc, #364]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e166:	f003 0302 	and.w	r3, r3, #2
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0ea      	beq.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800e16e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10d      	bne.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800e176:	4b56      	ldr	r3, [pc, #344]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e17c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e184:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e188:	4a51      	ldr	r2, [pc, #324]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e18a:	430b      	orrs	r3, r1
 800e18c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e190:	e008      	b.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e192:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e196:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800e19a:	e003      	b.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e19c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e1a0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e1a4:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d107      	bne.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e1ac:	4b48      	ldr	r3, [pc, #288]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e1ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e1b2:	4a47      	ldr	r2, [pc, #284]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e1b4:	f023 0304 	bic.w	r3, r3, #4
 800e1b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800e1bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e1c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	d042      	beq.n	800e25e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800e1d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e1e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e1e4:	d022      	beq.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x848>
 800e1e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e1ea:	d81b      	bhi.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e1ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1f0:	d011      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800e1f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1f6:	d815      	bhi.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d019      	beq.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800e1fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e200:	d110      	bne.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e206:	3308      	adds	r3, #8
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 ff47 	bl	801009c <RCCEx_PLL2_Config>
 800e20e:	4603      	mov	r3, r0
 800e210:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e214:	e00d      	b.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e216:	4b2e      	ldr	r3, [pc, #184]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e21a:	4a2d      	ldr	r2, [pc, #180]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e21c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e220:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e222:	e006      	b.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e22a:	e002      	b.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e22c:	bf00      	nop
 800e22e:	e000      	b.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800e230:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e232:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10d      	bne.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800e23a:	4b25      	ldr	r3, [pc, #148]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e23c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e240:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800e244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e24c:	4a20      	ldr	r2, [pc, #128]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e24e:	430b      	orrs	r3, r1
 800e250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e254:	e003      	b.n	800e25e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e256:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e25a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e26a:	643b      	str	r3, [r7, #64]	; 0x40
 800e26c:	2300      	movs	r3, #0
 800e26e:	647b      	str	r3, [r7, #68]	; 0x44
 800e270:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e274:	460b      	mov	r3, r1
 800e276:	4313      	orrs	r3, r2
 800e278:	d032      	beq.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e27a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e27e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e286:	d00b      	beq.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e28c:	d804      	bhi.n	800e298 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d008      	beq.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800e292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e296:	d007      	beq.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e29e:	e004      	b.n	800e2aa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e2a0:	bf00      	nop
 800e2a2:	e002      	b.n	800e2aa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e2a4:	bf00      	nop
 800e2a6:	e000      	b.n	800e2aa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800e2a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e2aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d112      	bne.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e2b2:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e2b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e2b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e2bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e2c4:	4a02      	ldr	r2, [pc, #8]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800e2c6:	430b      	orrs	r3, r1
 800e2c8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e2cc:	e008      	b.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800e2ce:	bf00      	nop
 800e2d0:	46020c00 	.word	0x46020c00
 800e2d4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e2dc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e2e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e2ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	d00c      	beq.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e2fc:	4b98      	ldr	r3, [pc, #608]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e2fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e302:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800e306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e30a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e30e:	4a94      	ldr	r2, [pc, #592]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e310:	430b      	orrs	r3, r1
 800e312:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e322:	633b      	str	r3, [r7, #48]	; 0x30
 800e324:	2300      	movs	r3, #0
 800e326:	637b      	str	r3, [r7, #52]	; 0x34
 800e328:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e32c:	460b      	mov	r3, r1
 800e32e:	4313      	orrs	r3, r2
 800e330:	d019      	beq.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e33a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e33e:	d105      	bne.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e340:	4b87      	ldr	r3, [pc, #540]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e344:	4a86      	ldr	r2, [pc, #536]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e34a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e34c:	4b84      	ldr	r3, [pc, #528]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e34e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e352:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e35a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e35e:	4a80      	ldr	r2, [pc, #512]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e360:	430b      	orrs	r3, r1
 800e362:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e372:	62bb      	str	r3, [r7, #40]	; 0x28
 800e374:	2300      	movs	r3, #0
 800e376:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e378:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e37c:	460b      	mov	r3, r1
 800e37e:	4313      	orrs	r3, r2
 800e380:	d00c      	beq.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e382:	4b77      	ldr	r3, [pc, #476]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e38c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e390:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e394:	4972      	ldr	r1, [pc, #456]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e396:	4313      	orrs	r3, r2
 800e398:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e39c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e3a8:	623b      	str	r3, [r7, #32]
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	d00c      	beq.n	800e3d2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e3b8:	4b69      	ldr	r3, [pc, #420]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e3ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e3ca:	4965      	ldr	r1, [pc, #404]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e3d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3da:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e3de:	61bb      	str	r3, [r7, #24]
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	61fb      	str	r3, [r7, #28]
 800e3e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	d00c      	beq.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e3ee:	4b5c      	ldr	r3, [pc, #368]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e3f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e3f4:	f023 0218 	bic.w	r2, r3, #24
 800e3f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e400:	4957      	ldr	r1, [pc, #348]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e402:	4313      	orrs	r3, r2
 800e404:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800e414:	613b      	str	r3, [r7, #16]
 800e416:	2300      	movs	r3, #0
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e41e:	460b      	mov	r3, r1
 800e420:	4313      	orrs	r3, r2
 800e422:	d032      	beq.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e42c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e430:	d105      	bne.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e432:	4b4b      	ldr	r3, [pc, #300]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e436:	4a4a      	ldr	r2, [pc, #296]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e43c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e43e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e44a:	d108      	bne.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e44c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e450:	3308      	adds	r3, #8
 800e452:	4618      	mov	r0, r3
 800e454:	f001 fe22 	bl	801009c <RCCEx_PLL2_Config>
 800e458:	4603      	mov	r3, r0
 800e45a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800e45e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10d      	bne.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e466:	4b3e      	ldr	r3, [pc, #248]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e46c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e474:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e478:	4939      	ldr	r1, [pc, #228]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e47a:	4313      	orrs	r3, r2
 800e47c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e480:	e003      	b.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e482:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e486:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e48a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800e496:	60bb      	str	r3, [r7, #8]
 800e498:	2300      	movs	r3, #0
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	d03a      	beq.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e4a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4b2:	d00e      	beq.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800e4b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4b8:	d815      	bhi.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d017      	beq.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e4be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e4c2:	d110      	bne.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4c4:	4b26      	ldr	r3, [pc, #152]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c8:	4a25      	ldr	r2, [pc, #148]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e4ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e4ce:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e4d0:	e00e      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e4d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f001 fddf 	bl	801009c <RCCEx_PLL2_Config>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e4e4:	e004      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800e4ec:	e000      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800e4ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e4f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10d      	bne.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e4f8:	4b19      	ldr	r3, [pc, #100]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e4fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e50a:	4915      	ldr	r1, [pc, #84]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e50c:	4313      	orrs	r3, r2
 800e50e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800e512:	e003      	b.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e514:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e518:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e51c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e524:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e528:	603b      	str	r3, [r7, #0]
 800e52a:	2300      	movs	r3, #0
 800e52c:	607b      	str	r3, [r7, #4]
 800e52e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e532:	460b      	mov	r3, r1
 800e534:	4313      	orrs	r3, r2
 800e536:	d00c      	beq.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e538:	4b09      	ldr	r3, [pc, #36]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e53a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e53e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e54a:	4905      	ldr	r1, [pc, #20]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e54c:	4313      	orrs	r3, r2
 800e54e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e552:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800e556:	4618      	mov	r0, r3
 800e558:	37e8      	adds	r7, #232	; 0xe8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e560:	46020c00 	.word	0x46020c00

0800e564 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e564:	b480      	push	{r7}
 800e566:	b089      	sub	sp, #36	; 0x24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e56c:	4bac      	ldr	r3, [pc, #688]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e574:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e576:	4baa      	ldr	r3, [pc, #680]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e57a:	f003 0303 	and.w	r3, r3, #3
 800e57e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e580:	4ba7      	ldr	r3, [pc, #668]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e584:	0a1b      	lsrs	r3, r3, #8
 800e586:	f003 030f 	and.w	r3, r3, #15
 800e58a:	3301      	adds	r3, #1
 800e58c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800e58e:	4ba4      	ldr	r3, [pc, #656]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e592:	f003 0310 	and.w	r3, r3, #16
 800e596:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e598:	4ba1      	ldr	r3, [pc, #644]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59c:	08db      	lsrs	r3, r3, #3
 800e59e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	fb02 f303 	mul.w	r3, r2, r3
 800e5a8:	ee07 3a90 	vmov	s15, r3
 800e5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5b0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f000 8123 	beq.w	800e802 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	2b03      	cmp	r3, #3
 800e5c0:	d062      	beq.n	800e688 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	2b03      	cmp	r3, #3
 800e5c6:	f200 8081 	bhi.w	800e6cc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d024      	beq.n	800e61a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d17a      	bne.n	800e6cc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	ee07 3a90 	vmov	s15, r3
 800e5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5e0:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e824 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800e5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5e8:	4b8d      	ldr	r3, [pc, #564]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5f0:	ee07 3a90 	vmov	s15, r3
 800e5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e5f8:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5fc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800e828 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e600:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e604:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e618:	e08f      	b.n	800e73a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e61a:	4b81      	ldr	r3, [pc, #516]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e622:	2b00      	cmp	r3, #0
 800e624:	d005      	beq.n	800e632 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800e626:	4b7e      	ldr	r3, [pc, #504]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	0f1b      	lsrs	r3, r3, #28
 800e62c:	f003 030f 	and.w	r3, r3, #15
 800e630:	e006      	b.n	800e640 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800e632:	4b7b      	ldr	r3, [pc, #492]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e638:	041b      	lsls	r3, r3, #16
 800e63a:	0f1b      	lsrs	r3, r3, #28
 800e63c:	f003 030f 	and.w	r3, r3, #15
 800e640:	4a7a      	ldr	r2, [pc, #488]	; (800e82c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800e642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e646:	ee07 3a90 	vmov	s15, r3
 800e64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	ee07 3a90 	vmov	s15, r3
 800e654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	ee07 3a90 	vmov	s15, r3
 800e662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e666:	ed97 6a02 	vldr	s12, [r7, #8]
 800e66a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e828 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e686:	e058      	b.n	800e73a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	ee07 3a90 	vmov	s15, r3
 800e68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e692:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e824 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800e696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e69a:	4b61      	ldr	r3, [pc, #388]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a2:	ee07 3a90 	vmov	s15, r3
 800e6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6ae:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e828 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6ca:	e036      	b.n	800e73a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e6cc:	4b54      	ldr	r3, [pc, #336]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d005      	beq.n	800e6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800e6d8:	4b51      	ldr	r3, [pc, #324]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	0f1b      	lsrs	r3, r3, #28
 800e6de:	f003 030f 	and.w	r3, r3, #15
 800e6e2:	e006      	b.n	800e6f2 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800e6e4:	4b4e      	ldr	r3, [pc, #312]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e6e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e6ea:	041b      	lsls	r3, r3, #16
 800e6ec:	0f1b      	lsrs	r3, r3, #28
 800e6ee:	f003 030f 	and.w	r3, r3, #15
 800e6f2:	4a4e      	ldr	r2, [pc, #312]	; (800e82c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800e6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6f8:	ee07 3a90 	vmov	s15, r3
 800e6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	ee07 3a90 	vmov	s15, r3
 800e706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	ee07 3a90 	vmov	s15, r3
 800e714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e718:	ed97 6a02 	vldr	s12, [r7, #8]
 800e71c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e828 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e72c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e730:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e734:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e738:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e73a:	4b39      	ldr	r3, [pc, #228]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e742:	2b00      	cmp	r3, #0
 800e744:	d017      	beq.n	800e776 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e746:	4b36      	ldr	r3, [pc, #216]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74a:	0a5b      	lsrs	r3, r3, #9
 800e74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e750:	ee07 3a90 	vmov	s15, r3
 800e754:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e75c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e760:	edd7 6a07 	vldr	s13, [r7, #28]
 800e764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e76c:	ee17 2a90 	vmov	r2, s15
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	e002      	b.n	800e77c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e77c:	4b28      	ldr	r3, [pc, #160]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e784:	2b00      	cmp	r3, #0
 800e786:	d017      	beq.n	800e7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e788:	4b25      	ldr	r3, [pc, #148]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e78c:	0c1b      	lsrs	r3, r3, #16
 800e78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e792:	ee07 3a90 	vmov	s15, r3
 800e796:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e79a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e79e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e7a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7ae:	ee17 2a90 	vmov	r2, s15
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	605a      	str	r2, [r3, #4]
 800e7b6:	e002      	b.n	800e7be <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e7be:	4b18      	ldr	r3, [pc, #96]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d017      	beq.n	800e7fa <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e7ca:	4b15      	ldr	r3, [pc, #84]	; (800e820 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800e7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ce:	0e1b      	lsrs	r3, r3, #24
 800e7d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7d4:	ee07 3a90 	vmov	s15, r3
 800e7d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e7dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e7e0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e7e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7f0:	ee17 2a90 	vmov	r2, s15
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e7f8:	e00c      	b.n	800e814 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	609a      	str	r2, [r3, #8]
}
 800e800:	e008      	b.n	800e814 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	609a      	str	r2, [r3, #8]
}
 800e814:	bf00      	nop
 800e816:	3724      	adds	r7, #36	; 0x24
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	46020c00 	.word	0x46020c00
 800e824:	4b742400 	.word	0x4b742400
 800e828:	46000000 	.word	0x46000000
 800e82c:	0801f644 	.word	0x0801f644

0800e830 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e830:	b480      	push	{r7}
 800e832:	b089      	sub	sp, #36	; 0x24
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e838:	4bac      	ldr	r3, [pc, #688]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e840:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e842:	4baa      	ldr	r3, [pc, #680]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e846:	f003 0303 	and.w	r3, r3, #3
 800e84a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e84c:	4ba7      	ldr	r3, [pc, #668]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	0a1b      	lsrs	r3, r3, #8
 800e852:	f003 030f 	and.w	r3, r3, #15
 800e856:	3301      	adds	r3, #1
 800e858:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800e85a:	4ba4      	ldr	r3, [pc, #656]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85e:	f003 0310 	and.w	r3, r3, #16
 800e862:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e864:	4ba1      	ldr	r3, [pc, #644]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e868:	08db      	lsrs	r3, r3, #3
 800e86a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	fb02 f303 	mul.w	r3, r2, r3
 800e874:	ee07 3a90 	vmov	s15, r3
 800e878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e87c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	2b00      	cmp	r3, #0
 800e884:	f000 8123 	beq.w	800eace <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	d062      	beq.n	800e954 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	2b03      	cmp	r3, #3
 800e892:	f200 8081 	bhi.w	800e998 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d024      	beq.n	800e8e6 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d17a      	bne.n	800e998 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	ee07 3a90 	vmov	s15, r3
 800e8a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8ac:	eddf 6a90 	vldr	s13, [pc, #576]	; 800eaf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800e8b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8b4:	4b8d      	ldr	r3, [pc, #564]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8bc:	ee07 3a90 	vmov	s15, r3
 800e8c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e8c4:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8c8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e8cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e8d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e8d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e8dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8e4:	e08f      	b.n	800ea06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e8e6:	4b81      	ldr	r3, [pc, #516]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d005      	beq.n	800e8fe <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800e8f2:	4b7e      	ldr	r3, [pc, #504]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	0f1b      	lsrs	r3, r3, #28
 800e8f8:	f003 030f 	and.w	r3, r3, #15
 800e8fc:	e006      	b.n	800e90c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800e8fe:	4b7b      	ldr	r3, [pc, #492]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e904:	041b      	lsls	r3, r3, #16
 800e906:	0f1b      	lsrs	r3, r3, #28
 800e908:	f003 030f 	and.w	r3, r3, #15
 800e90c:	4a7a      	ldr	r2, [pc, #488]	; (800eaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800e90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e912:	ee07 3a90 	vmov	s15, r3
 800e916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	ee07 3a90 	vmov	s15, r3
 800e920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	ee07 3a90 	vmov	s15, r3
 800e92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e932:	ed97 6a02 	vldr	s12, [r7, #8]
 800e936:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e946:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e952:	e058      	b.n	800ea06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	ee07 3a90 	vmov	s15, r3
 800e95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e95e:	eddf 6a64 	vldr	s13, [pc, #400]	; 800eaf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800e962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e966:	4b61      	ldr	r3, [pc, #388]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e96e:	ee07 3a90 	vmov	s15, r3
 800e972:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e976:	ed97 6a02 	vldr	s12, [r7, #8]
 800e97a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e982:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e996:	e036      	b.n	800ea06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e998:	4b54      	ldr	r3, [pc, #336]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d005      	beq.n	800e9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800e9a4:	4b51      	ldr	r3, [pc, #324]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	0f1b      	lsrs	r3, r3, #28
 800e9aa:	f003 030f 	and.w	r3, r3, #15
 800e9ae:	e006      	b.n	800e9be <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800e9b0:	4b4e      	ldr	r3, [pc, #312]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800e9b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e9b6:	041b      	lsls	r3, r3, #16
 800e9b8:	0f1b      	lsrs	r3, r3, #28
 800e9ba:	f003 030f 	and.w	r3, r3, #15
 800e9be:	4a4e      	ldr	r2, [pc, #312]	; (800eaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800e9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9c4:	ee07 3a90 	vmov	s15, r3
 800e9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	ee07 3a90 	vmov	s15, r3
 800e9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	ee07 3a90 	vmov	s15, r3
 800e9e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9e4:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9e8:	eddf 5a42 	vldr	s11, [pc, #264]	; 800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e9ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e9fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea04:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ea06:	4b39      	ldr	r3, [pc, #228]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d017      	beq.n	800ea42 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea12:	4b36      	ldr	r3, [pc, #216]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea16:	0a5b      	lsrs	r3, r3, #9
 800ea18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea1c:	ee07 3a90 	vmov	s15, r3
 800ea20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ea24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea28:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea38:	ee17 2a90 	vmov	r2, s15
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	e002      	b.n	800ea48 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ea48:	4b28      	ldr	r3, [pc, #160]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d017      	beq.n	800ea84 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea54:	4b25      	ldr	r3, [pc, #148]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea58:	0c1b      	lsrs	r3, r3, #16
 800ea5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea5e:	ee07 3a90 	vmov	s15, r3
 800ea62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ea66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea6a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea7a:	ee17 2a90 	vmov	r2, s15
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	605a      	str	r2, [r3, #4]
 800ea82:	e002      	b.n	800ea8a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ea8a:	4b18      	ldr	r3, [pc, #96]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d017      	beq.n	800eac6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea96:	4b15      	ldr	r3, [pc, #84]	; (800eaec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ea98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9a:	0e1b      	lsrs	r3, r3, #24
 800ea9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaa0:	ee07 3a90 	vmov	s15, r3
 800eaa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800eaa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800eab0:	edd7 6a07 	vldr	s13, [r7, #28]
 800eab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eabc:	ee17 2a90 	vmov	r2, s15
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800eac4:	e00c      	b.n	800eae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	609a      	str	r2, [r3, #8]
}
 800eacc:	e008      	b.n	800eae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	609a      	str	r2, [r3, #8]
}
 800eae0:	bf00      	nop
 800eae2:	3724      	adds	r7, #36	; 0x24
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	46020c00 	.word	0x46020c00
 800eaf0:	4b742400 	.word	0x4b742400
 800eaf4:	46000000 	.word	0x46000000
 800eaf8:	0801f644 	.word	0x0801f644

0800eafc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b089      	sub	sp, #36	; 0x24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800eb04:	4bac      	ldr	r3, [pc, #688]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eb06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb0c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800eb0e:	4baa      	ldr	r3, [pc, #680]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb12:	f003 0303 	and.w	r3, r3, #3
 800eb16:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800eb18:	4ba7      	ldr	r3, [pc, #668]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb1c:	0a1b      	lsrs	r3, r3, #8
 800eb1e:	f003 030f 	and.w	r3, r3, #15
 800eb22:	3301      	adds	r3, #1
 800eb24:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800eb26:	4ba4      	ldr	r3, [pc, #656]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb2a:	f003 0310 	and.w	r3, r3, #16
 800eb2e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800eb30:	4ba1      	ldr	r3, [pc, #644]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eb32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb34:	08db      	lsrs	r3, r3, #3
 800eb36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	fb02 f303 	mul.w	r3, r2, r3
 800eb40:	ee07 3a90 	vmov	s15, r3
 800eb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb48:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 8123 	beq.w	800ed9a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d062      	beq.n	800ec20 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	f200 8081 	bhi.w	800ec64 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d024      	beq.n	800ebb2 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d17a      	bne.n	800ec64 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	ee07 3a90 	vmov	s15, r3
 800eb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb78:	eddf 6a90 	vldr	s13, [pc, #576]	; 800edbc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800eb7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb80:	4b8d      	ldr	r3, [pc, #564]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800eb82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb88:	ee07 3a90 	vmov	s15, r3
 800eb8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800eb90:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb94:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800edc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800eb98:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eb9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800eba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebac:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800ebb0:	e08f      	b.n	800ecd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ebb2:	4b81      	ldr	r3, [pc, #516]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d005      	beq.n	800ebca <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800ebbe:	4b7e      	ldr	r3, [pc, #504]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	0f1b      	lsrs	r3, r3, #28
 800ebc4:	f003 030f 	and.w	r3, r3, #15
 800ebc8:	e006      	b.n	800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800ebca:	4b7b      	ldr	r3, [pc, #492]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ebcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ebd0:	041b      	lsls	r3, r3, #16
 800ebd2:	0f1b      	lsrs	r3, r3, #28
 800ebd4:	f003 030f 	and.w	r3, r3, #15
 800ebd8:	4a7a      	ldr	r2, [pc, #488]	; (800edc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800ebda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebde:	ee07 3a90 	vmov	s15, r3
 800ebe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	ee07 3a90 	vmov	s15, r3
 800ebec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	ee07 3a90 	vmov	s15, r3
 800ebfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebfe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec02:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800edc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ec06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ec16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec1e:	e058      	b.n	800ecd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	ee07 3a90 	vmov	s15, r3
 800ec26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec2a:	eddf 6a64 	vldr	s13, [pc, #400]	; 800edbc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800ec2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec32:	4b61      	ldr	r3, [pc, #388]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ec34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec3a:	ee07 3a90 	vmov	s15, r3
 800ec3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec42:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec46:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800edc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ec4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ec4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec56:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ec5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec62:	e036      	b.n	800ecd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ec64:	4b54      	ldr	r3, [pc, #336]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d005      	beq.n	800ec7c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800ec70:	4b51      	ldr	r3, [pc, #324]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	0f1b      	lsrs	r3, r3, #28
 800ec76:	f003 030f 	and.w	r3, r3, #15
 800ec7a:	e006      	b.n	800ec8a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800ec7c:	4b4e      	ldr	r3, [pc, #312]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ec7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec82:	041b      	lsls	r3, r3, #16
 800ec84:	0f1b      	lsrs	r3, r3, #28
 800ec86:	f003 030f 	and.w	r3, r3, #15
 800ec8a:	4a4e      	ldr	r2, [pc, #312]	; (800edc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800ec8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec90:	ee07 3a90 	vmov	s15, r3
 800ec94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	ee07 3a90 	vmov	s15, r3
 800ec9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	ee07 3a90 	vmov	s15, r3
 800ecac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecb0:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecb4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800edc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ecb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ecc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecd0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ecd2:	4b39      	ldr	r3, [pc, #228]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ecd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d017      	beq.n	800ed0e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ecde:	4b36      	ldr	r3, [pc, #216]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ece0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece2:	0a5b      	lsrs	r3, r3, #9
 800ece4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ece8:	ee07 3a90 	vmov	s15, r3
 800ecec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ecf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecf4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ecf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed04:	ee17 2a90 	vmov	r2, s15
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	601a      	str	r2, [r3, #0]
 800ed0c:	e002      	b.n	800ed14 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ed14:	4b28      	ldr	r3, [pc, #160]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d017      	beq.n	800ed50 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ed20:	4b25      	ldr	r3, [pc, #148]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed24:	0c1b      	lsrs	r3, r3, #16
 800ed26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed2a:	ee07 3a90 	vmov	s15, r3
 800ed2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ed32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed36:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ed3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed46:	ee17 2a90 	vmov	r2, s15
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	605a      	str	r2, [r3, #4]
 800ed4e:	e002      	b.n	800ed56 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ed56:	4b18      	ldr	r3, [pc, #96]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d017      	beq.n	800ed92 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ed62:	4b15      	ldr	r3, [pc, #84]	; (800edb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800ed64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed66:	0e1b      	lsrs	r3, r3, #24
 800ed68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed6c:	ee07 3a90 	vmov	s15, r3
 800ed70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ed74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed78:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ed7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed88:	ee17 2a90 	vmov	r2, s15
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800ed90:	e00c      	b.n	800edac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	609a      	str	r2, [r3, #8]
}
 800ed98:	e008      	b.n	800edac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2200      	movs	r2, #0
 800eda4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	609a      	str	r2, [r3, #8]
}
 800edac:	bf00      	nop
 800edae:	3724      	adds	r7, #36	; 0x24
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr
 800edb8:	46020c00 	.word	0x46020c00
 800edbc:	4b742400 	.word	0x4b742400
 800edc0:	46000000 	.word	0x46000000
 800edc4:	0801f644 	.word	0x0801f644

0800edc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08e      	sub	sp, #56	; 0x38
 800edcc:	af00      	add	r7, sp, #0
 800edce:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800edd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edd6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800edda:	430b      	orrs	r3, r1
 800eddc:	d145      	bne.n	800ee6a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800edde:	4ba7      	ldr	r3, [pc, #668]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ede0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ede4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ede8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800edea:	4ba4      	ldr	r3, [pc, #656]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800edec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d108      	bne.n	800ee0a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edfe:	d104      	bne.n	800ee0a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ee00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee04:	637b      	str	r3, [r7, #52]	; 0x34
 800ee06:	f001 b8fc 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ee0a:	4b9c      	ldr	r3, [pc, #624]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee18:	d114      	bne.n	800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee20:	d110      	bne.n	800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ee22:	4b96      	ldr	r3, [pc, #600]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee30:	d103      	bne.n	800ee3a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800ee32:	23fa      	movs	r3, #250	; 0xfa
 800ee34:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ee36:	f001 b8e4 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800ee3a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ee3e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ee40:	f001 b8df 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800ee44:	4b8d      	ldr	r3, [pc, #564]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee50:	d107      	bne.n	800ee62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ee52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee58:	d103      	bne.n	800ee62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800ee5a:	4b89      	ldr	r3, [pc, #548]	; (800f080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800ee5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee5e:	f001 b8d0 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ee62:	2300      	movs	r3, #0
 800ee64:	637b      	str	r3, [r7, #52]	; 0x34
 800ee66:	f001 b8cc 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ee6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee6e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ee72:	430b      	orrs	r3, r1
 800ee74:	d151      	bne.n	800ef1a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ee76:	4b81      	ldr	r3, [pc, #516]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ee7c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ee80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ee82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee84:	2b80      	cmp	r3, #128	; 0x80
 800ee86:	d035      	beq.n	800eef4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800ee88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8a:	2b80      	cmp	r3, #128	; 0x80
 800ee8c:	d841      	bhi.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	2b60      	cmp	r3, #96	; 0x60
 800ee92:	d02a      	beq.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	2b60      	cmp	r3, #96	; 0x60
 800ee98:	d83b      	bhi.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ee9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9c:	2b40      	cmp	r3, #64	; 0x40
 800ee9e:	d009      	beq.n	800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800eea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea2:	2b40      	cmp	r3, #64	; 0x40
 800eea4:	d835      	bhi.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00c      	beq.n	800eec6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800eeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeae:	2b20      	cmp	r3, #32
 800eeb0:	d012      	beq.n	800eed8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800eeb2:	e02e      	b.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eeb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff fb53 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800eebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eec2:	f001 b89e 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eec6:	f107 0318 	add.w	r3, r7, #24
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7ff fcb0 	bl	800e830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eed4:	f001 b895 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eed8:	f107 030c 	add.w	r3, r7, #12
 800eedc:	4618      	mov	r0, r3
 800eede:	f7ff fe0d 	bl	800eafc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eee6:	f001 b88c 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800eeea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800eeee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eef0:	f001 b887 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eef4:	4b61      	ldr	r3, [pc, #388]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eefc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef00:	d103      	bne.n	800ef0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800ef02:	4b60      	ldr	r3, [pc, #384]	; (800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ef04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ef06:	f001 b87c 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef0e:	f001 b878 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800ef12:	2300      	movs	r3, #0
 800ef14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef16:	f001 b874 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ef1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef1e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ef22:	430b      	orrs	r3, r1
 800ef24:	d158      	bne.n	800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ef26:	4b55      	ldr	r3, [pc, #340]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ef28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ef2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ef30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef38:	d03b      	beq.n	800efb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef40:	d846      	bhi.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef48:	d02e      	beq.n	800efa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef50:	d83e      	bhi.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ef52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef58:	d00b      	beq.n	800ef72 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef60:	d836      	bhi.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00d      	beq.n	800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef6e:	d012      	beq.n	800ef96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ef70:	e02e      	b.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7ff faf4 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef80:	f001 b83f 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef84:	f107 0318 	add.w	r3, r7, #24
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff fc51 	bl	800e830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef92:	f001 b836 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef96:	f107 030c 	add.w	r3, r7, #12
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff fdae 	bl	800eafc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800efa4:	f001 b82d 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800efa8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800efac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800efae:	f001 b828 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800efb2:	4b32      	ldr	r3, [pc, #200]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efbe:	d103      	bne.n	800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800efc0:	4b30      	ldr	r3, [pc, #192]	; (800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800efc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800efc4:	f001 b81d 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800efc8:	2300      	movs	r3, #0
 800efca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800efcc:	f001 b819 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800efd0:	2300      	movs	r3, #0
 800efd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800efd4:	f001 b815 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800efd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efdc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800efe0:	430b      	orrs	r3, r1
 800efe2:	d126      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800efe4:	4b25      	ldr	r3, [pc, #148]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800efe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800efea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efee:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800eff0:	4b22      	ldr	r3, [pc, #136]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800effc:	d106      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	2b00      	cmp	r3, #0
 800f002:	d103      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800f004:	4b1f      	ldr	r3, [pc, #124]	; (800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f006:	637b      	str	r3, [r7, #52]	; 0x34
 800f008:	f000 bffb 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800f00c:	4b1b      	ldr	r3, [pc, #108]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f018:	d107      	bne.n	800f02a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800f01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f020:	d103      	bne.n	800f02a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800f022:	4b19      	ldr	r3, [pc, #100]	; (800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800f024:	637b      	str	r3, [r7, #52]	; 0x34
 800f026:	f000 bfec 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800f02a:	2300      	movs	r3, #0
 800f02c:	637b      	str	r3, [r7, #52]	; 0x34
 800f02e:	f000 bfe8 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800f032:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f036:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800f03a:	430b      	orrs	r3, r1
 800f03c:	d164      	bne.n	800f108 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f03e:	4b0f      	ldr	r3, [pc, #60]	; (800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f044:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f048:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f050:	d03d      	beq.n	800f0ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f058:	d852      	bhi.n	800f100 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f060:	d014      	beq.n	800f08c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800f062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f068:	d84a      	bhi.n	800f100 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d01f      	beq.n	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800f070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f076:	d012      	beq.n	800f09e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f078:	e042      	b.n	800f100 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f07a:	bf00      	nop
 800f07c:	46020c00 	.word	0x46020c00
 800f080:	0007a120 	.word	0x0007a120
 800f084:	00f42400 	.word	0x00f42400
 800f088:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f08c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff fa67 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f098:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f09a:	f000 bfb2 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f09e:	f107 0318 	add.w	r3, r7, #24
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7ff fbc4 	bl	800e830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0ac:	f000 bfa9 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f0b0:	4bab      	ldr	r3, [pc, #684]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0bc:	d103      	bne.n	800f0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800f0be:	4ba9      	ldr	r3, [pc, #676]	; (800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800f0c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f0c2:	f000 bf9e 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0ca:	f000 bf9a 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f0ce:	4ba4      	ldr	r3, [pc, #656]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d005      	beq.n	800f0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f0da:	4ba1      	ldr	r3, [pc, #644]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	0e1b      	lsrs	r3, r3, #24
 800f0e0:	f003 030f 	and.w	r3, r3, #15
 800f0e4:	e006      	b.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800f0e6:	4b9e      	ldr	r3, [pc, #632]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f0e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f0ec:	041b      	lsls	r3, r3, #16
 800f0ee:	0e1b      	lsrs	r3, r3, #24
 800f0f0:	f003 030f 	and.w	r3, r3, #15
 800f0f4:	4a9c      	ldr	r2, [pc, #624]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800f0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0fc:	f000 bf81 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800f100:	2300      	movs	r3, #0
 800f102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f104:	f000 bf7d 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f10c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800f110:	430b      	orrs	r3, r1
 800f112:	d175      	bne.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f114:	4b92      	ldr	r3, [pc, #584]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f116:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f11a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f11e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800f120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f122:	2b00      	cmp	r3, #0
 800f124:	d15b      	bne.n	800f1de <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f126:	4b8e      	ldr	r3, [pc, #568]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f12c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f130:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800f132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f134:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f138:	d034      	beq.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f140:	d849      	bhi.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800f142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f148:	d00b      	beq.n	800f162 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f150:	d841      	bhi.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800f152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f154:	2b00      	cmp	r3, #0
 800f156:	d016      	beq.n	800f186 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f15e:	d009      	beq.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800f160:	e039      	b.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff f9fc 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f170:	f000 bf47 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f174:	f107 0318 	add.w	r3, r7, #24
 800f178:	4618      	mov	r0, r3
 800f17a:	f7ff fb59 	bl	800e830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f182:	f000 bf3e 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f186:	4b76      	ldr	r3, [pc, #472]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f192:	d103      	bne.n	800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800f194:	4b73      	ldr	r3, [pc, #460]	; (800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800f196:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f198:	f000 bf33 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800f19c:	2300      	movs	r3, #0
 800f19e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f1a0:	f000 bf2f 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f1a4:	4b6e      	ldr	r3, [pc, #440]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d005      	beq.n	800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800f1b0:	4b6b      	ldr	r3, [pc, #428]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	0e1b      	lsrs	r3, r3, #24
 800f1b6:	f003 030f 	and.w	r3, r3, #15
 800f1ba:	e006      	b.n	800f1ca <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800f1bc:	4b68      	ldr	r3, [pc, #416]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f1be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f1c2:	041b      	lsls	r3, r3, #16
 800f1c4:	0e1b      	lsrs	r3, r3, #24
 800f1c6:	f003 030f 	and.w	r3, r3, #15
 800f1ca:	4a67      	ldr	r2, [pc, #412]	; (800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800f1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f1d2:	f000 bf16 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f1da:	f000 bf12 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1e4:	d108      	bne.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f1e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff f9ba 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f1f4:	f000 bf05 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	637b      	str	r3, [r7, #52]	; 0x34
 800f1fc:	f000 bf01 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800f200:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f204:	1e51      	subs	r1, r2, #1
 800f206:	430b      	orrs	r3, r1
 800f208:	d136      	bne.n	800f278 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f20a:	4b55      	ldr	r3, [pc, #340]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f20c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f210:	f003 0303 	and.w	r3, r3, #3
 800f214:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d104      	bne.n	800f226 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800f21c:	f7fe fb34 	bl	800d888 <HAL_RCC_GetPCLK2Freq>
 800f220:	6378      	str	r0, [r7, #52]	; 0x34
 800f222:	f000 beee 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d104      	bne.n	800f236 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f22c:	f7fe f9f6 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f230:	6378      	str	r0, [r7, #52]	; 0x34
 800f232:	f000 bee6 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f236:	4b4a      	ldr	r3, [pc, #296]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f242:	d106      	bne.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	2b02      	cmp	r3, #2
 800f248:	d103      	bne.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800f24a:	4b48      	ldr	r3, [pc, #288]	; (800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f24c:	637b      	str	r3, [r7, #52]	; 0x34
 800f24e:	f000 bed8 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f252:	4b43      	ldr	r3, [pc, #268]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f258:	f003 0302 	and.w	r3, r3, #2
 800f25c:	2b02      	cmp	r3, #2
 800f25e:	d107      	bne.n	800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800f260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f262:	2b03      	cmp	r3, #3
 800f264:	d104      	bne.n	800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800f266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f26a:	637b      	str	r3, [r7, #52]	; 0x34
 800f26c:	f000 bec9 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800f270:	2300      	movs	r3, #0
 800f272:	637b      	str	r3, [r7, #52]	; 0x34
 800f274:	f000 bec5 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800f278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f27c:	1e91      	subs	r1, r2, #2
 800f27e:	430b      	orrs	r3, r1
 800f280:	d136      	bne.n	800f2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f282:	4b37      	ldr	r3, [pc, #220]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f288:	f003 030c 	and.w	r3, r3, #12
 800f28c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	2b00      	cmp	r3, #0
 800f292:	d104      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f294:	f7fe fae4 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800f298:	6378      	str	r0, [r7, #52]	; 0x34
 800f29a:	f000 beb2 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a0:	2b04      	cmp	r3, #4
 800f2a2:	d104      	bne.n	800f2ae <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f2a4:	f7fe f9ba 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f2a8:	6378      	str	r0, [r7, #52]	; 0x34
 800f2aa:	f000 beaa 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f2ae:	4b2c      	ldr	r3, [pc, #176]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2ba:	d106      	bne.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800f2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2be:	2b08      	cmp	r3, #8
 800f2c0:	d103      	bne.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800f2c2:	4b2a      	ldr	r3, [pc, #168]	; (800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f2c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f2c6:	f000 be9c 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f2ca:	4b25      	ldr	r3, [pc, #148]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f2cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f2d0:	f003 0302 	and.w	r3, r3, #2
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d107      	bne.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2da:	2b0c      	cmp	r3, #12
 800f2dc:	d104      	bne.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800f2de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f2e4:	f000 be8d 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	637b      	str	r3, [r7, #52]	; 0x34
 800f2ec:	f000 be89 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800f2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f4:	1f11      	subs	r1, r2, #4
 800f2f6:	430b      	orrs	r3, r1
 800f2f8:	d13e      	bne.n	800f378 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f2fa:	4b19      	ldr	r3, [pc, #100]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f2fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f300:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f304:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d104      	bne.n	800f316 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f30c:	f7fe faa8 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800f310:	6378      	str	r0, [r7, #52]	; 0x34
 800f312:	f000 be76 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f318:	2b10      	cmp	r3, #16
 800f31a:	d104      	bne.n	800f326 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f31c:	f7fe f97e 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f320:	6378      	str	r0, [r7, #52]	; 0x34
 800f322:	f000 be6e 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f326:	4b0e      	ldr	r3, [pc, #56]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f32e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f332:	d106      	bne.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800f334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f336:	2b20      	cmp	r3, #32
 800f338:	d103      	bne.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800f33a:	4b0c      	ldr	r3, [pc, #48]	; (800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f33c:	637b      	str	r3, [r7, #52]	; 0x34
 800f33e:	f000 be60 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f342:	4b07      	ldr	r3, [pc, #28]	; (800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f348:	f003 0302 	and.w	r3, r3, #2
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d10f      	bne.n	800f370 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	2b30      	cmp	r3, #48	; 0x30
 800f354:	d10c      	bne.n	800f370 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800f356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f35a:	637b      	str	r3, [r7, #52]	; 0x34
 800f35c:	f000 be51 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800f360:	46020c00 	.word	0x46020c00
 800f364:	02dc6c00 	.word	0x02dc6c00
 800f368:	0801f644 	.word	0x0801f644
 800f36c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f370:	2300      	movs	r3, #0
 800f372:	637b      	str	r3, [r7, #52]	; 0x34
 800f374:	f000 be45 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f37c:	f1a2 0108 	sub.w	r1, r2, #8
 800f380:	430b      	orrs	r3, r1
 800f382:	d136      	bne.n	800f3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f384:	4b9f      	ldr	r3, [pc, #636]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f38a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f38e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f392:	2b00      	cmp	r3, #0
 800f394:	d104      	bne.n	800f3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f396:	f7fe fa63 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800f39a:	6378      	str	r0, [r7, #52]	; 0x34
 800f39c:	f000 be31 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a2:	2b40      	cmp	r3, #64	; 0x40
 800f3a4:	d104      	bne.n	800f3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f3a6:	f7fe f939 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f3aa:	6378      	str	r0, [r7, #52]	; 0x34
 800f3ac:	f000 be29 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f3b0:	4b94      	ldr	r3, [pc, #592]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3bc:	d106      	bne.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800f3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c0:	2b80      	cmp	r3, #128	; 0x80
 800f3c2:	d103      	bne.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800f3c4:	4b90      	ldr	r3, [pc, #576]	; (800f608 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800f3c8:	f000 be1b 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f3cc:	4b8d      	ldr	r3, [pc, #564]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f3d2:	f003 0302 	and.w	r3, r3, #2
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	d107      	bne.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800f3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3dc:	2bc0      	cmp	r3, #192	; 0xc0
 800f3de:	d104      	bne.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800f3e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3e6:	f000 be0c 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f3ee:	f000 be08 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f3f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3f6:	f1a2 0110 	sub.w	r1, r2, #16
 800f3fa:	430b      	orrs	r3, r1
 800f3fc:	d139      	bne.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f3fe:	4b81      	ldr	r3, [pc, #516]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f408:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d104      	bne.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f410:	f7fe fa26 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800f414:	6378      	str	r0, [r7, #52]	; 0x34
 800f416:	f000 bdf4 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f420:	d104      	bne.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f422:	f7fe f8fb 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f426:	6378      	str	r0, [r7, #52]	; 0x34
 800f428:	f000 bdeb 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f42c:	4b75      	ldr	r3, [pc, #468]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f438:	d107      	bne.n	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f440:	d103      	bne.n	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800f442:	4b71      	ldr	r3, [pc, #452]	; (800f608 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f444:	637b      	str	r3, [r7, #52]	; 0x34
 800f446:	f000 bddc 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f44a:	4b6e      	ldr	r3, [pc, #440]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f44c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f450:	f003 0302 	and.w	r3, r3, #2
 800f454:	2b02      	cmp	r3, #2
 800f456:	d108      	bne.n	800f46a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800f458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f45e:	d104      	bne.n	800f46a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800f460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f464:	637b      	str	r3, [r7, #52]	; 0x34
 800f466:	f000 bdcc 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f46a:	2300      	movs	r3, #0
 800f46c:	637b      	str	r3, [r7, #52]	; 0x34
 800f46e:	f000 bdc8 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f472:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f476:	f1a2 0120 	sub.w	r1, r2, #32
 800f47a:	430b      	orrs	r3, r1
 800f47c:	d158      	bne.n	800f530 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f47e:	4b61      	ldr	r3, [pc, #388]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f484:	f003 0307 	and.w	r3, r3, #7
 800f488:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d104      	bne.n	800f49a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f490:	f7fe fa0e 	bl	800d8b0 <HAL_RCC_GetPCLK3Freq>
 800f494:	6378      	str	r0, [r7, #52]	; 0x34
 800f496:	f000 bdb4 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d104      	bne.n	800f4aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f4a0:	f7fe f8bc 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f4a4:	6378      	str	r0, [r7, #52]	; 0x34
 800f4a6:	f000 bdac 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f4aa:	4b56      	ldr	r3, [pc, #344]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4b6:	d106      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	d103      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800f4be:	4b52      	ldr	r3, [pc, #328]	; (800f608 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f4c2:	f000 bd9e 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f4c6:	4b4f      	ldr	r3, [pc, #316]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f4c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f4cc:	f003 0302 	and.w	r3, r3, #2
 800f4d0:	2b02      	cmp	r3, #2
 800f4d2:	d107      	bne.n	800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	d104      	bne.n	800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800f4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4de:	637b      	str	r3, [r7, #52]	; 0x34
 800f4e0:	f000 bd8f 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f4e4:	4b47      	ldr	r3, [pc, #284]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f003 0320 	and.w	r3, r3, #32
 800f4ec:	2b20      	cmp	r3, #32
 800f4ee:	d11b      	bne.n	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	d118      	bne.n	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f4f6:	4b43      	ldr	r3, [pc, #268]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d005      	beq.n	800f50e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800f502:	4b40      	ldr	r3, [pc, #256]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	0e1b      	lsrs	r3, r3, #24
 800f508:	f003 030f 	and.w	r3, r3, #15
 800f50c:	e006      	b.n	800f51c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800f50e:	4b3d      	ldr	r3, [pc, #244]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f514:	041b      	lsls	r3, r3, #16
 800f516:	0e1b      	lsrs	r3, r3, #24
 800f518:	f003 030f 	and.w	r3, r3, #15
 800f51c:	4a3b      	ldr	r2, [pc, #236]	; (800f60c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f522:	637b      	str	r3, [r7, #52]	; 0x34
 800f524:	f000 bd6d 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f528:	2300      	movs	r3, #0
 800f52a:	637b      	str	r3, [r7, #52]	; 0x34
 800f52c:	f000 bd69 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f530:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f534:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f538:	430b      	orrs	r3, r1
 800f53a:	d169      	bne.n	800f610 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f53c:	4b31      	ldr	r3, [pc, #196]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f53e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f542:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f546:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f54e:	d104      	bne.n	800f55a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f550:	f7fe f864 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f554:	6378      	str	r0, [r7, #52]	; 0x34
 800f556:	f000 bd54 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f560:	d108      	bne.n	800f574 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f562:	f107 0318 	add.w	r3, r7, #24
 800f566:	4618      	mov	r0, r3
 800f568:	f7ff f962 	bl	800e830 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f56c:	6a3b      	ldr	r3, [r7, #32]
 800f56e:	637b      	str	r3, [r7, #52]	; 0x34
 800f570:	f000 bd47 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	2b00      	cmp	r3, #0
 800f578:	d104      	bne.n	800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f57a:	f7fe f957 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800f57e:	6378      	str	r0, [r7, #52]	; 0x34
 800f580:	f000 bd3f 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f586:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f58a:	d118      	bne.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800f58c:	4b1d      	ldr	r3, [pc, #116]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f594:	2b00      	cmp	r3, #0
 800f596:	d005      	beq.n	800f5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800f598:	4b1a      	ldr	r3, [pc, #104]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f59a:	689b      	ldr	r3, [r3, #8]
 800f59c:	0f1b      	lsrs	r3, r3, #28
 800f59e:	f003 030f 	and.w	r3, r3, #15
 800f5a2:	e006      	b.n	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800f5a4:	4b17      	ldr	r3, [pc, #92]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f5a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f5aa:	041b      	lsls	r3, r3, #16
 800f5ac:	0f1b      	lsrs	r3, r3, #28
 800f5ae:	f003 030f 	and.w	r3, r3, #15
 800f5b2:	4a16      	ldr	r2, [pc, #88]	; (800f60c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800f5ba:	f000 bd22 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f5be:	4b11      	ldr	r3, [pc, #68]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5ca:	d107      	bne.n	800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f5d2:	d103      	bne.n	800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800f5d4:	4b0c      	ldr	r3, [pc, #48]	; (800f608 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800f5d8:	f000 bd13 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f5dc:	4b09      	ldr	r3, [pc, #36]	; (800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5e8:	d107      	bne.n	800f5fa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5f0:	d103      	bne.n	800f5fa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800f5f2:	4b05      	ldr	r3, [pc, #20]	; (800f608 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f5f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f6:	f000 bd04 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f5fe:	f000 bd00 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800f602:	bf00      	nop
 800f604:	46020c00 	.word	0x46020c00
 800f608:	00f42400 	.word	0x00f42400
 800f60c:	0801f644 	.word	0x0801f644
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f614:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f618:	430b      	orrs	r3, r1
 800f61a:	d14e      	bne.n	800f6ba <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f61c:	4ba8      	ldr	r3, [pc, #672]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f61e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f622:	f003 0307 	and.w	r3, r3, #7
 800f626:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62a:	2b04      	cmp	r3, #4
 800f62c:	d841      	bhi.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800f62e:	a201      	add	r2, pc, #4	; (adr r2, 800f634 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f66d 	.word	0x0800f66d
 800f638:	0800f649 	.word	0x0800f649
 800f63c:	0800f65b 	.word	0x0800f65b
 800f640:	0800f677 	.word	0x0800f677
 800f644:	0800f681 	.word	0x0800f681
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe ff89 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f656:	f000 bcd4 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f65a:	f107 030c 	add.w	r3, r7, #12
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff fa4c 	bl	800eafc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f668:	f000 bccb 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f66c:	f7fe f8de 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800f670:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f672:	f000 bcc6 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f676:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f67a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f67c:	f000 bcc1 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f680:	4b8f      	ldr	r3, [pc, #572]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d005      	beq.n	800f698 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800f68c:	4b8c      	ldr	r3, [pc, #560]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f68e:	689b      	ldr	r3, [r3, #8]
 800f690:	0e1b      	lsrs	r3, r3, #24
 800f692:	f003 030f 	and.w	r3, r3, #15
 800f696:	e006      	b.n	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f698:	4b89      	ldr	r3, [pc, #548]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f69a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f69e:	041b      	lsls	r3, r3, #16
 800f6a0:	0e1b      	lsrs	r3, r3, #24
 800f6a2:	f003 030f 	and.w	r3, r3, #15
 800f6a6:	4a87      	ldr	r2, [pc, #540]	; (800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6ae:	f000 bca8 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6b6:	f000 bca4 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f6ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6be:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f6c2:	430b      	orrs	r3, r1
 800f6c4:	d15d      	bne.n	800f782 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f6c6:	4b7e      	ldr	r3, [pc, #504]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f6c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f6cc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f6d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f6d8:	d036      	beq.n	800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f6e0:	d84b      	bhi.n	800f77a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800f6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f6e8:	d029      	beq.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f6f0:	d843      	bhi.n	800f77a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800f6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6f8:	d013      	beq.n	800f722 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f700:	d83b      	bhi.n	800f77a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800f702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f704:	2b00      	cmp	r3, #0
 800f706:	d015      	beq.n	800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800f708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f70e:	d134      	bne.n	800f77a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe ff25 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f71e:	f000 bc70 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f722:	f107 030c 	add.w	r3, r7, #12
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff f9e8 	bl	800eafc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f730:	f000 bc67 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f734:	f7fe f87a 	bl	800d82c <HAL_RCC_GetHCLKFreq>
 800f738:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f73a:	f000 bc62 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f73e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f744:	f000 bc5d 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f748:	4b5d      	ldr	r3, [pc, #372]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f750:	2b00      	cmp	r3, #0
 800f752:	d005      	beq.n	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f754:	4b5a      	ldr	r3, [pc, #360]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	0e1b      	lsrs	r3, r3, #24
 800f75a:	f003 030f 	and.w	r3, r3, #15
 800f75e:	e006      	b.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f760:	4b57      	ldr	r3, [pc, #348]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f766:	041b      	lsls	r3, r3, #16
 800f768:	0e1b      	lsrs	r3, r3, #24
 800f76a:	f003 030f 	and.w	r3, r3, #15
 800f76e:	4a55      	ldr	r2, [pc, #340]	; (800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f776:	f000 bc44 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f77a:	2300      	movs	r3, #0
 800f77c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f77e:	f000 bc40 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f782:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f786:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f78a:	430b      	orrs	r3, r1
 800f78c:	d14a      	bne.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f78e:	4b4c      	ldr	r3, [pc, #304]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f794:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f798:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d104      	bne.n	800f7aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f7a0:	f7fe f85e 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800f7a4:	6378      	str	r0, [r7, #52]	; 0x34
 800f7a6:	f000 bc2c 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7b0:	d104      	bne.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f7b2:	f7fd ff33 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f7b6:	6378      	str	r0, [r7, #52]	; 0x34
 800f7b8:	f000 bc23 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f7bc:	4b40      	ldr	r3, [pc, #256]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7c8:	d107      	bne.n	800f7da <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800f7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7d0:	d103      	bne.n	800f7da <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800f7d2:	4b3d      	ldr	r3, [pc, #244]	; (800f8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d6:	f000 bc14 	b.w	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f7da:	4b39      	ldr	r3, [pc, #228]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f003 0320 	and.w	r3, r3, #32
 800f7e2:	2b20      	cmp	r3, #32
 800f7e4:	d11b      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7ec:	d117      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f7ee:	4b34      	ldr	r3, [pc, #208]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d005      	beq.n	800f806 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800f7fa:	4b31      	ldr	r3, [pc, #196]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	0e1b      	lsrs	r3, r3, #24
 800f800:	f003 030f 	and.w	r3, r3, #15
 800f804:	e006      	b.n	800f814 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800f806:	4b2e      	ldr	r3, [pc, #184]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f80c:	041b      	lsls	r3, r3, #16
 800f80e:	0e1b      	lsrs	r3, r3, #24
 800f810:	f003 030f 	and.w	r3, r3, #15
 800f814:	4a2b      	ldr	r2, [pc, #172]	; (800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f81a:	637b      	str	r3, [r7, #52]	; 0x34
 800f81c:	e3f1      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f81e:	2300      	movs	r3, #0
 800f820:	637b      	str	r3, [r7, #52]	; 0x34
 800f822:	e3ee      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f824:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f828:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800f82c:	430b      	orrs	r3, r1
 800f82e:	d14d      	bne.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f830:	4b23      	ldr	r3, [pc, #140]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f836:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f83a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d103      	bne.n	800f84a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f842:	f7fe f80d 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800f846:	6378      	str	r0, [r7, #52]	; 0x34
 800f848:	e3db      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f850:	d103      	bne.n	800f85a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f852:	f7fd fee3 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f856:	6378      	str	r0, [r7, #52]	; 0x34
 800f858:	e3d3      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f85a:	4b19      	ldr	r3, [pc, #100]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f866:	d106      	bne.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f86e:	d102      	bne.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800f870:	4b15      	ldr	r3, [pc, #84]	; (800f8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f872:	637b      	str	r3, [r7, #52]	; 0x34
 800f874:	e3c5      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f876:	4b12      	ldr	r3, [pc, #72]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f003 0320 	and.w	r3, r3, #32
 800f87e:	2b20      	cmp	r3, #32
 800f880:	d11b      	bne.n	800f8ba <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f888:	d117      	bne.n	800f8ba <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f88a:	4b0d      	ldr	r3, [pc, #52]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f892:	2b00      	cmp	r3, #0
 800f894:	d005      	beq.n	800f8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800f896:	4b0a      	ldr	r3, [pc, #40]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	0e1b      	lsrs	r3, r3, #24
 800f89c:	f003 030f 	and.w	r3, r3, #15
 800f8a0:	e006      	b.n	800f8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800f8a2:	4b07      	ldr	r3, [pc, #28]	; (800f8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f8a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f8a8:	041b      	lsls	r3, r3, #16
 800f8aa:	0e1b      	lsrs	r3, r3, #24
 800f8ac:	f003 030f 	and.w	r3, r3, #15
 800f8b0:	4a04      	ldr	r2, [pc, #16]	; (800f8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f8b8:	e3a3      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f8be:	e3a0      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800f8c0:	46020c00 	.word	0x46020c00
 800f8c4:	0801f644 	.word	0x0801f644
 800f8c8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f8cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8d0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f8d4:	430b      	orrs	r3, r1
 800f8d6:	d148      	bne.n	800f96a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f8d8:	4b9d      	ldr	r3, [pc, #628]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f8da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f8de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f8e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e6:	2bc0      	cmp	r3, #192	; 0xc0
 800f8e8:	d024      	beq.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ec:	2bc0      	cmp	r3, #192	; 0xc0
 800f8ee:	d839      	bhi.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	2b80      	cmp	r3, #128	; 0x80
 800f8f4:	d00d      	beq.n	800f912 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800f8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f8:	2b80      	cmp	r3, #128	; 0x80
 800f8fa:	d833      	bhi.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d003      	beq.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	2b40      	cmp	r3, #64	; 0x40
 800f906:	d011      	beq.n	800f92c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800f908:	e02c      	b.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f90a:	f7fd ffd1 	bl	800d8b0 <HAL_RCC_GetPCLK3Freq>
 800f90e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f910:	e377      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f912:	4b8f      	ldr	r3, [pc, #572]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f91e:	d102      	bne.n	800f926 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800f920:	4b8c      	ldr	r3, [pc, #560]	; (800fb54 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800f922:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f924:	e36d      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f926:	2300      	movs	r3, #0
 800f928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f92a:	e36a      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f92c:	f7fd fe76 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f930:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f932:	e366      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800f934:	4b86      	ldr	r3, [pc, #536]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d005      	beq.n	800f94c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800f940:	4b83      	ldr	r3, [pc, #524]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f942:	689b      	ldr	r3, [r3, #8]
 800f944:	0f1b      	lsrs	r3, r3, #28
 800f946:	f003 030f 	and.w	r3, r3, #15
 800f94a:	e006      	b.n	800f95a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800f94c:	4b80      	ldr	r3, [pc, #512]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f94e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f952:	041b      	lsls	r3, r3, #16
 800f954:	0f1b      	lsrs	r3, r3, #28
 800f956:	f003 030f 	and.w	r3, r3, #15
 800f95a:	4a7f      	ldr	r2, [pc, #508]	; (800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800f95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f960:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f962:	e34e      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800f964:	2300      	movs	r3, #0
 800f966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f968:	e34b      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f96e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800f972:	430b      	orrs	r3, r1
 800f974:	d147      	bne.n	800fa06 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f976:	4b76      	ldr	r3, [pc, #472]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f97c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f980:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f984:	2b00      	cmp	r3, #0
 800f986:	d103      	bne.n	800f990 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f988:	f7fd ff6a 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800f98c:	6378      	str	r0, [r7, #52]	; 0x34
 800f98e:	e338      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f996:	d103      	bne.n	800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f998:	f7fd fe40 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800f99c:	6378      	str	r0, [r7, #52]	; 0x34
 800f99e:	e330      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f9a0:	4b6b      	ldr	r3, [pc, #428]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9ac:	d106      	bne.n	800f9bc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9b4:	d102      	bne.n	800f9bc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800f9b6:	4b67      	ldr	r3, [pc, #412]	; (800fb54 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800f9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ba:	e322      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f9bc:	4b64      	ldr	r3, [pc, #400]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f003 0320 	and.w	r3, r3, #32
 800f9c4:	2b20      	cmp	r3, #32
 800f9c6:	d11b      	bne.n	800fa00 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f9ce:	d117      	bne.n	800fa00 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f9d0:	4b5f      	ldr	r3, [pc, #380]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d005      	beq.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800f9dc:	4b5c      	ldr	r3, [pc, #368]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	0e1b      	lsrs	r3, r3, #24
 800f9e2:	f003 030f 	and.w	r3, r3, #15
 800f9e6:	e006      	b.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800f9e8:	4b59      	ldr	r3, [pc, #356]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800f9ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f9ee:	041b      	lsls	r3, r3, #16
 800f9f0:	0e1b      	lsrs	r3, r3, #24
 800f9f2:	f003 030f 	and.w	r3, r3, #15
 800f9f6:	4a58      	ldr	r2, [pc, #352]	; (800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800f9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f9fe:	e300      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800fa00:	2300      	movs	r3, #0
 800fa02:	637b      	str	r3, [r7, #52]	; 0x34
 800fa04:	e2fd      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800fa06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa0a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800fa0e:	430b      	orrs	r3, r1
 800fa10:	d15b      	bne.n	800faca <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800fa12:	4b4f      	ldr	r3, [pc, #316]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fa14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fa18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa1c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d117      	bne.n	800fa54 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fa24:	4b4a      	ldr	r3, [pc, #296]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d005      	beq.n	800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800fa30:	4b47      	ldr	r3, [pc, #284]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	0e1b      	lsrs	r3, r3, #24
 800fa36:	f003 030f 	and.w	r3, r3, #15
 800fa3a:	e006      	b.n	800fa4a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800fa3c:	4b44      	ldr	r3, [pc, #272]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fa3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fa42:	041b      	lsls	r3, r3, #16
 800fa44:	0e1b      	lsrs	r3, r3, #24
 800fa46:	f003 030f 	and.w	r3, r3, #15
 800fa4a:	4a43      	ldr	r2, [pc, #268]	; (800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800fa4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa50:	637b      	str	r3, [r7, #52]	; 0x34
 800fa52:	e2d6      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800fa54:	4b3e      	ldr	r3, [pc, #248]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fa56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fa5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa62:	d112      	bne.n	800fa8a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800fa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa6a:	d10e      	bne.n	800fa8a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fa6c:	4b38      	ldr	r3, [pc, #224]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fa6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fa72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa7a:	d102      	bne.n	800fa82 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800fa7c:	23fa      	movs	r3, #250	; 0xfa
 800fa7e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fa80:	e2bf      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800fa82:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fa86:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fa88:	e2bb      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800fa8a:	4b31      	ldr	r3, [pc, #196]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa96:	d106      	bne.n	800faa6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa9e:	d102      	bne.n	800faa6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800faa0:	4b2c      	ldr	r3, [pc, #176]	; (800fb54 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800faa2:	637b      	str	r3, [r7, #52]	; 0x34
 800faa4:	e2ad      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800faa6:	4b2a      	ldr	r3, [pc, #168]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800faa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800faac:	f003 0302 	and.w	r3, r3, #2
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	d107      	bne.n	800fac4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800fab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800faba:	d103      	bne.n	800fac4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800fabc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fac0:	637b      	str	r3, [r7, #52]	; 0x34
 800fac2:	e29e      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800fac4:	2300      	movs	r3, #0
 800fac6:	637b      	str	r3, [r7, #52]	; 0x34
 800fac8:	e29b      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800faca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800face:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fad2:	430b      	orrs	r3, r1
 800fad4:	d162      	bne.n	800fb9c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800fad6:	4b1e      	ldr	r3, [pc, #120]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fadc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fae0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d117      	bne.n	800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fae8:	4b19      	ldr	r3, [pc, #100]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d005      	beq.n	800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800faf4:	4b16      	ldr	r3, [pc, #88]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	0e1b      	lsrs	r3, r3, #24
 800fafa:	f003 030f 	and.w	r3, r3, #15
 800fafe:	e006      	b.n	800fb0e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800fb00:	4b13      	ldr	r3, [pc, #76]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fb06:	041b      	lsls	r3, r3, #16
 800fb08:	0e1b      	lsrs	r3, r3, #24
 800fb0a:	f003 030f 	and.w	r3, r3, #15
 800fb0e:	4a12      	ldr	r2, [pc, #72]	; (800fb58 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800fb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb14:	637b      	str	r3, [r7, #52]	; 0x34
 800fb16:	e274      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800fb18:	4b0d      	ldr	r3, [pc, #52]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fb1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb26:	d119      	bne.n	800fb5c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800fb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb2e:	d115      	bne.n	800fb5c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800fb32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fb36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb3e:	d102      	bne.n	800fb46 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800fb40:	23fa      	movs	r3, #250	; 0xfa
 800fb42:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fb44:	e25d      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800fb46:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fb4a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fb4c:	e259      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800fb4e:	bf00      	nop
 800fb50:	46020c00 	.word	0x46020c00
 800fb54:	00f42400 	.word	0x00f42400
 800fb58:	0801f644 	.word	0x0801f644
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800fb5c:	4b9d      	ldr	r3, [pc, #628]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb68:	d106      	bne.n	800fb78 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800fb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb70:	d102      	bne.n	800fb78 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800fb72:	4b99      	ldr	r3, [pc, #612]	; (800fdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fb74:	637b      	str	r3, [r7, #52]	; 0x34
 800fb76:	e244      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800fb78:	4b96      	ldr	r3, [pc, #600]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fb7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fb7e:	f003 0302 	and.w	r3, r3, #2
 800fb82:	2b02      	cmp	r3, #2
 800fb84:	d107      	bne.n	800fb96 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800fb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fb8c:	d103      	bne.n	800fb96 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800fb8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb92:	637b      	str	r3, [r7, #52]	; 0x34
 800fb94:	e235      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800fb96:	2300      	movs	r3, #0
 800fb98:	637b      	str	r3, [r7, #52]	; 0x34
 800fb9a:	e232      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800fb9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fba0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800fba4:	430b      	orrs	r3, r1
 800fba6:	d147      	bne.n	800fc38 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800fba8:	4b8a      	ldr	r3, [pc, #552]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fbaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbae:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800fbb2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800fbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d103      	bne.n	800fbc2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fbba:	f7fd fe51 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800fbbe:	6378      	str	r0, [r7, #52]	; 0x34
 800fbc0:	e21f      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800fbc2:	4b84      	ldr	r3, [pc, #528]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fbc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fbc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fbd0:	d112      	bne.n	800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fbd8:	d10e      	bne.n	800fbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fbda:	4b7e      	ldr	r3, [pc, #504]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fbdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fbe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fbe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbe8:	d102      	bne.n	800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800fbea:	23fa      	movs	r3, #250	; 0xfa
 800fbec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fbee:	e208      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800fbf0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fbf4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fbf6:	e204      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800fbf8:	4b76      	ldr	r3, [pc, #472]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc04:	d106      	bne.n	800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800fc0c:	d102      	bne.n	800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800fc0e:	4b72      	ldr	r3, [pc, #456]	; (800fdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fc10:	637b      	str	r3, [r7, #52]	; 0x34
 800fc12:	e1f6      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800fc14:	4b6f      	ldr	r3, [pc, #444]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fc16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc1a:	f003 0302 	and.w	r3, r3, #2
 800fc1e:	2b02      	cmp	r3, #2
 800fc20:	d107      	bne.n	800fc32 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800fc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800fc28:	d103      	bne.n	800fc32 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800fc2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc2e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc30:	e1e7      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800fc32:	2300      	movs	r3, #0
 800fc34:	637b      	str	r3, [r7, #52]	; 0x34
 800fc36:	e1e4      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800fc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc3c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800fc40:	430b      	orrs	r3, r1
 800fc42:	d12d      	bne.n	800fca0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800fc44:	4b63      	ldr	r3, [pc, #396]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fc46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc4a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800fc4e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800fc50:	4b60      	ldr	r3, [pc, #384]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fc5c:	d105      	bne.n	800fc6a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800fc64:	4b5c      	ldr	r3, [pc, #368]	; (800fdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fc66:	637b      	str	r3, [r7, #52]	; 0x34
 800fc68:	e1cb      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800fc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fc70:	d107      	bne.n	800fc82 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fe fc74 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc80:	e1bf      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc88:	d107      	bne.n	800fc9a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc8a:	f107 0318 	add.w	r3, r7, #24
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe fdce 	bl	800e830 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	637b      	str	r3, [r7, #52]	; 0x34
 800fc98:	e1b3      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	637b      	str	r3, [r7, #52]	; 0x34
 800fc9e:	e1b0      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800fca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fca4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800fca8:	430b      	orrs	r3, r1
 800fcaa:	d14d      	bne.n	800fd48 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800fcac:	4b49      	ldr	r3, [pc, #292]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fcae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fcb6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fcbe:	d028      	beq.n	800fd12 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fcc6:	d83c      	bhi.n	800fd42 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fcce:	d013      	beq.n	800fcf8 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fcd6:	d834      	bhi.n	800fd42 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800fcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d004      	beq.n	800fce8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fce4:	d004      	beq.n	800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800fce6:	e02c      	b.n	800fd42 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800fce8:	f7fd fdce 	bl	800d888 <HAL_RCC_GetPCLK2Freq>
 800fcec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fcee:	e188      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fcf0:	f7fd fc94 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800fcf4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fcf6:	e184      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fcf8:	4b36      	ldr	r3, [pc, #216]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd04:	d102      	bne.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800fd06:	4b34      	ldr	r3, [pc, #208]	; (800fdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fd08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fd0a:	e17a      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd10:	e177      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd12:	4b30      	ldr	r3, [pc, #192]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d005      	beq.n	800fd2a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800fd1e:	4b2d      	ldr	r3, [pc, #180]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	0e1b      	lsrs	r3, r3, #24
 800fd24:	f003 030f 	and.w	r3, r3, #15
 800fd28:	e006      	b.n	800fd38 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800fd2a:	4b2a      	ldr	r3, [pc, #168]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fd2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fd30:	041b      	lsls	r3, r3, #16
 800fd32:	0e1b      	lsrs	r3, r3, #24
 800fd34:	f003 030f 	and.w	r3, r3, #15
 800fd38:	4a28      	ldr	r2, [pc, #160]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800fd3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd40:	e15f      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800fd42:	2300      	movs	r3, #0
 800fd44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd46:	e15c      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800fd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd4c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800fd50:	430b      	orrs	r3, r1
 800fd52:	d154      	bne.n	800fdfe <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800fd54:	4b1f      	ldr	r3, [pc, #124]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fd56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fd5e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fd66:	d028      	beq.n	800fdba <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fd6e:	d843      	bhi.n	800fdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800fd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd76:	d013      	beq.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800fd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd7e:	d83b      	bhi.n	800fdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800fd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d004      	beq.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd8c:	d004      	beq.n	800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800fd8e:	e033      	b.n	800fdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800fd90:	f7fd fd66 	bl	800d860 <HAL_RCC_GetPCLK1Freq>
 800fd94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fd96:	e134      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fd98:	f7fd fc40 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800fd9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fd9e:	e130      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fda0:	4b0c      	ldr	r3, [pc, #48]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fda8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdac:	d102      	bne.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800fdae:	4b0a      	ldr	r3, [pc, #40]	; (800fdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800fdb0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fdb2:	e126      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdb8:	e123      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fdba:	4b06      	ldr	r3, [pc, #24]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00c      	beq.n	800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800fdc6:	4b03      	ldr	r3, [pc, #12]	; (800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	0e1b      	lsrs	r3, r3, #24
 800fdcc:	f003 030f 	and.w	r3, r3, #15
 800fdd0:	e00d      	b.n	800fdee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800fdd2:	bf00      	nop
 800fdd4:	46020c00 	.word	0x46020c00
 800fdd8:	00f42400 	.word	0x00f42400
 800fddc:	0801f644 	.word	0x0801f644
 800fde0:	4b8a      	ldr	r3, [pc, #552]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800fde2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fde6:	041b      	lsls	r3, r3, #16
 800fde8:	0e1b      	lsrs	r3, r3, #24
 800fdea:	f003 030f 	and.w	r3, r3, #15
 800fdee:	4a88      	ldr	r2, [pc, #544]	; (8010010 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800fdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdf6:	e104      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdfc:	e101      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800fdfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe02:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800fe06:	430b      	orrs	r3, r1
 800fe08:	d16e      	bne.n	800fee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800fe0a:	4b80      	ldr	r3, [pc, #512]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800fe0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fe10:	f003 0318 	and.w	r3, r3, #24
 800fe14:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fe16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe18:	2b18      	cmp	r3, #24
 800fe1a:	d862      	bhi.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800fe1c:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fe1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe22:	bf00      	nop
 800fe24:	0800fe89 	.word	0x0800fe89
 800fe28:	0800fee3 	.word	0x0800fee3
 800fe2c:	0800fee3 	.word	0x0800fee3
 800fe30:	0800fee3 	.word	0x0800fee3
 800fe34:	0800fee3 	.word	0x0800fee3
 800fe38:	0800fee3 	.word	0x0800fee3
 800fe3c:	0800fee3 	.word	0x0800fee3
 800fe40:	0800fee3 	.word	0x0800fee3
 800fe44:	0800fe91 	.word	0x0800fe91
 800fe48:	0800fee3 	.word	0x0800fee3
 800fe4c:	0800fee3 	.word	0x0800fee3
 800fe50:	0800fee3 	.word	0x0800fee3
 800fe54:	0800fee3 	.word	0x0800fee3
 800fe58:	0800fee3 	.word	0x0800fee3
 800fe5c:	0800fee3 	.word	0x0800fee3
 800fe60:	0800fee3 	.word	0x0800fee3
 800fe64:	0800fe99 	.word	0x0800fe99
 800fe68:	0800fee3 	.word	0x0800fee3
 800fe6c:	0800fee3 	.word	0x0800fee3
 800fe70:	0800fee3 	.word	0x0800fee3
 800fe74:	0800fee3 	.word	0x0800fee3
 800fe78:	0800fee3 	.word	0x0800fee3
 800fe7c:	0800fee3 	.word	0x0800fee3
 800fe80:	0800fee3 	.word	0x0800fee3
 800fe84:	0800feb3 	.word	0x0800feb3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800fe88:	f7fd fd12 	bl	800d8b0 <HAL_RCC_GetPCLK3Freq>
 800fe8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fe8e:	e0b8      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fe90:	f7fd fbc4 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800fe94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fe96:	e0b4      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fe98:	4b5c      	ldr	r3, [pc, #368]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fea4:	d102      	bne.n	800feac <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800fea6:	4b5b      	ldr	r3, [pc, #364]	; (8010014 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800fea8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800feaa:	e0aa      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800feac:	2300      	movs	r3, #0
 800feae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800feb0:	e0a7      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800feb2:	4b56      	ldr	r3, [pc, #344]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800febe:	4b53      	ldr	r3, [pc, #332]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	0e1b      	lsrs	r3, r3, #24
 800fec4:	f003 030f 	and.w	r3, r3, #15
 800fec8:	e006      	b.n	800fed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800feca:	4b50      	ldr	r3, [pc, #320]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800fecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fed0:	041b      	lsls	r3, r3, #16
 800fed2:	0e1b      	lsrs	r3, r3, #24
 800fed4:	f003 030f 	and.w	r3, r3, #15
 800fed8:	4a4d      	ldr	r2, [pc, #308]	; (8010010 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800feda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fee0:	e08f      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800fee2:	2300      	movs	r3, #0
 800fee4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fee6:	e08c      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800fee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feec:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800fef0:	430b      	orrs	r3, r1
 800fef2:	d14c      	bne.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fef4:	4b45      	ldr	r3, [pc, #276]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800fef6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fefa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fefe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff06:	d013      	beq.n	800ff30 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800ff08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff0e:	d83b      	bhi.n	800ff88 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff16:	d013      	beq.n	800ff40 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800ff18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff1e:	d833      	bhi.n	800ff88 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d014      	beq.n	800ff50 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff2c:	d014      	beq.n	800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800ff2e:	e02b      	b.n	800ff88 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff30:	f107 0318 	add.w	r3, r7, #24
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fe fc7b 	bl	800e830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff3e:	e060      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fe fb0d 	bl	800e564 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff4e:	e058      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ff50:	f7fd fb64 	bl	800d61c <HAL_RCC_GetSysClockFreq>
 800ff54:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff56:	e054      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ff58:	4b2c      	ldr	r3, [pc, #176]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d005      	beq.n	800ff70 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800ff64:	4b29      	ldr	r3, [pc, #164]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	0e1b      	lsrs	r3, r3, #24
 800ff6a:	f003 030f 	and.w	r3, r3, #15
 800ff6e:	e006      	b.n	800ff7e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800ff70:	4b26      	ldr	r3, [pc, #152]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ff72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ff76:	041b      	lsls	r3, r3, #16
 800ff78:	0e1b      	lsrs	r3, r3, #24
 800ff7a:	f003 030f 	and.w	r3, r3, #15
 800ff7e:	4a24      	ldr	r2, [pc, #144]	; (8010010 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800ff80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff86:	e03c      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff8c:	e039      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ff8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff92:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800ff96:	430b      	orrs	r3, r1
 800ff98:	d131      	bne.n	800fffe <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ff9a:	4b1c      	ldr	r3, [pc, #112]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ff9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ffa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffa4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800ffa6:	4b19      	ldr	r3, [pc, #100]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ffa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ffac:	f003 0302 	and.w	r3, r3, #2
 800ffb0:	2b02      	cmp	r3, #2
 800ffb2:	d106      	bne.n	800ffc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d103      	bne.n	800ffc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800ffba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffbe:	637b      	str	r3, [r7, #52]	; 0x34
 800ffc0:	e01f      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800ffc2:	4b12      	ldr	r3, [pc, #72]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ffc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ffc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ffcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ffd0:	d112      	bne.n	800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800ffd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffd8:	d10e      	bne.n	800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ffda:	4b0c      	ldr	r3, [pc, #48]	; (801000c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ffdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ffe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ffe8:	d102      	bne.n	800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800ffea:	23fa      	movs	r3, #250	; 0xfa
 800ffec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ffee:	e008      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800fff0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fff4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fff6:	e004      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800fff8:	2300      	movs	r3, #0
 800fffa:	637b      	str	r3, [r7, #52]	; 0x34
 800fffc:	e001      	b.n	8010002 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8010002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010004:	4618      	mov	r0, r3
 8010006:	3738      	adds	r7, #56	; 0x38
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	46020c00 	.word	0x46020c00
 8010010:	0801f644 	.word	0x0801f644
 8010014:	00f42400 	.word	0x00f42400

08010018 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8010020:	4b1c      	ldr	r3, [pc, #112]	; (8010094 <HAL_RCCEx_CRSConfig+0x7c>)
 8010022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010024:	4a1b      	ldr	r2, [pc, #108]	; (8010094 <HAL_RCCEx_CRSConfig+0x7c>)
 8010026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801002a:	6753      	str	r3, [r2, #116]	; 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 801002c:	4b19      	ldr	r3, [pc, #100]	; (8010094 <HAL_RCCEx_CRSConfig+0x7c>)
 801002e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010030:	4a18      	ldr	r2, [pc, #96]	; (8010094 <HAL_RCCEx_CRSConfig+0x7c>)
 8010032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010036:	6753      	str	r3, [r2, #116]	; 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	431a      	orrs	r2, r3
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	4313      	orrs	r3, r2
 8010048:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	4313      	orrs	r3, r2
 8010052:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	041b      	lsls	r3, r3, #16
 801005a:	68fa      	ldr	r2, [r7, #12]
 801005c:	4313      	orrs	r3, r2
 801005e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8010060:	4a0d      	ldr	r2, [pc, #52]	; (8010098 <HAL_RCCEx_CRSConfig+0x80>)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8010066:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <HAL_RCCEx_CRSConfig+0x80>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	695b      	ldr	r3, [r3, #20]
 8010072:	021b      	lsls	r3, r3, #8
 8010074:	4908      	ldr	r1, [pc, #32]	; (8010098 <HAL_RCCEx_CRSConfig+0x80>)
 8010076:	4313      	orrs	r3, r2
 8010078:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 801007a:	4b07      	ldr	r3, [pc, #28]	; (8010098 <HAL_RCCEx_CRSConfig+0x80>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a06      	ldr	r2, [pc, #24]	; (8010098 <HAL_RCCEx_CRSConfig+0x80>)
 8010080:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010084:	6013      	str	r3, [r2, #0]
}
 8010086:	bf00      	nop
 8010088:	3714      	adds	r7, #20
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	46020c00 	.word	0x46020c00
 8010098:	40006000 	.word	0x40006000

0801009c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80100a4:	4b47      	ldr	r3, [pc, #284]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4a46      	ldr	r2, [pc, #280]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 80100aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80100ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80100b0:	f7f7 fa94 	bl	80075dc <HAL_GetTick>
 80100b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80100b6:	e008      	b.n	80100ca <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80100b8:	f7f7 fa90 	bl	80075dc <HAL_GetTick>
 80100bc:	4602      	mov	r2, r0
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	1ad3      	subs	r3, r2, r3
 80100c2:	2b02      	cmp	r3, #2
 80100c4:	d901      	bls.n	80100ca <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80100c6:	2303      	movs	r3, #3
 80100c8:	e077      	b.n	80101ba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80100ca:	4b3e      	ldr	r3, [pc, #248]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1f0      	bne.n	80100b8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80100d6:	4b3b      	ldr	r3, [pc, #236]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 80100d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80100de:	f023 0303 	bic.w	r3, r3, #3
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	6811      	ldr	r1, [r2, #0]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	6852      	ldr	r2, [r2, #4]
 80100ea:	3a01      	subs	r2, #1
 80100ec:	0212      	lsls	r2, r2, #8
 80100ee:	430a      	orrs	r2, r1
 80100f0:	4934      	ldr	r1, [pc, #208]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 80100f2:	4313      	orrs	r3, r2
 80100f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80100f6:	4b33      	ldr	r3, [pc, #204]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 80100f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100fa:	4b33      	ldr	r3, [pc, #204]	; (80101c8 <RCCEx_PLL2_Config+0x12c>)
 80100fc:	4013      	ands	r3, r2
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	6892      	ldr	r2, [r2, #8]
 8010102:	3a01      	subs	r2, #1
 8010104:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	68d2      	ldr	r2, [r2, #12]
 801010c:	3a01      	subs	r2, #1
 801010e:	0252      	lsls	r2, r2, #9
 8010110:	b292      	uxth	r2, r2
 8010112:	4311      	orrs	r1, r2
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	6912      	ldr	r2, [r2, #16]
 8010118:	3a01      	subs	r2, #1
 801011a:	0412      	lsls	r2, r2, #16
 801011c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010120:	4311      	orrs	r1, r2
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	6952      	ldr	r2, [r2, #20]
 8010126:	3a01      	subs	r2, #1
 8010128:	0612      	lsls	r2, r2, #24
 801012a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 801012e:	430a      	orrs	r2, r1
 8010130:	4924      	ldr	r1, [pc, #144]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010132:	4313      	orrs	r3, r2
 8010134:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8010136:	4b23      	ldr	r3, [pc, #140]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801013a:	f023 020c 	bic.w	r2, r3, #12
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	4920      	ldr	r1, [pc, #128]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010144:	4313      	orrs	r3, r2
 8010146:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8010148:	4b1e      	ldr	r3, [pc, #120]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 801014a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6a1b      	ldr	r3, [r3, #32]
 8010150:	491c      	ldr	r1, [pc, #112]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010152:	4313      	orrs	r3, r2
 8010154:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8010156:	4b1b      	ldr	r3, [pc, #108]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015a:	4a1a      	ldr	r2, [pc, #104]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 801015c:	f023 0310 	bic.w	r3, r3, #16
 8010160:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010162:	4b18      	ldr	r3, [pc, #96]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801016a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	69d2      	ldr	r2, [r2, #28]
 8010172:	00d2      	lsls	r2, r2, #3
 8010174:	4913      	ldr	r1, [pc, #76]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010176:	4313      	orrs	r3, r2
 8010178:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 801017a:	4b12      	ldr	r3, [pc, #72]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 801017c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017e:	4a11      	ldr	r2, [pc, #68]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010180:	f043 0310 	orr.w	r3, r3, #16
 8010184:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8010186:	4b0f      	ldr	r3, [pc, #60]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a0e      	ldr	r2, [pc, #56]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 801018c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010190:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010192:	f7f7 fa23 	bl	80075dc <HAL_GetTick>
 8010196:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010198:	e008      	b.n	80101ac <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801019a:	f7f7 fa1f 	bl	80075dc <HAL_GetTick>
 801019e:	4602      	mov	r2, r0
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	d901      	bls.n	80101ac <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80101a8:	2303      	movs	r3, #3
 80101aa:	e006      	b.n	80101ba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80101ac:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <RCCEx_PLL2_Config+0x128>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d0f0      	beq.n	801019a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80101b8:	2300      	movs	r3, #0

}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	46020c00 	.word	0x46020c00
 80101c8:	80800000 	.word	0x80800000

080101cc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80101d4:	4b47      	ldr	r3, [pc, #284]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4a46      	ldr	r2, [pc, #280]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80101da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80101de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80101e0:	f7f7 f9fc 	bl	80075dc <HAL_GetTick>
 80101e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80101e6:	e008      	b.n	80101fa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80101e8:	f7f7 f9f8 	bl	80075dc <HAL_GetTick>
 80101ec:	4602      	mov	r2, r0
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	1ad3      	subs	r3, r2, r3
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d901      	bls.n	80101fa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80101f6:	2303      	movs	r3, #3
 80101f8:	e077      	b.n	80102ea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80101fa:	4b3e      	ldr	r3, [pc, #248]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1f0      	bne.n	80101e8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8010206:	4b3b      	ldr	r3, [pc, #236]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801020a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801020e:	f023 0303 	bic.w	r3, r3, #3
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	6811      	ldr	r1, [r2, #0]
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	6852      	ldr	r2, [r2, #4]
 801021a:	3a01      	subs	r2, #1
 801021c:	0212      	lsls	r2, r2, #8
 801021e:	430a      	orrs	r2, r1
 8010220:	4934      	ldr	r1, [pc, #208]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010222:	4313      	orrs	r3, r2
 8010224:	630b      	str	r3, [r1, #48]	; 0x30
 8010226:	4b33      	ldr	r3, [pc, #204]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801022a:	4b33      	ldr	r3, [pc, #204]	; (80102f8 <RCCEx_PLL3_Config+0x12c>)
 801022c:	4013      	ands	r3, r2
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	6892      	ldr	r2, [r2, #8]
 8010232:	3a01      	subs	r2, #1
 8010234:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	68d2      	ldr	r2, [r2, #12]
 801023c:	3a01      	subs	r2, #1
 801023e:	0252      	lsls	r2, r2, #9
 8010240:	b292      	uxth	r2, r2
 8010242:	4311      	orrs	r1, r2
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	6912      	ldr	r2, [r2, #16]
 8010248:	3a01      	subs	r2, #1
 801024a:	0412      	lsls	r2, r2, #16
 801024c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010250:	4311      	orrs	r1, r2
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	6952      	ldr	r2, [r2, #20]
 8010256:	3a01      	subs	r2, #1
 8010258:	0612      	lsls	r2, r2, #24
 801025a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 801025e:	430a      	orrs	r2, r1
 8010260:	4924      	ldr	r1, [pc, #144]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010262:	4313      	orrs	r3, r2
 8010264:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8010266:	4b23      	ldr	r3, [pc, #140]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801026a:	f023 020c 	bic.w	r2, r3, #12
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	699b      	ldr	r3, [r3, #24]
 8010272:	4920      	ldr	r1, [pc, #128]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010274:	4313      	orrs	r3, r2
 8010276:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8010278:	4b1e      	ldr	r3, [pc, #120]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 801027a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6a1b      	ldr	r3, [r3, #32]
 8010280:	491c      	ldr	r1, [pc, #112]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010282:	4313      	orrs	r3, r2
 8010284:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8010286:	4b1b      	ldr	r3, [pc, #108]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801028a:	4a1a      	ldr	r2, [pc, #104]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 801028c:	f023 0310 	bic.w	r3, r3, #16
 8010290:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010292:	4b18      	ldr	r3, [pc, #96]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 8010294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801029a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	69d2      	ldr	r2, [r2, #28]
 80102a2:	00d2      	lsls	r2, r2, #3
 80102a4:	4913      	ldr	r1, [pc, #76]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80102a6:	4313      	orrs	r3, r2
 80102a8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80102aa:	4b12      	ldr	r3, [pc, #72]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80102ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102ae:	4a11      	ldr	r2, [pc, #68]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80102b0:	f043 0310 	orr.w	r3, r3, #16
 80102b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80102b6:	4b0f      	ldr	r3, [pc, #60]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a0e      	ldr	r2, [pc, #56]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80102bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80102c2:	f7f7 f98b 	bl	80075dc <HAL_GetTick>
 80102c6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80102c8:	e008      	b.n	80102dc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80102ca:	f7f7 f987 	bl	80075dc <HAL_GetTick>
 80102ce:	4602      	mov	r2, r0
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	2b02      	cmp	r3, #2
 80102d6:	d901      	bls.n	80102dc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80102d8:	2303      	movs	r3, #3
 80102da:	e006      	b.n	80102ea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80102dc:	4b05      	ldr	r3, [pc, #20]	; (80102f4 <RCCEx_PLL3_Config+0x128>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d0f0      	beq.n	80102ca <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3710      	adds	r7, #16
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	46020c00 	.word	0x46020c00
 80102f8:	80800000 	.word	0x80800000

080102fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d068      	beq.n	80103e0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7f2 fdd4 	bl	8002ed0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2202      	movs	r2, #2
 801032c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010330:	4b2e      	ldr	r3, [pc, #184]	; (80103ec <HAL_RTC_Init+0xf0>)
 8010332:	22ca      	movs	r2, #202	; 0xca
 8010334:	625a      	str	r2, [r3, #36]	; 0x24
 8010336:	4b2d      	ldr	r3, [pc, #180]	; (80103ec <HAL_RTC_Init+0xf0>)
 8010338:	2253      	movs	r2, #83	; 0x53
 801033a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 f87d 	bl	801043c <RTC_EnterInitMode>
 8010342:	4603      	mov	r3, r0
 8010344:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8010346:	7bfb      	ldrb	r3, [r7, #15]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d13f      	bne.n	80103cc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 801034c:	4b27      	ldr	r3, [pc, #156]	; (80103ec <HAL_RTC_Init+0xf0>)
 801034e:	699b      	ldr	r3, [r3, #24]
 8010350:	4a26      	ldr	r2, [pc, #152]	; (80103ec <HAL_RTC_Init+0xf0>)
 8010352:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8010356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801035a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 801035c:	4b23      	ldr	r3, [pc, #140]	; (80103ec <HAL_RTC_Init+0xf0>)
 801035e:	699a      	ldr	r2, [r3, #24]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6859      	ldr	r1, [r3, #4]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	4319      	orrs	r1, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	699b      	ldr	r3, [r3, #24]
 801036e:	430b      	orrs	r3, r1
 8010370:	491e      	ldr	r1, [pc, #120]	; (80103ec <HAL_RTC_Init+0xf0>)
 8010372:	4313      	orrs	r3, r2
 8010374:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	68da      	ldr	r2, [r3, #12]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	689b      	ldr	r3, [r3, #8]
 801037e:	041b      	lsls	r3, r3, #16
 8010380:	491a      	ldr	r1, [pc, #104]	; (80103ec <HAL_RTC_Init+0xf0>)
 8010382:	4313      	orrs	r3, r2
 8010384:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8010386:	4b19      	ldr	r3, [pc, #100]	; (80103ec <HAL_RTC_Init+0xf0>)
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010396:	430b      	orrs	r3, r1
 8010398:	4914      	ldr	r1, [pc, #80]	; (80103ec <HAL_RTC_Init+0xf0>)
 801039a:	4313      	orrs	r3, r2
 801039c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f880 	bl	80104a4 <RTC_ExitInitMode>
 80103a4:	4603      	mov	r3, r0
 80103a6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80103a8:	7bfb      	ldrb	r3, [r7, #15]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d10e      	bne.n	80103cc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80103ae:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <HAL_RTC_Init+0xf0>)
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a19      	ldr	r1, [r3, #32]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	69db      	ldr	r3, [r3, #28]
 80103be:	4319      	orrs	r1, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	695b      	ldr	r3, [r3, #20]
 80103c4:	430b      	orrs	r3, r1
 80103c6:	4909      	ldr	r1, [pc, #36]	; (80103ec <HAL_RTC_Init+0xf0>)
 80103c8:	4313      	orrs	r3, r2
 80103ca:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80103cc:	4b07      	ldr	r3, [pc, #28]	; (80103ec <HAL_RTC_Init+0xf0>)
 80103ce:	22ff      	movs	r2, #255	; 0xff
 80103d0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80103d2:	7bfb      	ldrb	r3, [r7, #15]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d103      	bne.n	80103e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2201      	movs	r2, #1
 80103dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	46007800 	.word	0x46007800

080103f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80103f8:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <HAL_RTC_WaitForSynchro+0x48>)
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	4a0e      	ldr	r2, [pc, #56]	; (8010438 <HAL_RTC_WaitForSynchro+0x48>)
 80103fe:	f023 0320 	bic.w	r3, r3, #32
 8010402:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8010404:	f7f7 f8ea 	bl	80075dc <HAL_GetTick>
 8010408:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 801040a:	e009      	b.n	8010420 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801040c:	f7f7 f8e6 	bl	80075dc <HAL_GetTick>
 8010410:	4602      	mov	r2, r0
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	1ad3      	subs	r3, r2, r3
 8010416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801041a:	d901      	bls.n	8010420 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 801041c:	2303      	movs	r3, #3
 801041e:	e006      	b.n	801042e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010420:	4b05      	ldr	r3, [pc, #20]	; (8010438 <HAL_RTC_WaitForSynchro+0x48>)
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	f003 0320 	and.w	r3, r3, #32
 8010428:	2b00      	cmp	r3, #0
 801042a:	d0ef      	beq.n	801040c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 801042c:	2300      	movs	r3, #0
}
 801042e:	4618      	mov	r0, r3
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	46007800 	.word	0x46007800

0801043c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010444:	2300      	movs	r3, #0
 8010446:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010448:	4b15      	ldr	r3, [pc, #84]	; (80104a0 <RTC_EnterInitMode+0x64>)
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010450:	2b00      	cmp	r3, #0
 8010452:	d120      	bne.n	8010496 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010454:	4b12      	ldr	r3, [pc, #72]	; (80104a0 <RTC_EnterInitMode+0x64>)
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	4a11      	ldr	r2, [pc, #68]	; (80104a0 <RTC_EnterInitMode+0x64>)
 801045a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801045e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8010460:	f7f7 f8bc 	bl	80075dc <HAL_GetTick>
 8010464:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010466:	e00d      	b.n	8010484 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010468:	f7f7 f8b8 	bl	80075dc <HAL_GetTick>
 801046c:	4602      	mov	r2, r0
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010476:	d905      	bls.n	8010484 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010478:	2303      	movs	r3, #3
 801047a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2203      	movs	r2, #3
 8010480:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010484:	4b06      	ldr	r3, [pc, #24]	; (80104a0 <RTC_EnterInitMode+0x64>)
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801048c:	2b00      	cmp	r3, #0
 801048e:	d102      	bne.n	8010496 <RTC_EnterInitMode+0x5a>
 8010490:	7bfb      	ldrb	r3, [r7, #15]
 8010492:	2b03      	cmp	r3, #3
 8010494:	d1e8      	bne.n	8010468 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010496:	7bfb      	ldrb	r3, [r7, #15]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	46007800 	.word	0x46007800

080104a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80104ac:	2300      	movs	r3, #0
 80104ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80104b0:	4b1a      	ldr	r3, [pc, #104]	; (801051c <RTC_ExitInitMode+0x78>)
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	4a19      	ldr	r2, [pc, #100]	; (801051c <RTC_ExitInitMode+0x78>)
 80104b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80104bc:	4b17      	ldr	r3, [pc, #92]	; (801051c <RTC_ExitInitMode+0x78>)
 80104be:	699b      	ldr	r3, [r3, #24]
 80104c0:	f003 0320 	and.w	r3, r3, #32
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10c      	bne.n	80104e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7ff ff91 	bl	80103f0 <HAL_RTC_WaitForSynchro>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d01e      	beq.n	8010512 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2203      	movs	r2, #3
 80104d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80104dc:	2303      	movs	r3, #3
 80104de:	73fb      	strb	r3, [r7, #15]
 80104e0:	e017      	b.n	8010512 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80104e2:	4b0e      	ldr	r3, [pc, #56]	; (801051c <RTC_ExitInitMode+0x78>)
 80104e4:	699b      	ldr	r3, [r3, #24]
 80104e6:	4a0d      	ldr	r2, [pc, #52]	; (801051c <RTC_ExitInitMode+0x78>)
 80104e8:	f023 0320 	bic.w	r3, r3, #32
 80104ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff ff7e 	bl	80103f0 <HAL_RTC_WaitForSynchro>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d005      	beq.n	8010506 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2203      	movs	r2, #3
 80104fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010502:	2303      	movs	r3, #3
 8010504:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010506:	4b05      	ldr	r3, [pc, #20]	; (801051c <RTC_ExitInitMode+0x78>)
 8010508:	699b      	ldr	r3, [r3, #24]
 801050a:	4a04      	ldr	r2, [pc, #16]	; (801051c <RTC_ExitInitMode+0x78>)
 801050c:	f043 0320 	orr.w	r3, r3, #32
 8010510:	6193      	str	r3, [r2, #24]
  }
  return status;
 8010512:	7bfb      	ldrb	r3, [r7, #15]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	46007800 	.word	0x46007800

08010520 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8010520:	b480      	push	{r7}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
               || ((sTamper->Filter == RTC_TAMPERFILTER_DISABLE)  && \
                   ((sTamper->Trigger == RTC_TAMPERTRIGGER_RISINGEDGE) || \
                    (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))));

  /* Configuration register 2 */
  tmpreg = READ_REG(TAMP->CR2);
 801052a:	4b35      	ldr	r3, [pc, #212]	; (8010600 <HAL_RTCEx_SetTamper+0xe0>)
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	60fb      	str	r3, [r7, #12]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	061a      	lsls	r2, r3, #24
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	041b      	lsls	r3, r3, #16
 801053c:	431a      	orrs	r2, r3
              (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos));
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	681b      	ldr	r3, [r3, #0]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 8010542:	4313      	orrs	r3, r2
 8010544:	43db      	mvns	r3, r3
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	4013      	ands	r3, r2
 801054a:	60fb      	str	r3, [r7, #12]

  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	2b03      	cmp	r3, #3
 8010552:	d003      	beq.n	801055c <HAL_RTCEx_SetTamper+0x3c>
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	2b01      	cmp	r3, #1
 801055a:	d105      	bne.n	8010568 <HAL_RTCEx_SetTamper+0x48>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	061b      	lsls	r3, r3, #24
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	4313      	orrs	r3, r2
 8010566:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d005      	beq.n	801057c <HAL_RTCEx_SetTamper+0x5c>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos);
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	041b      	lsls	r3, r3, #16
 8010576:	68fa      	ldr	r2, [r7, #12]
 8010578:	4313      	orrs	r3, r2
 801057a:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d004      	beq.n	801058e <HAL_RTCEx_SetTamper+0x6e>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos);
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	4313      	orrs	r3, r2
 801058c:	60fb      	str	r3, [r7, #12]
  }
  WRITE_REG(TAMP->CR2, tmpreg);
 801058e:	4a1c      	ldr	r2, [pc, #112]	; (8010600 <HAL_RTCEx_SetTamper+0xe0>)
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6053      	str	r3, [r2, #4]

  /* Filter control register */
  WRITE_REG(TAMP->FLTCR, sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | \
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	691a      	ldr	r2, [r3, #16]
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	695b      	ldr	r3, [r3, #20]
 801059c:	431a      	orrs	r2, r3
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	699b      	ldr	r3, [r3, #24]
 80105a2:	431a      	orrs	r2, r3
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	69db      	ldr	r3, [r3, #28]
 80105a8:	4915      	ldr	r1, [pc, #84]	; (8010600 <HAL_RTCEx_SetTamper+0xe0>)
 80105aa:	4313      	orrs	r3, r2
 80105ac:	60cb      	str	r3, [r1, #12]
            sTamper->TamperPullUp);

  /* Timestamp on tamper */
  if (READ_BIT(RTC->CR, RTC_CR_TAMPTS) != sTamper->TimeStampOnTamperDetection)
 80105ae:	4b15      	ldr	r3, [pc, #84]	; (8010604 <HAL_RTCEx_SetTamper+0xe4>)
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d011      	beq.n	80105e2 <HAL_RTCEx_SetTamper+0xc2>
  {
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80105be:	4b11      	ldr	r3, [pc, #68]	; (8010604 <HAL_RTCEx_SetTamper+0xe4>)
 80105c0:	22ca      	movs	r2, #202	; 0xca
 80105c2:	625a      	str	r2, [r3, #36]	; 0x24
 80105c4:	4b0f      	ldr	r3, [pc, #60]	; (8010604 <HAL_RTCEx_SetTamper+0xe4>)
 80105c6:	2253      	movs	r2, #83	; 0x53
 80105c8:	625a      	str	r2, [r3, #36]	; 0x24
    MODIFY_REG(RTC->CR, RTC_CR_TAMPTS, sTamper->TimeStampOnTamperDetection);
 80105ca:	4b0e      	ldr	r3, [pc, #56]	; (8010604 <HAL_RTCEx_SetTamper+0xe4>)
 80105cc:	699b      	ldr	r3, [r3, #24]
 80105ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	6a1b      	ldr	r3, [r3, #32]
 80105d6:	490b      	ldr	r1, [pc, #44]	; (8010604 <HAL_RTCEx_SetTamper+0xe4>)
 80105d8:	4313      	orrs	r3, r2
 80105da:	618b      	str	r3, [r1, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80105dc:	4b09      	ldr	r3, [pc, #36]	; (8010604 <HAL_RTCEx_SetTamper+0xe4>)
 80105de:	22ff      	movs	r2, #255	; 0xff
 80105e0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Control register 1 */
  SET_BIT(TAMP->CR1, sTamper->Tamper);
 80105e2:	4b07      	ldr	r3, [pc, #28]	; (8010600 <HAL_RTCEx_SetTamper+0xe0>)
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4905      	ldr	r1, [pc, #20]	; (8010600 <HAL_RTCEx_SetTamper+0xe0>)
 80105ec:	4313      	orrs	r3, r2
 80105ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3714      	adds	r7, #20
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop
 8010600:	46007c00 	.word	0x46007c00
 8010604:	46007800 	.word	0x46007800

08010608 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8010608:	b480      	push	{r7}
 801060a:	b083      	sub	sp, #12
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	4910      	ldr	r1, [pc, #64]	; (801065c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801061c:	4313      	orrs	r3, r2
 801061e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	689a      	ldr	r2, [r3, #8]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	431a      	orrs	r2, r3
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	699b      	ldr	r3, [r3, #24]
 801062e:	490c      	ldr	r1, [pc, #48]	; (8010660 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8010630:	4313      	orrs	r3, r2
 8010632:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8010634:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8010636:	6a1b      	ldr	r3, [r3, #32]
 8010638:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	6919      	ldr	r1, [r3, #16]
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	695b      	ldr	r3, [r3, #20]
 8010644:	041b      	lsls	r3, r3, #16
 8010646:	430b      	orrs	r3, r1
 8010648:	4905      	ldr	r1, [pc, #20]	; (8010660 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801064a:	4313      	orrs	r3, r2
 801064c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	46007800 	.word	0x46007800
 8010660:	46007c00 	.word	0x46007c00

08010664 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b08a      	sub	sp, #40	; 0x28
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d101      	bne.n	8010676 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8010672:	2301      	movs	r3, #1
 8010674:	e1de      	b.n	8010a34 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801067c:	2b01      	cmp	r3, #1
 801067e:	d10e      	bne.n	801069e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a89      	ldr	r2, [pc, #548]	; (80108ac <HAL_SAI_Init+0x248>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d107      	bne.n	801069a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 801068e:	2b01      	cmp	r3, #1
 8010690:	d103      	bne.n	801069a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8010696:	2b00      	cmp	r3, #0
 8010698:	d001      	beq.n	801069e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 801069a:	2301      	movs	r3, #1
 801069c:	e1ca      	b.n	8010a34 <HAL_SAI_Init+0x3d0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d106      	bne.n	80106b8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7f3 f8c0 	bl	8003838 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f000 f9c7 	bl	8010a4c <SAI_Disable>
 80106be:	4603      	mov	r3, r0
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d001      	beq.n	80106c8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80106c4:	2301      	movs	r3, #1
 80106c6:	e1b5      	b.n	8010a34 <HAL_SAI_Init+0x3d0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2202      	movs	r2, #2
 80106cc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d00c      	beq.n	80106f2 <HAL_SAI_Init+0x8e>
 80106d8:	2b02      	cmp	r3, #2
 80106da:	d80d      	bhi.n	80106f8 <HAL_SAI_Init+0x94>
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d002      	beq.n	80106e6 <HAL_SAI_Init+0x82>
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d003      	beq.n	80106ec <HAL_SAI_Init+0x88>
 80106e4:	e008      	b.n	80106f8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80106e6:	2300      	movs	r3, #0
 80106e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80106ea:	e008      	b.n	80106fe <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80106ec:	2310      	movs	r3, #16
 80106ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80106f0:	e005      	b.n	80106fe <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80106f2:	2320      	movs	r3, #32
 80106f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80106f6:	e002      	b.n	80106fe <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80106f8:	2300      	movs	r3, #0
 80106fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80106fc:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	2b03      	cmp	r3, #3
 8010704:	d81d      	bhi.n	8010742 <HAL_SAI_Init+0xde>
 8010706:	a201      	add	r2, pc, #4	; (adr r2, 801070c <HAL_SAI_Init+0xa8>)
 8010708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801070c:	0801071d 	.word	0x0801071d
 8010710:	08010723 	.word	0x08010723
 8010714:	0801072b 	.word	0x0801072b
 8010718:	08010733 	.word	0x08010733
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 801071c:	2300      	movs	r3, #0
 801071e:	61fb      	str	r3, [r7, #28]
      break;
 8010720:	e012      	b.n	8010748 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8010722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010726:	61fb      	str	r3, [r7, #28]
      break;
 8010728:	e00e      	b.n	8010748 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801072a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801072e:	61fb      	str	r3, [r7, #28]
      break;
 8010730:	e00a      	b.n	8010748 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8010732:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010736:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8010738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073a:	f043 0301 	orr.w	r3, r3, #1
 801073e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010740:	e002      	b.n	8010748 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	61fb      	str	r3, [r7, #28]
      break;
 8010746:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4a57      	ldr	r2, [pc, #348]	; (80108ac <HAL_SAI_Init+0x248>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d004      	beq.n	801075c <HAL_SAI_Init+0xf8>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a56      	ldr	r2, [pc, #344]	; (80108b0 <HAL_SAI_Init+0x24c>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d103      	bne.n	8010764 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 801075c:	4a55      	ldr	r2, [pc, #340]	; (80108b4 <HAL_SAI_Init+0x250>)
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	6013      	str	r3, [r2, #0]
 8010762:	e002      	b.n	801076a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8010764:	4a54      	ldr	r2, [pc, #336]	; (80108b8 <HAL_SAI_Init+0x254>)
 8010766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010768:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6a1b      	ldr	r3, [r3, #32]
 801076e:	2b00      	cmp	r3, #0
 8010770:	f000 8083 	beq.w	801087a <HAL_SAI_Init+0x216>
  {
    uint32_t freq = 0;
 8010774:	2300      	movs	r3, #0
 8010776:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4a4b      	ldr	r2, [pc, #300]	; (80108ac <HAL_SAI_Init+0x248>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d004      	beq.n	801078c <HAL_SAI_Init+0x128>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	4a4a      	ldr	r2, [pc, #296]	; (80108b0 <HAL_SAI_Init+0x24c>)
 8010788:	4293      	cmp	r3, r2
 801078a:	d106      	bne.n	801079a <HAL_SAI_Init+0x136>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 801078c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010790:	f04f 0100 	mov.w	r1, #0
 8010794:	f7fe fb18 	bl	800edc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010798:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4a47      	ldr	r2, [pc, #284]	; (80108bc <HAL_SAI_Init+0x258>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d004      	beq.n	80107ae <HAL_SAI_Init+0x14a>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4a45      	ldr	r2, [pc, #276]	; (80108c0 <HAL_SAI_Init+0x25c>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d106      	bne.n	80107bc <HAL_SAI_Init+0x158>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80107ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80107b2:	f04f 0100 	mov.w	r1, #0
 80107b6:	f7fe fb07 	bl	800edc8 <HAL_RCCEx_GetPeriphCLKFreq>
 80107ba:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	699b      	ldr	r3, [r3, #24]
 80107c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80107c4:	d120      	bne.n	8010808 <HAL_SAI_Init+0x1a4>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107ca:	2b04      	cmp	r3, #4
 80107cc:	d102      	bne.n	80107d4 <HAL_SAI_Init+0x170>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80107ce:	2340      	movs	r3, #64	; 0x40
 80107d0:	613b      	str	r3, [r7, #16]
 80107d2:	e00a      	b.n	80107ea <HAL_SAI_Init+0x186>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107d8:	2b08      	cmp	r3, #8
 80107da:	d103      	bne.n	80107e4 <HAL_SAI_Init+0x180>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80107dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107e0:	613b      	str	r3, [r7, #16]
 80107e2:	e002      	b.n	80107ea <HAL_SAI_Init+0x186>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107e8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80107ea:	69ba      	ldr	r2, [r7, #24]
 80107ec:	4613      	mov	r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	4413      	add	r3, r2
 80107f2:	005b      	lsls	r3, r3, #1
 80107f4:	4619      	mov	r1, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6a1b      	ldr	r3, [r3, #32]
 80107fa:	693a      	ldr	r2, [r7, #16]
 80107fc:	fb02 f303 	mul.w	r3, r2, r3
 8010800:	fbb1 f3f3 	udiv	r3, r1, r3
 8010804:	617b      	str	r3, [r7, #20]
 8010806:	e017      	b.n	8010838 <HAL_SAI_Init+0x1d4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801080c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010810:	d101      	bne.n	8010816 <HAL_SAI_Init+0x1b2>
 8010812:	2302      	movs	r3, #2
 8010814:	e000      	b.n	8010818 <HAL_SAI_Init+0x1b4>
 8010816:	2301      	movs	r3, #1
 8010818:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 801081a:	69ba      	ldr	r2, [r7, #24]
 801081c:	4613      	mov	r3, r2
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	4413      	add	r3, r2
 8010822:	005b      	lsls	r3, r3, #1
 8010824:	4619      	mov	r1, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6a1b      	ldr	r3, [r3, #32]
 801082a:	68fa      	ldr	r2, [r7, #12]
 801082c:	fb02 f303 	mul.w	r3, r2, r3
 8010830:	021b      	lsls	r3, r3, #8
 8010832:	fbb1 f3f3 	udiv	r3, r1, r3
 8010836:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	4a22      	ldr	r2, [pc, #136]	; (80108c4 <HAL_SAI_Init+0x260>)
 801083c:	fba2 2303 	umull	r2, r3, r2, r3
 8010840:	08da      	lsrs	r2, r3, #3
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8010846:	6979      	ldr	r1, [r7, #20]
 8010848:	4b1e      	ldr	r3, [pc, #120]	; (80108c4 <HAL_SAI_Init+0x260>)
 801084a:	fba3 2301 	umull	r2, r3, r3, r1
 801084e:	08da      	lsrs	r2, r3, #3
 8010850:	4613      	mov	r3, r2
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	4413      	add	r3, r2
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	1aca      	subs	r2, r1, r3
 801085a:	2a08      	cmp	r2, #8
 801085c:	d904      	bls.n	8010868 <HAL_SAI_Init+0x204>
    {
      hsai->Init.Mckdiv += 1U;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010862:	1c5a      	adds	r2, r3, #1
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801086c:	2b04      	cmp	r3, #4
 801086e:	d104      	bne.n	801087a <HAL_SAI_Init+0x216>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010874:	085a      	lsrs	r2, r3, #1
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d003      	beq.n	801088a <HAL_SAI_Init+0x226>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	2b02      	cmp	r3, #2
 8010888:	d109      	bne.n	801089e <HAL_SAI_Init+0x23a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801088e:	2b01      	cmp	r3, #1
 8010890:	d101      	bne.n	8010896 <HAL_SAI_Init+0x232>
 8010892:	2300      	movs	r3, #0
 8010894:	e001      	b.n	801089a <HAL_SAI_Init+0x236>
 8010896:	f44f 7300 	mov.w	r3, #512	; 0x200
 801089a:	623b      	str	r3, [r7, #32]
 801089c:	e016      	b.n	80108cc <HAL_SAI_Init+0x268>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d110      	bne.n	80108c8 <HAL_SAI_Init+0x264>
 80108a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108aa:	e00e      	b.n	80108ca <HAL_SAI_Init+0x266>
 80108ac:	40015404 	.word	0x40015404
 80108b0:	40015424 	.word	0x40015424
 80108b4:	40015400 	.word	0x40015400
 80108b8:	40015800 	.word	0x40015800
 80108bc:	40015804 	.word	0x40015804
 80108c0:	40015824 	.word	0x40015824
 80108c4:	cccccccd 	.word	0xcccccccd
 80108c8:	2300      	movs	r3, #0
 80108ca:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	6819      	ldr	r1, [r3, #0]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	4b59      	ldr	r3, [pc, #356]	; (8010a3c <HAL_SAI_Init+0x3d8>)
 80108d8:	400b      	ands	r3, r1
 80108da:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	6819      	ldr	r1, [r3, #0]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	685a      	ldr	r2, [r3, #4]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ea:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80108f0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108f6:	431a      	orrs	r2, r3
 80108f8:	6a3b      	ldr	r3, [r7, #32]
 80108fa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8010904:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010910:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010916:	051b      	lsls	r3, r3, #20
 8010918:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801091e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	691b      	ldr	r3, [r3, #16]
 8010924:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	430a      	orrs	r2, r1
 801092c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	6812      	ldr	r2, [r2, #0]
 8010938:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801093c:	f023 030f 	bic.w	r3, r3, #15
 8010940:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	6859      	ldr	r1, [r3, #4]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	69da      	ldr	r2, [r3, #28]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010950:	431a      	orrs	r2, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010956:	431a      	orrs	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	430a      	orrs	r2, r1
 801095e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6899      	ldr	r1, [r3, #8]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	4b35      	ldr	r3, [pc, #212]	; (8010a40 <HAL_SAI_Init+0x3dc>)
 801096c:	400b      	ands	r3, r1
 801096e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	6899      	ldr	r1, [r3, #8]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801097a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010980:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8010986:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 801098c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010992:	3b01      	subs	r3, #1
 8010994:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8010996:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	430a      	orrs	r2, r1
 801099e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	68d9      	ldr	r1, [r3, #12]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	f24f 0320 	movw	r3, #61472	; 0xf020
 80109ae:	400b      	ands	r3, r1
 80109b0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	68d9      	ldr	r1, [r3, #12]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109c6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80109c8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ce:	3b01      	subs	r3, #1
 80109d0:	021b      	lsls	r3, r3, #8
 80109d2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	430a      	orrs	r2, r1
 80109da:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a18      	ldr	r2, [pc, #96]	; (8010a44 <HAL_SAI_Init+0x3e0>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d119      	bne.n	8010a1a <HAL_SAI_Init+0x3b6>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80109e6:	4b18      	ldr	r3, [pc, #96]	; (8010a48 <HAL_SAI_Init+0x3e4>)
 80109e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ea:	4a17      	ldr	r2, [pc, #92]	; (8010a48 <HAL_SAI_Init+0x3e4>)
 80109ec:	f023 0301 	bic.w	r3, r3, #1
 80109f0:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d10e      	bne.n	8010a1a <HAL_SAI_Init+0x3b6>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a04:	3b01      	subs	r3, #1
 8010a06:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8010a08:	490f      	ldr	r1, [pc, #60]	; (8010a48 <HAL_SAI_Init+0x3e4>)
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8010a0e:	4b0e      	ldr	r3, [pc, #56]	; (8010a48 <HAL_SAI_Init+0x3e4>)
 8010a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a12:	4a0d      	ldr	r2, [pc, #52]	; (8010a48 <HAL_SAI_Init+0x3e4>)
 8010a14:	f043 0301 	orr.w	r3, r3, #1
 8010a18:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8010a32:	2300      	movs	r3, #0
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3728      	adds	r7, #40	; 0x28
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	f005c010 	.word	0xf005c010
 8010a40:	fff88000 	.word	0xfff88000
 8010a44:	40015404 	.word	0x40015404
 8010a48:	40015400 	.word	0x40015400

08010a4c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010a54:	4b18      	ldr	r3, [pc, #96]	; (8010ab8 <SAI_Disable+0x6c>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a18      	ldr	r2, [pc, #96]	; (8010abc <SAI_Disable+0x70>)
 8010a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a5e:	0b1b      	lsrs	r3, r3, #12
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010a64:	2300      	movs	r3, #0
 8010a66:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010a76:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d10a      	bne.n	8010a94 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8010a8e:	2303      	movs	r3, #3
 8010a90:	72fb      	strb	r3, [r7, #11]
      break;
 8010a92:	e009      	b.n	8010aa8 <SAI_Disable+0x5c>
    }
    count--;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	3b01      	subs	r3, #1
 8010a98:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d1e7      	bne.n	8010a78 <SAI_Disable+0x2c>

  return status;
 8010aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3714      	adds	r7, #20
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop
 8010ab8:	2000000c 	.word	0x2000000c
 8010abc:	95cbec1b 	.word	0x95cbec1b

08010ac0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b084      	sub	sp, #16
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d101      	bne.n	8010ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e0dd      	b.n	8010c8e <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4a70      	ldr	r2, [pc, #448]	; (8010c98 <HAL_SPI_Init+0x1d8>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d004      	beq.n	8010ae6 <HAL_SPI_Init+0x26>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a6e      	ldr	r2, [pc, #440]	; (8010c9c <HAL_SPI_Init+0x1dc>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	e000      	b.n	8010ae8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8010ae6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2200      	movs	r2, #0
 8010aec:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a69      	ldr	r2, [pc, #420]	; (8010c98 <HAL_SPI_Init+0x1d8>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d004      	beq.n	8010b02 <HAL_SPI_Init+0x42>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4a67      	ldr	r2, [pc, #412]	; (8010c9c <HAL_SPI_Init+0x1dc>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d105      	bne.n	8010b0e <HAL_SPI_Init+0x4e>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	2b0f      	cmp	r3, #15
 8010b08:	d901      	bls.n	8010b0e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e0bf      	b.n	8010c8e <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f001 fa02 	bl	8011f18 <SPI_GetPacketSize>
 8010b14:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4a5f      	ldr	r2, [pc, #380]	; (8010c98 <HAL_SPI_Init+0x1d8>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d004      	beq.n	8010b2a <HAL_SPI_Init+0x6a>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a5d      	ldr	r2, [pc, #372]	; (8010c9c <HAL_SPI_Init+0x1dc>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d102      	bne.n	8010b30 <HAL_SPI_Init+0x70>
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	2b08      	cmp	r3, #8
 8010b2e:	d816      	bhi.n	8010b5e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010b34:	4a5a      	ldr	r2, [pc, #360]	; (8010ca0 <HAL_SPI_Init+0x1e0>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d00e      	beq.n	8010b58 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a59      	ldr	r2, [pc, #356]	; (8010ca4 <HAL_SPI_Init+0x1e4>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d009      	beq.n	8010b58 <HAL_SPI_Init+0x98>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4a57      	ldr	r2, [pc, #348]	; (8010ca8 <HAL_SPI_Init+0x1e8>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d004      	beq.n	8010b58 <HAL_SPI_Init+0x98>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4a56      	ldr	r2, [pc, #344]	; (8010cac <HAL_SPI_Init+0x1ec>)
 8010b54:	4293      	cmp	r3, r2
 8010b56:	d104      	bne.n	8010b62 <HAL_SPI_Init+0xa2>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b10      	cmp	r3, #16
 8010b5c:	d901      	bls.n	8010b62 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	e095      	b.n	8010c8e <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d106      	bne.n	8010b7c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7f2 f9ee 	bl	8002f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2202      	movs	r2, #2
 8010b80:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f022 0201 	bic.w	r2, r2, #1
 8010b92:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8010b9e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010ba8:	d119      	bne.n	8010bde <HAL_SPI_Init+0x11e>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010bb2:	d103      	bne.n	8010bbc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d008      	beq.n	8010bce <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d10c      	bne.n	8010bde <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010bcc:	d107      	bne.n	8010bde <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010bdc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	69da      	ldr	r2, [r3, #28]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010be6:	431a      	orrs	r2, r3
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	431a      	orrs	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bf0:	ea42 0103 	orr.w	r1, r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	68da      	ldr	r2, [r3, #12]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	430a      	orrs	r2, r1
 8010bfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c08:	431a      	orrs	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0e:	431a      	orrs	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	699b      	ldr	r3, [r3, #24]
 8010c14:	431a      	orrs	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	691b      	ldr	r3, [r3, #16]
 8010c1a:	431a      	orrs	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	695b      	ldr	r3, [r3, #20]
 8010c20:	431a      	orrs	r2, r3
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6a1b      	ldr	r3, [r3, #32]
 8010c26:	431a      	orrs	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	431a      	orrs	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c32:	431a      	orrs	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	689b      	ldr	r3, [r3, #8]
 8010c38:	431a      	orrs	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c3e:	431a      	orrs	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c44:	431a      	orrs	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c4a:	ea42 0103 	orr.w	r1, r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d00a      	beq.n	8010c7c <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	430a      	orrs	r2, r1
 8010c7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2201      	movs	r2, #1
 8010c88:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	46002000 	.word	0x46002000
 8010c9c:	56002000 	.word	0x56002000
 8010ca0:	40013000 	.word	0x40013000
 8010ca4:	50013000 	.word	0x50013000
 8010ca8:	40003800 	.word	0x40003800
 8010cac:	50003800 	.word	0x50003800

08010cb0 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d101      	bne.n	8010cc2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e01b      	b.n	8010cfa <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2202      	movs	r2, #2
 8010cc6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	681a      	ldr	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f022 0201 	bic.w	r2, r2, #1
 8010cd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7f2 fb86 	bl	80033ec <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2200      	movs	r2, #0
 8010cec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  return HAL_OK;
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
	...

08010d04 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08a      	sub	sp, #40	; 0x28
 8010d08:	af02      	add	r7, sp, #8
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	603b      	str	r3, [r7, #0]
 8010d10:	4613      	mov	r3, r2
 8010d12:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	3320      	adds	r3, #32
 8010d1a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d101      	bne.n	8010d2e <HAL_SPI_Transmit+0x2a>
 8010d2a:	2302      	movs	r3, #2
 8010d2c:	e1f7      	b.n	801111e <HAL_SPI_Transmit+0x41a>
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2201      	movs	r2, #1
 8010d32:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010d36:	f7f6 fc51 	bl	80075dc <HAL_GetTick>
 8010d3a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	d007      	beq.n	8010d58 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8010d48:	2302      	movs	r3, #2
 8010d4a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010d54:	7efb      	ldrb	r3, [r7, #27]
 8010d56:	e1e2      	b.n	801111e <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d002      	beq.n	8010d64 <HAL_SPI_Transmit+0x60>
 8010d5e:	88fb      	ldrh	r3, [r7, #6]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d107      	bne.n	8010d74 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010d64:	2301      	movs	r3, #1
 8010d66:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8010d70:	7efb      	ldrb	r3, [r7, #27]
 8010d72:	e1d4      	b.n	801111e <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2203      	movs	r2, #3
 8010d78:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	88fa      	ldrh	r2, [r7, #6]
 8010d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	88fa      	ldrh	r2, [r7, #6]
 8010d96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2200      	movs	r2, #0
 8010da4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2200      	movs	r2, #0
 8010dac:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2200      	movs	r2, #0
 8010dba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	689b      	ldr	r3, [r3, #8]
 8010dc0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010dc4:	d107      	bne.n	8010dd6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010dd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	0c1b      	lsrs	r3, r3, #16
 8010dde:	041b      	lsls	r3, r3, #16
 8010de0:	88f9      	ldrh	r1, [r7, #6]
 8010de2:	68fa      	ldr	r2, [r7, #12]
 8010de4:	6812      	ldr	r2, [r2, #0]
 8010de6:	430b      	orrs	r3, r1
 8010de8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f042 0201 	orr.w	r2, r2, #1
 8010df8:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	69db      	ldr	r3, [r3, #28]
 8010e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10c      	bne.n	8010e22 <HAL_SPI_Transmit+0x11e>
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010e10:	d107      	bne.n	8010e22 <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	2b0f      	cmp	r3, #15
 8010e28:	d95b      	bls.n	8010ee2 <HAL_SPI_Transmit+0x1de>
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4a8f      	ldr	r2, [pc, #572]	; (801106c <HAL_SPI_Transmit+0x368>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d04f      	beq.n	8010ed4 <HAL_SPI_Transmit+0x1d0>
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a8d      	ldr	r2, [pc, #564]	; (8011070 <HAL_SPI_Transmit+0x36c>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d04a      	beq.n	8010ed4 <HAL_SPI_Transmit+0x1d0>
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4a8c      	ldr	r2, [pc, #560]	; (8011074 <HAL_SPI_Transmit+0x370>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d045      	beq.n	8010ed4 <HAL_SPI_Transmit+0x1d0>
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a8a      	ldr	r2, [pc, #552]	; (8011078 <HAL_SPI_Transmit+0x374>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d147      	bne.n	8010ee2 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010e52:	e03f      	b.n	8010ed4 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	695b      	ldr	r3, [r3, #20]
 8010e5a:	f003 0302 	and.w	r3, r3, #2
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	d114      	bne.n	8010e8c <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	6812      	ldr	r2, [r2, #0]
 8010e6c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e72:	1d1a      	adds	r2, r3, #4
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	3b01      	subs	r3, #1
 8010e82:	b29a      	uxth	r2, r3
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e8a:	e023      	b.n	8010ed4 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e8c:	f7f6 fba6 	bl	80075dc <HAL_GetTick>
 8010e90:	4602      	mov	r2, r0
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	1ad3      	subs	r3, r2, r3
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d803      	bhi.n	8010ea4 <HAL_SPI_Transmit+0x1a0>
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea2:	d102      	bne.n	8010eaa <HAL_SPI_Transmit+0x1a6>
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d114      	bne.n	8010ed4 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f000 ff66 	bl	8011d7c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8010ed0:	2303      	movs	r3, #3
 8010ed2:	e124      	b.n	801111e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d1b9      	bne.n	8010e54 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010ee0:	e0f7      	b.n	80110d2 <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	2b07      	cmp	r3, #7
 8010ee8:	f240 80ec 	bls.w	80110c4 <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010eec:	e05d      	b.n	8010faa <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	695b      	ldr	r3, [r3, #20]
 8010ef4:	f003 0302 	and.w	r3, r3, #2
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d132      	bne.n	8010f62 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d918      	bls.n	8010f3a <HAL_SPI_Transmit+0x236>
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d014      	beq.n	8010f3a <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	6812      	ldr	r2, [r2, #0]
 8010f1a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f20:	1d1a      	adds	r2, r3, #4
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	3b02      	subs	r3, #2
 8010f30:	b29a      	uxth	r2, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f38:	e037      	b.n	8010faa <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f3e:	881a      	ldrh	r2, [r3, #0]
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f48:	1c9a      	adds	r2, r3, #2
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	3b01      	subs	r3, #1
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f60:	e023      	b.n	8010faa <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f62:	f7f6 fb3b 	bl	80075dc <HAL_GetTick>
 8010f66:	4602      	mov	r2, r0
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	683a      	ldr	r2, [r7, #0]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d803      	bhi.n	8010f7a <HAL_SPI_Transmit+0x276>
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f78:	d102      	bne.n	8010f80 <HAL_SPI_Transmit+0x27c>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d114      	bne.n	8010faa <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f000 fefb 	bl	8011d7c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	e0b9      	b.n	801111e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d19b      	bne.n	8010eee <HAL_SPI_Transmit+0x1ea>
 8010fb6:	e08c      	b.n	80110d2 <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	695b      	ldr	r3, [r3, #20]
 8010fbe:	f003 0302 	and.w	r3, r3, #2
 8010fc2:	2b02      	cmp	r3, #2
 8010fc4:	d15a      	bne.n	801107c <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	2b03      	cmp	r3, #3
 8010fd0:	d918      	bls.n	8011004 <HAL_SPI_Transmit+0x300>
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fd6:	2b40      	cmp	r3, #64	; 0x40
 8010fd8:	d914      	bls.n	8011004 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	6812      	ldr	r2, [r2, #0]
 8010fe4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fea:	1d1a      	adds	r2, r3, #4
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	3b04      	subs	r3, #4
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011002:	e05f      	b.n	80110c4 <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801100a:	b29b      	uxth	r3, r3
 801100c:	2b01      	cmp	r3, #1
 801100e:	d917      	bls.n	8011040 <HAL_SPI_Transmit+0x33c>
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011014:	2b00      	cmp	r3, #0
 8011016:	d013      	beq.n	8011040 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801101c:	881a      	ldrh	r2, [r3, #0]
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011026:	1c9a      	adds	r2, r3, #2
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011032:	b29b      	uxth	r3, r3
 8011034:	3b02      	subs	r3, #2
 8011036:	b29a      	uxth	r2, r3
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801103e:	e041      	b.n	80110c4 <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	3320      	adds	r3, #32
 801104a:	7812      	ldrb	r2, [r2, #0]
 801104c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011052:	1c5a      	adds	r2, r3, #1
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801105e:	b29b      	uxth	r3, r3
 8011060:	3b01      	subs	r3, #1
 8011062:	b29a      	uxth	r2, r3
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801106a:	e02b      	b.n	80110c4 <HAL_SPI_Transmit+0x3c0>
 801106c:	40013000 	.word	0x40013000
 8011070:	50013000 	.word	0x50013000
 8011074:	40003800 	.word	0x40003800
 8011078:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801107c:	f7f6 faae 	bl	80075dc <HAL_GetTick>
 8011080:	4602      	mov	r2, r0
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	683a      	ldr	r2, [r7, #0]
 8011088:	429a      	cmp	r2, r3
 801108a:	d803      	bhi.n	8011094 <HAL_SPI_Transmit+0x390>
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011092:	d102      	bne.n	801109a <HAL_SPI_Transmit+0x396>
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d114      	bne.n	80110c4 <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f000 fe6e 	bl	8011d7c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2200      	movs	r2, #0
 80110a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2201      	movs	r2, #1
 80110bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80110c0:	2303      	movs	r3, #3
 80110c2:	e02c      	b.n	801111e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	f47f af73 	bne.w	8010fb8 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	2200      	movs	r2, #0
 80110da:	2108      	movs	r1, #8
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f000 feed 	bl	8011ebc <SPI_WaitOnFlagUntilTimeout>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d007      	beq.n	80110f8 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110ee:	f043 0220 	orr.w	r2, r3, #32
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f000 fe3f 	bl	8011d7c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2200      	movs	r2, #0
 8011102:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2201      	movs	r2, #1
 801110a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011114:	2b00      	cmp	r3, #0
 8011116:	d001      	beq.n	801111c <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 8011118:	2301      	movs	r3, #1
 801111a:	e000      	b.n	801111e <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 801111c:	7efb      	ldrb	r3, [r7, #27]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3720      	adds	r7, #32
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop

08011128 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b08a      	sub	sp, #40	; 0x28
 801112c:	af02      	add	r7, sp, #8
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	603b      	str	r3, [r7, #0]
 8011134:	4613      	mov	r3, r2
 8011136:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3330      	adds	r3, #48	; 0x30
 8011142:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801114c:	d112      	bne.n	8011174 <HAL_SPI_Receive+0x4c>
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d10e      	bne.n	8011174 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2204      	movs	r2, #4
 801115a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801115e:	88fa      	ldrh	r2, [r7, #6]
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	4613      	mov	r3, r2
 8011166:	68ba      	ldr	r2, [r7, #8]
 8011168:	68b9      	ldr	r1, [r7, #8]
 801116a:	68f8      	ldr	r0, [r7, #12]
 801116c:	f000 f99a 	bl	80114a4 <HAL_SPI_TransmitReceive>
 8011170:	4603      	mov	r3, r0
 8011172:	e18a      	b.n	801148a <HAL_SPI_Receive+0x362>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 801117a:	2b01      	cmp	r3, #1
 801117c:	d101      	bne.n	8011182 <HAL_SPI_Receive+0x5a>
 801117e:	2302      	movs	r3, #2
 8011180:	e183      	b.n	801148a <HAL_SPI_Receive+0x362>
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2201      	movs	r2, #1
 8011186:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801118a:	f7f6 fa27 	bl	80075dc <HAL_GetTick>
 801118e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011196:	b2db      	uxtb	r3, r3
 8011198:	2b01      	cmp	r3, #1
 801119a:	d007      	beq.n	80111ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 801119c:	2302      	movs	r3, #2
 801119e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2200      	movs	r2, #0
 80111a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80111a8:	7ffb      	ldrb	r3, [r7, #31]
 80111aa:	e16e      	b.n	801148a <HAL_SPI_Receive+0x362>
  }

  if ((pData == NULL) || (Size == 0UL))
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d002      	beq.n	80111b8 <HAL_SPI_Receive+0x90>
 80111b2:	88fb      	ldrh	r3, [r7, #6]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d107      	bne.n	80111c8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80111b8:	2301      	movs	r3, #1
 80111ba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80111c4:	7ffb      	ldrb	r3, [r7, #31]
 80111c6:	e160      	b.n	801148a <HAL_SPI_Receive+0x362>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2204      	movs	r2, #4
 80111cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2200      	movs	r2, #0
 80111d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	68ba      	ldr	r2, [r7, #8]
 80111dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	88fa      	ldrh	r2, [r7, #6]
 80111e2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	88fa      	ldrh	r2, [r7, #6]
 80111ea:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2200      	movs	r2, #0
 80111f2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2200      	movs	r2, #0
 80111f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2200      	movs	r2, #0
 8011200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2200      	movs	r2, #0
 801120e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011218:	d107      	bne.n	801122a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011228:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	0c1b      	lsrs	r3, r3, #16
 8011232:	041b      	lsls	r3, r3, #16
 8011234:	88f9      	ldrh	r1, [r7, #6]
 8011236:	68fa      	ldr	r2, [r7, #12]
 8011238:	6812      	ldr	r2, [r2, #0]
 801123a:	430b      	orrs	r3, r1
 801123c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	681a      	ldr	r2, [r3, #0]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f042 0201 	orr.w	r2, r2, #1
 801124c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	69db      	ldr	r3, [r3, #28]
 8011254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011258:	2b00      	cmp	r3, #0
 801125a:	d10c      	bne.n	8011276 <HAL_SPI_Receive+0x14e>
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011264:	d107      	bne.n	8011276 <HAL_SPI_Receive+0x14e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011274:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	68db      	ldr	r3, [r3, #12]
 801127a:	2b0f      	cmp	r3, #15
 801127c:	d95c      	bls.n	8011338 <HAL_SPI_Receive+0x210>
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4a84      	ldr	r2, [pc, #528]	; (8011494 <HAL_SPI_Receive+0x36c>)
 8011284:	4293      	cmp	r3, r2
 8011286:	d050      	beq.n	801132a <HAL_SPI_Receive+0x202>
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4a82      	ldr	r2, [pc, #520]	; (8011498 <HAL_SPI_Receive+0x370>)
 801128e:	4293      	cmp	r3, r2
 8011290:	d04b      	beq.n	801132a <HAL_SPI_Receive+0x202>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4a81      	ldr	r2, [pc, #516]	; (801149c <HAL_SPI_Receive+0x374>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d046      	beq.n	801132a <HAL_SPI_Receive+0x202>
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4a7f      	ldr	r2, [pc, #508]	; (80114a0 <HAL_SPI_Receive+0x378>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d148      	bne.n	8011338 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80112a6:	e040      	b.n	801132a <HAL_SPI_Receive+0x202>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	695a      	ldr	r2, [r3, #20]
 80112ae:	f248 0308 	movw	r3, #32776	; 0x8008
 80112b2:	4013      	ands	r3, r2
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d014      	beq.n	80112e2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80112c2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c8:	1d1a      	adds	r2, r3, #4
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	3b01      	subs	r3, #1
 80112d8:	b29a      	uxth	r2, r3
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80112e0:	e023      	b.n	801132a <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112e2:	f7f6 f97b 	bl	80075dc <HAL_GetTick>
 80112e6:	4602      	mov	r2, r0
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	683a      	ldr	r2, [r7, #0]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d803      	bhi.n	80112fa <HAL_SPI_Receive+0x1d2>
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112f8:	d102      	bne.n	8011300 <HAL_SPI_Receive+0x1d8>
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d114      	bne.n	801132a <HAL_SPI_Receive+0x202>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 fd3b 	bl	8011d7c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011314:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2201      	movs	r2, #1
 8011322:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8011326:	2303      	movs	r3, #3
 8011328:	e0af      	b.n	801148a <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011330:	b29b      	uxth	r3, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	d1b8      	bne.n	80112a8 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8011336:	e095      	b.n	8011464 <HAL_SPI_Receive+0x33c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	2b07      	cmp	r3, #7
 801133e:	f240 808b 	bls.w	8011458 <HAL_SPI_Receive+0x330>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011342:	e03f      	b.n	80113c4 <HAL_SPI_Receive+0x29c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	695b      	ldr	r3, [r3, #20]
 801134a:	f003 0301 	and.w	r3, r3, #1
 801134e:	2b01      	cmp	r3, #1
 8011350:	d114      	bne.n	801137c <HAL_SPI_Receive+0x254>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011356:	69ba      	ldr	r2, [r7, #24]
 8011358:	8812      	ldrh	r2, [r2, #0]
 801135a:	b292      	uxth	r2, r2
 801135c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011362:	1c9a      	adds	r2, r3, #2
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801136e:	b29b      	uxth	r3, r3
 8011370:	3b01      	subs	r3, #1
 8011372:	b29a      	uxth	r2, r3
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 801137a:	e023      	b.n	80113c4 <HAL_SPI_Receive+0x29c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801137c:	f7f6 f92e 	bl	80075dc <HAL_GetTick>
 8011380:	4602      	mov	r2, r0
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	1ad3      	subs	r3, r2, r3
 8011386:	683a      	ldr	r2, [r7, #0]
 8011388:	429a      	cmp	r2, r3
 801138a:	d803      	bhi.n	8011394 <HAL_SPI_Receive+0x26c>
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011392:	d102      	bne.n	801139a <HAL_SPI_Receive+0x272>
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d114      	bne.n	80113c4 <HAL_SPI_Receive+0x29c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f000 fcee 	bl	8011d7c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2200      	movs	r2, #0
 80113a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2201      	movs	r2, #1
 80113bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80113c0:	2303      	movs	r3, #3
 80113c2:	e062      	b.n	801148a <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1b9      	bne.n	8011344 <HAL_SPI_Receive+0x21c>
 80113d0:	e048      	b.n	8011464 <HAL_SPI_Receive+0x33c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	695b      	ldr	r3, [r3, #20]
 80113d8:	f003 0301 	and.w	r3, r3, #1
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d117      	bne.n	8011410 <HAL_SPI_Receive+0x2e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ec:	7812      	ldrb	r2, [r2, #0]
 80113ee:	b2d2      	uxtb	r2, r2
 80113f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113f6:	1c5a      	adds	r2, r3, #1
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011402:	b29b      	uxth	r3, r3
 8011404:	3b01      	subs	r3, #1
 8011406:	b29a      	uxth	r2, r3
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 801140e:	e023      	b.n	8011458 <HAL_SPI_Receive+0x330>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011410:	f7f6 f8e4 	bl	80075dc <HAL_GetTick>
 8011414:	4602      	mov	r2, r0
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	683a      	ldr	r2, [r7, #0]
 801141c:	429a      	cmp	r2, r3
 801141e:	d803      	bhi.n	8011428 <HAL_SPI_Receive+0x300>
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011426:	d102      	bne.n	801142e <HAL_SPI_Receive+0x306>
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d114      	bne.n	8011458 <HAL_SPI_Receive+0x330>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f000 fca4 	bl	8011d7c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2200      	movs	r2, #0
 8011438:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2201      	movs	r2, #1
 8011450:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8011454:	2303      	movs	r3, #3
 8011456:	e018      	b.n	801148a <HAL_SPI_Receive+0x362>
    while (hspi->RxXferCount > 0UL)
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801145e:	b29b      	uxth	r3, r3
 8011460:	2b00      	cmp	r3, #0
 8011462:	d1b6      	bne.n	80113d2 <HAL_SPI_Receive+0x2aa>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	f000 fc89 	bl	8011d7c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2200      	movs	r2, #0
 801146e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2201      	movs	r2, #1
 8011476:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011480:	2b00      	cmp	r3, #0
 8011482:	d001      	beq.n	8011488 <HAL_SPI_Receive+0x360>
  {
    return HAL_ERROR;
 8011484:	2301      	movs	r3, #1
 8011486:	e000      	b.n	801148a <HAL_SPI_Receive+0x362>
  }
  return errorcode;
 8011488:	7ffb      	ldrb	r3, [r7, #31]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3720      	adds	r7, #32
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	40013000 	.word	0x40013000
 8011498:	50013000 	.word	0x50013000
 801149c:	40003800 	.word	0x40003800
 80114a0:	50003800 	.word	0x50003800

080114a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b08e      	sub	sp, #56	; 0x38
 80114a8:	af02      	add	r7, sp, #8
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	607a      	str	r2, [r7, #4]
 80114b0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80114b2:	2300      	movs	r3, #0
 80114b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3320      	adds	r3, #32
 80114be:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	3330      	adds	r3, #48	; 0x30
 80114c6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d101      	bne.n	80114d6 <HAL_SPI_TransmitReceive+0x32>
 80114d2:	2302      	movs	r3, #2
 80114d4:	e22b      	b.n	801192e <HAL_SPI_TransmitReceive+0x48a>
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2201      	movs	r2, #1
 80114da:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80114de:	f7f6 f87d 	bl	80075dc <HAL_GetTick>
 80114e2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80114e4:	887b      	ldrh	r3, [r7, #2]
 80114e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80114e8:	887b      	ldrh	r3, [r7, #2]
 80114ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80114f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80114fa:	7efb      	ldrb	r3, [r7, #27]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d014      	beq.n	801152a <HAL_SPI_TransmitReceive+0x86>
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011506:	d106      	bne.n	8011516 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 801150c:	2b00      	cmp	r3, #0
 801150e:	d102      	bne.n	8011516 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011510:	7efb      	ldrb	r3, [r7, #27]
 8011512:	2b04      	cmp	r3, #4
 8011514:	d009      	beq.n	801152a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8011516:	2302      	movs	r3, #2
 8011518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2200      	movs	r2, #0
 8011520:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8011524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011528:	e201      	b.n	801192e <HAL_SPI_TransmitReceive+0x48a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d005      	beq.n	801153c <HAL_SPI_TransmitReceive+0x98>
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d002      	beq.n	801153c <HAL_SPI_TransmitReceive+0x98>
 8011536:	887b      	ldrh	r3, [r7, #2]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d109      	bne.n	8011550 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 801153c:	2301      	movs	r3, #1
 801153e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2200      	movs	r2, #0
 8011546:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 801154a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801154e:	e1ee      	b.n	801192e <HAL_SPI_TransmitReceive+0x48a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011556:	b2db      	uxtb	r3, r3
 8011558:	2b04      	cmp	r3, #4
 801155a:	d003      	beq.n	8011564 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2205      	movs	r2, #5
 8011560:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2200      	movs	r2, #0
 8011568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	887a      	ldrh	r2, [r7, #2]
 8011576:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	887a      	ldrh	r2, [r7, #2]
 801157e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	887a      	ldrh	r2, [r7, #2]
 801158c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	887a      	ldrh	r2, [r7, #2]
 8011594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2200      	movs	r2, #0
 801159c:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2200      	movs	r2, #0
 80115a2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	0c1b      	lsrs	r3, r3, #16
 80115ac:	041b      	lsls	r3, r3, #16
 80115ae:	8879      	ldrh	r1, [r7, #2]
 80115b0:	68fa      	ldr	r2, [r7, #12]
 80115b2:	6812      	ldr	r2, [r2, #0]
 80115b4:	430b      	orrs	r3, r1
 80115b6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f042 0201 	orr.w	r2, r2, #1
 80115c6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	69db      	ldr	r3, [r3, #28]
 80115ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d10c      	bne.n	80115f0 <HAL_SPI_TransmitReceive+0x14c>
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80115de:	d107      	bne.n	80115f0 <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80115ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	2b0f      	cmp	r3, #15
 80115f6:	f240 8085 	bls.w	8011704 <HAL_SPI_TransmitReceive+0x260>
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4a7b      	ldr	r2, [pc, #492]	; (80117ec <HAL_SPI_TransmitReceive+0x348>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d078      	beq.n	80116f6 <HAL_SPI_TransmitReceive+0x252>
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4a79      	ldr	r2, [pc, #484]	; (80117f0 <HAL_SPI_TransmitReceive+0x34c>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d073      	beq.n	80116f6 <HAL_SPI_TransmitReceive+0x252>
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a78      	ldr	r2, [pc, #480]	; (80117f4 <HAL_SPI_TransmitReceive+0x350>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d06e      	beq.n	80116f6 <HAL_SPI_TransmitReceive+0x252>
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4a76      	ldr	r2, [pc, #472]	; (80117f8 <HAL_SPI_TransmitReceive+0x354>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d170      	bne.n	8011704 <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011622:	e068      	b.n	80116f6 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	695b      	ldr	r3, [r3, #20]
 801162a:	f003 0302 	and.w	r3, r3, #2
 801162e:	2b02      	cmp	r3, #2
 8011630:	d11a      	bne.n	8011668 <HAL_SPI_TransmitReceive+0x1c4>
 8011632:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011634:	2b00      	cmp	r3, #0
 8011636:	d017      	beq.n	8011668 <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	6812      	ldr	r2, [r2, #0]
 8011642:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011648:	1d1a      	adds	r2, r3, #4
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011654:	b29b      	uxth	r3, r3
 8011656:	3b01      	subs	r3, #1
 8011658:	b29a      	uxth	r2, r3
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011666:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	695a      	ldr	r2, [r3, #20]
 801166e:	f248 0308 	movw	r3, #32776	; 0x8008
 8011672:	4013      	ands	r3, r2
 8011674:	2b00      	cmp	r3, #0
 8011676:	d01a      	beq.n	80116ae <HAL_SPI_TransmitReceive+0x20a>
 8011678:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801167a:	2b00      	cmp	r3, #0
 801167c:	d017      	beq.n	80116ae <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011686:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011688:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801168e:	1d1a      	adds	r2, r3, #4
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801169a:	b29b      	uxth	r3, r3
 801169c:	3b01      	subs	r3, #1
 801169e:	b29a      	uxth	r2, r3
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80116ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80116ae:	f7f5 ff95 	bl	80075dc <HAL_GetTick>
 80116b2:	4602      	mov	r2, r0
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d803      	bhi.n	80116c6 <HAL_SPI_TransmitReceive+0x222>
 80116be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c4:	d102      	bne.n	80116cc <HAL_SPI_TransmitReceive+0x228>
 80116c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d114      	bne.n	80116f6 <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f000 fb55 	bl	8011d7c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	2201      	movs	r2, #1
 80116ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80116f2:	2303      	movs	r3, #3
 80116f4:	e11b      	b.n	801192e <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80116f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d193      	bne.n	8011624 <HAL_SPI_TransmitReceive+0x180>
 80116fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d190      	bne.n	8011624 <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8011702:	e0ed      	b.n	80118e0 <HAL_SPI_TransmitReceive+0x43c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	2b07      	cmp	r3, #7
 801170a:	f240 80e3 	bls.w	80118d4 <HAL_SPI_TransmitReceive+0x430>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801170e:	e066      	b.n	80117de <HAL_SPI_TransmitReceive+0x33a>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	f003 0302 	and.w	r3, r3, #2
 801171a:	2b02      	cmp	r3, #2
 801171c:	d119      	bne.n	8011752 <HAL_SPI_TransmitReceive+0x2ae>
 801171e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011720:	2b00      	cmp	r3, #0
 8011722:	d016      	beq.n	8011752 <HAL_SPI_TransmitReceive+0x2ae>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011728:	881a      	ldrh	r2, [r3, #0]
 801172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011732:	1c9a      	adds	r2, r3, #2
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801173e:	b29b      	uxth	r3, r3
 8011740:	3b01      	subs	r3, #1
 8011742:	b29a      	uxth	r2, r3
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011750:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	695b      	ldr	r3, [r3, #20]
 8011758:	f003 0301 	and.w	r3, r3, #1
 801175c:	2b01      	cmp	r3, #1
 801175e:	d11a      	bne.n	8011796 <HAL_SPI_TransmitReceive+0x2f2>
 8011760:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011762:	2b00      	cmp	r3, #0
 8011764:	d017      	beq.n	8011796 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801176a:	6a3a      	ldr	r2, [r7, #32]
 801176c:	8812      	ldrh	r2, [r2, #0]
 801176e:	b292      	uxth	r2, r2
 8011770:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011776:	1c9a      	adds	r2, r3, #2
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011782:	b29b      	uxth	r3, r3
 8011784:	3b01      	subs	r3, #1
 8011786:	b29a      	uxth	r2, r3
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011794:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011796:	f7f5 ff21 	bl	80075dc <HAL_GetTick>
 801179a:	4602      	mov	r2, r0
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d803      	bhi.n	80117ae <HAL_SPI_TransmitReceive+0x30a>
 80117a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ac:	d102      	bne.n	80117b4 <HAL_SPI_TransmitReceive+0x310>
 80117ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d114      	bne.n	80117de <HAL_SPI_TransmitReceive+0x33a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	f000 fae1 	bl	8011d7c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2200      	movs	r2, #0
 80117be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2201      	movs	r2, #1
 80117d6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80117da:	2303      	movs	r3, #3
 80117dc:	e0a7      	b.n	801192e <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80117de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d195      	bne.n	8011710 <HAL_SPI_TransmitReceive+0x26c>
 80117e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d192      	bne.n	8011710 <HAL_SPI_TransmitReceive+0x26c>
 80117ea:	e079      	b.n	80118e0 <HAL_SPI_TransmitReceive+0x43c>
 80117ec:	40013000 	.word	0x40013000
 80117f0:	50013000 	.word	0x50013000
 80117f4:	40003800 	.word	0x40003800
 80117f8:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	695b      	ldr	r3, [r3, #20]
 8011802:	f003 0302 	and.w	r3, r3, #2
 8011806:	2b02      	cmp	r3, #2
 8011808:	d11b      	bne.n	8011842 <HAL_SPI_TransmitReceive+0x39e>
 801180a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801180c:	2b00      	cmp	r3, #0
 801180e:	d018      	beq.n	8011842 <HAL_SPI_TransmitReceive+0x39e>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	3320      	adds	r3, #32
 801181a:	7812      	ldrb	r2, [r2, #0]
 801181c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801182e:	b29b      	uxth	r3, r3
 8011830:	3b01      	subs	r3, #1
 8011832:	b29a      	uxth	r2, r3
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011840:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	695b      	ldr	r3, [r3, #20]
 8011848:	f003 0301 	and.w	r3, r3, #1
 801184c:	2b01      	cmp	r3, #1
 801184e:	d11d      	bne.n	801188c <HAL_SPI_TransmitReceive+0x3e8>
 8011850:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011852:	2b00      	cmp	r3, #0
 8011854:	d01a      	beq.n	801188c <HAL_SPI_TransmitReceive+0x3e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011862:	7812      	ldrb	r2, [r2, #0]
 8011864:	b2d2      	uxtb	r2, r2
 8011866:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801186c:	1c5a      	adds	r2, r3, #1
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011878:	b29b      	uxth	r3, r3
 801187a:	3b01      	subs	r3, #1
 801187c:	b29a      	uxth	r2, r3
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801188a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801188c:	f7f5 fea6 	bl	80075dc <HAL_GetTick>
 8011890:	4602      	mov	r2, r0
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	1ad3      	subs	r3, r2, r3
 8011896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011898:	429a      	cmp	r2, r3
 801189a:	d803      	bhi.n	80118a4 <HAL_SPI_TransmitReceive+0x400>
 801189c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118a2:	d102      	bne.n	80118aa <HAL_SPI_TransmitReceive+0x406>
 80118a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d114      	bne.n	80118d4 <HAL_SPI_TransmitReceive+0x430>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f000 fa66 	bl	8011d7c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2200      	movs	r2, #0
 80118b4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2201      	movs	r2, #1
 80118cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80118d0:	2303      	movs	r3, #3
 80118d2:	e02c      	b.n	801192e <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80118d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d190      	bne.n	80117fc <HAL_SPI_TransmitReceive+0x358>
 80118da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d18d      	bne.n	80117fc <HAL_SPI_TransmitReceive+0x358>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80118e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e2:	9300      	str	r3, [sp, #0]
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	2200      	movs	r2, #0
 80118e8:	2108      	movs	r1, #8
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f000 fae6 	bl	8011ebc <SPI_WaitOnFlagUntilTimeout>
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d007      	beq.n	8011906 <HAL_SPI_TransmitReceive+0x462>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118fc:	f043 0220 	orr.w	r2, r3, #32
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f000 fa38 	bl	8011d7c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2200      	movs	r2, #0
 8011910:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2201      	movs	r2, #1
 8011918:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011922:	2b00      	cmp	r3, #0
 8011924:	d001      	beq.n	801192a <HAL_SPI_TransmitReceive+0x486>
  {
    return HAL_ERROR;
 8011926:	2301      	movs	r3, #1
 8011928:	e001      	b.n	801192e <HAL_SPI_TransmitReceive+0x48a>
  }
  return errorcode;
 801192a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801192e:	4618      	mov	r0, r3
 8011930:	3730      	adds	r7, #48	; 0x30
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop

08011938 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b08a      	sub	sp, #40	; 0x28
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	695b      	ldr	r3, [r3, #20]
 801194e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011950:	6a3a      	ldr	r2, [r7, #32]
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	4013      	ands	r3, r2
 8011956:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	689b      	ldr	r3, [r3, #8]
 801195e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011960:	2300      	movs	r3, #0
 8011962:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801196a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	3330      	adds	r3, #48	; 0x30
 8011972:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801197a:	2b00      	cmp	r3, #0
 801197c:	d113      	bne.n	80119a6 <HAL_SPI_IRQHandler+0x6e>
 801197e:	69bb      	ldr	r3, [r7, #24]
 8011980:	f003 0320 	and.w	r3, r3, #32
 8011984:	2b00      	cmp	r3, #0
 8011986:	d10e      	bne.n	80119a6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801198e:	2b00      	cmp	r3, #0
 8011990:	d009      	beq.n	80119a6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	4798      	blx	r3
    hspi->RxISR(hspi);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	4798      	blx	r3
    handled = 1UL;
 80119a2:	2301      	movs	r3, #1
 80119a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10f      	bne.n	80119d0 <HAL_SPI_IRQHandler+0x98>
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	f003 0301 	and.w	r3, r3, #1
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00a      	beq.n	80119d0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d105      	bne.n	80119d0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	4798      	blx	r3
    handled = 1UL;
 80119cc:	2301      	movs	r3, #1
 80119ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80119d0:	69bb      	ldr	r3, [r7, #24]
 80119d2:	f003 0320 	and.w	r3, r3, #32
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d10f      	bne.n	80119fa <HAL_SPI_IRQHandler+0xc2>
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	f003 0302 	and.w	r3, r3, #2
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00a      	beq.n	80119fa <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d105      	bne.n	80119fa <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	4798      	blx	r3
    handled = 1UL;
 80119f6:	2301      	movs	r3, #1
 80119f8:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f040 8162 	bne.w	8011cc6 <HAL_SPI_IRQHandler+0x38e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	f003 0308 	and.w	r3, r3, #8
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	f000 808b 	beq.w	8011b24 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	699a      	ldr	r2, [r3, #24]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f042 0208 	orr.w	r2, r2, #8
 8011a1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	699a      	ldr	r2, [r3, #24]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f042 0210 	orr.w	r2, r2, #16
 8011a2c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	699a      	ldr	r2, [r3, #24]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a3c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	691a      	ldr	r2, [r3, #16]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f022 0208 	bic.w	r2, r2, #8
 8011a4c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	689b      	ldr	r3, [r3, #8]
 8011a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d13d      	bne.n	8011ad8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011a5c:	e036      	b.n	8011acc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	2b0f      	cmp	r3, #15
 8011a64:	d90b      	bls.n	8011a7e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011a70:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a76:	1d1a      	adds	r2, r3, #4
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a7c:	e01d      	b.n	8011aba <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	2b07      	cmp	r3, #7
 8011a84:	d90b      	bls.n	8011a9e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8a:	68fa      	ldr	r2, [r7, #12]
 8011a8c:	8812      	ldrh	r2, [r2, #0]
 8011a8e:	b292      	uxth	r2, r2
 8011a90:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a96:	1c9a      	adds	r2, r3, #2
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a9c:	e00d      	b.n	8011aba <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aaa:	7812      	ldrb	r2, [r2, #0]
 8011aac:	b2d2      	uxtb	r2, r2
 8011aae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab4:	1c5a      	adds	r2, r3, #1
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1c2      	bne.n	8011a5e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f000 f94f 	bl	8011d7c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d003      	beq.n	8011af8 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 f911 	bl	8011d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011af6:	e0eb      	b.n	8011cd0 <HAL_SPI_IRQHandler+0x398>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011af8:	7cfb      	ldrb	r3, [r7, #19]
 8011afa:	2b05      	cmp	r3, #5
 8011afc:	d103      	bne.n	8011b06 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 f900 	bl	8011d04 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011b04:	e0e1      	b.n	8011cca <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011b06:	7cfb      	ldrb	r3, [r7, #19]
 8011b08:	2b04      	cmp	r3, #4
 8011b0a:	d103      	bne.n	8011b14 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f000 f8ef 	bl	8011cf0 <HAL_SPI_RxCpltCallback>
    return;
 8011b12:	e0da      	b.n	8011cca <HAL_SPI_IRQHandler+0x392>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011b14:	7cfb      	ldrb	r3, [r7, #19]
 8011b16:	2b03      	cmp	r3, #3
 8011b18:	f040 80d7 	bne.w	8011cca <HAL_SPI_IRQHandler+0x392>
      HAL_SPI_TxCpltCallback(hspi);
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f000 f8dd 	bl	8011cdc <HAL_SPI_TxCpltCallback>
    return;
 8011b22:	e0d2      	b.n	8011cca <HAL_SPI_IRQHandler+0x392>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00d      	beq.n	8011b4a <HAL_SPI_IRQHandler+0x212>
 8011b2e:	6a3b      	ldr	r3, [r7, #32]
 8011b30:	f003 0308 	and.w	r3, r3, #8
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d008      	beq.n	8011b4a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	699a      	ldr	r2, [r3, #24]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b46:	619a      	str	r2, [r3, #24]

    return;
 8011b48:	e0c2      	b.n	8011cd0 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	f000 80bd 	beq.w	8011cd0 <HAL_SPI_IRQHandler+0x398>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011b56:	69bb      	ldr	r3, [r7, #24]
 8011b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d00f      	beq.n	8011b80 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b66:	f043 0204 	orr.w	r2, r3, #4
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	699a      	ldr	r2, [r3, #24]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b7e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011b80:	69bb      	ldr	r3, [r7, #24]
 8011b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00f      	beq.n	8011baa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b90:	f043 0201 	orr.w	r2, r3, #1
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	699a      	ldr	r2, [r3, #24]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011ba8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00f      	beq.n	8011bd4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bba:	f043 0208 	orr.w	r2, r3, #8
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	699a      	ldr	r2, [r3, #24]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011bd2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	f003 0320 	and.w	r3, r3, #32
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d00f      	beq.n	8011bfe <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011be4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	699a      	ldr	r2, [r3, #24]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f042 0220 	orr.w	r2, r2, #32
 8011bfc:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d062      	beq.n	8011cce <HAL_SPI_IRQHandler+0x396>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	681a      	ldr	r2, [r3, #0]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f022 0201 	bic.w	r2, r2, #1
 8011c16:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	691b      	ldr	r3, [r3, #16]
 8011c1e:	687a      	ldr	r2, [r7, #4]
 8011c20:	6812      	ldr	r2, [r2, #0]
 8011c22:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8011c26:	f023 0303 	bic.w	r3, r3, #3
 8011c2a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011c32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011c36:	d13e      	bne.n	8011cb6 <HAL_SPI_IRQHandler+0x37e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	689a      	ldr	r2, [r3, #8]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011c46:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d015      	beq.n	8011c7e <HAL_SPI_IRQHandler+0x346>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c58:	4a1f      	ldr	r2, [pc, #124]	; (8011cd8 <HAL_SPI_IRQHandler+0x3a0>)
 8011c5a:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7f6 fec0 	bl	80089e8 <HAL_DMA_Abort_IT>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d007      	beq.n	8011c7e <HAL_SPI_IRQHandler+0x346>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d022      	beq.n	8011cce <HAL_SPI_IRQHandler+0x396>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c8e:	4a12      	ldr	r2, [pc, #72]	; (8011cd8 <HAL_SPI_IRQHandler+0x3a0>)
 8011c90:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7f6 fea5 	bl	80089e8 <HAL_DMA_Abort_IT>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d014      	beq.n	8011cce <HAL_SPI_IRQHandler+0x396>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011cb4:	e00b      	b.n	8011cce <HAL_SPI_IRQHandler+0x396>
        hspi->State = HAL_SPI_STATE_READY;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2201      	movs	r2, #1
 8011cba:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 f82a 	bl	8011d18 <HAL_SPI_ErrorCallback>
    return;
 8011cc4:	e003      	b.n	8011cce <HAL_SPI_IRQHandler+0x396>
    return;
 8011cc6:	bf00      	nop
 8011cc8:	e002      	b.n	8011cd0 <HAL_SPI_IRQHandler+0x398>
    return;
 8011cca:	bf00      	nop
 8011ccc:	e000      	b.n	8011cd0 <HAL_SPI_IRQHandler+0x398>
    return;
 8011cce:	bf00      	nop
  }
}
 8011cd0:	3728      	adds	r7, #40	; 0x28
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	08011d49 	.word	0x08011d49

08011cdc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8011ce4:	bf00      	nop
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011cf8:	bf00      	nop
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011d0c:	bf00      	nop
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011d20:	bf00      	nop
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b083      	sub	sp, #12
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011d3a:	b2db      	uxtb	r3, r3
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	370c      	adds	r7, #12
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b084      	sub	sp, #16
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2200      	movs	r2, #0
 8011d62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011d6e:	68f8      	ldr	r0, [r7, #12]
 8011d70:	f7ff ffd2 	bl	8011d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011d74:	bf00      	nop
 8011d76:	3710      	adds	r7, #16
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b085      	sub	sp, #20
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	695b      	ldr	r3, [r3, #20]
 8011d8a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	699a      	ldr	r2, [r3, #24]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f042 0208 	orr.w	r2, r2, #8
 8011d9a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	699a      	ldr	r2, [r3, #24]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f042 0210 	orr.w	r2, r2, #16
 8011daa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	f022 0201 	bic.w	r2, r2, #1
 8011dba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	691b      	ldr	r3, [r3, #16]
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	6812      	ldr	r2, [r2, #0]
 8011dc6:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8011dca:	f023 0303 	bic.w	r3, r3, #3
 8011dce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	689a      	ldr	r2, [r3, #8]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011dde:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	2b04      	cmp	r3, #4
 8011dea:	d014      	beq.n	8011e16 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	f003 0320 	and.w	r3, r3, #32
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00f      	beq.n	8011e16 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	699a      	ldr	r2, [r3, #24]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f042 0220 	orr.w	r2, r2, #32
 8011e14:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	2b03      	cmp	r3, #3
 8011e20:	d014      	beq.n	8011e4c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00f      	beq.n	8011e4c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e32:	f043 0204 	orr.w	r2, r3, #4
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	699a      	ldr	r2, [r3, #24]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e4a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d00f      	beq.n	8011e76 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e5c:	f043 0201 	orr.w	r2, r3, #1
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	699a      	ldr	r2, [r3, #24]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011e74:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00f      	beq.n	8011ea0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e86:	f043 0208 	orr.w	r2, r3, #8
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	699a      	ldr	r2, [r3, #24]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011e9e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8011eb0:	bf00      	nop
 8011eb2:	3714      	adds	r7, #20
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	60f8      	str	r0, [r7, #12]
 8011ec4:	60b9      	str	r1, [r7, #8]
 8011ec6:	603b      	str	r3, [r7, #0]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011ecc:	e010      	b.n	8011ef0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011ece:	f7f5 fb85 	bl	80075dc <HAL_GetTick>
 8011ed2:	4602      	mov	r2, r0
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	1ad3      	subs	r3, r2, r3
 8011ed8:	69ba      	ldr	r2, [r7, #24]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d803      	bhi.n	8011ee6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee4:	d102      	bne.n	8011eec <SPI_WaitOnFlagUntilTimeout+0x30>
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011eec:	2303      	movs	r3, #3
 8011eee:	e00f      	b.n	8011f10 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	695a      	ldr	r2, [r3, #20]
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	4013      	ands	r3, r2
 8011efa:	68ba      	ldr	r2, [r7, #8]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	bf0c      	ite	eq
 8011f00:	2301      	moveq	r3, #1
 8011f02:	2300      	movne	r3, #0
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	461a      	mov	r2, r3
 8011f08:	79fb      	ldrb	r3, [r7, #7]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d0df      	beq.n	8011ece <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011f0e:	2300      	movs	r3, #0
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3710      	adds	r7, #16
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f24:	095b      	lsrs	r3, r3, #5
 8011f26:	3301      	adds	r3, #1
 8011f28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	3301      	adds	r3, #1
 8011f30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	3307      	adds	r3, #7
 8011f36:	08db      	lsrs	r3, r3, #3
 8011f38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	68fa      	ldr	r2, [r7, #12]
 8011f3e:	fb02 f303 	mul.w	r3, r2, r3
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3714      	adds	r7, #20
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr

08011f4e <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 8011f4e:	b480      	push	{r7}
 8011f50:	b083      	sub	sp, #12
 8011f52:	af00      	add	r7, sp, #0
 8011f54:	6078      	str	r0, [r7, #4]
 8011f56:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d12e      	bne.n	8011fc2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d101      	bne.n	8011f72 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8011f6e:	2302      	movs	r3, #2
 8011f70:	e028      	b.n	8011fc4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2201      	movs	r2, #1
 8011f76:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2202      	movs	r2, #2
 8011f7e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f022 0201 	bic.w	r2, r2, #1
 8011f90:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8011f9e:	ea42 0103 	orr.w	r1, r2, r3
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	689a      	ldr	r2, [r3, #8]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	430a      	orrs	r2, r1
 8011fac:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	e000      	b.n	8011fc4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8011fc2:	2301      	movs	r3, #1
  }
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e049      	b.n	8012076 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d106      	bne.n	8011ffc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7f1 fa64 	bl	80034c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2202      	movs	r2, #2
 8012000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	3304      	adds	r3, #4
 801200c:	4619      	mov	r1, r3
 801200e:	4610      	mov	r0, r2
 8012010:	f000 f8d2 	bl	80121b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2201      	movs	r2, #1
 8012018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2201      	movs	r2, #1
 8012020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2201      	movs	r2, #1
 8012028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2201      	movs	r2, #1
 8012030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2201      	movs	r2, #1
 8012038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2201      	movs	r2, #1
 8012040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2201      	movs	r2, #1
 8012048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2201      	movs	r2, #1
 8012050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2201      	movs	r2, #1
 8012058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2201      	movs	r2, #1
 8012060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2201      	movs	r2, #1
 8012068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2201      	movs	r2, #1
 8012070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012074:	2300      	movs	r3, #0
}
 8012076:	4618      	mov	r0, r3
 8012078:	3708      	adds	r7, #8
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}

0801207e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801207e:	b580      	push	{r7, lr}
 8012080:	b086      	sub	sp, #24
 8012082:	af00      	add	r7, sp, #0
 8012084:	60f8      	str	r0, [r7, #12]
 8012086:	60b9      	str	r1, [r7, #8]
 8012088:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801208a:	2300      	movs	r3, #0
 801208c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012094:	2b01      	cmp	r3, #1
 8012096:	d101      	bne.n	801209c <HAL_TIM_IC_ConfigChannel+0x1e>
 8012098:	2302      	movs	r3, #2
 801209a:	e088      	b.n	80121ae <HAL_TIM_IC_ConfigChannel+0x130>
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2201      	movs	r2, #1
 80120a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d11b      	bne.n	80120e2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	6819      	ldr	r1, [r3, #0]
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	685a      	ldr	r2, [r3, #4]
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	68db      	ldr	r3, [r3, #12]
 80120ba:	f000 f977 	bl	80123ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	699a      	ldr	r2, [r3, #24]
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f022 020c 	bic.w	r2, r2, #12
 80120cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	6999      	ldr	r1, [r3, #24]
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	689a      	ldr	r2, [r3, #8]
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	430a      	orrs	r2, r1
 80120de:	619a      	str	r2, [r3, #24]
 80120e0:	e060      	b.n	80121a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2b04      	cmp	r3, #4
 80120e6:	d11c      	bne.n	8012122 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	6818      	ldr	r0, [r3, #0]
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	6819      	ldr	r1, [r3, #0]
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	685a      	ldr	r2, [r3, #4]
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	f000 f9ee 	bl	80124d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	699a      	ldr	r2, [r3, #24]
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801210a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	6999      	ldr	r1, [r3, #24]
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	021a      	lsls	r2, r3, #8
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	430a      	orrs	r2, r1
 801211e:	619a      	str	r2, [r3, #24]
 8012120:	e040      	b.n	80121a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b08      	cmp	r3, #8
 8012126:	d11b      	bne.n	8012160 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	6818      	ldr	r0, [r3, #0]
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	6819      	ldr	r1, [r3, #0]
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	685a      	ldr	r2, [r3, #4]
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	f000 fa0b 	bl	8012552 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	69da      	ldr	r2, [r3, #28]
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f022 020c 	bic.w	r2, r2, #12
 801214a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	69d9      	ldr	r1, [r3, #28]
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	689a      	ldr	r2, [r3, #8]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	430a      	orrs	r2, r1
 801215c:	61da      	str	r2, [r3, #28]
 801215e:	e021      	b.n	80121a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b0c      	cmp	r3, #12
 8012164:	d11c      	bne.n	80121a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	6818      	ldr	r0, [r3, #0]
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	6819      	ldr	r1, [r3, #0]
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	685a      	ldr	r2, [r3, #4]
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	68db      	ldr	r3, [r3, #12]
 8012176:	f000 fa28 	bl	80125ca <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	69da      	ldr	r2, [r3, #28]
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8012188:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	69d9      	ldr	r1, [r3, #28]
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	689b      	ldr	r3, [r3, #8]
 8012194:	021a      	lsls	r2, r3, #8
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	430a      	orrs	r2, r1
 801219c:	61da      	str	r2, [r3, #28]
 801219e:	e001      	b.n	80121a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80121a0:	2301      	movs	r3, #1
 80121a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2200      	movs	r2, #0
 80121a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80121ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3718      	adds	r7, #24
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
	...

080121b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	4a68      	ldr	r2, [pc, #416]	; (801236c <TIM_Base_SetConfig+0x1b4>)
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d02b      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	4a67      	ldr	r2, [pc, #412]	; (8012370 <TIM_Base_SetConfig+0x1b8>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d027      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121de:	d023      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80121e6:	d01f      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	4a62      	ldr	r2, [pc, #392]	; (8012374 <TIM_Base_SetConfig+0x1bc>)
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d01b      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	4a61      	ldr	r2, [pc, #388]	; (8012378 <TIM_Base_SetConfig+0x1c0>)
 80121f4:	4293      	cmp	r3, r2
 80121f6:	d017      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	4a60      	ldr	r2, [pc, #384]	; (801237c <TIM_Base_SetConfig+0x1c4>)
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d013      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	4a5f      	ldr	r2, [pc, #380]	; (8012380 <TIM_Base_SetConfig+0x1c8>)
 8012204:	4293      	cmp	r3, r2
 8012206:	d00f      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	4a5e      	ldr	r2, [pc, #376]	; (8012384 <TIM_Base_SetConfig+0x1cc>)
 801220c:	4293      	cmp	r3, r2
 801220e:	d00b      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	4a5d      	ldr	r2, [pc, #372]	; (8012388 <TIM_Base_SetConfig+0x1d0>)
 8012214:	4293      	cmp	r3, r2
 8012216:	d007      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	4a5c      	ldr	r2, [pc, #368]	; (801238c <TIM_Base_SetConfig+0x1d4>)
 801221c:	4293      	cmp	r3, r2
 801221e:	d003      	beq.n	8012228 <TIM_Base_SetConfig+0x70>
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	4a5b      	ldr	r2, [pc, #364]	; (8012390 <TIM_Base_SetConfig+0x1d8>)
 8012224:	4293      	cmp	r3, r2
 8012226:	d108      	bne.n	801223a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801222e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	4313      	orrs	r3, r2
 8012238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	4a4b      	ldr	r2, [pc, #300]	; (801236c <TIM_Base_SetConfig+0x1b4>)
 801223e:	4293      	cmp	r3, r2
 8012240:	d043      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	4a4a      	ldr	r2, [pc, #296]	; (8012370 <TIM_Base_SetConfig+0x1b8>)
 8012246:	4293      	cmp	r3, r2
 8012248:	d03f      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012250:	d03b      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012258:	d037      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	4a45      	ldr	r2, [pc, #276]	; (8012374 <TIM_Base_SetConfig+0x1bc>)
 801225e:	4293      	cmp	r3, r2
 8012260:	d033      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	4a44      	ldr	r2, [pc, #272]	; (8012378 <TIM_Base_SetConfig+0x1c0>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d02f      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4a43      	ldr	r2, [pc, #268]	; (801237c <TIM_Base_SetConfig+0x1c4>)
 801226e:	4293      	cmp	r3, r2
 8012270:	d02b      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	4a42      	ldr	r2, [pc, #264]	; (8012380 <TIM_Base_SetConfig+0x1c8>)
 8012276:	4293      	cmp	r3, r2
 8012278:	d027      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4a41      	ldr	r2, [pc, #260]	; (8012384 <TIM_Base_SetConfig+0x1cc>)
 801227e:	4293      	cmp	r3, r2
 8012280:	d023      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	4a40      	ldr	r2, [pc, #256]	; (8012388 <TIM_Base_SetConfig+0x1d0>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d01f      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	4a3f      	ldr	r2, [pc, #252]	; (801238c <TIM_Base_SetConfig+0x1d4>)
 801228e:	4293      	cmp	r3, r2
 8012290:	d01b      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	4a3e      	ldr	r2, [pc, #248]	; (8012390 <TIM_Base_SetConfig+0x1d8>)
 8012296:	4293      	cmp	r3, r2
 8012298:	d017      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4a3d      	ldr	r2, [pc, #244]	; (8012394 <TIM_Base_SetConfig+0x1dc>)
 801229e:	4293      	cmp	r3, r2
 80122a0:	d013      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4a3c      	ldr	r2, [pc, #240]	; (8012398 <TIM_Base_SetConfig+0x1e0>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d00f      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4a3b      	ldr	r2, [pc, #236]	; (801239c <TIM_Base_SetConfig+0x1e4>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d00b      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4a3a      	ldr	r2, [pc, #232]	; (80123a0 <TIM_Base_SetConfig+0x1e8>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d007      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4a39      	ldr	r2, [pc, #228]	; (80123a4 <TIM_Base_SetConfig+0x1ec>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d003      	beq.n	80122ca <TIM_Base_SetConfig+0x112>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	4a38      	ldr	r2, [pc, #224]	; (80123a8 <TIM_Base_SetConfig+0x1f0>)
 80122c6:	4293      	cmp	r3, r2
 80122c8:	d108      	bne.n	80122dc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	68db      	ldr	r3, [r3, #12]
 80122d6:	68fa      	ldr	r2, [r7, #12]
 80122d8:	4313      	orrs	r3, r2
 80122da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	695b      	ldr	r3, [r3, #20]
 80122e6:	4313      	orrs	r3, r2
 80122e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	68fa      	ldr	r2, [r7, #12]
 80122ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	689a      	ldr	r2, [r3, #8]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	4a1a      	ldr	r2, [pc, #104]	; (801236c <TIM_Base_SetConfig+0x1b4>)
 8012304:	4293      	cmp	r3, r2
 8012306:	d023      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	4a19      	ldr	r2, [pc, #100]	; (8012370 <TIM_Base_SetConfig+0x1b8>)
 801230c:	4293      	cmp	r3, r2
 801230e:	d01f      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	4a1e      	ldr	r2, [pc, #120]	; (801238c <TIM_Base_SetConfig+0x1d4>)
 8012314:	4293      	cmp	r3, r2
 8012316:	d01b      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	4a1d      	ldr	r2, [pc, #116]	; (8012390 <TIM_Base_SetConfig+0x1d8>)
 801231c:	4293      	cmp	r3, r2
 801231e:	d017      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	4a1c      	ldr	r2, [pc, #112]	; (8012394 <TIM_Base_SetConfig+0x1dc>)
 8012324:	4293      	cmp	r3, r2
 8012326:	d013      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4a1b      	ldr	r2, [pc, #108]	; (8012398 <TIM_Base_SetConfig+0x1e0>)
 801232c:	4293      	cmp	r3, r2
 801232e:	d00f      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	4a1a      	ldr	r2, [pc, #104]	; (801239c <TIM_Base_SetConfig+0x1e4>)
 8012334:	4293      	cmp	r3, r2
 8012336:	d00b      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	4a19      	ldr	r2, [pc, #100]	; (80123a0 <TIM_Base_SetConfig+0x1e8>)
 801233c:	4293      	cmp	r3, r2
 801233e:	d007      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	4a18      	ldr	r2, [pc, #96]	; (80123a4 <TIM_Base_SetConfig+0x1ec>)
 8012344:	4293      	cmp	r3, r2
 8012346:	d003      	beq.n	8012350 <TIM_Base_SetConfig+0x198>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4a17      	ldr	r2, [pc, #92]	; (80123a8 <TIM_Base_SetConfig+0x1f0>)
 801234c:	4293      	cmp	r3, r2
 801234e:	d103      	bne.n	8012358 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	691a      	ldr	r2, [r3, #16]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2201      	movs	r2, #1
 801235c:	615a      	str	r2, [r3, #20]
}
 801235e:	bf00      	nop
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	40012c00 	.word	0x40012c00
 8012370:	50012c00 	.word	0x50012c00
 8012374:	40000400 	.word	0x40000400
 8012378:	50000400 	.word	0x50000400
 801237c:	40000800 	.word	0x40000800
 8012380:	50000800 	.word	0x50000800
 8012384:	40000c00 	.word	0x40000c00
 8012388:	50000c00 	.word	0x50000c00
 801238c:	40013400 	.word	0x40013400
 8012390:	50013400 	.word	0x50013400
 8012394:	40014000 	.word	0x40014000
 8012398:	50014000 	.word	0x50014000
 801239c:	40014400 	.word	0x40014400
 80123a0:	50014400 	.word	0x50014400
 80123a4:	40014800 	.word	0x40014800
 80123a8:	50014800 	.word	0x50014800

080123ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80123ac:	b480      	push	{r7}
 80123ae:	b087      	sub	sp, #28
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6a1b      	ldr	r3, [r3, #32]
 80123be:	f023 0201 	bic.w	r2, r3, #1
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	699b      	ldr	r3, [r3, #24]
 80123ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	6a1b      	ldr	r3, [r3, #32]
 80123d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	4a34      	ldr	r2, [pc, #208]	; (80124a8 <TIM_TI1_SetConfig+0xfc>)
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d033      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	4a33      	ldr	r2, [pc, #204]	; (80124ac <TIM_TI1_SetConfig+0x100>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	d02f      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123e8:	d02b      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80123f0:	d027      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	4a2e      	ldr	r2, [pc, #184]	; (80124b0 <TIM_TI1_SetConfig+0x104>)
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d023      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	4a2d      	ldr	r2, [pc, #180]	; (80124b4 <TIM_TI1_SetConfig+0x108>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d01f      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	4a2c      	ldr	r2, [pc, #176]	; (80124b8 <TIM_TI1_SetConfig+0x10c>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d01b      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	4a2b      	ldr	r2, [pc, #172]	; (80124bc <TIM_TI1_SetConfig+0x110>)
 801240e:	4293      	cmp	r3, r2
 8012410:	d017      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	4a2a      	ldr	r2, [pc, #168]	; (80124c0 <TIM_TI1_SetConfig+0x114>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d013      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	4a29      	ldr	r2, [pc, #164]	; (80124c4 <TIM_TI1_SetConfig+0x118>)
 801241e:	4293      	cmp	r3, r2
 8012420:	d00f      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	4a28      	ldr	r2, [pc, #160]	; (80124c8 <TIM_TI1_SetConfig+0x11c>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d00b      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	4a27      	ldr	r2, [pc, #156]	; (80124cc <TIM_TI1_SetConfig+0x120>)
 801242e:	4293      	cmp	r3, r2
 8012430:	d007      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	4a26      	ldr	r2, [pc, #152]	; (80124d0 <TIM_TI1_SetConfig+0x124>)
 8012436:	4293      	cmp	r3, r2
 8012438:	d003      	beq.n	8012442 <TIM_TI1_SetConfig+0x96>
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	4a25      	ldr	r2, [pc, #148]	; (80124d4 <TIM_TI1_SetConfig+0x128>)
 801243e:	4293      	cmp	r3, r2
 8012440:	d101      	bne.n	8012446 <TIM_TI1_SetConfig+0x9a>
 8012442:	2301      	movs	r3, #1
 8012444:	e000      	b.n	8012448 <TIM_TI1_SetConfig+0x9c>
 8012446:	2300      	movs	r3, #0
 8012448:	2b00      	cmp	r3, #0
 801244a:	d008      	beq.n	801245e <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	f023 0303 	bic.w	r3, r3, #3
 8012452:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8012454:	697a      	ldr	r2, [r7, #20]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	4313      	orrs	r3, r2
 801245a:	617b      	str	r3, [r7, #20]
 801245c:	e003      	b.n	8012466 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	f043 0301 	orr.w	r3, r3, #1
 8012464:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801246c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	011b      	lsls	r3, r3, #4
 8012472:	b2db      	uxtb	r3, r3
 8012474:	697a      	ldr	r2, [r7, #20]
 8012476:	4313      	orrs	r3, r2
 8012478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	f023 030a 	bic.w	r3, r3, #10
 8012480:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	f003 030a 	and.w	r3, r3, #10
 8012488:	693a      	ldr	r2, [r7, #16]
 801248a:	4313      	orrs	r3, r2
 801248c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	697a      	ldr	r2, [r7, #20]
 8012492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	693a      	ldr	r2, [r7, #16]
 8012498:	621a      	str	r2, [r3, #32]
}
 801249a:	bf00      	nop
 801249c:	371c      	adds	r7, #28
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	40012c00 	.word	0x40012c00
 80124ac:	50012c00 	.word	0x50012c00
 80124b0:	40000400 	.word	0x40000400
 80124b4:	50000400 	.word	0x50000400
 80124b8:	40000800 	.word	0x40000800
 80124bc:	50000800 	.word	0x50000800
 80124c0:	40000c00 	.word	0x40000c00
 80124c4:	50000c00 	.word	0x50000c00
 80124c8:	40013400 	.word	0x40013400
 80124cc:	50013400 	.word	0x50013400
 80124d0:	40014000 	.word	0x40014000
 80124d4:	50014000 	.word	0x50014000

080124d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80124d8:	b480      	push	{r7}
 80124da:	b087      	sub	sp, #28
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
 80124e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	6a1b      	ldr	r3, [r3, #32]
 80124ea:	f023 0210 	bic.w	r2, r3, #16
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	699b      	ldr	r3, [r3, #24]
 80124f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	6a1b      	ldr	r3, [r3, #32]
 80124fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	021b      	lsls	r3, r3, #8
 801250a:	697a      	ldr	r2, [r7, #20]
 801250c:	4313      	orrs	r3, r2
 801250e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012516:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	031b      	lsls	r3, r3, #12
 801251c:	b29b      	uxth	r3, r3
 801251e:	697a      	ldr	r2, [r7, #20]
 8012520:	4313      	orrs	r3, r2
 8012522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801252a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	011b      	lsls	r3, r3, #4
 8012530:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012534:	693a      	ldr	r2, [r7, #16]
 8012536:	4313      	orrs	r3, r2
 8012538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	697a      	ldr	r2, [r7, #20]
 801253e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	693a      	ldr	r2, [r7, #16]
 8012544:	621a      	str	r2, [r3, #32]
}
 8012546:	bf00      	nop
 8012548:	371c      	adds	r7, #28
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012552:	b480      	push	{r7}
 8012554:	b087      	sub	sp, #28
 8012556:	af00      	add	r7, sp, #0
 8012558:	60f8      	str	r0, [r7, #12]
 801255a:	60b9      	str	r1, [r7, #8]
 801255c:	607a      	str	r2, [r7, #4]
 801255e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6a1b      	ldr	r3, [r3, #32]
 8012564:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	69db      	ldr	r3, [r3, #28]
 8012570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	6a1b      	ldr	r3, [r3, #32]
 8012576:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	f023 0303 	bic.w	r3, r3, #3
 801257e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8012580:	697a      	ldr	r2, [r7, #20]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4313      	orrs	r3, r2
 8012586:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801258e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	011b      	lsls	r3, r3, #4
 8012594:	b2db      	uxtb	r3, r3
 8012596:	697a      	ldr	r2, [r7, #20]
 8012598:	4313      	orrs	r3, r2
 801259a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80125a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	021b      	lsls	r3, r3, #8
 80125a8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80125ac:	693a      	ldr	r2, [r7, #16]
 80125ae:	4313      	orrs	r3, r2
 80125b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	697a      	ldr	r2, [r7, #20]
 80125b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	693a      	ldr	r2, [r7, #16]
 80125bc:	621a      	str	r2, [r3, #32]
}
 80125be:	bf00      	nop
 80125c0:	371c      	adds	r7, #28
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr

080125ca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80125ca:	b480      	push	{r7}
 80125cc:	b087      	sub	sp, #28
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	60f8      	str	r0, [r7, #12]
 80125d2:	60b9      	str	r1, [r7, #8]
 80125d4:	607a      	str	r2, [r7, #4]
 80125d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	6a1b      	ldr	r3, [r3, #32]
 80125dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	69db      	ldr	r3, [r3, #28]
 80125e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	6a1b      	ldr	r3, [r3, #32]
 80125ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	021b      	lsls	r3, r3, #8
 80125fc:	697a      	ldr	r2, [r7, #20]
 80125fe:	4313      	orrs	r3, r2
 8012600:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012608:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	031b      	lsls	r3, r3, #12
 801260e:	b29b      	uxth	r3, r3
 8012610:	697a      	ldr	r2, [r7, #20]
 8012612:	4313      	orrs	r3, r2
 8012614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801261c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	031b      	lsls	r3, r3, #12
 8012622:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012626:	693a      	ldr	r2, [r7, #16]
 8012628:	4313      	orrs	r3, r2
 801262a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	697a      	ldr	r2, [r7, #20]
 8012630:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	693a      	ldr	r2, [r7, #16]
 8012636:	621a      	str	r2, [r3, #32]
}
 8012638:	bf00      	nop
 801263a:	371c      	adds	r7, #28
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012654:	2b01      	cmp	r3, #1
 8012656:	d101      	bne.n	801265c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012658:	2302      	movs	r3, #2
 801265a:	e097      	b.n	801278c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2201      	movs	r2, #1
 8012660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2202      	movs	r2, #2
 8012668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	689b      	ldr	r3, [r3, #8]
 801267a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4a45      	ldr	r2, [pc, #276]	; (8012798 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8012682:	4293      	cmp	r3, r2
 8012684:	d00e      	beq.n	80126a4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4a44      	ldr	r2, [pc, #272]	; (801279c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801268c:	4293      	cmp	r3, r2
 801268e:	d009      	beq.n	80126a4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	4a42      	ldr	r2, [pc, #264]	; (80127a0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8012696:	4293      	cmp	r3, r2
 8012698:	d004      	beq.n	80126a4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	4a41      	ldr	r2, [pc, #260]	; (80127a4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d108      	bne.n	80126b6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80126aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	68fa      	ldr	r2, [r7, #12]
 80126b2:	4313      	orrs	r3, r2
 80126b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80126bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	4313      	orrs	r3, r2
 80126ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4a2f      	ldr	r2, [pc, #188]	; (8012798 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80126da:	4293      	cmp	r3, r2
 80126dc:	d040      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	4a2e      	ldr	r2, [pc, #184]	; (801279c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d03b      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80126f0:	d036      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80126fa:	d031      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	4a29      	ldr	r2, [pc, #164]	; (80127a8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8012702:	4293      	cmp	r3, r2
 8012704:	d02c      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4a28      	ldr	r2, [pc, #160]	; (80127ac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 801270c:	4293      	cmp	r3, r2
 801270e:	d027      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	4a26      	ldr	r2, [pc, #152]	; (80127b0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8012716:	4293      	cmp	r3, r2
 8012718:	d022      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4a25      	ldr	r2, [pc, #148]	; (80127b4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8012720:	4293      	cmp	r3, r2
 8012722:	d01d      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	4a23      	ldr	r2, [pc, #140]	; (80127b8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 801272a:	4293      	cmp	r3, r2
 801272c:	d018      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	4a22      	ldr	r2, [pc, #136]	; (80127bc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8012734:	4293      	cmp	r3, r2
 8012736:	d013      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	4a18      	ldr	r2, [pc, #96]	; (80127a0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801273e:	4293      	cmp	r3, r2
 8012740:	d00e      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	4a17      	ldr	r2, [pc, #92]	; (80127a4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8012748:	4293      	cmp	r3, r2
 801274a:	d009      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	4a1b      	ldr	r2, [pc, #108]	; (80127c0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8012752:	4293      	cmp	r3, r2
 8012754:	d004      	beq.n	8012760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4a1a      	ldr	r2, [pc, #104]	; (80127c4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d10c      	bne.n	801277a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	689b      	ldr	r3, [r3, #8]
 801276c:	68ba      	ldr	r2, [r7, #8]
 801276e:	4313      	orrs	r3, r2
 8012770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2201      	movs	r2, #1
 801277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801278a:	2300      	movs	r3, #0
}
 801278c:	4618      	mov	r0, r3
 801278e:	3714      	adds	r7, #20
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr
 8012798:	40012c00 	.word	0x40012c00
 801279c:	50012c00 	.word	0x50012c00
 80127a0:	40013400 	.word	0x40013400
 80127a4:	50013400 	.word	0x50013400
 80127a8:	40000400 	.word	0x40000400
 80127ac:	50000400 	.word	0x50000400
 80127b0:	40000800 	.word	0x40000800
 80127b4:	50000800 	.word	0x50000800
 80127b8:	40000c00 	.word	0x40000c00
 80127bc:	50000c00 	.word	0x50000c00
 80127c0:	40014000 	.word	0x40014000
 80127c4:	50014000 	.word	0x50014000

080127c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d101      	bne.n	80127da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80127d6:	2301      	movs	r3, #1
 80127d8:	e042      	b.n	8012860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d106      	bne.n	80127f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7f0 feb3 	bl	8003558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2224      	movs	r2, #36	; 0x24
 80127f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f022 0201 	bic.w	r2, r2, #1
 8012808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 f8d2 	bl	80129b4 <UART_SetConfig>
 8012810:	4603      	mov	r3, r0
 8012812:	2b01      	cmp	r3, #1
 8012814:	d101      	bne.n	801281a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012816:	2301      	movs	r3, #1
 8012818:	e022      	b.n	8012860 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801281e:	2b00      	cmp	r3, #0
 8012820:	d002      	beq.n	8012828 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f000 fa68 	bl	8012cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	685a      	ldr	r2, [r3, #4]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	689a      	ldr	r2, [r3, #8]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f042 0201 	orr.w	r2, r2, #1
 8012856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f000 faef 	bl	8012e3c <UART_CheckIdleState>
 801285e:	4603      	mov	r3, r0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b08a      	sub	sp, #40	; 0x28
 801286c:	af02      	add	r7, sp, #8
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	603b      	str	r3, [r7, #0]
 8012874:	4613      	mov	r3, r2
 8012876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801287e:	2b20      	cmp	r3, #32
 8012880:	f040 8092 	bne.w	80129a8 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d002      	beq.n	8012890 <HAL_UART_Transmit+0x28>
 801288a:	88fb      	ldrh	r3, [r7, #6]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d101      	bne.n	8012894 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012890:	2301      	movs	r3, #1
 8012892:	e08a      	b.n	80129aa <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801289a:	2b01      	cmp	r3, #1
 801289c:	d101      	bne.n	80128a2 <HAL_UART_Transmit+0x3a>
 801289e:	2302      	movs	r3, #2
 80128a0:	e083      	b.n	80129aa <HAL_UART_Transmit+0x142>
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2201      	movs	r2, #1
 80128a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128b4:	2b80      	cmp	r3, #128	; 0x80
 80128b6:	d107      	bne.n	80128c8 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	689a      	ldr	r2, [r3, #8]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80128c6:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	2200      	movs	r2, #0
 80128cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2221      	movs	r2, #33	; 0x21
 80128d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80128d8:	f7f4 fe80 	bl	80075dc <HAL_GetTick>
 80128dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	88fa      	ldrh	r2, [r7, #6]
 80128e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	88fa      	ldrh	r2, [r7, #6]
 80128ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	689b      	ldr	r3, [r3, #8]
 80128f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80128f6:	d108      	bne.n	801290a <HAL_UART_Transmit+0xa2>
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	691b      	ldr	r3, [r3, #16]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d104      	bne.n	801290a <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8012900:	2300      	movs	r3, #0
 8012902:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	61bb      	str	r3, [r7, #24]
 8012908:	e003      	b.n	8012912 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801290e:	2300      	movs	r3, #0
 8012910:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2200      	movs	r2, #0
 8012916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801291a:	e02c      	b.n	8012976 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	9300      	str	r3, [sp, #0]
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	2200      	movs	r2, #0
 8012924:	2180      	movs	r1, #128	; 0x80
 8012926:	68f8      	ldr	r0, [r7, #12]
 8012928:	f000 fad3 	bl	8012ed2 <UART_WaitOnFlagUntilTimeout>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8012932:	2303      	movs	r3, #3
 8012934:	e039      	b.n	80129aa <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d10b      	bne.n	8012954 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	881b      	ldrh	r3, [r3, #0]
 8012940:	461a      	mov	r2, r3
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801294a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	3302      	adds	r3, #2
 8012950:	61bb      	str	r3, [r7, #24]
 8012952:	e007      	b.n	8012964 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	781a      	ldrb	r2, [r3, #0]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801295e:	69fb      	ldr	r3, [r7, #28]
 8012960:	3301      	adds	r3, #1
 8012962:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801296a:	b29b      	uxth	r3, r3
 801296c:	3b01      	subs	r3, #1
 801296e:	b29a      	uxth	r2, r3
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801297c:	b29b      	uxth	r3, r3
 801297e:	2b00      	cmp	r3, #0
 8012980:	d1cc      	bne.n	801291c <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	2200      	movs	r2, #0
 801298a:	2140      	movs	r1, #64	; 0x40
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f000 faa0 	bl	8012ed2 <UART_WaitOnFlagUntilTimeout>
 8012992:	4603      	mov	r3, r0
 8012994:	2b00      	cmp	r3, #0
 8012996:	d001      	beq.n	801299c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8012998:	2303      	movs	r3, #3
 801299a:	e006      	b.n	80129aa <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	2220      	movs	r2, #32
 80129a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80129a4:	2300      	movs	r3, #0
 80129a6:	e000      	b.n	80129aa <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 80129a8:	2302      	movs	r3, #2
  }
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3720      	adds	r7, #32
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
	...

080129b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80129b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80129b8:	b094      	sub	sp, #80	; 0x50
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80129be:	2300      	movs	r3, #0
 80129c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80129c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c6:	681a      	ldr	r2, [r3, #0]
 80129c8:	4b7e      	ldr	r3, [pc, #504]	; (8012bc4 <UART_SetConfig+0x210>)
 80129ca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	689a      	ldr	r2, [r3, #8]
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	691b      	ldr	r3, [r3, #16]
 80129d4:	431a      	orrs	r2, r3
 80129d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d8:	695b      	ldr	r3, [r3, #20]
 80129da:	431a      	orrs	r2, r3
 80129dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129de:	69db      	ldr	r3, [r3, #28]
 80129e0:	4313      	orrs	r3, r2
 80129e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80129e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4977      	ldr	r1, [pc, #476]	; (8012bc8 <UART_SetConfig+0x214>)
 80129ec:	4019      	ands	r1, r3
 80129ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129f4:	430b      	orrs	r3, r1
 80129f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80129f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	68d9      	ldr	r1, [r3, #12]
 8012a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	ea40 0301 	orr.w	r3, r0, r1
 8012a0e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a12:	699b      	ldr	r3, [r3, #24]
 8012a14:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	4b6a      	ldr	r3, [pc, #424]	; (8012bc4 <UART_SetConfig+0x210>)
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d009      	beq.n	8012a34 <UART_SetConfig+0x80>
 8012a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a22:	681a      	ldr	r2, [r3, #0]
 8012a24:	4b69      	ldr	r3, [pc, #420]	; (8012bcc <UART_SetConfig+0x218>)
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d004      	beq.n	8012a34 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2c:	6a1a      	ldr	r2, [r3, #32]
 8012a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a30:	4313      	orrs	r3, r2
 8012a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	689b      	ldr	r3, [r3, #8]
 8012a3a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8012a3e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8012a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a48:	430b      	orrs	r3, r1
 8012a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a52:	f023 000f 	bic.w	r0, r3, #15
 8012a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	ea40 0301 	orr.w	r3, r0, r1
 8012a62:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a66:	681a      	ldr	r2, [r3, #0]
 8012a68:	4b59      	ldr	r3, [pc, #356]	; (8012bd0 <UART_SetConfig+0x21c>)
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d102      	bne.n	8012a74 <UART_SetConfig+0xc0>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a72:	e029      	b.n	8012ac8 <UART_SetConfig+0x114>
 8012a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a76:	681a      	ldr	r2, [r3, #0]
 8012a78:	4b56      	ldr	r3, [pc, #344]	; (8012bd4 <UART_SetConfig+0x220>)
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d102      	bne.n	8012a84 <UART_SetConfig+0xd0>
 8012a7e:	2302      	movs	r3, #2
 8012a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a82:	e021      	b.n	8012ac8 <UART_SetConfig+0x114>
 8012a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	4b53      	ldr	r3, [pc, #332]	; (8012bd8 <UART_SetConfig+0x224>)
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d102      	bne.n	8012a94 <UART_SetConfig+0xe0>
 8012a8e:	2304      	movs	r3, #4
 8012a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a92:	e019      	b.n	8012ac8 <UART_SetConfig+0x114>
 8012a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	4b50      	ldr	r3, [pc, #320]	; (8012bdc <UART_SetConfig+0x228>)
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d102      	bne.n	8012aa4 <UART_SetConfig+0xf0>
 8012a9e:	2308      	movs	r3, #8
 8012aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8012aa2:	e011      	b.n	8012ac8 <UART_SetConfig+0x114>
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	681a      	ldr	r2, [r3, #0]
 8012aa8:	4b4d      	ldr	r3, [pc, #308]	; (8012be0 <UART_SetConfig+0x22c>)
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d102      	bne.n	8012ab4 <UART_SetConfig+0x100>
 8012aae:	2310      	movs	r3, #16
 8012ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ab2:	e009      	b.n	8012ac8 <UART_SetConfig+0x114>
 8012ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	4b42      	ldr	r3, [pc, #264]	; (8012bc4 <UART_SetConfig+0x210>)
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d102      	bne.n	8012ac4 <UART_SetConfig+0x110>
 8012abe:	2320      	movs	r3, #32
 8012ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ac2:	e001      	b.n	8012ac8 <UART_SetConfig+0x114>
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	4b3d      	ldr	r3, [pc, #244]	; (8012bc4 <UART_SetConfig+0x210>)
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d005      	beq.n	8012ade <UART_SetConfig+0x12a>
 8012ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	4b3d      	ldr	r3, [pc, #244]	; (8012bcc <UART_SetConfig+0x218>)
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	f040 8085 	bne.w	8012be8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	623b      	str	r3, [r7, #32]
 8012ae4:	627a      	str	r2, [r7, #36]	; 0x24
 8012ae6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012aea:	f7fc f96d 	bl	800edc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8012aee:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8012af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	f000 80e8 	beq.w	8012cc8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afc:	4a39      	ldr	r2, [pc, #228]	; (8012be4 <UART_SetConfig+0x230>)
 8012afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b02:	461a      	mov	r2, r3
 8012b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b0a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0e:	685a      	ldr	r2, [r3, #4]
 8012b10:	4613      	mov	r3, r2
 8012b12:	005b      	lsls	r3, r3, #1
 8012b14:	4413      	add	r3, r2
 8012b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d305      	bcc.n	8012b28 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d903      	bls.n	8012b30 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012b2e:	e048      	b.n	8012bc2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b32:	2200      	movs	r2, #0
 8012b34:	61bb      	str	r3, [r7, #24]
 8012b36:	61fa      	str	r2, [r7, #28]
 8012b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b3c:	4a29      	ldr	r2, [pc, #164]	; (8012be4 <UART_SetConfig+0x230>)
 8012b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	2200      	movs	r2, #0
 8012b46:	613b      	str	r3, [r7, #16]
 8012b48:	617a      	str	r2, [r7, #20]
 8012b4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012b4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012b52:	f7ee f89d 	bl	8000c90 <__aeabi_uldivmod>
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	4610      	mov	r0, r2
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	f04f 0200 	mov.w	r2, #0
 8012b62:	f04f 0300 	mov.w	r3, #0
 8012b66:	020b      	lsls	r3, r1, #8
 8012b68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012b6c:	0202      	lsls	r2, r0, #8
 8012b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b70:	6849      	ldr	r1, [r1, #4]
 8012b72:	0849      	lsrs	r1, r1, #1
 8012b74:	2000      	movs	r0, #0
 8012b76:	460c      	mov	r4, r1
 8012b78:	4605      	mov	r5, r0
 8012b7a:	eb12 0804 	adds.w	r8, r2, r4
 8012b7e:	eb43 0905 	adc.w	r9, r3, r5
 8012b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	60bb      	str	r3, [r7, #8]
 8012b8a:	60fa      	str	r2, [r7, #12]
 8012b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012b90:	4640      	mov	r0, r8
 8012b92:	4649      	mov	r1, r9
 8012b94:	f7ee f87c 	bl	8000c90 <__aeabi_uldivmod>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	4613      	mov	r3, r2
 8012b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012ba6:	d308      	bcc.n	8012bba <UART_SetConfig+0x206>
 8012ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012bae:	d204      	bcs.n	8012bba <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8012bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bb6:	60da      	str	r2, [r3, #12]
 8012bb8:	e003      	b.n	8012bc2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8012bc0:	e082      	b.n	8012cc8 <UART_SetConfig+0x314>
 8012bc2:	e081      	b.n	8012cc8 <UART_SetConfig+0x314>
 8012bc4:	46002400 	.word	0x46002400
 8012bc8:	cfff69f3 	.word	0xcfff69f3
 8012bcc:	56002400 	.word	0x56002400
 8012bd0:	40013800 	.word	0x40013800
 8012bd4:	40004400 	.word	0x40004400
 8012bd8:	40004800 	.word	0x40004800
 8012bdc:	40004c00 	.word	0x40004c00
 8012be0:	40005000 	.word	0x40005000
 8012be4:	0801f708 	.word	0x0801f708
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bea:	69db      	ldr	r3, [r3, #28]
 8012bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012bf0:	d13c      	bne.n	8012c6c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	603b      	str	r3, [r7, #0]
 8012bf8:	607a      	str	r2, [r7, #4]
 8012bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012bfe:	f7fc f8e3 	bl	800edc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8012c02:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d05e      	beq.n	8012cc8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0e:	4a39      	ldr	r2, [pc, #228]	; (8012cf4 <UART_SetConfig+0x340>)
 8012c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c14:	461a      	mov	r2, r3
 8012c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c1c:	005a      	lsls	r2, r3, #1
 8012c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	085b      	lsrs	r3, r3, #1
 8012c24:	441a      	add	r2, r3
 8012c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c32:	2b0f      	cmp	r3, #15
 8012c34:	d916      	bls.n	8012c64 <UART_SetConfig+0x2b0>
 8012c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c3c:	d212      	bcs.n	8012c64 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	f023 030f 	bic.w	r3, r3, #15
 8012c46:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4a:	085b      	lsrs	r3, r3, #1
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	f003 0307 	and.w	r3, r3, #7
 8012c52:	b29a      	uxth	r2, r3
 8012c54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c56:	4313      	orrs	r3, r2
 8012c58:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8012c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c60:	60da      	str	r2, [r3, #12]
 8012c62:	e031      	b.n	8012cc8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8012c64:	2301      	movs	r3, #1
 8012c66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012c6a:	e02d      	b.n	8012cc8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c6e:	2200      	movs	r2, #0
 8012c70:	469a      	mov	sl, r3
 8012c72:	4693      	mov	fp, r2
 8012c74:	4650      	mov	r0, sl
 8012c76:	4659      	mov	r1, fp
 8012c78:	f7fc f8a6 	bl	800edc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8012c7c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8012c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d021      	beq.n	8012cc8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c88:	4a1a      	ldr	r2, [pc, #104]	; (8012cf4 <UART_SetConfig+0x340>)
 8012c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c8e:	461a      	mov	r2, r3
 8012c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c92:	fbb3 f2f2 	udiv	r2, r3, r2
 8012c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	085b      	lsrs	r3, r3, #1
 8012c9c:	441a      	add	r2, r3
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012caa:	2b0f      	cmp	r3, #15
 8012cac:	d909      	bls.n	8012cc2 <UART_SetConfig+0x30e>
 8012cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cb4:	d205      	bcs.n	8012cc2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	60da      	str	r2, [r3, #12]
 8012cc0:	e002      	b.n	8012cc8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cca:	2201      	movs	r2, #1
 8012ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cda:	2200      	movs	r2, #0
 8012cdc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8012cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012ce4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3750      	adds	r7, #80	; 0x50
 8012cec:	46bd      	mov	sp, r7
 8012cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012cf2:	bf00      	nop
 8012cf4:	0801f708 	.word	0x0801f708

08012cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d04:	f003 0301 	and.w	r3, r3, #1
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00a      	beq.n	8012d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	430a      	orrs	r2, r1
 8012d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d26:	f003 0302 	and.w	r3, r3, #2
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d00a      	beq.n	8012d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	430a      	orrs	r2, r1
 8012d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d48:	f003 0304 	and.w	r3, r3, #4
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d00a      	beq.n	8012d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	430a      	orrs	r2, r1
 8012d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d6a:	f003 0308 	and.w	r3, r3, #8
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d00a      	beq.n	8012d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	685b      	ldr	r3, [r3, #4]
 8012d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	430a      	orrs	r2, r1
 8012d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d8c:	f003 0310 	and.w	r3, r3, #16
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d00a      	beq.n	8012daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	689b      	ldr	r3, [r3, #8]
 8012d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	430a      	orrs	r2, r1
 8012da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dae:	f003 0320 	and.w	r3, r3, #32
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d00a      	beq.n	8012dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	689b      	ldr	r3, [r3, #8]
 8012dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	430a      	orrs	r2, r1
 8012dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d01a      	beq.n	8012e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	430a      	orrs	r2, r1
 8012dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012df6:	d10a      	bne.n	8012e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	430a      	orrs	r2, r1
 8012e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d00a      	beq.n	8012e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	430a      	orrs	r2, r1
 8012e2e:	605a      	str	r2, [r3, #4]
  }
}
 8012e30:	bf00      	nop
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr

08012e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af02      	add	r7, sp, #8
 8012e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012e4c:	f7f4 fbc6 	bl	80075dc <HAL_GetTick>
 8012e50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f003 0308 	and.w	r3, r3, #8
 8012e5c:	2b08      	cmp	r3, #8
 8012e5e:	d10e      	bne.n	8012e7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012e64:	9300      	str	r3, [sp, #0]
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 f82f 	bl	8012ed2 <UART_WaitOnFlagUntilTimeout>
 8012e74:	4603      	mov	r3, r0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d001      	beq.n	8012e7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e7a:	2303      	movs	r3, #3
 8012e7c:	e025      	b.n	8012eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	f003 0304 	and.w	r3, r3, #4
 8012e88:	2b04      	cmp	r3, #4
 8012e8a:	d10e      	bne.n	8012eaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012e90:	9300      	str	r3, [sp, #0]
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2200      	movs	r2, #0
 8012e96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f000 f819 	bl	8012ed2 <UART_WaitOnFlagUntilTimeout>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d001      	beq.n	8012eaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012ea6:	2303      	movs	r3, #3
 8012ea8:	e00f      	b.n	8012eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2220      	movs	r2, #32
 8012eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2220      	movs	r2, #32
 8012eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012ec8:	2300      	movs	r3, #0
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3710      	adds	r7, #16
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b09c      	sub	sp, #112	; 0x70
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	60f8      	str	r0, [r7, #12]
 8012eda:	60b9      	str	r1, [r7, #8]
 8012edc:	603b      	str	r3, [r7, #0]
 8012ede:	4613      	mov	r3, r2
 8012ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ee2:	e0a9      	b.n	8013038 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eea:	f000 80a5 	beq.w	8013038 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012eee:	f7f4 fb75 	bl	80075dc <HAL_GetTick>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	1ad3      	subs	r3, r2, r3
 8012ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d302      	bcc.n	8012f04 <UART_WaitOnFlagUntilTimeout+0x32>
 8012efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d140      	bne.n	8012f86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f0c:	e853 3f00 	ldrex	r3, [r3]
 8012f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012f18:	667b      	str	r3, [r7, #100]	; 0x64
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012f24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f2a:	e841 2300 	strex	r3, r2, [r1]
 8012f2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d1e6      	bne.n	8012f04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	3308      	adds	r3, #8
 8012f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f40:	e853 3f00 	ldrex	r3, [r3]
 8012f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f48:	f023 0301 	bic.w	r3, r3, #1
 8012f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	3308      	adds	r3, #8
 8012f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012f56:	64ba      	str	r2, [r7, #72]	; 0x48
 8012f58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f5e:	e841 2300 	strex	r3, r2, [r1]
 8012f62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1e5      	bne.n	8012f36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2220      	movs	r2, #32
 8012f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2220      	movs	r2, #32
 8012f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8012f82:	2303      	movs	r3, #3
 8012f84:	e069      	b.n	801305a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f003 0304 	and.w	r3, r3, #4
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d051      	beq.n	8013038 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	69db      	ldr	r3, [r3, #28]
 8012f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012fa2:	d149      	bne.n	8013038 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012fac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb6:	e853 3f00 	ldrex	r3, [r3]
 8012fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	461a      	mov	r2, r3
 8012fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8012fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fd4:	e841 2300 	strex	r3, r2, [r1]
 8012fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d1e6      	bne.n	8012fae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	3308      	adds	r3, #8
 8012fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	e853 3f00 	ldrex	r3, [r3]
 8012fee:	613b      	str	r3, [r7, #16]
   return(result);
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	f023 0301 	bic.w	r3, r3, #1
 8012ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	3308      	adds	r3, #8
 8012ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013000:	623a      	str	r2, [r7, #32]
 8013002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013004:	69f9      	ldr	r1, [r7, #28]
 8013006:	6a3a      	ldr	r2, [r7, #32]
 8013008:	e841 2300 	strex	r3, r2, [r1]
 801300c:	61bb      	str	r3, [r7, #24]
   return(result);
 801300e:	69bb      	ldr	r3, [r7, #24]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d1e5      	bne.n	8012fe0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2220      	movs	r2, #32
 8013018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2220      	movs	r2, #32
 8013020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2220      	movs	r2, #32
 8013028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2200      	movs	r2, #0
 8013030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8013034:	2303      	movs	r3, #3
 8013036:	e010      	b.n	801305a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	69da      	ldr	r2, [r3, #28]
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	4013      	ands	r3, r2
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	429a      	cmp	r2, r3
 8013046:	bf0c      	ite	eq
 8013048:	2301      	moveq	r3, #1
 801304a:	2300      	movne	r3, #0
 801304c:	b2db      	uxtb	r3, r3
 801304e:	461a      	mov	r2, r3
 8013050:	79fb      	ldrb	r3, [r7, #7]
 8013052:	429a      	cmp	r2, r3
 8013054:	f43f af46 	beq.w	8012ee4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013058:	2300      	movs	r3, #0
}
 801305a:	4618      	mov	r0, r3
 801305c:	3770      	adds	r7, #112	; 0x70
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}

08013062 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013062:	b480      	push	{r7}
 8013064:	b085      	sub	sp, #20
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013070:	2b01      	cmp	r3, #1
 8013072:	d101      	bne.n	8013078 <HAL_UARTEx_DisableFifoMode+0x16>
 8013074:	2302      	movs	r3, #2
 8013076:	e027      	b.n	80130c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2201      	movs	r2, #1
 801307c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2224      	movs	r2, #36	; 0x24
 8013084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	681a      	ldr	r2, [r3, #0]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f022 0201 	bic.w	r2, r2, #1
 801309e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80130a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2220      	movs	r2, #32
 80130ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2200      	movs	r2, #0
 80130c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80130c6:	2300      	movs	r3, #0
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3714      	adds	r7, #20
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr

080130d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80130e4:	2b01      	cmp	r3, #1
 80130e6:	d101      	bne.n	80130ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80130e8:	2302      	movs	r3, #2
 80130ea:	e02d      	b.n	8013148 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2201      	movs	r2, #1
 80130f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2224      	movs	r2, #36	; 0x24
 80130f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f022 0201 	bic.w	r2, r2, #1
 8013112:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	683a      	ldr	r2, [r7, #0]
 8013124:	430a      	orrs	r2, r1
 8013126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f000 f84f 	bl	80131cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2220      	movs	r2, #32
 801313a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2200      	movs	r2, #0
 8013142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013146:	2300      	movs	r3, #0
}
 8013148:	4618      	mov	r0, r3
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013160:	2b01      	cmp	r3, #1
 8013162:	d101      	bne.n	8013168 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013164:	2302      	movs	r3, #2
 8013166:	e02d      	b.n	80131c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2201      	movs	r2, #1
 801316c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2224      	movs	r2, #36	; 0x24
 8013174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f022 0201 	bic.w	r2, r2, #1
 801318e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	689b      	ldr	r3, [r3, #8]
 8013196:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	683a      	ldr	r2, [r7, #0]
 80131a0:	430a      	orrs	r2, r1
 80131a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 f811 	bl	80131cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	68fa      	ldr	r2, [r7, #12]
 80131b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2220      	movs	r2, #32
 80131b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80131c2:	2300      	movs	r3, #0
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3710      	adds	r7, #16
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b085      	sub	sp, #20
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d108      	bne.n	80131ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2201      	movs	r2, #1
 80131e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2201      	movs	r2, #1
 80131e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80131ec:	e031      	b.n	8013252 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80131ee:	2308      	movs	r3, #8
 80131f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80131f2:	2308      	movs	r3, #8
 80131f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	0e5b      	lsrs	r3, r3, #25
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	f003 0307 	and.w	r3, r3, #7
 8013204:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	689b      	ldr	r3, [r3, #8]
 801320c:	0f5b      	lsrs	r3, r3, #29
 801320e:	b2db      	uxtb	r3, r3
 8013210:	f003 0307 	and.w	r3, r3, #7
 8013214:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013216:	7bbb      	ldrb	r3, [r7, #14]
 8013218:	7b3a      	ldrb	r2, [r7, #12]
 801321a:	4911      	ldr	r1, [pc, #68]	; (8013260 <UARTEx_SetNbDataToProcess+0x94>)
 801321c:	5c8a      	ldrb	r2, [r1, r2]
 801321e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013222:	7b3a      	ldrb	r2, [r7, #12]
 8013224:	490f      	ldr	r1, [pc, #60]	; (8013264 <UARTEx_SetNbDataToProcess+0x98>)
 8013226:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013228:	fb93 f3f2 	sdiv	r3, r3, r2
 801322c:	b29a      	uxth	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013234:	7bfb      	ldrb	r3, [r7, #15]
 8013236:	7b7a      	ldrb	r2, [r7, #13]
 8013238:	4909      	ldr	r1, [pc, #36]	; (8013260 <UARTEx_SetNbDataToProcess+0x94>)
 801323a:	5c8a      	ldrb	r2, [r1, r2]
 801323c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013240:	7b7a      	ldrb	r2, [r7, #13]
 8013242:	4908      	ldr	r1, [pc, #32]	; (8013264 <UARTEx_SetNbDataToProcess+0x98>)
 8013244:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013246:	fb93 f3f2 	sdiv	r3, r3, r2
 801324a:	b29a      	uxth	r2, r3
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013252:	bf00      	nop
 8013254:	3714      	adds	r7, #20
 8013256:	46bd      	mov	sp, r7
 8013258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325c:	4770      	bx	lr
 801325e:	bf00      	nop
 8013260:	0801f720 	.word	0x0801f720
 8013264:	0801f728 	.word	0x0801f728

08013268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013268:	b084      	sub	sp, #16
 801326a:	b580      	push	{r7, lr}
 801326c:	b084      	sub	sp, #16
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
 8013272:	f107 001c 	add.w	r0, r7, #28
 8013276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f001 fbbc 	bl	8014a04 <USB_CoreReset>
 801328c:	4603      	mov	r3, r0
 801328e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8013290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013292:	2b00      	cmp	r3, #0
 8013294:	d106      	bne.n	80132a4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801329a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	639a      	str	r2, [r3, #56]	; 0x38
 80132a2:	e005      	b.n	80132b0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 80132b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3710      	adds	r7, #16
 80132b6:	46bd      	mov	sp, r7
 80132b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80132bc:	b004      	add	sp, #16
 80132be:	4770      	bx	lr

080132c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b087      	sub	sp, #28
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	4613      	mov	r3, r2
 80132cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80132ce:	79fb      	ldrb	r3, [r7, #7]
 80132d0:	2b02      	cmp	r3, #2
 80132d2:	d165      	bne.n	80133a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	4a41      	ldr	r2, [pc, #260]	; (80133dc <USB_SetTurnaroundTime+0x11c>)
 80132d8:	4293      	cmp	r3, r2
 80132da:	d906      	bls.n	80132ea <USB_SetTurnaroundTime+0x2a>
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	4a40      	ldr	r2, [pc, #256]	; (80133e0 <USB_SetTurnaroundTime+0x120>)
 80132e0:	4293      	cmp	r3, r2
 80132e2:	d202      	bcs.n	80132ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80132e4:	230f      	movs	r3, #15
 80132e6:	617b      	str	r3, [r7, #20]
 80132e8:	e062      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	4a3c      	ldr	r2, [pc, #240]	; (80133e0 <USB_SetTurnaroundTime+0x120>)
 80132ee:	4293      	cmp	r3, r2
 80132f0:	d306      	bcc.n	8013300 <USB_SetTurnaroundTime+0x40>
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	4a3b      	ldr	r2, [pc, #236]	; (80133e4 <USB_SetTurnaroundTime+0x124>)
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d202      	bcs.n	8013300 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80132fa:	230e      	movs	r3, #14
 80132fc:	617b      	str	r3, [r7, #20]
 80132fe:	e057      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	4a38      	ldr	r2, [pc, #224]	; (80133e4 <USB_SetTurnaroundTime+0x124>)
 8013304:	4293      	cmp	r3, r2
 8013306:	d306      	bcc.n	8013316 <USB_SetTurnaroundTime+0x56>
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	4a37      	ldr	r2, [pc, #220]	; (80133e8 <USB_SetTurnaroundTime+0x128>)
 801330c:	4293      	cmp	r3, r2
 801330e:	d202      	bcs.n	8013316 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013310:	230d      	movs	r3, #13
 8013312:	617b      	str	r3, [r7, #20]
 8013314:	e04c      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	4a33      	ldr	r2, [pc, #204]	; (80133e8 <USB_SetTurnaroundTime+0x128>)
 801331a:	4293      	cmp	r3, r2
 801331c:	d306      	bcc.n	801332c <USB_SetTurnaroundTime+0x6c>
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	4a32      	ldr	r2, [pc, #200]	; (80133ec <USB_SetTurnaroundTime+0x12c>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d802      	bhi.n	801332c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013326:	230c      	movs	r3, #12
 8013328:	617b      	str	r3, [r7, #20]
 801332a:	e041      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	4a2f      	ldr	r2, [pc, #188]	; (80133ec <USB_SetTurnaroundTime+0x12c>)
 8013330:	4293      	cmp	r3, r2
 8013332:	d906      	bls.n	8013342 <USB_SetTurnaroundTime+0x82>
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	4a2e      	ldr	r2, [pc, #184]	; (80133f0 <USB_SetTurnaroundTime+0x130>)
 8013338:	4293      	cmp	r3, r2
 801333a:	d802      	bhi.n	8013342 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801333c:	230b      	movs	r3, #11
 801333e:	617b      	str	r3, [r7, #20]
 8013340:	e036      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	4a2a      	ldr	r2, [pc, #168]	; (80133f0 <USB_SetTurnaroundTime+0x130>)
 8013346:	4293      	cmp	r3, r2
 8013348:	d906      	bls.n	8013358 <USB_SetTurnaroundTime+0x98>
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	4a29      	ldr	r2, [pc, #164]	; (80133f4 <USB_SetTurnaroundTime+0x134>)
 801334e:	4293      	cmp	r3, r2
 8013350:	d802      	bhi.n	8013358 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013352:	230a      	movs	r3, #10
 8013354:	617b      	str	r3, [r7, #20]
 8013356:	e02b      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	4a26      	ldr	r2, [pc, #152]	; (80133f4 <USB_SetTurnaroundTime+0x134>)
 801335c:	4293      	cmp	r3, r2
 801335e:	d906      	bls.n	801336e <USB_SetTurnaroundTime+0xae>
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	4a25      	ldr	r2, [pc, #148]	; (80133f8 <USB_SetTurnaroundTime+0x138>)
 8013364:	4293      	cmp	r3, r2
 8013366:	d202      	bcs.n	801336e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013368:	2309      	movs	r3, #9
 801336a:	617b      	str	r3, [r7, #20]
 801336c:	e020      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	4a21      	ldr	r2, [pc, #132]	; (80133f8 <USB_SetTurnaroundTime+0x138>)
 8013372:	4293      	cmp	r3, r2
 8013374:	d306      	bcc.n	8013384 <USB_SetTurnaroundTime+0xc4>
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	4a20      	ldr	r2, [pc, #128]	; (80133fc <USB_SetTurnaroundTime+0x13c>)
 801337a:	4293      	cmp	r3, r2
 801337c:	d802      	bhi.n	8013384 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801337e:	2308      	movs	r3, #8
 8013380:	617b      	str	r3, [r7, #20]
 8013382:	e015      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	4a1d      	ldr	r2, [pc, #116]	; (80133fc <USB_SetTurnaroundTime+0x13c>)
 8013388:	4293      	cmp	r3, r2
 801338a:	d906      	bls.n	801339a <USB_SetTurnaroundTime+0xda>
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	4a1c      	ldr	r2, [pc, #112]	; (8013400 <USB_SetTurnaroundTime+0x140>)
 8013390:	4293      	cmp	r3, r2
 8013392:	d202      	bcs.n	801339a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013394:	2307      	movs	r3, #7
 8013396:	617b      	str	r3, [r7, #20]
 8013398:	e00a      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801339a:	2306      	movs	r3, #6
 801339c:	617b      	str	r3, [r7, #20]
 801339e:	e007      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80133a0:	79fb      	ldrb	r3, [r7, #7]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d102      	bne.n	80133ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80133a6:	2309      	movs	r3, #9
 80133a8:	617b      	str	r3, [r7, #20]
 80133aa:	e001      	b.n	80133b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80133ac:	2309      	movs	r3, #9
 80133ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68da      	ldr	r2, [r3, #12]
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	029b      	lsls	r3, r3, #10
 80133c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80133c8:	431a      	orrs	r2, r3
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80133ce:	2300      	movs	r3, #0
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	371c      	adds	r7, #28
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr
 80133dc:	00d8acbf 	.word	0x00d8acbf
 80133e0:	00e4e1c0 	.word	0x00e4e1c0
 80133e4:	00f42400 	.word	0x00f42400
 80133e8:	01067380 	.word	0x01067380
 80133ec:	011a499f 	.word	0x011a499f
 80133f0:	01312cff 	.word	0x01312cff
 80133f4:	014ca43f 	.word	0x014ca43f
 80133f8:	016e3600 	.word	0x016e3600
 80133fc:	01a6ab1f 	.word	0x01a6ab1f
 8013400:	01e84800 	.word	0x01e84800

08013404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013404:	b480      	push	{r7}
 8013406:	b083      	sub	sp, #12
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	f043 0201 	orr.w	r2, r3, #1
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013418:	2300      	movs	r3, #0
}
 801341a:	4618      	mov	r0, r3
 801341c:	370c      	adds	r7, #12
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr

08013426 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013426:	b480      	push	{r7}
 8013428:	b083      	sub	sp, #12
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	f023 0201 	bic.w	r2, r3, #1
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801343a:	2300      	movs	r3, #0
}
 801343c:	4618      	mov	r0, r3
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	460b      	mov	r3, r1
 8013452:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013454:	2300      	movs	r3, #0
 8013456:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013464:	78fb      	ldrb	r3, [r7, #3]
 8013466:	2b01      	cmp	r3, #1
 8013468:	d115      	bne.n	8013496 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013476:	2001      	movs	r0, #1
 8013478:	f003 fcae 	bl	8016dd8 <HAL_Delay>
      ms++;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	3301      	adds	r3, #1
 8013480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f001 fa2f 	bl	80148e6 <USB_GetMode>
 8013488:	4603      	mov	r3, r0
 801348a:	2b01      	cmp	r3, #1
 801348c:	d01e      	beq.n	80134cc <USB_SetCurrentMode+0x84>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2b31      	cmp	r3, #49	; 0x31
 8013492:	d9f0      	bls.n	8013476 <USB_SetCurrentMode+0x2e>
 8013494:	e01a      	b.n	80134cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013496:	78fb      	ldrb	r3, [r7, #3]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d115      	bne.n	80134c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80134a8:	2001      	movs	r0, #1
 80134aa:	f003 fc95 	bl	8016dd8 <HAL_Delay>
      ms++;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3301      	adds	r3, #1
 80134b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f001 fa16 	bl	80148e6 <USB_GetMode>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d005      	beq.n	80134cc <USB_SetCurrentMode+0x84>
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2b31      	cmp	r3, #49	; 0x31
 80134c4:	d9f0      	bls.n	80134a8 <USB_SetCurrentMode+0x60>
 80134c6:	e001      	b.n	80134cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80134c8:	2301      	movs	r3, #1
 80134ca:	e005      	b.n	80134d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2b32      	cmp	r3, #50	; 0x32
 80134d0:	d101      	bne.n	80134d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80134d2:	2301      	movs	r3, #1
 80134d4:	e000      	b.n	80134d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80134d6:	2300      	movs	r3, #0
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80134e0:	b084      	sub	sp, #16
 80134e2:	b580      	push	{r7, lr}
 80134e4:	b086      	sub	sp, #24
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	6078      	str	r0, [r7, #4]
 80134ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80134ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80134f2:	2300      	movs	r3, #0
 80134f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80134fa:	2300      	movs	r3, #0
 80134fc:	613b      	str	r3, [r7, #16]
 80134fe:	e009      	b.n	8013514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	3340      	adds	r3, #64	; 0x40
 8013506:	009b      	lsls	r3, r3, #2
 8013508:	4413      	add	r3, r2
 801350a:	2200      	movs	r2, #0
 801350c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	3301      	adds	r3, #1
 8013512:	613b      	str	r3, [r7, #16]
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	2b0e      	cmp	r3, #14
 8013518:	d9f2      	bls.n	8013500 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801351a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801351c:	2b00      	cmp	r3, #0
 801351e:	d11c      	bne.n	801355a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801352e:	f043 0302 	orr.w	r3, r3, #2
 8013532:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013538:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	601a      	str	r2, [r3, #0]
 8013558:	e005      	b.n	8013566 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801355e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801356c:	461a      	mov	r2, r3
 801356e:	2300      	movs	r3, #0
 8013570:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013578:	4619      	mov	r1, r3
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013580:	461a      	mov	r2, r3
 8013582:	680b      	ldr	r3, [r1, #0]
 8013584:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013586:	2103      	movs	r1, #3
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 f95b 	bl	8013844 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801358e:	2110      	movs	r1, #16
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f000 f8f3 	bl	801377c <USB_FlushTxFifo>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d001      	beq.n	80135a0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 801359c:	2301      	movs	r3, #1
 801359e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f000 f91f 	bl	80137e4 <USB_FlushRxFifo>
 80135a6:	4603      	mov	r3, r0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d001      	beq.n	80135b0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80135ac:	2301      	movs	r3, #1
 80135ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135b6:	461a      	mov	r2, r3
 80135b8:	2300      	movs	r3, #0
 80135ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135c2:	461a      	mov	r2, r3
 80135c4:	2300      	movs	r3, #0
 80135c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ce:	461a      	mov	r2, r3
 80135d0:	2300      	movs	r3, #0
 80135d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135d4:	2300      	movs	r3, #0
 80135d6:	613b      	str	r3, [r7, #16]
 80135d8:	e043      	b.n	8013662 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	015a      	lsls	r2, r3, #5
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	4413      	add	r3, r2
 80135e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80135ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80135f0:	d118      	bne.n	8013624 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d10a      	bne.n	801360e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	015a      	lsls	r2, r3, #5
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	4413      	add	r3, r2
 8013600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013604:	461a      	mov	r2, r3
 8013606:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801360a:	6013      	str	r3, [r2, #0]
 801360c:	e013      	b.n	8013636 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	015a      	lsls	r2, r3, #5
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	4413      	add	r3, r2
 8013616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801361a:	461a      	mov	r2, r3
 801361c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013620:	6013      	str	r3, [r2, #0]
 8013622:	e008      	b.n	8013636 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	015a      	lsls	r2, r3, #5
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	4413      	add	r3, r2
 801362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013630:	461a      	mov	r2, r3
 8013632:	2300      	movs	r3, #0
 8013634:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	015a      	lsls	r2, r3, #5
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	4413      	add	r3, r2
 801363e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013642:	461a      	mov	r2, r3
 8013644:	2300      	movs	r3, #0
 8013646:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013648:	693b      	ldr	r3, [r7, #16]
 801364a:	015a      	lsls	r2, r3, #5
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	4413      	add	r3, r2
 8013650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013654:	461a      	mov	r2, r3
 8013656:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801365a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	3301      	adds	r3, #1
 8013660:	613b      	str	r3, [r7, #16]
 8013662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013664:	693a      	ldr	r2, [r7, #16]
 8013666:	429a      	cmp	r2, r3
 8013668:	d3b7      	bcc.n	80135da <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801366a:	2300      	movs	r3, #0
 801366c:	613b      	str	r3, [r7, #16]
 801366e:	e043      	b.n	80136f8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	015a      	lsls	r2, r3, #5
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	4413      	add	r3, r2
 8013678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013686:	d118      	bne.n	80136ba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d10a      	bne.n	80136a4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	4413      	add	r3, r2
 8013696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801369a:	461a      	mov	r2, r3
 801369c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80136a0:	6013      	str	r3, [r2, #0]
 80136a2:	e013      	b.n	80136cc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	015a      	lsls	r2, r3, #5
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	4413      	add	r3, r2
 80136ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136b0:	461a      	mov	r2, r3
 80136b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80136b6:	6013      	str	r3, [r2, #0]
 80136b8:	e008      	b.n	80136cc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	015a      	lsls	r2, r3, #5
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	4413      	add	r3, r2
 80136c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136c6:	461a      	mov	r2, r3
 80136c8:	2300      	movs	r3, #0
 80136ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	015a      	lsls	r2, r3, #5
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	4413      	add	r3, r2
 80136d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d8:	461a      	mov	r2, r3
 80136da:	2300      	movs	r3, #0
 80136dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	015a      	lsls	r2, r3, #5
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	4413      	add	r3, r2
 80136e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ea:	461a      	mov	r2, r3
 80136ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80136f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	3301      	adds	r3, #1
 80136f6:	613b      	str	r3, [r7, #16]
 80136f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fa:	693a      	ldr	r2, [r7, #16]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d3b7      	bcc.n	8013670 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013706:	691b      	ldr	r3, [r3, #16]
 8013708:	68fa      	ldr	r2, [r7, #12]
 801370a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801370e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013712:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2200      	movs	r2, #0
 8013718:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013720:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013724:	2b00      	cmp	r3, #0
 8013726:	d105      	bne.n	8013734 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	699b      	ldr	r3, [r3, #24]
 801372c:	f043 0210 	orr.w	r2, r3, #16
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	699a      	ldr	r2, [r3, #24]
 8013738:	4b0f      	ldr	r3, [pc, #60]	; (8013778 <USB_DevInit+0x298>)
 801373a:	4313      	orrs	r3, r2
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013742:	2b00      	cmp	r3, #0
 8013744:	d005      	beq.n	8013752 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	699b      	ldr	r3, [r3, #24]
 801374a:	f043 0208 	orr.w	r2, r3, #8
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013754:	2b01      	cmp	r3, #1
 8013756:	d107      	bne.n	8013768 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	699b      	ldr	r3, [r3, #24]
 801375c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013760:	f043 0304 	orr.w	r3, r3, #4
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013768:	7dfb      	ldrb	r3, [r7, #23]
}
 801376a:	4618      	mov	r0, r3
 801376c:	3718      	adds	r7, #24
 801376e:	46bd      	mov	sp, r7
 8013770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013774:	b004      	add	sp, #16
 8013776:	4770      	bx	lr
 8013778:	803c3800 	.word	0x803c3800

0801377c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801377c:	b480      	push	{r7}
 801377e:	b085      	sub	sp, #20
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013786:	2300      	movs	r3, #0
 8013788:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	3301      	adds	r3, #1
 801378e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	4a13      	ldr	r2, [pc, #76]	; (80137e0 <USB_FlushTxFifo+0x64>)
 8013794:	4293      	cmp	r3, r2
 8013796:	d901      	bls.n	801379c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013798:	2303      	movs	r3, #3
 801379a:	e01b      	b.n	80137d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	691b      	ldr	r3, [r3, #16]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	daf2      	bge.n	801378a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80137a4:	2300      	movs	r3, #0
 80137a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	019b      	lsls	r3, r3, #6
 80137ac:	f043 0220 	orr.w	r2, r3, #32
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	3301      	adds	r3, #1
 80137b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	4a08      	ldr	r2, [pc, #32]	; (80137e0 <USB_FlushTxFifo+0x64>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d901      	bls.n	80137c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e006      	b.n	80137d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	691b      	ldr	r3, [r3, #16]
 80137ca:	f003 0320 	and.w	r3, r3, #32
 80137ce:	2b20      	cmp	r3, #32
 80137d0:	d0f0      	beq.n	80137b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80137d2:	2300      	movs	r3, #0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3714      	adds	r7, #20
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr
 80137e0:	00030d40 	.word	0x00030d40

080137e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b085      	sub	sp, #20
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80137ec:	2300      	movs	r3, #0
 80137ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	3301      	adds	r3, #1
 80137f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	4a11      	ldr	r2, [pc, #68]	; (8013840 <USB_FlushRxFifo+0x5c>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d901      	bls.n	8013802 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80137fe:	2303      	movs	r3, #3
 8013800:	e018      	b.n	8013834 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	691b      	ldr	r3, [r3, #16]
 8013806:	2b00      	cmp	r3, #0
 8013808:	daf2      	bge.n	80137f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801380a:	2300      	movs	r3, #0
 801380c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2210      	movs	r2, #16
 8013812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	3301      	adds	r3, #1
 8013818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	4a08      	ldr	r2, [pc, #32]	; (8013840 <USB_FlushRxFifo+0x5c>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d901      	bls.n	8013826 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013822:	2303      	movs	r3, #3
 8013824:	e006      	b.n	8013834 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	691b      	ldr	r3, [r3, #16]
 801382a:	f003 0310 	and.w	r3, r3, #16
 801382e:	2b10      	cmp	r3, #16
 8013830:	d0f0      	beq.n	8013814 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013832:	2300      	movs	r3, #0
}
 8013834:	4618      	mov	r0, r3
 8013836:	3714      	adds	r7, #20
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr
 8013840:	00030d40 	.word	0x00030d40

08013844 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013844:	b480      	push	{r7}
 8013846:	b085      	sub	sp, #20
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	460b      	mov	r3, r1
 801384e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	78fb      	ldrb	r3, [r7, #3]
 801385e:	68f9      	ldr	r1, [r7, #12]
 8013860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013864:	4313      	orrs	r3, r2
 8013866:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013868:	2300      	movs	r3, #0
}
 801386a:	4618      	mov	r0, r3
 801386c:	3714      	adds	r7, #20
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr

08013876 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013876:	b480      	push	{r7}
 8013878:	b087      	sub	sp, #28
 801387a:	af00      	add	r7, sp, #0
 801387c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	f003 0306 	and.w	r3, r3, #6
 801388e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d102      	bne.n	801389c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013896:	2300      	movs	r3, #0
 8013898:	75fb      	strb	r3, [r7, #23]
 801389a:	e00a      	b.n	80138b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2b02      	cmp	r3, #2
 80138a0:	d002      	beq.n	80138a8 <USB_GetDevSpeed+0x32>
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2b06      	cmp	r3, #6
 80138a6:	d102      	bne.n	80138ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80138a8:	2302      	movs	r3, #2
 80138aa:	75fb      	strb	r3, [r7, #23]
 80138ac:	e001      	b.n	80138b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80138ae:	230f      	movs	r3, #15
 80138b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	371c      	adds	r7, #28
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr

080138c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138c0:	b480      	push	{r7}
 80138c2:	b085      	sub	sp, #20
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	785b      	ldrb	r3, [r3, #1]
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d13a      	bne.n	8013952 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138e2:	69da      	ldr	r2, [r3, #28]
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	f003 030f 	and.w	r3, r3, #15
 80138ec:	2101      	movs	r1, #1
 80138ee:	fa01 f303 	lsl.w	r3, r1, r3
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	68f9      	ldr	r1, [r7, #12]
 80138f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80138fa:	4313      	orrs	r3, r2
 80138fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	015a      	lsls	r2, r3, #5
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	4413      	add	r3, r2
 8013906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013910:	2b00      	cmp	r3, #0
 8013912:	d155      	bne.n	80139c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	015a      	lsls	r2, r3, #5
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	4413      	add	r3, r2
 801391c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	791b      	ldrb	r3, [r3, #4]
 801392e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013930:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	059b      	lsls	r3, r3, #22
 8013936:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013938:	4313      	orrs	r3, r2
 801393a:	68ba      	ldr	r2, [r7, #8]
 801393c:	0151      	lsls	r1, r2, #5
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	440a      	add	r2, r1
 8013942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801394a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801394e:	6013      	str	r3, [r2, #0]
 8013950:	e036      	b.n	80139c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013958:	69da      	ldr	r2, [r3, #28]
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	f003 030f 	and.w	r3, r3, #15
 8013962:	2101      	movs	r1, #1
 8013964:	fa01 f303 	lsl.w	r3, r1, r3
 8013968:	041b      	lsls	r3, r3, #16
 801396a:	68f9      	ldr	r1, [r7, #12]
 801396c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013970:	4313      	orrs	r3, r2
 8013972:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	015a      	lsls	r2, r3, #5
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	4413      	add	r3, r2
 801397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013986:	2b00      	cmp	r3, #0
 8013988:	d11a      	bne.n	80139c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	015a      	lsls	r2, r3, #5
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	4413      	add	r3, r2
 8013992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	68db      	ldr	r3, [r3, #12]
 801399c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	791b      	ldrb	r3, [r3, #4]
 80139a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80139a6:	430b      	orrs	r3, r1
 80139a8:	4313      	orrs	r3, r2
 80139aa:	68ba      	ldr	r2, [r7, #8]
 80139ac:	0151      	lsls	r1, r2, #5
 80139ae:	68fa      	ldr	r2, [r7, #12]
 80139b0:	440a      	add	r2, r1
 80139b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80139be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80139c0:	2300      	movs	r3, #0
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3714      	adds	r7, #20
 80139c6:	46bd      	mov	sp, r7
 80139c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139cc:	4770      	bx	lr
	...

080139d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b085      	sub	sp, #20
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	785b      	ldrb	r3, [r3, #1]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d161      	bne.n	8013ab0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	015a      	lsls	r2, r3, #5
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	4413      	add	r3, r2
 80139f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a02:	d11f      	bne.n	8013a44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	015a      	lsls	r2, r3, #5
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	4413      	add	r3, r2
 8013a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	68ba      	ldr	r2, [r7, #8]
 8013a14:	0151      	lsls	r1, r2, #5
 8013a16:	68fa      	ldr	r2, [r7, #12]
 8013a18:	440a      	add	r2, r1
 8013a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	015a      	lsls	r2, r3, #5
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	68ba      	ldr	r2, [r7, #8]
 8013a34:	0151      	lsls	r1, r2, #5
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	440a      	add	r2, r1
 8013a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	f003 030f 	and.w	r3, r3, #15
 8013a54:	2101      	movs	r1, #1
 8013a56:	fa01 f303 	lsl.w	r3, r1, r3
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	43db      	mvns	r3, r3
 8013a5e:	68f9      	ldr	r1, [r7, #12]
 8013a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a64:	4013      	ands	r3, r2
 8013a66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a6e:	69da      	ldr	r2, [r3, #28]
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	f003 030f 	and.w	r3, r3, #15
 8013a78:	2101      	movs	r1, #1
 8013a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a7e:	b29b      	uxth	r3, r3
 8013a80:	43db      	mvns	r3, r3
 8013a82:	68f9      	ldr	r1, [r7, #12]
 8013a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a88:	4013      	ands	r3, r2
 8013a8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	015a      	lsls	r2, r3, #5
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	4413      	add	r3, r2
 8013a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a98:	681a      	ldr	r2, [r3, #0]
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	0159      	lsls	r1, r3, #5
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	440b      	add	r3, r1
 8013aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	4b35      	ldr	r3, [pc, #212]	; (8013b80 <USB_DeactivateEndpoint+0x1b0>)
 8013aaa:	4013      	ands	r3, r2
 8013aac:	600b      	str	r3, [r1, #0]
 8013aae:	e060      	b.n	8013b72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	015a      	lsls	r2, r3, #5
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ac6:	d11f      	bne.n	8013b08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	015a      	lsls	r2, r3, #5
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	4413      	add	r3, r2
 8013ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	68ba      	ldr	r2, [r7, #8]
 8013ad8:	0151      	lsls	r1, r2, #5
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	440a      	add	r2, r1
 8013ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013ae6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	015a      	lsls	r2, r3, #5
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	4413      	add	r3, r2
 8013af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	68ba      	ldr	r2, [r7, #8]
 8013af8:	0151      	lsls	r1, r2, #5
 8013afa:	68fa      	ldr	r2, [r7, #12]
 8013afc:	440a      	add	r2, r1
 8013afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	781b      	ldrb	r3, [r3, #0]
 8013b14:	f003 030f 	and.w	r3, r3, #15
 8013b18:	2101      	movs	r1, #1
 8013b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8013b1e:	041b      	lsls	r3, r3, #16
 8013b20:	43db      	mvns	r3, r3
 8013b22:	68f9      	ldr	r1, [r7, #12]
 8013b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b28:	4013      	ands	r3, r2
 8013b2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b32:	69da      	ldr	r2, [r3, #28]
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	f003 030f 	and.w	r3, r3, #15
 8013b3c:	2101      	movs	r1, #1
 8013b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8013b42:	041b      	lsls	r3, r3, #16
 8013b44:	43db      	mvns	r3, r3
 8013b46:	68f9      	ldr	r1, [r7, #12]
 8013b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b4c:	4013      	ands	r3, r2
 8013b4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	015a      	lsls	r2, r3, #5
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	4413      	add	r3, r2
 8013b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	0159      	lsls	r1, r3, #5
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	440b      	add	r3, r1
 8013b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	4b05      	ldr	r3, [pc, #20]	; (8013b84 <USB_DeactivateEndpoint+0x1b4>)
 8013b6e:	4013      	ands	r3, r2
 8013b70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013b72:	2300      	movs	r3, #0
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3714      	adds	r7, #20
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr
 8013b80:	ec337800 	.word	0xec337800
 8013b84:	eff37800 	.word	0xeff37800

08013b88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b08a      	sub	sp, #40	; 0x28
 8013b8c:	af02      	add	r7, sp, #8
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	60b9      	str	r1, [r7, #8]
 8013b92:	4613      	mov	r3, r2
 8013b94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	785b      	ldrb	r3, [r3, #1]
 8013ba4:	2b01      	cmp	r3, #1
 8013ba6:	f040 815c 	bne.w	8013e62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	699b      	ldr	r3, [r3, #24]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d132      	bne.n	8013c18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	015a      	lsls	r2, r3, #5
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	4413      	add	r3, r2
 8013bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bbe:	691b      	ldr	r3, [r3, #16]
 8013bc0:	69ba      	ldr	r2, [r7, #24]
 8013bc2:	0151      	lsls	r1, r2, #5
 8013bc4:	69fa      	ldr	r2, [r7, #28]
 8013bc6:	440a      	add	r2, r1
 8013bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013bd6:	69bb      	ldr	r3, [r7, #24]
 8013bd8:	015a      	lsls	r2, r3, #5
 8013bda:	69fb      	ldr	r3, [r7, #28]
 8013bdc:	4413      	add	r3, r2
 8013bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013be2:	691b      	ldr	r3, [r3, #16]
 8013be4:	69ba      	ldr	r2, [r7, #24]
 8013be6:	0151      	lsls	r1, r2, #5
 8013be8:	69fa      	ldr	r2, [r7, #28]
 8013bea:	440a      	add	r2, r1
 8013bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	015a      	lsls	r2, r3, #5
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c02:	691b      	ldr	r3, [r3, #16]
 8013c04:	69ba      	ldr	r2, [r7, #24]
 8013c06:	0151      	lsls	r1, r2, #5
 8013c08:	69fa      	ldr	r2, [r7, #28]
 8013c0a:	440a      	add	r2, r1
 8013c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c10:	0cdb      	lsrs	r3, r3, #19
 8013c12:	04db      	lsls	r3, r3, #19
 8013c14:	6113      	str	r3, [r2, #16]
 8013c16:	e074      	b.n	8013d02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c18:	69bb      	ldr	r3, [r7, #24]
 8013c1a:	015a      	lsls	r2, r3, #5
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	4413      	add	r3, r2
 8013c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c24:	691b      	ldr	r3, [r3, #16]
 8013c26:	69ba      	ldr	r2, [r7, #24]
 8013c28:	0151      	lsls	r1, r2, #5
 8013c2a:	69fa      	ldr	r2, [r7, #28]
 8013c2c:	440a      	add	r2, r1
 8013c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c32:	0cdb      	lsrs	r3, r3, #19
 8013c34:	04db      	lsls	r3, r3, #19
 8013c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	015a      	lsls	r2, r3, #5
 8013c3c:	69fb      	ldr	r3, [r7, #28]
 8013c3e:	4413      	add	r3, r2
 8013c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c44:	691b      	ldr	r3, [r3, #16]
 8013c46:	69ba      	ldr	r2, [r7, #24]
 8013c48:	0151      	lsls	r1, r2, #5
 8013c4a:	69fa      	ldr	r2, [r7, #28]
 8013c4c:	440a      	add	r2, r1
 8013c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013c56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013c5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013c5c:	69bb      	ldr	r3, [r7, #24]
 8013c5e:	015a      	lsls	r2, r3, #5
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	4413      	add	r3, r2
 8013c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	6999      	ldr	r1, [r3, #24]
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	440b      	add	r3, r1
 8013c74:	1e59      	subs	r1, r3, #1
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8013c7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013c80:	4b9d      	ldr	r3, [pc, #628]	; (8013ef8 <USB_EPStartXfer+0x370>)
 8013c82:	400b      	ands	r3, r1
 8013c84:	69b9      	ldr	r1, [r7, #24]
 8013c86:	0148      	lsls	r0, r1, #5
 8013c88:	69f9      	ldr	r1, [r7, #28]
 8013c8a:	4401      	add	r1, r0
 8013c8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013c90:	4313      	orrs	r3, r2
 8013c92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	015a      	lsls	r2, r3, #5
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca0:	691a      	ldr	r2, [r3, #16]
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	699b      	ldr	r3, [r3, #24]
 8013ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013caa:	69b9      	ldr	r1, [r7, #24]
 8013cac:	0148      	lsls	r0, r1, #5
 8013cae:	69f9      	ldr	r1, [r7, #28]
 8013cb0:	4401      	add	r1, r0
 8013cb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013cb6:	4313      	orrs	r3, r2
 8013cb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	791b      	ldrb	r3, [r3, #4]
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d11f      	bne.n	8013d02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013cc2:	69bb      	ldr	r3, [r7, #24]
 8013cc4:	015a      	lsls	r2, r3, #5
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	4413      	add	r3, r2
 8013cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cce:	691b      	ldr	r3, [r3, #16]
 8013cd0:	69ba      	ldr	r2, [r7, #24]
 8013cd2:	0151      	lsls	r1, r2, #5
 8013cd4:	69fa      	ldr	r2, [r7, #28]
 8013cd6:	440a      	add	r2, r1
 8013cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013ce0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013ce2:	69bb      	ldr	r3, [r7, #24]
 8013ce4:	015a      	lsls	r2, r3, #5
 8013ce6:	69fb      	ldr	r3, [r7, #28]
 8013ce8:	4413      	add	r3, r2
 8013cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cee:	691b      	ldr	r3, [r3, #16]
 8013cf0:	69ba      	ldr	r2, [r7, #24]
 8013cf2:	0151      	lsls	r1, r2, #5
 8013cf4:	69fa      	ldr	r2, [r7, #28]
 8013cf6:	440a      	add	r2, r1
 8013cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013d00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013d02:	79fb      	ldrb	r3, [r7, #7]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d14b      	bne.n	8013da0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	695b      	ldr	r3, [r3, #20]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d009      	beq.n	8013d24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013d10:	69bb      	ldr	r3, [r7, #24]
 8013d12:	015a      	lsls	r2, r3, #5
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	4413      	add	r3, r2
 8013d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	695b      	ldr	r3, [r3, #20]
 8013d22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	791b      	ldrb	r3, [r3, #4]
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d128      	bne.n	8013d7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d110      	bne.n	8013d5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d3c:	69bb      	ldr	r3, [r7, #24]
 8013d3e:	015a      	lsls	r2, r3, #5
 8013d40:	69fb      	ldr	r3, [r7, #28]
 8013d42:	4413      	add	r3, r2
 8013d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	69ba      	ldr	r2, [r7, #24]
 8013d4c:	0151      	lsls	r1, r2, #5
 8013d4e:	69fa      	ldr	r2, [r7, #28]
 8013d50:	440a      	add	r2, r1
 8013d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013d5a:	6013      	str	r3, [r2, #0]
 8013d5c:	e00f      	b.n	8013d7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	015a      	lsls	r2, r3, #5
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	4413      	add	r3, r2
 8013d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	69ba      	ldr	r2, [r7, #24]
 8013d6e:	0151      	lsls	r1, r2, #5
 8013d70:	69fa      	ldr	r2, [r7, #28]
 8013d72:	440a      	add	r2, r1
 8013d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d7e:	69bb      	ldr	r3, [r7, #24]
 8013d80:	015a      	lsls	r2, r3, #5
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	4413      	add	r3, r2
 8013d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	69ba      	ldr	r2, [r7, #24]
 8013d8e:	0151      	lsls	r1, r2, #5
 8013d90:	69fa      	ldr	r2, [r7, #28]
 8013d92:	440a      	add	r2, r1
 8013d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d9c:	6013      	str	r3, [r2, #0]
 8013d9e:	e133      	b.n	8014008 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013da0:	69bb      	ldr	r3, [r7, #24]
 8013da2:	015a      	lsls	r2, r3, #5
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	4413      	add	r3, r2
 8013da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	69ba      	ldr	r2, [r7, #24]
 8013db0:	0151      	lsls	r1, r2, #5
 8013db2:	69fa      	ldr	r2, [r7, #28]
 8013db4:	440a      	add	r2, r1
 8013db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013dbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	791b      	ldrb	r3, [r3, #4]
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d015      	beq.n	8013df4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	699b      	ldr	r3, [r3, #24]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f000 811b 	beq.w	8014008 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013dd2:	69fb      	ldr	r3, [r7, #28]
 8013dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	f003 030f 	and.w	r3, r3, #15
 8013de2:	2101      	movs	r1, #1
 8013de4:	fa01 f303 	lsl.w	r3, r1, r3
 8013de8:	69f9      	ldr	r1, [r7, #28]
 8013dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dee:	4313      	orrs	r3, r2
 8013df0:	634b      	str	r3, [r1, #52]	; 0x34
 8013df2:	e109      	b.n	8014008 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d110      	bne.n	8013e26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	015a      	lsls	r2, r3, #5
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	4413      	add	r3, r2
 8013e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	69ba      	ldr	r2, [r7, #24]
 8013e14:	0151      	lsls	r1, r2, #5
 8013e16:	69fa      	ldr	r2, [r7, #28]
 8013e18:	440a      	add	r2, r1
 8013e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013e22:	6013      	str	r3, [r2, #0]
 8013e24:	e00f      	b.n	8013e46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	015a      	lsls	r2, r3, #5
 8013e2a:	69fb      	ldr	r3, [r7, #28]
 8013e2c:	4413      	add	r3, r2
 8013e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	69ba      	ldr	r2, [r7, #24]
 8013e36:	0151      	lsls	r1, r2, #5
 8013e38:	69fa      	ldr	r2, [r7, #28]
 8013e3a:	440a      	add	r2, r1
 8013e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	6919      	ldr	r1, [r3, #16]
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	781a      	ldrb	r2, [r3, #0]
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	699b      	ldr	r3, [r3, #24]
 8013e52:	b298      	uxth	r0, r3
 8013e54:	79fb      	ldrb	r3, [r7, #7]
 8013e56:	9300      	str	r3, [sp, #0]
 8013e58:	4603      	mov	r3, r0
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f000 fade 	bl	801441c <USB_WritePacket>
 8013e60:	e0d2      	b.n	8014008 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013e62:	69bb      	ldr	r3, [r7, #24]
 8013e64:	015a      	lsls	r2, r3, #5
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	4413      	add	r3, r2
 8013e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e6e:	691b      	ldr	r3, [r3, #16]
 8013e70:	69ba      	ldr	r2, [r7, #24]
 8013e72:	0151      	lsls	r1, r2, #5
 8013e74:	69fa      	ldr	r2, [r7, #28]
 8013e76:	440a      	add	r2, r1
 8013e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e7c:	0cdb      	lsrs	r3, r3, #19
 8013e7e:	04db      	lsls	r3, r3, #19
 8013e80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013e82:	69bb      	ldr	r3, [r7, #24]
 8013e84:	015a      	lsls	r2, r3, #5
 8013e86:	69fb      	ldr	r3, [r7, #28]
 8013e88:	4413      	add	r3, r2
 8013e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e8e:	691b      	ldr	r3, [r3, #16]
 8013e90:	69ba      	ldr	r2, [r7, #24]
 8013e92:	0151      	lsls	r1, r2, #5
 8013e94:	69fa      	ldr	r2, [r7, #28]
 8013e96:	440a      	add	r2, r1
 8013e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013ea4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	699b      	ldr	r3, [r3, #24]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d126      	bne.n	8013efc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013eae:	69bb      	ldr	r3, [r7, #24]
 8013eb0:	015a      	lsls	r2, r3, #5
 8013eb2:	69fb      	ldr	r3, [r7, #28]
 8013eb4:	4413      	add	r3, r2
 8013eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eba:	691a      	ldr	r2, [r3, #16]
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ec4:	69b9      	ldr	r1, [r7, #24]
 8013ec6:	0148      	lsls	r0, r1, #5
 8013ec8:	69f9      	ldr	r1, [r7, #28]
 8013eca:	4401      	add	r1, r0
 8013ecc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ed0:	4313      	orrs	r3, r2
 8013ed2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ed4:	69bb      	ldr	r3, [r7, #24]
 8013ed6:	015a      	lsls	r2, r3, #5
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	4413      	add	r3, r2
 8013edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	69ba      	ldr	r2, [r7, #24]
 8013ee4:	0151      	lsls	r1, r2, #5
 8013ee6:	69fa      	ldr	r2, [r7, #28]
 8013ee8:	440a      	add	r2, r1
 8013eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ef2:	6113      	str	r3, [r2, #16]
 8013ef4:	e03a      	b.n	8013f6c <USB_EPStartXfer+0x3e4>
 8013ef6:	bf00      	nop
 8013ef8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	699a      	ldr	r2, [r3, #24]
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	4413      	add	r3, r2
 8013f06:	1e5a      	subs	r2, r3, #1
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	68db      	ldr	r3, [r3, #12]
 8013f16:	8afa      	ldrh	r2, [r7, #22]
 8013f18:	fb03 f202 	mul.w	r2, r3, r2
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013f20:	69bb      	ldr	r3, [r7, #24]
 8013f22:	015a      	lsls	r2, r3, #5
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	4413      	add	r3, r2
 8013f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f2c:	691a      	ldr	r2, [r3, #16]
 8013f2e:	8afb      	ldrh	r3, [r7, #22]
 8013f30:	04d9      	lsls	r1, r3, #19
 8013f32:	4b38      	ldr	r3, [pc, #224]	; (8014014 <USB_EPStartXfer+0x48c>)
 8013f34:	400b      	ands	r3, r1
 8013f36:	69b9      	ldr	r1, [r7, #24]
 8013f38:	0148      	lsls	r0, r1, #5
 8013f3a:	69f9      	ldr	r1, [r7, #28]
 8013f3c:	4401      	add	r1, r0
 8013f3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f42:	4313      	orrs	r3, r2
 8013f44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	015a      	lsls	r2, r3, #5
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	4413      	add	r3, r2
 8013f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f52:	691a      	ldr	r2, [r3, #16]
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	69db      	ldr	r3, [r3, #28]
 8013f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f5c:	69b9      	ldr	r1, [r7, #24]
 8013f5e:	0148      	lsls	r0, r1, #5
 8013f60:	69f9      	ldr	r1, [r7, #28]
 8013f62:	4401      	add	r1, r0
 8013f64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f68:	4313      	orrs	r3, r2
 8013f6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013f6c:	79fb      	ldrb	r3, [r7, #7]
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d10d      	bne.n	8013f8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	691b      	ldr	r3, [r3, #16]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d009      	beq.n	8013f8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	6919      	ldr	r1, [r3, #16]
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	015a      	lsls	r2, r3, #5
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	4413      	add	r3, r2
 8013f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f8a:	460a      	mov	r2, r1
 8013f8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	791b      	ldrb	r3, [r3, #4]
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	d128      	bne.n	8013fe8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f9c:	689b      	ldr	r3, [r3, #8]
 8013f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d110      	bne.n	8013fc8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013fa6:	69bb      	ldr	r3, [r7, #24]
 8013fa8:	015a      	lsls	r2, r3, #5
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	4413      	add	r3, r2
 8013fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	69ba      	ldr	r2, [r7, #24]
 8013fb6:	0151      	lsls	r1, r2, #5
 8013fb8:	69fa      	ldr	r2, [r7, #28]
 8013fba:	440a      	add	r2, r1
 8013fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013fc4:	6013      	str	r3, [r2, #0]
 8013fc6:	e00f      	b.n	8013fe8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013fc8:	69bb      	ldr	r3, [r7, #24]
 8013fca:	015a      	lsls	r2, r3, #5
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	4413      	add	r3, r2
 8013fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	69ba      	ldr	r2, [r7, #24]
 8013fd8:	0151      	lsls	r1, r2, #5
 8013fda:	69fa      	ldr	r2, [r7, #28]
 8013fdc:	440a      	add	r2, r1
 8013fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fe6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	015a      	lsls	r2, r3, #5
 8013fec:	69fb      	ldr	r3, [r7, #28]
 8013fee:	4413      	add	r3, r2
 8013ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	69ba      	ldr	r2, [r7, #24]
 8013ff8:	0151      	lsls	r1, r2, #5
 8013ffa:	69fa      	ldr	r2, [r7, #28]
 8013ffc:	440a      	add	r2, r1
 8013ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014002:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014006:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014008:	2300      	movs	r3, #0
}
 801400a:	4618      	mov	r0, r3
 801400c:	3720      	adds	r7, #32
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
 8014012:	bf00      	nop
 8014014:	1ff80000 	.word	0x1ff80000

08014018 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014018:	b480      	push	{r7}
 801401a:	b087      	sub	sp, #28
 801401c:	af00      	add	r7, sp, #0
 801401e:	60f8      	str	r0, [r7, #12]
 8014020:	60b9      	str	r1, [r7, #8]
 8014022:	4613      	mov	r3, r2
 8014024:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	785b      	ldrb	r3, [r3, #1]
 8014034:	2b01      	cmp	r3, #1
 8014036:	f040 80ce 	bne.w	80141d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	699b      	ldr	r3, [r3, #24]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d132      	bne.n	80140a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	015a      	lsls	r2, r3, #5
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	4413      	add	r3, r2
 801404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801404e:	691b      	ldr	r3, [r3, #16]
 8014050:	693a      	ldr	r2, [r7, #16]
 8014052:	0151      	lsls	r1, r2, #5
 8014054:	697a      	ldr	r2, [r7, #20]
 8014056:	440a      	add	r2, r1
 8014058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801405c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014060:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	015a      	lsls	r2, r3, #5
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	4413      	add	r3, r2
 801406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014072:	691b      	ldr	r3, [r3, #16]
 8014074:	693a      	ldr	r2, [r7, #16]
 8014076:	0151      	lsls	r1, r2, #5
 8014078:	697a      	ldr	r2, [r7, #20]
 801407a:	440a      	add	r2, r1
 801407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014084:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	015a      	lsls	r2, r3, #5
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	4413      	add	r3, r2
 801408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014092:	691b      	ldr	r3, [r3, #16]
 8014094:	693a      	ldr	r2, [r7, #16]
 8014096:	0151      	lsls	r1, r2, #5
 8014098:	697a      	ldr	r2, [r7, #20]
 801409a:	440a      	add	r2, r1
 801409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140a0:	0cdb      	lsrs	r3, r3, #19
 80140a2:	04db      	lsls	r3, r3, #19
 80140a4:	6113      	str	r3, [r2, #16]
 80140a6:	e04e      	b.n	8014146 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	015a      	lsls	r2, r3, #5
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	4413      	add	r3, r2
 80140b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140b4:	691b      	ldr	r3, [r3, #16]
 80140b6:	693a      	ldr	r2, [r7, #16]
 80140b8:	0151      	lsls	r1, r2, #5
 80140ba:	697a      	ldr	r2, [r7, #20]
 80140bc:	440a      	add	r2, r1
 80140be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140c2:	0cdb      	lsrs	r3, r3, #19
 80140c4:	04db      	lsls	r3, r3, #19
 80140c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	015a      	lsls	r2, r3, #5
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	4413      	add	r3, r2
 80140d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140d4:	691b      	ldr	r3, [r3, #16]
 80140d6:	693a      	ldr	r2, [r7, #16]
 80140d8:	0151      	lsls	r1, r2, #5
 80140da:	697a      	ldr	r2, [r7, #20]
 80140dc:	440a      	add	r2, r1
 80140de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80140e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80140ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	699a      	ldr	r2, [r3, #24]
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d903      	bls.n	8014100 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	68da      	ldr	r2, [r3, #12]
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	015a      	lsls	r2, r3, #5
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	4413      	add	r3, r2
 8014108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801410c:	691b      	ldr	r3, [r3, #16]
 801410e:	693a      	ldr	r2, [r7, #16]
 8014110:	0151      	lsls	r1, r2, #5
 8014112:	697a      	ldr	r2, [r7, #20]
 8014114:	440a      	add	r2, r1
 8014116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801411a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801411e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	015a      	lsls	r2, r3, #5
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	4413      	add	r3, r2
 8014128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801412c:	691a      	ldr	r2, [r3, #16]
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	699b      	ldr	r3, [r3, #24]
 8014132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014136:	6939      	ldr	r1, [r7, #16]
 8014138:	0148      	lsls	r0, r1, #5
 801413a:	6979      	ldr	r1, [r7, #20]
 801413c:	4401      	add	r1, r0
 801413e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014142:	4313      	orrs	r3, r2
 8014144:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014146:	79fb      	ldrb	r3, [r7, #7]
 8014148:	2b01      	cmp	r3, #1
 801414a:	d11e      	bne.n	801418a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	695b      	ldr	r3, [r3, #20]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d009      	beq.n	8014168 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	015a      	lsls	r2, r3, #5
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	4413      	add	r3, r2
 801415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014160:	461a      	mov	r2, r3
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	695b      	ldr	r3, [r3, #20]
 8014166:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	015a      	lsls	r2, r3, #5
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	4413      	add	r3, r2
 8014170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	693a      	ldr	r2, [r7, #16]
 8014178:	0151      	lsls	r1, r2, #5
 801417a:	697a      	ldr	r2, [r7, #20]
 801417c:	440a      	add	r2, r1
 801417e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014186:	6013      	str	r3, [r2, #0]
 8014188:	e097      	b.n	80142ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	015a      	lsls	r2, r3, #5
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	4413      	add	r3, r2
 8014192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	693a      	ldr	r2, [r7, #16]
 801419a:	0151      	lsls	r1, r2, #5
 801419c:	697a      	ldr	r2, [r7, #20]
 801419e:	440a      	add	r2, r1
 80141a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80141a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	699b      	ldr	r3, [r3, #24]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	f000 8083 	beq.w	80142ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	f003 030f 	and.w	r3, r3, #15
 80141c4:	2101      	movs	r1, #1
 80141c6:	fa01 f303 	lsl.w	r3, r1, r3
 80141ca:	6979      	ldr	r1, [r7, #20]
 80141cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141d0:	4313      	orrs	r3, r2
 80141d2:	634b      	str	r3, [r1, #52]	; 0x34
 80141d4:	e071      	b.n	80142ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	015a      	lsls	r2, r3, #5
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	4413      	add	r3, r2
 80141de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141e2:	691b      	ldr	r3, [r3, #16]
 80141e4:	693a      	ldr	r2, [r7, #16]
 80141e6:	0151      	lsls	r1, r2, #5
 80141e8:	697a      	ldr	r2, [r7, #20]
 80141ea:	440a      	add	r2, r1
 80141ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141f0:	0cdb      	lsrs	r3, r3, #19
 80141f2:	04db      	lsls	r3, r3, #19
 80141f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	015a      	lsls	r2, r3, #5
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	4413      	add	r3, r2
 80141fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	693a      	ldr	r2, [r7, #16]
 8014206:	0151      	lsls	r1, r2, #5
 8014208:	697a      	ldr	r2, [r7, #20]
 801420a:	440a      	add	r2, r1
 801420c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014218:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	699b      	ldr	r3, [r3, #24]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d003      	beq.n	801422a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	68da      	ldr	r2, [r3, #12]
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	68da      	ldr	r2, [r3, #12]
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	015a      	lsls	r2, r3, #5
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	4413      	add	r3, r2
 801423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801423e:	691b      	ldr	r3, [r3, #16]
 8014240:	693a      	ldr	r2, [r7, #16]
 8014242:	0151      	lsls	r1, r2, #5
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	440a      	add	r2, r1
 8014248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801424c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	015a      	lsls	r2, r3, #5
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	4413      	add	r3, r2
 801425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801425e:	691a      	ldr	r2, [r3, #16]
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	69db      	ldr	r3, [r3, #28]
 8014264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014268:	6939      	ldr	r1, [r7, #16]
 801426a:	0148      	lsls	r0, r1, #5
 801426c:	6979      	ldr	r1, [r7, #20]
 801426e:	4401      	add	r1, r0
 8014270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014274:	4313      	orrs	r3, r2
 8014276:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8014278:	79fb      	ldrb	r3, [r7, #7]
 801427a:	2b01      	cmp	r3, #1
 801427c:	d10d      	bne.n	801429a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	691b      	ldr	r3, [r3, #16]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d009      	beq.n	801429a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	6919      	ldr	r1, [r3, #16]
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	015a      	lsls	r2, r3, #5
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	4413      	add	r3, r2
 8014292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014296:	460a      	mov	r2, r1
 8014298:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	015a      	lsls	r2, r3, #5
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	4413      	add	r3, r2
 80142a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	693a      	ldr	r2, [r7, #16]
 80142aa:	0151      	lsls	r1, r2, #5
 80142ac:	697a      	ldr	r2, [r7, #20]
 80142ae:	440a      	add	r2, r1
 80142b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80142b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80142ba:	2300      	movs	r3, #0
}
 80142bc:	4618      	mov	r0, r3
 80142be:	371c      	adds	r7, #28
 80142c0:	46bd      	mov	sp, r7
 80142c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c6:	4770      	bx	lr

080142c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b087      	sub	sp, #28
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80142d2:	2300      	movs	r3, #0
 80142d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80142d6:	2300      	movs	r3, #0
 80142d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	785b      	ldrb	r3, [r3, #1]
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d14a      	bne.n	801437c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	015a      	lsls	r2, r3, #5
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	4413      	add	r3, r2
 80142f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142fe:	f040 8086 	bne.w	801440e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	015a      	lsls	r2, r3, #5
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	4413      	add	r3, r2
 801430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	683a      	ldr	r2, [r7, #0]
 8014314:	7812      	ldrb	r2, [r2, #0]
 8014316:	0151      	lsls	r1, r2, #5
 8014318:	693a      	ldr	r2, [r7, #16]
 801431a:	440a      	add	r2, r1
 801431c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014324:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	015a      	lsls	r2, r3, #5
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	4413      	add	r3, r2
 8014330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	683a      	ldr	r2, [r7, #0]
 8014338:	7812      	ldrb	r2, [r2, #0]
 801433a:	0151      	lsls	r1, r2, #5
 801433c:	693a      	ldr	r2, [r7, #16]
 801433e:	440a      	add	r2, r1
 8014340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014348:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	3301      	adds	r3, #1
 801434e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f242 7210 	movw	r2, #10000	; 0x2710
 8014356:	4293      	cmp	r3, r2
 8014358:	d902      	bls.n	8014360 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801435a:	2301      	movs	r3, #1
 801435c:	75fb      	strb	r3, [r7, #23]
          break;
 801435e:	e056      	b.n	801440e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	015a      	lsls	r2, r3, #5
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	4413      	add	r3, r2
 801436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014378:	d0e7      	beq.n	801434a <USB_EPStopXfer+0x82>
 801437a:	e048      	b.n	801440e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	015a      	lsls	r2, r3, #5
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	4413      	add	r3, r2
 8014386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014394:	d13b      	bne.n	801440e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	015a      	lsls	r2, r3, #5
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	4413      	add	r3, r2
 80143a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	683a      	ldr	r2, [r7, #0]
 80143a8:	7812      	ldrb	r2, [r2, #0]
 80143aa:	0151      	lsls	r1, r2, #5
 80143ac:	693a      	ldr	r2, [r7, #16]
 80143ae:	440a      	add	r2, r1
 80143b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80143b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	015a      	lsls	r2, r3, #5
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	4413      	add	r3, r2
 80143c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	683a      	ldr	r2, [r7, #0]
 80143cc:	7812      	ldrb	r2, [r2, #0]
 80143ce:	0151      	lsls	r1, r2, #5
 80143d0:	693a      	ldr	r2, [r7, #16]
 80143d2:	440a      	add	r2, r1
 80143d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80143dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	3301      	adds	r3, #1
 80143e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80143ea:	4293      	cmp	r3, r2
 80143ec:	d902      	bls.n	80143f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80143ee:	2301      	movs	r3, #1
 80143f0:	75fb      	strb	r3, [r7, #23]
          break;
 80143f2:	e00c      	b.n	801440e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	015a      	lsls	r2, r3, #5
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	4413      	add	r3, r2
 80143fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801440c:	d0e7      	beq.n	80143de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801440e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014410:	4618      	mov	r0, r3
 8014412:	371c      	adds	r7, #28
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr

0801441c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801441c:	b480      	push	{r7}
 801441e:	b089      	sub	sp, #36	; 0x24
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	4611      	mov	r1, r2
 8014428:	461a      	mov	r2, r3
 801442a:	460b      	mov	r3, r1
 801442c:	71fb      	strb	r3, [r7, #7]
 801442e:	4613      	mov	r3, r2
 8014430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801443a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801443e:	2b00      	cmp	r3, #0
 8014440:	d123      	bne.n	801448a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014442:	88bb      	ldrh	r3, [r7, #4]
 8014444:	3303      	adds	r3, #3
 8014446:	089b      	lsrs	r3, r3, #2
 8014448:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801444a:	2300      	movs	r3, #0
 801444c:	61bb      	str	r3, [r7, #24]
 801444e:	e018      	b.n	8014482 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014450:	79fb      	ldrb	r3, [r7, #7]
 8014452:	031a      	lsls	r2, r3, #12
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	4413      	add	r3, r2
 8014458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801445c:	461a      	mov	r2, r3
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014464:	69fb      	ldr	r3, [r7, #28]
 8014466:	3301      	adds	r3, #1
 8014468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801446a:	69fb      	ldr	r3, [r7, #28]
 801446c:	3301      	adds	r3, #1
 801446e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	3301      	adds	r3, #1
 8014474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	3301      	adds	r3, #1
 801447a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	3301      	adds	r3, #1
 8014480:	61bb      	str	r3, [r7, #24]
 8014482:	69ba      	ldr	r2, [r7, #24]
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	429a      	cmp	r2, r3
 8014488:	d3e2      	bcc.n	8014450 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801448a:	2300      	movs	r3, #0
}
 801448c:	4618      	mov	r0, r3
 801448e:	3724      	adds	r7, #36	; 0x24
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr

08014498 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014498:	b480      	push	{r7}
 801449a:	b08b      	sub	sp, #44	; 0x2c
 801449c:	af00      	add	r7, sp, #0
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	4613      	mov	r3, r2
 80144a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80144ae:	88fb      	ldrh	r3, [r7, #6]
 80144b0:	089b      	lsrs	r3, r3, #2
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80144b6:	88fb      	ldrh	r3, [r7, #6]
 80144b8:	f003 0303 	and.w	r3, r3, #3
 80144bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80144be:	2300      	movs	r3, #0
 80144c0:	623b      	str	r3, [r7, #32]
 80144c2:	e014      	b.n	80144ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144ca:	681a      	ldr	r2, [r3, #0]
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80144d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d2:	3301      	adds	r3, #1
 80144d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80144d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d8:	3301      	adds	r3, #1
 80144da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80144dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144de:	3301      	adds	r3, #1
 80144e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80144e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e4:	3301      	adds	r3, #1
 80144e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80144e8:	6a3b      	ldr	r3, [r7, #32]
 80144ea:	3301      	adds	r3, #1
 80144ec:	623b      	str	r3, [r7, #32]
 80144ee:	6a3a      	ldr	r2, [r7, #32]
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d3e6      	bcc.n	80144c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80144f6:	8bfb      	ldrh	r3, [r7, #30]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d01e      	beq.n	801453a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80144fc:	2300      	movs	r3, #0
 80144fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014500:	69bb      	ldr	r3, [r7, #24]
 8014502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014506:	461a      	mov	r2, r3
 8014508:	f107 0310 	add.w	r3, r7, #16
 801450c:	6812      	ldr	r2, [r2, #0]
 801450e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014510:	693a      	ldr	r2, [r7, #16]
 8014512:	6a3b      	ldr	r3, [r7, #32]
 8014514:	b2db      	uxtb	r3, r3
 8014516:	00db      	lsls	r3, r3, #3
 8014518:	fa22 f303 	lsr.w	r3, r2, r3
 801451c:	b2da      	uxtb	r2, r3
 801451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014520:	701a      	strb	r2, [r3, #0]
      i++;
 8014522:	6a3b      	ldr	r3, [r7, #32]
 8014524:	3301      	adds	r3, #1
 8014526:	623b      	str	r3, [r7, #32]
      pDest++;
 8014528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801452a:	3301      	adds	r3, #1
 801452c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801452e:	8bfb      	ldrh	r3, [r7, #30]
 8014530:	3b01      	subs	r3, #1
 8014532:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014534:	8bfb      	ldrh	r3, [r7, #30]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d1ea      	bne.n	8014510 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801453c:	4618      	mov	r0, r3
 801453e:	372c      	adds	r7, #44	; 0x2c
 8014540:	46bd      	mov	sp, r7
 8014542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014546:	4770      	bx	lr

08014548 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014548:	b480      	push	{r7}
 801454a:	b085      	sub	sp, #20
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	785b      	ldrb	r3, [r3, #1]
 8014560:	2b01      	cmp	r3, #1
 8014562:	d12c      	bne.n	80145be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	015a      	lsls	r2, r3, #5
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	4413      	add	r3, r2
 801456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	2b00      	cmp	r3, #0
 8014574:	db12      	blt.n	801459c <USB_EPSetStall+0x54>
 8014576:	68bb      	ldr	r3, [r7, #8]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d00f      	beq.n	801459c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	015a      	lsls	r2, r3, #5
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	4413      	add	r3, r2
 8014584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	68ba      	ldr	r2, [r7, #8]
 801458c:	0151      	lsls	r1, r2, #5
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	440a      	add	r2, r1
 8014592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801459a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	015a      	lsls	r2, r3, #5
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	4413      	add	r3, r2
 80145a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	68ba      	ldr	r2, [r7, #8]
 80145ac:	0151      	lsls	r1, r2, #5
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	440a      	add	r2, r1
 80145b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80145ba:	6013      	str	r3, [r2, #0]
 80145bc:	e02b      	b.n	8014616 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	015a      	lsls	r2, r3, #5
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	4413      	add	r3, r2
 80145c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	db12      	blt.n	80145f6 <USB_EPSetStall+0xae>
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d00f      	beq.n	80145f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	015a      	lsls	r2, r3, #5
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	4413      	add	r3, r2
 80145de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	68ba      	ldr	r2, [r7, #8]
 80145e6:	0151      	lsls	r1, r2, #5
 80145e8:	68fa      	ldr	r2, [r7, #12]
 80145ea:	440a      	add	r2, r1
 80145ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80145f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	015a      	lsls	r2, r3, #5
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	4413      	add	r3, r2
 80145fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	68ba      	ldr	r2, [r7, #8]
 8014606:	0151      	lsls	r1, r2, #5
 8014608:	68fa      	ldr	r2, [r7, #12]
 801460a:	440a      	add	r2, r1
 801460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014614:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014616:	2300      	movs	r3, #0
}
 8014618:	4618      	mov	r0, r3
 801461a:	3714      	adds	r7, #20
 801461c:	46bd      	mov	sp, r7
 801461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014622:	4770      	bx	lr

08014624 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014624:	b480      	push	{r7}
 8014626:	b085      	sub	sp, #20
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	785b      	ldrb	r3, [r3, #1]
 801463c:	2b01      	cmp	r3, #1
 801463e:	d128      	bne.n	8014692 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	015a      	lsls	r2, r3, #5
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	4413      	add	r3, r2
 8014648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	68ba      	ldr	r2, [r7, #8]
 8014650:	0151      	lsls	r1, r2, #5
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	440a      	add	r2, r1
 8014656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801465a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801465e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	791b      	ldrb	r3, [r3, #4]
 8014664:	2b03      	cmp	r3, #3
 8014666:	d003      	beq.n	8014670 <USB_EPClearStall+0x4c>
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	791b      	ldrb	r3, [r3, #4]
 801466c:	2b02      	cmp	r3, #2
 801466e:	d138      	bne.n	80146e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	015a      	lsls	r2, r3, #5
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	4413      	add	r3, r2
 8014678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	68ba      	ldr	r2, [r7, #8]
 8014680:	0151      	lsls	r1, r2, #5
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	440a      	add	r2, r1
 8014686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801468e:	6013      	str	r3, [r2, #0]
 8014690:	e027      	b.n	80146e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	015a      	lsls	r2, r3, #5
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	4413      	add	r3, r2
 801469a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	68ba      	ldr	r2, [r7, #8]
 80146a2:	0151      	lsls	r1, r2, #5
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	440a      	add	r2, r1
 80146a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80146b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	791b      	ldrb	r3, [r3, #4]
 80146b6:	2b03      	cmp	r3, #3
 80146b8:	d003      	beq.n	80146c2 <USB_EPClearStall+0x9e>
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	791b      	ldrb	r3, [r3, #4]
 80146be:	2b02      	cmp	r3, #2
 80146c0:	d10f      	bne.n	80146e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	015a      	lsls	r2, r3, #5
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	4413      	add	r3, r2
 80146ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	68ba      	ldr	r2, [r7, #8]
 80146d2:	0151      	lsls	r1, r2, #5
 80146d4:	68fa      	ldr	r2, [r7, #12]
 80146d6:	440a      	add	r2, r1
 80146d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80146e2:	2300      	movs	r3, #0
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3714      	adds	r7, #20
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr

080146f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80146f0:	b480      	push	{r7}
 80146f2:	b085      	sub	sp, #20
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	460b      	mov	r3, r1
 80146fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	68fa      	ldr	r2, [r7, #12]
 801470a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801470e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014712:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	78fb      	ldrb	r3, [r7, #3]
 801471e:	011b      	lsls	r3, r3, #4
 8014720:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014724:	68f9      	ldr	r1, [r7, #12]
 8014726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801472a:	4313      	orrs	r3, r2
 801472c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801472e:	2300      	movs	r3, #0
}
 8014730:	4618      	mov	r0, r3
 8014732:	3714      	adds	r7, #20
 8014734:	46bd      	mov	sp, r7
 8014736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473a:	4770      	bx	lr

0801473c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801473c:	b480      	push	{r7}
 801473e:	b085      	sub	sp, #20
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	68fa      	ldr	r2, [r7, #12]
 8014752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014756:	f023 0303 	bic.w	r3, r3, #3
 801475a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	68fa      	ldr	r2, [r7, #12]
 8014766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801476a:	f023 0302 	bic.w	r3, r3, #2
 801476e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014770:	2300      	movs	r3, #0
}
 8014772:	4618      	mov	r0, r3
 8014774:	3714      	adds	r7, #20
 8014776:	46bd      	mov	sp, r7
 8014778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477c:	4770      	bx	lr

0801477e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801477e:	b480      	push	{r7}
 8014780:	b085      	sub	sp, #20
 8014782:	af00      	add	r7, sp, #0
 8014784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	68fa      	ldr	r2, [r7, #12]
 8014794:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014798:	f023 0303 	bic.w	r3, r3, #3
 801479c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80147ac:	f043 0302 	orr.w	r3, r3, #2
 80147b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80147b2:	2300      	movs	r3, #0
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3714      	adds	r7, #20
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr

080147c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b085      	sub	sp, #20
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	695b      	ldr	r3, [r3, #20]
 80147cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	699b      	ldr	r3, [r3, #24]
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	4013      	ands	r3, r2
 80147d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80147d8:	68fb      	ldr	r3, [r7, #12]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3714      	adds	r7, #20
 80147de:	46bd      	mov	sp, r7
 80147e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e4:	4770      	bx	lr

080147e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80147e6:	b480      	push	{r7}
 80147e8:	b085      	sub	sp, #20
 80147ea:	af00      	add	r7, sp, #0
 80147ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147f8:	699b      	ldr	r3, [r3, #24]
 80147fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014802:	69db      	ldr	r3, [r3, #28]
 8014804:	68ba      	ldr	r2, [r7, #8]
 8014806:	4013      	ands	r3, r2
 8014808:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	0c1b      	lsrs	r3, r3, #16
}
 801480e:	4618      	mov	r0, r3
 8014810:	3714      	adds	r7, #20
 8014812:	46bd      	mov	sp, r7
 8014814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014818:	4770      	bx	lr

0801481a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801481a:	b480      	push	{r7}
 801481c:	b085      	sub	sp, #20
 801481e:	af00      	add	r7, sp, #0
 8014820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801482c:	699b      	ldr	r3, [r3, #24]
 801482e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014836:	69db      	ldr	r3, [r3, #28]
 8014838:	68ba      	ldr	r2, [r7, #8]
 801483a:	4013      	ands	r3, r2
 801483c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	b29b      	uxth	r3, r3
}
 8014842:	4618      	mov	r0, r3
 8014844:	3714      	adds	r7, #20
 8014846:	46bd      	mov	sp, r7
 8014848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484c:	4770      	bx	lr

0801484e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801484e:	b480      	push	{r7}
 8014850:	b085      	sub	sp, #20
 8014852:	af00      	add	r7, sp, #0
 8014854:	6078      	str	r0, [r7, #4]
 8014856:	460b      	mov	r3, r1
 8014858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801485e:	78fb      	ldrb	r3, [r7, #3]
 8014860:	015a      	lsls	r2, r3, #5
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	4413      	add	r3, r2
 8014866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801486a:	689b      	ldr	r3, [r3, #8]
 801486c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014874:	695b      	ldr	r3, [r3, #20]
 8014876:	68ba      	ldr	r2, [r7, #8]
 8014878:	4013      	ands	r3, r2
 801487a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801487c:	68bb      	ldr	r3, [r7, #8]
}
 801487e:	4618      	mov	r0, r3
 8014880:	3714      	adds	r7, #20
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr

0801488a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801488a:	b480      	push	{r7}
 801488c:	b087      	sub	sp, #28
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
 8014892:	460b      	mov	r3, r1
 8014894:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148a0:	691b      	ldr	r3, [r3, #16]
 80148a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80148ae:	78fb      	ldrb	r3, [r7, #3]
 80148b0:	f003 030f 	and.w	r3, r3, #15
 80148b4:	68fa      	ldr	r2, [r7, #12]
 80148b6:	fa22 f303 	lsr.w	r3, r2, r3
 80148ba:	01db      	lsls	r3, r3, #7
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	693a      	ldr	r2, [r7, #16]
 80148c0:	4313      	orrs	r3, r2
 80148c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80148c4:	78fb      	ldrb	r3, [r7, #3]
 80148c6:	015a      	lsls	r2, r3, #5
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	4413      	add	r3, r2
 80148cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148d0:	689b      	ldr	r3, [r3, #8]
 80148d2:	693a      	ldr	r2, [r7, #16]
 80148d4:	4013      	ands	r3, r2
 80148d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80148d8:	68bb      	ldr	r3, [r7, #8]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	371c      	adds	r7, #28
 80148de:	46bd      	mov	sp, r7
 80148e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e4:	4770      	bx	lr

080148e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80148e6:	b480      	push	{r7}
 80148e8:	b083      	sub	sp, #12
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	695b      	ldr	r3, [r3, #20]
 80148f2:	f003 0301 	and.w	r3, r3, #1
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	370c      	adds	r7, #12
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014902:	b480      	push	{r7}
 8014904:	b085      	sub	sp, #20
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	68fa      	ldr	r2, [r7, #12]
 8014918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801491c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014920:	f023 0307 	bic.w	r3, r3, #7
 8014924:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	68fa      	ldr	r2, [r7, #12]
 8014930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801493a:	2300      	movs	r3, #0
}
 801493c:	4618      	mov	r0, r3
 801493e:	3714      	adds	r7, #20
 8014940:	46bd      	mov	sp, r7
 8014942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014946:	4770      	bx	lr

08014948 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014948:	b480      	push	{r7}
 801494a:	b087      	sub	sp, #28
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	460b      	mov	r3, r1
 8014952:	607a      	str	r2, [r7, #4]
 8014954:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	333c      	adds	r3, #60	; 0x3c
 801495e:	3304      	adds	r3, #4
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	4a26      	ldr	r2, [pc, #152]	; (8014a00 <USB_EP0_OutStart+0xb8>)
 8014968:	4293      	cmp	r3, r2
 801496a:	d90a      	bls.n	8014982 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801497c:	d101      	bne.n	8014982 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801497e:	2300      	movs	r3, #0
 8014980:	e037      	b.n	80149f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014988:	461a      	mov	r2, r3
 801498a:	2300      	movs	r3, #0
 801498c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014994:	691b      	ldr	r3, [r3, #16]
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801499c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80149a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149a8:	691b      	ldr	r3, [r3, #16]
 80149aa:	697a      	ldr	r2, [r7, #20]
 80149ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149b0:	f043 0318 	orr.w	r3, r3, #24
 80149b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80149b6:	697b      	ldr	r3, [r7, #20]
 80149b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149bc:	691b      	ldr	r3, [r3, #16]
 80149be:	697a      	ldr	r2, [r7, #20]
 80149c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80149c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80149ca:	7afb      	ldrb	r3, [r7, #11]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d10f      	bne.n	80149f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149d6:	461a      	mov	r2, r3
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	697a      	ldr	r2, [r7, #20]
 80149e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80149ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80149f0:	2300      	movs	r3, #0
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	371c      	adds	r7, #28
 80149f6:	46bd      	mov	sp, r7
 80149f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fc:	4770      	bx	lr
 80149fe:	bf00      	nop
 8014a00:	4f54300a 	.word	0x4f54300a

08014a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014a04:	b480      	push	{r7}
 8014a06:	b085      	sub	sp, #20
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	3301      	adds	r3, #1
 8014a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	4a13      	ldr	r2, [pc, #76]	; (8014a68 <USB_CoreReset+0x64>)
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d901      	bls.n	8014a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014a1e:	2303      	movs	r3, #3
 8014a20:	e01b      	b.n	8014a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	691b      	ldr	r3, [r3, #16]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	daf2      	bge.n	8014a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	691b      	ldr	r3, [r3, #16]
 8014a32:	f043 0201 	orr.w	r2, r3, #1
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	4a09      	ldr	r2, [pc, #36]	; (8014a68 <USB_CoreReset+0x64>)
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d901      	bls.n	8014a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014a48:	2303      	movs	r3, #3
 8014a4a:	e006      	b.n	8014a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	691b      	ldr	r3, [r3, #16]
 8014a50:	f003 0301 	and.w	r3, r3, #1
 8014a54:	2b01      	cmp	r3, #1
 8014a56:	d0f0      	beq.n	8014a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8014a58:	2300      	movs	r3, #0
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3714      	adds	r7, #20
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr
 8014a66:	bf00      	nop
 8014a68:	00030d40 	.word	0x00030d40

08014a6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	460b      	mov	r3, r1
 8014a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014a78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014a7c:	f002 f9c6 	bl	8016e0c <USBD_static_malloc>
 8014a80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d105      	bne.n	8014a94 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014a90:	2302      	movs	r3, #2
 8014a92:	e066      	b.n	8014b62 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	68fa      	ldr	r2, [r7, #12]
 8014a98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	7c1b      	ldrb	r3, [r3, #16]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d119      	bne.n	8014ad8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014aa8:	2202      	movs	r2, #2
 8014aaa:	2181      	movs	r1, #129	; 0x81
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f002 f870 	bl	8016b92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014abc:	2202      	movs	r2, #2
 8014abe:	2101      	movs	r1, #1
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f002 f866 	bl	8016b92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2210      	movs	r2, #16
 8014ad2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8014ad6:	e016      	b.n	8014b06 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014ad8:	2340      	movs	r3, #64	; 0x40
 8014ada:	2202      	movs	r2, #2
 8014adc:	2181      	movs	r1, #129	; 0x81
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f002 f857 	bl	8016b92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014aea:	2340      	movs	r3, #64	; 0x40
 8014aec:	2202      	movs	r2, #2
 8014aee:	2101      	movs	r1, #1
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f002 f84e 	bl	8016b92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	2201      	movs	r2, #1
 8014afa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	2210      	movs	r2, #16
 8014b02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014b06:	2308      	movs	r3, #8
 8014b08:	2203      	movs	r2, #3
 8014b0a:	2182      	movs	r1, #130	; 0x82
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f002 f840 	bl	8016b92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2201      	movs	r2, #1
 8014b16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	2200      	movs	r2, #0
 8014b28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2200      	movs	r2, #0
 8014b30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	7c1b      	ldrb	r3, [r3, #16]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d109      	bne.n	8014b50 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b46:	2101      	movs	r1, #1
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f002 f911 	bl	8016d70 <USBD_LL_PrepareReceive>
 8014b4e:	e007      	b.n	8014b60 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014b56:	2340      	movs	r3, #64	; 0x40
 8014b58:	2101      	movs	r1, #1
 8014b5a:	6878      	ldr	r0, [r7, #4]
 8014b5c:	f002 f908 	bl	8016d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014b60:	2300      	movs	r3, #0
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3710      	adds	r7, #16
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}

08014b6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b6a:	b580      	push	{r7, lr}
 8014b6c:	b082      	sub	sp, #8
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	460b      	mov	r3, r1
 8014b74:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014b76:	2181      	movs	r1, #129	; 0x81
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f002 f830 	bl	8016bde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2200      	movs	r2, #0
 8014b82:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014b84:	2101      	movs	r1, #1
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f002 f829 	bl	8016bde <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014b94:	2182      	movs	r1, #130	; 0x82
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f002 f821 	bl	8016bde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00e      	beq.n	8014bd4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f002 f92e 	bl	8016e28 <USBD_static_free>
    pdev->pClassData = NULL;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
	...

08014be0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b086      	sub	sp, #24
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014bf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014bfe:	693b      	ldr	r3, [r7, #16]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d101      	bne.n	8014c08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014c04:	2303      	movs	r3, #3
 8014c06:	e0af      	b.n	8014d68 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d03f      	beq.n	8014c94 <USBD_CDC_Setup+0xb4>
 8014c14:	2b20      	cmp	r3, #32
 8014c16:	f040 809f 	bne.w	8014d58 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	88db      	ldrh	r3, [r3, #6]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d02e      	beq.n	8014c80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	b25b      	sxtb	r3, r3
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	da16      	bge.n	8014c5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c32:	689b      	ldr	r3, [r3, #8]
 8014c34:	683a      	ldr	r2, [r7, #0]
 8014c36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014c38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014c3a:	683a      	ldr	r2, [r7, #0]
 8014c3c:	88d2      	ldrh	r2, [r2, #6]
 8014c3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	88db      	ldrh	r3, [r3, #6]
 8014c44:	2b07      	cmp	r3, #7
 8014c46:	bf28      	it	cs
 8014c48:	2307      	movcs	r3, #7
 8014c4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	89fa      	ldrh	r2, [r7, #14]
 8014c50:	4619      	mov	r1, r3
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f001 fb19 	bl	801628a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014c58:	e085      	b.n	8014d66 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	785a      	ldrb	r2, [r3, #1]
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	88db      	ldrh	r3, [r3, #6]
 8014c68:	b2da      	uxtb	r2, r3
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014c70:	6939      	ldr	r1, [r7, #16]
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	88db      	ldrh	r3, [r3, #6]
 8014c76:	461a      	mov	r2, r3
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f001 fb32 	bl	80162e2 <USBD_CtlPrepareRx>
      break;
 8014c7e:	e072      	b.n	8014d66 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c86:	689b      	ldr	r3, [r3, #8]
 8014c88:	683a      	ldr	r2, [r7, #0]
 8014c8a:	7850      	ldrb	r0, [r2, #1]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	6839      	ldr	r1, [r7, #0]
 8014c90:	4798      	blx	r3
      break;
 8014c92:	e068      	b.n	8014d66 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	785b      	ldrb	r3, [r3, #1]
 8014c98:	2b0b      	cmp	r3, #11
 8014c9a:	d852      	bhi.n	8014d42 <USBD_CDC_Setup+0x162>
 8014c9c:	a201      	add	r2, pc, #4	; (adr r2, 8014ca4 <USBD_CDC_Setup+0xc4>)
 8014c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ca2:	bf00      	nop
 8014ca4:	08014cd5 	.word	0x08014cd5
 8014ca8:	08014d51 	.word	0x08014d51
 8014cac:	08014d43 	.word	0x08014d43
 8014cb0:	08014d43 	.word	0x08014d43
 8014cb4:	08014d43 	.word	0x08014d43
 8014cb8:	08014d43 	.word	0x08014d43
 8014cbc:	08014d43 	.word	0x08014d43
 8014cc0:	08014d43 	.word	0x08014d43
 8014cc4:	08014d43 	.word	0x08014d43
 8014cc8:	08014d43 	.word	0x08014d43
 8014ccc:	08014cff 	.word	0x08014cff
 8014cd0:	08014d29 	.word	0x08014d29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	2b03      	cmp	r3, #3
 8014cde:	d107      	bne.n	8014cf0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014ce0:	f107 030a 	add.w	r3, r7, #10
 8014ce4:	2202      	movs	r2, #2
 8014ce6:	4619      	mov	r1, r3
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f001 face 	bl	801628a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014cee:	e032      	b.n	8014d56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014cf0:	6839      	ldr	r1, [r7, #0]
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f001 fa58 	bl	80161a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8014cf8:	2303      	movs	r3, #3
 8014cfa:	75fb      	strb	r3, [r7, #23]
          break;
 8014cfc:	e02b      	b.n	8014d56 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	2b03      	cmp	r3, #3
 8014d08:	d107      	bne.n	8014d1a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014d0a:	f107 030d 	add.w	r3, r7, #13
 8014d0e:	2201      	movs	r2, #1
 8014d10:	4619      	mov	r1, r3
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f001 fab9 	bl	801628a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d18:	e01d      	b.n	8014d56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014d1a:	6839      	ldr	r1, [r7, #0]
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f001 fa43 	bl	80161a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d22:	2303      	movs	r3, #3
 8014d24:	75fb      	strb	r3, [r7, #23]
          break;
 8014d26:	e016      	b.n	8014d56 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d2e:	b2db      	uxtb	r3, r3
 8014d30:	2b03      	cmp	r3, #3
 8014d32:	d00f      	beq.n	8014d54 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014d34:	6839      	ldr	r1, [r7, #0]
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f001 fa36 	bl	80161a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d3c:	2303      	movs	r3, #3
 8014d3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014d40:	e008      	b.n	8014d54 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014d42:	6839      	ldr	r1, [r7, #0]
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f001 fa2f 	bl	80161a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8014d4a:	2303      	movs	r3, #3
 8014d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8014d4e:	e002      	b.n	8014d56 <USBD_CDC_Setup+0x176>
          break;
 8014d50:	bf00      	nop
 8014d52:	e008      	b.n	8014d66 <USBD_CDC_Setup+0x186>
          break;
 8014d54:	bf00      	nop
      }
      break;
 8014d56:	e006      	b.n	8014d66 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014d58:	6839      	ldr	r1, [r7, #0]
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f001 fa24 	bl	80161a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8014d60:	2303      	movs	r3, #3
 8014d62:	75fb      	strb	r3, [r7, #23]
      break;
 8014d64:	bf00      	nop
  }

  return (uint8_t)ret;
 8014d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3718      	adds	r7, #24
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b084      	sub	sp, #16
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	460b      	mov	r3, r1
 8014d7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d101      	bne.n	8014d92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014d8e:	2303      	movs	r3, #3
 8014d90:	e04f      	b.n	8014e32 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014d9a:	78fa      	ldrb	r2, [r7, #3]
 8014d9c:	6879      	ldr	r1, [r7, #4]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	4413      	add	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	440b      	add	r3, r1
 8014da8:	3318      	adds	r3, #24
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d029      	beq.n	8014e04 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014db0:	78fa      	ldrb	r2, [r7, #3]
 8014db2:	6879      	ldr	r1, [r7, #4]
 8014db4:	4613      	mov	r3, r2
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	4413      	add	r3, r2
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	440b      	add	r3, r1
 8014dbe:	3318      	adds	r3, #24
 8014dc0:	681a      	ldr	r2, [r3, #0]
 8014dc2:	78f9      	ldrb	r1, [r7, #3]
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	00db      	lsls	r3, r3, #3
 8014dca:	440b      	add	r3, r1
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	4403      	add	r3, r0
 8014dd0:	3348      	adds	r3, #72	; 0x48
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8014dd8:	fb01 f303 	mul.w	r3, r1, r3
 8014ddc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d110      	bne.n	8014e04 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8014de2:	78fa      	ldrb	r2, [r7, #3]
 8014de4:	6879      	ldr	r1, [r7, #4]
 8014de6:	4613      	mov	r3, r2
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	4413      	add	r3, r2
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	440b      	add	r3, r1
 8014df0:	3318      	adds	r3, #24
 8014df2:	2200      	movs	r2, #0
 8014df4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014df6:	78f9      	ldrb	r1, [r7, #3]
 8014df8:	2300      	movs	r3, #0
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f001 ff96 	bl	8016d2e <USBD_LL_Transmit>
 8014e02:	e015      	b.n	8014e30 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	2200      	movs	r2, #0
 8014e08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d00b      	beq.n	8014e30 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e1e:	691b      	ldr	r3, [r3, #16]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014e26:	68ba      	ldr	r2, [r7, #8]
 8014e28:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014e2c:	78fa      	ldrb	r2, [r7, #3]
 8014e2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014e30:	2300      	movs	r3, #0
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3710      	adds	r7, #16
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b084      	sub	sp, #16
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
 8014e42:	460b      	mov	r3, r1
 8014e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014e58:	2303      	movs	r3, #3
 8014e5a:	e015      	b.n	8014e88 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014e5c:	78fb      	ldrb	r3, [r7, #3]
 8014e5e:	4619      	mov	r1, r3
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f001 ffa6 	bl	8016db2 <USBD_LL_GetRxDataSize>
 8014e66:	4602      	mov	r2, r0
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e74:	68db      	ldr	r3, [r3, #12]
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014e7c:	68fa      	ldr	r2, [r7, #12]
 8014e7e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014e82:	4611      	mov	r1, r2
 8014e84:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014e86:	2300      	movs	r3, #0
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3710      	adds	r7, #16
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d101      	bne.n	8014eaa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8014ea6:	2303      	movs	r3, #3
 8014ea8:	e01b      	b.n	8014ee2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d015      	beq.n	8014ee0 <USBD_CDC_EP0_RxReady+0x50>
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014eba:	2bff      	cmp	r3, #255	; 0xff
 8014ebc:	d010      	beq.n	8014ee0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ec4:	689b      	ldr	r3, [r3, #8]
 8014ec6:	68fa      	ldr	r2, [r7, #12]
 8014ec8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8014ecc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014ece:	68fa      	ldr	r2, [r7, #12]
 8014ed0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014ed4:	b292      	uxth	r2, r2
 8014ed6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	22ff      	movs	r2, #255	; 0xff
 8014edc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014ee0:	2300      	movs	r3, #0
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3710      	adds	r7, #16
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
	...

08014eec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2243      	movs	r2, #67	; 0x43
 8014ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014efa:	4b03      	ldr	r3, [pc, #12]	; (8014f08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	370c      	adds	r7, #12
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr
 8014f08:	20000114 	.word	0x20000114

08014f0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2243      	movs	r2, #67	; 0x43
 8014f18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8014f1a:	4b03      	ldr	r3, [pc, #12]	; (8014f28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	370c      	adds	r7, #12
 8014f20:	46bd      	mov	sp, r7
 8014f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f26:	4770      	bx	lr
 8014f28:	200000d0 	.word	0x200000d0

08014f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b083      	sub	sp, #12
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2243      	movs	r2, #67	; 0x43
 8014f38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8014f3a:	4b03      	ldr	r3, [pc, #12]	; (8014f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	370c      	adds	r7, #12
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr
 8014f48:	20000158 	.word	0x20000158

08014f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014f4c:	b480      	push	{r7}
 8014f4e:	b083      	sub	sp, #12
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	220a      	movs	r2, #10
 8014f58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014f5a:	4b03      	ldr	r3, [pc, #12]	; (8014f68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	370c      	adds	r7, #12
 8014f60:	46bd      	mov	sp, r7
 8014f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f66:	4770      	bx	lr
 8014f68:	2000008c 	.word	0x2000008c

08014f6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	b083      	sub	sp, #12
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d101      	bne.n	8014f80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014f7c:	2303      	movs	r3, #3
 8014f7e:	e004      	b.n	8014f8a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	683a      	ldr	r2, [r7, #0]
 8014f84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014f88:	2300      	movs	r3, #0
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	370c      	adds	r7, #12
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr

08014f96 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014f96:	b480      	push	{r7}
 8014f98:	b087      	sub	sp, #28
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	60f8      	str	r0, [r7, #12]
 8014f9e:	60b9      	str	r1, [r7, #8]
 8014fa0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fa8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d101      	bne.n	8014fb4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014fb0:	2303      	movs	r3, #3
 8014fb2:	e008      	b.n	8014fc6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	68ba      	ldr	r2, [r7, #8]
 8014fb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	687a      	ldr	r2, [r7, #4]
 8014fc0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014fc4:	2300      	movs	r3, #0
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	371c      	adds	r7, #28
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr

08014fd2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014fd2:	b480      	push	{r7}
 8014fd4:	b085      	sub	sp, #20
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
 8014fda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fe2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d101      	bne.n	8014fee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8014fea:	2303      	movs	r3, #3
 8014fec:	e004      	b.n	8014ff8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	683a      	ldr	r2, [r7, #0]
 8014ff2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014ff6:	2300      	movs	r3, #0
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3714      	adds	r7, #20
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr

08015004 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015012:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8015014:	2301      	movs	r3, #1
 8015016:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801501e:	2b00      	cmp	r3, #0
 8015020:	d101      	bne.n	8015026 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015022:	2303      	movs	r3, #3
 8015024:	e01a      	b.n	801505c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801502c:	2b00      	cmp	r3, #0
 801502e:	d114      	bne.n	801505a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	2201      	movs	r2, #1
 8015034:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801504e:	2181      	movs	r1, #129	; 0x81
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f001 fe6c 	bl	8016d2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015056:	2300      	movs	r3, #0
 8015058:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801505a:	7bfb      	ldrb	r3, [r7, #15]
}
 801505c:	4618      	mov	r0, r3
 801505e:	3710      	adds	r7, #16
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}

08015064 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015072:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801507a:	2b00      	cmp	r3, #0
 801507c:	d101      	bne.n	8015082 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801507e:	2303      	movs	r3, #3
 8015080:	e016      	b.n	80150b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	7c1b      	ldrb	r3, [r3, #16]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d109      	bne.n	801509e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015094:	2101      	movs	r1, #1
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f001 fe6a 	bl	8016d70 <USBD_LL_PrepareReceive>
 801509c:	e007      	b.n	80150ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80150a4:	2340      	movs	r3, #64	; 0x40
 80150a6:	2101      	movs	r1, #1
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	f001 fe61 	bl	8016d70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80150ae:	2300      	movs	r3, #0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3710      	adds	r7, #16
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b086      	sub	sp, #24
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	4613      	mov	r3, r2
 80150c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d101      	bne.n	80150d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80150cc:	2303      	movs	r3, #3
 80150ce:	e01f      	b.n	8015110 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2200      	movs	r2, #0
 80150d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2200      	movs	r2, #0
 80150dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2200      	movs	r2, #0
 80150e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d003      	beq.n	80150f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	68ba      	ldr	r2, [r7, #8]
 80150f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	2201      	movs	r2, #1
 80150fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	79fa      	ldrb	r2, [r7, #7]
 8015102:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015104:	68f8      	ldr	r0, [r7, #12]
 8015106:	f001 fcc1 	bl	8016a8c <USBD_LL_Init>
 801510a:	4603      	mov	r3, r0
 801510c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801510e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015110:	4618      	mov	r0, r3
 8015112:	3718      	adds	r7, #24
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
 8015120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015122:	2300      	movs	r3, #0
 8015124:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d101      	bne.n	8015130 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801512c:	2303      	movs	r3, #3
 801512e:	e016      	b.n	801515e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	683a      	ldr	r2, [r7, #0]
 8015134:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015140:	2b00      	cmp	r3, #0
 8015142:	d00b      	beq.n	801515c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801514c:	f107 020e 	add.w	r2, r7, #14
 8015150:	4610      	mov	r0, r2
 8015152:	4798      	blx	r3
 8015154:	4602      	mov	r2, r0
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801515c:	2300      	movs	r3, #0
}
 801515e:	4618      	mov	r0, r3
 8015160:	3710      	adds	r7, #16
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b082      	sub	sp, #8
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f001 fcf4 	bl	8016b5c <USBD_LL_Start>
 8015174:	4603      	mov	r3, r0
}
 8015176:	4618      	mov	r0, r3
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}

0801517e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801517e:	b480      	push	{r7}
 8015180:	b083      	sub	sp, #12
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015186:	2300      	movs	r3, #0
}
 8015188:	4618      	mov	r0, r3
 801518a:	370c      	adds	r7, #12
 801518c:	46bd      	mov	sp, r7
 801518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015192:	4770      	bx	lr

08015194 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	460b      	mov	r3, r1
 801519e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80151a0:	2303      	movs	r3, #3
 80151a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d009      	beq.n	80151c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	78fa      	ldrb	r2, [r7, #3]
 80151b8:	4611      	mov	r1, r2
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	4798      	blx	r3
 80151be:	4603      	mov	r3, r0
 80151c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80151c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3710      	adds	r7, #16
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	460b      	mov	r3, r1
 80151d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d007      	beq.n	80151f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	78fa      	ldrb	r2, [r7, #3]
 80151ec:	4611      	mov	r1, r2
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	4798      	blx	r3
  }

  return USBD_OK;
 80151f2:	2300      	movs	r3, #0
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3708      	adds	r7, #8
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}

080151fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b084      	sub	sp, #16
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801520c:	6839      	ldr	r1, [r7, #0]
 801520e:	4618      	mov	r0, r3
 8015210:	f000 ff90 	bl	8016134 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2201      	movs	r2, #1
 8015218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015222:	461a      	mov	r2, r3
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015230:	f003 031f 	and.w	r3, r3, #31
 8015234:	2b02      	cmp	r3, #2
 8015236:	d01a      	beq.n	801526e <USBD_LL_SetupStage+0x72>
 8015238:	2b02      	cmp	r3, #2
 801523a:	d822      	bhi.n	8015282 <USBD_LL_SetupStage+0x86>
 801523c:	2b00      	cmp	r3, #0
 801523e:	d002      	beq.n	8015246 <USBD_LL_SetupStage+0x4a>
 8015240:	2b01      	cmp	r3, #1
 8015242:	d00a      	beq.n	801525a <USBD_LL_SetupStage+0x5e>
 8015244:	e01d      	b.n	8015282 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801524c:	4619      	mov	r1, r3
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f000 fa62 	bl	8015718 <USBD_StdDevReq>
 8015254:	4603      	mov	r3, r0
 8015256:	73fb      	strb	r3, [r7, #15]
      break;
 8015258:	e020      	b.n	801529c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015260:	4619      	mov	r1, r3
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f000 fac6 	bl	80157f4 <USBD_StdItfReq>
 8015268:	4603      	mov	r3, r0
 801526a:	73fb      	strb	r3, [r7, #15]
      break;
 801526c:	e016      	b.n	801529c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015274:	4619      	mov	r1, r3
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f000 fb05 	bl	8015886 <USBD_StdEPReq>
 801527c:	4603      	mov	r3, r0
 801527e:	73fb      	strb	r3, [r7, #15]
      break;
 8015280:	e00c      	b.n	801529c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801528c:	b2db      	uxtb	r3, r3
 801528e:	4619      	mov	r1, r3
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f001 fcc3 	bl	8016c1c <USBD_LL_StallEP>
 8015296:	4603      	mov	r3, r0
 8015298:	73fb      	strb	r3, [r7, #15]
      break;
 801529a:	bf00      	nop
  }

  return ret;
 801529c:	7bfb      	ldrb	r3, [r7, #15]
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3710      	adds	r7, #16
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b086      	sub	sp, #24
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	60f8      	str	r0, [r7, #12]
 80152ae:	460b      	mov	r3, r1
 80152b0:	607a      	str	r2, [r7, #4]
 80152b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80152b4:	7afb      	ldrb	r3, [r7, #11]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d138      	bne.n	801532c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80152c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80152c8:	2b03      	cmp	r3, #3
 80152ca:	d14a      	bne.n	8015362 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	689a      	ldr	r2, [r3, #8]
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d913      	bls.n	8015300 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	689a      	ldr	r2, [r3, #8]
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	1ad2      	subs	r2, r2, r3
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	68da      	ldr	r2, [r3, #12]
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	689b      	ldr	r3, [r3, #8]
 80152ee:	4293      	cmp	r3, r2
 80152f0:	bf28      	it	cs
 80152f2:	4613      	movcs	r3, r2
 80152f4:	461a      	mov	r2, r3
 80152f6:	6879      	ldr	r1, [r7, #4]
 80152f8:	68f8      	ldr	r0, [r7, #12]
 80152fa:	f001 f80f 	bl	801631c <USBD_CtlContinueRx>
 80152fe:	e030      	b.n	8015362 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015306:	b2db      	uxtb	r3, r3
 8015308:	2b03      	cmp	r3, #3
 801530a:	d10b      	bne.n	8015324 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015312:	691b      	ldr	r3, [r3, #16]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d005      	beq.n	8015324 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801531e:	691b      	ldr	r3, [r3, #16]
 8015320:	68f8      	ldr	r0, [r7, #12]
 8015322:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f001 f80a 	bl	801633e <USBD_CtlSendStatus>
 801532a:	e01a      	b.n	8015362 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015332:	b2db      	uxtb	r3, r3
 8015334:	2b03      	cmp	r3, #3
 8015336:	d114      	bne.n	8015362 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801533e:	699b      	ldr	r3, [r3, #24]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d00e      	beq.n	8015362 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801534a:	699b      	ldr	r3, [r3, #24]
 801534c:	7afa      	ldrb	r2, [r7, #11]
 801534e:	4611      	mov	r1, r2
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	4798      	blx	r3
 8015354:	4603      	mov	r3, r0
 8015356:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015358:	7dfb      	ldrb	r3, [r7, #23]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d001      	beq.n	8015362 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801535e:	7dfb      	ldrb	r3, [r7, #23]
 8015360:	e000      	b.n	8015364 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8015362:	2300      	movs	r3, #0
}
 8015364:	4618      	mov	r0, r3
 8015366:	3718      	adds	r7, #24
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b086      	sub	sp, #24
 8015370:	af00      	add	r7, sp, #0
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	460b      	mov	r3, r1
 8015376:	607a      	str	r2, [r7, #4]
 8015378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801537a:	7afb      	ldrb	r3, [r7, #11]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d16b      	bne.n	8015458 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	3314      	adds	r3, #20
 8015384:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801538c:	2b02      	cmp	r3, #2
 801538e:	d156      	bne.n	801543e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	689a      	ldr	r2, [r3, #8]
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	429a      	cmp	r2, r3
 801539a:	d914      	bls.n	80153c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	689a      	ldr	r2, [r3, #8]
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	1ad2      	subs	r2, r2, r3
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	689b      	ldr	r3, [r3, #8]
 80153ae:	461a      	mov	r2, r3
 80153b0:	6879      	ldr	r1, [r7, #4]
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f000 ff84 	bl	80162c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153b8:	2300      	movs	r3, #0
 80153ba:	2200      	movs	r2, #0
 80153bc:	2100      	movs	r1, #0
 80153be:	68f8      	ldr	r0, [r7, #12]
 80153c0:	f001 fcd6 	bl	8016d70 <USBD_LL_PrepareReceive>
 80153c4:	e03b      	b.n	801543e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	68da      	ldr	r2, [r3, #12]
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	689b      	ldr	r3, [r3, #8]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d11c      	bne.n	801540c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	685a      	ldr	r2, [r3, #4]
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80153da:	429a      	cmp	r2, r3
 80153dc:	d316      	bcc.n	801540c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	685a      	ldr	r2, [r3, #4]
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d20f      	bcs.n	801540c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80153ec:	2200      	movs	r2, #0
 80153ee:	2100      	movs	r1, #0
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f000 ff65 	bl	80162c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	2200      	movs	r2, #0
 80153fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153fe:	2300      	movs	r3, #0
 8015400:	2200      	movs	r2, #0
 8015402:	2100      	movs	r1, #0
 8015404:	68f8      	ldr	r0, [r7, #12]
 8015406:	f001 fcb3 	bl	8016d70 <USBD_LL_PrepareReceive>
 801540a:	e018      	b.n	801543e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015412:	b2db      	uxtb	r3, r3
 8015414:	2b03      	cmp	r3, #3
 8015416:	d10b      	bne.n	8015430 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d005      	beq.n	8015430 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801542a:	68db      	ldr	r3, [r3, #12]
 801542c:	68f8      	ldr	r0, [r7, #12]
 801542e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015430:	2180      	movs	r1, #128	; 0x80
 8015432:	68f8      	ldr	r0, [r7, #12]
 8015434:	f001 fbf2 	bl	8016c1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015438:	68f8      	ldr	r0, [r7, #12]
 801543a:	f000 ff93 	bl	8016364 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015444:	2b01      	cmp	r3, #1
 8015446:	d122      	bne.n	801548e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015448:	68f8      	ldr	r0, [r7, #12]
 801544a:	f7ff fe98 	bl	801517e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	2200      	movs	r2, #0
 8015452:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015456:	e01a      	b.n	801548e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801545e:	b2db      	uxtb	r3, r3
 8015460:	2b03      	cmp	r3, #3
 8015462:	d114      	bne.n	801548e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801546a:	695b      	ldr	r3, [r3, #20]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d00e      	beq.n	801548e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015476:	695b      	ldr	r3, [r3, #20]
 8015478:	7afa      	ldrb	r2, [r7, #11]
 801547a:	4611      	mov	r1, r2
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	4798      	blx	r3
 8015480:	4603      	mov	r3, r0
 8015482:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015484:	7dfb      	ldrb	r3, [r7, #23]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d001      	beq.n	801548e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801548a:	7dfb      	ldrb	r3, [r7, #23]
 801548c:	e000      	b.n	8015490 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801548e:	2300      	movs	r3, #0
}
 8015490:	4618      	mov	r0, r3
 8015492:	3718      	adds	r7, #24
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}

08015498 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b082      	sub	sp, #8
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2201      	movs	r2, #1
 80154a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2200      	movs	r2, #0
 80154b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2200      	movs	r2, #0
 80154ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d101      	bne.n	80154cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80154c8:	2303      	movs	r3, #3
 80154ca:	e02f      	b.n	801552c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d00f      	beq.n	80154f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d009      	beq.n	80154f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	6852      	ldr	r2, [r2, #4]
 80154ee:	b2d2      	uxtb	r2, r2
 80154f0:	4611      	mov	r1, r2
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154f6:	2340      	movs	r3, #64	; 0x40
 80154f8:	2200      	movs	r2, #0
 80154fa:	2100      	movs	r1, #0
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f001 fb48 	bl	8016b92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2201      	movs	r2, #1
 8015506:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2240      	movs	r2, #64	; 0x40
 801550e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015512:	2340      	movs	r3, #64	; 0x40
 8015514:	2200      	movs	r2, #0
 8015516:	2180      	movs	r1, #128	; 0x80
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f001 fb3a 	bl	8016b92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2201      	movs	r2, #1
 8015522:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2240      	movs	r2, #64	; 0x40
 8015528:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801552a:	2300      	movs	r3, #0
}
 801552c:	4618      	mov	r0, r3
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	460b      	mov	r3, r1
 801553e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	78fa      	ldrb	r2, [r7, #3]
 8015544:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015546:	2300      	movs	r3, #0
}
 8015548:	4618      	mov	r0, r3
 801554a:	370c      	adds	r7, #12
 801554c:	46bd      	mov	sp, r7
 801554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015552:	4770      	bx	lr

08015554 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015562:	b2da      	uxtb	r2, r3
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2204      	movs	r2, #4
 801556e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015572:	2300      	movs	r3, #0
}
 8015574:	4618      	mov	r0, r3
 8015576:	370c      	adds	r7, #12
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr

08015580 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015580:	b480      	push	{r7}
 8015582:	b083      	sub	sp, #12
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801558e:	b2db      	uxtb	r3, r3
 8015590:	2b04      	cmp	r3, #4
 8015592:	d106      	bne.n	80155a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801559a:	b2da      	uxtb	r2, r3
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80155a2:	2300      	movs	r3, #0
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	370c      	adds	r7, #12
 80155a8:	46bd      	mov	sp, r7
 80155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ae:	4770      	bx	lr

080155b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d101      	bne.n	80155c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80155c2:	2303      	movs	r3, #3
 80155c4:	e012      	b.n	80155ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	2b03      	cmp	r3, #3
 80155d0:	d10b      	bne.n	80155ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155d8:	69db      	ldr	r3, [r3, #28]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d005      	beq.n	80155ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155e4:	69db      	ldr	r3, [r3, #28]
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80155ea:	2300      	movs	r3, #0
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3708      	adds	r7, #8
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
 80155fc:	460b      	mov	r3, r1
 80155fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015606:	2b00      	cmp	r3, #0
 8015608:	d101      	bne.n	801560e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801560a:	2303      	movs	r3, #3
 801560c:	e014      	b.n	8015638 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015614:	b2db      	uxtb	r3, r3
 8015616:	2b03      	cmp	r3, #3
 8015618:	d10d      	bne.n	8015636 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015620:	6a1b      	ldr	r3, [r3, #32]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d007      	beq.n	8015636 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801562c:	6a1b      	ldr	r3, [r3, #32]
 801562e:	78fa      	ldrb	r2, [r7, #3]
 8015630:	4611      	mov	r1, r2
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015636:	2300      	movs	r3, #0
}
 8015638:	4618      	mov	r0, r3
 801563a:	3708      	adds	r7, #8
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}

08015640 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	460b      	mov	r3, r1
 801564a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015652:	2b00      	cmp	r3, #0
 8015654:	d101      	bne.n	801565a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8015656:	2303      	movs	r3, #3
 8015658:	e014      	b.n	8015684 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015660:	b2db      	uxtb	r3, r3
 8015662:	2b03      	cmp	r3, #3
 8015664:	d10d      	bne.n	8015682 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801566e:	2b00      	cmp	r3, #0
 8015670:	d007      	beq.n	8015682 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801567a:	78fa      	ldrb	r2, [r7, #3]
 801567c:	4611      	mov	r1, r2
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015682:	2300      	movs	r3, #0
}
 8015684:	4618      	mov	r0, r3
 8015686:	3708      	adds	r7, #8
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801568c:	b480      	push	{r7}
 801568e:	b083      	sub	sp, #12
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015694:	2300      	movs	r3, #0
}
 8015696:	4618      	mov	r0, r3
 8015698:	370c      	adds	r7, #12
 801569a:	46bd      	mov	sp, r7
 801569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a0:	4770      	bx	lr

080156a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156a2:	b580      	push	{r7, lr}
 80156a4:	b082      	sub	sp, #8
 80156a6:	af00      	add	r7, sp, #0
 80156a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2201      	movs	r2, #1
 80156ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d009      	beq.n	80156d0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	6852      	ldr	r2, [r2, #4]
 80156c8:	b2d2      	uxtb	r2, r2
 80156ca:	4611      	mov	r1, r2
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	4798      	blx	r3
  }

  return USBD_OK;
 80156d0:	2300      	movs	r3, #0
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3708      	adds	r7, #8
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}

080156da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80156da:	b480      	push	{r7}
 80156dc:	b087      	sub	sp, #28
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	3301      	adds	r3, #1
 80156f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80156f8:	8a3b      	ldrh	r3, [r7, #16]
 80156fa:	021b      	lsls	r3, r3, #8
 80156fc:	b21a      	sxth	r2, r3
 80156fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015702:	4313      	orrs	r3, r2
 8015704:	b21b      	sxth	r3, r3
 8015706:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015708:	89fb      	ldrh	r3, [r7, #14]
}
 801570a:	4618      	mov	r0, r3
 801570c:	371c      	adds	r7, #28
 801570e:	46bd      	mov	sp, r7
 8015710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015714:	4770      	bx	lr
	...

08015718 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b084      	sub	sp, #16
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015722:	2300      	movs	r3, #0
 8015724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801572e:	2b40      	cmp	r3, #64	; 0x40
 8015730:	d005      	beq.n	801573e <USBD_StdDevReq+0x26>
 8015732:	2b40      	cmp	r3, #64	; 0x40
 8015734:	d853      	bhi.n	80157de <USBD_StdDevReq+0xc6>
 8015736:	2b00      	cmp	r3, #0
 8015738:	d00b      	beq.n	8015752 <USBD_StdDevReq+0x3a>
 801573a:	2b20      	cmp	r3, #32
 801573c:	d14f      	bne.n	80157de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015744:	689b      	ldr	r3, [r3, #8]
 8015746:	6839      	ldr	r1, [r7, #0]
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	4798      	blx	r3
 801574c:	4603      	mov	r3, r0
 801574e:	73fb      	strb	r3, [r7, #15]
      break;
 8015750:	e04a      	b.n	80157e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	785b      	ldrb	r3, [r3, #1]
 8015756:	2b09      	cmp	r3, #9
 8015758:	d83b      	bhi.n	80157d2 <USBD_StdDevReq+0xba>
 801575a:	a201      	add	r2, pc, #4	; (adr r2, 8015760 <USBD_StdDevReq+0x48>)
 801575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015760:	080157b5 	.word	0x080157b5
 8015764:	080157c9 	.word	0x080157c9
 8015768:	080157d3 	.word	0x080157d3
 801576c:	080157bf 	.word	0x080157bf
 8015770:	080157d3 	.word	0x080157d3
 8015774:	08015793 	.word	0x08015793
 8015778:	08015789 	.word	0x08015789
 801577c:	080157d3 	.word	0x080157d3
 8015780:	080157ab 	.word	0x080157ab
 8015784:	0801579d 	.word	0x0801579d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015788:	6839      	ldr	r1, [r7, #0]
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f000 f9de 	bl	8015b4c <USBD_GetDescriptor>
          break;
 8015790:	e024      	b.n	80157dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015792:	6839      	ldr	r1, [r7, #0]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 fb43 	bl	8015e20 <USBD_SetAddress>
          break;
 801579a:	e01f      	b.n	80157dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801579c:	6839      	ldr	r1, [r7, #0]
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f000 fb82 	bl	8015ea8 <USBD_SetConfig>
 80157a4:	4603      	mov	r3, r0
 80157a6:	73fb      	strb	r3, [r7, #15]
          break;
 80157a8:	e018      	b.n	80157dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80157aa:	6839      	ldr	r1, [r7, #0]
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f000 fc21 	bl	8015ff4 <USBD_GetConfig>
          break;
 80157b2:	e013      	b.n	80157dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80157b4:	6839      	ldr	r1, [r7, #0]
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 fc52 	bl	8016060 <USBD_GetStatus>
          break;
 80157bc:	e00e      	b.n	80157dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80157be:	6839      	ldr	r1, [r7, #0]
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f000 fc81 	bl	80160c8 <USBD_SetFeature>
          break;
 80157c6:	e009      	b.n	80157dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80157c8:	6839      	ldr	r1, [r7, #0]
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f000 fc90 	bl	80160f0 <USBD_ClrFeature>
          break;
 80157d0:	e004      	b.n	80157dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80157d2:	6839      	ldr	r1, [r7, #0]
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f000 fce7 	bl	80161a8 <USBD_CtlError>
          break;
 80157da:	bf00      	nop
      }
      break;
 80157dc:	e004      	b.n	80157e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80157de:	6839      	ldr	r1, [r7, #0]
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f000 fce1 	bl	80161a8 <USBD_CtlError>
      break;
 80157e6:	bf00      	nop
  }

  return ret;
 80157e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	3710      	adds	r7, #16
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	bf00      	nop

080157f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80157fe:	2300      	movs	r3, #0
 8015800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801580a:	2b40      	cmp	r3, #64	; 0x40
 801580c:	d005      	beq.n	801581a <USBD_StdItfReq+0x26>
 801580e:	2b40      	cmp	r3, #64	; 0x40
 8015810:	d82f      	bhi.n	8015872 <USBD_StdItfReq+0x7e>
 8015812:	2b00      	cmp	r3, #0
 8015814:	d001      	beq.n	801581a <USBD_StdItfReq+0x26>
 8015816:	2b20      	cmp	r3, #32
 8015818:	d12b      	bne.n	8015872 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015820:	b2db      	uxtb	r3, r3
 8015822:	3b01      	subs	r3, #1
 8015824:	2b02      	cmp	r3, #2
 8015826:	d81d      	bhi.n	8015864 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	889b      	ldrh	r3, [r3, #4]
 801582c:	b2db      	uxtb	r3, r3
 801582e:	2b01      	cmp	r3, #1
 8015830:	d813      	bhi.n	801585a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015838:	689b      	ldr	r3, [r3, #8]
 801583a:	6839      	ldr	r1, [r7, #0]
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	4798      	blx	r3
 8015840:	4603      	mov	r3, r0
 8015842:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	88db      	ldrh	r3, [r3, #6]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d110      	bne.n	801586e <USBD_StdItfReq+0x7a>
 801584c:	7bfb      	ldrb	r3, [r7, #15]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d10d      	bne.n	801586e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f000 fd73 	bl	801633e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015858:	e009      	b.n	801586e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801585a:	6839      	ldr	r1, [r7, #0]
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f000 fca3 	bl	80161a8 <USBD_CtlError>
          break;
 8015862:	e004      	b.n	801586e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8015864:	6839      	ldr	r1, [r7, #0]
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f000 fc9e 	bl	80161a8 <USBD_CtlError>
          break;
 801586c:	e000      	b.n	8015870 <USBD_StdItfReq+0x7c>
          break;
 801586e:	bf00      	nop
      }
      break;
 8015870:	e004      	b.n	801587c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8015872:	6839      	ldr	r1, [r7, #0]
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f000 fc97 	bl	80161a8 <USBD_CtlError>
      break;
 801587a:	bf00      	nop
  }

  return ret;
 801587c:	7bfb      	ldrb	r3, [r7, #15]
}
 801587e:	4618      	mov	r0, r3
 8015880:	3710      	adds	r7, #16
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}

08015886 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015886:	b580      	push	{r7, lr}
 8015888:	b084      	sub	sp, #16
 801588a:	af00      	add	r7, sp, #0
 801588c:	6078      	str	r0, [r7, #4]
 801588e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015890:	2300      	movs	r3, #0
 8015892:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	889b      	ldrh	r3, [r3, #4]
 8015898:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158a2:	2b40      	cmp	r3, #64	; 0x40
 80158a4:	d007      	beq.n	80158b6 <USBD_StdEPReq+0x30>
 80158a6:	2b40      	cmp	r3, #64	; 0x40
 80158a8:	f200 8145 	bhi.w	8015b36 <USBD_StdEPReq+0x2b0>
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d00c      	beq.n	80158ca <USBD_StdEPReq+0x44>
 80158b0:	2b20      	cmp	r3, #32
 80158b2:	f040 8140 	bne.w	8015b36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158bc:	689b      	ldr	r3, [r3, #8]
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	4798      	blx	r3
 80158c4:	4603      	mov	r3, r0
 80158c6:	73fb      	strb	r3, [r7, #15]
      break;
 80158c8:	e13a      	b.n	8015b40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	785b      	ldrb	r3, [r3, #1]
 80158ce:	2b03      	cmp	r3, #3
 80158d0:	d007      	beq.n	80158e2 <USBD_StdEPReq+0x5c>
 80158d2:	2b03      	cmp	r3, #3
 80158d4:	f300 8129 	bgt.w	8015b2a <USBD_StdEPReq+0x2a4>
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d07f      	beq.n	80159dc <USBD_StdEPReq+0x156>
 80158dc:	2b01      	cmp	r3, #1
 80158de:	d03c      	beq.n	801595a <USBD_StdEPReq+0xd4>
 80158e0:	e123      	b.n	8015b2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	2b02      	cmp	r3, #2
 80158ec:	d002      	beq.n	80158f4 <USBD_StdEPReq+0x6e>
 80158ee:	2b03      	cmp	r3, #3
 80158f0:	d016      	beq.n	8015920 <USBD_StdEPReq+0x9a>
 80158f2:	e02c      	b.n	801594e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158f4:	7bbb      	ldrb	r3, [r7, #14]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d00d      	beq.n	8015916 <USBD_StdEPReq+0x90>
 80158fa:	7bbb      	ldrb	r3, [r7, #14]
 80158fc:	2b80      	cmp	r3, #128	; 0x80
 80158fe:	d00a      	beq.n	8015916 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015900:	7bbb      	ldrb	r3, [r7, #14]
 8015902:	4619      	mov	r1, r3
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f001 f989 	bl	8016c1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801590a:	2180      	movs	r1, #128	; 0x80
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f001 f985 	bl	8016c1c <USBD_LL_StallEP>
 8015912:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015914:	e020      	b.n	8015958 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8015916:	6839      	ldr	r1, [r7, #0]
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f000 fc45 	bl	80161a8 <USBD_CtlError>
              break;
 801591e:	e01b      	b.n	8015958 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	885b      	ldrh	r3, [r3, #2]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10e      	bne.n	8015946 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015928:	7bbb      	ldrb	r3, [r7, #14]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d00b      	beq.n	8015946 <USBD_StdEPReq+0xc0>
 801592e:	7bbb      	ldrb	r3, [r7, #14]
 8015930:	2b80      	cmp	r3, #128	; 0x80
 8015932:	d008      	beq.n	8015946 <USBD_StdEPReq+0xc0>
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	88db      	ldrh	r3, [r3, #6]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d104      	bne.n	8015946 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801593c:	7bbb      	ldrb	r3, [r7, #14]
 801593e:	4619      	mov	r1, r3
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f001 f96b 	bl	8016c1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f000 fcf9 	bl	801633e <USBD_CtlSendStatus>

              break;
 801594c:	e004      	b.n	8015958 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801594e:	6839      	ldr	r1, [r7, #0]
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f000 fc29 	bl	80161a8 <USBD_CtlError>
              break;
 8015956:	bf00      	nop
          }
          break;
 8015958:	e0ec      	b.n	8015b34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015960:	b2db      	uxtb	r3, r3
 8015962:	2b02      	cmp	r3, #2
 8015964:	d002      	beq.n	801596c <USBD_StdEPReq+0xe6>
 8015966:	2b03      	cmp	r3, #3
 8015968:	d016      	beq.n	8015998 <USBD_StdEPReq+0x112>
 801596a:	e030      	b.n	80159ce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801596c:	7bbb      	ldrb	r3, [r7, #14]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d00d      	beq.n	801598e <USBD_StdEPReq+0x108>
 8015972:	7bbb      	ldrb	r3, [r7, #14]
 8015974:	2b80      	cmp	r3, #128	; 0x80
 8015976:	d00a      	beq.n	801598e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015978:	7bbb      	ldrb	r3, [r7, #14]
 801597a:	4619      	mov	r1, r3
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f001 f94d 	bl	8016c1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015982:	2180      	movs	r1, #128	; 0x80
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f001 f949 	bl	8016c1c <USBD_LL_StallEP>
 801598a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801598c:	e025      	b.n	80159da <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801598e:	6839      	ldr	r1, [r7, #0]
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f000 fc09 	bl	80161a8 <USBD_CtlError>
              break;
 8015996:	e020      	b.n	80159da <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	885b      	ldrh	r3, [r3, #2]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d11b      	bne.n	80159d8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80159a0:	7bbb      	ldrb	r3, [r7, #14]
 80159a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d004      	beq.n	80159b4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80159aa:	7bbb      	ldrb	r3, [r7, #14]
 80159ac:	4619      	mov	r1, r3
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f001 f953 	bl	8016c5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f000 fcc2 	bl	801633e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159c0:	689b      	ldr	r3, [r3, #8]
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	4798      	blx	r3
 80159c8:	4603      	mov	r3, r0
 80159ca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80159cc:	e004      	b.n	80159d8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80159ce:	6839      	ldr	r1, [r7, #0]
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f000 fbe9 	bl	80161a8 <USBD_CtlError>
              break;
 80159d6:	e000      	b.n	80159da <USBD_StdEPReq+0x154>
              break;
 80159d8:	bf00      	nop
          }
          break;
 80159da:	e0ab      	b.n	8015b34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159e2:	b2db      	uxtb	r3, r3
 80159e4:	2b02      	cmp	r3, #2
 80159e6:	d002      	beq.n	80159ee <USBD_StdEPReq+0x168>
 80159e8:	2b03      	cmp	r3, #3
 80159ea:	d032      	beq.n	8015a52 <USBD_StdEPReq+0x1cc>
 80159ec:	e097      	b.n	8015b1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159ee:	7bbb      	ldrb	r3, [r7, #14]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d007      	beq.n	8015a04 <USBD_StdEPReq+0x17e>
 80159f4:	7bbb      	ldrb	r3, [r7, #14]
 80159f6:	2b80      	cmp	r3, #128	; 0x80
 80159f8:	d004      	beq.n	8015a04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80159fa:	6839      	ldr	r1, [r7, #0]
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f000 fbd3 	bl	80161a8 <USBD_CtlError>
                break;
 8015a02:	e091      	b.n	8015b28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	da0b      	bge.n	8015a24 <USBD_StdEPReq+0x19e>
 8015a0c:	7bbb      	ldrb	r3, [r7, #14]
 8015a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a12:	4613      	mov	r3, r2
 8015a14:	009b      	lsls	r3, r3, #2
 8015a16:	4413      	add	r3, r2
 8015a18:	009b      	lsls	r3, r3, #2
 8015a1a:	3310      	adds	r3, #16
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	4413      	add	r3, r2
 8015a20:	3304      	adds	r3, #4
 8015a22:	e00b      	b.n	8015a3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a24:	7bbb      	ldrb	r3, [r7, #14]
 8015a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	009b      	lsls	r3, r3, #2
 8015a2e:	4413      	add	r3, r2
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a36:	687a      	ldr	r2, [r7, #4]
 8015a38:	4413      	add	r3, r2
 8015a3a:	3304      	adds	r3, #4
 8015a3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	2200      	movs	r2, #0
 8015a42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	2202      	movs	r2, #2
 8015a48:	4619      	mov	r1, r3
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f000 fc1d 	bl	801628a <USBD_CtlSendData>
              break;
 8015a50:	e06a      	b.n	8015b28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	da11      	bge.n	8015a7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a5a:	7bbb      	ldrb	r3, [r7, #14]
 8015a5c:	f003 020f 	and.w	r2, r3, #15
 8015a60:	6879      	ldr	r1, [r7, #4]
 8015a62:	4613      	mov	r3, r2
 8015a64:	009b      	lsls	r3, r3, #2
 8015a66:	4413      	add	r3, r2
 8015a68:	009b      	lsls	r3, r3, #2
 8015a6a:	440b      	add	r3, r1
 8015a6c:	3324      	adds	r3, #36	; 0x24
 8015a6e:	881b      	ldrh	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d117      	bne.n	8015aa4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015a74:	6839      	ldr	r1, [r7, #0]
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f000 fb96 	bl	80161a8 <USBD_CtlError>
                  break;
 8015a7c:	e054      	b.n	8015b28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a7e:	7bbb      	ldrb	r3, [r7, #14]
 8015a80:	f003 020f 	and.w	r2, r3, #15
 8015a84:	6879      	ldr	r1, [r7, #4]
 8015a86:	4613      	mov	r3, r2
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	4413      	add	r3, r2
 8015a8c:	009b      	lsls	r3, r3, #2
 8015a8e:	440b      	add	r3, r1
 8015a90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a94:	881b      	ldrh	r3, [r3, #0]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d104      	bne.n	8015aa4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015a9a:	6839      	ldr	r1, [r7, #0]
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f000 fb83 	bl	80161a8 <USBD_CtlError>
                  break;
 8015aa2:	e041      	b.n	8015b28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	da0b      	bge.n	8015ac4 <USBD_StdEPReq+0x23e>
 8015aac:	7bbb      	ldrb	r3, [r7, #14]
 8015aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	009b      	lsls	r3, r3, #2
 8015ab6:	4413      	add	r3, r2
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	3310      	adds	r3, #16
 8015abc:	687a      	ldr	r2, [r7, #4]
 8015abe:	4413      	add	r3, r2
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	e00b      	b.n	8015adc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ac4:	7bbb      	ldrb	r3, [r7, #14]
 8015ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015aca:	4613      	mov	r3, r2
 8015acc:	009b      	lsls	r3, r3, #2
 8015ace:	4413      	add	r3, r2
 8015ad0:	009b      	lsls	r3, r3, #2
 8015ad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	4413      	add	r3, r2
 8015ada:	3304      	adds	r3, #4
 8015adc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d002      	beq.n	8015aea <USBD_StdEPReq+0x264>
 8015ae4:	7bbb      	ldrb	r3, [r7, #14]
 8015ae6:	2b80      	cmp	r3, #128	; 0x80
 8015ae8:	d103      	bne.n	8015af2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	2200      	movs	r2, #0
 8015aee:	601a      	str	r2, [r3, #0]
 8015af0:	e00e      	b.n	8015b10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015af2:	7bbb      	ldrb	r3, [r7, #14]
 8015af4:	4619      	mov	r1, r3
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f001 f8ce 	bl	8016c98 <USBD_LL_IsStallEP>
 8015afc:	4603      	mov	r3, r0
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d003      	beq.n	8015b0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	2201      	movs	r2, #1
 8015b06:	601a      	str	r2, [r3, #0]
 8015b08:	e002      	b.n	8015b10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	2200      	movs	r2, #0
 8015b0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	2202      	movs	r2, #2
 8015b14:	4619      	mov	r1, r3
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f000 fbb7 	bl	801628a <USBD_CtlSendData>
              break;
 8015b1c:	e004      	b.n	8015b28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8015b1e:	6839      	ldr	r1, [r7, #0]
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f000 fb41 	bl	80161a8 <USBD_CtlError>
              break;
 8015b26:	bf00      	nop
          }
          break;
 8015b28:	e004      	b.n	8015b34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8015b2a:	6839      	ldr	r1, [r7, #0]
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f000 fb3b 	bl	80161a8 <USBD_CtlError>
          break;
 8015b32:	bf00      	nop
      }
      break;
 8015b34:	e004      	b.n	8015b40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8015b36:	6839      	ldr	r1, [r7, #0]
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f000 fb35 	bl	80161a8 <USBD_CtlError>
      break;
 8015b3e:	bf00      	nop
  }

  return ret;
 8015b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b42:	4618      	mov	r0, r3
 8015b44:	3710      	adds	r7, #16
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
	...

08015b4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b56:	2300      	movs	r3, #0
 8015b58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	885b      	ldrh	r3, [r3, #2]
 8015b66:	0a1b      	lsrs	r3, r3, #8
 8015b68:	b29b      	uxth	r3, r3
 8015b6a:	3b01      	subs	r3, #1
 8015b6c:	2b06      	cmp	r3, #6
 8015b6e:	f200 8128 	bhi.w	8015dc2 <USBD_GetDescriptor+0x276>
 8015b72:	a201      	add	r2, pc, #4	; (adr r2, 8015b78 <USBD_GetDescriptor+0x2c>)
 8015b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b78:	08015b95 	.word	0x08015b95
 8015b7c:	08015bad 	.word	0x08015bad
 8015b80:	08015bed 	.word	0x08015bed
 8015b84:	08015dc3 	.word	0x08015dc3
 8015b88:	08015dc3 	.word	0x08015dc3
 8015b8c:	08015d63 	.word	0x08015d63
 8015b90:	08015d8f 	.word	0x08015d8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	687a      	ldr	r2, [r7, #4]
 8015b9e:	7c12      	ldrb	r2, [r2, #16]
 8015ba0:	f107 0108 	add.w	r1, r7, #8
 8015ba4:	4610      	mov	r0, r2
 8015ba6:	4798      	blx	r3
 8015ba8:	60f8      	str	r0, [r7, #12]
      break;
 8015baa:	e112      	b.n	8015dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	7c1b      	ldrb	r3, [r3, #16]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d10d      	bne.n	8015bd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bbc:	f107 0208 	add.w	r2, r7, #8
 8015bc0:	4610      	mov	r0, r2
 8015bc2:	4798      	blx	r3
 8015bc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	3301      	adds	r3, #1
 8015bca:	2202      	movs	r2, #2
 8015bcc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bce:	e100      	b.n	8015dd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bd8:	f107 0208 	add.w	r2, r7, #8
 8015bdc:	4610      	mov	r0, r2
 8015bde:	4798      	blx	r3
 8015be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	3301      	adds	r3, #1
 8015be6:	2202      	movs	r2, #2
 8015be8:	701a      	strb	r2, [r3, #0]
      break;
 8015bea:	e0f2      	b.n	8015dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	885b      	ldrh	r3, [r3, #2]
 8015bf0:	b2db      	uxtb	r3, r3
 8015bf2:	2b05      	cmp	r3, #5
 8015bf4:	f200 80ac 	bhi.w	8015d50 <USBD_GetDescriptor+0x204>
 8015bf8:	a201      	add	r2, pc, #4	; (adr r2, 8015c00 <USBD_GetDescriptor+0xb4>)
 8015bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bfe:	bf00      	nop
 8015c00:	08015c19 	.word	0x08015c19
 8015c04:	08015c4d 	.word	0x08015c4d
 8015c08:	08015c81 	.word	0x08015c81
 8015c0c:	08015cb5 	.word	0x08015cb5
 8015c10:	08015ce9 	.word	0x08015ce9
 8015c14:	08015d1d 	.word	0x08015d1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d00b      	beq.n	8015c3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	7c12      	ldrb	r2, [r2, #16]
 8015c30:	f107 0108 	add.w	r1, r7, #8
 8015c34:	4610      	mov	r0, r2
 8015c36:	4798      	blx	r3
 8015c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c3a:	e091      	b.n	8015d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c3c:	6839      	ldr	r1, [r7, #0]
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f000 fab2 	bl	80161a8 <USBD_CtlError>
            err++;
 8015c44:	7afb      	ldrb	r3, [r7, #11]
 8015c46:	3301      	adds	r3, #1
 8015c48:	72fb      	strb	r3, [r7, #11]
          break;
 8015c4a:	e089      	b.n	8015d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c52:	689b      	ldr	r3, [r3, #8]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d00b      	beq.n	8015c70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c5e:	689b      	ldr	r3, [r3, #8]
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	7c12      	ldrb	r2, [r2, #16]
 8015c64:	f107 0108 	add.w	r1, r7, #8
 8015c68:	4610      	mov	r0, r2
 8015c6a:	4798      	blx	r3
 8015c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c6e:	e077      	b.n	8015d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c70:	6839      	ldr	r1, [r7, #0]
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f000 fa98 	bl	80161a8 <USBD_CtlError>
            err++;
 8015c78:	7afb      	ldrb	r3, [r7, #11]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8015c7e:	e06f      	b.n	8015d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c86:	68db      	ldr	r3, [r3, #12]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00b      	beq.n	8015ca4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c92:	68db      	ldr	r3, [r3, #12]
 8015c94:	687a      	ldr	r2, [r7, #4]
 8015c96:	7c12      	ldrb	r2, [r2, #16]
 8015c98:	f107 0108 	add.w	r1, r7, #8
 8015c9c:	4610      	mov	r0, r2
 8015c9e:	4798      	blx	r3
 8015ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ca2:	e05d      	b.n	8015d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ca4:	6839      	ldr	r1, [r7, #0]
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f000 fa7e 	bl	80161a8 <USBD_CtlError>
            err++;
 8015cac:	7afb      	ldrb	r3, [r7, #11]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8015cb2:	e055      	b.n	8015d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cba:	691b      	ldr	r3, [r3, #16]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d00b      	beq.n	8015cd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cc6:	691b      	ldr	r3, [r3, #16]
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	7c12      	ldrb	r2, [r2, #16]
 8015ccc:	f107 0108 	add.w	r1, r7, #8
 8015cd0:	4610      	mov	r0, r2
 8015cd2:	4798      	blx	r3
 8015cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cd6:	e043      	b.n	8015d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 fa64 	bl	80161a8 <USBD_CtlError>
            err++;
 8015ce0:	7afb      	ldrb	r3, [r7, #11]
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8015ce6:	e03b      	b.n	8015d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cee:	695b      	ldr	r3, [r3, #20]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d00b      	beq.n	8015d0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cfa:	695b      	ldr	r3, [r3, #20]
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	7c12      	ldrb	r2, [r2, #16]
 8015d00:	f107 0108 	add.w	r1, r7, #8
 8015d04:	4610      	mov	r0, r2
 8015d06:	4798      	blx	r3
 8015d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d0a:	e029      	b.n	8015d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d0c:	6839      	ldr	r1, [r7, #0]
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f000 fa4a 	bl	80161a8 <USBD_CtlError>
            err++;
 8015d14:	7afb      	ldrb	r3, [r7, #11]
 8015d16:	3301      	adds	r3, #1
 8015d18:	72fb      	strb	r3, [r7, #11]
          break;
 8015d1a:	e021      	b.n	8015d60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d22:	699b      	ldr	r3, [r3, #24]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d00b      	beq.n	8015d40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d2e:	699b      	ldr	r3, [r3, #24]
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	7c12      	ldrb	r2, [r2, #16]
 8015d34:	f107 0108 	add.w	r1, r7, #8
 8015d38:	4610      	mov	r0, r2
 8015d3a:	4798      	blx	r3
 8015d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d3e:	e00f      	b.n	8015d60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d40:	6839      	ldr	r1, [r7, #0]
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 fa30 	bl	80161a8 <USBD_CtlError>
            err++;
 8015d48:	7afb      	ldrb	r3, [r7, #11]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d4e:	e007      	b.n	8015d60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d50:	6839      	ldr	r1, [r7, #0]
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f000 fa28 	bl	80161a8 <USBD_CtlError>
          err++;
 8015d58:	7afb      	ldrb	r3, [r7, #11]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015d5e:	bf00      	nop
      }
      break;
 8015d60:	e037      	b.n	8015dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	7c1b      	ldrb	r3, [r3, #16]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d109      	bne.n	8015d7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d72:	f107 0208 	add.w	r2, r7, #8
 8015d76:	4610      	mov	r0, r2
 8015d78:	4798      	blx	r3
 8015d7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d7c:	e029      	b.n	8015dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d7e:	6839      	ldr	r1, [r7, #0]
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f000 fa11 	bl	80161a8 <USBD_CtlError>
        err++;
 8015d86:	7afb      	ldrb	r3, [r7, #11]
 8015d88:	3301      	adds	r3, #1
 8015d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8015d8c:	e021      	b.n	8015dd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	7c1b      	ldrb	r3, [r3, #16]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d10d      	bne.n	8015db2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d9e:	f107 0208 	add.w	r2, r7, #8
 8015da2:	4610      	mov	r0, r2
 8015da4:	4798      	blx	r3
 8015da6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	3301      	adds	r3, #1
 8015dac:	2207      	movs	r2, #7
 8015dae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015db0:	e00f      	b.n	8015dd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015db2:	6839      	ldr	r1, [r7, #0]
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f000 f9f7 	bl	80161a8 <USBD_CtlError>
        err++;
 8015dba:	7afb      	ldrb	r3, [r7, #11]
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8015dc0:	e007      	b.n	8015dd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015dc2:	6839      	ldr	r1, [r7, #0]
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f000 f9ef 	bl	80161a8 <USBD_CtlError>
      err++;
 8015dca:	7afb      	ldrb	r3, [r7, #11]
 8015dcc:	3301      	adds	r3, #1
 8015dce:	72fb      	strb	r3, [r7, #11]
      break;
 8015dd0:	bf00      	nop
  }

  if (err != 0U)
 8015dd2:	7afb      	ldrb	r3, [r7, #11]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d11e      	bne.n	8015e16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	88db      	ldrh	r3, [r3, #6]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d016      	beq.n	8015e0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015de0:	893b      	ldrh	r3, [r7, #8]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d00e      	beq.n	8015e04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	88da      	ldrh	r2, [r3, #6]
 8015dea:	893b      	ldrh	r3, [r7, #8]
 8015dec:	4293      	cmp	r3, r2
 8015dee:	bf28      	it	cs
 8015df0:	4613      	movcs	r3, r2
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015df6:	893b      	ldrh	r3, [r7, #8]
 8015df8:	461a      	mov	r2, r3
 8015dfa:	68f9      	ldr	r1, [r7, #12]
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 fa44 	bl	801628a <USBD_CtlSendData>
 8015e02:	e009      	b.n	8015e18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015e04:	6839      	ldr	r1, [r7, #0]
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f000 f9ce 	bl	80161a8 <USBD_CtlError>
 8015e0c:	e004      	b.n	8015e18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f000 fa95 	bl	801633e <USBD_CtlSendStatus>
 8015e14:	e000      	b.n	8015e18 <USBD_GetDescriptor+0x2cc>
    return;
 8015e16:	bf00      	nop
  }
}
 8015e18:	3710      	adds	r7, #16
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	bf00      	nop

08015e20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	889b      	ldrh	r3, [r3, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d131      	bne.n	8015e96 <USBD_SetAddress+0x76>
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	88db      	ldrh	r3, [r3, #6]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d12d      	bne.n	8015e96 <USBD_SetAddress+0x76>
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	885b      	ldrh	r3, [r3, #2]
 8015e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8015e40:	d829      	bhi.n	8015e96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	885b      	ldrh	r3, [r3, #2]
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e54:	b2db      	uxtb	r3, r3
 8015e56:	2b03      	cmp	r3, #3
 8015e58:	d104      	bne.n	8015e64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e5a:	6839      	ldr	r1, [r7, #0]
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f000 f9a3 	bl	80161a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e62:	e01d      	b.n	8015ea0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	7bfa      	ldrb	r2, [r7, #15]
 8015e68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e6c:	7bfb      	ldrb	r3, [r7, #15]
 8015e6e:	4619      	mov	r1, r3
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f000 ff3d 	bl	8016cf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f000 fa61 	bl	801633e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e7c:	7bfb      	ldrb	r3, [r7, #15]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d004      	beq.n	8015e8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2202      	movs	r2, #2
 8015e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e8a:	e009      	b.n	8015ea0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2201      	movs	r2, #1
 8015e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e94:	e004      	b.n	8015ea0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015e96:	6839      	ldr	r1, [r7, #0]
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f000 f985 	bl	80161a8 <USBD_CtlError>
  }
}
 8015e9e:	bf00      	nop
 8015ea0:	bf00      	nop
 8015ea2:	3710      	adds	r7, #16
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}

08015ea8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
 8015eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	885b      	ldrh	r3, [r3, #2]
 8015eba:	b2da      	uxtb	r2, r3
 8015ebc:	4b4c      	ldr	r3, [pc, #304]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ec0:	4b4b      	ldr	r3, [pc, #300]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	2b01      	cmp	r3, #1
 8015ec6:	d905      	bls.n	8015ed4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015ec8:	6839      	ldr	r1, [r7, #0]
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f000 f96c 	bl	80161a8 <USBD_CtlError>
    return USBD_FAIL;
 8015ed0:	2303      	movs	r3, #3
 8015ed2:	e088      	b.n	8015fe6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	2b02      	cmp	r3, #2
 8015ede:	d002      	beq.n	8015ee6 <USBD_SetConfig+0x3e>
 8015ee0:	2b03      	cmp	r3, #3
 8015ee2:	d025      	beq.n	8015f30 <USBD_SetConfig+0x88>
 8015ee4:	e071      	b.n	8015fca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015ee6:	4b42      	ldr	r3, [pc, #264]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d01c      	beq.n	8015f28 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015eee:	4b40      	ldr	r3, [pc, #256]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	461a      	mov	r2, r3
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ef8:	4b3d      	ldr	r3, [pc, #244]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	4619      	mov	r1, r3
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f7ff f948 	bl	8015194 <USBD_SetClassConfig>
 8015f04:	4603      	mov	r3, r0
 8015f06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015f08:	7bfb      	ldrb	r3, [r7, #15]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d004      	beq.n	8015f18 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8015f0e:	6839      	ldr	r1, [r7, #0]
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 f949 	bl	80161a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f16:	e065      	b.n	8015fe4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f000 fa10 	bl	801633e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2203      	movs	r2, #3
 8015f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f26:	e05d      	b.n	8015fe4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f000 fa08 	bl	801633e <USBD_CtlSendStatus>
      break;
 8015f2e:	e059      	b.n	8015fe4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f30:	4b2f      	ldr	r3, [pc, #188]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d112      	bne.n	8015f5e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2202      	movs	r2, #2
 8015f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015f40:	4b2b      	ldr	r3, [pc, #172]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	461a      	mov	r2, r3
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f4a:	4b29      	ldr	r3, [pc, #164]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015f4c:	781b      	ldrb	r3, [r3, #0]
 8015f4e:	4619      	mov	r1, r3
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f7ff f93b 	bl	80151cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f000 f9f1 	bl	801633e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f5c:	e042      	b.n	8015fe4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8015f5e:	4b24      	ldr	r3, [pc, #144]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015f60:	781b      	ldrb	r3, [r3, #0]
 8015f62:	461a      	mov	r2, r3
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d02a      	beq.n	8015fc2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	b2db      	uxtb	r3, r3
 8015f72:	4619      	mov	r1, r3
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7ff f929 	bl	80151cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f7a:	4b1d      	ldr	r3, [pc, #116]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	461a      	mov	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f84:	4b1a      	ldr	r3, [pc, #104]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	4619      	mov	r1, r3
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f7ff f902 	bl	8015194 <USBD_SetClassConfig>
 8015f90:	4603      	mov	r3, r0
 8015f92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015f94:	7bfb      	ldrb	r3, [r7, #15]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00f      	beq.n	8015fba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015f9a:	6839      	ldr	r1, [r7, #0]
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f000 f903 	bl	80161a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	b2db      	uxtb	r3, r3
 8015fa8:	4619      	mov	r1, r3
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7ff f90e 	bl	80151cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2202      	movs	r2, #2
 8015fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015fb8:	e014      	b.n	8015fe4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 f9bf 	bl	801633e <USBD_CtlSendStatus>
      break;
 8015fc0:	e010      	b.n	8015fe4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f000 f9bb 	bl	801633e <USBD_CtlSendStatus>
      break;
 8015fc8:	e00c      	b.n	8015fe4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015fca:	6839      	ldr	r1, [r7, #0]
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f000 f8eb 	bl	80161a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fd2:	4b07      	ldr	r3, [pc, #28]	; (8015ff0 <USBD_SetConfig+0x148>)
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f7ff f8f7 	bl	80151cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015fde:	2303      	movs	r3, #3
 8015fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8015fe2:	bf00      	nop
  }

  return ret;
 8015fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3710      	adds	r7, #16
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	20002d64 	.word	0x20002d64

08015ff4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	88db      	ldrh	r3, [r3, #6]
 8016002:	2b01      	cmp	r3, #1
 8016004:	d004      	beq.n	8016010 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016006:	6839      	ldr	r1, [r7, #0]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f000 f8cd 	bl	80161a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801600e:	e023      	b.n	8016058 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016016:	b2db      	uxtb	r3, r3
 8016018:	2b02      	cmp	r3, #2
 801601a:	dc02      	bgt.n	8016022 <USBD_GetConfig+0x2e>
 801601c:	2b00      	cmp	r3, #0
 801601e:	dc03      	bgt.n	8016028 <USBD_GetConfig+0x34>
 8016020:	e015      	b.n	801604e <USBD_GetConfig+0x5a>
 8016022:	2b03      	cmp	r3, #3
 8016024:	d00b      	beq.n	801603e <USBD_GetConfig+0x4a>
 8016026:	e012      	b.n	801604e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2200      	movs	r2, #0
 801602c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	3308      	adds	r3, #8
 8016032:	2201      	movs	r2, #1
 8016034:	4619      	mov	r1, r3
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 f927 	bl	801628a <USBD_CtlSendData>
        break;
 801603c:	e00c      	b.n	8016058 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	3304      	adds	r3, #4
 8016042:	2201      	movs	r2, #1
 8016044:	4619      	mov	r1, r3
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 f91f 	bl	801628a <USBD_CtlSendData>
        break;
 801604c:	e004      	b.n	8016058 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801604e:	6839      	ldr	r1, [r7, #0]
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f000 f8a9 	bl	80161a8 <USBD_CtlError>
        break;
 8016056:	bf00      	nop
}
 8016058:	bf00      	nop
 801605a:	3708      	adds	r7, #8
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016070:	b2db      	uxtb	r3, r3
 8016072:	3b01      	subs	r3, #1
 8016074:	2b02      	cmp	r3, #2
 8016076:	d81e      	bhi.n	80160b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	88db      	ldrh	r3, [r3, #6]
 801607c:	2b02      	cmp	r3, #2
 801607e:	d004      	beq.n	801608a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016080:	6839      	ldr	r1, [r7, #0]
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f000 f890 	bl	80161a8 <USBD_CtlError>
        break;
 8016088:	e01a      	b.n	80160c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2201      	movs	r2, #1
 801608e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016096:	2b00      	cmp	r3, #0
 8016098:	d005      	beq.n	80160a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	68db      	ldr	r3, [r3, #12]
 801609e:	f043 0202 	orr.w	r2, r3, #2
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	330c      	adds	r3, #12
 80160aa:	2202      	movs	r2, #2
 80160ac:	4619      	mov	r1, r3
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f000 f8eb 	bl	801628a <USBD_CtlSendData>
      break;
 80160b4:	e004      	b.n	80160c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160b6:	6839      	ldr	r1, [r7, #0]
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 f875 	bl	80161a8 <USBD_CtlError>
      break;
 80160be:	bf00      	nop
  }
}
 80160c0:	bf00      	nop
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	885b      	ldrh	r3, [r3, #2]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d106      	bne.n	80160e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	2201      	movs	r2, #1
 80160de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f000 f92b 	bl	801633e <USBD_CtlSendStatus>
  }
}
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016100:	b2db      	uxtb	r3, r3
 8016102:	3b01      	subs	r3, #1
 8016104:	2b02      	cmp	r3, #2
 8016106:	d80b      	bhi.n	8016120 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	885b      	ldrh	r3, [r3, #2]
 801610c:	2b01      	cmp	r3, #1
 801610e:	d10c      	bne.n	801612a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2200      	movs	r2, #0
 8016114:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f000 f910 	bl	801633e <USBD_CtlSendStatus>
      }
      break;
 801611e:	e004      	b.n	801612a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016120:	6839      	ldr	r1, [r7, #0]
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f000 f840 	bl	80161a8 <USBD_CtlError>
      break;
 8016128:	e000      	b.n	801612c <USBD_ClrFeature+0x3c>
      break;
 801612a:	bf00      	nop
  }
}
 801612c:	bf00      	nop
 801612e:	3708      	adds	r7, #8
 8016130:	46bd      	mov	sp, r7
 8016132:	bd80      	pop	{r7, pc}

08016134 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b084      	sub	sp, #16
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	781a      	ldrb	r2, [r3, #0]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	3301      	adds	r3, #1
 801614e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	781a      	ldrb	r2, [r3, #0]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	3301      	adds	r3, #1
 801615c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801615e:	68f8      	ldr	r0, [r7, #12]
 8016160:	f7ff fabb 	bl	80156da <SWAPBYTE>
 8016164:	4603      	mov	r3, r0
 8016166:	461a      	mov	r2, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	3301      	adds	r3, #1
 8016170:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	3301      	adds	r3, #1
 8016176:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016178:	68f8      	ldr	r0, [r7, #12]
 801617a:	f7ff faae 	bl	80156da <SWAPBYTE>
 801617e:	4603      	mov	r3, r0
 8016180:	461a      	mov	r2, r3
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	3301      	adds	r3, #1
 801618a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	3301      	adds	r3, #1
 8016190:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016192:	68f8      	ldr	r0, [r7, #12]
 8016194:	f7ff faa1 	bl	80156da <SWAPBYTE>
 8016198:	4603      	mov	r3, r0
 801619a:	461a      	mov	r2, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	80da      	strh	r2, [r3, #6]
}
 80161a0:	bf00      	nop
 80161a2:	3710      	adds	r7, #16
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}

080161a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b082      	sub	sp, #8
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161b2:	2180      	movs	r1, #128	; 0x80
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 fd31 	bl	8016c1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161ba:	2100      	movs	r1, #0
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f000 fd2d 	bl	8016c1c <USBD_LL_StallEP>
}
 80161c2:	bf00      	nop
 80161c4:	3708      	adds	r7, #8
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}

080161ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80161ca:	b580      	push	{r7, lr}
 80161cc:	b086      	sub	sp, #24
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	60f8      	str	r0, [r7, #12]
 80161d2:	60b9      	str	r1, [r7, #8]
 80161d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80161d6:	2300      	movs	r3, #0
 80161d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d036      	beq.n	801624e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80161e4:	6938      	ldr	r0, [r7, #16]
 80161e6:	f000 f836 	bl	8016256 <USBD_GetLen>
 80161ea:	4603      	mov	r3, r0
 80161ec:	3301      	adds	r3, #1
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	005b      	lsls	r3, r3, #1
 80161f2:	b29a      	uxth	r2, r3
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80161f8:	7dfb      	ldrb	r3, [r7, #23]
 80161fa:	68ba      	ldr	r2, [r7, #8]
 80161fc:	4413      	add	r3, r2
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	7812      	ldrb	r2, [r2, #0]
 8016202:	701a      	strb	r2, [r3, #0]
  idx++;
 8016204:	7dfb      	ldrb	r3, [r7, #23]
 8016206:	3301      	adds	r3, #1
 8016208:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801620a:	7dfb      	ldrb	r3, [r7, #23]
 801620c:	68ba      	ldr	r2, [r7, #8]
 801620e:	4413      	add	r3, r2
 8016210:	2203      	movs	r2, #3
 8016212:	701a      	strb	r2, [r3, #0]
  idx++;
 8016214:	7dfb      	ldrb	r3, [r7, #23]
 8016216:	3301      	adds	r3, #1
 8016218:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801621a:	e013      	b.n	8016244 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801621c:	7dfb      	ldrb	r3, [r7, #23]
 801621e:	68ba      	ldr	r2, [r7, #8]
 8016220:	4413      	add	r3, r2
 8016222:	693a      	ldr	r2, [r7, #16]
 8016224:	7812      	ldrb	r2, [r2, #0]
 8016226:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	3301      	adds	r3, #1
 801622c:	613b      	str	r3, [r7, #16]
    idx++;
 801622e:	7dfb      	ldrb	r3, [r7, #23]
 8016230:	3301      	adds	r3, #1
 8016232:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016234:	7dfb      	ldrb	r3, [r7, #23]
 8016236:	68ba      	ldr	r2, [r7, #8]
 8016238:	4413      	add	r3, r2
 801623a:	2200      	movs	r2, #0
 801623c:	701a      	strb	r2, [r3, #0]
    idx++;
 801623e:	7dfb      	ldrb	r3, [r7, #23]
 8016240:	3301      	adds	r3, #1
 8016242:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d1e7      	bne.n	801621c <USBD_GetString+0x52>
 801624c:	e000      	b.n	8016250 <USBD_GetString+0x86>
    return;
 801624e:	bf00      	nop
  }
}
 8016250:	3718      	adds	r7, #24
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016256:	b480      	push	{r7}
 8016258:	b085      	sub	sp, #20
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801625e:	2300      	movs	r3, #0
 8016260:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016266:	e005      	b.n	8016274 <USBD_GetLen+0x1e>
  {
    len++;
 8016268:	7bfb      	ldrb	r3, [r7, #15]
 801626a:	3301      	adds	r3, #1
 801626c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801626e:	68bb      	ldr	r3, [r7, #8]
 8016270:	3301      	adds	r3, #1
 8016272:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d1f5      	bne.n	8016268 <USBD_GetLen+0x12>
  }

  return len;
 801627c:	7bfb      	ldrb	r3, [r7, #15]
}
 801627e:	4618      	mov	r0, r3
 8016280:	3714      	adds	r7, #20
 8016282:	46bd      	mov	sp, r7
 8016284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016288:	4770      	bx	lr

0801628a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b084      	sub	sp, #16
 801628e:	af00      	add	r7, sp, #0
 8016290:	60f8      	str	r0, [r7, #12]
 8016292:	60b9      	str	r1, [r7, #8]
 8016294:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2202      	movs	r2, #2
 801629a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	687a      	ldr	r2, [r7, #4]
 80162a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	68ba      	ldr	r2, [r7, #8]
 80162ae:	2100      	movs	r1, #0
 80162b0:	68f8      	ldr	r0, [r7, #12]
 80162b2:	f000 fd3c 	bl	8016d2e <USBD_LL_Transmit>

  return USBD_OK;
 80162b6:	2300      	movs	r3, #0
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3710      	adds	r7, #16
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b084      	sub	sp, #16
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	60f8      	str	r0, [r7, #12]
 80162c8:	60b9      	str	r1, [r7, #8]
 80162ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	68ba      	ldr	r2, [r7, #8]
 80162d0:	2100      	movs	r1, #0
 80162d2:	68f8      	ldr	r0, [r7, #12]
 80162d4:	f000 fd2b 	bl	8016d2e <USBD_LL_Transmit>

  return USBD_OK;
 80162d8:	2300      	movs	r3, #0
}
 80162da:	4618      	mov	r0, r3
 80162dc:	3710      	adds	r7, #16
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b084      	sub	sp, #16
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	60f8      	str	r0, [r7, #12]
 80162ea:	60b9      	str	r1, [r7, #8]
 80162ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2203      	movs	r2, #3
 80162f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	687a      	ldr	r2, [r7, #4]
 80162fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	687a      	ldr	r2, [r7, #4]
 8016302:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	68ba      	ldr	r2, [r7, #8]
 801630a:	2100      	movs	r1, #0
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f000 fd2f 	bl	8016d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016312:	2300      	movs	r3, #0
}
 8016314:	4618      	mov	r0, r3
 8016316:	3710      	adds	r7, #16
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}

0801631c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b084      	sub	sp, #16
 8016320:	af00      	add	r7, sp, #0
 8016322:	60f8      	str	r0, [r7, #12]
 8016324:	60b9      	str	r1, [r7, #8]
 8016326:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	68ba      	ldr	r2, [r7, #8]
 801632c:	2100      	movs	r1, #0
 801632e:	68f8      	ldr	r0, [r7, #12]
 8016330:	f000 fd1e 	bl	8016d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016334:	2300      	movs	r3, #0
}
 8016336:	4618      	mov	r0, r3
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}

0801633e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801633e:	b580      	push	{r7, lr}
 8016340:	b082      	sub	sp, #8
 8016342:	af00      	add	r7, sp, #0
 8016344:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2204      	movs	r2, #4
 801634a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801634e:	2300      	movs	r3, #0
 8016350:	2200      	movs	r2, #0
 8016352:	2100      	movs	r1, #0
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 fcea 	bl	8016d2e <USBD_LL_Transmit>

  return USBD_OK;
 801635a:	2300      	movs	r3, #0
}
 801635c:	4618      	mov	r0, r3
 801635e:	3708      	adds	r7, #8
 8016360:	46bd      	mov	sp, r7
 8016362:	bd80      	pop	{r7, pc}

08016364 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2205      	movs	r2, #5
 8016370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016374:	2300      	movs	r3, #0
 8016376:	2200      	movs	r2, #0
 8016378:	2100      	movs	r1, #0
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f000 fcf8 	bl	8016d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016380:	2300      	movs	r3, #0
}
 8016382:	4618      	mov	r0, r3
 8016384:	3708      	adds	r7, #8
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
	...

0801638c <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b0d2      	sub	sp, #328	; 0x148
 8016390:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016392:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016396:	22c8      	movs	r2, #200	; 0xc8
 8016398:	2100      	movs	r1, #0
 801639a:	4618      	mov	r0, r3
 801639c:	f004 fadf 	bl	801a95e <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80163a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80163a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80163a8:	4618      	mov	r0, r3
 80163aa:	2360      	movs	r3, #96	; 0x60
 80163ac:	461a      	mov	r2, r3
 80163ae:	2100      	movs	r1, #0
 80163b0:	f004 fad5 	bl	801a95e <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 80163b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80163b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80163bc:	461a      	mov	r2, r3
 80163be:	2300      	movs	r3, #0
 80163c0:	6013      	str	r3, [r2, #0]
 80163c2:	6053      	str	r3, [r2, #4]
 80163c4:	6093      	str	r3, [r2, #8]
 80163c6:	60d3      	str	r3, [r2, #12]
 80163c8:	6113      	str	r3, [r2, #16]
 80163ca:	6153      	str	r3, [r2, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 80163cc:	4b44      	ldr	r3, [pc, #272]	; (80164e0 <USBD_Clock_Config+0x154>)
 80163ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80163d2:	4a43      	ldr	r2, [pc, #268]	; (80164e0 <USBD_Clock_Config+0x154>)
 80163d4:	f043 0304 	orr.w	r3, r3, #4
 80163d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80163dc:	4b40      	ldr	r3, [pc, #256]	; (80164e0 <USBD_Clock_Config+0x154>)
 80163de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80163e2:	f003 0204 	and.w	r2, r3, #4
 80163e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80163ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80163ee:	601a      	str	r2, [r3, #0]
 80163f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80163f4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80163f8:	681b      	ldr	r3, [r3, #0]
  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80163fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80163fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016402:	2220      	movs	r2, #32
 8016404:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8016406:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801640a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801640e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016412:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8016414:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016418:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801641c:	2200      	movs	r2, #0
 801641e:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8016420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016424:	f04f 0300 	mov.w	r3, #0
 8016428:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.IclkClockSelection  = RCC_CLK48CLKSOURCE_HSI48;
 801642c:	2300      	movs	r3, #0
 801642e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8016432:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016436:	4618      	mov	r0, r3
 8016438:	f7f7 fad4 	bl	800d9e4 <HAL_RCCEx_PeriphCLKConfig>
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 801643c:	f107 0320 	add.w	r3, r7, #32
 8016440:	4618      	mov	r0, r3
 8016442:	f7f6 f823 	bl	800c48c <HAL_RCC_OscConfig>
 8016446:	4603      	mov	r3, r0
 8016448:	2b00      	cmp	r3, #0
 801644a:	d001      	beq.n	8016450 <USBD_Clock_Config+0xc4>
  {
    Error_Handler();
 801644c:	f7eb ff7e 	bl	800234c <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/
  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 8016450:	4b23      	ldr	r3, [pc, #140]	; (80164e0 <USBD_Clock_Config+0x154>)
 8016452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016456:	4a22      	ldr	r2, [pc, #136]	; (80164e0 <USBD_Clock_Config+0x154>)
 8016458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801645c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8016460:	4b1f      	ldr	r3, [pc, #124]	; (80164e0 <USBD_Clock_Config+0x154>)
 8016462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016466:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 801646a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801646e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8016472:	601a      	str	r2, [r3, #0]
 8016474:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016478:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801647c:	681b      	ldr	r3, [r3, #0]

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 801647e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8016482:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016486:	2200      	movs	r2, #0
 8016488:	601a      	str	r2, [r3, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 801648a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801648e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016492:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016496:	605a      	str	r2, [r3, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  RCC_CRS_RELOADVALUE_DEFAULT;
 8016498:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801649c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80164a0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80164a4:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 80164a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80164aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80164ae:	2222      	movs	r2, #34	; 0x22
 80164b0:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80164b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80164b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80164ba:	2200      	movs	r2, #0
 80164bc:	609a      	str	r2, [r3, #8]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 80164be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80164c2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80164c6:	2220      	movs	r2, #32
 80164c8:	615a      	str	r2, [r3, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 80164ca:	f107 0308 	add.w	r3, r7, #8
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7f9 fda2 	bl	8010018 <HAL_RCCEx_CRSConfig>
}
 80164d4:	bf00      	nop
 80164d6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	46020c00 	.word	0x46020c00

080164e4 <HAL_GPIO_EXTI_Rising_Callback>:
  *         Handle remote-wakeup through key button
  * @param  GPIO_Pin
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b083      	sub	sp, #12
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	4603      	mov	r3, r0
 80164ec:	80fb      	strh	r3, [r7, #6]
//    {
//      GetPointerData(HID_Buffer);
//      USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
//    }
//  }
}
 80164ee:	bf00      	nop
 80164f0:	370c      	adds	r7, #12
 80164f2:	46bd      	mov	sp, r7
 80164f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f8:	4770      	bx	lr
	...

080164fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 8016500:	f7ff ff44 	bl	801638c <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
//  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 8016504:	2200      	movs	r2, #0
 8016506:	4912      	ldr	r1, [pc, #72]	; (8016550 <MX_USB_Device_Init+0x54>)
 8016508:	4812      	ldr	r0, [pc, #72]	; (8016554 <MX_USB_Device_Init+0x58>)
 801650a:	f7fe fdd5 	bl	80150b8 <USBD_Init>
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d001      	beq.n	8016518 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 8016514:	f7eb ff1a 	bl	800234c <Error_Handler>
  }
//  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8016518:	490f      	ldr	r1, [pc, #60]	; (8016558 <MX_USB_Device_Init+0x5c>)
 801651a:	480e      	ldr	r0, [pc, #56]	; (8016554 <MX_USB_Device_Init+0x58>)
 801651c:	f7fe fdfc 	bl	8015118 <USBD_RegisterClass>
 8016520:	4603      	mov	r3, r0
 8016522:	2b00      	cmp	r3, #0
 8016524:	d001      	beq.n	801652a <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8016526:	f7eb ff11 	bl	800234c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801652a:	490c      	ldr	r1, [pc, #48]	; (801655c <MX_USB_Device_Init+0x60>)
 801652c:	4809      	ldr	r0, [pc, #36]	; (8016554 <MX_USB_Device_Init+0x58>)
 801652e:	f7fe fd1d 	bl	8014f6c <USBD_CDC_RegisterInterface>
 8016532:	4603      	mov	r3, r0
 8016534:	2b00      	cmp	r3, #0
 8016536:	d001      	beq.n	801653c <MX_USB_Device_Init+0x40>
    Error_Handler();
 8016538:	f7eb ff08 	bl	800234c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801653c:	4805      	ldr	r0, [pc, #20]	; (8016554 <MX_USB_Device_Init+0x58>)
 801653e:	f7fe fe12 	bl	8015166 <USBD_Start>
 8016542:	4603      	mov	r3, r0
 8016544:	2b00      	cmp	r3, #0
 8016546:	d001      	beq.n	801654c <MX_USB_Device_Init+0x50>
    Error_Handler();
 8016548:	f7eb ff00 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801654c:	bf00      	nop
 801654e:	bd80      	pop	{r7, pc}
 8016550:	200001b0 	.word	0x200001b0
 8016554:	20002d68 	.word	0x20002d68
 8016558:	20000098 	.word	0x20000098
 801655c:	2000019c 	.word	0x2000019c

08016560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016564:	2200      	movs	r2, #0
 8016566:	4905      	ldr	r1, [pc, #20]	; (801657c <CDC_Init_FS+0x1c>)
 8016568:	4805      	ldr	r0, [pc, #20]	; (8016580 <CDC_Init_FS+0x20>)
 801656a:	f7fe fd14 	bl	8014f96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801656e:	4905      	ldr	r1, [pc, #20]	; (8016584 <CDC_Init_FS+0x24>)
 8016570:	4803      	ldr	r0, [pc, #12]	; (8016580 <CDC_Init_FS+0x20>)
 8016572:	f7fe fd2e 	bl	8014fd2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016578:	4618      	mov	r0, r3
 801657a:	bd80      	pop	{r7, pc}
 801657c:	20003838 	.word	0x20003838
 8016580:	20002d68 	.word	0x20002d68
 8016584:	20003038 	.word	0x20003038

08016588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016588:	b480      	push	{r7}
 801658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801658c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801658e:	4618      	mov	r0, r3
 8016590:	46bd      	mov	sp, r7
 8016592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016596:	4770      	bx	lr

08016598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016598:	b480      	push	{r7}
 801659a:	b083      	sub	sp, #12
 801659c:	af00      	add	r7, sp, #0
 801659e:	4603      	mov	r3, r0
 80165a0:	6039      	str	r1, [r7, #0]
 80165a2:	71fb      	strb	r3, [r7, #7]
 80165a4:	4613      	mov	r3, r2
 80165a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80165a8:	79fb      	ldrb	r3, [r7, #7]
 80165aa:	2b23      	cmp	r3, #35	; 0x23
 80165ac:	d84a      	bhi.n	8016644 <CDC_Control_FS+0xac>
 80165ae:	a201      	add	r2, pc, #4	; (adr r2, 80165b4 <CDC_Control_FS+0x1c>)
 80165b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b4:	08016645 	.word	0x08016645
 80165b8:	08016645 	.word	0x08016645
 80165bc:	08016645 	.word	0x08016645
 80165c0:	08016645 	.word	0x08016645
 80165c4:	08016645 	.word	0x08016645
 80165c8:	08016645 	.word	0x08016645
 80165cc:	08016645 	.word	0x08016645
 80165d0:	08016645 	.word	0x08016645
 80165d4:	08016645 	.word	0x08016645
 80165d8:	08016645 	.word	0x08016645
 80165dc:	08016645 	.word	0x08016645
 80165e0:	08016645 	.word	0x08016645
 80165e4:	08016645 	.word	0x08016645
 80165e8:	08016645 	.word	0x08016645
 80165ec:	08016645 	.word	0x08016645
 80165f0:	08016645 	.word	0x08016645
 80165f4:	08016645 	.word	0x08016645
 80165f8:	08016645 	.word	0x08016645
 80165fc:	08016645 	.word	0x08016645
 8016600:	08016645 	.word	0x08016645
 8016604:	08016645 	.word	0x08016645
 8016608:	08016645 	.word	0x08016645
 801660c:	08016645 	.word	0x08016645
 8016610:	08016645 	.word	0x08016645
 8016614:	08016645 	.word	0x08016645
 8016618:	08016645 	.word	0x08016645
 801661c:	08016645 	.word	0x08016645
 8016620:	08016645 	.word	0x08016645
 8016624:	08016645 	.word	0x08016645
 8016628:	08016645 	.word	0x08016645
 801662c:	08016645 	.word	0x08016645
 8016630:	08016645 	.word	0x08016645
 8016634:	08016645 	.word	0x08016645
 8016638:	08016645 	.word	0x08016645
 801663c:	08016645 	.word	0x08016645
 8016640:	08016645 	.word	0x08016645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016644:	bf00      	nop
  }

  return (USBD_OK);
 8016646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016648:	4618      	mov	r0, r3
 801664a:	370c      	adds	r7, #12
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr

08016654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801665e:	6879      	ldr	r1, [r7, #4]
 8016660:	4805      	ldr	r0, [pc, #20]	; (8016678 <CDC_Receive_FS+0x24>)
 8016662:	f7fe fcb6 	bl	8014fd2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016666:	4804      	ldr	r0, [pc, #16]	; (8016678 <CDC_Receive_FS+0x24>)
 8016668:	f7fe fcfc 	bl	8015064 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801666c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801666e:	4618      	mov	r0, r3
 8016670:	3708      	adds	r7, #8
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	20002d68 	.word	0x20002d68

0801667c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b084      	sub	sp, #16
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	460b      	mov	r3, r1
 8016686:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016688:	2300      	movs	r3, #0
 801668a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801668c:	4b0d      	ldr	r3, [pc, #52]	; (80166c4 <CDC_Transmit_FS+0x48>)
 801668e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016692:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801669a:	2b00      	cmp	r3, #0
 801669c:	d001      	beq.n	80166a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801669e:	2301      	movs	r3, #1
 80166a0:	e00b      	b.n	80166ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80166a2:	887b      	ldrh	r3, [r7, #2]
 80166a4:	461a      	mov	r2, r3
 80166a6:	6879      	ldr	r1, [r7, #4]
 80166a8:	4806      	ldr	r0, [pc, #24]	; (80166c4 <CDC_Transmit_FS+0x48>)
 80166aa:	f7fe fc74 	bl	8014f96 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80166ae:	4805      	ldr	r0, [pc, #20]	; (80166c4 <CDC_Transmit_FS+0x48>)
 80166b0:	f7fe fca8 	bl	8015004 <USBD_CDC_TransmitPacket>
 80166b4:	4603      	mov	r3, r0
 80166b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80166b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3710      	adds	r7, #16
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	20002d68 	.word	0x20002d68

080166c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80166c8:	b480      	push	{r7}
 80166ca:	b087      	sub	sp, #28
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	60f8      	str	r0, [r7, #12]
 80166d0:	60b9      	str	r1, [r7, #8]
 80166d2:	4613      	mov	r3, r2
 80166d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80166d6:	2300      	movs	r3, #0
 80166d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80166da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80166de:	4618      	mov	r0, r3
 80166e0:	371c      	adds	r7, #28
 80166e2:	46bd      	mov	sp, r7
 80166e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e8:	4770      	bx	lr
	...

080166ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b083      	sub	sp, #12
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	6039      	str	r1, [r7, #0]
 80166f6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	2212      	movs	r2, #18
 80166fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80166fe:	4b03      	ldr	r3, [pc, #12]	; (801670c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016700:	4618      	mov	r0, r3
 8016702:	370c      	adds	r7, #12
 8016704:	46bd      	mov	sp, r7
 8016706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670a:	4770      	bx	lr
 801670c:	200001cc 	.word	0x200001cc

08016710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016710:	b480      	push	{r7}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	4603      	mov	r3, r0
 8016718:	6039      	str	r1, [r7, #0]
 801671a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	2204      	movs	r2, #4
 8016720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016722:	4b03      	ldr	r3, [pc, #12]	; (8016730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016724:	4618      	mov	r0, r3
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr
 8016730:	200001e0 	.word	0x200001e0

08016734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b082      	sub	sp, #8
 8016738:	af00      	add	r7, sp, #0
 801673a:	4603      	mov	r3, r0
 801673c:	6039      	str	r1, [r7, #0]
 801673e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016740:	79fb      	ldrb	r3, [r7, #7]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d105      	bne.n	8016752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016746:	683a      	ldr	r2, [r7, #0]
 8016748:	4907      	ldr	r1, [pc, #28]	; (8016768 <USBD_FS_ProductStrDescriptor+0x34>)
 801674a:	4808      	ldr	r0, [pc, #32]	; (801676c <USBD_FS_ProductStrDescriptor+0x38>)
 801674c:	f7ff fd3d 	bl	80161ca <USBD_GetString>
 8016750:	e004      	b.n	801675c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016752:	683a      	ldr	r2, [r7, #0]
 8016754:	4904      	ldr	r1, [pc, #16]	; (8016768 <USBD_FS_ProductStrDescriptor+0x34>)
 8016756:	4805      	ldr	r0, [pc, #20]	; (801676c <USBD_FS_ProductStrDescriptor+0x38>)
 8016758:	f7ff fd37 	bl	80161ca <USBD_GetString>
  }
  return USBD_StrDesc;
 801675c:	4b02      	ldr	r3, [pc, #8]	; (8016768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801675e:	4618      	mov	r0, r3
 8016760:	3708      	adds	r7, #8
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	20004038 	.word	0x20004038
 801676c:	0801f5a0 	.word	0x0801f5a0

08016770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	4603      	mov	r3, r0
 8016778:	6039      	str	r1, [r7, #0]
 801677a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801677c:	683a      	ldr	r2, [r7, #0]
 801677e:	4904      	ldr	r1, [pc, #16]	; (8016790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016780:	4804      	ldr	r0, [pc, #16]	; (8016794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016782:	f7ff fd22 	bl	80161ca <USBD_GetString>
  return USBD_StrDesc;
 8016786:	4b02      	ldr	r3, [pc, #8]	; (8016790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016788:	4618      	mov	r0, r3
 801678a:	3708      	adds	r7, #8
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	20004038 	.word	0x20004038
 8016794:	0801f5b8 	.word	0x0801f5b8

08016798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b082      	sub	sp, #8
 801679c:	af00      	add	r7, sp, #0
 801679e:	4603      	mov	r3, r0
 80167a0:	6039      	str	r1, [r7, #0]
 80167a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80167a4:	79fb      	ldrb	r3, [r7, #7]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d105      	bne.n	80167b6 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80167aa:	683a      	ldr	r2, [r7, #0]
 80167ac:	4907      	ldr	r1, [pc, #28]	; (80167cc <USBD_FS_SerialStrDescriptor+0x34>)
 80167ae:	4808      	ldr	r0, [pc, #32]	; (80167d0 <USBD_FS_SerialStrDescriptor+0x38>)
 80167b0:	f7ff fd0b 	bl	80161ca <USBD_GetString>
 80167b4:	e004      	b.n	80167c0 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80167b6:	683a      	ldr	r2, [r7, #0]
 80167b8:	4904      	ldr	r1, [pc, #16]	; (80167cc <USBD_FS_SerialStrDescriptor+0x34>)
 80167ba:	4805      	ldr	r0, [pc, #20]	; (80167d0 <USBD_FS_SerialStrDescriptor+0x38>)
 80167bc:	f7ff fd05 	bl	80161ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80167c0:	4b02      	ldr	r3, [pc, #8]	; (80167cc <USBD_FS_SerialStrDescriptor+0x34>)
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}
 80167ca:	bf00      	nop
 80167cc:	20004038 	.word	0x20004038
 80167d0:	0801f5cc 	.word	0x0801f5cc

080167d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
 80167da:	4603      	mov	r3, r0
 80167dc:	6039      	str	r1, [r7, #0]
 80167de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80167e0:	79fb      	ldrb	r3, [r7, #7]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d105      	bne.n	80167f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80167e6:	683a      	ldr	r2, [r7, #0]
 80167e8:	4907      	ldr	r1, [pc, #28]	; (8016808 <USBD_FS_ConfigStrDescriptor+0x34>)
 80167ea:	4808      	ldr	r0, [pc, #32]	; (801680c <USBD_FS_ConfigStrDescriptor+0x38>)
 80167ec:	f7ff fced 	bl	80161ca <USBD_GetString>
 80167f0:	e004      	b.n	80167fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80167f2:	683a      	ldr	r2, [r7, #0]
 80167f4:	4904      	ldr	r1, [pc, #16]	; (8016808 <USBD_FS_ConfigStrDescriptor+0x34>)
 80167f6:	4805      	ldr	r0, [pc, #20]	; (801680c <USBD_FS_ConfigStrDescriptor+0x38>)
 80167f8:	f7ff fce7 	bl	80161ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80167fc:	4b02      	ldr	r3, [pc, #8]	; (8016808 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
 8016806:	bf00      	nop
 8016808:	20004038 	.word	0x20004038
 801680c:	0801f5dc 	.word	0x0801f5dc

08016810 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	4603      	mov	r3, r0
 8016818:	6039      	str	r1, [r7, #0]
 801681a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801681c:	79fb      	ldrb	r3, [r7, #7]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d105      	bne.n	801682e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016822:	683a      	ldr	r2, [r7, #0]
 8016824:	4907      	ldr	r1, [pc, #28]	; (8016844 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016826:	4808      	ldr	r0, [pc, #32]	; (8016848 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016828:	f7ff fccf 	bl	80161ca <USBD_GetString>
 801682c:	e004      	b.n	8016838 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801682e:	683a      	ldr	r2, [r7, #0]
 8016830:	4904      	ldr	r1, [pc, #16]	; (8016844 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016832:	4805      	ldr	r0, [pc, #20]	; (8016848 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016834:	f7ff fcc9 	bl	80161ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8016838:	4b02      	ldr	r3, [pc, #8]	; (8016844 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801683a:	4618      	mov	r0, r3
 801683c:	3708      	adds	r7, #8
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
 8016842:	bf00      	nop
 8016844:	20004038 	.word	0x20004038
 8016848:	0801f5e8 	.word	0x0801f5e8

0801684c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b082      	sub	sp, #8
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016860:	4619      	mov	r1, r3
 8016862:	4610      	mov	r0, r2
 8016864:	f7fe fcca 	bl	80151fc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8016868:	bf00      	nop
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	460b      	mov	r3, r1
 801687a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016882:	78fa      	ldrb	r2, [r7, #3]
 8016884:	6879      	ldr	r1, [r7, #4]
 8016886:	4613      	mov	r3, r2
 8016888:	00db      	lsls	r3, r3, #3
 801688a:	4413      	add	r3, r2
 801688c:	009b      	lsls	r3, r3, #2
 801688e:	440b      	add	r3, r1
 8016890:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016894:	681a      	ldr	r2, [r3, #0]
 8016896:	78fb      	ldrb	r3, [r7, #3]
 8016898:	4619      	mov	r1, r3
 801689a:	f7fe fd04 	bl	80152a6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801689e:	bf00      	nop
 80168a0:	3708      	adds	r7, #8
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}

080168a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a6:	b580      	push	{r7, lr}
 80168a8:	b082      	sub	sp, #8
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	6078      	str	r0, [r7, #4]
 80168ae:	460b      	mov	r3, r1
 80168b0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80168b8:	78fa      	ldrb	r2, [r7, #3]
 80168ba:	6879      	ldr	r1, [r7, #4]
 80168bc:	4613      	mov	r3, r2
 80168be:	00db      	lsls	r3, r3, #3
 80168c0:	4413      	add	r3, r2
 80168c2:	009b      	lsls	r3, r3, #2
 80168c4:	440b      	add	r3, r1
 80168c6:	334c      	adds	r3, #76	; 0x4c
 80168c8:	681a      	ldr	r2, [r3, #0]
 80168ca:	78fb      	ldrb	r3, [r7, #3]
 80168cc:	4619      	mov	r1, r3
 80168ce:	f7fe fd4d 	bl	801536c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80168d2:	bf00      	nop
 80168d4:	3708      	adds	r7, #8
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}

080168da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168da:	b580      	push	{r7, lr}
 80168dc:	b082      	sub	sp, #8
 80168de:	af00      	add	r7, sp, #0
 80168e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7fe fe61 	bl	80155b0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80168ee:	bf00      	nop
 80168f0:	3708      	adds	r7, #8
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}

080168f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168f6:	b580      	push	{r7, lr}
 80168f8:	b084      	sub	sp, #16
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80168fe:	2301      	movs	r3, #1
 8016900:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	68db      	ldr	r3, [r3, #12]
 8016906:	2b02      	cmp	r3, #2
 8016908:	d001      	beq.n	801690e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801690a:	f7eb fd1f 	bl	800234c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016914:	7bfa      	ldrb	r2, [r7, #15]
 8016916:	4611      	mov	r1, r2
 8016918:	4618      	mov	r0, r3
 801691a:	f7fe fe0b 	bl	8015534 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016924:	4618      	mov	r0, r3
 8016926:	f7fe fdb7 	bl	8015498 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801692a:	bf00      	nop
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
	...

08016934 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b082      	sub	sp, #8
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016942:	4618      	mov	r0, r3
 8016944:	f7fe fe06 	bl	8015554 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if ((hpcd->Init.low_power_enable) && (((USBD_HandleTypeDef*)hpcd->pData)->dev_old_state == USBD_STATE_CONFIGURED))
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6a1b      	ldr	r3, [r3, #32]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d02b      	beq.n	80169a8 <HAL_PCD_SuspendCallback+0x74>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016956:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801695a:	b2db      	uxtb	r3, r3
 801695c:	2b03      	cmp	r3, #3
 801695e:	d123      	bne.n	80169a8 <HAL_PCD_SuspendCallback+0x74>
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, 0U);
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
    HAL_PWR_EnableSleepOnExit();
#else
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	6812      	ldr	r2, [r2, #0]
 801696e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016972:	f043 0301 	orr.w	r3, r3, #1
 8016976:	6013      	str	r3, [r2, #0]
    __HAL_RCC_USB_CLK_SLEEP_ENABLE();
 8016978:	4b0d      	ldr	r3, [pc, #52]	; (80169b0 <HAL_PCD_SuspendCallback+0x7c>)
 801697a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801697e:	4a0c      	ldr	r2, [pc, #48]	; (80169b0 <HAL_PCD_SuspendCallback+0x7c>)
 8016980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016984:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    /* Stop 1 mode */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8016988:	4b0a      	ldr	r3, [pc, #40]	; (80169b4 <HAL_PCD_SuspendCallback+0x80>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	f023 0307 	bic.w	r3, r3, #7
 8016990:	4a08      	ldr	r2, [pc, #32]	; (80169b4 <HAL_PCD_SuspendCallback+0x80>)
 8016992:	f043 0301 	orr.w	r3, r3, #1
 8016996:	6013      	str	r3, [r2, #0]
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
 8016998:	4b07      	ldr	r3, [pc, #28]	; (80169b8 <HAL_PCD_SuspendCallback+0x84>)
 801699a:	691b      	ldr	r3, [r3, #16]
 801699c:	4a06      	ldr	r2, [pc, #24]	; (80169b8 <HAL_PCD_SuspendCallback+0x84>)
 801699e:	f043 0304 	orr.w	r3, r3, #4
 80169a2:	6113      	str	r3, [r2, #16]
    HAL_PWR_EnableSleepOnExit();
 80169a4:	f7f5 fcb0 	bl	800c308 <HAL_PWR_EnableSleepOnExit>
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80169a8:	bf00      	nop
 80169aa:	3708      	adds	r7, #8
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}
 80169b0:	46020c00 	.word	0x46020c00
 80169b4:	46020800 	.word	0x46020800
 80169b8:	e000ed00 	.word	0xe000ed00

080169bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6a1b      	ldr	r3, [r3, #32]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d013      	beq.n	80169f4 <HAL_PCD_ResumeCallback+0x38>
  {
#ifdef USBD_LPM_SLEEP_CONFIG
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
#else
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80169cc:	4b0e      	ldr	r3, [pc, #56]	; (8016a08 <HAL_PCD_ResumeCallback+0x4c>)
 80169ce:	691b      	ldr	r3, [r3, #16]
 80169d0:	4a0d      	ldr	r2, [pc, #52]	; (8016a08 <HAL_PCD_ResumeCallback+0x4c>)
 80169d2:	f023 0306 	bic.w	r3, r3, #6
 80169d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80169d8:	f000 fa30 	bl	8016e3c <SystemClockConfig_Resume>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	687a      	ldr	r2, [r7, #4]
 80169e8:	6812      	ldr	r2, [r2, #0]
 80169ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80169ee:	f023 0301 	bic.w	r3, r3, #1
 80169f2:	6013      	str	r3, [r2, #0]
#endif
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7fe fdc0 	bl	8015580 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8016a00:	bf00      	nop
 8016a02:	3708      	adds	r7, #8
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd80      	pop	{r7, pc}
 8016a08:	e000ed00 	.word	0xe000ed00

08016a0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
 8016a14:	460b      	mov	r3, r1
 8016a16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a1e:	78fa      	ldrb	r2, [r7, #3]
 8016a20:	4611      	mov	r1, r2
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7fe fe0c 	bl	8015640 <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */
}
 8016a28:	bf00      	nop
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}

08016a30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	460b      	mov	r3, r1
 8016a3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a42:	78fa      	ldrb	r2, [r7, #3]
 8016a44:	4611      	mov	r1, r2
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7fe fdd4 	bl	80155f4 <USBD_LL_IsoINIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
 8016a4c:	bf00      	nop
 8016a4e:	3708      	adds	r7, #8
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}

08016a54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7fe fe12 	bl	801568c <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
 8016a68:	bf00      	nop
 8016a6a:	3708      	adds	r7, #8
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}

08016a70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7fe fe0f 	bl	80156a2 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
 8016a84:	bf00      	nop
 8016a86:	3708      	adds	r7, #8
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}

08016a8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b084      	sub	sp, #16
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
  /* Enable USB power on Pwrctrl CR2 register. */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016a94:	4b2e      	ldr	r3, [pc, #184]	; (8016b50 <USBD_LL_Init+0xc4>)
 8016a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016a9a:	f003 0304 	and.w	r3, r3, #4
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d119      	bne.n	8016ad6 <USBD_LL_Init+0x4a>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8016aa2:	4b2b      	ldr	r3, [pc, #172]	; (8016b50 <USBD_LL_Init+0xc4>)
 8016aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016aa8:	4a29      	ldr	r2, [pc, #164]	; (8016b50 <USBD_LL_Init+0xc4>)
 8016aaa:	f043 0304 	orr.w	r3, r3, #4
 8016aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016ab2:	4b27      	ldr	r3, [pc, #156]	; (8016b50 <USBD_LL_Init+0xc4>)
 8016ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016ab8:	f003 0304 	and.w	r3, r3, #4
 8016abc:	60fb      	str	r3, [r7, #12]
 8016abe:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddUSB();
 8016ac0:	f7f5 fcb4 	bl	800c42c <HAL_PWREx_EnableVddUSB>
    __HAL_RCC_PWR_CLK_DISABLE();
 8016ac4:	4b22      	ldr	r3, [pc, #136]	; (8016b50 <USBD_LL_Init+0xc4>)
 8016ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016aca:	4a21      	ldr	r2, [pc, #132]	; (8016b50 <USBD_LL_Init+0xc4>)
 8016acc:	f023 0304 	bic.w	r3, r3, #4
 8016ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016ad4:	e001      	b.n	8016ada <USBD_LL_Init+0x4e>
  }
  else
  {
    HAL_PWREx_EnableVddUSB();
 8016ad6:	f7f5 fca9 	bl	800c42c <HAL_PWREx_EnableVddUSB>
  }
  hpcd_USB_OTG_FS.pData = pdev;
 8016ada:	4a1e      	ldr	r2, [pc, #120]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	4a1b      	ldr	r2, [pc, #108]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016ae6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016aea:	4b1a      	ldr	r3, [pc, #104]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016aec:	4a1a      	ldr	r2, [pc, #104]	; (8016b58 <USBD_LL_Init+0xcc>)
 8016aee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016af0:	4b18      	ldr	r3, [pc, #96]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016af2:	2206      	movs	r2, #6
 8016af4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016af6:	4b17      	ldr	r3, [pc, #92]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016af8:	2202      	movs	r2, #2
 8016afa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016afc:	4b15      	ldr	r3, [pc, #84]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016afe:	2202      	movs	r2, #2
 8016b00:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016b02:	4b14      	ldr	r3, [pc, #80]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b04:	2200      	movs	r2, #0
 8016b06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016b08:	4b12      	ldr	r3, [pc, #72]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016b0e:	4b11      	ldr	r3, [pc, #68]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b10:	2200      	movs	r2, #0
 8016b12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016b14:	4b0f      	ldr	r3, [pc, #60]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	629a      	str	r2, [r3, #40]	; 0x28
  /* Initialize LL Driver */
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016b1a:	480e      	ldr	r0, [pc, #56]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b1c:	f7f4 f922 	bl	800ad64 <HAL_PCD_Init>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d001      	beq.n	8016b2a <USBD_LL_Init+0x9e>
  {
    Error_Handler( );
 8016b26:	f7eb fc11 	bl	800234c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN FiFo_Configuration */
  
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016b2a:	2180      	movs	r1, #128	; 0x80
 8016b2c:	4809      	ldr	r0, [pc, #36]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b2e:	f7f5 fbaa 	bl	800c286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016b32:	2240      	movs	r2, #64	; 0x40
 8016b34:	2100      	movs	r1, #0
 8016b36:	4807      	ldr	r0, [pc, #28]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b38:	f7f5 fb5e 	bl	800c1f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016b3c:	2280      	movs	r2, #128	; 0x80
 8016b3e:	2101      	movs	r1, #1
 8016b40:	4804      	ldr	r0, [pc, #16]	; (8016b54 <USBD_LL_Init+0xc8>)
 8016b42:	f7f5 fb59 	bl	800c1f8 <HAL_PCDEx_SetTxFiFo>
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x10);
//  /* USER CODE END FiFo_Configuration */
//  /* USER CODE BEGIN FiFo_Configuration_HID */
//  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x10);
  /* USER CODE END FiFo_Configuration_HID */
  return USBD_OK;
 8016b46:	2300      	movs	r3, #0
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3710      	adds	r7, #16
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	46020c00 	.word	0x46020c00
 8016b54:	20001608 	.word	0x20001608
 8016b58:	42040000 	.word	0x42040000

08016b5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b64:	2300      	movs	r3, #0
 8016b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b72:	4618      	mov	r0, r3
 8016b74:	f7f4 fa1a 	bl	800afac <HAL_PCD_Start>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b7c:	7bfb      	ldrb	r3, [r7, #15]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f000 f964 	bl	8016e4c <USBD_Get_USB_Status>
 8016b84:	4603      	mov	r3, r0
 8016b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3710      	adds	r7, #16
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b084      	sub	sp, #16
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
 8016b9a:	4608      	mov	r0, r1
 8016b9c:	4611      	mov	r1, r2
 8016b9e:	461a      	mov	r2, r3
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	70fb      	strb	r3, [r7, #3]
 8016ba4:	460b      	mov	r3, r1
 8016ba6:	70bb      	strb	r3, [r7, #2]
 8016ba8:	4613      	mov	r3, r2
 8016baa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bac:	2300      	movs	r3, #0
 8016bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016bba:	78bb      	ldrb	r3, [r7, #2]
 8016bbc:	883a      	ldrh	r2, [r7, #0]
 8016bbe:	78f9      	ldrb	r1, [r7, #3]
 8016bc0:	f7f4 ff14 	bl	800b9ec <HAL_PCD_EP_Open>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bc8:	7bfb      	ldrb	r3, [r7, #15]
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f000 f93e 	bl	8016e4c <USBD_Get_USB_Status>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3710      	adds	r7, #16
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}

08016bde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bde:	b580      	push	{r7, lr}
 8016be0:	b084      	sub	sp, #16
 8016be2:	af00      	add	r7, sp, #0
 8016be4:	6078      	str	r0, [r7, #4]
 8016be6:	460b      	mov	r3, r1
 8016be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bea:	2300      	movs	r3, #0
 8016bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bf8:	78fa      	ldrb	r2, [r7, #3]
 8016bfa:	4611      	mov	r1, r2
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7f4 ff5d 	bl	800babc <HAL_PCD_EP_Close>
 8016c02:	4603      	mov	r3, r0
 8016c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c06:	7bfb      	ldrb	r3, [r7, #15]
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f000 f91f 	bl	8016e4c <USBD_Get_USB_Status>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	3710      	adds	r7, #16
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b084      	sub	sp, #16
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	460b      	mov	r3, r1
 8016c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c36:	78fa      	ldrb	r2, [r7, #3]
 8016c38:	4611      	mov	r1, r2
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7f5 f835 	bl	800bcaa <HAL_PCD_EP_SetStall>
 8016c40:	4603      	mov	r3, r0
 8016c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c44:	7bfb      	ldrb	r3, [r7, #15]
 8016c46:	4618      	mov	r0, r3
 8016c48:	f000 f900 	bl	8016e4c <USBD_Get_USB_Status>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3710      	adds	r7, #16
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}

08016c5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c5a:	b580      	push	{r7, lr}
 8016c5c:	b084      	sub	sp, #16
 8016c5e:	af00      	add	r7, sp, #0
 8016c60:	6078      	str	r0, [r7, #4]
 8016c62:	460b      	mov	r3, r1
 8016c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c66:	2300      	movs	r3, #0
 8016c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c74:	78fa      	ldrb	r2, [r7, #3]
 8016c76:	4611      	mov	r1, r2
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f7f5 f87a 	bl	800bd72 <HAL_PCD_EP_ClrStall>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c82:	7bfb      	ldrb	r3, [r7, #15]
 8016c84:	4618      	mov	r0, r3
 8016c86:	f000 f8e1 	bl	8016e4c <USBD_Get_USB_Status>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c90:	4618      	mov	r0, r3
 8016c92:	3710      	adds	r7, #16
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b085      	sub	sp, #20
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016caa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	da0b      	bge.n	8016ccc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016cb4:	78fb      	ldrb	r3, [r7, #3]
 8016cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cba:	68f9      	ldr	r1, [r7, #12]
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	00db      	lsls	r3, r3, #3
 8016cc0:	4413      	add	r3, r2
 8016cc2:	009b      	lsls	r3, r3, #2
 8016cc4:	440b      	add	r3, r1
 8016cc6:	333e      	adds	r3, #62	; 0x3e
 8016cc8:	781b      	ldrb	r3, [r3, #0]
 8016cca:	e00b      	b.n	8016ce4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ccc:	78fb      	ldrb	r3, [r7, #3]
 8016cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cd2:	68f9      	ldr	r1, [r7, #12]
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	00db      	lsls	r3, r3, #3
 8016cd8:	4413      	add	r3, r2
 8016cda:	009b      	lsls	r3, r3, #2
 8016cdc:	440b      	add	r3, r1
 8016cde:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016ce2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3714      	adds	r7, #20
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr

08016cf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b084      	sub	sp, #16
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d00:	2300      	movs	r3, #0
 8016d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d0a:	78fa      	ldrb	r2, [r7, #3]
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7f4 fe47 	bl	800b9a2 <HAL_PCD_SetAddress>
 8016d14:	4603      	mov	r3, r0
 8016d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d18:	7bfb      	ldrb	r3, [r7, #15]
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f000 f896 	bl	8016e4c <USBD_Get_USB_Status>
 8016d20:	4603      	mov	r3, r0
 8016d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3710      	adds	r7, #16
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}

08016d2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b086      	sub	sp, #24
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	60f8      	str	r0, [r7, #12]
 8016d36:	607a      	str	r2, [r7, #4]
 8016d38:	603b      	str	r3, [r7, #0]
 8016d3a:	460b      	mov	r3, r1
 8016d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d42:	2300      	movs	r3, #0
 8016d44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016d4c:	7af9      	ldrb	r1, [r7, #11]
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	687a      	ldr	r2, [r7, #4]
 8016d52:	f7f4 ff60 	bl	800bc16 <HAL_PCD_EP_Transmit>
 8016d56:	4603      	mov	r3, r0
 8016d58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d5a:	7dfb      	ldrb	r3, [r7, #23]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f000 f875 	bl	8016e4c <USBD_Get_USB_Status>
 8016d62:	4603      	mov	r3, r0
 8016d64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016d66:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3718      	adds	r7, #24
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}

08016d70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b086      	sub	sp, #24
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	60f8      	str	r0, [r7, #12]
 8016d78:	607a      	str	r2, [r7, #4]
 8016d7a:	603b      	str	r3, [r7, #0]
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d80:	2300      	movs	r3, #0
 8016d82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016d8e:	7af9      	ldrb	r1, [r7, #11]
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	f7f4 fedc 	bl	800bb50 <HAL_PCD_EP_Receive>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d9c:	7dfb      	ldrb	r3, [r7, #23]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f000 f854 	bl	8016e4c <USBD_Get_USB_Status>
 8016da4:	4603      	mov	r3, r0
 8016da6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016da8:	7dbb      	ldrb	r3, [r7, #22]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3718      	adds	r7, #24
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016db2:	b580      	push	{r7, lr}
 8016db4:	b082      	sub	sp, #8
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	6078      	str	r0, [r7, #4]
 8016dba:	460b      	mov	r3, r1
 8016dbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016dc4:	78fa      	ldrb	r2, [r7, #3]
 8016dc6:	4611      	mov	r1, r2
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7f4 ff0c 	bl	800bbe6 <HAL_PCD_EP_GetRxCount>
 8016dce:	4603      	mov	r3, r0
}
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	3708      	adds	r7, #8
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}

08016dd8 <HAL_Delay>:
  * implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8016dd8:	b480      	push	{r7}
 8016dda:	b083      	sub	sp, #12
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
  while (Delay)
 8016de0:	e008      	b.n	8016df4 <HAL_Delay+0x1c>
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8016de2:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <HAL_Delay+0x30>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d002      	beq.n	8016df4 <HAL_Delay+0x1c>
    {
      Delay--;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	3b01      	subs	r3, #1
 8016df2:	607b      	str	r3, [r7, #4]
  while (Delay)
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d1f3      	bne.n	8016de2 <HAL_Delay+0xa>
    }
  }
}
 8016dfa:	bf00      	nop
 8016dfc:	bf00      	nop
 8016dfe:	370c      	adds	r7, #12
 8016e00:	46bd      	mov	sp, r7
 8016e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e06:	4770      	bx	lr
 8016e08:	e000e010 	.word	0xe000e010

08016e0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016e0c:	b480      	push	{r7}
 8016e0e:	b083      	sub	sp, #12
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016e14:	4b03      	ldr	r3, [pc, #12]	; (8016e24 <USBD_static_malloc+0x18>)
}
 8016e16:	4618      	mov	r0, r3
 8016e18:	370c      	adds	r7, #12
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e20:	4770      	bx	lr
 8016e22:	bf00      	nop
 8016e24:	20004078 	.word	0x20004078

08016e28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]

}
 8016e30:	bf00      	nop
 8016e32:	370c      	adds	r7, #12
 8016e34:	46bd      	mov	sp, r7
 8016e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3a:	4770      	bx	lr

08016e3c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
 void SystemClockConfig_Resume(void)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016e40:	f7ea f959 	bl	80010f6 <SystemClock_Config>
  USBD_Clock_Config();
 8016e44:	f7ff faa2 	bl	801638c <USBD_Clock_Config>
}
 8016e48:	bf00      	nop
 8016e4a:	bd80      	pop	{r7, pc}

08016e4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b085      	sub	sp, #20
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	4603      	mov	r3, r0
 8016e54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e56:	2300      	movs	r3, #0
 8016e58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e5a:	79fb      	ldrb	r3, [r7, #7]
 8016e5c:	2b03      	cmp	r3, #3
 8016e5e:	d817      	bhi.n	8016e90 <USBD_Get_USB_Status+0x44>
 8016e60:	a201      	add	r2, pc, #4	; (adr r2, 8016e68 <USBD_Get_USB_Status+0x1c>)
 8016e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e66:	bf00      	nop
 8016e68:	08016e79 	.word	0x08016e79
 8016e6c:	08016e7f 	.word	0x08016e7f
 8016e70:	08016e85 	.word	0x08016e85
 8016e74:	08016e8b 	.word	0x08016e8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e78:	2300      	movs	r3, #0
 8016e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8016e7c:	e00b      	b.n	8016e96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e7e:	2303      	movs	r3, #3
 8016e80:	73fb      	strb	r3, [r7, #15]
    break;
 8016e82:	e008      	b.n	8016e96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e84:	2301      	movs	r3, #1
 8016e86:	73fb      	strb	r3, [r7, #15]
    break;
 8016e88:	e005      	b.n	8016e96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e8a:	2303      	movs	r3, #3
 8016e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8016e8e:	e002      	b.n	8016e96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016e90:	2303      	movs	r3, #3
 8016e92:	73fb      	strb	r3, [r7, #15]
    break;
 8016e94:	bf00      	nop
  }
  return usb_status;
 8016e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3714      	adds	r7, #20
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea2:	4770      	bx	lr

08016ea4 <aiInit>:
float32_t *p_out1;



int aiInit(void)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b082      	sub	sp, #8
 8016ea8:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 8016eaa:	4b10      	ldr	r3, [pc, #64]	; (8016eec <aiInit+0x48>)
 8016eac:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 8016eae:	463b      	mov	r3, r7
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	480e      	ldr	r0, [pc, #56]	; (8016ef0 <aiInit+0x4c>)
 8016eb6:	f000 f973 	bl	80171a0 <ai_network_create_and_init>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {

  };

  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network , NULL);
 8016ebe:	4b0c      	ldr	r3, [pc, #48]	; (8016ef0 <aiInit+0x4c>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	2100      	movs	r1, #0
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f000 f9df 	bl	8017288 <ai_network_inputs_get>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	4a09      	ldr	r2, [pc, #36]	; (8016ef4 <aiInit+0x50>)
 8016ece:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8016ed0:	4b07      	ldr	r3, [pc, #28]	; (8016ef0 <aiInit+0x4c>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2100      	movs	r1, #0
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f000 f9f0 	bl	80172bc <ai_network_outputs_get>
 8016edc:	4603      	mov	r3, r0
 8016ede:	4a06      	ldr	r2, [pc, #24]	; (8016ef8 <aiInit+0x54>)
 8016ee0:	6013      	str	r3, [r2, #0]

  return 0;
 8016ee2:	2300      	movs	r3, #0
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3708      	adds	r7, #8
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	200042c0 	.word	0x200042c0
 8016ef0:	200042a4 	.word	0x200042a4
 8016ef4:	20004450 	.word	0x20004450
 8016ef8:	20004454 	.word	0x20004454

08016efc <aiProcess>:



int aiProcess(float *p_inData, float p_out_data[2])
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b086      	sub	sp, #24
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(p_inData);
 8016f06:	4b23      	ldr	r3, [pc, #140]	; (8016f94 <aiProcess+0x98>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	687a      	ldr	r2, [r7, #4]
 8016f0c:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data[0]);
 8016f0e:	4b22      	ldr	r3, [pc, #136]	; (8016f98 <aiProcess+0x9c>)
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	4a22      	ldr	r2, [pc, #136]	; (8016f9c <aiProcess+0xa0>)
 8016f14:	6812      	ldr	r2, [r2, #0]
 8016f16:	605a      	str	r2, [r3, #4]
	  ai_output[1].data = AI_HANDLE_PTR(out_data[1]);
  }

  if (AI_NETWORK_OUT_NUM == 1){
	  /* 2 - Perform the inference */
	  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8016f18:	4b21      	ldr	r3, [pc, #132]	; (8016fa0 <aiProcess+0xa4>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	4a1d      	ldr	r2, [pc, #116]	; (8016f94 <aiProcess+0x98>)
 8016f1e:	6811      	ldr	r1, [r2, #0]
 8016f20:	4a1d      	ldr	r2, [pc, #116]	; (8016f98 <aiProcess+0x9c>)
 8016f22:	6812      	ldr	r2, [r2, #0]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f000 fa1f 	bl	8017368 <ai_network_run>
 8016f2a:	6178      	str	r0, [r7, #20]
	  p_out0 = (float32_t*) ai_output[0].data;
 8016f2c:	4b1a      	ldr	r3, [pc, #104]	; (8016f98 <aiProcess+0x9c>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	4a1c      	ldr	r2, [pc, #112]	; (8016fa4 <aiProcess+0xa8>)
 8016f34:	6013      	str	r3, [r2, #0]
	  float32_t max_out = *p_out0;
 8016f36:	4b1b      	ldr	r3, [pc, #108]	; (8016fa4 <aiProcess+0xa8>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	613b      	str	r3, [r7, #16]
	  uint32_t max_idx = 0;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	60fb      	str	r3, [r7, #12]

	  arm_max_f32(p_out0,AI_NETWORK_OUT_1_SIZE, &max_out, &max_idx);
 8016f42:	4b18      	ldr	r3, [pc, #96]	; (8016fa4 <aiProcess+0xa8>)
 8016f44:	6818      	ldr	r0, [r3, #0]
 8016f46:	f107 030c 	add.w	r3, r7, #12
 8016f4a:	f107 0210 	add.w	r2, r7, #16
 8016f4e:	2103      	movs	r1, #3
 8016f50:	f002 fac2 	bl	80194d8 <arm_max_f32>
	  p_out_data[0] = (float32_t)max_idx;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	ee07 3a90 	vmov	s15, r3
 8016f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out * 100.0;
 8016f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	3304      	adds	r3, #4
 8016f6c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8016fa8 <aiProcess+0xac>
 8016f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f74:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[0] = (float32_t)p_out0[0];
	  p_out_data[1] = (float32_t)p_out1[(int) p_out0[0]];

  }

  if (n_batch != 1) {
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	2b01      	cmp	r3, #1
 8016f7c:	d004      	beq.n	8016f88 <aiProcess+0x8c>
	  ai_network_get_error(network);
 8016f7e:	4b08      	ldr	r3, [pc, #32]	; (8016fa0 <aiProcess+0xa4>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	4618      	mov	r0, r3
 8016f84:	f000 f8ea 	bl	801715c <ai_network_get_error>
  };


  return 0;
 8016f88:	2300      	movs	r3, #0
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3718      	adds	r7, #24
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	20004450 	.word	0x20004450
 8016f98:	20004454 	.word	0x20004454
 8016f9c:	200001e4 	.word	0x200001e4
 8016fa0:	200042a4 	.word	0x200042a4
 8016fa4:	20004458 	.word	0x20004458
 8016fa8:	42c80000 	.word	0x42c80000

08016fac <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b084      	sub	sp, #16
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
 8016fb4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8016fba:	f107 030c 	add.w	r3, r7, #12
 8016fbe:	683a      	ldr	r2, [r7, #0]
 8016fc0:	2101      	movs	r1, #1
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f000 faa8 	bl	8017518 <ai_platform_get_activations_map>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d023      	beq.n	8017016 <network_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	4a16      	ldr	r2, [pc, #88]	; (801702c <network_configure_activations+0x80>)
 8016fd2:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	4a15      	ldr	r2, [pc, #84]	; (801702c <network_configure_activations+0x80>)
 8016fd8:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	4a14      	ldr	r2, [pc, #80]	; (8017030 <network_configure_activations+0x84>)
 8016fde:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	4a13      	ldr	r2, [pc, #76]	; (8017030 <network_configure_activations+0x84>)
 8016fe4:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	33c8      	adds	r3, #200	; 0xc8
 8016fea:	4a12      	ldr	r2, [pc, #72]	; (8017034 <network_configure_activations+0x88>)
 8016fec:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	33c8      	adds	r3, #200	; 0xc8
 8016ff2:	4a10      	ldr	r2, [pc, #64]	; (8017034 <network_configure_activations+0x88>)
 8016ff4:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	4a0f      	ldr	r2, [pc, #60]	; (8017038 <network_configure_activations+0x8c>)
 8016ffa:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	4a0e      	ldr	r2, [pc, #56]	; (8017038 <network_configure_activations+0x8c>)
 8017000:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	33c8      	adds	r3, #200	; 0xc8
 8017006:	4a0d      	ldr	r2, [pc, #52]	; (801703c <network_configure_activations+0x90>)
 8017008:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	33c8      	adds	r3, #200	; 0xc8
 801700e:	4a0b      	ldr	r2, [pc, #44]	; (801703c <network_configure_activations+0x90>)
 8017010:	60d3      	str	r3, [r2, #12]
    
    return true;
 8017012:	2301      	movs	r3, #1
 8017014:	e005      	b.n	8017022 <network_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8017016:	2213      	movs	r2, #19
 8017018:	2130      	movs	r1, #48	; 0x30
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f000 fb8c 	bl	8017738 <ai_platform_network_set_error>
  return false;
 8017020:	2300      	movs	r3, #0
}
 8017022:	4618      	mov	r0, r3
 8017024:	3710      	adds	r7, #16
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	200001f8 	.word	0x200001f8
 8017030:	20000208 	.word	0x20000208
 8017034:	20000218 	.word	0x20000218
 8017038:	20000228 	.word	0x20000228
 801703c:	20000238 	.word	0x20000238

08017040 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b084      	sub	sp, #16
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 801704a:	2300      	movs	r3, #0
 801704c:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 801704e:	f107 030c 	add.w	r3, r7, #12
 8017052:	683a      	ldr	r2, [r7, #0]
 8017054:	2101      	movs	r1, #1
 8017056:	4618      	mov	r0, r3
 8017058:	f000 fa0e 	bl	8017478 <ai_platform_get_weights_map>
 801705c:	4603      	mov	r3, r0
 801705e:	2b00      	cmp	r3, #0
 8017060:	d065      	beq.n	801712e <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8017062:	4b38      	ldr	r3, [pc, #224]	; (8017144 <network_configure_weights+0x104>)
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801706a:	4a36      	ldr	r2, [pc, #216]	; (8017144 <network_configure_weights+0x104>)
 801706c:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	4a34      	ldr	r2, [pc, #208]	; (8017144 <network_configure_weights+0x104>)
 8017072:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	4a33      	ldr	r2, [pc, #204]	; (8017144 <network_configure_weights+0x104>)
 8017078:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801707a:	4b33      	ldr	r3, [pc, #204]	; (8017148 <network_configure_weights+0x108>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017082:	4a31      	ldr	r2, [pc, #196]	; (8017148 <network_configure_weights+0x108>)
 8017084:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 25600);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 801708c:	4a2e      	ldr	r2, [pc, #184]	; (8017148 <network_configure_weights+0x108>)
 801708e:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 25600);
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8017096:	4a2c      	ldr	r2, [pc, #176]	; (8017148 <network_configure_weights+0x108>)
 8017098:	60d3      	str	r3, [r2, #12]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801709a:	4b2c      	ldr	r3, [pc, #176]	; (801714c <network_configure_weights+0x10c>)
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80170a2:	4a2a      	ldr	r2, [pc, #168]	; (801714c <network_configure_weights+0x10c>)
 80170a4:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 25800);
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80170ac:	3348      	adds	r3, #72	; 0x48
 80170ae:	4a27      	ldr	r2, [pc, #156]	; (801714c <network_configure_weights+0x10c>)
 80170b0:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 25800);
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 80170b8:	3348      	adds	r3, #72	; 0x48
 80170ba:	4a24      	ldr	r2, [pc, #144]	; (801714c <network_configure_weights+0x10c>)
 80170bc:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80170be:	4b24      	ldr	r3, [pc, #144]	; (8017150 <network_configure_weights+0x110>)
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80170c6:	4a22      	ldr	r2, [pc, #136]	; (8017150 <network_configure_weights+0x110>)
 80170c8:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 35800);
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 80170d0:	33d8      	adds	r3, #216	; 0xd8
 80170d2:	4a1f      	ldr	r2, [pc, #124]	; (8017150 <network_configure_weights+0x110>)
 80170d4:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 35800);
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 80170dc:	33d8      	adds	r3, #216	; 0xd8
 80170de:	4a1c      	ldr	r2, [pc, #112]	; (8017150 <network_configure_weights+0x110>)
 80170e0:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80170e2:	4b1c      	ldr	r3, [pc, #112]	; (8017154 <network_configure_weights+0x114>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80170ea:	4a1a      	ldr	r2, [pc, #104]	; (8017154 <network_configure_weights+0x114>)
 80170ec:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 36000);
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80170f4:	33a0      	adds	r3, #160	; 0xa0
 80170f6:	4a17      	ldr	r2, [pc, #92]	; (8017154 <network_configure_weights+0x114>)
 80170f8:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 36000);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8017100:	33a0      	adds	r3, #160	; 0xa0
 8017102:	4a14      	ldr	r2, [pc, #80]	; (8017154 <network_configure_weights+0x114>)
 8017104:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8017106:	4b14      	ldr	r3, [pc, #80]	; (8017158 <network_configure_weights+0x118>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801710e:	4a12      	ldr	r2, [pc, #72]	; (8017158 <network_configure_weights+0x118>)
 8017110:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 36600);
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8017118:	33f8      	adds	r3, #248	; 0xf8
 801711a:	4a0f      	ldr	r2, [pc, #60]	; (8017158 <network_configure_weights+0x118>)
 801711c:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 36600);
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8017124:	33f8      	adds	r3, #248	; 0xf8
 8017126:	4a0c      	ldr	r2, [pc, #48]	; (8017158 <network_configure_weights+0x118>)
 8017128:	60d3      	str	r3, [r2, #12]
    return true;
 801712a:	2301      	movs	r3, #1
 801712c:	e005      	b.n	801713a <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801712e:	2212      	movs	r2, #18
 8017130:	2130      	movs	r1, #48	; 0x30
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f000 fb00 	bl	8017738 <ai_platform_network_set_error>
  return false;
 8017138:	2300      	movs	r3, #0
}
 801713a:	4618      	mov	r0, r3
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	20000258 	.word	0x20000258
 8017148:	20000268 	.word	0x20000268
 801714c:	20000278 	.word	0x20000278
 8017150:	20000288 	.word	0x20000288
 8017154:	20000298 	.word	0x20000298
 8017158:	200002a8 	.word	0x200002a8

0801715c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f000 fa49 	bl	80175fc <ai_platform_network_get_error>
 801716a:	4603      	mov	r3, r0
}
 801716c:	4618      	mov	r0, r3
 801716e:	3708      	adds	r7, #8
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b084      	sub	sp, #16
 8017178:	af02      	add	r7, sp, #8
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801717e:	2300      	movs	r3, #0
 8017180:	9301      	str	r3, [sp, #4]
 8017182:	2305      	movs	r3, #5
 8017184:	9300      	str	r3, [sp, #0]
 8017186:	2301      	movs	r3, #1
 8017188:	4a04      	ldr	r2, [pc, #16]	; (801719c <ai_network_create+0x28>)
 801718a:	6839      	ldr	r1, [r7, #0]
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f000 fd11 	bl	8017bb4 <ai_platform_network_create>
 8017192:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8017194:	4618      	mov	r0, r3
 8017196:	3708      	adds	r7, #8
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}
 801719c:	20000870 	.word	0x20000870

080171a0 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b096      	sub	sp, #88	; 0x58
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	60f8      	str	r0, [r7, #12]
 80171a8:	60b9      	str	r1, [r7, #8]
 80171aa:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80171ac:	2100      	movs	r1, #0
 80171ae:	68f8      	ldr	r0, [r7, #12]
 80171b0:	f7ff ffe0 	bl	8017174 <ai_network_create>
 80171b4:	4603      	mov	r3, r0
 80171b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80171b8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d001      	beq.n	80171c4 <ai_network_create_and_init+0x24>
        return err;
 80171c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171c2:	e05d      	b.n	8017280 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80171c4:	f107 0314 	add.w	r3, r7, #20
 80171c8:	4618      	mov	r0, r3
 80171ca:	f000 f8dd 	bl	8017388 <ai_network_data_params_get>
 80171ce:	4603      	mov	r3, r0
 80171d0:	f083 0301 	eor.w	r3, r3, #1
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d008      	beq.n	80171ec <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	4618      	mov	r0, r3
 80171e0:	f7ff ffbc 	bl	801715c <ai_network_get_error>
 80171e4:	4603      	mov	r3, r0
 80171e6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80171e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171ea:	e049      	b.n	8017280 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d016      	beq.n	8017220 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80171f2:	2300      	movs	r3, #0
 80171f4:	657b      	str	r3, [r7, #84]	; 0x54
 80171f6:	e00e      	b.n	8017216 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80171f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80171fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	68ba      	ldr	r2, [r7, #8]
 8017200:	4413      	add	r3, r2
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	f107 0314 	add.w	r3, r7, #20
 8017208:	330c      	adds	r3, #12
 801720a:	4618      	mov	r0, r3
 801720c:	f000 f91e 	bl	801744c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8017210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017212:	3301      	adds	r3, #1
 8017214:	657b      	str	r3, [r7, #84]	; 0x54
 8017216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017218:	461a      	mov	r2, r3
 801721a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801721c:	4293      	cmp	r3, r2
 801721e:	dbeb      	blt.n	80171f8 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d016      	beq.n	8017254 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8017226:	2300      	movs	r3, #0
 8017228:	653b      	str	r3, [r7, #80]	; 0x50
 801722a:	e00e      	b.n	801724a <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 801722c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801722e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017230:	009b      	lsls	r3, r3, #2
 8017232:	687a      	ldr	r2, [r7, #4]
 8017234:	4413      	add	r3, r2
 8017236:	681a      	ldr	r2, [r3, #0]
 8017238:	f107 0314 	add.w	r3, r7, #20
 801723c:	3304      	adds	r3, #4
 801723e:	4618      	mov	r0, r3
 8017240:	f000 f904 	bl	801744c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8017244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017246:	3301      	adds	r3, #1
 8017248:	653b      	str	r3, [r7, #80]	; 0x50
 801724a:	8b7b      	ldrh	r3, [r7, #26]
 801724c:	461a      	mov	r2, r3
 801724e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017250:	4293      	cmp	r3, r2
 8017252:	dbeb      	blt.n	801722c <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	f107 0214 	add.w	r2, r7, #20
 801725c:	4611      	mov	r1, r2
 801725e:	4618      	mov	r0, r3
 8017260:	f000 f846 	bl	80172f0 <ai_network_init>
 8017264:	4603      	mov	r3, r0
 8017266:	f083 0301 	eor.w	r3, r3, #1
 801726a:	b2db      	uxtb	r3, r3
 801726c:	2b00      	cmp	r3, #0
 801726e:	d006      	beq.n	801727e <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	4618      	mov	r0, r3
 8017276:	f7ff ff71 	bl	801715c <ai_network_get_error>
 801727a:	4603      	mov	r3, r0
 801727c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 801727e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8017280:	4618      	mov	r0, r3
 8017282:	3758      	adds	r7, #88	; 0x58
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}

08017288 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d104      	bne.n	80172a2 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8017298:	4b06      	ldr	r3, [pc, #24]	; (80172b4 <ai_network_inputs_get+0x2c>)
 801729a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	4a06      	ldr	r2, [pc, #24]	; (80172b8 <ai_network_inputs_get+0x30>)
 80172a0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80172a2:	6839      	ldr	r1, [r7, #0]
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f000 fa4d 	bl	8017744 <ai_platform_inputs_get>
 80172aa:	4603      	mov	r3, r0
}
 80172ac:	4618      	mov	r0, r3
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}
 80172b4:	20000870 	.word	0x20000870
 80172b8:	a1c00100 	.word	0xa1c00100

080172bc <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b082      	sub	sp, #8
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d104      	bne.n	80172d6 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80172cc:	4b06      	ldr	r3, [pc, #24]	; (80172e8 <ai_network_outputs_get+0x2c>)
 80172ce:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	4a06      	ldr	r2, [pc, #24]	; (80172ec <ai_network_outputs_get+0x30>)
 80172d4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80172d6:	6839      	ldr	r1, [r7, #0]
 80172d8:	6878      	ldr	r0, [r7, #4]
 80172da:	f000 fb4d 	bl	8017978 <ai_platform_outputs_get>
 80172de:	4603      	mov	r3, r0
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	20000870 	.word	0x20000870
 80172ec:	a1c00100 	.word	0xa1c00100

080172f0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
 80172f8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80172fa:	6839      	ldr	r1, [r7, #0]
 80172fc:	6878      	ldr	r0, [r7, #4]
 80172fe:	f000 fd5b 	bl	8017db8 <ai_platform_network_init>
 8017302:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d101      	bne.n	801730e <ai_network_init+0x1e>
 801730a:	2300      	movs	r3, #0
 801730c:	e028      	b.n	8017360 <ai_network_init+0x70>

  ai_bool ok = true;
 801730e:	2301      	movs	r3, #1
 8017310:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8017312:	6839      	ldr	r1, [r7, #0]
 8017314:	68f8      	ldr	r0, [r7, #12]
 8017316:	f7ff fe93 	bl	8017040 <network_configure_weights>
 801731a:	4603      	mov	r3, r0
 801731c:	461a      	mov	r2, r3
 801731e:	7afb      	ldrb	r3, [r7, #11]
 8017320:	4013      	ands	r3, r2
 8017322:	2b00      	cmp	r3, #0
 8017324:	bf14      	ite	ne
 8017326:	2301      	movne	r3, #1
 8017328:	2300      	moveq	r3, #0
 801732a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 801732c:	6839      	ldr	r1, [r7, #0]
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	f7ff fe3c 	bl	8016fac <network_configure_activations>
 8017334:	4603      	mov	r3, r0
 8017336:	461a      	mov	r2, r3
 8017338:	7afb      	ldrb	r3, [r7, #11]
 801733a:	4013      	ands	r3, r2
 801733c:	2b00      	cmp	r3, #0
 801733e:	bf14      	ite	ne
 8017340:	2301      	movne	r3, #1
 8017342:	2300      	moveq	r3, #0
 8017344:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f000 fe6c 	bl	8018024 <ai_platform_network_post_init>
 801734c:	4603      	mov	r3, r0
 801734e:	461a      	mov	r2, r3
 8017350:	7afb      	ldrb	r3, [r7, #11]
 8017352:	4013      	ands	r3, r2
 8017354:	2b00      	cmp	r3, #0
 8017356:	bf14      	ite	ne
 8017358:	2301      	movne	r3, #1
 801735a:	2300      	moveq	r3, #0
 801735c:	72fb      	strb	r3, [r7, #11]

  return ok;
 801735e:	7afb      	ldrb	r3, [r7, #11]
}
 8017360:	4618      	mov	r0, r3
 8017362:	3710      	adds	r7, #16
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}

08017368 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b084      	sub	sp, #16
 801736c:	af00      	add	r7, sp, #0
 801736e:	60f8      	str	r0, [r7, #12]
 8017370:	60b9      	str	r1, [r7, #8]
 8017372:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	68b9      	ldr	r1, [r7, #8]
 8017378:	68f8      	ldr	r0, [r7, #12]
 801737a:	f000 ff0b 	bl	8018194 <ai_platform_network_process>
 801737e:	4603      	mov	r3, r0
}
 8017380:	4618      	mov	r0, r3
 8017382:	3710      	adds	r7, #16
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d101      	bne.n	801739a <ai_network_data_params_get+0x12>
 8017396:	2300      	movs	r3, #0
 8017398:	e016      	b.n	80173c8 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801739a:	4a0d      	ldr	r2, [pc, #52]	; (80173d0 <ai_network_data_params_get+0x48>)
 801739c:	f107 0310 	add.w	r3, r7, #16
 80173a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80173a4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80173a8:	4a0a      	ldr	r2, [pc, #40]	; (80173d4 <ai_network_data_params_get+0x4c>)
 80173aa:	f107 0308 	add.w	r3, r7, #8
 80173ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80173b2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80173b6:	f107 0210 	add.w	r2, r7, #16
 80173ba:	f107 0308 	add.w	r3, r7, #8
 80173be:	4619      	mov	r1, r3
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f000 f8f9 	bl	80175b8 <ai_platform_bind_network_params>
 80173c6:	4603      	mov	r3, r0
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3718      	adds	r7, #24
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	0801f618 	.word	0x0801f618
 80173d4:	0801f620 	.word	0x0801f620

080173d8 <ai_buffer_get_size>:
 80173d8:	b358      	cbz	r0, 8017432 <ai_buffer_get_size+0x5a>
 80173da:	b430      	push	{r4, r5}
 80173dc:	6803      	ldr	r3, [r0, #0]
 80173de:	4d15      	ldr	r5, [pc, #84]	; (8017434 <ai_buffer_get_size+0x5c>)
 80173e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80173e4:	6984      	ldr	r4, [r0, #24]
 80173e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80173ea:	42ab      	cmp	r3, r5
 80173ec:	6862      	ldr	r2, [r4, #4]
 80173ee:	d01a      	beq.n	8017426 <ai_buffer_get_size+0x4e>
 80173f0:	7d03      	ldrb	r3, [r0, #20]
 80173f2:	6941      	ldr	r1, [r0, #20]
 80173f4:	f1a3 0301 	sub.w	r3, r3, #1
 80173f8:	fab3 f383 	clz	r3, r3
 80173fc:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8017400:	095b      	lsrs	r3, r3, #5
 8017402:	428b      	cmp	r3, r1
 8017404:	da0b      	bge.n	801741e <ai_buffer_get_size+0x46>
 8017406:	2b01      	cmp	r3, #1
 8017408:	d102      	bne.n	8017410 <ai_buffer_get_size+0x38>
 801740a:	2902      	cmp	r1, #2
 801740c:	d007      	beq.n	801741e <ai_buffer_get_size+0x46>
 801740e:	2302      	movs	r3, #2
 8017410:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017414:	3301      	adds	r3, #1
 8017416:	428b      	cmp	r3, r1
 8017418:	fb00 f202 	mul.w	r2, r0, r2
 801741c:	d1f3      	bne.n	8017406 <ai_buffer_get_size+0x2e>
 801741e:	bc30      	pop	{r4, r5}
 8017420:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8017424:	4770      	bx	lr
 8017426:	2900      	cmp	r1, #0
 8017428:	d0e2      	beq.n	80173f0 <ai_buffer_get_size+0x18>
 801742a:	321f      	adds	r2, #31
 801742c:	f022 021f 	bic.w	r2, r2, #31
 8017430:	e7de      	b.n	80173f0 <ai_buffer_get_size+0x18>
 8017432:	4770      	bx	lr
 8017434:	000400c0 	.word	0x000400c0

08017438 <ai_buffer_array_sane>:
 8017438:	b138      	cbz	r0, 801744a <ai_buffer_array_sane+0x12>
 801743a:	6843      	ldr	r3, [r0, #4]
 801743c:	b123      	cbz	r3, 8017448 <ai_buffer_array_sane+0x10>
 801743e:	8840      	ldrh	r0, [r0, #2]
 8017440:	3000      	adds	r0, #0
 8017442:	bf18      	it	ne
 8017444:	2001      	movne	r0, #1
 8017446:	4770      	bx	lr
 8017448:	4618      	mov	r0, r3
 801744a:	4770      	bx	lr

0801744c <ai_buffer_array_item_set_address>:
 801744c:	b120      	cbz	r0, 8017458 <ai_buffer_array_item_set_address+0xc>
 801744e:	6843      	ldr	r3, [r0, #4]
 8017450:	b11b      	cbz	r3, 801745a <ai_buffer_array_item_set_address+0xe>
 8017452:	8840      	ldrh	r0, [r0, #2]
 8017454:	b918      	cbnz	r0, 801745e <ai_buffer_array_item_set_address+0x12>
 8017456:	4770      	bx	lr
 8017458:	4770      	bx	lr
 801745a:	4618      	mov	r0, r3
 801745c:	4770      	bx	lr
 801745e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8017462:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 8017466:	d0f7      	beq.n	8017458 <ai_buffer_array_item_set_address+0xc>
 8017468:	6042      	str	r2, [r0, #4]
 801746a:	2001      	movs	r0, #1
 801746c:	4770      	bx	lr
 801746e:	bf00      	nop

08017470 <_ai_platform_acquire_crc>:
 8017470:	2001      	movs	r0, #1
 8017472:	4770      	bx	lr

08017474 <_ai_platform_release_crc>:
 8017474:	4770      	bx	lr
 8017476:	bf00      	nop

08017478 <ai_platform_get_weights_map>:
 8017478:	b192      	cbz	r2, 80174a0 <ai_platform_get_weights_map+0x28>
 801747a:	b188      	cbz	r0, 80174a0 <ai_platform_get_weights_map+0x28>
 801747c:	b181      	cbz	r1, 80174a0 <ai_platform_get_weights_map+0x28>
 801747e:	b570      	push	{r4, r5, r6, lr}
 8017480:	4b24      	ldr	r3, [pc, #144]	; (8017514 <ai_platform_get_weights_map+0x9c>)
 8017482:	6814      	ldr	r4, [r2, #0]
 8017484:	429c      	cmp	r4, r3
 8017486:	d00d      	beq.n	80174a4 <ai_platform_get_weights_map+0x2c>
 8017488:	6854      	ldr	r4, [r2, #4]
 801748a:	b194      	cbz	r4, 80174b2 <ai_platform_get_weights_map+0x3a>
 801748c:	6825      	ldr	r5, [r4, #0]
 801748e:	429d      	cmp	r5, r3
 8017490:	d027      	beq.n	80174e2 <ai_platform_get_weights_map+0x6a>
 8017492:	6004      	str	r4, [r0, #0]
 8017494:	f1a1 0001 	sub.w	r0, r1, #1
 8017498:	fab0 f080 	clz	r0, r0
 801749c:	0940      	lsrs	r0, r0, #5
 801749e:	bd70      	pop	{r4, r5, r6, pc}
 80174a0:	2000      	movs	r0, #0
 80174a2:	4770      	bx	lr
 80174a4:	4605      	mov	r5, r0
 80174a6:	1d10      	adds	r0, r2, #4
 80174a8:	4616      	mov	r6, r2
 80174aa:	460c      	mov	r4, r1
 80174ac:	f7ff ffc4 	bl	8017438 <ai_buffer_array_sane>
 80174b0:	b908      	cbnz	r0, 80174b6 <ai_platform_get_weights_map+0x3e>
 80174b2:	2000      	movs	r0, #0
 80174b4:	bd70      	pop	{r4, r5, r6, pc}
 80174b6:	88f3      	ldrh	r3, [r6, #6]
 80174b8:	429c      	cmp	r4, r3
 80174ba:	d1fa      	bne.n	80174b2 <ai_platform_get_weights_map+0x3a>
 80174bc:	2100      	movs	r1, #0
 80174be:	4608      	mov	r0, r1
 80174c0:	1f2b      	subs	r3, r5, #4
 80174c2:	68b2      	ldr	r2, [r6, #8]
 80174c4:	440a      	add	r2, r1
 80174c6:	6852      	ldr	r2, [r2, #4]
 80174c8:	311c      	adds	r1, #28
 80174ca:	b12a      	cbz	r2, 80174d8 <ai_platform_get_weights_map+0x60>
 80174cc:	3001      	adds	r0, #1
 80174ce:	4284      	cmp	r4, r0
 80174d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80174d4:	d1f5      	bne.n	80174c2 <ai_platform_get_weights_map+0x4a>
 80174d6:	4620      	mov	r0, r4
 80174d8:	1a20      	subs	r0, r4, r0
 80174da:	fab0 f080 	clz	r0, r0
 80174de:	0940      	lsrs	r0, r0, #5
 80174e0:	bd70      	pop	{r4, r5, r6, pc}
 80174e2:	6863      	ldr	r3, [r4, #4]
 80174e4:	3404      	adds	r4, #4
 80174e6:	42ab      	cmp	r3, r5
 80174e8:	d0e3      	beq.n	80174b2 <ai_platform_get_weights_map+0x3a>
 80174ea:	3804      	subs	r0, #4
 80174ec:	4626      	mov	r6, r4
 80174ee:	2200      	movs	r2, #0
 80174f0:	e003      	b.n	80174fa <ai_platform_get_weights_map+0x82>
 80174f2:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80174f6:	42ab      	cmp	r3, r5
 80174f8:	d0db      	beq.n	80174b2 <ai_platform_get_weights_map+0x3a>
 80174fa:	3201      	adds	r2, #1
 80174fc:	4291      	cmp	r1, r2
 80174fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8017502:	d1f6      	bne.n	80174f2 <ai_platform_get_weights_map+0x7a>
 8017504:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8017508:	4b02      	ldr	r3, [pc, #8]	; (8017514 <ai_platform_get_weights_map+0x9c>)
 801750a:	429a      	cmp	r2, r3
 801750c:	d1d1      	bne.n	80174b2 <ai_platform_get_weights_map+0x3a>
 801750e:	2001      	movs	r0, #1
 8017510:	bd70      	pop	{r4, r5, r6, pc}
 8017512:	bf00      	nop
 8017514:	a1facade 	.word	0xa1facade

08017518 <ai_platform_get_activations_map>:
 8017518:	b192      	cbz	r2, 8017540 <ai_platform_get_activations_map+0x28>
 801751a:	b188      	cbz	r0, 8017540 <ai_platform_get_activations_map+0x28>
 801751c:	b181      	cbz	r1, 8017540 <ai_platform_get_activations_map+0x28>
 801751e:	b570      	push	{r4, r5, r6, lr}
 8017520:	4b24      	ldr	r3, [pc, #144]	; (80175b4 <ai_platform_get_activations_map+0x9c>)
 8017522:	6814      	ldr	r4, [r2, #0]
 8017524:	429c      	cmp	r4, r3
 8017526:	d00d      	beq.n	8017544 <ai_platform_get_activations_map+0x2c>
 8017528:	6a14      	ldr	r4, [r2, #32]
 801752a:	b19c      	cbz	r4, 8017554 <ai_platform_get_activations_map+0x3c>
 801752c:	6825      	ldr	r5, [r4, #0]
 801752e:	429d      	cmp	r5, r3
 8017530:	d028      	beq.n	8017584 <ai_platform_get_activations_map+0x6c>
 8017532:	6004      	str	r4, [r0, #0]
 8017534:	f1a1 0001 	sub.w	r0, r1, #1
 8017538:	fab0 f080 	clz	r0, r0
 801753c:	0940      	lsrs	r0, r0, #5
 801753e:	bd70      	pop	{r4, r5, r6, pc}
 8017540:	2000      	movs	r0, #0
 8017542:	4770      	bx	lr
 8017544:	4605      	mov	r5, r0
 8017546:	f102 000c 	add.w	r0, r2, #12
 801754a:	4616      	mov	r6, r2
 801754c:	460c      	mov	r4, r1
 801754e:	f7ff ff73 	bl	8017438 <ai_buffer_array_sane>
 8017552:	b908      	cbnz	r0, 8017558 <ai_platform_get_activations_map+0x40>
 8017554:	2000      	movs	r0, #0
 8017556:	bd70      	pop	{r4, r5, r6, pc}
 8017558:	89f3      	ldrh	r3, [r6, #14]
 801755a:	429c      	cmp	r4, r3
 801755c:	d1fa      	bne.n	8017554 <ai_platform_get_activations_map+0x3c>
 801755e:	2100      	movs	r1, #0
 8017560:	4608      	mov	r0, r1
 8017562:	1f2b      	subs	r3, r5, #4
 8017564:	6932      	ldr	r2, [r6, #16]
 8017566:	440a      	add	r2, r1
 8017568:	6852      	ldr	r2, [r2, #4]
 801756a:	311c      	adds	r1, #28
 801756c:	b12a      	cbz	r2, 801757a <ai_platform_get_activations_map+0x62>
 801756e:	3001      	adds	r0, #1
 8017570:	4284      	cmp	r4, r0
 8017572:	f843 2f04 	str.w	r2, [r3, #4]!
 8017576:	d1f5      	bne.n	8017564 <ai_platform_get_activations_map+0x4c>
 8017578:	4620      	mov	r0, r4
 801757a:	1a20      	subs	r0, r4, r0
 801757c:	fab0 f080 	clz	r0, r0
 8017580:	0940      	lsrs	r0, r0, #5
 8017582:	bd70      	pop	{r4, r5, r6, pc}
 8017584:	6863      	ldr	r3, [r4, #4]
 8017586:	3404      	adds	r4, #4
 8017588:	42ab      	cmp	r3, r5
 801758a:	d0e3      	beq.n	8017554 <ai_platform_get_activations_map+0x3c>
 801758c:	3804      	subs	r0, #4
 801758e:	4626      	mov	r6, r4
 8017590:	2200      	movs	r2, #0
 8017592:	e003      	b.n	801759c <ai_platform_get_activations_map+0x84>
 8017594:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8017598:	42ab      	cmp	r3, r5
 801759a:	d0db      	beq.n	8017554 <ai_platform_get_activations_map+0x3c>
 801759c:	3201      	adds	r2, #1
 801759e:	4291      	cmp	r1, r2
 80175a0:	f840 3f04 	str.w	r3, [r0, #4]!
 80175a4:	d1f6      	bne.n	8017594 <ai_platform_get_activations_map+0x7c>
 80175a6:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80175aa:	4b02      	ldr	r3, [pc, #8]	; (80175b4 <ai_platform_get_activations_map+0x9c>)
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d1d1      	bne.n	8017554 <ai_platform_get_activations_map+0x3c>
 80175b0:	2001      	movs	r0, #1
 80175b2:	bd70      	pop	{r4, r5, r6, pc}
 80175b4:	a1facade 	.word	0xa1facade

080175b8 <ai_platform_bind_network_params>:
 80175b8:	b1a0      	cbz	r0, 80175e4 <ai_platform_bind_network_params+0x2c>
 80175ba:	b1c9      	cbz	r1, 80175f0 <ai_platform_bind_network_params+0x38>
 80175bc:	b1aa      	cbz	r2, 80175ea <ai_platform_bind_network_params+0x32>
 80175be:	4603      	mov	r3, r0
 80175c0:	b410      	push	{r4}
 80175c2:	480d      	ldr	r0, [pc, #52]	; (80175f8 <ai_platform_bind_network_params+0x40>)
 80175c4:	f103 040c 	add.w	r4, r3, #12
 80175c8:	f843 0b04 	str.w	r0, [r3], #4
 80175cc:	c903      	ldmia	r1, {r0, r1}
 80175ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80175d2:	2301      	movs	r3, #1
 80175d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80175dc:	4618      	mov	r0, r3
 80175de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175e2:	4770      	bx	lr
 80175e4:	4603      	mov	r3, r0
 80175e6:	4618      	mov	r0, r3
 80175e8:	4770      	bx	lr
 80175ea:	4613      	mov	r3, r2
 80175ec:	4618      	mov	r0, r3
 80175ee:	4770      	bx	lr
 80175f0:	460b      	mov	r3, r1
 80175f2:	4618      	mov	r0, r3
 80175f4:	4770      	bx	lr
 80175f6:	bf00      	nop
 80175f8:	a1facade 	.word	0xa1facade

080175fc <ai_platform_network_get_error>:
 80175fc:	b510      	push	{r4, lr}
 80175fe:	b120      	cbz	r0, 801760a <ai_platform_network_get_error+0xe>
 8017600:	4b45      	ldr	r3, [pc, #276]	; (8017718 <ai_platform_network_get_error+0x11c>)
 8017602:	6802      	ldr	r2, [r0, #0]
 8017604:	4604      	mov	r4, r0
 8017606:	429a      	cmp	r2, r3
 8017608:	d033      	beq.n	8017672 <ai_platform_network_get_error+0x76>
 801760a:	4a44      	ldr	r2, [pc, #272]	; (801771c <ai_platform_network_get_error+0x120>)
 801760c:	6813      	ldr	r3, [r2, #0]
 801760e:	f023 0301 	bic.w	r3, r3, #1
 8017612:	6013      	str	r3, [r2, #0]
 8017614:	f7ff ff2c 	bl	8017470 <_ai_platform_acquire_crc>
 8017618:	4b41      	ldr	r3, [pc, #260]	; (8017720 <ai_platform_network_get_error+0x124>)
 801761a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 801761e:	429a      	cmp	r2, r3
 8017620:	d014      	beq.n	801764c <ai_platform_network_get_error+0x50>
 8017622:	2218      	movs	r2, #24
 8017624:	4b3f      	ldr	r3, [pc, #252]	; (8017724 <ai_platform_network_get_error+0x128>)
 8017626:	601a      	str	r2, [r3, #0]
 8017628:	681a      	ldr	r2, [r3, #0]
 801762a:	2a18      	cmp	r2, #24
 801762c:	d042      	beq.n	80176b4 <ai_platform_network_get_error+0xb8>
 801762e:	4b3e      	ldr	r3, [pc, #248]	; (8017728 <ai_platform_network_get_error+0x12c>)
 8017630:	2201      	movs	r2, #1
 8017632:	4619      	mov	r1, r3
 8017634:	601a      	str	r2, [r3, #0]
 8017636:	680b      	ldr	r3, [r1, #0]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d1fc      	bne.n	8017636 <ai_platform_network_get_error+0x3a>
 801763c:	4b3b      	ldr	r3, [pc, #236]	; (801772c <ai_platform_network_get_error+0x130>)
 801763e:	493c      	ldr	r1, [pc, #240]	; (8017730 <ai_platform_network_get_error+0x134>)
 8017640:	4a3c      	ldr	r2, [pc, #240]	; (8017734 <ai_platform_network_get_error+0x138>)
 8017642:	6019      	str	r1, [r3, #0]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	4293      	cmp	r3, r2
 8017648:	d00d      	beq.n	8017666 <ai_platform_network_get_error+0x6a>
 801764a:	e7fe      	b.n	801764a <ai_platform_network_get_error+0x4e>
 801764c:	2301      	movs	r3, #1
 801764e:	f100 0208 	add.w	r2, r0, #8
 8017652:	6083      	str	r3, [r0, #8]
 8017654:	6813      	ldr	r3, [r2, #0]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d1fc      	bne.n	8017654 <ai_platform_network_get_error+0x58>
 801765a:	4a35      	ldr	r2, [pc, #212]	; (8017730 <ai_platform_network_get_error+0x134>)
 801765c:	4b35      	ldr	r3, [pc, #212]	; (8017734 <ai_platform_network_get_error+0x138>)
 801765e:	6002      	str	r2, [r0, #0]
 8017660:	6802      	ldr	r2, [r0, #0]
 8017662:	429a      	cmp	r2, r3
 8017664:	d104      	bne.n	8017670 <ai_platform_network_get_error+0x74>
 8017666:	f7ff ff05 	bl	8017474 <_ai_platform_release_crc>
 801766a:	f241 0010 	movw	r0, #4112	; 0x1010
 801766e:	bd10      	pop	{r4, pc}
 8017670:	e7fe      	b.n	8017670 <ai_platform_network_get_error+0x74>
 8017672:	4a2a      	ldr	r2, [pc, #168]	; (801771c <ai_platform_network_get_error+0x120>)
 8017674:	6813      	ldr	r3, [r2, #0]
 8017676:	f023 0301 	bic.w	r3, r3, #1
 801767a:	6013      	str	r3, [r2, #0]
 801767c:	f7ff fef8 	bl	8017470 <_ai_platform_acquire_crc>
 8017680:	4b27      	ldr	r3, [pc, #156]	; (8017720 <ai_platform_network_get_error+0x124>)
 8017682:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017686:	429a      	cmp	r2, r3
 8017688:	d022      	beq.n	80176d0 <ai_platform_network_get_error+0xd4>
 801768a:	2218      	movs	r2, #24
 801768c:	4b25      	ldr	r3, [pc, #148]	; (8017724 <ai_platform_network_get_error+0x128>)
 801768e:	601a      	str	r2, [r3, #0]
 8017690:	681a      	ldr	r2, [r3, #0]
 8017692:	2a18      	cmp	r2, #24
 8017694:	d031      	beq.n	80176fa <ai_platform_network_get_error+0xfe>
 8017696:	4b24      	ldr	r3, [pc, #144]	; (8017728 <ai_platform_network_get_error+0x12c>)
 8017698:	2201      	movs	r2, #1
 801769a:	4619      	mov	r1, r3
 801769c:	601a      	str	r2, [r3, #0]
 801769e:	680b      	ldr	r3, [r1, #0]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d1fc      	bne.n	801769e <ai_platform_network_get_error+0xa2>
 80176a4:	4b21      	ldr	r3, [pc, #132]	; (801772c <ai_platform_network_get_error+0x130>)
 80176a6:	4922      	ldr	r1, [pc, #136]	; (8017730 <ai_platform_network_get_error+0x134>)
 80176a8:	4a22      	ldr	r2, [pc, #136]	; (8017734 <ai_platform_network_get_error+0x138>)
 80176aa:	6019      	str	r1, [r3, #0]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	4293      	cmp	r3, r2
 80176b0:	d01b      	beq.n	80176ea <ai_platform_network_get_error+0xee>
 80176b2:	e7fe      	b.n	80176b2 <ai_platform_network_get_error+0xb6>
 80176b4:	2201      	movs	r2, #1
 80176b6:	4619      	mov	r1, r3
 80176b8:	601a      	str	r2, [r3, #0]
 80176ba:	680b      	ldr	r3, [r1, #0]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d1fc      	bne.n	80176ba <ai_platform_network_get_error+0xbe>
 80176c0:	4b17      	ldr	r3, [pc, #92]	; (8017720 <ai_platform_network_get_error+0x124>)
 80176c2:	491b      	ldr	r1, [pc, #108]	; (8017730 <ai_platform_network_get_error+0x134>)
 80176c4:	4a1b      	ldr	r2, [pc, #108]	; (8017734 <ai_platform_network_get_error+0x138>)
 80176c6:	6019      	str	r1, [r3, #0]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	4293      	cmp	r3, r2
 80176cc:	d0cb      	beq.n	8017666 <ai_platform_network_get_error+0x6a>
 80176ce:	e7fe      	b.n	80176ce <ai_platform_network_get_error+0xd2>
 80176d0:	2301      	movs	r3, #1
 80176d2:	f100 0208 	add.w	r2, r0, #8
 80176d6:	6083      	str	r3, [r0, #8]
 80176d8:	6813      	ldr	r3, [r2, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d1fc      	bne.n	80176d8 <ai_platform_network_get_error+0xdc>
 80176de:	4a14      	ldr	r2, [pc, #80]	; (8017730 <ai_platform_network_get_error+0x134>)
 80176e0:	4b14      	ldr	r3, [pc, #80]	; (8017734 <ai_platform_network_get_error+0x138>)
 80176e2:	6002      	str	r2, [r0, #0]
 80176e4:	6802      	ldr	r2, [r0, #0]
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d115      	bne.n	8017716 <ai_platform_network_get_error+0x11a>
 80176ea:	f7ff fec3 	bl	8017474 <_ai_platform_release_crc>
 80176ee:	f104 0010 	add.w	r0, r4, #16
 80176f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176f6:	f000 bfe1 	b.w	80186bc <core_get_error>
 80176fa:	2201      	movs	r2, #1
 80176fc:	4619      	mov	r1, r3
 80176fe:	601a      	str	r2, [r3, #0]
 8017700:	680b      	ldr	r3, [r1, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d1fc      	bne.n	8017700 <ai_platform_network_get_error+0x104>
 8017706:	4b06      	ldr	r3, [pc, #24]	; (8017720 <ai_platform_network_get_error+0x124>)
 8017708:	4909      	ldr	r1, [pc, #36]	; (8017730 <ai_platform_network_get_error+0x134>)
 801770a:	4a0a      	ldr	r2, [pc, #40]	; (8017734 <ai_platform_network_get_error+0x138>)
 801770c:	6019      	str	r1, [r3, #0]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4293      	cmp	r3, r2
 8017712:	d0ea      	beq.n	80176ea <ai_platform_network_get_error+0xee>
 8017714:	e7fe      	b.n	8017714 <ai_platform_network_get_error+0x118>
 8017716:	e7fe      	b.n	8017716 <ai_platform_network_get_error+0x11a>
 8017718:	a1c00100 	.word	0xa1c00100
 801771c:	e0002000 	.word	0xe0002000
 8017720:	40023000 	.word	0x40023000
 8017724:	40023008 	.word	0x40023008
 8017728:	50023008 	.word	0x50023008
 801772c:	50023000 	.word	0x50023000
 8017730:	f407a5c2 	.word	0xf407a5c2
 8017734:	b5e8b5cd 	.word	0xb5e8b5cd

08017738 <ai_platform_network_set_error>:
 8017738:	b110      	cbz	r0, 8017740 <ai_platform_network_set_error+0x8>
 801773a:	3010      	adds	r0, #16
 801773c:	f000 bfc4 	b.w	80186c8 <core_set_error>
 8017740:	4770      	bx	lr
 8017742:	bf00      	nop

08017744 <ai_platform_inputs_get>:
 8017744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017748:	b085      	sub	sp, #20
 801774a:	2800      	cmp	r0, #0
 801774c:	d034      	beq.n	80177b8 <ai_platform_inputs_get+0x74>
 801774e:	4b82      	ldr	r3, [pc, #520]	; (8017958 <ai_platform_inputs_get+0x214>)
 8017750:	6802      	ldr	r2, [r0, #0]
 8017752:	4607      	mov	r7, r0
 8017754:	429a      	cmp	r2, r3
 8017756:	d12f      	bne.n	80177b8 <ai_platform_inputs_get+0x74>
 8017758:	4a80      	ldr	r2, [pc, #512]	; (801795c <ai_platform_inputs_get+0x218>)
 801775a:	468b      	mov	fp, r1
 801775c:	6813      	ldr	r3, [r2, #0]
 801775e:	f023 0301 	bic.w	r3, r3, #1
 8017762:	6013      	str	r3, [r2, #0]
 8017764:	f7ff fe84 	bl	8017470 <_ai_platform_acquire_crc>
 8017768:	4b7d      	ldr	r3, [pc, #500]	; (8017960 <ai_platform_inputs_get+0x21c>)
 801776a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 801776e:	429a      	cmp	r2, r3
 8017770:	d014      	beq.n	801779c <ai_platform_inputs_get+0x58>
 8017772:	2218      	movs	r2, #24
 8017774:	4b7b      	ldr	r3, [pc, #492]	; (8017964 <ai_platform_inputs_get+0x220>)
 8017776:	601a      	str	r2, [r3, #0]
 8017778:	681a      	ldr	r2, [r3, #0]
 801777a:	2a18      	cmp	r2, #24
 801777c:	d040      	beq.n	8017800 <ai_platform_inputs_get+0xbc>
 801777e:	4b7a      	ldr	r3, [pc, #488]	; (8017968 <ai_platform_inputs_get+0x224>)
 8017780:	2201      	movs	r2, #1
 8017782:	4619      	mov	r1, r3
 8017784:	601a      	str	r2, [r3, #0]
 8017786:	680b      	ldr	r3, [r1, #0]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d1fc      	bne.n	8017786 <ai_platform_inputs_get+0x42>
 801778c:	4b77      	ldr	r3, [pc, #476]	; (801796c <ai_platform_inputs_get+0x228>)
 801778e:	4978      	ldr	r1, [pc, #480]	; (8017970 <ai_platform_inputs_get+0x22c>)
 8017790:	4a78      	ldr	r2, [pc, #480]	; (8017974 <ai_platform_inputs_get+0x230>)
 8017792:	6019      	str	r1, [r3, #0]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	4293      	cmp	r3, r2
 8017798:	d040      	beq.n	801781c <ai_platform_inputs_get+0xd8>
 801779a:	e7fe      	b.n	801779a <ai_platform_inputs_get+0x56>
 801779c:	2301      	movs	r3, #1
 801779e:	f100 0208 	add.w	r2, r0, #8
 80177a2:	6083      	str	r3, [r0, #8]
 80177a4:	6813      	ldr	r3, [r2, #0]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d1fc      	bne.n	80177a4 <ai_platform_inputs_get+0x60>
 80177aa:	4a71      	ldr	r2, [pc, #452]	; (8017970 <ai_platform_inputs_get+0x22c>)
 80177ac:	4b71      	ldr	r3, [pc, #452]	; (8017974 <ai_platform_inputs_get+0x230>)
 80177ae:	6002      	str	r2, [r0, #0]
 80177b0:	6802      	ldr	r2, [r0, #0]
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d032      	beq.n	801781c <ai_platform_inputs_get+0xd8>
 80177b6:	e7fe      	b.n	80177b6 <ai_platform_inputs_get+0x72>
 80177b8:	4a68      	ldr	r2, [pc, #416]	; (801795c <ai_platform_inputs_get+0x218>)
 80177ba:	6813      	ldr	r3, [r2, #0]
 80177bc:	f023 0301 	bic.w	r3, r3, #1
 80177c0:	6013      	str	r3, [r2, #0]
 80177c2:	f7ff fe55 	bl	8017470 <_ai_platform_acquire_crc>
 80177c6:	4b66      	ldr	r3, [pc, #408]	; (8017960 <ai_platform_inputs_get+0x21c>)
 80177c8:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80177cc:	429a      	cmp	r2, r3
 80177ce:	f000 80a2 	beq.w	8017916 <ai_platform_inputs_get+0x1d2>
 80177d2:	2218      	movs	r2, #24
 80177d4:	4b63      	ldr	r3, [pc, #396]	; (8017964 <ai_platform_inputs_get+0x220>)
 80177d6:	601a      	str	r2, [r3, #0]
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	2a18      	cmp	r2, #24
 80177dc:	f000 80a9 	beq.w	8017932 <ai_platform_inputs_get+0x1ee>
 80177e0:	4b61      	ldr	r3, [pc, #388]	; (8017968 <ai_platform_inputs_get+0x224>)
 80177e2:	2201      	movs	r2, #1
 80177e4:	4619      	mov	r1, r3
 80177e6:	601a      	str	r2, [r3, #0]
 80177e8:	680b      	ldr	r3, [r1, #0]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d1fc      	bne.n	80177e8 <ai_platform_inputs_get+0xa4>
 80177ee:	4b5f      	ldr	r3, [pc, #380]	; (801796c <ai_platform_inputs_get+0x228>)
 80177f0:	495f      	ldr	r1, [pc, #380]	; (8017970 <ai_platform_inputs_get+0x22c>)
 80177f2:	4a60      	ldr	r2, [pc, #384]	; (8017974 <ai_platform_inputs_get+0x230>)
 80177f4:	6019      	str	r1, [r3, #0]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	4293      	cmp	r3, r2
 80177fa:	f000 80a7 	beq.w	801794c <ai_platform_inputs_get+0x208>
 80177fe:	e7fe      	b.n	80177fe <ai_platform_inputs_get+0xba>
 8017800:	2201      	movs	r2, #1
 8017802:	4619      	mov	r1, r3
 8017804:	601a      	str	r2, [r3, #0]
 8017806:	680b      	ldr	r3, [r1, #0]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d1fc      	bne.n	8017806 <ai_platform_inputs_get+0xc2>
 801780c:	4b54      	ldr	r3, [pc, #336]	; (8017960 <ai_platform_inputs_get+0x21c>)
 801780e:	4958      	ldr	r1, [pc, #352]	; (8017970 <ai_platform_inputs_get+0x22c>)
 8017810:	4a58      	ldr	r2, [pc, #352]	; (8017974 <ai_platform_inputs_get+0x230>)
 8017812:	6019      	str	r1, [r3, #0]
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	4293      	cmp	r3, r2
 8017818:	f040 809d 	bne.w	8017956 <ai_platform_inputs_get+0x212>
 801781c:	f7ff fe2a 	bl	8017474 <_ai_platform_release_crc>
 8017820:	f1bb 0f00 	cmp.w	fp, #0
 8017824:	d002      	beq.n	801782c <ai_platform_inputs_get+0xe8>
 8017826:	2300      	movs	r3, #0
 8017828:	f8ab 3000 	strh.w	r3, [fp]
 801782c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801782e:	2b00      	cmp	r3, #0
 8017830:	d067      	beq.n	8017902 <ai_platform_inputs_get+0x1be>
 8017832:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8017834:	2e00      	cmp	r6, #0
 8017836:	d064      	beq.n	8017902 <ai_platform_inputs_get+0x1be>
 8017838:	8833      	ldrh	r3, [r6, #0]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d061      	beq.n	8017902 <ai_platform_inputs_get+0x1be>
 801783e:	6873      	ldr	r3, [r6, #4]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d05e      	beq.n	8017902 <ai_platform_inputs_get+0x1be>
 8017844:	681d      	ldr	r5, [r3, #0]
 8017846:	2d00      	cmp	r5, #0
 8017848:	d05b      	beq.n	8017902 <ai_platform_inputs_get+0x1be>
 801784a:	f04f 0800 	mov.w	r8, #0
 801784e:	f8cd b00c 	str.w	fp, [sp, #12]
 8017852:	46c1      	mov	r9, r8
 8017854:	46bb      	mov	fp, r7
 8017856:	68ab      	ldr	r3, [r5, #8]
 8017858:	68b0      	ldr	r0, [r6, #8]
 801785a:	69a9      	ldr	r1, [r5, #24]
 801785c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8017860:	9301      	str	r3, [sp, #4]
 8017862:	68eb      	ldr	r3, [r5, #12]
 8017864:	6844      	ldr	r4, [r0, #4]
 8017866:	f8d0 a008 	ldr.w	sl, [r0, #8]
 801786a:	6808      	ldr	r0, [r1, #0]
 801786c:	9302      	str	r3, [sp, #8]
 801786e:	f001 fd69 	bl	8019344 <ai_array_to_buffer_fmt>
 8017872:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8017876:	4602      	mov	r2, r0
 8017878:	69a8      	ldr	r0, [r5, #24]
 801787a:	eb0a 0307 	add.w	r3, sl, r7
 801787e:	4444      	add	r4, r8
 8017880:	6881      	ldr	r1, [r0, #8]
 8017882:	b16b      	cbz	r3, 80178a0 <ai_platform_inputs_get+0x15c>
 8017884:	2000      	movs	r0, #0
 8017886:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 801788a:	6828      	ldr	r0, [r5, #0]
 801788c:	6058      	str	r0, [r3, #4]
 801788e:	2800      	cmp	r0, #0
 8017890:	d034      	beq.n	80178fc <ai_platform_inputs_get+0x1b8>
 8017892:	8840      	ldrh	r0, [r0, #2]
 8017894:	2800      	cmp	r0, #0
 8017896:	d031      	beq.n	80178fc <ai_platform_inputs_get+0x1b8>
 8017898:	2001      	movs	r0, #1
 801789a:	f84a 0007 	str.w	r0, [sl, r7]
 801789e:	69a8      	ldr	r0, [r5, #24]
 80178a0:	f04f 0701 	mov.w	r7, #1
 80178a4:	6840      	ldr	r0, [r0, #4]
 80178a6:	60a3      	str	r3, [r4, #8]
 80178a8:	2300      	movs	r3, #0
 80178aa:	7527      	strb	r7, [r4, #20]
 80178ac:	6967      	ldr	r7, [r4, #20]
 80178ae:	6120      	str	r0, [r4, #16]
 80178b0:	9801      	ldr	r0, [sp, #4]
 80178b2:	60e3      	str	r3, [r4, #12]
 80178b4:	9b02      	ldr	r3, [sp, #8]
 80178b6:	f360 271f 	bfi	r7, r0, #8, #24
 80178ba:	e9c4 7305 	strd	r7, r3, [r4, #20]
 80178be:	e9c4 2100 	strd	r2, r1, [r4]
 80178c2:	8831      	ldrh	r1, [r6, #0]
 80178c4:	f109 0501 	add.w	r5, r9, #1
 80178c8:	428d      	cmp	r5, r1
 80178ca:	46a9      	mov	r9, r5
 80178cc:	b2ab      	uxth	r3, r5
 80178ce:	d207      	bcs.n	80178e0 <ai_platform_inputs_get+0x19c>
 80178d0:	6871      	ldr	r1, [r6, #4]
 80178d2:	b129      	cbz	r1, 80178e0 <ai_platform_inputs_get+0x19c>
 80178d4:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80178d8:	f108 081c 	add.w	r8, r8, #28
 80178dc:	2d00      	cmp	r5, #0
 80178de:	d1ba      	bne.n	8017856 <ai_platform_inputs_get+0x112>
 80178e0:	465f      	mov	r7, fp
 80178e2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80178e6:	b163      	cbz	r3, 8017902 <ai_platform_inputs_get+0x1be>
 80178e8:	68b2      	ldr	r2, [r6, #8]
 80178ea:	6850      	ldr	r0, [r2, #4]
 80178ec:	f1bb 0f00 	cmp.w	fp, #0
 80178f0:	d00e      	beq.n	8017910 <ai_platform_inputs_get+0x1cc>
 80178f2:	f8ab 3000 	strh.w	r3, [fp]
 80178f6:	b005      	add	sp, #20
 80178f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fc:	69a8      	ldr	r0, [r5, #24]
 80178fe:	2300      	movs	r3, #0
 8017900:	e7ce      	b.n	80178a0 <ai_platform_inputs_get+0x15c>
 8017902:	f107 0010 	add.w	r0, r7, #16
 8017906:	2218      	movs	r2, #24
 8017908:	2111      	movs	r1, #17
 801790a:	f000 fedd 	bl	80186c8 <core_set_error>
 801790e:	2000      	movs	r0, #0
 8017910:	b005      	add	sp, #20
 8017912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017916:	2301      	movs	r3, #1
 8017918:	f100 0208 	add.w	r2, r0, #8
 801791c:	6083      	str	r3, [r0, #8]
 801791e:	6813      	ldr	r3, [r2, #0]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d1fc      	bne.n	801791e <ai_platform_inputs_get+0x1da>
 8017924:	4a12      	ldr	r2, [pc, #72]	; (8017970 <ai_platform_inputs_get+0x22c>)
 8017926:	4b13      	ldr	r3, [pc, #76]	; (8017974 <ai_platform_inputs_get+0x230>)
 8017928:	6002      	str	r2, [r0, #0]
 801792a:	6802      	ldr	r2, [r0, #0]
 801792c:	429a      	cmp	r2, r3
 801792e:	d00d      	beq.n	801794c <ai_platform_inputs_get+0x208>
 8017930:	e7fe      	b.n	8017930 <ai_platform_inputs_get+0x1ec>
 8017932:	2201      	movs	r2, #1
 8017934:	4619      	mov	r1, r3
 8017936:	601a      	str	r2, [r3, #0]
 8017938:	680b      	ldr	r3, [r1, #0]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d1fc      	bne.n	8017938 <ai_platform_inputs_get+0x1f4>
 801793e:	4b08      	ldr	r3, [pc, #32]	; (8017960 <ai_platform_inputs_get+0x21c>)
 8017940:	490b      	ldr	r1, [pc, #44]	; (8017970 <ai_platform_inputs_get+0x22c>)
 8017942:	4a0c      	ldr	r2, [pc, #48]	; (8017974 <ai_platform_inputs_get+0x230>)
 8017944:	6019      	str	r1, [r3, #0]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	4293      	cmp	r3, r2
 801794a:	d103      	bne.n	8017954 <ai_platform_inputs_get+0x210>
 801794c:	f7ff fd92 	bl	8017474 <_ai_platform_release_crc>
 8017950:	2000      	movs	r0, #0
 8017952:	e7dd      	b.n	8017910 <ai_platform_inputs_get+0x1cc>
 8017954:	e7fe      	b.n	8017954 <ai_platform_inputs_get+0x210>
 8017956:	e7fe      	b.n	8017956 <ai_platform_inputs_get+0x212>
 8017958:	a1c00100 	.word	0xa1c00100
 801795c:	e0002000 	.word	0xe0002000
 8017960:	40023000 	.word	0x40023000
 8017964:	40023008 	.word	0x40023008
 8017968:	50023008 	.word	0x50023008
 801796c:	50023000 	.word	0x50023000
 8017970:	f407a5c2 	.word	0xf407a5c2
 8017974:	b5e8b5cd 	.word	0xb5e8b5cd

08017978 <ai_platform_outputs_get>:
 8017978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801797c:	b085      	sub	sp, #20
 801797e:	2800      	cmp	r0, #0
 8017980:	d034      	beq.n	80179ec <ai_platform_outputs_get+0x74>
 8017982:	4b84      	ldr	r3, [pc, #528]	; (8017b94 <ai_platform_outputs_get+0x21c>)
 8017984:	6802      	ldr	r2, [r0, #0]
 8017986:	4607      	mov	r7, r0
 8017988:	429a      	cmp	r2, r3
 801798a:	d12f      	bne.n	80179ec <ai_platform_outputs_get+0x74>
 801798c:	4a82      	ldr	r2, [pc, #520]	; (8017b98 <ai_platform_outputs_get+0x220>)
 801798e:	468b      	mov	fp, r1
 8017990:	6813      	ldr	r3, [r2, #0]
 8017992:	f023 0301 	bic.w	r3, r3, #1
 8017996:	6013      	str	r3, [r2, #0]
 8017998:	f7ff fd6a 	bl	8017470 <_ai_platform_acquire_crc>
 801799c:	4b7f      	ldr	r3, [pc, #508]	; (8017b9c <ai_platform_outputs_get+0x224>)
 801799e:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d014      	beq.n	80179d0 <ai_platform_outputs_get+0x58>
 80179a6:	2218      	movs	r2, #24
 80179a8:	4b7d      	ldr	r3, [pc, #500]	; (8017ba0 <ai_platform_outputs_get+0x228>)
 80179aa:	601a      	str	r2, [r3, #0]
 80179ac:	681a      	ldr	r2, [r3, #0]
 80179ae:	2a18      	cmp	r2, #24
 80179b0:	d040      	beq.n	8017a34 <ai_platform_outputs_get+0xbc>
 80179b2:	4b7c      	ldr	r3, [pc, #496]	; (8017ba4 <ai_platform_outputs_get+0x22c>)
 80179b4:	2201      	movs	r2, #1
 80179b6:	4619      	mov	r1, r3
 80179b8:	601a      	str	r2, [r3, #0]
 80179ba:	680b      	ldr	r3, [r1, #0]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d1fc      	bne.n	80179ba <ai_platform_outputs_get+0x42>
 80179c0:	4b79      	ldr	r3, [pc, #484]	; (8017ba8 <ai_platform_outputs_get+0x230>)
 80179c2:	497a      	ldr	r1, [pc, #488]	; (8017bac <ai_platform_outputs_get+0x234>)
 80179c4:	4a7a      	ldr	r2, [pc, #488]	; (8017bb0 <ai_platform_outputs_get+0x238>)
 80179c6:	6019      	str	r1, [r3, #0]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	4293      	cmp	r3, r2
 80179cc:	d040      	beq.n	8017a50 <ai_platform_outputs_get+0xd8>
 80179ce:	e7fe      	b.n	80179ce <ai_platform_outputs_get+0x56>
 80179d0:	2301      	movs	r3, #1
 80179d2:	f100 0208 	add.w	r2, r0, #8
 80179d6:	6083      	str	r3, [r0, #8]
 80179d8:	6813      	ldr	r3, [r2, #0]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d1fc      	bne.n	80179d8 <ai_platform_outputs_get+0x60>
 80179de:	4a73      	ldr	r2, [pc, #460]	; (8017bac <ai_platform_outputs_get+0x234>)
 80179e0:	4b73      	ldr	r3, [pc, #460]	; (8017bb0 <ai_platform_outputs_get+0x238>)
 80179e2:	6002      	str	r2, [r0, #0]
 80179e4:	6802      	ldr	r2, [r0, #0]
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d032      	beq.n	8017a50 <ai_platform_outputs_get+0xd8>
 80179ea:	e7fe      	b.n	80179ea <ai_platform_outputs_get+0x72>
 80179ec:	4a6a      	ldr	r2, [pc, #424]	; (8017b98 <ai_platform_outputs_get+0x220>)
 80179ee:	6813      	ldr	r3, [r2, #0]
 80179f0:	f023 0301 	bic.w	r3, r3, #1
 80179f4:	6013      	str	r3, [r2, #0]
 80179f6:	f7ff fd3b 	bl	8017470 <_ai_platform_acquire_crc>
 80179fa:	4b68      	ldr	r3, [pc, #416]	; (8017b9c <ai_platform_outputs_get+0x224>)
 80179fc:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017a00:	429a      	cmp	r2, r3
 8017a02:	f000 809d 	beq.w	8017b40 <ai_platform_outputs_get+0x1c8>
 8017a06:	2218      	movs	r2, #24
 8017a08:	4b65      	ldr	r3, [pc, #404]	; (8017ba0 <ai_platform_outputs_get+0x228>)
 8017a0a:	601a      	str	r2, [r3, #0]
 8017a0c:	681a      	ldr	r2, [r3, #0]
 8017a0e:	2a18      	cmp	r2, #24
 8017a10:	f000 80a4 	beq.w	8017b5c <ai_platform_outputs_get+0x1e4>
 8017a14:	4b63      	ldr	r3, [pc, #396]	; (8017ba4 <ai_platform_outputs_get+0x22c>)
 8017a16:	2201      	movs	r2, #1
 8017a18:	4619      	mov	r1, r3
 8017a1a:	601a      	str	r2, [r3, #0]
 8017a1c:	680b      	ldr	r3, [r1, #0]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d1fc      	bne.n	8017a1c <ai_platform_outputs_get+0xa4>
 8017a22:	4b61      	ldr	r3, [pc, #388]	; (8017ba8 <ai_platform_outputs_get+0x230>)
 8017a24:	4961      	ldr	r1, [pc, #388]	; (8017bac <ai_platform_outputs_get+0x234>)
 8017a26:	4a62      	ldr	r2, [pc, #392]	; (8017bb0 <ai_platform_outputs_get+0x238>)
 8017a28:	6019      	str	r1, [r3, #0]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	f000 80a2 	beq.w	8017b76 <ai_platform_outputs_get+0x1fe>
 8017a32:	e7fe      	b.n	8017a32 <ai_platform_outputs_get+0xba>
 8017a34:	2201      	movs	r2, #1
 8017a36:	4619      	mov	r1, r3
 8017a38:	601a      	str	r2, [r3, #0]
 8017a3a:	680b      	ldr	r3, [r1, #0]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d1fc      	bne.n	8017a3a <ai_platform_outputs_get+0xc2>
 8017a40:	4b56      	ldr	r3, [pc, #344]	; (8017b9c <ai_platform_outputs_get+0x224>)
 8017a42:	495a      	ldr	r1, [pc, #360]	; (8017bac <ai_platform_outputs_get+0x234>)
 8017a44:	4a5a      	ldr	r2, [pc, #360]	; (8017bb0 <ai_platform_outputs_get+0x238>)
 8017a46:	6019      	str	r1, [r3, #0]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	4293      	cmp	r3, r2
 8017a4c:	f040 80a0 	bne.w	8017b90 <ai_platform_outputs_get+0x218>
 8017a50:	f7ff fd10 	bl	8017474 <_ai_platform_release_crc>
 8017a54:	f1bb 0f00 	cmp.w	fp, #0
 8017a58:	d002      	beq.n	8017a60 <ai_platform_outputs_get+0xe8>
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	f8ab 3000 	strh.w	r3, [fp]
 8017a60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017a62:	2b01      	cmp	r3, #1
 8017a64:	f240 808b 	bls.w	8017b7e <ai_platform_outputs_get+0x206>
 8017a68:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8017a6a:	f116 0f0c 	cmn.w	r6, #12
 8017a6e:	f000 8086 	beq.w	8017b7e <ai_platform_outputs_get+0x206>
 8017a72:	89b3      	ldrh	r3, [r6, #12]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	f000 8082 	beq.w	8017b7e <ai_platform_outputs_get+0x206>
 8017a7a:	6933      	ldr	r3, [r6, #16]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d07e      	beq.n	8017b7e <ai_platform_outputs_get+0x206>
 8017a80:	681d      	ldr	r5, [r3, #0]
 8017a82:	2d00      	cmp	r5, #0
 8017a84:	d07b      	beq.n	8017b7e <ai_platform_outputs_get+0x206>
 8017a86:	f04f 0800 	mov.w	r8, #0
 8017a8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8017a8e:	46c1      	mov	r9, r8
 8017a90:	46bb      	mov	fp, r7
 8017a92:	68ab      	ldr	r3, [r5, #8]
 8017a94:	6970      	ldr	r0, [r6, #20]
 8017a96:	69a9      	ldr	r1, [r5, #24]
 8017a98:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8017a9c:	9301      	str	r3, [sp, #4]
 8017a9e:	68eb      	ldr	r3, [r5, #12]
 8017aa0:	6844      	ldr	r4, [r0, #4]
 8017aa2:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8017aa6:	6808      	ldr	r0, [r1, #0]
 8017aa8:	9302      	str	r3, [sp, #8]
 8017aaa:	f001 fc4b 	bl	8019344 <ai_array_to_buffer_fmt>
 8017aae:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8017ab2:	4602      	mov	r2, r0
 8017ab4:	69a8      	ldr	r0, [r5, #24]
 8017ab6:	eb0a 0307 	add.w	r3, sl, r7
 8017aba:	4444      	add	r4, r8
 8017abc:	6881      	ldr	r1, [r0, #8]
 8017abe:	b16b      	cbz	r3, 8017adc <ai_platform_outputs_get+0x164>
 8017ac0:	2000      	movs	r0, #0
 8017ac2:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8017ac6:	6828      	ldr	r0, [r5, #0]
 8017ac8:	6058      	str	r0, [r3, #4]
 8017aca:	2800      	cmp	r0, #0
 8017acc:	d035      	beq.n	8017b3a <ai_platform_outputs_get+0x1c2>
 8017ace:	8840      	ldrh	r0, [r0, #2]
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	d032      	beq.n	8017b3a <ai_platform_outputs_get+0x1c2>
 8017ad4:	2001      	movs	r0, #1
 8017ad6:	f84a 0007 	str.w	r0, [sl, r7]
 8017ada:	69a8      	ldr	r0, [r5, #24]
 8017adc:	f04f 0701 	mov.w	r7, #1
 8017ae0:	6840      	ldr	r0, [r0, #4]
 8017ae2:	60a3      	str	r3, [r4, #8]
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	7527      	strb	r7, [r4, #20]
 8017ae8:	6967      	ldr	r7, [r4, #20]
 8017aea:	6120      	str	r0, [r4, #16]
 8017aec:	9801      	ldr	r0, [sp, #4]
 8017aee:	60e3      	str	r3, [r4, #12]
 8017af0:	9b02      	ldr	r3, [sp, #8]
 8017af2:	f360 271f 	bfi	r7, r0, #8, #24
 8017af6:	e9c4 7305 	strd	r7, r3, [r4, #20]
 8017afa:	e9c4 2100 	strd	r2, r1, [r4]
 8017afe:	89b1      	ldrh	r1, [r6, #12]
 8017b00:	f109 0501 	add.w	r5, r9, #1
 8017b04:	428d      	cmp	r5, r1
 8017b06:	46a9      	mov	r9, r5
 8017b08:	b2ab      	uxth	r3, r5
 8017b0a:	d207      	bcs.n	8017b1c <ai_platform_outputs_get+0x1a4>
 8017b0c:	6931      	ldr	r1, [r6, #16]
 8017b0e:	b129      	cbz	r1, 8017b1c <ai_platform_outputs_get+0x1a4>
 8017b10:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8017b14:	f108 081c 	add.w	r8, r8, #28
 8017b18:	2d00      	cmp	r5, #0
 8017b1a:	d1ba      	bne.n	8017a92 <ai_platform_outputs_get+0x11a>
 8017b1c:	465f      	mov	r7, fp
 8017b1e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d02b      	beq.n	8017b7e <ai_platform_outputs_get+0x206>
 8017b26:	6972      	ldr	r2, [r6, #20]
 8017b28:	6850      	ldr	r0, [r2, #4]
 8017b2a:	f1bb 0f00 	cmp.w	fp, #0
 8017b2e:	d001      	beq.n	8017b34 <ai_platform_outputs_get+0x1bc>
 8017b30:	f8ab 3000 	strh.w	r3, [fp]
 8017b34:	b005      	add	sp, #20
 8017b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b3a:	69a8      	ldr	r0, [r5, #24]
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	e7cd      	b.n	8017adc <ai_platform_outputs_get+0x164>
 8017b40:	2301      	movs	r3, #1
 8017b42:	f100 0208 	add.w	r2, r0, #8
 8017b46:	6083      	str	r3, [r0, #8]
 8017b48:	6813      	ldr	r3, [r2, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d1fc      	bne.n	8017b48 <ai_platform_outputs_get+0x1d0>
 8017b4e:	4a17      	ldr	r2, [pc, #92]	; (8017bac <ai_platform_outputs_get+0x234>)
 8017b50:	4b17      	ldr	r3, [pc, #92]	; (8017bb0 <ai_platform_outputs_get+0x238>)
 8017b52:	6002      	str	r2, [r0, #0]
 8017b54:	6802      	ldr	r2, [r0, #0]
 8017b56:	429a      	cmp	r2, r3
 8017b58:	d00d      	beq.n	8017b76 <ai_platform_outputs_get+0x1fe>
 8017b5a:	e7fe      	b.n	8017b5a <ai_platform_outputs_get+0x1e2>
 8017b5c:	2201      	movs	r2, #1
 8017b5e:	4619      	mov	r1, r3
 8017b60:	601a      	str	r2, [r3, #0]
 8017b62:	680b      	ldr	r3, [r1, #0]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d1fc      	bne.n	8017b62 <ai_platform_outputs_get+0x1ea>
 8017b68:	4b0c      	ldr	r3, [pc, #48]	; (8017b9c <ai_platform_outputs_get+0x224>)
 8017b6a:	4910      	ldr	r1, [pc, #64]	; (8017bac <ai_platform_outputs_get+0x234>)
 8017b6c:	4a10      	ldr	r2, [pc, #64]	; (8017bb0 <ai_platform_outputs_get+0x238>)
 8017b6e:	6019      	str	r1, [r3, #0]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	4293      	cmp	r3, r2
 8017b74:	d10b      	bne.n	8017b8e <ai_platform_outputs_get+0x216>
 8017b76:	f7ff fc7d 	bl	8017474 <_ai_platform_release_crc>
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	e7da      	b.n	8017b34 <ai_platform_outputs_get+0x1bc>
 8017b7e:	f107 0010 	add.w	r0, r7, #16
 8017b82:	2218      	movs	r2, #24
 8017b84:	2111      	movs	r1, #17
 8017b86:	f000 fd9f 	bl	80186c8 <core_set_error>
 8017b8a:	2000      	movs	r0, #0
 8017b8c:	e7d2      	b.n	8017b34 <ai_platform_outputs_get+0x1bc>
 8017b8e:	e7fe      	b.n	8017b8e <ai_platform_outputs_get+0x216>
 8017b90:	e7fe      	b.n	8017b90 <ai_platform_outputs_get+0x218>
 8017b92:	bf00      	nop
 8017b94:	a1c00100 	.word	0xa1c00100
 8017b98:	e0002000 	.word	0xe0002000
 8017b9c:	40023000 	.word	0x40023000
 8017ba0:	40023008 	.word	0x40023008
 8017ba4:	50023008 	.word	0x50023008
 8017ba8:	50023000 	.word	0x50023000
 8017bac:	f407a5c2 	.word	0xf407a5c2
 8017bb0:	b5e8b5cd 	.word	0xb5e8b5cd

08017bb4 <ai_platform_network_create>:
 8017bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bb8:	b082      	sub	sp, #8
 8017bba:	4605      	mov	r5, r0
 8017bbc:	4614      	mov	r4, r2
 8017bbe:	461e      	mov	r6, r3
 8017bc0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8017bc4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8017bc8:	f7ff fc52 	bl	8017470 <_ai_platform_acquire_crc>
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	d043      	beq.n	8017c58 <ai_platform_network_create+0xa4>
 8017bd0:	4b70      	ldr	r3, [pc, #448]	; (8017d94 <ai_platform_network_create+0x1e0>)
 8017bd2:	4298      	cmp	r0, r3
 8017bd4:	d00a      	beq.n	8017bec <ai_platform_network_create+0x38>
 8017bd6:	4b70      	ldr	r3, [pc, #448]	; (8017d98 <ai_platform_network_create+0x1e4>)
 8017bd8:	4298      	cmp	r0, r3
 8017bda:	d035      	beq.n	8017c48 <ai_platform_network_create+0x94>
 8017bdc:	2218      	movs	r2, #24
 8017bde:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8017be2:	3308      	adds	r3, #8
 8017be4:	601a      	str	r2, [r3, #0]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d12d      	bne.n	8017c48 <ai_platform_network_create+0x94>
 8017bec:	2218      	movs	r2, #24
 8017bee:	4b6b      	ldr	r3, [pc, #428]	; (8017d9c <ai_platform_network_create+0x1e8>)
 8017bf0:	601a      	str	r2, [r3, #0]
 8017bf2:	681a      	ldr	r2, [r3, #0]
 8017bf4:	2a18      	cmp	r2, #24
 8017bf6:	d12d      	bne.n	8017c54 <ai_platform_network_create+0xa0>
 8017bf8:	2201      	movs	r2, #1
 8017bfa:	601a      	str	r2, [r3, #0]
 8017bfc:	681a      	ldr	r2, [r3, #0]
 8017bfe:	2a00      	cmp	r2, #0
 8017c00:	d1fc      	bne.n	8017bfc <ai_platform_network_create+0x48>
 8017c02:	f7ff fc37 	bl	8017474 <_ai_platform_release_crc>
 8017c06:	4a66      	ldr	r2, [pc, #408]	; (8017da0 <ai_platform_network_create+0x1ec>)
 8017c08:	6813      	ldr	r3, [r2, #0]
 8017c0a:	f023 0301 	bic.w	r3, r3, #1
 8017c0e:	6013      	str	r3, [r2, #0]
 8017c10:	f7ff fc2e 	bl	8017470 <_ai_platform_acquire_crc>
 8017c14:	4b5f      	ldr	r3, [pc, #380]	; (8017d94 <ai_platform_network_create+0x1e0>)
 8017c16:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	d022      	beq.n	8017c64 <ai_platform_network_create+0xb0>
 8017c1e:	2218      	movs	r2, #24
 8017c20:	4b5e      	ldr	r3, [pc, #376]	; (8017d9c <ai_platform_network_create+0x1e8>)
 8017c22:	601a      	str	r2, [r3, #0]
 8017c24:	681a      	ldr	r2, [r3, #0]
 8017c26:	2a18      	cmp	r2, #24
 8017c28:	d02a      	beq.n	8017c80 <ai_platform_network_create+0xcc>
 8017c2a:	4b5e      	ldr	r3, [pc, #376]	; (8017da4 <ai_platform_network_create+0x1f0>)
 8017c2c:	2201      	movs	r2, #1
 8017c2e:	4619      	mov	r1, r3
 8017c30:	601a      	str	r2, [r3, #0]
 8017c32:	680b      	ldr	r3, [r1, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d1fc      	bne.n	8017c32 <ai_platform_network_create+0x7e>
 8017c38:	4b57      	ldr	r3, [pc, #348]	; (8017d98 <ai_platform_network_create+0x1e4>)
 8017c3a:	495b      	ldr	r1, [pc, #364]	; (8017da8 <ai_platform_network_create+0x1f4>)
 8017c3c:	4a5b      	ldr	r2, [pc, #364]	; (8017dac <ai_platform_network_create+0x1f8>)
 8017c3e:	6019      	str	r1, [r3, #0]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	4293      	cmp	r3, r2
 8017c44:	d029      	beq.n	8017c9a <ai_platform_network_create+0xe6>
 8017c46:	e7fe      	b.n	8017c46 <ai_platform_network_create+0x92>
 8017c48:	2218      	movs	r2, #24
 8017c4a:	4b56      	ldr	r3, [pc, #344]	; (8017da4 <ai_platform_network_create+0x1f0>)
 8017c4c:	601a      	str	r2, [r3, #0]
 8017c4e:	681a      	ldr	r2, [r3, #0]
 8017c50:	2a18      	cmp	r2, #24
 8017c52:	d0d1      	beq.n	8017bf8 <ai_platform_network_create+0x44>
 8017c54:	f7ff fc0e 	bl	8017474 <_ai_platform_release_crc>
 8017c58:	f244 1333 	movw	r3, #16691	; 0x4133
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	b002      	add	sp, #8
 8017c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c64:	2301      	movs	r3, #1
 8017c66:	6083      	str	r3, [r0, #8]
 8017c68:	f100 0308 	add.w	r3, r0, #8
 8017c6c:	681a      	ldr	r2, [r3, #0]
 8017c6e:	2a00      	cmp	r2, #0
 8017c70:	d1fc      	bne.n	8017c6c <ai_platform_network_create+0xb8>
 8017c72:	4a4d      	ldr	r2, [pc, #308]	; (8017da8 <ai_platform_network_create+0x1f4>)
 8017c74:	4b4d      	ldr	r3, [pc, #308]	; (8017dac <ai_platform_network_create+0x1f8>)
 8017c76:	6002      	str	r2, [r0, #0]
 8017c78:	6802      	ldr	r2, [r0, #0]
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d00d      	beq.n	8017c9a <ai_platform_network_create+0xe6>
 8017c7e:	e7fe      	b.n	8017c7e <ai_platform_network_create+0xca>
 8017c80:	2201      	movs	r2, #1
 8017c82:	4619      	mov	r1, r3
 8017c84:	601a      	str	r2, [r3, #0]
 8017c86:	680b      	ldr	r3, [r1, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d1fc      	bne.n	8017c86 <ai_platform_network_create+0xd2>
 8017c8c:	4b41      	ldr	r3, [pc, #260]	; (8017d94 <ai_platform_network_create+0x1e0>)
 8017c8e:	4946      	ldr	r1, [pc, #280]	; (8017da8 <ai_platform_network_create+0x1f4>)
 8017c90:	4a46      	ldr	r2, [pc, #280]	; (8017dac <ai_platform_network_create+0x1f8>)
 8017c92:	6019      	str	r1, [r3, #0]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d12d      	bne.n	8017cf6 <ai_platform_network_create+0x142>
 8017c9a:	f7ff fbeb 	bl	8017474 <_ai_platform_release_crc>
 8017c9e:	2d00      	cmp	r5, #0
 8017ca0:	d075      	beq.n	8017d8e <ai_platform_network_create+0x1da>
 8017ca2:	4b43      	ldr	r3, [pc, #268]	; (8017db0 <ai_platform_network_create+0x1fc>)
 8017ca4:	6023      	str	r3, [r4, #0]
 8017ca6:	602c      	str	r4, [r5, #0]
 8017ca8:	f000 fd06 	bl	80186b8 <core_init>
 8017cac:	b910      	cbnz	r0, 8017cb4 <ai_platform_network_create+0x100>
 8017cae:	f04f 0930 	mov.w	r9, #48	; 0x30
 8017cb2:	e03f      	b.n	8017d34 <ai_platform_network_create+0x180>
 8017cb4:	4a3a      	ldr	r2, [pc, #232]	; (8017da0 <ai_platform_network_create+0x1ec>)
 8017cb6:	6813      	ldr	r3, [r2, #0]
 8017cb8:	f023 0301 	bic.w	r3, r3, #1
 8017cbc:	6013      	str	r3, [r2, #0]
 8017cbe:	f7ff fbd7 	bl	8017470 <_ai_platform_acquire_crc>
 8017cc2:	4b34      	ldr	r3, [pc, #208]	; (8017d94 <ai_platform_network_create+0x1e0>)
 8017cc4:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d015      	beq.n	8017cf8 <ai_platform_network_create+0x144>
 8017ccc:	2218      	movs	r2, #24
 8017cce:	4b33      	ldr	r3, [pc, #204]	; (8017d9c <ai_platform_network_create+0x1e8>)
 8017cd0:	601a      	str	r2, [r3, #0]
 8017cd2:	681a      	ldr	r2, [r3, #0]
 8017cd4:	2a18      	cmp	r2, #24
 8017cd6:	d03d      	beq.n	8017d54 <ai_platform_network_create+0x1a0>
 8017cd8:	4b32      	ldr	r3, [pc, #200]	; (8017da4 <ai_platform_network_create+0x1f0>)
 8017cda:	2201      	movs	r2, #1
 8017cdc:	4619      	mov	r1, r3
 8017cde:	601a      	str	r2, [r3, #0]
 8017ce0:	680b      	ldr	r3, [r1, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d1fc      	bne.n	8017ce0 <ai_platform_network_create+0x12c>
 8017ce6:	4b2c      	ldr	r3, [pc, #176]	; (8017d98 <ai_platform_network_create+0x1e4>)
 8017ce8:	492f      	ldr	r1, [pc, #188]	; (8017da8 <ai_platform_network_create+0x1f4>)
 8017cea:	4a30      	ldr	r2, [pc, #192]	; (8017dac <ai_platform_network_create+0x1f8>)
 8017cec:	6019      	str	r1, [r3, #0]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d00e      	beq.n	8017d12 <ai_platform_network_create+0x15e>
 8017cf4:	e7fe      	b.n	8017cf4 <ai_platform_network_create+0x140>
 8017cf6:	e7fe      	b.n	8017cf6 <ai_platform_network_create+0x142>
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	6083      	str	r3, [r0, #8]
 8017cfc:	f100 0308 	add.w	r3, r0, #8
 8017d00:	681a      	ldr	r2, [r3, #0]
 8017d02:	2a00      	cmp	r2, #0
 8017d04:	d1fc      	bne.n	8017d00 <ai_platform_network_create+0x14c>
 8017d06:	4a28      	ldr	r2, [pc, #160]	; (8017da8 <ai_platform_network_create+0x1f4>)
 8017d08:	4b28      	ldr	r3, [pc, #160]	; (8017dac <ai_platform_network_create+0x1f8>)
 8017d0a:	6002      	str	r2, [r0, #0]
 8017d0c:	6802      	ldr	r2, [r0, #0]
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d139      	bne.n	8017d86 <ai_platform_network_create+0x1d2>
 8017d12:	f7ff fbaf 	bl	8017474 <_ai_platform_release_crc>
 8017d16:	2200      	movs	r2, #0
 8017d18:	4639      	mov	r1, r7
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	f001 faf8 	bl	8019310 <ai_version_get>
 8017d20:	2200      	movs	r2, #0
 8017d22:	4681      	mov	r9, r0
 8017d24:	2105      	movs	r1, #5
 8017d26:	2001      	movs	r0, #1
 8017d28:	f001 faf2 	bl	8019310 <ai_version_get>
 8017d2c:	4581      	cmp	r9, r0
 8017d2e:	d01f      	beq.n	8017d70 <ai_platform_network_create+0x1bc>
 8017d30:	f04f 0901 	mov.w	r9, #1
 8017d34:	2300      	movs	r3, #0
 8017d36:	f04f 0a10 	mov.w	sl, #16
 8017d3a:	602b      	str	r3, [r5, #0]
 8017d3c:	4642      	mov	r2, r8
 8017d3e:	4639      	mov	r1, r7
 8017d40:	4630      	mov	r0, r6
 8017d42:	f001 fae5 	bl	8019310 <ai_version_get>
 8017d46:	2300      	movs	r3, #0
 8017d48:	f369 0307 	bfi	r3, r9, #0, #8
 8017d4c:	6460      	str	r0, [r4, #68]	; 0x44
 8017d4e:	f36a 231f 	bfi	r3, sl, #8, #24
 8017d52:	e783      	b.n	8017c5c <ai_platform_network_create+0xa8>
 8017d54:	2201      	movs	r2, #1
 8017d56:	4619      	mov	r1, r3
 8017d58:	601a      	str	r2, [r3, #0]
 8017d5a:	680b      	ldr	r3, [r1, #0]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1fc      	bne.n	8017d5a <ai_platform_network_create+0x1a6>
 8017d60:	4b0c      	ldr	r3, [pc, #48]	; (8017d94 <ai_platform_network_create+0x1e0>)
 8017d62:	4911      	ldr	r1, [pc, #68]	; (8017da8 <ai_platform_network_create+0x1f4>)
 8017d64:	4a11      	ldr	r2, [pc, #68]	; (8017dac <ai_platform_network_create+0x1f8>)
 8017d66:	6019      	str	r1, [r3, #0]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	d0d1      	beq.n	8017d12 <ai_platform_network_create+0x15e>
 8017d6e:	e7fe      	b.n	8017d6e <ai_platform_network_create+0x1ba>
 8017d70:	4b10      	ldr	r3, [pc, #64]	; (8017db4 <ai_platform_network_create+0x200>)
 8017d72:	a802      	add	r0, sp, #8
 8017d74:	f840 3d04 	str.w	r3, [r0, #-4]!
 8017d78:	f001 fa36 	bl	80191e8 <ai_check_custom_types>
 8017d7c:	b120      	cbz	r0, 8017d88 <ai_platform_network_create+0x1d4>
 8017d7e:	f04f 0a00 	mov.w	sl, #0
 8017d82:	46d1      	mov	r9, sl
 8017d84:	e7da      	b.n	8017d3c <ai_platform_network_create+0x188>
 8017d86:	e7fe      	b.n	8017d86 <ai_platform_network_create+0x1d2>
 8017d88:	f04f 0902 	mov.w	r9, #2
 8017d8c:	e7d2      	b.n	8017d34 <ai_platform_network_create+0x180>
 8017d8e:	f241 0310 	movw	r3, #4112	; 0x1010
 8017d92:	e763      	b.n	8017c5c <ai_platform_network_create+0xa8>
 8017d94:	40023000 	.word	0x40023000
 8017d98:	50023000 	.word	0x50023000
 8017d9c:	40023008 	.word	0x40023008
 8017da0:	e0002000 	.word	0xe0002000
 8017da4:	50023008 	.word	0x50023008
 8017da8:	f407a5c2 	.word	0xf407a5c2
 8017dac:	b5e8b5cd 	.word	0xb5e8b5cd
 8017db0:	a1c00100 	.word	0xa1c00100
 8017db4:	84048403 	.word	0x84048403

08017db8 <ai_platform_network_init>:
 8017db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	d034      	beq.n	8017e2a <ai_platform_network_init+0x72>
 8017dc0:	4b8f      	ldr	r3, [pc, #572]	; (8018000 <ai_platform_network_init+0x248>)
 8017dc2:	6802      	ldr	r2, [r0, #0]
 8017dc4:	4604      	mov	r4, r0
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d12f      	bne.n	8017e2a <ai_platform_network_init+0x72>
 8017dca:	4a8e      	ldr	r2, [pc, #568]	; (8018004 <ai_platform_network_init+0x24c>)
 8017dcc:	460e      	mov	r6, r1
 8017dce:	6813      	ldr	r3, [r2, #0]
 8017dd0:	f023 0301 	bic.w	r3, r3, #1
 8017dd4:	6013      	str	r3, [r2, #0]
 8017dd6:	f7ff fb4b 	bl	8017470 <_ai_platform_acquire_crc>
 8017dda:	4b8b      	ldr	r3, [pc, #556]	; (8018008 <ai_platform_network_init+0x250>)
 8017ddc:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d014      	beq.n	8017e0e <ai_platform_network_init+0x56>
 8017de4:	2218      	movs	r2, #24
 8017de6:	4b89      	ldr	r3, [pc, #548]	; (801800c <ai_platform_network_init+0x254>)
 8017de8:	601a      	str	r2, [r3, #0]
 8017dea:	681a      	ldr	r2, [r3, #0]
 8017dec:	2a18      	cmp	r2, #24
 8017dee:	d03f      	beq.n	8017e70 <ai_platform_network_init+0xb8>
 8017df0:	4b87      	ldr	r3, [pc, #540]	; (8018010 <ai_platform_network_init+0x258>)
 8017df2:	2201      	movs	r2, #1
 8017df4:	4619      	mov	r1, r3
 8017df6:	601a      	str	r2, [r3, #0]
 8017df8:	680b      	ldr	r3, [r1, #0]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d1fc      	bne.n	8017df8 <ai_platform_network_init+0x40>
 8017dfe:	4b85      	ldr	r3, [pc, #532]	; (8018014 <ai_platform_network_init+0x25c>)
 8017e00:	4985      	ldr	r1, [pc, #532]	; (8018018 <ai_platform_network_init+0x260>)
 8017e02:	4a86      	ldr	r2, [pc, #536]	; (801801c <ai_platform_network_init+0x264>)
 8017e04:	6019      	str	r1, [r3, #0]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	4293      	cmp	r3, r2
 8017e0a:	d03f      	beq.n	8017e8c <ai_platform_network_init+0xd4>
 8017e0c:	e7fe      	b.n	8017e0c <ai_platform_network_init+0x54>
 8017e0e:	2301      	movs	r3, #1
 8017e10:	f100 0208 	add.w	r2, r0, #8
 8017e14:	6083      	str	r3, [r0, #8]
 8017e16:	6813      	ldr	r3, [r2, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d1fc      	bne.n	8017e16 <ai_platform_network_init+0x5e>
 8017e1c:	4a7e      	ldr	r2, [pc, #504]	; (8018018 <ai_platform_network_init+0x260>)
 8017e1e:	4b7f      	ldr	r3, [pc, #508]	; (801801c <ai_platform_network_init+0x264>)
 8017e20:	6002      	str	r2, [r0, #0]
 8017e22:	6802      	ldr	r2, [r0, #0]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d031      	beq.n	8017e8c <ai_platform_network_init+0xd4>
 8017e28:	e7fe      	b.n	8017e28 <ai_platform_network_init+0x70>
 8017e2a:	4a76      	ldr	r2, [pc, #472]	; (8018004 <ai_platform_network_init+0x24c>)
 8017e2c:	6813      	ldr	r3, [r2, #0]
 8017e2e:	f023 0301 	bic.w	r3, r3, #1
 8017e32:	6013      	str	r3, [r2, #0]
 8017e34:	f7ff fb1c 	bl	8017470 <_ai_platform_acquire_crc>
 8017e38:	4b73      	ldr	r3, [pc, #460]	; (8018008 <ai_platform_network_init+0x250>)
 8017e3a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d056      	beq.n	8017ef0 <ai_platform_network_init+0x138>
 8017e42:	2218      	movs	r2, #24
 8017e44:	4b71      	ldr	r3, [pc, #452]	; (801800c <ai_platform_network_init+0x254>)
 8017e46:	601a      	str	r2, [r3, #0]
 8017e48:	681a      	ldr	r2, [r3, #0]
 8017e4a:	2a18      	cmp	r2, #24
 8017e4c:	f000 80c4 	beq.w	8017fd8 <ai_platform_network_init+0x220>
 8017e50:	4b6f      	ldr	r3, [pc, #444]	; (8018010 <ai_platform_network_init+0x258>)
 8017e52:	2201      	movs	r2, #1
 8017e54:	4619      	mov	r1, r3
 8017e56:	601a      	str	r2, [r3, #0]
 8017e58:	680b      	ldr	r3, [r1, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d1fc      	bne.n	8017e58 <ai_platform_network_init+0xa0>
 8017e5e:	4b6d      	ldr	r3, [pc, #436]	; (8018014 <ai_platform_network_init+0x25c>)
 8017e60:	496d      	ldr	r1, [pc, #436]	; (8018018 <ai_platform_network_init+0x260>)
 8017e62:	4a6e      	ldr	r2, [pc, #440]	; (801801c <ai_platform_network_init+0x264>)
 8017e64:	6019      	str	r1, [r3, #0]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	4293      	cmp	r3, r2
 8017e6a:	f000 80c2 	beq.w	8017ff2 <ai_platform_network_init+0x23a>
 8017e6e:	e7fe      	b.n	8017e6e <ai_platform_network_init+0xb6>
 8017e70:	2201      	movs	r2, #1
 8017e72:	4619      	mov	r1, r3
 8017e74:	601a      	str	r2, [r3, #0]
 8017e76:	680b      	ldr	r3, [r1, #0]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d1fc      	bne.n	8017e76 <ai_platform_network_init+0xbe>
 8017e7c:	4b62      	ldr	r3, [pc, #392]	; (8018008 <ai_platform_network_init+0x250>)
 8017e7e:	4966      	ldr	r1, [pc, #408]	; (8018018 <ai_platform_network_init+0x260>)
 8017e80:	4a66      	ldr	r2, [pc, #408]	; (801801c <ai_platform_network_init+0x264>)
 8017e82:	6019      	str	r1, [r3, #0]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	4293      	cmp	r3, r2
 8017e88:	f040 80b8 	bne.w	8017ffc <ai_platform_network_init+0x244>
 8017e8c:	f7ff faf2 	bl	8017474 <_ai_platform_release_crc>
 8017e90:	2e00      	cmp	r6, #0
 8017e92:	d07f      	beq.n	8017f94 <ai_platform_network_init+0x1dc>
 8017e94:	4b62      	ldr	r3, [pc, #392]	; (8018020 <ai_platform_network_init+0x268>)
 8017e96:	6832      	ldr	r2, [r6, #0]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d050      	beq.n	8017f3e <ai_platform_network_init+0x186>
 8017e9c:	2101      	movs	r1, #1
 8017e9e:	4630      	mov	r0, r6
 8017ea0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8017ea4:	f7ff fa98 	bl	80173d8 <ai_buffer_get_size>
 8017ea8:	4635      	mov	r5, r6
 8017eaa:	f106 071c 	add.w	r7, r6, #28
 8017eae:	2101      	movs	r1, #1
 8017eb0:	4606      	mov	r6, r0
 8017eb2:	4638      	mov	r0, r7
 8017eb4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8017eb8:	f7ff fa8e 	bl	80173d8 <ai_buffer_get_size>
 8017ebc:	2e00      	cmp	r6, #0
 8017ebe:	bf0a      	itet	eq
 8017ec0:	46b6      	moveq	lr, r6
 8017ec2:	f04f 0e01 	movne.w	lr, #1
 8017ec6:	4635      	moveq	r5, r6
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	d177      	bne.n	8017fbc <ai_platform_network_init+0x204>
 8017ecc:	4607      	mov	r7, r0
 8017ece:	4684      	mov	ip, r0
 8017ed0:	f1b8 0f00 	cmp.w	r8, #0
 8017ed4:	d068      	beq.n	8017fa8 <ai_platform_network_init+0x1f0>
 8017ed6:	8be3      	ldrh	r3, [r4, #30]
 8017ed8:	4573      	cmp	r3, lr
 8017eda:	d217      	bcs.n	8017f0c <ai_platform_network_init+0x154>
 8017edc:	f104 0010 	add.w	r0, r4, #16
 8017ee0:	2212      	movs	r2, #18
 8017ee2:	2116      	movs	r1, #22
 8017ee4:	f000 fbf0 	bl	80186c8 <core_set_error>
 8017ee8:	2400      	movs	r4, #0
 8017eea:	4620      	mov	r0, r4
 8017eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	f100 0208 	add.w	r2, r0, #8
 8017ef6:	6083      	str	r3, [r0, #8]
 8017ef8:	6813      	ldr	r3, [r2, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d1fc      	bne.n	8017ef8 <ai_platform_network_init+0x140>
 8017efe:	4a46      	ldr	r2, [pc, #280]	; (8018018 <ai_platform_network_init+0x260>)
 8017f00:	4b46      	ldr	r3, [pc, #280]	; (801801c <ai_platform_network_init+0x264>)
 8017f02:	6002      	str	r2, [r0, #0]
 8017f04:	6802      	ldr	r2, [r0, #0]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d073      	beq.n	8017ff2 <ai_platform_network_init+0x23a>
 8017f0a:	e7fe      	b.n	8017f0a <ai_platform_network_init+0x152>
 8017f0c:	f1be 0f00 	cmp.w	lr, #0
 8017f10:	d006      	beq.n	8017f20 <ai_platform_network_init+0x168>
 8017f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f14:	6a26      	ldr	r6, [r4, #32]
 8017f16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017f18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017f1c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8017f20:	2600      	movs	r6, #0
 8017f22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017f24:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8017f28:	4563      	cmp	r3, ip
 8017f2a:	83a6      	strh	r6, [r4, #28]
 8017f2c:	d21b      	bcs.n	8017f66 <ai_platform_network_init+0x1ae>
 8017f2e:	f104 0010 	add.w	r0, r4, #16
 8017f32:	2213      	movs	r2, #19
 8017f34:	2116      	movs	r1, #22
 8017f36:	4634      	mov	r4, r6
 8017f38:	f000 fbc6 	bl	80186c8 <core_set_error>
 8017f3c:	e7d5      	b.n	8017eea <ai_platform_network_init+0x132>
 8017f3e:	6930      	ldr	r0, [r6, #16]
 8017f40:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8017f44:	89b3      	ldrh	r3, [r6, #12]
 8017f46:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8017f4a:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8017f4e:	62a0      	str	r0, [r4, #40]	; 0x28
 8017f50:	2203      	movs	r2, #3
 8017f52:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8017f56:	84a3      	strh	r3, [r4, #36]	; 0x24
 8017f58:	60e2      	str	r2, [r4, #12]
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f001 f96e 	bl	801923c <ai_layers_init_all>
 8017f60:	4620      	mov	r0, r4
 8017f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f66:	f1bc 0f00 	cmp.w	ip, #0
 8017f6a:	d01b      	beq.n	8017fa4 <ai_platform_network_init+0x1ec>
 8017f6c:	ebcc 08cc 	rsb	r8, ip, ip, lsl #3
 8017f70:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8017f74:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8017f76:	eb07 0e06 	add.w	lr, r7, r6
 8017f7a:	4435      	add	r5, r6
 8017f7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017f82:	361c      	adds	r6, #28
 8017f84:	4546      	cmp	r6, r8
 8017f86:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8017f8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017f8e:	d1f1      	bne.n	8017f74 <ai_platform_network_init+0x1bc>
 8017f90:	2300      	movs	r3, #0
 8017f92:	e7dd      	b.n	8017f50 <ai_platform_network_init+0x198>
 8017f94:	f104 0010 	add.w	r0, r4, #16
 8017f98:	2211      	movs	r2, #17
 8017f9a:	2110      	movs	r1, #16
 8017f9c:	4634      	mov	r4, r6
 8017f9e:	f000 fb93 	bl	80186c8 <core_set_error>
 8017fa2:	e7a2      	b.n	8017eea <ai_platform_network_init+0x132>
 8017fa4:	4663      	mov	r3, ip
 8017fa6:	e7d3      	b.n	8017f50 <ai_platform_network_init+0x198>
 8017fa8:	2e00      	cmp	r6, #0
 8017faa:	d094      	beq.n	8017ed6 <ai_platform_network_init+0x11e>
 8017fac:	f104 0010 	add.w	r0, r4, #16
 8017fb0:	2212      	movs	r2, #18
 8017fb2:	2110      	movs	r1, #16
 8017fb4:	4644      	mov	r4, r8
 8017fb6:	f000 fb87 	bl	80186c8 <core_set_error>
 8017fba:	e796      	b.n	8017eea <ai_platform_network_init+0x132>
 8017fbc:	f1b9 0f00 	cmp.w	r9, #0
 8017fc0:	d002      	beq.n	8017fc8 <ai_platform_network_init+0x210>
 8017fc2:	f04f 0c01 	mov.w	ip, #1
 8017fc6:	e783      	b.n	8017ed0 <ai_platform_network_init+0x118>
 8017fc8:	f104 0010 	add.w	r0, r4, #16
 8017fcc:	2213      	movs	r2, #19
 8017fce:	2110      	movs	r1, #16
 8017fd0:	464c      	mov	r4, r9
 8017fd2:	f000 fb79 	bl	80186c8 <core_set_error>
 8017fd6:	e788      	b.n	8017eea <ai_platform_network_init+0x132>
 8017fd8:	2201      	movs	r2, #1
 8017fda:	4619      	mov	r1, r3
 8017fdc:	601a      	str	r2, [r3, #0]
 8017fde:	680b      	ldr	r3, [r1, #0]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d1fc      	bne.n	8017fde <ai_platform_network_init+0x226>
 8017fe4:	4b08      	ldr	r3, [pc, #32]	; (8018008 <ai_platform_network_init+0x250>)
 8017fe6:	490c      	ldr	r1, [pc, #48]	; (8018018 <ai_platform_network_init+0x260>)
 8017fe8:	4a0c      	ldr	r2, [pc, #48]	; (801801c <ai_platform_network_init+0x264>)
 8017fea:	6019      	str	r1, [r3, #0]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d103      	bne.n	8017ffa <ai_platform_network_init+0x242>
 8017ff2:	f7ff fa3f 	bl	8017474 <_ai_platform_release_crc>
 8017ff6:	2400      	movs	r4, #0
 8017ff8:	e777      	b.n	8017eea <ai_platform_network_init+0x132>
 8017ffa:	e7fe      	b.n	8017ffa <ai_platform_network_init+0x242>
 8017ffc:	e7fe      	b.n	8017ffc <ai_platform_network_init+0x244>
 8017ffe:	bf00      	nop
 8018000:	a1c00100 	.word	0xa1c00100
 8018004:	e0002000 	.word	0xe0002000
 8018008:	40023000 	.word	0x40023000
 801800c:	40023008 	.word	0x40023008
 8018010:	50023008 	.word	0x50023008
 8018014:	50023000 	.word	0x50023000
 8018018:	f407a5c2 	.word	0xf407a5c2
 801801c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018020:	a1facade 	.word	0xa1facade

08018024 <ai_platform_network_post_init>:
 8018024:	b538      	push	{r3, r4, r5, lr}
 8018026:	b120      	cbz	r0, 8018032 <ai_platform_network_post_init+0xe>
 8018028:	4b52      	ldr	r3, [pc, #328]	; (8018174 <ai_platform_network_post_init+0x150>)
 801802a:	6802      	ldr	r2, [r0, #0]
 801802c:	4604      	mov	r4, r0
 801802e:	429a      	cmp	r2, r3
 8018030:	d032      	beq.n	8018098 <ai_platform_network_post_init+0x74>
 8018032:	4a51      	ldr	r2, [pc, #324]	; (8018178 <ai_platform_network_post_init+0x154>)
 8018034:	6813      	ldr	r3, [r2, #0]
 8018036:	f023 0301 	bic.w	r3, r3, #1
 801803a:	6013      	str	r3, [r2, #0]
 801803c:	f7ff fa18 	bl	8017470 <_ai_platform_acquire_crc>
 8018040:	4b4e      	ldr	r3, [pc, #312]	; (801817c <ai_platform_network_post_init+0x158>)
 8018042:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8018046:	429a      	cmp	r2, r3
 8018048:	d014      	beq.n	8018074 <ai_platform_network_post_init+0x50>
 801804a:	2218      	movs	r2, #24
 801804c:	4b4c      	ldr	r3, [pc, #304]	; (8018180 <ai_platform_network_post_init+0x15c>)
 801804e:	601a      	str	r2, [r3, #0]
 8018050:	681a      	ldr	r2, [r3, #0]
 8018052:	2a18      	cmp	r2, #24
 8018054:	d041      	beq.n	80180da <ai_platform_network_post_init+0xb6>
 8018056:	4b4b      	ldr	r3, [pc, #300]	; (8018184 <ai_platform_network_post_init+0x160>)
 8018058:	2201      	movs	r2, #1
 801805a:	4619      	mov	r1, r3
 801805c:	601a      	str	r2, [r3, #0]
 801805e:	680b      	ldr	r3, [r1, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d1fc      	bne.n	801805e <ai_platform_network_post_init+0x3a>
 8018064:	4b48      	ldr	r3, [pc, #288]	; (8018188 <ai_platform_network_post_init+0x164>)
 8018066:	4949      	ldr	r1, [pc, #292]	; (801818c <ai_platform_network_post_init+0x168>)
 8018068:	4a49      	ldr	r2, [pc, #292]	; (8018190 <ai_platform_network_post_init+0x16c>)
 801806a:	6019      	str	r1, [r3, #0]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4293      	cmp	r3, r2
 8018070:	d00d      	beq.n	801808e <ai_platform_network_post_init+0x6a>
 8018072:	e7fe      	b.n	8018072 <ai_platform_network_post_init+0x4e>
 8018074:	2301      	movs	r3, #1
 8018076:	f100 0208 	add.w	r2, r0, #8
 801807a:	6083      	str	r3, [r0, #8]
 801807c:	6813      	ldr	r3, [r2, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d1fc      	bne.n	801807c <ai_platform_network_post_init+0x58>
 8018082:	4a42      	ldr	r2, [pc, #264]	; (801818c <ai_platform_network_post_init+0x168>)
 8018084:	4b42      	ldr	r3, [pc, #264]	; (8018190 <ai_platform_network_post_init+0x16c>)
 8018086:	6002      	str	r2, [r0, #0]
 8018088:	6802      	ldr	r2, [r0, #0]
 801808a:	429a      	cmp	r2, r3
 801808c:	d103      	bne.n	8018096 <ai_platform_network_post_init+0x72>
 801808e:	f7ff f9f1 	bl	8017474 <_ai_platform_release_crc>
 8018092:	2000      	movs	r0, #0
 8018094:	bd38      	pop	{r3, r4, r5, pc}
 8018096:	e7fe      	b.n	8018096 <ai_platform_network_post_init+0x72>
 8018098:	4a37      	ldr	r2, [pc, #220]	; (8018178 <ai_platform_network_post_init+0x154>)
 801809a:	6813      	ldr	r3, [r2, #0]
 801809c:	f023 0301 	bic.w	r3, r3, #1
 80180a0:	6013      	str	r3, [r2, #0]
 80180a2:	f7ff f9e5 	bl	8017470 <_ai_platform_acquire_crc>
 80180a6:	4b35      	ldr	r3, [pc, #212]	; (801817c <ai_platform_network_post_init+0x158>)
 80180a8:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d022      	beq.n	80180f6 <ai_platform_network_post_init+0xd2>
 80180b0:	2218      	movs	r2, #24
 80180b2:	4b33      	ldr	r3, [pc, #204]	; (8018180 <ai_platform_network_post_init+0x15c>)
 80180b4:	601a      	str	r2, [r3, #0]
 80180b6:	681a      	ldr	r2, [r3, #0]
 80180b8:	2a18      	cmp	r2, #24
 80180ba:	d041      	beq.n	8018140 <ai_platform_network_post_init+0x11c>
 80180bc:	4b31      	ldr	r3, [pc, #196]	; (8018184 <ai_platform_network_post_init+0x160>)
 80180be:	2201      	movs	r2, #1
 80180c0:	4619      	mov	r1, r3
 80180c2:	601a      	str	r2, [r3, #0]
 80180c4:	680b      	ldr	r3, [r1, #0]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d1fc      	bne.n	80180c4 <ai_platform_network_post_init+0xa0>
 80180ca:	4b2f      	ldr	r3, [pc, #188]	; (8018188 <ai_platform_network_post_init+0x164>)
 80180cc:	492f      	ldr	r1, [pc, #188]	; (801818c <ai_platform_network_post_init+0x168>)
 80180ce:	4a30      	ldr	r2, [pc, #192]	; (8018190 <ai_platform_network_post_init+0x16c>)
 80180d0:	6019      	str	r1, [r3, #0]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	4293      	cmp	r3, r2
 80180d6:	d01b      	beq.n	8018110 <ai_platform_network_post_init+0xec>
 80180d8:	e7fe      	b.n	80180d8 <ai_platform_network_post_init+0xb4>
 80180da:	2201      	movs	r2, #1
 80180dc:	4619      	mov	r1, r3
 80180de:	601a      	str	r2, [r3, #0]
 80180e0:	680b      	ldr	r3, [r1, #0]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d1fc      	bne.n	80180e0 <ai_platform_network_post_init+0xbc>
 80180e6:	4b25      	ldr	r3, [pc, #148]	; (801817c <ai_platform_network_post_init+0x158>)
 80180e8:	4928      	ldr	r1, [pc, #160]	; (801818c <ai_platform_network_post_init+0x168>)
 80180ea:	4a29      	ldr	r2, [pc, #164]	; (8018190 <ai_platform_network_post_init+0x16c>)
 80180ec:	6019      	str	r1, [r3, #0]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	4293      	cmp	r3, r2
 80180f2:	d0cc      	beq.n	801808e <ai_platform_network_post_init+0x6a>
 80180f4:	e7fe      	b.n	80180f4 <ai_platform_network_post_init+0xd0>
 80180f6:	2301      	movs	r3, #1
 80180f8:	f100 0208 	add.w	r2, r0, #8
 80180fc:	6083      	str	r3, [r0, #8]
 80180fe:	6813      	ldr	r3, [r2, #0]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d1fc      	bne.n	80180fe <ai_platform_network_post_init+0xda>
 8018104:	4a21      	ldr	r2, [pc, #132]	; (801818c <ai_platform_network_post_init+0x168>)
 8018106:	4b22      	ldr	r3, [pc, #136]	; (8018190 <ai_platform_network_post_init+0x16c>)
 8018108:	6002      	str	r2, [r0, #0]
 801810a:	6802      	ldr	r2, [r0, #0]
 801810c:	429a      	cmp	r2, r3
 801810e:	d125      	bne.n	801815c <ai_platform_network_post_init+0x138>
 8018110:	f7ff f9b0 	bl	8017474 <_ai_platform_release_crc>
 8018114:	68e3      	ldr	r3, [r4, #12]
 8018116:	f013 0502 	ands.w	r5, r3, #2
 801811a:	d022      	beq.n	8018162 <ai_platform_network_post_init+0x13e>
 801811c:	4620      	mov	r0, r4
 801811e:	f001 f8a1 	bl	8019264 <ai_layers_post_init_all>
 8018122:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018124:	b1db      	cbz	r3, 801815e <ai_platform_network_post_init+0x13a>
 8018126:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8018128:	b1cd      	cbz	r5, 801815e <ai_platform_network_post_init+0x13a>
 801812a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801812c:	4629      	mov	r1, r5
 801812e:	2000      	movs	r0, #0
 8018130:	4798      	blx	r3
 8018132:	692b      	ldr	r3, [r5, #16]
 8018134:	42ab      	cmp	r3, r5
 8018136:	d012      	beq.n	801815e <ai_platform_network_post_init+0x13a>
 8018138:	461d      	mov	r5, r3
 801813a:	b183      	cbz	r3, 801815e <ai_platform_network_post_init+0x13a>
 801813c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801813e:	e7f4      	b.n	801812a <ai_platform_network_post_init+0x106>
 8018140:	2201      	movs	r2, #1
 8018142:	4619      	mov	r1, r3
 8018144:	601a      	str	r2, [r3, #0]
 8018146:	680b      	ldr	r3, [r1, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d1fc      	bne.n	8018146 <ai_platform_network_post_init+0x122>
 801814c:	4b0b      	ldr	r3, [pc, #44]	; (801817c <ai_platform_network_post_init+0x158>)
 801814e:	490f      	ldr	r1, [pc, #60]	; (801818c <ai_platform_network_post_init+0x168>)
 8018150:	4a0f      	ldr	r2, [pc, #60]	; (8018190 <ai_platform_network_post_init+0x16c>)
 8018152:	6019      	str	r1, [r3, #0]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	4293      	cmp	r3, r2
 8018158:	d0da      	beq.n	8018110 <ai_platform_network_post_init+0xec>
 801815a:	e7fe      	b.n	801815a <ai_platform_network_post_init+0x136>
 801815c:	e7fe      	b.n	801815c <ai_platform_network_post_init+0x138>
 801815e:	2001      	movs	r0, #1
 8018160:	bd38      	pop	{r3, r4, r5, pc}
 8018162:	f104 0010 	add.w	r0, r4, #16
 8018166:	2210      	movs	r2, #16
 8018168:	2111      	movs	r1, #17
 801816a:	f000 faad 	bl	80186c8 <core_set_error>
 801816e:	4628      	mov	r0, r5
 8018170:	bd38      	pop	{r3, r4, r5, pc}
 8018172:	bf00      	nop
 8018174:	a1c00100 	.word	0xa1c00100
 8018178:	e0002000 	.word	0xe0002000
 801817c:	40023000 	.word	0x40023000
 8018180:	40023008 	.word	0x40023008
 8018184:	50023008 	.word	0x50023008
 8018188:	50023000 	.word	0x50023000
 801818c:	f407a5c2 	.word	0xf407a5c2
 8018190:	b5e8b5cd 	.word	0xb5e8b5cd

08018194 <ai_platform_network_process>:
 8018194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018198:	b085      	sub	sp, #20
 801819a:	460d      	mov	r5, r1
 801819c:	9202      	str	r2, [sp, #8]
 801819e:	4604      	mov	r4, r0
 80181a0:	b120      	cbz	r0, 80181ac <ai_platform_network_process+0x18>
 80181a2:	4b83      	ldr	r3, [pc, #524]	; (80183b0 <ai_platform_network_process+0x21c>)
 80181a4:	6802      	ldr	r2, [r0, #0]
 80181a6:	429a      	cmp	r2, r3
 80181a8:	bf18      	it	ne
 80181aa:	2400      	movne	r4, #0
 80181ac:	4a81      	ldr	r2, [pc, #516]	; (80183b4 <ai_platform_network_process+0x220>)
 80181ae:	6813      	ldr	r3, [r2, #0]
 80181b0:	f023 0301 	bic.w	r3, r3, #1
 80181b4:	6013      	str	r3, [r2, #0]
 80181b6:	f7ff f95b 	bl	8017470 <_ai_platform_acquire_crc>
 80181ba:	4b7f      	ldr	r3, [pc, #508]	; (80183b8 <ai_platform_network_process+0x224>)
 80181bc:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d014      	beq.n	80181ee <ai_platform_network_process+0x5a>
 80181c4:	2218      	movs	r2, #24
 80181c6:	4b7d      	ldr	r3, [pc, #500]	; (80183bc <ai_platform_network_process+0x228>)
 80181c8:	601a      	str	r2, [r3, #0]
 80181ca:	681a      	ldr	r2, [r3, #0]
 80181cc:	2a18      	cmp	r2, #24
 80181ce:	d01c      	beq.n	801820a <ai_platform_network_process+0x76>
 80181d0:	4b7b      	ldr	r3, [pc, #492]	; (80183c0 <ai_platform_network_process+0x22c>)
 80181d2:	2201      	movs	r2, #1
 80181d4:	4619      	mov	r1, r3
 80181d6:	601a      	str	r2, [r3, #0]
 80181d8:	680b      	ldr	r3, [r1, #0]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d1fc      	bne.n	80181d8 <ai_platform_network_process+0x44>
 80181de:	4b79      	ldr	r3, [pc, #484]	; (80183c4 <ai_platform_network_process+0x230>)
 80181e0:	4979      	ldr	r1, [pc, #484]	; (80183c8 <ai_platform_network_process+0x234>)
 80181e2:	4a7a      	ldr	r2, [pc, #488]	; (80183cc <ai_platform_network_process+0x238>)
 80181e4:	6019      	str	r1, [r3, #0]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	4293      	cmp	r3, r2
 80181ea:	d01c      	beq.n	8018226 <ai_platform_network_process+0x92>
 80181ec:	e7fe      	b.n	80181ec <ai_platform_network_process+0x58>
 80181ee:	2301      	movs	r3, #1
 80181f0:	6083      	str	r3, [r0, #8]
 80181f2:	f100 0308 	add.w	r3, r0, #8
 80181f6:	681a      	ldr	r2, [r3, #0]
 80181f8:	2a00      	cmp	r2, #0
 80181fa:	d1fc      	bne.n	80181f6 <ai_platform_network_process+0x62>
 80181fc:	4a72      	ldr	r2, [pc, #456]	; (80183c8 <ai_platform_network_process+0x234>)
 80181fe:	4b73      	ldr	r3, [pc, #460]	; (80183cc <ai_platform_network_process+0x238>)
 8018200:	6002      	str	r2, [r0, #0]
 8018202:	6802      	ldr	r2, [r0, #0]
 8018204:	429a      	cmp	r2, r3
 8018206:	d00e      	beq.n	8018226 <ai_platform_network_process+0x92>
 8018208:	e7fe      	b.n	8018208 <ai_platform_network_process+0x74>
 801820a:	2201      	movs	r2, #1
 801820c:	4619      	mov	r1, r3
 801820e:	601a      	str	r2, [r3, #0]
 8018210:	680b      	ldr	r3, [r1, #0]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d1fc      	bne.n	8018210 <ai_platform_network_process+0x7c>
 8018216:	4b68      	ldr	r3, [pc, #416]	; (80183b8 <ai_platform_network_process+0x224>)
 8018218:	496b      	ldr	r1, [pc, #428]	; (80183c8 <ai_platform_network_process+0x234>)
 801821a:	4a6c      	ldr	r2, [pc, #432]	; (80183cc <ai_platform_network_process+0x238>)
 801821c:	6019      	str	r1, [r3, #0]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	4293      	cmp	r3, r2
 8018222:	f040 823e 	bne.w	80186a2 <ai_platform_network_process+0x50e>
 8018226:	f7ff f925 	bl	8017474 <_ai_platform_release_crc>
 801822a:	2c00      	cmp	r4, #0
 801822c:	f000 8242 	beq.w	80186b4 <ai_platform_network_process+0x520>
 8018230:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018232:	2a00      	cmp	r2, #0
 8018234:	f000 808c 	beq.w	8018350 <ai_platform_network_process+0x1bc>
 8018238:	2600      	movs	r6, #0
 801823a:	68e3      	ldr	r3, [r4, #12]
 801823c:	6166      	str	r6, [r4, #20]
 801823e:	f003 0303 	and.w	r3, r3, #3
 8018242:	2b03      	cmp	r3, #3
 8018244:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8018248:	f040 822c 	bne.w	80186a4 <ai_platform_network_process+0x510>
 801824c:	2d00      	cmp	r5, #0
 801824e:	f000 8086 	beq.w	801835e <ai_platform_network_process+0x1ca>
 8018252:	f1b9 0f00 	cmp.w	r9, #0
 8018256:	f000 8082 	beq.w	801835e <ai_platform_network_process+0x1ca>
 801825a:	f8b9 3000 	ldrh.w	r3, [r9]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d07d      	beq.n	801835e <ai_platform_network_process+0x1ca>
 8018262:	69aa      	ldr	r2, [r5, #24]
 8018264:	9401      	str	r4, [sp, #4]
 8018266:	6817      	ldr	r7, [r2, #0]
 8018268:	429e      	cmp	r6, r3
 801826a:	f080 80b1 	bcs.w	80183d0 <ai_platform_network_process+0x23c>
 801826e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018272:	2b00      	cmp	r3, #0
 8018274:	f000 80ac 	beq.w	80183d0 <ai_platform_network_process+0x23c>
 8018278:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801827c:	2c00      	cmp	r4, #0
 801827e:	f000 80a7 	beq.w	80183d0 <ai_platform_network_process+0x23c>
 8018282:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018286:	ea4f 1806 	mov.w	r8, r6, lsl #4
 801828a:	f8d3 b000 	ldr.w	fp, [r3]
 801828e:	eb1b 0a08 	adds.w	sl, fp, r8
 8018292:	f000 808b 	beq.w	80183ac <ai_platform_network_process+0x218>
 8018296:	69a3      	ldr	r3, [r4, #24]
 8018298:	2101      	movs	r1, #1
 801829a:	685b      	ldr	r3, [r3, #4]
 801829c:	4628      	mov	r0, r5
 801829e:	9303      	str	r3, [sp, #12]
 80182a0:	f7ff f89a 	bl	80173d8 <ai_buffer_get_size>
 80182a4:	9b03      	ldr	r3, [sp, #12]
 80182a6:	4283      	cmp	r3, r0
 80182a8:	d377      	bcc.n	801839a <ai_platform_network_process+0x206>
 80182aa:	68e0      	ldr	r0, [r4, #12]
 80182ac:	69a9      	ldr	r1, [r5, #24]
 80182ae:	68c2      	ldr	r2, [r0, #12]
 80182b0:	68cb      	ldr	r3, [r1, #12]
 80182b2:	429a      	cmp	r2, r3
 80182b4:	d171      	bne.n	801839a <ai_platform_network_process+0x206>
 80182b6:	6882      	ldr	r2, [r0, #8]
 80182b8:	688b      	ldr	r3, [r1, #8]
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d16d      	bne.n	801839a <ai_platform_network_process+0x206>
 80182be:	6842      	ldr	r2, [r0, #4]
 80182c0:	684b      	ldr	r3, [r1, #4]
 80182c2:	429a      	cmp	r2, r3
 80182c4:	d169      	bne.n	801839a <ai_platform_network_process+0x206>
 80182c6:	69a3      	ldr	r3, [r4, #24]
 80182c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80182cc:	f001 f8b4 	bl	8019438 <ai_array_get_data_byte_size>
 80182d0:	9003      	str	r0, [sp, #12]
 80182d2:	4620      	mov	r0, r4
 80182d4:	f001 f822 	bl	801931c <get_tensor_byte_size>
 80182d8:	9b03      	ldr	r3, [sp, #12]
 80182da:	4283      	cmp	r3, r0
 80182dc:	d35d      	bcc.n	801839a <ai_platform_network_process+0x206>
 80182de:	69a3      	ldr	r3, [r4, #24]
 80182e0:	6818      	ldr	r0, [r3, #0]
 80182e2:	f001 f82f 	bl	8019344 <ai_array_to_buffer_fmt>
 80182e6:	682b      	ldr	r3, [r5, #0]
 80182e8:	4043      	eors	r3, r0
 80182ea:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80182ee:	d14b      	bne.n	8018388 <ai_platform_network_process+0x1f4>
 80182f0:	686b      	ldr	r3, [r5, #4]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d05a      	beq.n	80183ac <ai_platform_network_process+0x218>
 80182f6:	69ab      	ldr	r3, [r5, #24]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d03a      	beq.n	8018374 <ai_platform_network_process+0x1e0>
 80182fe:	4620      	mov	r0, r4
 8018300:	9303      	str	r3, [sp, #12]
 8018302:	f001 f80b 	bl	801931c <get_tensor_byte_size>
 8018306:	f8ca 0008 	str.w	r0, [sl, #8]
 801830a:	69aa      	ldr	r2, [r5, #24]
 801830c:	9b03      	ldr	r3, [sp, #12]
 801830e:	6812      	ldr	r2, [r2, #0]
 8018310:	429f      	cmp	r7, r3
 8018312:	fb02 f200 	mul.w	r2, r2, r0
 8018316:	f8ca 200c 	str.w	r2, [sl, #12]
 801831a:	6868      	ldr	r0, [r5, #4]
 801831c:	bf38      	it	cc
 801831e:	461f      	movcc	r7, r3
 8018320:	f8ca 0004 	str.w	r0, [sl, #4]
 8018324:	686b      	ldr	r3, [r5, #4]
 8018326:	4413      	add	r3, r2
 8018328:	f84b 3008 	str.w	r3, [fp, r8]
 801832c:	69a1      	ldr	r1, [r4, #24]
 801832e:	680b      	ldr	r3, [r1, #0]
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	d408      	bmi.n	8018346 <ai_platform_network_process+0x1b2>
 8018334:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8018338:	1a9b      	subs	r3, r3, r2
 801833a:	4418      	add	r0, r3
 801833c:	6088      	str	r0, [r1, #8]
 801833e:	69a3      	ldr	r3, [r4, #24]
 8018340:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018344:	60da      	str	r2, [r3, #12]
 8018346:	f8b9 3000 	ldrh.w	r3, [r9]
 801834a:	3601      	adds	r6, #1
 801834c:	351c      	adds	r5, #28
 801834e:	e78b      	b.n	8018268 <ai_platform_network_process+0xd4>
 8018350:	68e3      	ldr	r3, [r4, #12]
 8018352:	6162      	str	r2, [r4, #20]
 8018354:	f003 0303 	and.w	r3, r3, #3
 8018358:	2b03      	cmp	r3, #3
 801835a:	f040 81a3 	bne.w	80186a4 <ai_platform_network_process+0x510>
 801835e:	f104 0010 	add.w	r0, r4, #16
 8018362:	2217      	movs	r2, #23
 8018364:	2112      	movs	r1, #18
 8018366:	f000 f9af 	bl	80186c8 <core_set_error>
 801836a:	2300      	movs	r3, #0
 801836c:	4618      	mov	r0, r3
 801836e:	b005      	add	sp, #20
 8018370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018374:	469a      	mov	sl, r3
 8018376:	9c01      	ldr	r4, [sp, #4]
 8018378:	2221      	movs	r2, #33	; 0x21
 801837a:	f104 0010 	add.w	r0, r4, #16
 801837e:	2112      	movs	r1, #18
 8018380:	f000 f9a2 	bl	80186c8 <core_set_error>
 8018384:	4653      	mov	r3, sl
 8018386:	e7f1      	b.n	801836c <ai_platform_network_process+0x1d8>
 8018388:	9c01      	ldr	r4, [sp, #4]
 801838a:	2219      	movs	r2, #25
 801838c:	f104 0010 	add.w	r0, r4, #16
 8018390:	2112      	movs	r1, #18
 8018392:	f000 f999 	bl	80186c8 <core_set_error>
 8018396:	2300      	movs	r3, #0
 8018398:	e7e8      	b.n	801836c <ai_platform_network_process+0x1d8>
 801839a:	9c01      	ldr	r4, [sp, #4]
 801839c:	2218      	movs	r2, #24
 801839e:	f104 0010 	add.w	r0, r4, #16
 80183a2:	2112      	movs	r1, #18
 80183a4:	f000 f990 	bl	80186c8 <core_set_error>
 80183a8:	2300      	movs	r3, #0
 80183aa:	e7df      	b.n	801836c <ai_platform_network_process+0x1d8>
 80183ac:	9c01      	ldr	r4, [sp, #4]
 80183ae:	e7d6      	b.n	801835e <ai_platform_network_process+0x1ca>
 80183b0:	a1c00100 	.word	0xa1c00100
 80183b4:	e0002000 	.word	0xe0002000
 80183b8:	40023000 	.word	0x40023000
 80183bc:	40023008 	.word	0x40023008
 80183c0:	50023008 	.word	0x50023008
 80183c4:	50023000 	.word	0x50023000
 80183c8:	f407a5c2 	.word	0xf407a5c2
 80183cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80183d0:	9c01      	ldr	r4, [sp, #4]
 80183d2:	9a02      	ldr	r2, [sp, #8]
 80183d4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80183d6:	2a00      	cmp	r2, #0
 80183d8:	f000 80ae 	beq.w	8018538 <ai_platform_network_process+0x3a4>
 80183dc:	2b01      	cmp	r3, #1
 80183de:	f240 80a1 	bls.w	8018524 <ai_platform_network_process+0x390>
 80183e2:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 80183e6:	f119 0f0c 	cmn.w	r9, #12
 80183ea:	f000 809b 	beq.w	8018524 <ai_platform_network_process+0x390>
 80183ee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	f000 8096 	beq.w	8018524 <ai_platform_network_process+0x390>
 80183f8:	f04f 0800 	mov.w	r8, #0
 80183fc:	9d02      	ldr	r5, [sp, #8]
 80183fe:	9401      	str	r4, [sp, #4]
 8018400:	4598      	cmp	r8, r3
 8018402:	f080 8097 	bcs.w	8018534 <ai_platform_network_process+0x3a0>
 8018406:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801840a:	2b00      	cmp	r3, #0
 801840c:	f000 8092 	beq.w	8018534 <ai_platform_network_process+0x3a0>
 8018410:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
 8018414:	2c00      	cmp	r4, #0
 8018416:	f000 808d 	beq.w	8018534 <ai_platform_network_process+0x3a0>
 801841a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801841e:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018422:	f8d3 b000 	ldr.w	fp, [r3]
 8018426:	eb1b 0a06 	adds.w	sl, fp, r6
 801842a:	f000 8131 	beq.w	8018690 <ai_platform_network_process+0x4fc>
 801842e:	69a3      	ldr	r3, [r4, #24]
 8018430:	2101      	movs	r1, #1
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	4628      	mov	r0, r5
 8018436:	9302      	str	r3, [sp, #8]
 8018438:	f7fe ffce 	bl	80173d8 <ai_buffer_get_size>
 801843c:	9b02      	ldr	r3, [sp, #8]
 801843e:	4283      	cmp	r3, r0
 8018440:	d36f      	bcc.n	8018522 <ai_platform_network_process+0x38e>
 8018442:	68e0      	ldr	r0, [r4, #12]
 8018444:	69a9      	ldr	r1, [r5, #24]
 8018446:	68c2      	ldr	r2, [r0, #12]
 8018448:	68cb      	ldr	r3, [r1, #12]
 801844a:	429a      	cmp	r2, r3
 801844c:	d169      	bne.n	8018522 <ai_platform_network_process+0x38e>
 801844e:	6882      	ldr	r2, [r0, #8]
 8018450:	688b      	ldr	r3, [r1, #8]
 8018452:	429a      	cmp	r2, r3
 8018454:	d165      	bne.n	8018522 <ai_platform_network_process+0x38e>
 8018456:	6842      	ldr	r2, [r0, #4]
 8018458:	684b      	ldr	r3, [r1, #4]
 801845a:	429a      	cmp	r2, r3
 801845c:	d161      	bne.n	8018522 <ai_platform_network_process+0x38e>
 801845e:	69a3      	ldr	r3, [r4, #24]
 8018460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018464:	f000 ffe8 	bl	8019438 <ai_array_get_data_byte_size>
 8018468:	9002      	str	r0, [sp, #8]
 801846a:	4620      	mov	r0, r4
 801846c:	f000 ff56 	bl	801931c <get_tensor_byte_size>
 8018470:	9b02      	ldr	r3, [sp, #8]
 8018472:	4283      	cmp	r3, r0
 8018474:	d355      	bcc.n	8018522 <ai_platform_network_process+0x38e>
 8018476:	69a3      	ldr	r3, [r4, #24]
 8018478:	6818      	ldr	r0, [r3, #0]
 801847a:	f000 ff63 	bl	8019344 <ai_array_to_buffer_fmt>
 801847e:	682b      	ldr	r3, [r5, #0]
 8018480:	4043      	eors	r3, r0
 8018482:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8018486:	d143      	bne.n	8018510 <ai_platform_network_process+0x37c>
 8018488:	686b      	ldr	r3, [r5, #4]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d036      	beq.n	80184fc <ai_platform_network_process+0x368>
 801848e:	69ab      	ldr	r3, [r5, #24]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	b34b      	cbz	r3, 80184e8 <ai_platform_network_process+0x354>
 8018494:	4620      	mov	r0, r4
 8018496:	9302      	str	r3, [sp, #8]
 8018498:	f000 ff40 	bl	801931c <get_tensor_byte_size>
 801849c:	f8ca 0008 	str.w	r0, [sl, #8]
 80184a0:	69aa      	ldr	r2, [r5, #24]
 80184a2:	9b02      	ldr	r3, [sp, #8]
 80184a4:	6812      	ldr	r2, [r2, #0]
 80184a6:	429f      	cmp	r7, r3
 80184a8:	fb02 f200 	mul.w	r2, r2, r0
 80184ac:	f8ca 200c 	str.w	r2, [sl, #12]
 80184b0:	6868      	ldr	r0, [r5, #4]
 80184b2:	bf38      	it	cc
 80184b4:	461f      	movcc	r7, r3
 80184b6:	f8ca 0004 	str.w	r0, [sl, #4]
 80184ba:	686b      	ldr	r3, [r5, #4]
 80184bc:	4413      	add	r3, r2
 80184be:	f84b 3006 	str.w	r3, [fp, r6]
 80184c2:	69a1      	ldr	r1, [r4, #24]
 80184c4:	680b      	ldr	r3, [r1, #0]
 80184c6:	009e      	lsls	r6, r3, #2
 80184c8:	d408      	bmi.n	80184dc <ai_platform_network_process+0x348>
 80184ca:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80184ce:	1a9b      	subs	r3, r3, r2
 80184d0:	4418      	add	r0, r3
 80184d2:	6088      	str	r0, [r1, #8]
 80184d4:	69a3      	ldr	r3, [r4, #24]
 80184d6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80184da:	60da      	str	r2, [r3, #12]
 80184dc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80184e0:	f108 0801 	add.w	r8, r8, #1
 80184e4:	351c      	adds	r5, #28
 80184e6:	e78b      	b.n	8018400 <ai_platform_network_process+0x26c>
 80184e8:	469a      	mov	sl, r3
 80184ea:	9c01      	ldr	r4, [sp, #4]
 80184ec:	2221      	movs	r2, #33	; 0x21
 80184ee:	f104 0010 	add.w	r0, r4, #16
 80184f2:	2113      	movs	r1, #19
 80184f4:	f000 f8e8 	bl	80186c8 <core_set_error>
 80184f8:	4653      	mov	r3, sl
 80184fa:	e737      	b.n	801836c <ai_platform_network_process+0x1d8>
 80184fc:	469a      	mov	sl, r3
 80184fe:	9c01      	ldr	r4, [sp, #4]
 8018500:	2217      	movs	r2, #23
 8018502:	f104 0010 	add.w	r0, r4, #16
 8018506:	2113      	movs	r1, #19
 8018508:	f000 f8de 	bl	80186c8 <core_set_error>
 801850c:	4653      	mov	r3, sl
 801850e:	e72d      	b.n	801836c <ai_platform_network_process+0x1d8>
 8018510:	9c01      	ldr	r4, [sp, #4]
 8018512:	2219      	movs	r2, #25
 8018514:	f104 0010 	add.w	r0, r4, #16
 8018518:	2113      	movs	r1, #19
 801851a:	f000 f8d5 	bl	80186c8 <core_set_error>
 801851e:	2300      	movs	r3, #0
 8018520:	e724      	b.n	801836c <ai_platform_network_process+0x1d8>
 8018522:	9c01      	ldr	r4, [sp, #4]
 8018524:	f104 0010 	add.w	r0, r4, #16
 8018528:	2218      	movs	r2, #24
 801852a:	2113      	movs	r1, #19
 801852c:	f000 f8cc 	bl	80186c8 <core_set_error>
 8018530:	2300      	movs	r3, #0
 8018532:	e71b      	b.n	801836c <ai_platform_network_process+0x1d8>
 8018534:	9c01      	ldr	r4, [sp, #4]
 8018536:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8018538:	82a7      	strh	r7, [r4, #20]
 801853a:	2b00      	cmp	r3, #0
 801853c:	f000 80a5 	beq.w	801868a <ai_platform_network_process+0x4f6>
 8018540:	2b01      	cmp	r3, #1
 8018542:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8018544:	f240 809f 	bls.w	8018686 <ai_platform_network_process+0x4f2>
 8018548:	f105 070c 	add.w	r7, r5, #12
 801854c:	8ae3      	ldrh	r3, [r4, #22]
 801854e:	8aa2      	ldrh	r2, [r4, #20]
 8018550:	429a      	cmp	r2, r3
 8018552:	f67f af0b 	bls.w	801836c <ai_platform_network_process+0x1d8>
 8018556:	2d00      	cmp	r5, #0
 8018558:	d035      	beq.n	80185c6 <ai_platform_network_process+0x432>
 801855a:	882b      	ldrh	r3, [r5, #0]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d032      	beq.n	80185c6 <ai_platform_network_process+0x432>
 8018560:	686b      	ldr	r3, [r5, #4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d02f      	beq.n	80185c6 <ai_platform_network_process+0x432>
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	f04f 0800 	mov.w	r8, #0
 801856c:	b35b      	cbz	r3, 80185c6 <ai_platform_network_process+0x432>
 801856e:	68a9      	ldr	r1, [r5, #8]
 8018570:	699a      	ldr	r2, [r3, #24]
 8018572:	f8d1 a000 	ldr.w	sl, [r1]
 8018576:	6811      	ldr	r1, [r2, #0]
 8018578:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801857c:	eb0a 0609 	add.w	r6, sl, r9
 8018580:	0089      	lsls	r1, r1, #2
 8018582:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018586:	6890      	ldr	r0, [r2, #8]
 8018588:	d478      	bmi.n	801867c <ai_platform_network_process+0x4e8>
 801858a:	68d1      	ldr	r1, [r2, #12]
 801858c:	1a40      	subs	r0, r0, r1
 801858e:	eb0c 0100 	add.w	r1, ip, r0
 8018592:	6091      	str	r1, [r2, #8]
 8018594:	699b      	ldr	r3, [r3, #24]
 8018596:	6872      	ldr	r2, [r6, #4]
 8018598:	60da      	str	r2, [r3, #12]
 801859a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801859e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80185a2:	440b      	add	r3, r1
 80185a4:	4293      	cmp	r3, r2
 80185a6:	bf28      	it	cs
 80185a8:	68f3      	ldrcs	r3, [r6, #12]
 80185aa:	f108 0801 	add.w	r8, r8, #1
 80185ae:	bf28      	it	cs
 80185b0:	1ad3      	subcs	r3, r2, r3
 80185b2:	6073      	str	r3, [r6, #4]
 80185b4:	882b      	ldrh	r3, [r5, #0]
 80185b6:	4598      	cmp	r8, r3
 80185b8:	d205      	bcs.n	80185c6 <ai_platform_network_process+0x432>
 80185ba:	686b      	ldr	r3, [r5, #4]
 80185bc:	b11b      	cbz	r3, 80185c6 <ai_platform_network_process+0x432>
 80185be:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d1d3      	bne.n	801856e <ai_platform_network_process+0x3da>
 80185c6:	4620      	mov	r0, r4
 80185c8:	f000 fe62 	bl	8019290 <ai_layers_forward_all>
 80185cc:	2f00      	cmp	r7, #0
 80185ce:	d04c      	beq.n	801866a <ai_platform_network_process+0x4d6>
 80185d0:	883b      	ldrh	r3, [r7, #0]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d049      	beq.n	801866a <ai_platform_network_process+0x4d6>
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d046      	beq.n	801866a <ai_platform_network_process+0x4d6>
 80185dc:	6818      	ldr	r0, [r3, #0]
 80185de:	2800      	cmp	r0, #0
 80185e0:	d043      	beq.n	801866a <ai_platform_network_process+0x4d6>
 80185e2:	f04f 0800 	mov.w	r8, #0
 80185e6:	e01c      	b.n	8018622 <ai_platform_network_process+0x48e>
 80185e8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80185ec:	f108 0801 	add.w	r8, r8, #1
 80185f0:	4596      	cmp	lr, r2
 80185f2:	bf24      	itt	cs
 80185f4:	68f3      	ldrcs	r3, [r6, #12]
 80185f6:	eba2 0e03 	subcs.w	lr, r2, r3
 80185fa:	f8c6 e004 	str.w	lr, [r6, #4]
 80185fe:	6981      	ldr	r1, [r0, #24]
 8018600:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8018604:	1ad2      	subs	r2, r2, r3
 8018606:	eb0e 0302 	add.w	r3, lr, r2
 801860a:	608b      	str	r3, [r1, #8]
 801860c:	6983      	ldr	r3, [r0, #24]
 801860e:	6872      	ldr	r2, [r6, #4]
 8018610:	60da      	str	r2, [r3, #12]
 8018612:	883b      	ldrh	r3, [r7, #0]
 8018614:	4598      	cmp	r8, r3
 8018616:	d228      	bcs.n	801866a <ai_platform_network_process+0x4d6>
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	b333      	cbz	r3, 801866a <ai_platform_network_process+0x4d6>
 801861c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018620:	b318      	cbz	r0, 801866a <ai_platform_network_process+0x4d6>
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	6981      	ldr	r1, [r0, #24]
 8018626:	f8d3 a000 	ldr.w	sl, [r3]
 801862a:	680b      	ldr	r3, [r1, #0]
 801862c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8018630:	eb0a 0609 	add.w	r6, sl, r9
 8018634:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8018638:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 801863c:	eb0c 0e02 	add.w	lr, ip, r2
 8018640:	d0d2      	beq.n	80185e8 <ai_platform_network_process+0x454>
 8018642:	6889      	ldr	r1, [r1, #8]
 8018644:	4660      	mov	r0, ip
 8018646:	f002 f97d 	bl	801a944 <memcpy>
 801864a:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801864e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8018652:	440b      	add	r3, r1
 8018654:	4293      	cmp	r3, r2
 8018656:	bf28      	it	cs
 8018658:	68f3      	ldrcs	r3, [r6, #12]
 801865a:	f108 0801 	add.w	r8, r8, #1
 801865e:	bf28      	it	cs
 8018660:	1ad3      	subcs	r3, r2, r3
 8018662:	6073      	str	r3, [r6, #4]
 8018664:	883b      	ldrh	r3, [r7, #0]
 8018666:	4598      	cmp	r8, r3
 8018668:	d3d6      	bcc.n	8018618 <ai_platform_network_process+0x484>
 801866a:	8ae3      	ldrh	r3, [r4, #22]
 801866c:	8aa2      	ldrh	r2, [r4, #20]
 801866e:	3301      	adds	r3, #1
 8018670:	b29b      	uxth	r3, r3
 8018672:	429a      	cmp	r2, r3
 8018674:	82e3      	strh	r3, [r4, #22]
 8018676:	f63f af6e 	bhi.w	8018556 <ai_platform_network_process+0x3c2>
 801867a:	e677      	b.n	801836c <ai_platform_network_process+0x1d8>
 801867c:	4661      	mov	r1, ip
 801867e:	68b2      	ldr	r2, [r6, #8]
 8018680:	f002 f960 	bl	801a944 <memcpy>
 8018684:	e789      	b.n	801859a <ai_platform_network_process+0x406>
 8018686:	2700      	movs	r7, #0
 8018688:	e760      	b.n	801854c <ai_platform_network_process+0x3b8>
 801868a:	461d      	mov	r5, r3
 801868c:	461f      	mov	r7, r3
 801868e:	e75d      	b.n	801854c <ai_platform_network_process+0x3b8>
 8018690:	9c01      	ldr	r4, [sp, #4]
 8018692:	2217      	movs	r2, #23
 8018694:	f104 0010 	add.w	r0, r4, #16
 8018698:	2113      	movs	r1, #19
 801869a:	f000 f815 	bl	80186c8 <core_set_error>
 801869e:	4653      	mov	r3, sl
 80186a0:	e664      	b.n	801836c <ai_platform_network_process+0x1d8>
 80186a2:	e7fe      	b.n	80186a2 <ai_platform_network_process+0x50e>
 80186a4:	f104 0010 	add.w	r0, r4, #16
 80186a8:	2230      	movs	r2, #48	; 0x30
 80186aa:	2111      	movs	r1, #17
 80186ac:	f000 f80c 	bl	80186c8 <core_set_error>
 80186b0:	2300      	movs	r3, #0
 80186b2:	e65b      	b.n	801836c <ai_platform_network_process+0x1d8>
 80186b4:	4623      	mov	r3, r4
 80186b6:	e659      	b.n	801836c <ai_platform_network_process+0x1d8>

080186b8 <core_init>:
 80186b8:	2001      	movs	r0, #1
 80186ba:	4770      	bx	lr

080186bc <core_get_error>:
 80186bc:	4603      	mov	r3, r0
 80186be:	2200      	movs	r2, #0
 80186c0:	6800      	ldr	r0, [r0, #0]
 80186c2:	601a      	str	r2, [r3, #0]
 80186c4:	4770      	bx	lr
 80186c6:	bf00      	nop

080186c8 <core_set_error>:
 80186c8:	4603      	mov	r3, r0
 80186ca:	7800      	ldrb	r0, [r0, #0]
 80186cc:	b930      	cbnz	r0, 80186dc <core_set_error+0x14>
 80186ce:	7019      	strb	r1, [r3, #0]
 80186d0:	6819      	ldr	r1, [r3, #0]
 80186d2:	2001      	movs	r0, #1
 80186d4:	f362 211f 	bfi	r1, r2, #8, #24
 80186d8:	6019      	str	r1, [r3, #0]
 80186da:	4770      	bx	lr
 80186dc:	2000      	movs	r0, #0
 80186de:	4770      	bx	lr

080186e0 <forward_dense>:
 80186e0:	6983      	ldr	r3, [r0, #24]
 80186e2:	8819      	ldrh	r1, [r3, #0]
 80186e4:	2900      	cmp	r1, #0
 80186e6:	f000 818d 	beq.w	8018a04 <forward_dense+0x324>
 80186ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ee:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80186f2:	b099      	sub	sp, #100	; 0x64
 80186f4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80186f8:	b106      	cbz	r6, 80186fc <forward_dense+0x1c>
 80186fa:	6836      	ldr	r6, [r6, #0]
 80186fc:	2901      	cmp	r1, #1
 80186fe:	f240 817e 	bls.w	80189fe <forward_dense+0x31e>
 8018702:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8018706:	b104      	cbz	r4, 801870a <forward_dense+0x2a>
 8018708:	6824      	ldr	r4, [r4, #0]
 801870a:	2902      	cmp	r1, #2
 801870c:	f000 817c 	beq.w	8018a08 <forward_dense+0x328>
 8018710:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8018714:	2b00      	cmp	r3, #0
 8018716:	f040 817a 	bne.w	8018a0e <forward_dense+0x32e>
 801871a:	f11c 0218 	adds.w	r2, ip, #24
 801871e:	930d      	str	r3, [sp, #52]	; 0x34
 8018720:	f000 817b 	beq.w	8018a1a <forward_dense+0x33a>
 8018724:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 8018728:	2a01      	cmp	r2, #1
 801872a:	f240 83a4 	bls.w	8018e76 <forward_dense+0x796>
 801872e:	2b00      	cmp	r3, #0
 8018730:	f000 8175 	beq.w	8018a1e <forward_dense+0x33e>
 8018734:	685b      	ldr	r3, [r3, #4]
 8018736:	930e      	str	r3, [sp, #56]	; 0x38
 8018738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801873a:	68e2      	ldr	r2, [r4, #12]
 801873c:	6998      	ldr	r0, [r3, #24]
 801873e:	e9d2 7501 	ldrd	r7, r5, [r2, #4]
 8018742:	6803      	ldr	r3, [r0, #0]
 8018744:	9501      	str	r5, [sp, #4]
 8018746:	f3c3 5841 	ubfx	r8, r3, #21, #2
 801874a:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 801874e:	fa49 f508 	asr.w	r5, r9, r8
 8018752:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8018756:	68f2      	ldr	r2, [r6, #12]
 8018758:	9512      	str	r5, [sp, #72]	; 0x48
 801875a:	6852      	ldr	r2, [r2, #4]
 801875c:	9d01      	ldr	r5, [sp, #4]
 801875e:	2903      	cmp	r1, #3
 8018760:	fb05 f507 	mul.w	r5, r5, r7
 8018764:	9215      	str	r2, [sp, #84]	; 0x54
 8018766:	f000 836a 	beq.w	8018e3e <forward_dense+0x75e>
 801876a:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 801876e:	2a00      	cmp	r2, #0
 8018770:	f000 8368 	beq.w	8018e44 <forward_dense+0x764>
 8018774:	6812      	ldr	r2, [r2, #0]
 8018776:	2a00      	cmp	r2, #0
 8018778:	f000 8364 	beq.w	8018e44 <forward_dense+0x764>
 801877c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8018780:	2b04      	cmp	r3, #4
 8018782:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8018786:	f000 8363 	beq.w	8018e50 <forward_dense+0x770>
 801878a:	2b08      	cmp	r3, #8
 801878c:	f000 8360 	beq.w	8018e50 <forward_dense+0x770>
 8018790:	f04f 0a00 	mov.w	sl, #0
 8018794:	69a3      	ldr	r3, [r4, #24]
 8018796:	00ad      	lsls	r5, r5, #2
 8018798:	6898      	ldr	r0, [r3, #8]
 801879a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801879c:	fb08 0405 	mla	r4, r8, r5, r0
 80187a0:	695b      	ldr	r3, [r3, #20]
 80187a2:	69b2      	ldr	r2, [r6, #24]
 80187a4:	685b      	ldr	r3, [r3, #4]
 80187a6:	00bd      	lsls	r5, r7, #2
 80187a8:	42a0      	cmp	r0, r4
 80187aa:	9002      	str	r0, [sp, #8]
 80187ac:	9410      	str	r4, [sp, #64]	; 0x40
 80187ae:	950f      	str	r5, [sp, #60]	; 0x3c
 80187b0:	6891      	ldr	r1, [r2, #8]
 80187b2:	eb00 0805 	add.w	r8, r0, r5
 80187b6:	9304      	str	r3, [sp, #16]
 80187b8:	f080 811e 	bcs.w	80189f8 <forward_dense+0x318>
 80187bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80187be:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8018a38 <forward_dense+0x358>
 80187c2:	08e8      	lsrs	r0, r5, #3
 80187c4:	4606      	mov	r6, r0
 80187c6:	0142      	lsls	r2, r0, #5
 80187c8:	f025 0301 	bic.w	r3, r5, #1
 80187cc:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 80187d0:	9001      	str	r0, [sp, #4]
 80187d2:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 80187d6:	00f7      	lsls	r7, r6, #3
 80187d8:	9316      	str	r3, [sp, #88]	; 0x58
 80187da:	0143      	lsls	r3, r0, #5
 80187dc:	00b6      	lsls	r6, r6, #2
 80187de:	9306      	str	r3, [sp, #24]
 80187e0:	f107 0308 	add.w	r3, r7, #8
 80187e4:	9303      	str	r3, [sp, #12]
 80187e6:	1d33      	adds	r3, r6, #4
 80187e8:	930c      	str	r3, [sp, #48]	; 0x30
 80187ea:	f005 0301 	and.w	r3, r5, #1
 80187ee:	9308      	str	r3, [sp, #32]
 80187f0:	00ab      	lsls	r3, r5, #2
 80187f2:	9311      	str	r3, [sp, #68]	; 0x44
 80187f4:	4653      	mov	r3, sl
 80187f6:	f1a5 0410 	sub.w	r4, r5, #16
 80187fa:	0924      	lsrs	r4, r4, #4
 80187fc:	3401      	adds	r4, #1
 80187fe:	01a4      	lsls	r4, r4, #6
 8018800:	f005 0907 	and.w	r9, r5, #7
 8018804:	9713      	str	r7, [sp, #76]	; 0x4c
 8018806:	960b      	str	r6, [sp, #44]	; 0x2c
 8018808:	9417      	str	r4, [sp, #92]	; 0x5c
 801880a:	eb01 0b02 	add.w	fp, r1, r2
 801880e:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8018812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018814:	9906      	ldr	r1, [sp, #24]
 8018816:	6992      	ldr	r2, [r2, #24]
 8018818:	4459      	add	r1, fp
 801881a:	6894      	ldr	r4, [r2, #8]
 801881c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801881e:	9105      	str	r1, [sp, #20]
 8018820:	2a00      	cmp	r2, #0
 8018822:	f000 810b 	beq.w	8018a3c <forward_dense+0x35c>
 8018826:	6992      	ldr	r2, [r2, #24]
 8018828:	6896      	ldr	r6, [r2, #8]
 801882a:	2b00      	cmp	r3, #0
 801882c:	f000 810a 	beq.w	8018a44 <forward_dense+0x364>
 8018830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018832:	2a04      	cmp	r2, #4
 8018834:	f000 821a 	beq.w	8018c6c <forward_dense+0x58c>
 8018838:	9a02      	ldr	r2, [sp, #8]
 801883a:	4590      	cmp	r8, r2
 801883c:	f240 80d3 	bls.w	80189e6 <forward_dense+0x306>
 8018840:	4617      	mov	r7, r2
 8018842:	9a06      	ldr	r2, [sp, #24]
 8018844:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8018848:	f102 0c20 	add.w	ip, r2, #32
 801884c:	44dc      	add	ip, fp
 801884e:	46be      	mov	lr, r7
 8018850:	4637      	mov	r7, r6
 8018852:	e9dd a613 	ldrd	sl, r6, [sp, #76]	; 0x4c
 8018856:	2f00      	cmp	r7, #0
 8018858:	f000 80e3 	beq.w	8018a22 <forward_dense+0x342>
 801885c:	9a01      	ldr	r2, [sp, #4]
 801885e:	edd7 5a00 	vldr	s11, [r7]
 8018862:	3704      	adds	r7, #4
 8018864:	2a00      	cmp	r2, #0
 8018866:	f000 80e2 	beq.w	8018a2e <forward_dense+0x34e>
 801886a:	4661      	mov	r1, ip
 801886c:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8018a38 <forward_dense+0x358>
 8018870:	9803      	ldr	r0, [sp, #12]
 8018872:	f104 0208 	add.w	r2, r4, #8
 8018876:	1905      	adds	r5, r0, r4
 8018878:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 801887c:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8018880:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018884:	ed90 7a00 	vldr	s14, [r0]
 8018888:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 801888c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018894:	ed90 5a00 	vldr	s10, [r0]
 8018898:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 801889c:	f812 0c06 	ldrb.w	r0, [r2, #-6]
 80188a0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80188a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80188a8:	ed90 5a00 	vldr	s10, [r0]
 80188ac:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 80188b0:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 80188b4:	eee5 7a07 	vfma.f32	s15, s10, s14
 80188b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80188bc:	ed90 5a00 	vldr	s10, [r0]
 80188c0:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 80188c4:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 80188c8:	eee5 7a07 	vfma.f32	s15, s10, s14
 80188cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80188d0:	ed90 5a00 	vldr	s10, [r0]
 80188d4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80188d8:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80188dc:	eee5 7a07 	vfma.f32	s15, s10, s14
 80188e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80188e4:	ed90 5a00 	vldr	s10, [r0]
 80188e8:	ed11 7a03 	vldr	s14, [r1, #-12]
 80188ec:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80188f0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80188f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80188f8:	ed90 5a00 	vldr	s10, [r0]
 80188fc:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018900:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8018904:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801890c:	ed11 7a01 	vldr	s14, [r1, #-4]
 8018910:	ed90 5a00 	vldr	s10, [r0]
 8018914:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018918:	3208      	adds	r2, #8
 801891a:	4295      	cmp	r5, r2
 801891c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018920:	f101 0120 	add.w	r1, r1, #32
 8018924:	d1a8      	bne.n	8018878 <forward_dense+0x198>
 8018926:	465a      	mov	r2, fp
 8018928:	eb04 010a 	add.w	r1, r4, sl
 801892c:	2e00      	cmp	r6, #0
 801892e:	d04a      	beq.n	80189c6 <forward_dense+0x2e6>
 8018930:	7808      	ldrb	r0, [r1, #0]
 8018932:	ed92 7a00 	vldr	s14, [r2]
 8018936:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801893a:	edd0 7a00 	vldr	s15, [r0]
 801893e:	2e01      	cmp	r6, #1
 8018940:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018944:	d03f      	beq.n	80189c6 <forward_dense+0x2e6>
 8018946:	7848      	ldrb	r0, [r1, #1]
 8018948:	edd2 7a01 	vldr	s15, [r2, #4]
 801894c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018950:	ed90 7a00 	vldr	s14, [r0]
 8018954:	2e02      	cmp	r6, #2
 8018956:	eea7 6a27 	vfma.f32	s12, s14, s15
 801895a:	d034      	beq.n	80189c6 <forward_dense+0x2e6>
 801895c:	7888      	ldrb	r0, [r1, #2]
 801895e:	edd2 7a02 	vldr	s15, [r2, #8]
 8018962:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018966:	ed90 7a00 	vldr	s14, [r0]
 801896a:	2e03      	cmp	r6, #3
 801896c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018970:	d029      	beq.n	80189c6 <forward_dense+0x2e6>
 8018972:	78c8      	ldrb	r0, [r1, #3]
 8018974:	edd2 7a03 	vldr	s15, [r2, #12]
 8018978:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801897c:	ed90 7a00 	vldr	s14, [r0]
 8018980:	2e04      	cmp	r6, #4
 8018982:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018986:	d01e      	beq.n	80189c6 <forward_dense+0x2e6>
 8018988:	7908      	ldrb	r0, [r1, #4]
 801898a:	edd2 7a04 	vldr	s15, [r2, #16]
 801898e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018992:	ed90 7a00 	vldr	s14, [r0]
 8018996:	2e05      	cmp	r6, #5
 8018998:	eea7 6a27 	vfma.f32	s12, s14, s15
 801899c:	d013      	beq.n	80189c6 <forward_dense+0x2e6>
 801899e:	7948      	ldrb	r0, [r1, #5]
 80189a0:	edd2 7a05 	vldr	s15, [r2, #20]
 80189a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80189a8:	ed90 7a00 	vldr	s14, [r0]
 80189ac:	2e06      	cmp	r6, #6
 80189ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80189b2:	d008      	beq.n	80189c6 <forward_dense+0x2e6>
 80189b4:	7989      	ldrb	r1, [r1, #6]
 80189b6:	edd2 7a06 	vldr	s15, [r2, #24]
 80189ba:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 80189be:	ed92 7a00 	vldr	s14, [r2]
 80189c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80189c6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80189ca:	ecae 6a01 	vstmia	lr!, {s12}
 80189ce:	45c6      	cmp	lr, r8
 80189d0:	444c      	add	r4, r9
 80189d2:	f4ff af40 	bcc.w	8018856 <forward_dense+0x176>
 80189d6:	9902      	ldr	r1, [sp, #8]
 80189d8:	43ca      	mvns	r2, r1
 80189da:	4442      	add	r2, r8
 80189dc:	f022 0203 	bic.w	r2, r2, #3
 80189e0:	3204      	adds	r2, #4
 80189e2:	188a      	adds	r2, r1, r2
 80189e4:	9202      	str	r2, [sp, #8]
 80189e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80189ea:	4490      	add	r8, r2
 80189ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80189ee:	4493      	add	fp, r2
 80189f0:	9a02      	ldr	r2, [sp, #8]
 80189f2:	428a      	cmp	r2, r1
 80189f4:	f4ff af0d 	bcc.w	8018812 <forward_dense+0x132>
 80189f8:	b019      	add	sp, #100	; 0x64
 80189fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189fe:	2300      	movs	r3, #0
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	deff      	udf	#255	; 0xff
 8018a04:	684b      	ldr	r3, [r1, #4]
 8018a06:	deff      	udf	#255	; 0xff
 8018a08:	2300      	movs	r3, #0
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	deff      	udf	#255	; 0xff
 8018a0e:	681a      	ldr	r2, [r3, #0]
 8018a10:	920d      	str	r2, [sp, #52]	; 0x34
 8018a12:	f11c 0218 	adds.w	r2, ip, #24
 8018a16:	f47f ae85 	bne.w	8018724 <forward_dense+0x44>
 8018a1a:	920e      	str	r2, [sp, #56]	; 0x38
 8018a1c:	e68c      	b.n	8018738 <forward_dense+0x58>
 8018a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8018a20:	e68a      	b.n	8018738 <forward_dense+0x58>
 8018a22:	9a01      	ldr	r2, [sp, #4]
 8018a24:	eef0 5a66 	vmov.f32	s11, s13
 8018a28:	2a00      	cmp	r2, #0
 8018a2a:	f47f af1e 	bne.w	801886a <forward_dense+0x18a>
 8018a2e:	9a05      	ldr	r2, [sp, #20]
 8018a30:	4621      	mov	r1, r4
 8018a32:	ed9f 6a01 	vldr	s12, [pc, #4]	; 8018a38 <forward_dense+0x358>
 8018a36:	e779      	b.n	801892c <forward_dense+0x24c>
 8018a38:	00000000 	.word	0x00000000
 8018a3c:	4616      	mov	r6, r2
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	f47f aef6 	bne.w	8018830 <forward_dense+0x150>
 8018a44:	9a02      	ldr	r2, [sp, #8]
 8018a46:	4590      	cmp	r8, r2
 8018a48:	d9cd      	bls.n	80189e6 <forward_dense+0x306>
 8018a4a:	4615      	mov	r5, r2
 8018a4c:	9a06      	ldr	r2, [sp, #24]
 8018a4e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018a50:	3240      	adds	r2, #64	; 0x40
 8018a52:	eb02 070b 	add.w	r7, r2, fp
 8018a56:	9a05      	ldr	r2, [sp, #20]
 8018a58:	468a      	mov	sl, r1
 8018a5a:	4610      	mov	r0, r2
 8018a5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018a5e:	9307      	str	r3, [sp, #28]
 8018a60:	4691      	mov	r9, r2
 8018a62:	9b04      	ldr	r3, [sp, #16]
 8018a64:	eb00 0c02 	add.w	ip, r0, r2
 8018a68:	f001 0e0f 	and.w	lr, r1, #15
 8018a6c:	2e00      	cmp	r6, #0
 8018a6e:	f000 81da 	beq.w	8018e26 <forward_dense+0x746>
 8018a72:	f1ba 0f0f 	cmp.w	sl, #15
 8018a76:	edd6 5a00 	vldr	s11, [r6]
 8018a7a:	f106 0604 	add.w	r6, r6, #4
 8018a7e:	f240 81d8 	bls.w	8018e32 <forward_dense+0x752>
 8018a82:	4639      	mov	r1, r7
 8018a84:	4650      	mov	r0, sl
 8018a86:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 8018a38 <forward_dense+0x358>
 8018a8a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8018a8e:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8018a92:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8018a96:	ed12 5a10 	vldr	s10, [r2, #-64]	; 0xffffffc0
 8018a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018a9e:	ed11 7a10 	vldr	s14, [r1, #-64]	; 0xffffffc0
 8018aa2:	ed52 4a0e 	vldr	s9, [r2, #-56]	; 0xffffffc8
 8018aa6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018aaa:	ed11 7a0e 	vldr	s14, [r1, #-56]	; 0xffffffc8
 8018aae:	ed12 5a0d 	vldr	s10, [r2, #-52]	; 0xffffffcc
 8018ab2:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018ab6:	ed11 7a0d 	vldr	s14, [r1, #-52]	; 0xffffffcc
 8018aba:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8018abe:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018ac2:	ed12 7a0c 	vldr	s14, [r2, #-48]	; 0xffffffd0
 8018ac6:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8018aca:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018ace:	ed12 7a0b 	vldr	s14, [r2, #-44]	; 0xffffffd4
 8018ad2:	ed51 4a0a 	vldr	s9, [r1, #-40]	; 0xffffffd8
 8018ad6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018ada:	ed12 7a0a 	vldr	s14, [r2, #-40]	; 0xffffffd8
 8018ade:	ed12 5a09 	vldr	s10, [r2, #-36]	; 0xffffffdc
 8018ae2:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018ae6:	ed11 7a09 	vldr	s14, [r1, #-36]	; 0xffffffdc
 8018aea:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8018aee:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018af2:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 8018af6:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 8018afa:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018afe:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
 8018b02:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8018b06:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b0a:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 8018b0e:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8018b12:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018b16:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 8018b1a:	ed51 4a04 	vldr	s9, [r1, #-16]
 8018b1e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b22:	ed12 7a04 	vldr	s14, [r2, #-16]
 8018b26:	ed11 5a03 	vldr	s10, [r1, #-12]
 8018b2a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018b2e:	ed12 7a03 	vldr	s14, [r2, #-12]
 8018b32:	ed51 4a02 	vldr	s9, [r1, #-8]
 8018b36:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b3a:	ed12 7a02 	vldr	s14, [r2, #-8]
 8018b3e:	ed12 5a01 	vldr	s10, [r2, #-4]
 8018b42:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018b46:	ed11 7a01 	vldr	s14, [r1, #-4]
 8018b4a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018b4e:	3810      	subs	r0, #16
 8018b50:	280f      	cmp	r0, #15
 8018b52:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8018b56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018b5a:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8018b5e:	d896      	bhi.n	8018a8e <forward_dense+0x3ae>
 8018b60:	4672      	mov	r2, lr
 8018b62:	4661      	mov	r1, ip
 8018b64:	eb04 0009 	add.w	r0, r4, r9
 8018b68:	2a00      	cmp	r2, #0
 8018b6a:	d075      	beq.n	8018c58 <forward_dense+0x578>
 8018b6c:	ed90 7a00 	vldr	s14, [r0]
 8018b70:	edd1 7a00 	vldr	s15, [r1]
 8018b74:	2a01      	cmp	r2, #1
 8018b76:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b7a:	d06d      	beq.n	8018c58 <forward_dense+0x578>
 8018b7c:	ed90 7a01 	vldr	s14, [r0, #4]
 8018b80:	edd1 7a01 	vldr	s15, [r1, #4]
 8018b84:	2a02      	cmp	r2, #2
 8018b86:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b8a:	d065      	beq.n	8018c58 <forward_dense+0x578>
 8018b8c:	ed90 7a02 	vldr	s14, [r0, #8]
 8018b90:	edd1 7a02 	vldr	s15, [r1, #8]
 8018b94:	2a03      	cmp	r2, #3
 8018b96:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b9a:	d05d      	beq.n	8018c58 <forward_dense+0x578>
 8018b9c:	ed90 7a03 	vldr	s14, [r0, #12]
 8018ba0:	edd1 7a03 	vldr	s15, [r1, #12]
 8018ba4:	2a04      	cmp	r2, #4
 8018ba6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018baa:	d055      	beq.n	8018c58 <forward_dense+0x578>
 8018bac:	ed90 7a04 	vldr	s14, [r0, #16]
 8018bb0:	edd1 7a04 	vldr	s15, [r1, #16]
 8018bb4:	2a05      	cmp	r2, #5
 8018bb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bba:	d04d      	beq.n	8018c58 <forward_dense+0x578>
 8018bbc:	ed90 7a05 	vldr	s14, [r0, #20]
 8018bc0:	edd1 7a05 	vldr	s15, [r1, #20]
 8018bc4:	2a06      	cmp	r2, #6
 8018bc6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bca:	d045      	beq.n	8018c58 <forward_dense+0x578>
 8018bcc:	ed90 7a06 	vldr	s14, [r0, #24]
 8018bd0:	edd1 7a06 	vldr	s15, [r1, #24]
 8018bd4:	2a07      	cmp	r2, #7
 8018bd6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bda:	d03d      	beq.n	8018c58 <forward_dense+0x578>
 8018bdc:	ed90 7a07 	vldr	s14, [r0, #28]
 8018be0:	edd1 7a07 	vldr	s15, [r1, #28]
 8018be4:	2a08      	cmp	r2, #8
 8018be6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bea:	d035      	beq.n	8018c58 <forward_dense+0x578>
 8018bec:	ed90 7a08 	vldr	s14, [r0, #32]
 8018bf0:	edd1 7a08 	vldr	s15, [r1, #32]
 8018bf4:	2a09      	cmp	r2, #9
 8018bf6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bfa:	d02d      	beq.n	8018c58 <forward_dense+0x578>
 8018bfc:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8018c00:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8018c04:	2a0a      	cmp	r2, #10
 8018c06:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c0a:	d025      	beq.n	8018c58 <forward_dense+0x578>
 8018c0c:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8018c10:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8018c14:	2a0b      	cmp	r2, #11
 8018c16:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c1a:	d01d      	beq.n	8018c58 <forward_dense+0x578>
 8018c1c:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8018c20:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8018c24:	2a0c      	cmp	r2, #12
 8018c26:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c2a:	d015      	beq.n	8018c58 <forward_dense+0x578>
 8018c2c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8018c30:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8018c34:	2a0d      	cmp	r2, #13
 8018c36:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c3a:	d00d      	beq.n	8018c58 <forward_dense+0x578>
 8018c3c:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8018c40:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8018c44:	2a0e      	cmp	r2, #14
 8018c46:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c4a:	d005      	beq.n	8018c58 <forward_dense+0x578>
 8018c4c:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8018c50:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018c54:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c58:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018c5c:	eca5 6a01 	vstmia	r5!, {s12}
 8018c60:	4545      	cmp	r5, r8
 8018c62:	441c      	add	r4, r3
 8018c64:	f4ff af02 	bcc.w	8018a6c <forward_dense+0x38c>
 8018c68:	9b07      	ldr	r3, [sp, #28]
 8018c6a:	e6b4      	b.n	80189d6 <forward_dense+0x2f6>
 8018c6c:	9902      	ldr	r1, [sp, #8]
 8018c6e:	4588      	cmp	r8, r1
 8018c70:	f67f aeb9 	bls.w	80189e6 <forward_dense+0x306>
 8018c74:	4689      	mov	r9, r1
 8018c76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018c78:	eb02 000b 	add.w	r0, r2, fp
 8018c7c:	9a06      	ldr	r2, [sp, #24]
 8018c7e:	9007      	str	r0, [sp, #28]
 8018c80:	3220      	adds	r2, #32
 8018c82:	3007      	adds	r0, #7
 8018c84:	445a      	add	r2, fp
 8018c86:	900a      	str	r0, [sp, #40]	; 0x28
 8018c88:	9209      	str	r2, [sp, #36]	; 0x24
 8018c8a:	2e00      	cmp	r6, #0
 8018c8c:	f000 80b5 	beq.w	8018dfa <forward_dense+0x71a>
 8018c90:	9a01      	ldr	r2, [sp, #4]
 8018c92:	edd6 5a00 	vldr	s11, [r6]
 8018c96:	3604      	adds	r6, #4
 8018c98:	2a00      	cmp	r2, #0
 8018c9a:	f000 80b4 	beq.w	8018e06 <forward_dense+0x726>
 8018c9e:	ed1f 6a9a 	vldr	s12, [pc, #-616]	; 8018a38 <forward_dense+0x358>
 8018ca2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ca6:	1d21      	adds	r1, r4, #4
 8018ca8:	1905      	adds	r5, r0, r4
 8018caa:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8018cae:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8018cb2:	f000 070f 	and.w	r7, r0, #15
 8018cb6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018cba:	ed97 7a00 	vldr	s14, [r7]
 8018cbe:	0900      	lsrs	r0, r0, #4
 8018cc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018cc4:	ed90 5a00 	vldr	s10, [r0]
 8018cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ccc:	ed12 7a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
 8018cd0:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8018cd4:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018cd8:	0907      	lsrs	r7, r0, #4
 8018cda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018cde:	ed97 5a00 	vldr	s10, [r7]
 8018ce2:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 8018ce6:	f000 000f 	and.w	r0, r0, #15
 8018cea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018cee:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018cf2:	ed90 5a00 	vldr	s10, [r0]
 8018cf6:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8018cfa:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8018cfe:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d02:	0907      	lsrs	r7, r0, #4
 8018d04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018d08:	ed97 5a00 	vldr	s10, [r7]
 8018d0c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8018d10:	f000 000f 	and.w	r0, r0, #15
 8018d14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018d18:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d1c:	ed90 5a00 	vldr	s10, [r0]
 8018d20:	ed12 7a03 	vldr	s14, [r2, #-12]
 8018d24:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8018d28:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d2c:	0907      	lsrs	r7, r0, #4
 8018d2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018d32:	ed12 7a02 	vldr	s14, [r2, #-8]
 8018d36:	ed97 5a00 	vldr	s10, [r7]
 8018d3a:	f000 000f 	and.w	r0, r0, #15
 8018d3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018d42:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d46:	ed12 7a01 	vldr	s14, [r2, #-4]
 8018d4a:	ed90 5a00 	vldr	s10, [r0]
 8018d4e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018d52:	3104      	adds	r1, #4
 8018d54:	428d      	cmp	r5, r1
 8018d56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018d5a:	f102 0220 	add.w	r2, r2, #32
 8018d5e:	d1a4      	bne.n	8018caa <forward_dense+0x5ca>
 8018d60:	46de      	mov	lr, fp
 8018d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d64:	eb04 0a02 	add.w	sl, r4, r2
 8018d68:	9a07      	ldr	r2, [sp, #28]
 8018d6a:	4596      	cmp	lr, r2
 8018d6c:	d22c      	bcs.n	8018dc8 <forward_dense+0x6e8>
 8018d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d70:	f10e 0108 	add.w	r1, lr, #8
 8018d74:	eba2 0c01 	sub.w	ip, r2, r1
 8018d78:	f02c 0207 	bic.w	r2, ip, #7
 8018d7c:	f10e 0710 	add.w	r7, lr, #16
 8018d80:	4417      	add	r7, r2
 8018d82:	f10a 35ff 	add.w	r5, sl, #4294967295
 8018d86:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8018d8a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8018d8e:	f002 000f 	and.w	r0, r2, #15
 8018d92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018d96:	ed90 7a00 	vldr	s14, [r0]
 8018d9a:	0912      	lsrs	r2, r2, #4
 8018d9c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018da4:	ed92 5a00 	vldr	s10, [r2]
 8018da8:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018dac:	eee5 7a07 	vfma.f32	s15, s10, s14
 8018db0:	3108      	adds	r1, #8
 8018db2:	428f      	cmp	r7, r1
 8018db4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018db8:	d1e5      	bne.n	8018d86 <forward_dense+0x6a6>
 8018dba:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8018dbe:	f10c 0c01 	add.w	ip, ip, #1
 8018dc2:	44e2      	add	sl, ip
 8018dc4:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 8018dc8:	9a08      	ldr	r2, [sp, #32]
 8018dca:	b312      	cbz	r2, 8018e12 <forward_dense+0x732>
 8018dcc:	f89a 2000 	ldrb.w	r2, [sl]
 8018dd0:	edde 7a00 	vldr	s15, [lr]
 8018dd4:	0912      	lsrs	r2, r2, #4
 8018dd6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018dda:	ed92 7a00 	vldr	s14, [r2]
 8018dde:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018de2:	ee76 5a25 	vadd.f32	s11, s12, s11
 8018de6:	ece9 5a01 	vstmia	r9!, {s11}
 8018dea:	9a04      	ldr	r2, [sp, #16]
 8018dec:	45c8      	cmp	r8, r9
 8018dee:	4414      	add	r4, r2
 8018df0:	f67f adf1 	bls.w	80189d6 <forward_dense+0x2f6>
 8018df4:	2e00      	cmp	r6, #0
 8018df6:	f47f af4b 	bne.w	8018c90 <forward_dense+0x5b0>
 8018dfa:	9a01      	ldr	r2, [sp, #4]
 8018dfc:	eef0 5a66 	vmov.f32	s11, s13
 8018e00:	2a00      	cmp	r2, #0
 8018e02:	f47f af4c 	bne.w	8018c9e <forward_dense+0x5be>
 8018e06:	f8dd e014 	ldr.w	lr, [sp, #20]
 8018e0a:	46a2      	mov	sl, r4
 8018e0c:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8018e7c <forward_dense+0x79c>
 8018e10:	e7aa      	b.n	8018d68 <forward_dense+0x688>
 8018e12:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018e16:	eca9 6a01 	vstmia	r9!, {s12}
 8018e1a:	9a04      	ldr	r2, [sp, #16]
 8018e1c:	45c1      	cmp	r9, r8
 8018e1e:	4414      	add	r4, r2
 8018e20:	f4ff af33 	bcc.w	8018c8a <forward_dense+0x5aa>
 8018e24:	e5d7      	b.n	80189d6 <forward_dense+0x2f6>
 8018e26:	f1ba 0f0f 	cmp.w	sl, #15
 8018e2a:	eef0 5a66 	vmov.f32	s11, s13
 8018e2e:	f63f ae28 	bhi.w	8018a82 <forward_dense+0x3a2>
 8018e32:	4652      	mov	r2, sl
 8018e34:	4620      	mov	r0, r4
 8018e36:	9905      	ldr	r1, [sp, #20]
 8018e38:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8018e7c <forward_dense+0x79c>
 8018e3c:	e694      	b.n	8018b68 <forward_dense+0x488>
 8018e3e:	2300      	movs	r3, #0
 8018e40:	685b      	ldr	r3, [r3, #4]
 8018e42:	deff      	udf	#255	; 0xff
 8018e44:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8018e48:	2b04      	cmp	r3, #4
 8018e4a:	4691      	mov	r9, r2
 8018e4c:	f47f ac9d 	bne.w	801878a <forward_dense+0xaa>
 8018e50:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8018e54:	f1b9 0f00 	cmp.w	r9, #0
 8018e58:	f43f ac9c 	beq.w	8018794 <forward_dense+0xb4>
 8018e5c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8018e60:	f000 fac6 	bl	80193f0 <ai_array_get_byte_size>
 8018e64:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018e68:	4602      	mov	r2, r0
 8018e6a:	4651      	mov	r1, sl
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f001 fd69 	bl	801a944 <memcpy>
 8018e72:	4682      	mov	sl, r0
 8018e74:	e48e      	b.n	8018794 <forward_dense+0xb4>
 8018e76:	2300      	movs	r3, #0
 8018e78:	930e      	str	r3, [sp, #56]	; 0x38
 8018e7a:	e45d      	b.n	8018738 <forward_dense+0x58>
 8018e7c:	00000000 	.word	0x00000000

08018e80 <nl_func_sm_array_f32>:
 8018e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e84:	ed2d 8b04 	vpush	{d8-d9}
 8018e88:	6984      	ldr	r4, [r0, #24]
 8018e8a:	b089      	sub	sp, #36	; 0x24
 8018e8c:	4626      	mov	r6, r4
 8018e8e:	698f      	ldr	r7, [r1, #24]
 8018e90:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8018e94:	68bd      	ldr	r5, [r7, #8]
 8018e96:	9402      	str	r4, [sp, #8]
 8018e98:	eba2 040e 	sub.w	r4, r2, lr
 8018e9c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8018ea0:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 8018ea4:	68fc      	ldr	r4, [r7, #12]
 8018ea6:	68b6      	ldr	r6, [r6, #8]
 8018ea8:	eba2 020c 	sub.w	r2, r2, ip
 8018eac:	42a5      	cmp	r5, r4
 8018eae:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8018eb2:	d351      	bcc.n	8018f58 <nl_func_sm_array_f32+0xd8>
 8018eb4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8018eb8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8018ebc:	f1ce 0200 	rsb	r2, lr, #0
 8018ec0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8018ec4:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8018ec8:	9303      	str	r3, [sp, #12]
 8018eca:	9204      	str	r2, [sp, #16]
 8018ecc:	009b      	lsls	r3, r3, #2
 8018ece:	f1cc 0200 	rsb	r2, ip, #0
 8018ed2:	9205      	str	r2, [sp, #20]
 8018ed4:	9301      	str	r3, [sp, #4]
 8018ed6:	9b02      	ldr	r3, [sp, #8]
 8018ed8:	9a07      	ldr	r2, [sp, #28]
 8018eda:	60bd      	str	r5, [r7, #8]
 8018edc:	609e      	str	r6, [r3, #8]
 8018ede:	9b06      	ldr	r3, [sp, #24]
 8018ee0:	6992      	ldr	r2, [r2, #24]
 8018ee2:	699b      	ldr	r3, [r3, #24]
 8018ee4:	6894      	ldr	r4, [r2, #8]
 8018ee6:	9a03      	ldr	r2, [sp, #12]
 8018ee8:	689b      	ldr	r3, [r3, #8]
 8018eea:	2a01      	cmp	r2, #1
 8018eec:	ed93 8a00 	vldr	s16, [r3]
 8018ef0:	d93b      	bls.n	8018f6a <nl_func_sm_array_f32+0xea>
 8018ef2:	9901      	ldr	r1, [sp, #4]
 8018ef4:	1d1a      	adds	r2, r3, #4
 8018ef6:	eb03 0b01 	add.w	fp, r3, r1
 8018efa:	ecf2 7a01 	vldmia	r2!, {s15}
 8018efe:	4593      	cmp	fp, r2
 8018f00:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8018f04:	d1f9      	bne.n	8018efa <nl_func_sm_array_f32+0x7a>
 8018f06:	469a      	mov	sl, r3
 8018f08:	46a1      	mov	r9, r4
 8018f0a:	46a0      	mov	r8, r4
 8018f0c:	eddf 8a1a 	vldr	s17, [pc, #104]	; 8018f78 <nl_func_sm_array_f32+0xf8>
 8018f10:	ecba 0a01 	vldmia	sl!, {s0}
 8018f14:	ee30 0a48 	vsub.f32	s0, s0, s16
 8018f18:	f006 f9c8 	bl	801f2ac <expf>
 8018f1c:	45d3      	cmp	fp, sl
 8018f1e:	eca8 0a01 	vstmia	r8!, {s0}
 8018f22:	ee78 8a80 	vadd.f32	s17, s17, s0
 8018f26:	d1f3      	bne.n	8018f10 <nl_func_sm_array_f32+0x90>
 8018f28:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f30:	d00b      	beq.n	8018f4a <nl_func_sm_array_f32+0xca>
 8018f32:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8018f36:	9b01      	ldr	r3, [sp, #4]
 8018f38:	441c      	add	r4, r3
 8018f3a:	edd9 7a00 	vldr	s15, [r9]
 8018f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f42:	ece9 7a01 	vstmia	r9!, {s15}
 8018f46:	454c      	cmp	r4, r9
 8018f48:	d1f7      	bne.n	8018f3a <nl_func_sm_array_f32+0xba>
 8018f4a:	9b04      	ldr	r3, [sp, #16]
 8018f4c:	68fc      	ldr	r4, [r7, #12]
 8018f4e:	441d      	add	r5, r3
 8018f50:	9b05      	ldr	r3, [sp, #20]
 8018f52:	42ac      	cmp	r4, r5
 8018f54:	441e      	add	r6, r3
 8018f56:	d9be      	bls.n	8018ed6 <nl_func_sm_array_f32+0x56>
 8018f58:	9a02      	ldr	r2, [sp, #8]
 8018f5a:	60bc      	str	r4, [r7, #8]
 8018f5c:	68d3      	ldr	r3, [r2, #12]
 8018f5e:	6093      	str	r3, [r2, #8]
 8018f60:	b009      	add	sp, #36	; 0x24
 8018f62:	ecbd 8b04 	vpop	{d8-d9}
 8018f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6a:	2a00      	cmp	r2, #0
 8018f6c:	d0ed      	beq.n	8018f4a <nl_func_sm_array_f32+0xca>
 8018f6e:	9a01      	ldr	r2, [sp, #4]
 8018f70:	eb03 0b02 	add.w	fp, r3, r2
 8018f74:	e7c7      	b.n	8018f06 <nl_func_sm_array_f32+0x86>
 8018f76:	bf00      	nop
 8018f78:	00000000 	.word	0x00000000

08018f7c <nl_func_relu_generic_array_f32>:
 8018f7c:	b430      	push	{r4, r5}
 8018f7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8018f82:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f8a:	6989      	ldr	r1, [r1, #24]
 8018f8c:	6980      	ldr	r0, [r0, #24]
 8018f8e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8018f92:	f102 32ff 	add.w	r2, r2, #4294967295
 8018f96:	6880      	ldr	r0, [r0, #8]
 8018f98:	688c      	ldr	r4, [r1, #8]
 8018f9a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8018f9e:	4410      	add	r0, r2
 8018fa0:	edd3 6a00 	vldr	s13, [r3]
 8018fa4:	4422      	add	r2, r4
 8018fa6:	ed93 6a01 	vldr	s12, [r3, #4]
 8018faa:	d421      	bmi.n	8018ff0 <nl_func_relu_generic_array_f32+0x74>
 8018fac:	4294      	cmp	r4, r2
 8018fae:	d83d      	bhi.n	801902c <nl_func_relu_generic_array_f32+0xb0>
 8018fb0:	1d13      	adds	r3, r2, #4
 8018fb2:	1d02      	adds	r2, r0, #4
 8018fb4:	e010      	b.n	8018fd8 <nl_func_relu_generic_array_f32+0x5c>
 8018fb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fbe:	d503      	bpl.n	8018fc8 <nl_func_relu_generic_array_f32+0x4c>
 8018fc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018fc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018fc8:	ed62 7a01 	vstmdb	r2!, {s15}
 8018fcc:	6888      	ldr	r0, [r1, #8]
 8018fce:	f1a3 0408 	sub.w	r4, r3, #8
 8018fd2:	4284      	cmp	r4, r0
 8018fd4:	462b      	mov	r3, r5
 8018fd6:	d329      	bcc.n	801902c <nl_func_relu_generic_array_f32+0xb0>
 8018fd8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8018fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe4:	f1a3 0504 	sub.w	r5, r3, #4
 8018fe8:	d4e5      	bmi.n	8018fb6 <nl_func_relu_generic_array_f32+0x3a>
 8018fea:	eef0 7a47 	vmov.f32	s15, s14
 8018fee:	e7eb      	b.n	8018fc8 <nl_func_relu_generic_array_f32+0x4c>
 8018ff0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff8:	d01a      	beq.n	8019030 <nl_func_relu_generic_array_f32+0xb4>
 8018ffa:	4294      	cmp	r4, r2
 8018ffc:	d816      	bhi.n	801902c <nl_func_relu_generic_array_f32+0xb0>
 8018ffe:	1d13      	adds	r3, r2, #4
 8019000:	1d02      	adds	r2, r0, #4
 8019002:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019006:	eef4 7ae6 	vcmpe.f32	s15, s13
 801900a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801900e:	f1a3 0408 	sub.w	r4, r3, #8
 8019012:	f1a3 0004 	sub.w	r0, r3, #4
 8019016:	4623      	mov	r3, r4
 8019018:	d522      	bpl.n	8019060 <nl_func_relu_generic_array_f32+0xe4>
 801901a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801901e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019022:	ed62 7a01 	vstmdb	r2!, {s15}
 8019026:	688b      	ldr	r3, [r1, #8]
 8019028:	42a3      	cmp	r3, r4
 801902a:	d91e      	bls.n	801906a <nl_func_relu_generic_array_f32+0xee>
 801902c:	bc30      	pop	{r4, r5}
 801902e:	4770      	bx	lr
 8019030:	4294      	cmp	r4, r2
 8019032:	d8fb      	bhi.n	801902c <nl_func_relu_generic_array_f32+0xb0>
 8019034:	2500      	movs	r5, #0
 8019036:	1d13      	adds	r3, r2, #4
 8019038:	1d02      	adds	r2, r0, #4
 801903a:	ed53 7a01 	vldr	s15, [r3, #-4]
 801903e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019046:	f1a3 0408 	sub.w	r4, r3, #8
 801904a:	f1a3 0004 	sub.w	r0, r3, #4
 801904e:	4623      	mov	r3, r4
 8019050:	db0d      	blt.n	801906e <nl_func_relu_generic_array_f32+0xf2>
 8019052:	ed62 7a01 	vstmdb	r2!, {s15}
 8019056:	688b      	ldr	r3, [r1, #8]
 8019058:	42a3      	cmp	r3, r4
 801905a:	d8e7      	bhi.n	801902c <nl_func_relu_generic_array_f32+0xb0>
 801905c:	4603      	mov	r3, r0
 801905e:	e7ec      	b.n	801903a <nl_func_relu_generic_array_f32+0xbe>
 8019060:	ed62 7a01 	vstmdb	r2!, {s15}
 8019064:	688c      	ldr	r4, [r1, #8]
 8019066:	429c      	cmp	r4, r3
 8019068:	d8e0      	bhi.n	801902c <nl_func_relu_generic_array_f32+0xb0>
 801906a:	4603      	mov	r3, r0
 801906c:	e7c9      	b.n	8019002 <nl_func_relu_generic_array_f32+0x86>
 801906e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019072:	688c      	ldr	r4, [r1, #8]
 8019074:	429c      	cmp	r4, r3
 8019076:	d8d9      	bhi.n	801902c <nl_func_relu_generic_array_f32+0xb0>
 8019078:	4603      	mov	r3, r0
 801907a:	e7de      	b.n	801903a <nl_func_relu_generic_array_f32+0xbe>

0801907c <forward_relu>:
 801907c:	6982      	ldr	r2, [r0, #24]
 801907e:	8813      	ldrh	r3, [r2, #0]
 8019080:	b32b      	cbz	r3, 80190ce <forward_relu+0x52>
 8019082:	6852      	ldr	r2, [r2, #4]
 8019084:	6851      	ldr	r1, [r2, #4]
 8019086:	b101      	cbz	r1, 801908a <forward_relu+0xe>
 8019088:	6809      	ldr	r1, [r1, #0]
 801908a:	2b01      	cmp	r3, #1
 801908c:	d91c      	bls.n	80190c8 <forward_relu+0x4c>
 801908e:	b4f0      	push	{r4, r5, r6, r7}
 8019090:	6917      	ldr	r7, [r2, #16]
 8019092:	b107      	cbz	r7, 8019096 <forward_relu+0x1a>
 8019094:	683f      	ldr	r7, [r7, #0]
 8019096:	688c      	ldr	r4, [r1, #8]
 8019098:	69c3      	ldr	r3, [r0, #28]
 801909a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d043      	beq.n	801912a <forward_relu+0xae>
 80190a2:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80190a6:	2d01      	cmp	r5, #1
 80190a8:	d013      	beq.n	80190d2 <forward_relu+0x56>
 80190aa:	2201      	movs	r2, #1
 80190ac:	b144      	cbz	r4, 80190c0 <forward_relu+0x44>
 80190ae:	68ce      	ldr	r6, [r1, #12]
 80190b0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80190b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80190b8:	42a6      	cmp	r6, r4
 80190ba:	fb05 f202 	mul.w	r2, r5, r2
 80190be:	d1f9      	bne.n	80190b4 <forward_relu+0x38>
 80190c0:	4638      	mov	r0, r7
 80190c2:	bcf0      	pop	{r4, r5, r6, r7}
 80190c4:	f7ff bf5a 	b.w	8018f7c <nl_func_relu_generic_array_f32>
 80190c8:	2300      	movs	r3, #0
 80190ca:	685b      	ldr	r3, [r3, #4]
 80190cc:	deff      	udf	#255	; 0xff
 80190ce:	685b      	ldr	r3, [r3, #4]
 80190d0:	deff      	udf	#255	; 0xff
 80190d2:	69ba      	ldr	r2, [r7, #24]
 80190d4:	6988      	ldr	r0, [r1, #24]
 80190d6:	6896      	ldr	r6, [r2, #8]
 80190d8:	ed93 7a00 	vldr	s14, [r3]
 80190dc:	6882      	ldr	r2, [r0, #8]
 80190de:	b184      	cbz	r4, 8019102 <forward_relu+0x86>
 80190e0:	462b      	mov	r3, r5
 80190e2:	68cd      	ldr	r5, [r1, #12]
 80190e4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80190e8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80190ec:	42a5      	cmp	r5, r4
 80190ee:	fb01 f303 	mul.w	r3, r1, r3
 80190f2:	d1f9      	bne.n	80190e8 <forward_relu+0x6c>
 80190f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80190f8:	3b01      	subs	r3, #1
 80190fa:	009b      	lsls	r3, r3, #2
 80190fc:	18d2      	adds	r2, r2, r3
 80190fe:	441e      	add	r6, r3
 8019100:	d23a      	bcs.n	8019178 <forward_relu+0xfc>
 8019102:	2500      	movs	r5, #0
 8019104:	1d13      	adds	r3, r2, #4
 8019106:	1d32      	adds	r2, r6, #4
 8019108:	ed53 7a01 	vldr	s15, [r3, #-4]
 801910c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019114:	f1a3 0104 	sub.w	r1, r3, #4
 8019118:	d830      	bhi.n	801917c <forward_relu+0x100>
 801911a:	ed62 7a01 	vstmdb	r2!, {s15}
 801911e:	6884      	ldr	r4, [r0, #8]
 8019120:	3b08      	subs	r3, #8
 8019122:	429c      	cmp	r4, r3
 8019124:	d828      	bhi.n	8019178 <forward_relu+0xfc>
 8019126:	460b      	mov	r3, r1
 8019128:	e7ee      	b.n	8019108 <forward_relu+0x8c>
 801912a:	69bb      	ldr	r3, [r7, #24]
 801912c:	698d      	ldr	r5, [r1, #24]
 801912e:	6898      	ldr	r0, [r3, #8]
 8019130:	68ab      	ldr	r3, [r5, #8]
 8019132:	b184      	cbz	r4, 8019156 <forward_relu+0xda>
 8019134:	2201      	movs	r2, #1
 8019136:	68ce      	ldr	r6, [r1, #12]
 8019138:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801913c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8019140:	42a6      	cmp	r6, r4
 8019142:	fb01 f202 	mul.w	r2, r1, r2
 8019146:	d1f9      	bne.n	801913c <forward_relu+0xc0>
 8019148:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801914c:	3a01      	subs	r2, #1
 801914e:	0092      	lsls	r2, r2, #2
 8019150:	189b      	adds	r3, r3, r2
 8019152:	4410      	add	r0, r2
 8019154:	d210      	bcs.n	8019178 <forward_relu+0xfc>
 8019156:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801918c <forward_relu+0x110>
 801915a:	3304      	adds	r3, #4
 801915c:	1d01      	adds	r1, r0, #4
 801915e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019162:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8019166:	ed61 7a01 	vstmdb	r1!, {s15}
 801916a:	68a8      	ldr	r0, [r5, #8]
 801916c:	f1a3 0208 	sub.w	r2, r3, #8
 8019170:	4290      	cmp	r0, r2
 8019172:	f1a3 0304 	sub.w	r3, r3, #4
 8019176:	d9f2      	bls.n	801915e <forward_relu+0xe2>
 8019178:	bcf0      	pop	{r4, r5, r6, r7}
 801917a:	4770      	bx	lr
 801917c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019180:	6884      	ldr	r4, [r0, #8]
 8019182:	3b08      	subs	r3, #8
 8019184:	429c      	cmp	r4, r3
 8019186:	d8f7      	bhi.n	8019178 <forward_relu+0xfc>
 8019188:	460b      	mov	r3, r1
 801918a:	e7bd      	b.n	8019108 <forward_relu+0x8c>
 801918c:	00000000 	.word	0x00000000

08019190 <forward_sm>:
 8019190:	6982      	ldr	r2, [r0, #24]
 8019192:	8813      	ldrh	r3, [r2, #0]
 8019194:	b333      	cbz	r3, 80191e4 <forward_sm+0x54>
 8019196:	6852      	ldr	r2, [r2, #4]
 8019198:	6851      	ldr	r1, [r2, #4]
 801919a:	b101      	cbz	r1, 801919e <forward_sm+0xe>
 801919c:	6809      	ldr	r1, [r1, #0]
 801919e:	2b01      	cmp	r3, #1
 80191a0:	d91d      	bls.n	80191de <forward_sm+0x4e>
 80191a2:	6913      	ldr	r3, [r2, #16]
 80191a4:	b1cb      	cbz	r3, 80191da <forward_sm+0x4a>
 80191a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191a8:	6818      	ldr	r0, [r3, #0]
 80191aa:	688c      	ldr	r4, [r1, #8]
 80191ac:	68c3      	ldr	r3, [r0, #12]
 80191ae:	68ce      	ldr	r6, [r1, #12]
 80191b0:	0a24      	lsrs	r4, r4, #8
 80191b2:	685f      	ldr	r7, [r3, #4]
 80191b4:	b083      	sub	sp, #12
 80191b6:	6873      	ldr	r3, [r6, #4]
 80191b8:	f04f 0201 	mov.w	r2, #1
 80191bc:	d007      	beq.n	80191ce <forward_sm+0x3e>
 80191be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80191c2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80191c6:	42a6      	cmp	r6, r4
 80191c8:	fb05 f202 	mul.w	r2, r5, r2
 80191cc:	d1f9      	bne.n	80191c2 <forward_sm+0x32>
 80191ce:	e9cd 3700 	strd	r3, r7, [sp]
 80191d2:	f7ff fe55 	bl	8018e80 <nl_func_sm_array_f32>
 80191d6:	b003      	add	sp, #12
 80191d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191da:	68db      	ldr	r3, [r3, #12]
 80191dc:	deff      	udf	#255	; 0xff
 80191de:	2300      	movs	r3, #0
 80191e0:	685b      	ldr	r3, [r3, #4]
 80191e2:	deff      	udf	#255	; 0xff
 80191e4:	685b      	ldr	r3, [r3, #4]
 80191e6:	deff      	udf	#255	; 0xff

080191e8 <ai_check_custom_types>:
 80191e8:	4b13      	ldr	r3, [pc, #76]	; (8019238 <ai_check_custom_types+0x50>)
 80191ea:	b082      	sub	sp, #8
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	9301      	str	r3, [sp, #4]
 80191f0:	b118      	cbz	r0, 80191fa <ai_check_custom_types+0x12>
 80191f2:	7803      	ldrb	r3, [r0, #0]
 80191f4:	2b03      	cmp	r3, #3
 80191f6:	d002      	beq.n	80191fe <ai_check_custom_types+0x16>
 80191f8:	2000      	movs	r0, #0
 80191fa:	b002      	add	sp, #8
 80191fc:	4770      	bx	lr
 80191fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8019202:	4293      	cmp	r3, r2
 8019204:	d004      	beq.n	8019210 <ai_check_custom_types+0x28>
 8019206:	2001      	movs	r0, #1
 8019208:	f080 0001 	eor.w	r0, r0, #1
 801920c:	b002      	add	sp, #8
 801920e:	4770      	bx	lr
 8019210:	7842      	ldrb	r2, [r0, #1]
 8019212:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019216:	3001      	adds	r0, #1
 8019218:	429a      	cmp	r2, r3
 801921a:	d1f4      	bne.n	8019206 <ai_check_custom_types+0x1e>
 801921c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8019220:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019224:	429a      	cmp	r2, r3
 8019226:	d1ee      	bne.n	8019206 <ai_check_custom_types+0x1e>
 8019228:	7842      	ldrb	r2, [r0, #1]
 801922a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801922e:	429a      	cmp	r2, r3
 8019230:	d1e9      	bne.n	8019206 <ai_check_custom_types+0x1e>
 8019232:	2000      	movs	r0, #0
 8019234:	e7e8      	b.n	8019208 <ai_check_custom_types+0x20>
 8019236:	bf00      	nop
 8019238:	0801f628 	.word	0x0801f628

0801923c <ai_layers_init_all>:
 801923c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801923e:	b17a      	cbz	r2, 8019260 <ai_layers_init_all+0x24>
 8019240:	6913      	ldr	r3, [r2, #16]
 8019242:	60d0      	str	r0, [r2, #12]
 8019244:	429a      	cmp	r2, r3
 8019246:	f04f 0201 	mov.w	r2, #1
 801924a:	d009      	beq.n	8019260 <ai_layers_init_all+0x24>
 801924c:	b143      	cbz	r3, 8019260 <ai_layers_init_all+0x24>
 801924e:	6919      	ldr	r1, [r3, #16]
 8019250:	60d8      	str	r0, [r3, #12]
 8019252:	4299      	cmp	r1, r3
 8019254:	f102 0201 	add.w	r2, r2, #1
 8019258:	d002      	beq.n	8019260 <ai_layers_init_all+0x24>
 801925a:	460b      	mov	r3, r1
 801925c:	2b00      	cmp	r3, #0
 801925e:	d1f6      	bne.n	801924e <ai_layers_init_all+0x12>
 8019260:	4610      	mov	r0, r2
 8019262:	4770      	bx	lr

08019264 <ai_layers_post_init_all>:
 8019264:	b538      	push	{r3, r4, r5, lr}
 8019266:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8019268:	b184      	cbz	r4, 801928c <ai_layers_post_init_all+0x28>
 801926a:	2500      	movs	r5, #0
 801926c:	6863      	ldr	r3, [r4, #4]
 801926e:	07db      	lsls	r3, r3, #31
 8019270:	d504      	bpl.n	801927c <ai_layers_post_init_all+0x18>
 8019272:	6a23      	ldr	r3, [r4, #32]
 8019274:	b113      	cbz	r3, 801927c <ai_layers_post_init_all+0x18>
 8019276:	4620      	mov	r0, r4
 8019278:	4798      	blx	r3
 801927a:	3501      	adds	r5, #1
 801927c:	6923      	ldr	r3, [r4, #16]
 801927e:	42a3      	cmp	r3, r4
 8019280:	d002      	beq.n	8019288 <ai_layers_post_init_all+0x24>
 8019282:	461c      	mov	r4, r3
 8019284:	2b00      	cmp	r3, #0
 8019286:	d1f1      	bne.n	801926c <ai_layers_post_init_all+0x8>
 8019288:	4628      	mov	r0, r5
 801928a:	bd38      	pop	{r3, r4, r5, pc}
 801928c:	4625      	mov	r5, r4
 801928e:	e7fb      	b.n	8019288 <ai_layers_post_init_all+0x24>

08019290 <ai_layers_forward_all>:
 8019290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019294:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8019296:	4604      	mov	r4, r0
 8019298:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801929a:	b31f      	cbz	r7, 80192e4 <ai_layers_forward_all+0x54>
 801929c:	b1f5      	cbz	r5, 80192dc <ai_layers_forward_all+0x4c>
 801929e:	2600      	movs	r6, #0
 80192a0:	6385      	str	r5, [r0, #56]	; 0x38
 80192a2:	4629      	mov	r1, r5
 80192a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80192a6:	2001      	movs	r0, #1
 80192a8:	47b8      	blx	r7
 80192aa:	46b0      	mov	r8, r6
 80192ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80192ae:	e006      	b.n	80192be <ai_layers_forward_all+0x2e>
 80192b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80192b2:	63a1      	str	r1, [r4, #56]	; 0x38
 80192b4:	2003      	movs	r0, #3
 80192b6:	47b8      	blx	r7
 80192b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80192ba:	3601      	adds	r6, #1
 80192bc:	b179      	cbz	r1, 80192de <ai_layers_forward_all+0x4e>
 80192be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80192c0:	2002      	movs	r0, #2
 80192c2:	47b8      	blx	r7
 80192c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80192c6:	696b      	ldr	r3, [r5, #20]
 80192c8:	4628      	mov	r0, r5
 80192ca:	4798      	blx	r3
 80192cc:	6929      	ldr	r1, [r5, #16]
 80192ce:	428d      	cmp	r5, r1
 80192d0:	d1ee      	bne.n	80192b0 <ai_layers_forward_all+0x20>
 80192d2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80192d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80192d8:	2100      	movs	r1, #0
 80192da:	e7eb      	b.n	80192b4 <ai_layers_forward_all+0x24>
 80192dc:	462e      	mov	r6, r5
 80192de:	4630      	mov	r0, r6
 80192e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192e4:	2d00      	cmp	r5, #0
 80192e6:	d0f9      	beq.n	80192dc <ai_layers_forward_all+0x4c>
 80192e8:	463e      	mov	r6, r7
 80192ea:	6385      	str	r5, [r0, #56]	; 0x38
 80192ec:	696b      	ldr	r3, [r5, #20]
 80192ee:	4628      	mov	r0, r5
 80192f0:	4798      	blx	r3
 80192f2:	692b      	ldr	r3, [r5, #16]
 80192f4:	3601      	adds	r6, #1
 80192f6:	42ab      	cmp	r3, r5
 80192f8:	d004      	beq.n	8019304 <ai_layers_forward_all+0x74>
 80192fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80192fc:	461d      	mov	r5, r3
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d1f4      	bne.n	80192ec <ai_layers_forward_all+0x5c>
 8019302:	e7ec      	b.n	80192de <ai_layers_forward_all+0x4e>
 8019304:	2300      	movs	r3, #0
 8019306:	63a3      	str	r3, [r4, #56]	; 0x38
 8019308:	4630      	mov	r0, r6
 801930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801930e:	bf00      	nop

08019310 <ai_version_get>:
 8019310:	0212      	lsls	r2, r2, #8
 8019312:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8019316:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801931a:	4770      	bx	lr

0801931c <get_tensor_byte_size>:
 801931c:	68c1      	ldr	r1, [r0, #12]
 801931e:	6942      	ldr	r2, [r0, #20]
 8019320:	6983      	ldr	r3, [r0, #24]
 8019322:	68c9      	ldr	r1, [r1, #12]
 8019324:	68d0      	ldr	r0, [r2, #12]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	fb00 f001 	mul.w	r0, r0, r1
 801932c:	4a04      	ldr	r2, [pc, #16]	; (8019340 <get_tensor_byte_size+0x24>)
 801932e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8019332:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019336:	4293      	cmp	r3, r2
 8019338:	bf04      	itt	eq
 801933a:	3007      	addeq	r0, #7
 801933c:	08c0      	lsreq	r0, r0, #3
 801933e:	4770      	bx	lr
 8019340:	000400c0 	.word	0x000400c0

08019344 <ai_array_to_buffer_fmt>:
 8019344:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8019348:	2b02      	cmp	r3, #2
 801934a:	d036      	beq.n	80193ba <ai_array_to_buffer_fmt+0x76>
 801934c:	4a21      	ldr	r2, [pc, #132]	; (80193d4 <ai_array_to_buffer_fmt+0x90>)
 801934e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8019352:	4293      	cmp	r3, r2
 8019354:	d00f      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 8019356:	dd12      	ble.n	801937e <ai_array_to_buffer_fmt+0x3a>
 8019358:	4a1f      	ldr	r2, [pc, #124]	; (80193d8 <ai_array_to_buffer_fmt+0x94>)
 801935a:	4293      	cmp	r3, r2
 801935c:	d00b      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 801935e:	dd1e      	ble.n	801939e <ai_array_to_buffer_fmt+0x5a>
 8019360:	4a1e      	ldr	r2, [pc, #120]	; (80193dc <ai_array_to_buffer_fmt+0x98>)
 8019362:	4293      	cmp	r3, r2
 8019364:	d007      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 8019366:	dd30      	ble.n	80193ca <ai_array_to_buffer_fmt+0x86>
 8019368:	4a1d      	ldr	r2, [pc, #116]	; (80193e0 <ai_array_to_buffer_fmt+0x9c>)
 801936a:	4293      	cmp	r3, r2
 801936c:	d003      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 801936e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8019372:	4293      	cmp	r3, r2
 8019374:	d11f      	bne.n	80193b6 <ai_array_to_buffer_fmt+0x72>
 8019376:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801937a:	4318      	orrs	r0, r3
 801937c:	4770      	bx	lr
 801937e:	4a19      	ldr	r2, [pc, #100]	; (80193e4 <ai_array_to_buffer_fmt+0xa0>)
 8019380:	4293      	cmp	r3, r2
 8019382:	d0f8      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 8019384:	dd0b      	ble.n	801939e <ai_array_to_buffer_fmt+0x5a>
 8019386:	4a18      	ldr	r2, [pc, #96]	; (80193e8 <ai_array_to_buffer_fmt+0xa4>)
 8019388:	4293      	cmp	r3, r2
 801938a:	d0f4      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 801938c:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8019390:	4293      	cmp	r3, r2
 8019392:	d0f0      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 8019394:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8019398:	4293      	cmp	r3, r2
 801939a:	d10c      	bne.n	80193b6 <ai_array_to_buffer_fmt+0x72>
 801939c:	e7eb      	b.n	8019376 <ai_array_to_buffer_fmt+0x32>
 801939e:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80193a2:	4293      	cmp	r3, r2
 80193a4:	d0e7      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 80193a6:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80193aa:	4293      	cmp	r3, r2
 80193ac:	d0e3      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 80193ae:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80193b2:	4293      	cmp	r3, r2
 80193b4:	d0df      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 80193b6:	2340      	movs	r3, #64	; 0x40
 80193b8:	e7dd      	b.n	8019376 <ai_array_to_buffer_fmt+0x32>
 80193ba:	4b0c      	ldr	r3, [pc, #48]	; (80193ec <ai_array_to_buffer_fmt+0xa8>)
 80193bc:	4003      	ands	r3, r0
 80193be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80193c2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80193c6:	4318      	orrs	r0, r3
 80193c8:	4770      	bx	lr
 80193ca:	3a0f      	subs	r2, #15
 80193cc:	4293      	cmp	r3, r2
 80193ce:	d0d2      	beq.n	8019376 <ai_array_to_buffer_fmt+0x32>
 80193d0:	e7f1      	b.n	80193b6 <ai_array_to_buffer_fmt+0x72>
 80193d2:	bf00      	nop
 80193d4:	00060440 	.word	0x00060440
 80193d8:	00840447 	.word	0x00840447
 80193dc:	0084084f 	.word	0x0084084f
 80193e0:	00841040 	.word	0x00841040
 80193e4:	00040447 	.word	0x00040447
 80193e8:	0004084f 	.word	0x0004084f
 80193ec:	00803fff 	.word	0x00803fff

080193f0 <ai_array_get_byte_size>:
 80193f0:	b1c1      	cbz	r1, 8019424 <ai_array_get_byte_size+0x34>
 80193f2:	11c3      	asrs	r3, r0, #7
 80193f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80193f8:	fb01 f102 	mul.w	r1, r1, r2
 80193fc:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8019400:	3107      	adds	r1, #7
 8019402:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8019406:	f021 0107 	bic.w	r1, r1, #7
 801940a:	2804      	cmp	r0, #4
 801940c:	fa21 f102 	lsr.w	r1, r1, r2
 8019410:	d00a      	beq.n	8019428 <ai_array_get_byte_size+0x38>
 8019412:	2808      	cmp	r0, #8
 8019414:	d103      	bne.n	801941e <ai_array_get_byte_size+0x2e>
 8019416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801941a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801941e:	3107      	adds	r1, #7
 8019420:	08c8      	lsrs	r0, r1, #3
 8019422:	4770      	bx	lr
 8019424:	4608      	mov	r0, r1
 8019426:	4770      	bx	lr
 8019428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801942c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8019430:	3107      	adds	r1, #7
 8019432:	08c8      	lsrs	r0, r1, #3
 8019434:	4770      	bx	lr
 8019436:	bf00      	nop

08019438 <ai_array_get_data_byte_size>:
 8019438:	b161      	cbz	r1, 8019454 <ai_array_get_data_byte_size+0x1c>
 801943a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801943e:	fb01 f103 	mul.w	r1, r1, r3
 8019442:	3107      	adds	r1, #7
 8019444:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8019448:	f021 0107 	bic.w	r1, r1, #7
 801944c:	40c1      	lsrs	r1, r0
 801944e:	3107      	adds	r1, #7
 8019450:	08c8      	lsrs	r0, r1, #3
 8019452:	4770      	bx	lr
 8019454:	4608      	mov	r0, r1
 8019456:	4770      	bx	lr

08019458 <arm_mean_f32>:
 8019458:	b430      	push	{r4, r5}
 801945a:	088d      	lsrs	r5, r1, #2
 801945c:	d037      	beq.n	80194ce <arm_mean_f32+0x76>
 801945e:	f100 0310 	add.w	r3, r0, #16
 8019462:	462c      	mov	r4, r5
 8019464:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80194d4 <arm_mean_f32+0x7c>
 8019468:	ed13 7a04 	vldr	s14, [r3, #-16]
 801946c:	3c01      	subs	r4, #1
 801946e:	ed13 6a03 	vldr	s12, [r3, #-12]
 8019472:	f103 0310 	add.w	r3, r3, #16
 8019476:	ee77 7a87 	vadd.f32	s15, s15, s14
 801947a:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 801947e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8019482:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801948a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801948e:	d1eb      	bne.n	8019468 <arm_mean_f32+0x10>
 8019490:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019494:	f011 0303 	ands.w	r3, r1, #3
 8019498:	d00f      	beq.n	80194ba <arm_mean_f32+0x62>
 801949a:	ed90 7a00 	vldr	s14, [r0]
 801949e:	3b01      	subs	r3, #1
 80194a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80194a4:	d009      	beq.n	80194ba <arm_mean_f32+0x62>
 80194a6:	ed90 7a01 	vldr	s14, [r0, #4]
 80194aa:	2b01      	cmp	r3, #1
 80194ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80194b0:	d003      	beq.n	80194ba <arm_mean_f32+0x62>
 80194b2:	ed90 7a02 	vldr	s14, [r0, #8]
 80194b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80194ba:	ee07 1a10 	vmov	s14, r1
 80194be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80194c2:	bc30      	pop	{r4, r5}
 80194c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80194c8:	edc2 6a00 	vstr	s13, [r2]
 80194cc:	4770      	bx	lr
 80194ce:	eddf 7a01 	vldr	s15, [pc, #4]	; 80194d4 <arm_mean_f32+0x7c>
 80194d2:	e7df      	b.n	8019494 <arm_mean_f32+0x3c>
 80194d4:	00000000 	.word	0x00000000

080194d8 <arm_max_f32>:
 80194d8:	f101 3cff 	add.w	ip, r1, #4294967295
 80194dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194de:	4607      	mov	r7, r0
 80194e0:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80194e4:	ecf7 7a01 	vldmia	r7!, {s15}
 80194e8:	d05c      	beq.n	80195a4 <arm_max_f32+0xcc>
 80194ea:	2400      	movs	r4, #0
 80194ec:	3014      	adds	r0, #20
 80194ee:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80194f2:	4625      	mov	r5, r4
 80194f4:	ed10 7a04 	vldr	s14, [r0, #-16]
 80194f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80194fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019500:	d502      	bpl.n	8019508 <arm_max_f32+0x30>
 8019502:	eef0 7a47 	vmov.f32	s15, s14
 8019506:	1c65      	adds	r5, r4, #1
 8019508:	ed10 7a03 	vldr	s14, [r0, #-12]
 801950c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019514:	d502      	bpl.n	801951c <arm_max_f32+0x44>
 8019516:	eef0 7a47 	vmov.f32	s15, s14
 801951a:	1ca5      	adds	r5, r4, #2
 801951c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8019520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019528:	d502      	bpl.n	8019530 <arm_max_f32+0x58>
 801952a:	eef0 7a47 	vmov.f32	s15, s14
 801952e:	1ce5      	adds	r5, r4, #3
 8019530:	ed10 7a01 	vldr	s14, [r0, #-4]
 8019534:	3404      	adds	r4, #4
 8019536:	3010      	adds	r0, #16
 8019538:	eef4 7ac7 	vcmpe.f32	s15, s14
 801953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019540:	d502      	bpl.n	8019548 <arm_max_f32+0x70>
 8019542:	eef0 7a47 	vmov.f32	s15, s14
 8019546:	4625      	mov	r5, r4
 8019548:	42a6      	cmp	r6, r4
 801954a:	d1d3      	bne.n	80194f4 <arm_max_f32+0x1c>
 801954c:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8019550:	f01c 0003 	ands.w	r0, ip, #3
 8019554:	d01e      	beq.n	8019594 <arm_max_f32+0xbc>
 8019556:	ed97 7a00 	vldr	s14, [r7]
 801955a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801955e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019562:	dc1b      	bgt.n	801959c <arm_max_f32+0xc4>
 8019564:	3801      	subs	r0, #1
 8019566:	d015      	beq.n	8019594 <arm_max_f32+0xbc>
 8019568:	ed97 7a01 	vldr	s14, [r7, #4]
 801956c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019574:	d502      	bpl.n	801957c <arm_max_f32+0xa4>
 8019576:	eef0 7a47 	vmov.f32	s15, s14
 801957a:	1a0d      	subs	r5, r1, r0
 801957c:	2801      	cmp	r0, #1
 801957e:	d009      	beq.n	8019594 <arm_max_f32+0xbc>
 8019580:	ed97 7a02 	vldr	s14, [r7, #8]
 8019584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801958c:	dd02      	ble.n	8019594 <arm_max_f32+0xbc>
 801958e:	eef0 7a47 	vmov.f32	s15, s14
 8019592:	4665      	mov	r5, ip
 8019594:	edc2 7a00 	vstr	s15, [r2]
 8019598:	601d      	str	r5, [r3, #0]
 801959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801959c:	eef0 7a47 	vmov.f32	s15, s14
 80195a0:	1a0d      	subs	r5, r1, r0
 80195a2:	e7df      	b.n	8019564 <arm_max_f32+0x8c>
 80195a4:	4675      	mov	r5, lr
 80195a6:	e7d3      	b.n	8019550 <arm_max_f32+0x78>

080195a8 <arm_rfft_32_fast_init_f32>:
 80195a8:	b180      	cbz	r0, 80195cc <arm_rfft_32_fast_init_f32+0x24>
 80195aa:	4603      	mov	r3, r0
 80195ac:	2220      	movs	r2, #32
 80195ae:	2010      	movs	r0, #16
 80195b0:	4908      	ldr	r1, [pc, #32]	; (80195d4 <arm_rfft_32_fast_init_f32+0x2c>)
 80195b2:	b430      	push	{r4, r5}
 80195b4:	2514      	movs	r5, #20
 80195b6:	4c08      	ldr	r4, [pc, #32]	; (80195d8 <arm_rfft_32_fast_init_f32+0x30>)
 80195b8:	821a      	strh	r2, [r3, #16]
 80195ba:	4a08      	ldr	r2, [pc, #32]	; (80195dc <arm_rfft_32_fast_init_f32+0x34>)
 80195bc:	8018      	strh	r0, [r3, #0]
 80195be:	2000      	movs	r0, #0
 80195c0:	819d      	strh	r5, [r3, #12]
 80195c2:	615a      	str	r2, [r3, #20]
 80195c4:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80195c8:	bc30      	pop	{r4, r5}
 80195ca:	4770      	bx	lr
 80195cc:	f04f 30ff 	mov.w	r0, #4294967295
 80195d0:	4770      	bx	lr
 80195d2:	bf00      	nop
 80195d4:	0805ed54 	.word	0x0805ed54
 80195d8:	0803ea18 	.word	0x0803ea18
 80195dc:	0806fad4 	.word	0x0806fad4

080195e0 <arm_rfft_64_fast_init_f32>:
 80195e0:	b180      	cbz	r0, 8019604 <arm_rfft_64_fast_init_f32+0x24>
 80195e2:	4603      	mov	r3, r0
 80195e4:	2240      	movs	r2, #64	; 0x40
 80195e6:	2020      	movs	r0, #32
 80195e8:	4908      	ldr	r1, [pc, #32]	; (801960c <arm_rfft_64_fast_init_f32+0x2c>)
 80195ea:	b430      	push	{r4, r5}
 80195ec:	2530      	movs	r5, #48	; 0x30
 80195ee:	4c08      	ldr	r4, [pc, #32]	; (8019610 <arm_rfft_64_fast_init_f32+0x30>)
 80195f0:	821a      	strh	r2, [r3, #16]
 80195f2:	4a08      	ldr	r2, [pc, #32]	; (8019614 <arm_rfft_64_fast_init_f32+0x34>)
 80195f4:	8018      	strh	r0, [r3, #0]
 80195f6:	2000      	movs	r0, #0
 80195f8:	819d      	strh	r5, [r3, #12]
 80195fa:	615a      	str	r2, [r3, #20]
 80195fc:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8019600:	bc30      	pop	{r4, r5}
 8019602:	4770      	bx	lr
 8019604:	f04f 30ff 	mov.w	r0, #4294967295
 8019608:	4770      	bx	lr
 801960a:	bf00      	nop
 801960c:	080635d4 	.word	0x080635d4
 8019610:	08040b70 	.word	0x08040b70
 8019614:	08074354 	.word	0x08074354

08019618 <arm_rfft_256_fast_init_f32>:
 8019618:	b188      	cbz	r0, 801963e <arm_rfft_256_fast_init_f32+0x26>
 801961a:	4603      	mov	r3, r0
 801961c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019620:	2080      	movs	r0, #128	; 0x80
 8019622:	4908      	ldr	r1, [pc, #32]	; (8019644 <arm_rfft_256_fast_init_f32+0x2c>)
 8019624:	b430      	push	{r4, r5}
 8019626:	25d0      	movs	r5, #208	; 0xd0
 8019628:	4c07      	ldr	r4, [pc, #28]	; (8019648 <arm_rfft_256_fast_init_f32+0x30>)
 801962a:	821a      	strh	r2, [r3, #16]
 801962c:	4a07      	ldr	r2, [pc, #28]	; (801964c <arm_rfft_256_fast_init_f32+0x34>)
 801962e:	8018      	strh	r0, [r3, #0]
 8019630:	2000      	movs	r0, #0
 8019632:	819d      	strh	r5, [r3, #12]
 8019634:	615a      	str	r2, [r3, #20]
 8019636:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801963a:	bc30      	pop	{r4, r5}
 801963c:	4770      	bx	lr
 801963e:	f04f 30ff 	mov.w	r0, #4294967295
 8019642:	4770      	bx	lr
 8019644:	0805e954 	.word	0x0805e954
 8019648:	0803e878 	.word	0x0803e878
 801964c:	0806f6d4 	.word	0x0806f6d4

08019650 <arm_rfft_512_fast_init_f32>:
 8019650:	b198      	cbz	r0, 801967a <arm_rfft_512_fast_init_f32+0x2a>
 8019652:	4603      	mov	r3, r0
 8019654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019658:	f44f 7080 	mov.w	r0, #256	; 0x100
 801965c:	4908      	ldr	r1, [pc, #32]	; (8019680 <arm_rfft_512_fast_init_f32+0x30>)
 801965e:	b430      	push	{r4, r5}
 8019660:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8019664:	4c07      	ldr	r4, [pc, #28]	; (8019684 <arm_rfft_512_fast_init_f32+0x34>)
 8019666:	821a      	strh	r2, [r3, #16]
 8019668:	4a07      	ldr	r2, [pc, #28]	; (8019688 <arm_rfft_512_fast_init_f32+0x38>)
 801966a:	8018      	strh	r0, [r3, #0]
 801966c:	2000      	movs	r0, #0
 801966e:	819d      	strh	r5, [r3, #12]
 8019670:	615a      	str	r2, [r3, #20]
 8019672:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8019676:	bc30      	pop	{r4, r5}
 8019678:	4770      	bx	lr
 801967a:	f04f 30ff 	mov.w	r0, #4294967295
 801967e:	4770      	bx	lr
 8019680:	08062dd4 	.word	0x08062dd4
 8019684:	08040800 	.word	0x08040800
 8019688:	08073b54 	.word	0x08073b54

0801968c <arm_rfft_1024_fast_init_f32>:
 801968c:	b198      	cbz	r0, 80196b6 <arm_rfft_1024_fast_init_f32+0x2a>
 801968e:	4603      	mov	r3, r0
 8019690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019694:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019698:	4908      	ldr	r1, [pc, #32]	; (80196bc <arm_rfft_1024_fast_init_f32+0x30>)
 801969a:	b430      	push	{r4, r5}
 801969c:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80196a0:	4c07      	ldr	r4, [pc, #28]	; (80196c0 <arm_rfft_1024_fast_init_f32+0x34>)
 80196a2:	821a      	strh	r2, [r3, #16]
 80196a4:	4a07      	ldr	r2, [pc, #28]	; (80196c4 <arm_rfft_1024_fast_init_f32+0x38>)
 80196a6:	8018      	strh	r0, [r3, #0]
 80196a8:	2000      	movs	r0, #0
 80196aa:	819d      	strh	r5, [r3, #12]
 80196ac:	615a      	str	r2, [r3, #20]
 80196ae:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80196b2:	bc30      	pop	{r4, r5}
 80196b4:	4770      	bx	lr
 80196b6:	f04f 30ff 	mov.w	r0, #4294967295
 80196ba:	4770      	bx	lr
 80196bc:	0806b6d4 	.word	0x0806b6d4
 80196c0:	08040bd0 	.word	0x08040bd0
 80196c4:	0806c6d4 	.word	0x0806c6d4

080196c8 <arm_rfft_2048_fast_init_f32>:
 80196c8:	b198      	cbz	r0, 80196f2 <arm_rfft_2048_fast_init_f32+0x2a>
 80196ca:	4603      	mov	r3, r0
 80196cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80196d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80196d4:	4908      	ldr	r1, [pc, #32]	; (80196f8 <arm_rfft_2048_fast_init_f32+0x30>)
 80196d6:	b430      	push	{r4, r5}
 80196d8:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80196dc:	4c07      	ldr	r4, [pc, #28]	; (80196fc <arm_rfft_2048_fast_init_f32+0x34>)
 80196de:	821a      	strh	r2, [r3, #16]
 80196e0:	4a07      	ldr	r2, [pc, #28]	; (8019700 <arm_rfft_2048_fast_init_f32+0x38>)
 80196e2:	8018      	strh	r0, [r3, #0]
 80196e4:	2000      	movs	r0, #0
 80196e6:	819d      	strh	r5, [r3, #12]
 80196e8:	615a      	str	r2, [r3, #20]
 80196ea:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80196ee:	bc30      	pop	{r4, r5}
 80196f0:	4770      	bx	lr
 80196f2:	f04f 30ff 	mov.w	r0, #4294967295
 80196f6:	4770      	bx	lr
 80196f8:	0805c954 	.word	0x0805c954
 80196fc:	0803da68 	.word	0x0803da68
 8019700:	0806d6d4 	.word	0x0806d6d4

08019704 <arm_rfft_4096_fast_init_f32>:
 8019704:	b198      	cbz	r0, 801972e <arm_rfft_4096_fast_init_f32+0x2a>
 8019706:	4603      	mov	r3, r0
 8019708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801970c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019710:	4908      	ldr	r1, [pc, #32]	; (8019734 <arm_rfft_4096_fast_init_f32+0x30>)
 8019712:	b430      	push	{r4, r5}
 8019714:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8019718:	4c07      	ldr	r4, [pc, #28]	; (8019738 <arm_rfft_4096_fast_init_f32+0x34>)
 801971a:	821a      	strh	r2, [r3, #16]
 801971c:	4a07      	ldr	r2, [pc, #28]	; (801973c <arm_rfft_4096_fast_init_f32+0x38>)
 801971e:	8018      	strh	r0, [r3, #0]
 8019720:	2000      	movs	r0, #0
 8019722:	819d      	strh	r5, [r3, #12]
 8019724:	615a      	str	r2, [r3, #20]
 8019726:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801972a:	bc30      	pop	{r4, r5}
 801972c:	4770      	bx	lr
 801972e:	f04f 30ff 	mov.w	r0, #4294967295
 8019732:	4770      	bx	lr
 8019734:	0805edd4 	.word	0x0805edd4
 8019738:	0803ea40 	.word	0x0803ea40
 801973c:	0806fb54 	.word	0x0806fb54

08019740 <arm_rfft_fast_init_f32>:
 8019740:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019744:	d01f      	beq.n	8019786 <arm_rfft_fast_init_f32+0x46>
 8019746:	d90b      	bls.n	8019760 <arm_rfft_fast_init_f32+0x20>
 8019748:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 801974c:	d019      	beq.n	8019782 <arm_rfft_fast_init_f32+0x42>
 801974e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8019752:	d012      	beq.n	801977a <arm_rfft_fast_init_f32+0x3a>
 8019754:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019758:	d00d      	beq.n	8019776 <arm_rfft_fast_init_f32+0x36>
 801975a:	f04f 30ff 	mov.w	r0, #4294967295
 801975e:	4770      	bx	lr
 8019760:	2940      	cmp	r1, #64	; 0x40
 8019762:	d00c      	beq.n	801977e <arm_rfft_fast_init_f32+0x3e>
 8019764:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8019768:	d003      	beq.n	8019772 <arm_rfft_fast_init_f32+0x32>
 801976a:	2920      	cmp	r1, #32
 801976c:	d1f5      	bne.n	801975a <arm_rfft_fast_init_f32+0x1a>
 801976e:	4b07      	ldr	r3, [pc, #28]	; (801978c <arm_rfft_fast_init_f32+0x4c>)
 8019770:	4718      	bx	r3
 8019772:	4b07      	ldr	r3, [pc, #28]	; (8019790 <arm_rfft_fast_init_f32+0x50>)
 8019774:	4718      	bx	r3
 8019776:	4b07      	ldr	r3, [pc, #28]	; (8019794 <arm_rfft_fast_init_f32+0x54>)
 8019778:	4718      	bx	r3
 801977a:	4b07      	ldr	r3, [pc, #28]	; (8019798 <arm_rfft_fast_init_f32+0x58>)
 801977c:	4718      	bx	r3
 801977e:	4b07      	ldr	r3, [pc, #28]	; (801979c <arm_rfft_fast_init_f32+0x5c>)
 8019780:	e7f6      	b.n	8019770 <arm_rfft_fast_init_f32+0x30>
 8019782:	4b07      	ldr	r3, [pc, #28]	; (80197a0 <arm_rfft_fast_init_f32+0x60>)
 8019784:	e7f4      	b.n	8019770 <arm_rfft_fast_init_f32+0x30>
 8019786:	4b07      	ldr	r3, [pc, #28]	; (80197a4 <arm_rfft_fast_init_f32+0x64>)
 8019788:	e7f2      	b.n	8019770 <arm_rfft_fast_init_f32+0x30>
 801978a:	bf00      	nop
 801978c:	080195a9 	.word	0x080195a9
 8019790:	08019619 	.word	0x08019619
 8019794:	0801968d 	.word	0x0801968d
 8019798:	08019705 	.word	0x08019705
 801979c:	080195e1 	.word	0x080195e1
 80197a0:	080196c9 	.word	0x080196c9
 80197a4:	08019651 	.word	0x08019651

080197a8 <stage_rfft_f32>:
 80197a8:	b470      	push	{r4, r5, r6}
 80197aa:	edd1 7a00 	vldr	s15, [r1]
 80197ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80197b2:	ed91 7a01 	vldr	s14, [r1, #4]
 80197b6:	f101 0510 	add.w	r5, r1, #16
 80197ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80197be:	8806      	ldrh	r6, [r0, #0]
 80197c0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80197c4:	6943      	ldr	r3, [r0, #20]
 80197c6:	1e70      	subs	r0, r6, #1
 80197c8:	eeb0 4a46 	vmov.f32	s8, s12
 80197cc:	f102 0410 	add.w	r4, r2, #16
 80197d0:	3310      	adds	r3, #16
 80197d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80197d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80197da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197de:	3908      	subs	r1, #8
 80197e0:	ee26 7a86 	vmul.f32	s14, s13, s12
 80197e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80197e8:	ed82 7a00 	vstr	s14, [r2]
 80197ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80197f0:	ed15 6a02 	vldr	s12, [r5, #-8]
 80197f4:	3801      	subs	r0, #1
 80197f6:	ed91 7a02 	vldr	s14, [r1, #8]
 80197fa:	f105 0508 	add.w	r5, r5, #8
 80197fe:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019802:	f1a1 0108 	sub.w	r1, r1, #8
 8019806:	ee77 5a46 	vsub.f32	s11, s14, s12
 801980a:	edd1 4a05 	vldr	s9, [r1, #20]
 801980e:	ed55 7a03 	vldr	s15, [r5, #-12]
 8019812:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019816:	ed13 6a01 	vldr	s12, [r3, #-4]
 801981a:	f104 0408 	add.w	r4, r4, #8
 801981e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8019822:	f103 0308 	add.w	r3, r3, #8
 8019826:	ee34 5aa7 	vadd.f32	s10, s9, s15
 801982a:	ee66 5a25 	vmul.f32	s11, s12, s11
 801982e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8019832:	ee37 7a23 	vadd.f32	s14, s14, s7
 8019836:	ee66 6a85 	vmul.f32	s13, s13, s10
 801983a:	ee26 6a05 	vmul.f32	s12, s12, s10
 801983e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8019842:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019846:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801984a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801984e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019852:	ed04 7a04 	vstr	s14, [r4, #-16]
 8019856:	ed44 7a03 	vstr	s15, [r4, #-12]
 801985a:	d1c9      	bne.n	80197f0 <stage_rfft_f32+0x48>
 801985c:	bc70      	pop	{r4, r5, r6}
 801985e:	4770      	bx	lr

08019860 <merge_rfft_f32>:
 8019860:	b410      	push	{r4}
 8019862:	edd1 7a00 	vldr	s15, [r1]
 8019866:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 801986a:	edd1 6a01 	vldr	s13, [r1, #4]
 801986e:	8804      	ldrh	r4, [r0, #0]
 8019870:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019874:	6940      	ldr	r0, [r0, #20]
 8019876:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801987a:	3c01      	subs	r4, #1
 801987c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019880:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019884:	ed82 7a00 	vstr	s14, [r2]
 8019888:	edc2 7a01 	vstr	s15, [r2, #4]
 801988c:	b3dc      	cbz	r4, 8019906 <merge_rfft_f32+0xa6>
 801988e:	00e3      	lsls	r3, r4, #3
 8019890:	3010      	adds	r0, #16
 8019892:	3210      	adds	r2, #16
 8019894:	3b08      	subs	r3, #8
 8019896:	440b      	add	r3, r1
 8019898:	3110      	adds	r1, #16
 801989a:	ed11 6a02 	vldr	s12, [r1, #-8]
 801989e:	3c01      	subs	r4, #1
 80198a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80198a4:	f101 0108 	add.w	r1, r1, #8
 80198a8:	ed50 6a02 	vldr	s13, [r0, #-8]
 80198ac:	f1a3 0308 	sub.w	r3, r3, #8
 80198b0:	ee76 5a47 	vsub.f32	s11, s12, s14
 80198b4:	edd3 4a05 	vldr	s9, [r3, #20]
 80198b8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80198bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80198c0:	ed10 6a01 	vldr	s12, [r0, #-4]
 80198c4:	f102 0208 	add.w	r2, r2, #8
 80198c8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80198cc:	f100 0008 	add.w	r0, r0, #8
 80198d0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80198d4:	ee66 5a25 	vmul.f32	s11, s12, s11
 80198d8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80198dc:	ee37 7a63 	vsub.f32	s14, s14, s7
 80198e0:	ee66 6a85 	vmul.f32	s13, s13, s10
 80198e4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80198e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80198ec:	ee37 7a46 	vsub.f32	s14, s14, s12
 80198f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80198f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80198f8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80198fc:	ed02 7a04 	vstr	s14, [r2, #-16]
 8019900:	ed42 7a03 	vstr	s15, [r2, #-12]
 8019904:	d1c9      	bne.n	801989a <merge_rfft_f32+0x3a>
 8019906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801990a:	4770      	bx	lr

0801990c <arm_rfft_fast_f32>:
 801990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019910:	8a05      	ldrh	r5, [r0, #16]
 8019912:	4604      	mov	r4, r0
 8019914:	4617      	mov	r7, r2
 8019916:	461e      	mov	r6, r3
 8019918:	086d      	lsrs	r5, r5, #1
 801991a:	8005      	strh	r5, [r0, #0]
 801991c:	b14b      	cbz	r3, 8019932 <arm_rfft_fast_f32+0x26>
 801991e:	f7ff ff9f 	bl	8019860 <merge_rfft_f32>
 8019922:	4632      	mov	r2, r6
 8019924:	4639      	mov	r1, r7
 8019926:	4620      	mov	r0, r4
 8019928:	2301      	movs	r3, #1
 801992a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801992e:	f000 bb35 	b.w	8019f9c <arm_cfft_f32>
 8019932:	4688      	mov	r8, r1
 8019934:	461a      	mov	r2, r3
 8019936:	2301      	movs	r3, #1
 8019938:	f000 fb30 	bl	8019f9c <arm_cfft_f32>
 801993c:	463a      	mov	r2, r7
 801993e:	4641      	mov	r1, r8
 8019940:	4620      	mov	r0, r4
 8019942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019946:	f7ff bf2f 	b.w	80197a8 <stage_rfft_f32>
 801994a:	bf00      	nop

0801994c <arm_cfft_radix8by2_f32>:
 801994c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019950:	4607      	mov	r7, r0
 8019952:	4608      	mov	r0, r1
 8019954:	ed2d 8b06 	vpush	{d8-d10}
 8019958:	f8b7 c000 	ldrh.w	ip, [r7]
 801995c:	687a      	ldr	r2, [r7, #4]
 801995e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8019962:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8019966:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801996a:	f000 80ac 	beq.w	8019ac6 <arm_cfft_radix8by2_f32+0x17a>
 801996e:	008c      	lsls	r4, r1, #2
 8019970:	f100 0310 	add.w	r3, r0, #16
 8019974:	3210      	adds	r2, #16
 8019976:	f108 0610 	add.w	r6, r8, #16
 801997a:	3410      	adds	r4, #16
 801997c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8019980:	1905      	adds	r5, r0, r4
 8019982:	4444      	add	r4, r8
 8019984:	ed16 7a04 	vldr	s14, [r6, #-16]
 8019988:	3310      	adds	r3, #16
 801998a:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 801998e:	3510      	adds	r5, #16
 8019990:	ed56 0a03 	vldr	s1, [r6, #-12]
 8019994:	3210      	adds	r2, #16
 8019996:	ee74 9a87 	vadd.f32	s19, s9, s14
 801999a:	ed56 7a02 	vldr	s15, [r6, #-8]
 801999e:	ed56 2a01 	vldr	s5, [r6, #-4]
 80199a2:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80199a6:	ed54 5a04 	vldr	s11, [r4, #-16]
 80199aa:	3610      	adds	r6, #16
 80199ac:	ed14 5a03 	vldr	s10, [r4, #-12]
 80199b0:	3410      	adds	r4, #16
 80199b2:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 80199b6:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80199ba:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 80199be:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 80199c2:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 80199c6:	ee36 9aa5 	vadd.f32	s18, s13, s11
 80199ca:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 80199ce:	ee33 8a83 	vadd.f32	s16, s7, s6
 80199d2:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 80199d6:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80199da:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 80199de:	ee34 0a06 	vadd.f32	s0, s8, s12
 80199e2:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 80199e6:	ee77 aa20 	vadd.f32	s21, s14, s1
 80199ea:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 80199ee:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80199f2:	ee72 9a22 	vadd.f32	s19, s4, s5
 80199f6:	ee71 8a05 	vadd.f32	s17, s2, s10
 80199fa:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 80199fe:	ee37 7a60 	vsub.f32	s14, s14, s1
 8019a02:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 8019a06:	ee35 5a41 	vsub.f32	s10, s10, s2
 8019a0a:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 8019a0e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8019a12:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 8019a16:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 8019a1a:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8019a1e:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 8019a22:	ee72 7a62 	vsub.f32	s15, s4, s5
 8019a26:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 8019a2a:	ee73 2a63 	vsub.f32	s5, s6, s7
 8019a2e:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8019a32:	4563      	cmp	r3, ip
 8019a34:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8019a38:	ee24 3a84 	vmul.f32	s6, s9, s8
 8019a3c:	ee27 2a26 	vmul.f32	s4, s14, s13
 8019a40:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8019a44:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8019a48:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019a4c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8019a50:	ee65 6a26 	vmul.f32	s13, s10, s13
 8019a54:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019a58:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019a5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019a60:	ee33 4a02 	vadd.f32	s8, s6, s4
 8019a64:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8019a68:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 8019a6c:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 8019a70:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 8019a74:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8019a78:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8019a7c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8019a80:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8019a84:	ee27 4a87 	vmul.f32	s8, s15, s14
 8019a88:	ee61 5a87 	vmul.f32	s11, s3, s14
 8019a8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019a90:	ee22 5a87 	vmul.f32	s10, s5, s14
 8019a94:	ee26 7a07 	vmul.f32	s14, s12, s14
 8019a98:	ee26 6a26 	vmul.f32	s12, s12, s13
 8019a9c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8019aa0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8019aa4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019aa8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8019aac:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019ab0:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 8019ab4:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 8019ab8:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 8019abc:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 8019ac0:	f47f af60 	bne.w	8019984 <arm_cfft_radix8by2_f32+0x38>
 8019ac4:	687a      	ldr	r2, [r7, #4]
 8019ac6:	b28c      	uxth	r4, r1
 8019ac8:	2302      	movs	r3, #2
 8019aca:	4621      	mov	r1, r4
 8019acc:	f000 fb9a 	bl	801a204 <arm_radix8_butterfly_f32>
 8019ad0:	4621      	mov	r1, r4
 8019ad2:	687a      	ldr	r2, [r7, #4]
 8019ad4:	4640      	mov	r0, r8
 8019ad6:	2302      	movs	r3, #2
 8019ad8:	ecbd 8b06 	vpop	{d8-d10}
 8019adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae0:	f000 bb90 	b.w	801a204 <arm_radix8_butterfly_f32>

08019ae4 <arm_cfft_radix8by4_f32>:
 8019ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae8:	ed2d 8b04 	vpush	{d8-d9}
 8019aec:	8804      	ldrh	r4, [r0, #0]
 8019aee:	b08d      	sub	sp, #52	; 0x34
 8019af0:	6842      	ldr	r2, [r0, #4]
 8019af2:	460d      	mov	r5, r1
 8019af4:	0864      	lsrs	r4, r4, #1
 8019af6:	edd1 7a00 	vldr	s15, [r1]
 8019afa:	edd1 5a01 	vldr	s11, [r1, #4]
 8019afe:	00a3      	lsls	r3, r4, #2
 8019b00:	18ce      	adds	r6, r1, r3
 8019b02:	18f7      	adds	r7, r6, r3
 8019b04:	ed96 7a00 	vldr	s14, [r6]
 8019b08:	ed96 4a01 	vldr	s8, [r6, #4]
 8019b0c:	ed97 6a00 	vldr	s12, [r7]
 8019b10:	edd7 4a01 	vldr	s9, [r7, #4]
 8019b14:	ee77 6a86 	vadd.f32	s13, s15, s12
 8019b18:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019b1c:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8019b20:	ee77 2a26 	vadd.f32	s5, s14, s13
 8019b24:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8019b28:	ee74 3a27 	vadd.f32	s7, s8, s15
 8019b2c:	ee76 4a44 	vsub.f32	s9, s12, s8
 8019b30:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8019b34:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8019b38:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8019b3c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019b40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019b44:	0860      	lsrs	r0, r4, #1
 8019b46:	f102 0408 	add.w	r4, r2, #8
 8019b4a:	9405      	str	r4, [sp, #20]
 8019b4c:	f102 0410 	add.w	r4, r2, #16
 8019b50:	9009      	str	r0, [sp, #36]	; 0x24
 8019b52:	f1a0 0902 	sub.w	r9, r0, #2
 8019b56:	9403      	str	r4, [sp, #12]
 8019b58:	18fc      	adds	r4, r7, r3
 8019b5a:	f102 0018 	add.w	r0, r2, #24
 8019b5e:	ed94 5a00 	vldr	s10, [r4]
 8019b62:	ed94 3a01 	vldr	s6, [r4, #4]
 8019b66:	ee72 2a85 	vadd.f32	s5, s5, s10
 8019b6a:	9004      	str	r0, [sp, #16]
 8019b6c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8019b70:	4620      	mov	r0, r4
 8019b72:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8019b76:	9408      	str	r4, [sp, #32]
 8019b78:	ee12 ca90 	vmov	ip, s5
 8019b7c:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8019b80:	ee77 7a83 	vadd.f32	s15, s15, s6
 8019b84:	f845 cb08 	str.w	ip, [r5], #8
 8019b88:	ee13 ca90 	vmov	ip, s7
 8019b8c:	ed96 2a01 	vldr	s4, [r6, #4]
 8019b90:	ee74 4a05 	vadd.f32	s9, s8, s10
 8019b94:	edd4 2a01 	vldr	s5, [r4, #4]
 8019b98:	ee37 7a45 	vsub.f32	s14, s14, s10
 8019b9c:	ee36 6a02 	vadd.f32	s12, s12, s4
 8019ba0:	9500      	str	r5, [sp, #0]
 8019ba2:	460d      	mov	r5, r1
 8019ba4:	ee36 6a22 	vadd.f32	s12, s12, s5
 8019ba8:	ed81 6a01 	vstr	s12, [r1, #4]
 8019bac:	4631      	mov	r1, r6
 8019bae:	f841 cb08 	str.w	ip, [r1], #8
 8019bb2:	ee16 ca90 	vmov	ip, s13
 8019bb6:	9106      	str	r1, [sp, #24]
 8019bb8:	4639      	mov	r1, r7
 8019bba:	edc6 4a01 	vstr	s9, [r6, #4]
 8019bbe:	f841 cb08 	str.w	ip, [r1], #8
 8019bc2:	9102      	str	r1, [sp, #8]
 8019bc4:	ee17 1a90 	vmov	r1, s15
 8019bc8:	edc7 5a01 	vstr	s11, [r7, #4]
 8019bcc:	f840 1b08 	str.w	r1, [r0], #8
 8019bd0:	ea5f 0159 	movs.w	r1, r9, lsr #1
 8019bd4:	9001      	str	r0, [sp, #4]
 8019bd6:	ed84 7a01 	vstr	s14, [r4, #4]
 8019bda:	9107      	str	r1, [sp, #28]
 8019bdc:	f000 8135 	beq.w	8019e4a <arm_cfft_radix8by4_f32+0x366>
 8019be0:	3b0c      	subs	r3, #12
 8019be2:	f102 0920 	add.w	r9, r2, #32
 8019be6:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8019bea:	4622      	mov	r2, r4
 8019bec:	468b      	mov	fp, r1
 8019bee:	f105 0e10 	add.w	lr, r5, #16
 8019bf2:	4423      	add	r3, r4
 8019bf4:	f1a6 0c0c 	sub.w	ip, r6, #12
 8019bf8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8019bfc:	f106 0010 	add.w	r0, r6, #16
 8019c00:	f1a7 010c 	sub.w	r1, r7, #12
 8019c04:	f107 0510 	add.w	r5, r7, #16
 8019c08:	3c0c      	subs	r4, #12
 8019c0a:	3210      	adds	r2, #16
 8019c0c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8019c10:	f1bb 0b01 	subs.w	fp, fp, #1
 8019c14:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8019c18:	f1ac 0c08 	sub.w	ip, ip, #8
 8019c1c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8019c20:	f10e 0e08 	add.w	lr, lr, #8
 8019c24:	ee77 1a87 	vadd.f32	s3, s15, s14
 8019c28:	ed52 4a02 	vldr	s9, [r2, #-8]
 8019c2c:	ed55 5a01 	vldr	s11, [r5, #-4]
 8019c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c34:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8019c38:	f10a 0a08 	add.w	sl, sl, #8
 8019c3c:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8019c40:	ed10 3a01 	vldr	s6, [r0, #-4]
 8019c44:	ee37 4a25 	vadd.f32	s8, s14, s11
 8019c48:	ed52 3a01 	vldr	s7, [r2, #-4]
 8019c4c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019c50:	f100 0008 	add.w	r0, r0, #8
 8019c54:	ee36 6a24 	vadd.f32	s12, s12, s9
 8019c58:	f1a1 0108 	sub.w	r1, r1, #8
 8019c5c:	ee73 2a27 	vadd.f32	s5, s6, s15
 8019c60:	f109 0910 	add.w	r9, r9, #16
 8019c64:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8019c68:	f105 0508 	add.w	r5, r5, #8
 8019c6c:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8019c70:	ee37 5a66 	vsub.f32	s10, s14, s13
 8019c74:	ed50 5a03 	vldr	s11, [r0, #-12]
 8019c78:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8019c7c:	ed12 6a01 	vldr	s12, [r2, #-4]
 8019c80:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c84:	ee74 5a25 	vadd.f32	s11, s8, s11
 8019c88:	f1a4 0408 	sub.w	r4, r4, #8
 8019c8c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8019c90:	f108 0818 	add.w	r8, r8, #24
 8019c94:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8019c98:	f102 0208 	add.w	r2, r2, #8
 8019c9c:	ee75 5a86 	vadd.f32	s11, s11, s12
 8019ca0:	f1a3 0308 	sub.w	r3, r3, #8
 8019ca4:	ee34 6a63 	vsub.f32	s12, s8, s7
 8019ca8:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8019cac:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8019cb0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8019cb4:	ed94 4a04 	vldr	s8, [r4, #16]
 8019cb8:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8019cbc:	ed9c 3a04 	vldr	s6, [ip, #16]
 8019cc0:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019cc4:	edd1 7a04 	vldr	s15, [r1, #16]
 8019cc8:	ee73 6a04 	vadd.f32	s13, s6, s8
 8019ccc:	ed93 8a04 	vldr	s16, [r3, #16]
 8019cd0:	edd4 5a03 	vldr	s11, [r4, #12]
 8019cd4:	ee33 3a44 	vsub.f32	s6, s6, s8
 8019cd8:	ed9c 2a03 	vldr	s4, [ip, #12]
 8019cdc:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8019ce0:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8019ce4:	ed91 1a03 	vldr	s2, [r1, #12]
 8019ce8:	ee32 4a25 	vadd.f32	s8, s4, s11
 8019cec:	edd3 2a03 	vldr	s5, [r3, #12]
 8019cf0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019cf4:	ee70 0a88 	vadd.f32	s1, s1, s16
 8019cf8:	ee73 4a41 	vsub.f32	s9, s6, s2
 8019cfc:	ee32 2a65 	vsub.f32	s4, s4, s11
 8019d00:	edcc 0a04 	vstr	s1, [ip, #16]
 8019d04:	ee74 0a41 	vsub.f32	s1, s8, s2
 8019d08:	edd1 6a03 	vldr	s13, [r1, #12]
 8019d0c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8019d10:	ed93 9a03 	vldr	s18, [r3, #12]
 8019d14:	ee78 5a82 	vadd.f32	s11, s17, s4
 8019d18:	ee34 4a26 	vadd.f32	s8, s8, s13
 8019d1c:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8019d20:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8019d24:	ee34 4a09 	vadd.f32	s8, s8, s18
 8019d28:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8019d2c:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8019d30:	ed8c 4a03 	vstr	s8, [ip, #12]
 8019d34:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8019d38:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8019d3c:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8019d40:	ee60 2a01 	vmul.f32	s5, s0, s2
 8019d44:	ee64 6a81 	vmul.f32	s13, s9, s2
 8019d48:	ee20 8a04 	vmul.f32	s16, s0, s8
 8019d4c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8019d50:	ee25 0a01 	vmul.f32	s0, s10, s2
 8019d54:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019d58:	ee25 4a84 	vmul.f32	s8, s11, s8
 8019d5c:	ee65 5a81 	vmul.f32	s11, s11, s2
 8019d60:	ee35 5a62 	vsub.f32	s10, s10, s5
 8019d64:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8019d68:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8019d6c:	ee38 1a00 	vadd.f32	s2, s16, s0
 8019d70:	ed00 5a03 	vstr	s10, [r0, #-12]
 8019d74:	ed00 1a04 	vstr	s2, [r0, #-16]
 8019d78:	ed81 4a04 	vstr	s8, [r1, #16]
 8019d7c:	edc1 5a03 	vstr	s11, [r1, #12]
 8019d80:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 8019d84:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 8019d88:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8019d8c:	ee66 2a25 	vmul.f32	s5, s12, s11
 8019d90:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8019d94:	ee21 4a85 	vmul.f32	s8, s3, s10
 8019d98:	ee60 7a85 	vmul.f32	s15, s1, s10
 8019d9c:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8019da0:	ee26 6a05 	vmul.f32	s12, s12, s10
 8019da4:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8019da8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8019dac:	ee34 5a22 	vadd.f32	s10, s8, s5
 8019db0:	ee36 6a61 	vsub.f32	s12, s12, s3
 8019db4:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8019db8:	ed05 5a04 	vstr	s10, [r5, #-16]
 8019dbc:	ed05 6a03 	vstr	s12, [r5, #-12]
 8019dc0:	edc4 5a04 	vstr	s11, [r4, #16]
 8019dc4:	edc4 6a03 	vstr	s13, [r4, #12]
 8019dc8:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 8019dcc:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 8019dd0:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8019dd4:	ee67 5a27 	vmul.f32	s11, s14, s15
 8019dd8:	ee63 6a27 	vmul.f32	s13, s6, s15
 8019ddc:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019de0:	ee27 7a22 	vmul.f32	s14, s14, s5
 8019de4:	ee62 7a27 	vmul.f32	s15, s4, s15
 8019de8:	ee23 3a22 	vmul.f32	s6, s6, s5
 8019dec:	ee22 2a22 	vmul.f32	s4, s4, s5
 8019df0:	ee36 6a25 	vadd.f32	s12, s12, s11
 8019df4:	ee37 7a63 	vsub.f32	s14, s14, s7
 8019df8:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8019dfc:	ee77 7a83 	vadd.f32	s15, s15, s6
 8019e00:	ed02 6a04 	vstr	s12, [r2, #-16]
 8019e04:	ed02 7a03 	vstr	s14, [r2, #-12]
 8019e08:	ed83 2a04 	vstr	s4, [r3, #16]
 8019e0c:	edc3 7a03 	vstr	s15, [r3, #12]
 8019e10:	f47f aefc 	bne.w	8019c0c <arm_cfft_radix8by4_f32+0x128>
 8019e14:	9907      	ldr	r1, [sp, #28]
 8019e16:	9803      	ldr	r0, [sp, #12]
 8019e18:	00cb      	lsls	r3, r1, #3
 8019e1a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8019e1e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8019e22:	9103      	str	r1, [sp, #12]
 8019e24:	9900      	ldr	r1, [sp, #0]
 8019e26:	4419      	add	r1, r3
 8019e28:	9100      	str	r1, [sp, #0]
 8019e2a:	9905      	ldr	r1, [sp, #20]
 8019e2c:	4419      	add	r1, r3
 8019e2e:	9105      	str	r1, [sp, #20]
 8019e30:	9906      	ldr	r1, [sp, #24]
 8019e32:	4419      	add	r1, r3
 8019e34:	9106      	str	r1, [sp, #24]
 8019e36:	9902      	ldr	r1, [sp, #8]
 8019e38:	4419      	add	r1, r3
 8019e3a:	9102      	str	r1, [sp, #8]
 8019e3c:	9901      	ldr	r1, [sp, #4]
 8019e3e:	4419      	add	r1, r3
 8019e40:	9b04      	ldr	r3, [sp, #16]
 8019e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019e46:	9101      	str	r1, [sp, #4]
 8019e48:	9304      	str	r3, [sp, #16]
 8019e4a:	9b00      	ldr	r3, [sp, #0]
 8019e4c:	9902      	ldr	r1, [sp, #8]
 8019e4e:	ed93 7a00 	vldr	s14, [r3]
 8019e52:	edd1 7a00 	vldr	s15, [r1]
 8019e56:	9a06      	ldr	r2, [sp, #24]
 8019e58:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019e5c:	9d01      	ldr	r5, [sp, #4]
 8019e5e:	edd2 6a00 	vldr	s13, [r2]
 8019e62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019e66:	9b02      	ldr	r3, [sp, #8]
 8019e68:	ee76 3a86 	vadd.f32	s7, s13, s12
 8019e6c:	ed95 3a00 	vldr	s6, [r5]
 8019e70:	ed93 5a01 	vldr	s10, [r3, #4]
 8019e74:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019e78:	9b00      	ldr	r3, [sp, #0]
 8019e7a:	ee73 3a83 	vadd.f32	s7, s7, s6
 8019e7e:	edd5 2a01 	vldr	s5, [r5, #4]
 8019e82:	ed93 4a01 	vldr	s8, [r3, #4]
 8019e86:	ee36 6a43 	vsub.f32	s12, s12, s6
 8019e8a:	9b00      	ldr	r3, [sp, #0]
 8019e8c:	ee74 5a05 	vadd.f32	s11, s8, s10
 8019e90:	edd2 7a01 	vldr	s15, [r2, #4]
 8019e94:	edc3 3a00 	vstr	s7, [r3]
 8019e98:	ee34 4a45 	vsub.f32	s8, s8, s10
 8019e9c:	edd2 3a01 	vldr	s7, [r2, #4]
 8019ea0:	ee77 4a87 	vadd.f32	s9, s15, s14
 8019ea4:	ed95 2a01 	vldr	s4, [r5, #4]
 8019ea8:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8019eac:	9d05      	ldr	r5, [sp, #20]
 8019eae:	ee34 5a66 	vsub.f32	s10, s8, s13
 8019eb2:	9b00      	ldr	r3, [sp, #0]
 8019eb4:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8019eb8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8019ebc:	ee73 3a82 	vadd.f32	s7, s7, s4
 8019ec0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019ec2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8019ec6:	4621      	mov	r1, r4
 8019ec8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8019ecc:	edc3 3a01 	vstr	s7, [r3, #4]
 8019ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ed4:	edd5 3a00 	vldr	s7, [r5]
 8019ed8:	ee76 6a84 	vadd.f32	s13, s13, s8
 8019edc:	ed95 7a01 	vldr	s14, [r5, #4]
 8019ee0:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8019ee4:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8019ee8:	2304      	movs	r3, #4
 8019eea:	ee64 4a87 	vmul.f32	s9, s9, s14
 8019eee:	ee25 7a07 	vmul.f32	s14, s10, s14
 8019ef2:	ee25 5a23 	vmul.f32	s10, s10, s7
 8019ef6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8019efa:	ee34 7a07 	vadd.f32	s14, s8, s14
 8019efe:	ee35 5a64 	vsub.f32	s10, s10, s9
 8019f02:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8019f06:	ed82 7a00 	vstr	s14, [r2]
 8019f0a:	ed82 5a01 	vstr	s10, [r2, #4]
 8019f0e:	9a03      	ldr	r2, [sp, #12]
 8019f10:	edd2 4a01 	vldr	s9, [r2, #4]
 8019f14:	ed92 7a00 	vldr	s14, [r2]
 8019f18:	9a02      	ldr	r2, [sp, #8]
 8019f1a:	ee26 5a07 	vmul.f32	s10, s12, s14
 8019f1e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019f22:	ee25 7a87 	vmul.f32	s14, s11, s14
 8019f26:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8019f2a:	ee37 6a46 	vsub.f32	s12, s14, s12
 8019f2e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8019f32:	edc2 5a00 	vstr	s11, [r2]
 8019f36:	ed82 6a01 	vstr	s12, [r2, #4]
 8019f3a:	9a04      	ldr	r2, [sp, #16]
 8019f3c:	9d01      	ldr	r5, [sp, #4]
 8019f3e:	edd2 5a01 	vldr	s11, [r2, #4]
 8019f42:	ed92 7a00 	vldr	s14, [r2]
 8019f46:	ee27 6a87 	vmul.f32	s12, s15, s14
 8019f4a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8019f4e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019f52:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8019f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f5a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019f5e:	edc5 7a01 	vstr	s15, [r5, #4]
 8019f62:	edc5 6a00 	vstr	s13, [r5]
 8019f66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019f68:	686a      	ldr	r2, [r5, #4]
 8019f6a:	f000 f94b 	bl	801a204 <arm_radix8_butterfly_f32>
 8019f6e:	4630      	mov	r0, r6
 8019f70:	4621      	mov	r1, r4
 8019f72:	686a      	ldr	r2, [r5, #4]
 8019f74:	2304      	movs	r3, #4
 8019f76:	f000 f945 	bl	801a204 <arm_radix8_butterfly_f32>
 8019f7a:	4638      	mov	r0, r7
 8019f7c:	4621      	mov	r1, r4
 8019f7e:	686a      	ldr	r2, [r5, #4]
 8019f80:	2304      	movs	r3, #4
 8019f82:	f000 f93f 	bl	801a204 <arm_radix8_butterfly_f32>
 8019f86:	4621      	mov	r1, r4
 8019f88:	686a      	ldr	r2, [r5, #4]
 8019f8a:	2304      	movs	r3, #4
 8019f8c:	9808      	ldr	r0, [sp, #32]
 8019f8e:	b00d      	add	sp, #52	; 0x34
 8019f90:	ecbd 8b04 	vpop	{d8-d9}
 8019f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f98:	f000 b934 	b.w	801a204 <arm_radix8_butterfly_f32>

08019f9c <arm_cfft_f32>:
 8019f9c:	2a01      	cmp	r2, #1
 8019f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fa2:	4606      	mov	r6, r0
 8019fa4:	4617      	mov	r7, r2
 8019fa6:	460c      	mov	r4, r1
 8019fa8:	4698      	mov	r8, r3
 8019faa:	8805      	ldrh	r5, [r0, #0]
 8019fac:	d055      	beq.n	801a05a <arm_cfft_f32+0xbe>
 8019fae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8019fb2:	d061      	beq.n	801a078 <arm_cfft_f32+0xdc>
 8019fb4:	d916      	bls.n	8019fe4 <arm_cfft_f32+0x48>
 8019fb6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8019fba:	d01a      	beq.n	8019ff2 <arm_cfft_f32+0x56>
 8019fbc:	d946      	bls.n	801a04c <arm_cfft_f32+0xb0>
 8019fbe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8019fc2:	d059      	beq.n	801a078 <arm_cfft_f32+0xdc>
 8019fc4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8019fc8:	d105      	bne.n	8019fd6 <arm_cfft_f32+0x3a>
 8019fca:	2301      	movs	r3, #1
 8019fcc:	6872      	ldr	r2, [r6, #4]
 8019fce:	4629      	mov	r1, r5
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	f000 f917 	bl	801a204 <arm_radix8_butterfly_f32>
 8019fd6:	f1b8 0f00 	cmp.w	r8, #0
 8019fda:	d111      	bne.n	801a000 <arm_cfft_f32+0x64>
 8019fdc:	2f01      	cmp	r7, #1
 8019fde:	d016      	beq.n	801a00e <arm_cfft_f32+0x72>
 8019fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fe4:	2d20      	cmp	r5, #32
 8019fe6:	d047      	beq.n	801a078 <arm_cfft_f32+0xdc>
 8019fe8:	d934      	bls.n	801a054 <arm_cfft_f32+0xb8>
 8019fea:	2d40      	cmp	r5, #64	; 0x40
 8019fec:	d0ed      	beq.n	8019fca <arm_cfft_f32+0x2e>
 8019fee:	2d80      	cmp	r5, #128	; 0x80
 8019ff0:	d1f1      	bne.n	8019fd6 <arm_cfft_f32+0x3a>
 8019ff2:	4621      	mov	r1, r4
 8019ff4:	4630      	mov	r0, r6
 8019ff6:	f7ff fca9 	bl	801994c <arm_cfft_radix8by2_f32>
 8019ffa:	f1b8 0f00 	cmp.w	r8, #0
 8019ffe:	d0ed      	beq.n	8019fdc <arm_cfft_f32+0x40>
 801a000:	68b2      	ldr	r2, [r6, #8]
 801a002:	4620      	mov	r0, r4
 801a004:	89b1      	ldrh	r1, [r6, #12]
 801a006:	f000 f88b 	bl	801a120 <arm_bitreversal_32>
 801a00a:	2f01      	cmp	r7, #1
 801a00c:	d1e8      	bne.n	8019fe0 <arm_cfft_f32+0x44>
 801a00e:	ee07 5a90 	vmov	s15, r5
 801a012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a01a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a01e:	2d00      	cmp	r5, #0
 801a020:	d0de      	beq.n	8019fe0 <arm_cfft_f32+0x44>
 801a022:	f104 0108 	add.w	r1, r4, #8
 801a026:	2300      	movs	r3, #0
 801a028:	ed11 7a02 	vldr	s14, [r1, #-8]
 801a02c:	3301      	adds	r3, #1
 801a02e:	ed51 7a01 	vldr	s15, [r1, #-4]
 801a032:	3108      	adds	r1, #8
 801a034:	429d      	cmp	r5, r3
 801a036:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a03a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a03e:	ed01 7a04 	vstr	s14, [r1, #-16]
 801a042:	ed41 7a03 	vstr	s15, [r1, #-12]
 801a046:	d1ef      	bne.n	801a028 <arm_cfft_f32+0x8c>
 801a048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a04c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801a050:	d0bb      	beq.n	8019fca <arm_cfft_f32+0x2e>
 801a052:	e7c0      	b.n	8019fd6 <arm_cfft_f32+0x3a>
 801a054:	2d10      	cmp	r5, #16
 801a056:	d0cc      	beq.n	8019ff2 <arm_cfft_f32+0x56>
 801a058:	e7bd      	b.n	8019fd6 <arm_cfft_f32+0x3a>
 801a05a:	b195      	cbz	r5, 801a082 <arm_cfft_f32+0xe6>
 801a05c:	f101 030c 	add.w	r3, r1, #12
 801a060:	2200      	movs	r2, #0
 801a062:	ed53 7a02 	vldr	s15, [r3, #-8]
 801a066:	3201      	adds	r2, #1
 801a068:	3308      	adds	r3, #8
 801a06a:	eef1 7a67 	vneg.f32	s15, s15
 801a06e:	4295      	cmp	r5, r2
 801a070:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a074:	d1f5      	bne.n	801a062 <arm_cfft_f32+0xc6>
 801a076:	e79a      	b.n	8019fae <arm_cfft_f32+0x12>
 801a078:	4621      	mov	r1, r4
 801a07a:	4630      	mov	r0, r6
 801a07c:	f7ff fd32 	bl	8019ae4 <arm_cfft_radix8by4_f32>
 801a080:	e7a9      	b.n	8019fd6 <arm_cfft_f32+0x3a>
 801a082:	2b00      	cmp	r3, #0
 801a084:	d0ac      	beq.n	8019fe0 <arm_cfft_f32+0x44>
 801a086:	e7bb      	b.n	801a000 <arm_cfft_f32+0x64>

0801a088 <arm_dct4_init_f32>:
 801a088:	b570      	push	{r4, r5, r6, lr}
 801a08a:	b082      	sub	sp, #8
 801a08c:	460c      	mov	r4, r1
 801a08e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a092:	4611      	mov	r1, r2
 801a094:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801a098:	ed80 0a01 	vstr	s0, [r0, #4]
 801a09c:	8003      	strh	r3, [r0, #0]
 801a09e:	8042      	strh	r2, [r0, #2]
 801a0a0:	e9c0 4104 	strd	r4, r1, [r0, #16]
 801a0a4:	d020      	beq.n	801a0e8 <arm_dct4_init_f32+0x60>
 801a0a6:	d914      	bls.n	801a0d2 <arm_dct4_init_f32+0x4a>
 801a0a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a0ac:	d022      	beq.n	801a0f4 <arm_dct4_init_f32+0x6c>
 801a0ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a0b2:	d116      	bne.n	801a0e2 <arm_dct4_init_f32+0x5a>
 801a0b4:	4e12      	ldr	r6, [pc, #72]	; (801a100 <arm_dct4_init_f32+0x78>)
 801a0b6:	2500      	movs	r5, #0
 801a0b8:	4a12      	ldr	r2, [pc, #72]	; (801a104 <arm_dct4_init_f32+0x7c>)
 801a0ba:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a0be:	2601      	movs	r6, #1
 801a0c0:	461a      	mov	r2, r3
 801a0c2:	4620      	mov	r0, r4
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	9600      	str	r6, [sp, #0]
 801a0c8:	f000 fb5e 	bl	801a788 <arm_rfft_init_f32>
 801a0cc:	4628      	mov	r0, r5
 801a0ce:	b002      	add	sp, #8
 801a0d0:	bd70      	pop	{r4, r5, r6, pc}
 801a0d2:	2b80      	cmp	r3, #128	; 0x80
 801a0d4:	d105      	bne.n	801a0e2 <arm_dct4_init_f32+0x5a>
 801a0d6:	4e0c      	ldr	r6, [pc, #48]	; (801a108 <arm_dct4_init_f32+0x80>)
 801a0d8:	2500      	movs	r5, #0
 801a0da:	4a0c      	ldr	r2, [pc, #48]	; (801a10c <arm_dct4_init_f32+0x84>)
 801a0dc:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a0e0:	e7ed      	b.n	801a0be <arm_dct4_init_f32+0x36>
 801a0e2:	f04f 35ff 	mov.w	r5, #4294967295
 801a0e6:	e7ea      	b.n	801a0be <arm_dct4_init_f32+0x36>
 801a0e8:	4e09      	ldr	r6, [pc, #36]	; (801a110 <arm_dct4_init_f32+0x88>)
 801a0ea:	2500      	movs	r5, #0
 801a0ec:	4a09      	ldr	r2, [pc, #36]	; (801a114 <arm_dct4_init_f32+0x8c>)
 801a0ee:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a0f2:	e7e4      	b.n	801a0be <arm_dct4_init_f32+0x36>
 801a0f4:	4e08      	ldr	r6, [pc, #32]	; (801a118 <arm_dct4_init_f32+0x90>)
 801a0f6:	2500      	movs	r5, #0
 801a0f8:	4a08      	ldr	r2, [pc, #32]	; (801a11c <arm_dct4_init_f32+0x94>)
 801a0fa:	e9c0 6202 	strd	r6, r2, [r0, #8]
 801a0fe:	e7de      	b.n	801a0be <arm_dct4_init_f32+0x36>
 801a100:	0802da68 	.word	0x0802da68
 801a104:	08044150 	.word	0x08044150
 801a108:	08028668 	.word	0x08028668
 801a10c:	08041750 	.word	0x08041750
 801a110:	0802ca68 	.word	0x0802ca68
 801a114:	08043950 	.word	0x08043950
 801a118:	08028a68 	.word	0x08028a68
 801a11c:	08041950 	.word	0x08041950

0801a120 <arm_bitreversal_32>:
 801a120:	b321      	cbz	r1, 801a16c <arm_bitreversal_32+0x4c>
 801a122:	f102 0c02 	add.w	ip, r2, #2
 801a126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a12a:	4690      	mov	r8, r2
 801a12c:	2500      	movs	r5, #0
 801a12e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 801a132:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 801a136:	3502      	adds	r5, #2
 801a138:	08a4      	lsrs	r4, r4, #2
 801a13a:	089b      	lsrs	r3, r3, #2
 801a13c:	428d      	cmp	r5, r1
 801a13e:	ea4f 0784 	mov.w	r7, r4, lsl #2
 801a142:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 801a146:	ea4f 0683 	mov.w	r6, r3, lsl #2
 801a14a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801a14e:	f107 0704 	add.w	r7, r7, #4
 801a152:	f106 0604 	add.w	r6, r6, #4
 801a156:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 801a15a:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 801a15e:	59c4      	ldr	r4, [r0, r7]
 801a160:	5983      	ldr	r3, [r0, r6]
 801a162:	51c3      	str	r3, [r0, r7]
 801a164:	5184      	str	r4, [r0, r6]
 801a166:	d3e2      	bcc.n	801a12e <arm_bitreversal_32+0xe>
 801a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a16c:	4770      	bx	lr
 801a16e:	bf00      	nop

0801a170 <arm_cos_f32>:
 801a170:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a1f8 <arm_cos_f32+0x88>
 801a174:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 801a178:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a17c:	ee30 0a07 	vadd.f32	s0, s0, s14
 801a180:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a184:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a18c:	d504      	bpl.n	801a198 <arm_cos_f32+0x28>
 801a18e:	ee17 3a90 	vmov	r3, s15
 801a192:	3b01      	subs	r3, #1
 801a194:	ee07 3a90 	vmov	s15, r3
 801a198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a19c:	eddf 6a17 	vldr	s13, [pc, #92]	; 801a1fc <arm_cos_f32+0x8c>
 801a1a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a1a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a1a8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801a1ac:	ee17 3a10 	vmov	r3, s14
 801a1b0:	b29b      	uxth	r3, r3
 801a1b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1b6:	d21a      	bcs.n	801a1ee <arm_cos_f32+0x7e>
 801a1b8:	ee07 3a10 	vmov	s14, r3
 801a1bc:	1c59      	adds	r1, r3, #1
 801a1be:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801a1c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a1c6:	4a0e      	ldr	r2, [pc, #56]	; (801a200 <arm_cos_f32+0x90>)
 801a1c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a1cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a1d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a1d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a1d8:	edd3 6a00 	vldr	s13, [r3]
 801a1dc:	ed92 7a00 	vldr	s14, [r2]
 801a1e0:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a1e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a1e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a1ec:	4770      	bx	lr
 801a1ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a1f2:	2101      	movs	r1, #1
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	e7e6      	b.n	801a1c6 <arm_cos_f32+0x56>
 801a1f8:	3e22f983 	.word	0x3e22f983
 801a1fc:	44000000 	.word	0x44000000
 801a200:	0805c150 	.word	0x0805c150

0801a204 <arm_radix8_butterfly_f32>:
 801a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a208:	ed2d 8b10 	vpush	{d8-d15}
 801a20c:	b095      	sub	sp, #84	; 0x54
 801a20e:	468a      	mov	sl, r1
 801a210:	468b      	mov	fp, r1
 801a212:	eddf 8abb 	vldr	s17, [pc, #748]	; 801a500 <arm_radix8_butterfly_f32+0x2fc>
 801a216:	9012      	str	r0, [sp, #72]	; 0x48
 801a218:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801a21c:	4603      	mov	r3, r0
 801a21e:	3304      	adds	r3, #4
 801a220:	9313      	str	r3, [sp, #76]	; 0x4c
 801a222:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801a226:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a22c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 801a230:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801a234:	920f      	str	r2, [sp, #60]	; 0x3c
 801a236:	9303      	str	r3, [sp, #12]
 801a238:	0153      	lsls	r3, r2, #5
 801a23a:	0114      	lsls	r4, r2, #4
 801a23c:	eba9 0002 	sub.w	r0, r9, r2
 801a240:	18ce      	adds	r6, r1, r3
 801a242:	9302      	str	r3, [sp, #8]
 801a244:	0097      	lsls	r7, r2, #2
 801a246:	4613      	mov	r3, r2
 801a248:	eb06 0509 	add.w	r5, r6, r9
 801a24c:	9004      	str	r0, [sp, #16]
 801a24e:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 801a252:	1bd2      	subs	r2, r2, r7
 801a254:	eb05 0109 	add.w	r1, r5, r9
 801a258:	441f      	add	r7, r3
 801a25a:	9405      	str	r4, [sp, #20]
 801a25c:	f109 0004 	add.w	r0, r9, #4
 801a260:	9101      	str	r1, [sp, #4]
 801a262:	1d21      	adds	r1, r4, #4
 801a264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a266:	f04f 0e00 	mov.w	lr, #0
 801a26a:	9c01      	ldr	r4, [sp, #4]
 801a26c:	4418      	add	r0, r3
 801a26e:	4419      	add	r1, r3
 801a270:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801a274:	9b02      	ldr	r3, [sp, #8]
 801a276:	00fc      	lsls	r4, r7, #3
 801a278:	18d7      	adds	r7, r2, r3
 801a27a:	9b04      	ldr	r3, [sp, #16]
 801a27c:	9406      	str	r4, [sp, #24]
 801a27e:	00db      	lsls	r3, r3, #3
 801a280:	9c01      	ldr	r4, [sp, #4]
 801a282:	9307      	str	r3, [sp, #28]
 801a284:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801a288:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a28c:	9304      	str	r3, [sp, #16]
 801a28e:	9b03      	ldr	r3, [sp, #12]
 801a290:	edd6 6a00 	vldr	s13, [r6]
 801a294:	44de      	add	lr, fp
 801a296:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801a29a:	ed94 7a00 	vldr	s14, [r4]
 801a29e:	45f2      	cmp	sl, lr
 801a2a0:	ed10 6a01 	vldr	s12, [r0, #-4]
 801a2a4:	ee37 2aa6 	vadd.f32	s4, s15, s13
 801a2a8:	edd5 2a00 	vldr	s5, [r5]
 801a2ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a2b0:	edd7 3a00 	vldr	s7, [r7]
 801a2b4:	ed11 5a01 	vldr	s10, [r1, #-4]
 801a2b8:	ee36 3a22 	vadd.f32	s6, s12, s5
 801a2bc:	edd2 6a00 	vldr	s13, [r2]
 801a2c0:	ee75 5a07 	vadd.f32	s11, s10, s14
 801a2c4:	ee36 4aa3 	vadd.f32	s8, s13, s7
 801a2c8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801a2cc:	ee72 4a25 	vadd.f32	s9, s4, s11
 801a2d0:	ee73 3a04 	vadd.f32	s7, s6, s8
 801a2d4:	ee35 5a47 	vsub.f32	s10, s10, s14
 801a2d8:	ee36 7a62 	vsub.f32	s14, s12, s5
 801a2dc:	ee32 2a65 	vsub.f32	s4, s4, s11
 801a2e0:	ee74 5aa3 	vadd.f32	s11, s9, s7
 801a2e4:	ee74 4ae3 	vsub.f32	s9, s9, s7
 801a2e8:	ee37 6a66 	vsub.f32	s12, s14, s13
 801a2ec:	ed4c 5a01 	vstr	s11, [ip, #-4]
 801a2f0:	ee33 3a44 	vsub.f32	s6, s6, s8
 801a2f4:	edc6 4a00 	vstr	s9, [r6]
 801a2f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a2fc:	ed97 4a01 	vldr	s8, [r7, #4]
 801a300:	ee66 6a28 	vmul.f32	s13, s12, s17
 801a304:	edd0 5a00 	vldr	s11, [r0]
 801a308:	ed95 6a01 	vldr	s12, [r5, #4]
 801a30c:	ee27 7a28 	vmul.f32	s14, s14, s17
 801a310:	edd2 3a01 	vldr	s7, [r2, #4]
 801a314:	ee77 2aa6 	vadd.f32	s5, s15, s13
 801a318:	ee75 4ac6 	vsub.f32	s9, s11, s12
 801a31c:	ed96 1a01 	vldr	s2, [r6, #4]
 801a320:	ee33 0ac4 	vsub.f32	s0, s7, s8
 801a324:	edd4 0a01 	vldr	s1, [r4, #4]
 801a328:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a32c:	eddc 6a00 	vldr	s13, [ip]
 801a330:	ee75 5a86 	vadd.f32	s11, s11, s12
 801a334:	ed91 6a00 	vldr	s12, [r1]
 801a338:	ee73 3a84 	vadd.f32	s7, s7, s8
 801a33c:	ee74 1a80 	vadd.f32	s3, s9, s0
 801a340:	ee36 4a81 	vadd.f32	s8, s13, s2
 801a344:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801a348:	ee76 6ac1 	vsub.f32	s13, s13, s2
 801a34c:	ee36 1a20 	vadd.f32	s2, s12, s1
 801a350:	ee61 1aa8 	vmul.f32	s3, s3, s17
 801a354:	ee36 6a60 	vsub.f32	s12, s12, s1
 801a358:	ee64 4aa8 	vmul.f32	s9, s9, s17
 801a35c:	ee75 0aa3 	vadd.f32	s1, s11, s7
 801a360:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801a364:	ee74 3a01 	vadd.f32	s7, s8, s2
 801a368:	ee34 4a41 	vsub.f32	s8, s8, s2
 801a36c:	ee36 1a21 	vadd.f32	s2, s12, s3
 801a370:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801a374:	ee36 6a61 	vsub.f32	s12, s12, s3
 801a378:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801a37c:	ee76 1aa4 	vadd.f32	s3, s13, s9
 801a380:	ed8c 0a00 	vstr	s0, [ip]
 801a384:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a388:	449c      	add	ip, r3
 801a38a:	ee75 4a07 	vadd.f32	s9, s10, s14
 801a38e:	edc6 3a01 	vstr	s7, [r6, #4]
 801a392:	ee35 7a47 	vsub.f32	s14, s10, s14
 801a396:	441e      	add	r6, r3
 801a398:	ee32 5a25 	vadd.f32	s10, s4, s11
 801a39c:	ee72 5a65 	vsub.f32	s11, s4, s11
 801a3a0:	ee72 3a81 	vadd.f32	s7, s5, s2
 801a3a4:	ed01 5a01 	vstr	s10, [r1, #-4]
 801a3a8:	ee34 2a43 	vsub.f32	s4, s8, s6
 801a3ac:	edc4 5a00 	vstr	s11, [r4]
 801a3b0:	ee37 5a86 	vadd.f32	s10, s15, s12
 801a3b4:	ee71 5ae4 	vsub.f32	s11, s3, s9
 801a3b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a3bc:	ed81 2a00 	vstr	s4, [r1]
 801a3c0:	ee36 6ac7 	vsub.f32	s12, s13, s14
 801a3c4:	4419      	add	r1, r3
 801a3c6:	ee33 4a04 	vadd.f32	s8, s6, s8
 801a3ca:	ee72 2ac1 	vsub.f32	s5, s5, s2
 801a3ce:	ee74 4aa1 	vadd.f32	s9, s9, s3
 801a3d2:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a3d6:	ed84 4a01 	vstr	s8, [r4, #4]
 801a3da:	ed40 3a01 	vstr	s7, [r0, #-4]
 801a3de:	441c      	add	r4, r3
 801a3e0:	edc7 2a00 	vstr	s5, [r7]
 801a3e4:	ed85 5a00 	vstr	s10, [r5]
 801a3e8:	edc2 7a00 	vstr	s15, [r2]
 801a3ec:	edc0 5a00 	vstr	s11, [r0]
 801a3f0:	4418      	add	r0, r3
 801a3f2:	edc7 4a01 	vstr	s9, [r7, #4]
 801a3f6:	441f      	add	r7, r3
 801a3f8:	ed85 6a01 	vstr	s12, [r5, #4]
 801a3fc:	441d      	add	r5, r3
 801a3fe:	ed82 7a01 	vstr	s14, [r2, #4]
 801a402:	441a      	add	r2, r3
 801a404:	f63f af44 	bhi.w	801a290 <arm_radix8_butterfly_f32+0x8c>
 801a408:	469c      	mov	ip, r3
 801a40a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a40c:	2b07      	cmp	r3, #7
 801a40e:	f240 81b6 	bls.w	801a77e <arm_radix8_butterfly_f32+0x57a>
 801a412:	9a02      	ldr	r2, [sp, #8]
 801a414:	f109 0608 	add.w	r6, r9, #8
 801a418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a41a:	f108 0408 	add.w	r4, r8, #8
 801a41e:	3208      	adds	r2, #8
 801a420:	9f06      	ldr	r7, [sp, #24]
 801a422:	9d04      	ldr	r5, [sp, #16]
 801a424:	189a      	adds	r2, r3, r2
 801a426:	3708      	adds	r7, #8
 801a428:	3508      	adds	r5, #8
 801a42a:	9807      	ldr	r0, [sp, #28]
 801a42c:	920c      	str	r2, [sp, #48]	; 0x30
 801a42e:	199a      	adds	r2, r3, r6
 801a430:	9905      	ldr	r1, [sp, #20]
 801a432:	3008      	adds	r0, #8
 801a434:	920b      	str	r2, [sp, #44]	; 0x2c
 801a436:	19da      	adds	r2, r3, r7
 801a438:	310c      	adds	r1, #12
 801a43a:	920a      	str	r2, [sp, #40]	; 0x28
 801a43c:	195a      	adds	r2, r3, r5
 801a43e:	9209      	str	r2, [sp, #36]	; 0x24
 801a440:	191a      	adds	r2, r3, r4
 801a442:	9208      	str	r2, [sp, #32]
 801a444:	181a      	adds	r2, r3, r0
 801a446:	9207      	str	r2, [sp, #28]
 801a448:	185a      	adds	r2, r3, r1
 801a44a:	330c      	adds	r3, #12
 801a44c:	9205      	str	r2, [sp, #20]
 801a44e:	9306      	str	r3, [sp, #24]
 801a450:	2301      	movs	r3, #1
 801a452:	9304      	str	r3, [sp, #16]
 801a454:	2300      	movs	r3, #0
 801a456:	930d      	str	r3, [sp, #52]	; 0x34
 801a458:	4663      	mov	r3, ip
 801a45a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a45c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a45e:	f8dd c014 	ldr.w	ip, [sp, #20]
 801a462:	440a      	add	r2, r1
 801a464:	9f06      	ldr	r7, [sp, #24]
 801a466:	9e07      	ldr	r6, [sp, #28]
 801a468:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801a46c:	920d      	str	r2, [sp, #52]	; 0x34
 801a46e:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 801a472:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a474:	9d08      	ldr	r5, [sp, #32]
 801a476:	4442      	add	r2, r8
 801a478:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a47a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a47c:	eb02 0108 	add.w	r1, r2, r8
 801a480:	ed92 ea00 	vldr	s28, [r2]
 801a484:	eb01 0208 	add.w	r2, r1, r8
 801a488:	edd1 da00 	vldr	s27, [r1]
 801a48c:	eb02 0108 	add.w	r1, r2, r8
 801a490:	ed92 da00 	vldr	s26, [r2]
 801a494:	eb01 0208 	add.w	r2, r1, r8
 801a498:	edd1 ca00 	vldr	s25, [r1]
 801a49c:	eb02 0108 	add.w	r1, r2, r8
 801a4a0:	ed92 ca00 	vldr	s24, [r2]
 801a4a4:	eb01 0208 	add.w	r2, r1, r8
 801a4a8:	edd1 ba00 	vldr	s23, [r1]
 801a4ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a4ae:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 801a4b2:	ed92 ba00 	vldr	s22, [r2]
 801a4b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a4b8:	eb0e 0908 	add.w	r9, lr, r8
 801a4bc:	910e      	str	r1, [sp, #56]	; 0x38
 801a4be:	9201      	str	r2, [sp, #4]
 801a4c0:	eb09 0208 	add.w	r2, r9, r8
 801a4c4:	ed99 aa01 	vldr	s20, [r9, #4]
 801a4c8:	edde aa01 	vldr	s21, [lr, #4]
 801a4cc:	eb02 0908 	add.w	r9, r2, r8
 801a4d0:	edd2 9a01 	vldr	s19, [r2, #4]
 801a4d4:	f8dd e010 	ldr.w	lr, [sp, #16]
 801a4d8:	eb09 0208 	add.w	r2, r9, r8
 801a4dc:	ed99 9a01 	vldr	s18, [r9, #4]
 801a4e0:	eb02 0908 	add.w	r9, r2, r8
 801a4e4:	ed92 8a01 	vldr	s16, [r2, #4]
 801a4e8:	9a01      	ldr	r2, [sp, #4]
 801a4ea:	edd9 7a01 	vldr	s15, [r9, #4]
 801a4ee:	44c8      	add	r8, r9
 801a4f0:	edcd 7a02 	vstr	s15, [sp, #8]
 801a4f4:	edd8 7a01 	vldr	s15, [r8, #4]
 801a4f8:	edcd 7a03 	vstr	s15, [sp, #12]
 801a4fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a4fe:	e001      	b.n	801a504 <arm_radix8_butterfly_f32+0x300>
 801a500:	3f3504f3 	.word	0x3f3504f3
 801a504:	ed92 7a00 	vldr	s14, [r2]
 801a508:	44de      	add	lr, fp
 801a50a:	ed17 1a01 	vldr	s2, [r7, #-4]
 801a50e:	ed90 5a00 	vldr	s10, [r0]
 801a512:	45f2      	cmp	sl, lr
 801a514:	ed1c fa01 	vldr	s30, [ip, #-4]
 801a518:	ee31 3a07 	vadd.f32	s6, s2, s14
 801a51c:	edd6 5a00 	vldr	s11, [r6]
 801a520:	ee31 1a47 	vsub.f32	s2, s2, s14
 801a524:	edd4 7a00 	vldr	s15, [r4]
 801a528:	ed95 7a00 	vldr	s14, [r5]
 801a52c:	ed91 4a00 	vldr	s8, [r1]
 801a530:	ee3f 6a27 	vadd.f32	s12, s30, s15
 801a534:	ee77 6a25 	vadd.f32	s13, s14, s11
 801a538:	edd7 ea00 	vldr	s29, [r7]
 801a53c:	ee74 fa05 	vadd.f32	s31, s8, s10
 801a540:	ee73 1a06 	vadd.f32	s3, s6, s12
 801a544:	ee34 4a45 	vsub.f32	s8, s8, s10
 801a548:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 801a54c:	ee37 7a65 	vsub.f32	s14, s14, s11
 801a550:	ee33 3a46 	vsub.f32	s6, s6, s12
 801a554:	ee31 6a85 	vadd.f32	s12, s3, s10
 801a558:	ee7f 7a67 	vsub.f32	s15, s30, s15
 801a55c:	ee34 fa07 	vadd.f32	s30, s8, s14
 801a560:	ed07 6a01 	vstr	s12, [r7, #-4]
 801a564:	ee34 4a47 	vsub.f32	s8, s8, s14
 801a568:	edd5 3a01 	vldr	s7, [r5, #4]
 801a56c:	ee7f fae6 	vsub.f32	s31, s31, s13
 801a570:	ed90 7a01 	vldr	s14, [r0, #4]
 801a574:	ee2f fa28 	vmul.f32	s30, s30, s17
 801a578:	edd1 5a01 	vldr	s11, [r1, #4]
 801a57c:	ee24 4a28 	vmul.f32	s8, s8, s17
 801a580:	ed96 6a01 	vldr	s12, [r6, #4]
 801a584:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801a588:	ee75 0ac7 	vsub.f32	s1, s11, s14
 801a58c:	edd2 6a01 	vldr	s13, [r2, #4]
 801a590:	ee73 2ac6 	vsub.f32	s5, s7, s12
 801a594:	edd4 4a01 	vldr	s9, [r4, #4]
 801a598:	ee75 5a87 	vadd.f32	s11, s11, s14
 801a59c:	ed9c 7a00 	vldr	s14, [ip]
 801a5a0:	ee37 2a8f 	vadd.f32	s4, s15, s30
 801a5a4:	ee33 6a86 	vadd.f32	s12, s7, s12
 801a5a8:	ee37 facf 	vsub.f32	s30, s15, s30
 801a5ac:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 801a5b0:	ee70 7ae2 	vsub.f32	s15, s1, s5
 801a5b4:	ee7e eae6 	vsub.f32	s29, s29, s13
 801a5b8:	ee70 2aa2 	vadd.f32	s5, s1, s5
 801a5bc:	ee77 6a24 	vadd.f32	s13, s14, s9
 801a5c0:	ee75 0a86 	vadd.f32	s1, s11, s12
 801a5c4:	ee37 7a64 	vsub.f32	s14, s14, s9
 801a5c8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 801a5cc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801a5d0:	ee62 2aa8 	vmul.f32	s5, s5, s17
 801a5d4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801a5d8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 801a5dc:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 801a5e0:	ee77 4a22 	vadd.f32	s9, s14, s5
 801a5e4:	ee7e eae7 	vsub.f32	s29, s29, s15
 801a5e8:	ee77 7a62 	vsub.f32	s15, s14, s5
 801a5ec:	ee71 2a04 	vadd.f32	s5, s2, s8
 801a5f0:	ee31 7a44 	vsub.f32	s14, s2, s8
 801a5f4:	ee30 1a60 	vsub.f32	s2, s0, s1
 801a5f8:	ee73 1a06 	vadd.f32	s3, s6, s12
 801a5fc:	ee33 6a46 	vsub.f32	s12, s6, s12
 801a600:	ee33 3aef 	vsub.f32	s6, s7, s31
 801a604:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 801a608:	ee3e 4acf 	vsub.f32	s8, s29, s30
 801a60c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 801a610:	ee72 5a25 	vadd.f32	s11, s4, s11
 801a614:	ee32 2aa4 	vadd.f32	s4, s5, s9
 801a618:	ee72 4ae4 	vsub.f32	s9, s5, s9
 801a61c:	ee77 2a27 	vadd.f32	s5, s14, s15
 801a620:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a624:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 801a628:	ee2c fa85 	vmul.f32	s30, s25, s10
 801a62c:	ee69 ea01 	vmul.f32	s29, s18, s2
 801a630:	ee29 5a05 	vmul.f32	s10, s18, s10
 801a634:	ee2c 1a81 	vmul.f32	s2, s25, s2
 801a638:	ee6d faa1 	vmul.f32	s31, s27, s3
 801a63c:	ee70 0a20 	vadd.f32	s1, s0, s1
 801a640:	ee6a 1a21 	vmul.f32	s3, s20, s3
 801a644:	ee2a 0a03 	vmul.f32	s0, s20, s6
 801a648:	ee2d 3a83 	vmul.f32	s6, s27, s6
 801a64c:	edc7 0a00 	vstr	s1, [r7]
 801a650:	ee7f ea2e 	vadd.f32	s29, s30, s29
 801a654:	441f      	add	r7, r3
 801a656:	ee2a faa3 	vmul.f32	s30, s21, s7
 801a65a:	ee31 5a45 	vsub.f32	s10, s2, s10
 801a65e:	ee6e 3a23 	vmul.f32	s7, s28, s7
 801a662:	edc2 ea00 	vstr	s29, [r2]
 801a666:	ee3f 0a80 	vadd.f32	s0, s31, s0
 801a66a:	ee33 3a61 	vsub.f32	s6, s6, s3
 801a66e:	ed82 5a01 	vstr	s10, [r2, #4]
 801a672:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801a676:	edcd 3a01 	vstr	s7, [sp, #4]
 801a67a:	ed9d 5a03 	vldr	s10, [sp, #12]
 801a67e:	ee6b ea86 	vmul.f32	s29, s23, s12
 801a682:	eddd 3a02 	vldr	s7, [sp, #8]
 801a686:	ee6b fa24 	vmul.f32	s31, s22, s9
 801a68a:	ed0c 0a01 	vstr	s0, [ip, #-4]
 801a68e:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a692:	ed8c 3a00 	vstr	s6, [ip]
 801a696:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801a69a:	ee23 6a86 	vmul.f32	s12, s7, s12
 801a69e:	eddd 3a01 	vldr	s7, [sp, #4]
 801a6a2:	ee25 5a25 	vmul.f32	s10, s10, s11
 801a6a6:	441a      	add	r2, r3
 801a6a8:	ee2c 0a22 	vmul.f32	s0, s24, s5
 801a6ac:	449c      	add	ip, r3
 801a6ae:	ee68 1a04 	vmul.f32	s3, s16, s8
 801a6b2:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801a6b6:	ee2d 3a07 	vmul.f32	s6, s26, s14
 801a6ba:	ee29 faa7 	vmul.f32	s30, s19, s15
 801a6be:	ee2a 2a82 	vmul.f32	s4, s21, s4
 801a6c2:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801a6c6:	ee6b 5a25 	vmul.f32	s11, s22, s11
 801a6ca:	ee68 2a22 	vmul.f32	s5, s16, s5
 801a6ce:	ee2c 4a04 	vmul.f32	s8, s24, s8
 801a6d2:	ee29 7a87 	vmul.f32	s14, s19, s14
 801a6d6:	ee6d 7a27 	vmul.f32	s15, s26, s15
 801a6da:	ee73 3ac2 	vsub.f32	s7, s7, s4
 801a6de:	ee7e ea81 	vadd.f32	s29, s29, s2
 801a6e2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801a6e6:	ee3f 5a85 	vadd.f32	s10, s31, s10
 801a6ea:	ee75 4ae4 	vsub.f32	s9, s11, s9
 801a6ee:	edc4 ea00 	vstr	s29, [r4]
 801a6f2:	ee30 0a21 	vadd.f32	s0, s0, s3
 801a6f6:	ed84 6a01 	vstr	s12, [r4, #4]
 801a6fa:	ee74 2a62 	vsub.f32	s5, s8, s5
 801a6fe:	edc1 0a00 	vstr	s1, [r1]
 801a702:	ee33 3a0f 	vadd.f32	s6, s6, s30
 801a706:	edc1 3a01 	vstr	s7, [r1, #4]
 801a70a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a70e:	ed86 5a00 	vstr	s10, [r6]
 801a712:	edc6 4a01 	vstr	s9, [r6, #4]
 801a716:	4419      	add	r1, r3
 801a718:	ed80 0a00 	vstr	s0, [r0]
 801a71c:	441c      	add	r4, r3
 801a71e:	edc0 2a01 	vstr	s5, [r0, #4]
 801a722:	441e      	add	r6, r3
 801a724:	ed85 3a00 	vstr	s6, [r5]
 801a728:	4418      	add	r0, r3
 801a72a:	ed85 7a01 	vstr	s14, [r5, #4]
 801a72e:	441d      	add	r5, r3
 801a730:	f63f aee8 	bhi.w	801a504 <arm_radix8_butterfly_f32+0x300>
 801a734:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a736:	9a04      	ldr	r2, [sp, #16]
 801a738:	3108      	adds	r1, #8
 801a73a:	3201      	adds	r2, #1
 801a73c:	910c      	str	r1, [sp, #48]	; 0x30
 801a73e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a740:	9204      	str	r2, [sp, #16]
 801a742:	3108      	adds	r1, #8
 801a744:	910b      	str	r1, [sp, #44]	; 0x2c
 801a746:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a748:	3108      	adds	r1, #8
 801a74a:	910a      	str	r1, [sp, #40]	; 0x28
 801a74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a74e:	3108      	adds	r1, #8
 801a750:	9109      	str	r1, [sp, #36]	; 0x24
 801a752:	9908      	ldr	r1, [sp, #32]
 801a754:	3108      	adds	r1, #8
 801a756:	9108      	str	r1, [sp, #32]
 801a758:	9907      	ldr	r1, [sp, #28]
 801a75a:	3108      	adds	r1, #8
 801a75c:	9107      	str	r1, [sp, #28]
 801a75e:	9906      	ldr	r1, [sp, #24]
 801a760:	3108      	adds	r1, #8
 801a762:	9106      	str	r1, [sp, #24]
 801a764:	9905      	ldr	r1, [sp, #20]
 801a766:	3108      	adds	r1, #8
 801a768:	9105      	str	r1, [sp, #20]
 801a76a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a76c:	4291      	cmp	r1, r2
 801a76e:	f47f ae74 	bne.w	801a45a <arm_radix8_butterfly_f32+0x256>
 801a772:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a774:	468b      	mov	fp, r1
 801a776:	00db      	lsls	r3, r3, #3
 801a778:	b29b      	uxth	r3, r3
 801a77a:	9310      	str	r3, [sp, #64]	; 0x40
 801a77c:	e551      	b.n	801a222 <arm_radix8_butterfly_f32+0x1e>
 801a77e:	b015      	add	sp, #84	; 0x54
 801a780:	ecbd 8b10 	vpop	{d8-d15}
 801a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a788 <arm_rfft_init_f32>:
 801a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a78a:	b294      	uxth	r4, r2
 801a78c:	4f23      	ldr	r7, [pc, #140]	; (801a81c <arm_rfft_init_f32+0x94>)
 801a78e:	b2db      	uxtb	r3, r3
 801a790:	4e23      	ldr	r6, [pc, #140]	; (801a820 <arm_rfft_init_f32+0x98>)
 801a792:	f3c2 024e 	ubfx	r2, r2, #1, #15
 801a796:	460d      	mov	r5, r1
 801a798:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801a79c:	9906      	ldr	r1, [sp, #24]
 801a79e:	7183      	strb	r3, [r0, #6]
 801a7a0:	6004      	str	r4, [r0, #0]
 801a7a2:	71c1      	strb	r1, [r0, #7]
 801a7a4:	8082      	strh	r2, [r0, #4]
 801a7a6:	e9c0 7603 	strd	r7, r6, [r0, #12]
 801a7aa:	d033      	beq.n	801a814 <arm_rfft_init_f32+0x8c>
 801a7ac:	d911      	bls.n	801a7d2 <arm_rfft_init_f32+0x4a>
 801a7ae:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 801a7b2:	d026      	beq.n	801a802 <arm_rfft_init_f32+0x7a>
 801a7b4:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 801a7b8:	d116      	bne.n	801a7e8 <arm_rfft_init_f32+0x60>
 801a7ba:	2101      	movs	r1, #1
 801a7bc:	2400      	movs	r4, #0
 801a7be:	6081      	str	r1, [r0, #8]
 801a7c0:	6145      	str	r5, [r0, #20]
 801a7c2:	4611      	mov	r1, r2
 801a7c4:	4628      	mov	r0, r5
 801a7c6:	b9b3      	cbnz	r3, 801a7f6 <arm_rfft_init_f32+0x6e>
 801a7c8:	461a      	mov	r2, r3
 801a7ca:	f000 f82b 	bl	801a824 <arm_cfft_radix4_init_f32>
 801a7ce:	4620      	mov	r0, r4
 801a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7d2:	2c80      	cmp	r4, #128	; 0x80
 801a7d4:	d108      	bne.n	801a7e8 <arm_rfft_init_f32+0x60>
 801a7d6:	2140      	movs	r1, #64	; 0x40
 801a7d8:	6145      	str	r5, [r0, #20]
 801a7da:	2400      	movs	r4, #0
 801a7dc:	6081      	str	r1, [r0, #8]
 801a7de:	4611      	mov	r1, r2
 801a7e0:	4628      	mov	r0, r5
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d0f0      	beq.n	801a7c8 <arm_rfft_init_f32+0x40>
 801a7e6:	e006      	b.n	801a7f6 <arm_rfft_init_f32+0x6e>
 801a7e8:	6145      	str	r5, [r0, #20]
 801a7ea:	f04f 34ff 	mov.w	r4, #4294967295
 801a7ee:	4611      	mov	r1, r2
 801a7f0:	4628      	mov	r0, r5
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d0e8      	beq.n	801a7c8 <arm_rfft_init_f32+0x40>
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	f000 f813 	bl	801a824 <arm_cfft_radix4_init_f32>
 801a7fe:	4620      	mov	r0, r4
 801a800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a802:	2104      	movs	r1, #4
 801a804:	6145      	str	r5, [r0, #20]
 801a806:	2400      	movs	r4, #0
 801a808:	6081      	str	r1, [r0, #8]
 801a80a:	4611      	mov	r1, r2
 801a80c:	4628      	mov	r0, r5
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d0da      	beq.n	801a7c8 <arm_rfft_init_f32+0x40>
 801a812:	e7f0      	b.n	801a7f6 <arm_rfft_init_f32+0x6e>
 801a814:	2110      	movs	r1, #16
 801a816:	2400      	movs	r4, #0
 801a818:	6081      	str	r1, [r0, #8]
 801a81a:	e7d1      	b.n	801a7c0 <arm_rfft_init_f32+0x38>
 801a81c:	0804c150 	.word	0x0804c150
 801a820:	08054150 	.word	0x08054150

0801a824 <arm_cfft_radix4_init_f32>:
 801a824:	b410      	push	{r4}
 801a826:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801a82a:	4604      	mov	r4, r0
 801a82c:	4826      	ldr	r0, [pc, #152]	; (801a8c8 <arm_cfft_radix4_init_f32+0xa4>)
 801a82e:	70a2      	strb	r2, [r4, #2]
 801a830:	70e3      	strb	r3, [r4, #3]
 801a832:	8021      	strh	r1, [r4, #0]
 801a834:	6060      	str	r0, [r4, #4]
 801a836:	d027      	beq.n	801a888 <arm_cfft_radix4_init_f32+0x64>
 801a838:	d911      	bls.n	801a85e <arm_cfft_radix4_init_f32+0x3a>
 801a83a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a83e:	d02f      	beq.n	801a8a0 <arm_cfft_radix4_init_f32+0x7c>
 801a840:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801a844:	d11b      	bne.n	801a87e <arm_cfft_radix4_init_f32+0x5a>
 801a846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801a84a:	4a20      	ldr	r2, [pc, #128]	; (801a8cc <arm_cfft_radix4_init_f32+0xa8>)
 801a84c:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 801a850:	2000      	movs	r0, #0
 801a852:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801a856:	6123      	str	r3, [r4, #16]
 801a858:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a85c:	4770      	bx	lr
 801a85e:	2910      	cmp	r1, #16
 801a860:	d028      	beq.n	801a8b4 <arm_cfft_radix4_init_f32+0x90>
 801a862:	2940      	cmp	r1, #64	; 0x40
 801a864:	d10b      	bne.n	801a87e <arm_cfft_radix4_init_f32+0x5a>
 801a866:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 801a86a:	f04f 1140 	mov.w	r1, #4194368	; 0x400040
 801a86e:	4a18      	ldr	r2, [pc, #96]	; (801a8d0 <arm_cfft_radix4_init_f32+0xac>)
 801a870:	2000      	movs	r0, #0
 801a872:	6123      	str	r3, [r4, #16]
 801a874:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801a878:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a87c:	4770      	bx	lr
 801a87e:	f04f 30ff 	mov.w	r0, #4294967295
 801a882:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a886:	4770      	bx	lr
 801a888:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 801a88c:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 801a890:	4a10      	ldr	r2, [pc, #64]	; (801a8d4 <arm_cfft_radix4_init_f32+0xb0>)
 801a892:	2000      	movs	r0, #0
 801a894:	6123      	str	r3, [r4, #16]
 801a896:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801a89a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a89e:	4770      	bx	lr
 801a8a0:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 801a8a4:	4a0c      	ldr	r2, [pc, #48]	; (801a8d8 <arm_cfft_radix4_init_f32+0xb4>)
 801a8a6:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 801a8aa:	2000      	movs	r0, #0
 801a8ac:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801a8b0:	6123      	str	r3, [r4, #16]
 801a8b2:	e7d1      	b.n	801a858 <arm_cfft_radix4_init_f32+0x34>
 801a8b4:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 801a8b8:	4a08      	ldr	r2, [pc, #32]	; (801a8dc <arm_cfft_radix4_init_f32+0xb8>)
 801a8ba:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 801a8be:	2000      	movs	r0, #0
 801a8c0:	e9c4 2102 	strd	r2, r1, [r4, #8]
 801a8c4:	6123      	str	r3, [r4, #16]
 801a8c6:	e7c7      	b.n	801a858 <arm_cfft_radix4_init_f32+0x34>
 801a8c8:	080636d4 	.word	0x080636d4
 801a8cc:	08040f50 	.word	0x08040f50
 801a8d0:	08040fce 	.word	0x08040fce
 801a8d4:	08040f6e 	.word	0x08040f6e
 801a8d8:	08040f56 	.word	0x08040f56
 801a8dc:	0804114e 	.word	0x0804114e

0801a8e0 <__errno>:
 801a8e0:	4b01      	ldr	r3, [pc, #4]	; (801a8e8 <__errno+0x8>)
 801a8e2:	6818      	ldr	r0, [r3, #0]
 801a8e4:	4770      	bx	lr
 801a8e6:	bf00      	nop
 801a8e8:	20000910 	.word	0x20000910

0801a8ec <__libc_init_array>:
 801a8ec:	b570      	push	{r4, r5, r6, lr}
 801a8ee:	4d0d      	ldr	r5, [pc, #52]	; (801a924 <__libc_init_array+0x38>)
 801a8f0:	2600      	movs	r6, #0
 801a8f2:	4c0d      	ldr	r4, [pc, #52]	; (801a928 <__libc_init_array+0x3c>)
 801a8f4:	1b64      	subs	r4, r4, r5
 801a8f6:	10a4      	asrs	r4, r4, #2
 801a8f8:	42a6      	cmp	r6, r4
 801a8fa:	d109      	bne.n	801a910 <__libc_init_array+0x24>
 801a8fc:	4d0b      	ldr	r5, [pc, #44]	; (801a92c <__libc_init_array+0x40>)
 801a8fe:	2600      	movs	r6, #0
 801a900:	4c0b      	ldr	r4, [pc, #44]	; (801a930 <__libc_init_array+0x44>)
 801a902:	f004 fe29 	bl	801f558 <_init>
 801a906:	1b64      	subs	r4, r4, r5
 801a908:	10a4      	asrs	r4, r4, #2
 801a90a:	42a6      	cmp	r6, r4
 801a90c:	d105      	bne.n	801a91a <__libc_init_array+0x2e>
 801a90e:	bd70      	pop	{r4, r5, r6, pc}
 801a910:	f855 3b04 	ldr.w	r3, [r5], #4
 801a914:	3601      	adds	r6, #1
 801a916:	4798      	blx	r3
 801a918:	e7ee      	b.n	801a8f8 <__libc_init_array+0xc>
 801a91a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a91e:	3601      	adds	r6, #1
 801a920:	4798      	blx	r3
 801a922:	e7f2      	b.n	801a90a <__libc_init_array+0x1e>
 801a924:	0807491c 	.word	0x0807491c
 801a928:	0807491c 	.word	0x0807491c
 801a92c:	0807491c 	.word	0x0807491c
 801a930:	08074920 	.word	0x08074920

0801a934 <malloc>:
 801a934:	4b02      	ldr	r3, [pc, #8]	; (801a940 <malloc+0xc>)
 801a936:	4601      	mov	r1, r0
 801a938:	6818      	ldr	r0, [r3, #0]
 801a93a:	f000 b885 	b.w	801aa48 <_malloc_r>
 801a93e:	bf00      	nop
 801a940:	20000910 	.word	0x20000910

0801a944 <memcpy>:
 801a944:	440a      	add	r2, r1
 801a946:	1e43      	subs	r3, r0, #1
 801a948:	4291      	cmp	r1, r2
 801a94a:	d100      	bne.n	801a94e <memcpy+0xa>
 801a94c:	4770      	bx	lr
 801a94e:	b510      	push	{r4, lr}
 801a950:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a954:	4291      	cmp	r1, r2
 801a956:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a95a:	d1f9      	bne.n	801a950 <memcpy+0xc>
 801a95c:	bd10      	pop	{r4, pc}

0801a95e <memset>:
 801a95e:	4402      	add	r2, r0
 801a960:	4603      	mov	r3, r0
 801a962:	4293      	cmp	r3, r2
 801a964:	d100      	bne.n	801a968 <memset+0xa>
 801a966:	4770      	bx	lr
 801a968:	f803 1b01 	strb.w	r1, [r3], #1
 801a96c:	e7f9      	b.n	801a962 <memset+0x4>
	...

0801a970 <_free_r>:
 801a970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a972:	2900      	cmp	r1, #0
 801a974:	d043      	beq.n	801a9fe <_free_r+0x8e>
 801a976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a97a:	1f0c      	subs	r4, r1, #4
 801a97c:	9001      	str	r0, [sp, #4]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	bfb8      	it	lt
 801a982:	18e4      	addlt	r4, r4, r3
 801a984:	f003 f876 	bl	801da74 <__malloc_lock>
 801a988:	4a1e      	ldr	r2, [pc, #120]	; (801aa04 <_free_r+0x94>)
 801a98a:	9801      	ldr	r0, [sp, #4]
 801a98c:	6813      	ldr	r3, [r2, #0]
 801a98e:	b933      	cbnz	r3, 801a99e <_free_r+0x2e>
 801a990:	6063      	str	r3, [r4, #4]
 801a992:	6014      	str	r4, [r2, #0]
 801a994:	b003      	add	sp, #12
 801a996:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a99a:	f003 b871 	b.w	801da80 <__malloc_unlock>
 801a99e:	42a3      	cmp	r3, r4
 801a9a0:	d908      	bls.n	801a9b4 <_free_r+0x44>
 801a9a2:	6825      	ldr	r5, [r4, #0]
 801a9a4:	1961      	adds	r1, r4, r5
 801a9a6:	428b      	cmp	r3, r1
 801a9a8:	bf01      	itttt	eq
 801a9aa:	6819      	ldreq	r1, [r3, #0]
 801a9ac:	685b      	ldreq	r3, [r3, #4]
 801a9ae:	1949      	addeq	r1, r1, r5
 801a9b0:	6021      	streq	r1, [r4, #0]
 801a9b2:	e7ed      	b.n	801a990 <_free_r+0x20>
 801a9b4:	461a      	mov	r2, r3
 801a9b6:	685b      	ldr	r3, [r3, #4]
 801a9b8:	b10b      	cbz	r3, 801a9be <_free_r+0x4e>
 801a9ba:	42a3      	cmp	r3, r4
 801a9bc:	d9fa      	bls.n	801a9b4 <_free_r+0x44>
 801a9be:	6811      	ldr	r1, [r2, #0]
 801a9c0:	1855      	adds	r5, r2, r1
 801a9c2:	42a5      	cmp	r5, r4
 801a9c4:	d10b      	bne.n	801a9de <_free_r+0x6e>
 801a9c6:	6824      	ldr	r4, [r4, #0]
 801a9c8:	4421      	add	r1, r4
 801a9ca:	1854      	adds	r4, r2, r1
 801a9cc:	6011      	str	r1, [r2, #0]
 801a9ce:	42a3      	cmp	r3, r4
 801a9d0:	d1e0      	bne.n	801a994 <_free_r+0x24>
 801a9d2:	681c      	ldr	r4, [r3, #0]
 801a9d4:	685b      	ldr	r3, [r3, #4]
 801a9d6:	4421      	add	r1, r4
 801a9d8:	6053      	str	r3, [r2, #4]
 801a9da:	6011      	str	r1, [r2, #0]
 801a9dc:	e7da      	b.n	801a994 <_free_r+0x24>
 801a9de:	d902      	bls.n	801a9e6 <_free_r+0x76>
 801a9e0:	230c      	movs	r3, #12
 801a9e2:	6003      	str	r3, [r0, #0]
 801a9e4:	e7d6      	b.n	801a994 <_free_r+0x24>
 801a9e6:	6825      	ldr	r5, [r4, #0]
 801a9e8:	1961      	adds	r1, r4, r5
 801a9ea:	428b      	cmp	r3, r1
 801a9ec:	bf02      	ittt	eq
 801a9ee:	6819      	ldreq	r1, [r3, #0]
 801a9f0:	685b      	ldreq	r3, [r3, #4]
 801a9f2:	1949      	addeq	r1, r1, r5
 801a9f4:	6063      	str	r3, [r4, #4]
 801a9f6:	bf08      	it	eq
 801a9f8:	6021      	streq	r1, [r4, #0]
 801a9fa:	6054      	str	r4, [r2, #4]
 801a9fc:	e7ca      	b.n	801a994 <_free_r+0x24>
 801a9fe:	b003      	add	sp, #12
 801aa00:	bd30      	pop	{r4, r5, pc}
 801aa02:	bf00      	nop
 801aa04:	200044e8 	.word	0x200044e8

0801aa08 <sbrk_aligned>:
 801aa08:	b570      	push	{r4, r5, r6, lr}
 801aa0a:	4e0e      	ldr	r6, [pc, #56]	; (801aa44 <sbrk_aligned+0x3c>)
 801aa0c:	460c      	mov	r4, r1
 801aa0e:	4605      	mov	r5, r0
 801aa10:	6831      	ldr	r1, [r6, #0]
 801aa12:	b911      	cbnz	r1, 801aa1a <sbrk_aligned+0x12>
 801aa14:	f000 ff0a 	bl	801b82c <_sbrk_r>
 801aa18:	6030      	str	r0, [r6, #0]
 801aa1a:	4621      	mov	r1, r4
 801aa1c:	4628      	mov	r0, r5
 801aa1e:	f000 ff05 	bl	801b82c <_sbrk_r>
 801aa22:	1c43      	adds	r3, r0, #1
 801aa24:	d00a      	beq.n	801aa3c <sbrk_aligned+0x34>
 801aa26:	1cc4      	adds	r4, r0, #3
 801aa28:	f024 0403 	bic.w	r4, r4, #3
 801aa2c:	42a0      	cmp	r0, r4
 801aa2e:	d007      	beq.n	801aa40 <sbrk_aligned+0x38>
 801aa30:	1a21      	subs	r1, r4, r0
 801aa32:	4628      	mov	r0, r5
 801aa34:	f000 fefa 	bl	801b82c <_sbrk_r>
 801aa38:	3001      	adds	r0, #1
 801aa3a:	d101      	bne.n	801aa40 <sbrk_aligned+0x38>
 801aa3c:	f04f 34ff 	mov.w	r4, #4294967295
 801aa40:	4620      	mov	r0, r4
 801aa42:	bd70      	pop	{r4, r5, r6, pc}
 801aa44:	200044ec 	.word	0x200044ec

0801aa48 <_malloc_r>:
 801aa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa4c:	1ccd      	adds	r5, r1, #3
 801aa4e:	4607      	mov	r7, r0
 801aa50:	f025 0503 	bic.w	r5, r5, #3
 801aa54:	3508      	adds	r5, #8
 801aa56:	2d0c      	cmp	r5, #12
 801aa58:	bf38      	it	cc
 801aa5a:	250c      	movcc	r5, #12
 801aa5c:	2d00      	cmp	r5, #0
 801aa5e:	db01      	blt.n	801aa64 <_malloc_r+0x1c>
 801aa60:	42a9      	cmp	r1, r5
 801aa62:	d905      	bls.n	801aa70 <_malloc_r+0x28>
 801aa64:	230c      	movs	r3, #12
 801aa66:	2600      	movs	r6, #0
 801aa68:	603b      	str	r3, [r7, #0]
 801aa6a:	4630      	mov	r0, r6
 801aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa70:	4e2e      	ldr	r6, [pc, #184]	; (801ab2c <_malloc_r+0xe4>)
 801aa72:	f002 ffff 	bl	801da74 <__malloc_lock>
 801aa76:	6833      	ldr	r3, [r6, #0]
 801aa78:	461c      	mov	r4, r3
 801aa7a:	bb34      	cbnz	r4, 801aaca <_malloc_r+0x82>
 801aa7c:	4629      	mov	r1, r5
 801aa7e:	4638      	mov	r0, r7
 801aa80:	f7ff ffc2 	bl	801aa08 <sbrk_aligned>
 801aa84:	1c43      	adds	r3, r0, #1
 801aa86:	4604      	mov	r4, r0
 801aa88:	d14d      	bne.n	801ab26 <_malloc_r+0xde>
 801aa8a:	6834      	ldr	r4, [r6, #0]
 801aa8c:	4626      	mov	r6, r4
 801aa8e:	2e00      	cmp	r6, #0
 801aa90:	d140      	bne.n	801ab14 <_malloc_r+0xcc>
 801aa92:	6823      	ldr	r3, [r4, #0]
 801aa94:	4631      	mov	r1, r6
 801aa96:	4638      	mov	r0, r7
 801aa98:	eb04 0803 	add.w	r8, r4, r3
 801aa9c:	f000 fec6 	bl	801b82c <_sbrk_r>
 801aaa0:	4580      	cmp	r8, r0
 801aaa2:	d13a      	bne.n	801ab1a <_malloc_r+0xd2>
 801aaa4:	6821      	ldr	r1, [r4, #0]
 801aaa6:	3503      	adds	r5, #3
 801aaa8:	4638      	mov	r0, r7
 801aaaa:	1a6d      	subs	r5, r5, r1
 801aaac:	f025 0503 	bic.w	r5, r5, #3
 801aab0:	3508      	adds	r5, #8
 801aab2:	2d0c      	cmp	r5, #12
 801aab4:	bf38      	it	cc
 801aab6:	250c      	movcc	r5, #12
 801aab8:	4629      	mov	r1, r5
 801aaba:	f7ff ffa5 	bl	801aa08 <sbrk_aligned>
 801aabe:	3001      	adds	r0, #1
 801aac0:	d02b      	beq.n	801ab1a <_malloc_r+0xd2>
 801aac2:	6823      	ldr	r3, [r4, #0]
 801aac4:	442b      	add	r3, r5
 801aac6:	6023      	str	r3, [r4, #0]
 801aac8:	e00e      	b.n	801aae8 <_malloc_r+0xa0>
 801aaca:	6822      	ldr	r2, [r4, #0]
 801aacc:	1b52      	subs	r2, r2, r5
 801aace:	d41e      	bmi.n	801ab0e <_malloc_r+0xc6>
 801aad0:	2a0b      	cmp	r2, #11
 801aad2:	d916      	bls.n	801ab02 <_malloc_r+0xba>
 801aad4:	1961      	adds	r1, r4, r5
 801aad6:	42a3      	cmp	r3, r4
 801aad8:	6025      	str	r5, [r4, #0]
 801aada:	bf18      	it	ne
 801aadc:	6059      	strne	r1, [r3, #4]
 801aade:	6863      	ldr	r3, [r4, #4]
 801aae0:	bf08      	it	eq
 801aae2:	6031      	streq	r1, [r6, #0]
 801aae4:	5162      	str	r2, [r4, r5]
 801aae6:	604b      	str	r3, [r1, #4]
 801aae8:	f104 060b 	add.w	r6, r4, #11
 801aaec:	4638      	mov	r0, r7
 801aaee:	f002 ffc7 	bl	801da80 <__malloc_unlock>
 801aaf2:	1d23      	adds	r3, r4, #4
 801aaf4:	f026 0607 	bic.w	r6, r6, #7
 801aaf8:	1af2      	subs	r2, r6, r3
 801aafa:	d0b6      	beq.n	801aa6a <_malloc_r+0x22>
 801aafc:	1b9b      	subs	r3, r3, r6
 801aafe:	50a3      	str	r3, [r4, r2]
 801ab00:	e7b3      	b.n	801aa6a <_malloc_r+0x22>
 801ab02:	6862      	ldr	r2, [r4, #4]
 801ab04:	42a3      	cmp	r3, r4
 801ab06:	bf0c      	ite	eq
 801ab08:	6032      	streq	r2, [r6, #0]
 801ab0a:	605a      	strne	r2, [r3, #4]
 801ab0c:	e7ec      	b.n	801aae8 <_malloc_r+0xa0>
 801ab0e:	4623      	mov	r3, r4
 801ab10:	6864      	ldr	r4, [r4, #4]
 801ab12:	e7b2      	b.n	801aa7a <_malloc_r+0x32>
 801ab14:	4634      	mov	r4, r6
 801ab16:	6876      	ldr	r6, [r6, #4]
 801ab18:	e7b9      	b.n	801aa8e <_malloc_r+0x46>
 801ab1a:	230c      	movs	r3, #12
 801ab1c:	4638      	mov	r0, r7
 801ab1e:	603b      	str	r3, [r7, #0]
 801ab20:	f002 ffae 	bl	801da80 <__malloc_unlock>
 801ab24:	e7a1      	b.n	801aa6a <_malloc_r+0x22>
 801ab26:	6025      	str	r5, [r4, #0]
 801ab28:	e7de      	b.n	801aae8 <_malloc_r+0xa0>
 801ab2a:	bf00      	nop
 801ab2c:	200044e8 	.word	0x200044e8

0801ab30 <__cvt>:
 801ab30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab34:	ec55 4b10 	vmov	r4, r5, d0
 801ab38:	2d00      	cmp	r5, #0
 801ab3a:	460e      	mov	r6, r1
 801ab3c:	4619      	mov	r1, r3
 801ab3e:	462b      	mov	r3, r5
 801ab40:	bfb4      	ite	lt
 801ab42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ab46:	2300      	movge	r3, #0
 801ab48:	4691      	mov	r9, r2
 801ab4a:	bfbf      	itttt	lt
 801ab4c:	4622      	movlt	r2, r4
 801ab4e:	461d      	movlt	r5, r3
 801ab50:	232d      	movlt	r3, #45	; 0x2d
 801ab52:	4614      	movlt	r4, r2
 801ab54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ab58:	700b      	strb	r3, [r1, #0]
 801ab5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab5c:	f023 0820 	bic.w	r8, r3, #32
 801ab60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ab64:	d005      	beq.n	801ab72 <__cvt+0x42>
 801ab66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ab6a:	d100      	bne.n	801ab6e <__cvt+0x3e>
 801ab6c:	3601      	adds	r6, #1
 801ab6e:	2102      	movs	r1, #2
 801ab70:	e000      	b.n	801ab74 <__cvt+0x44>
 801ab72:	2103      	movs	r1, #3
 801ab74:	ab03      	add	r3, sp, #12
 801ab76:	4632      	mov	r2, r6
 801ab78:	9301      	str	r3, [sp, #4]
 801ab7a:	ab02      	add	r3, sp, #8
 801ab7c:	ec45 4b10 	vmov	d0, r4, r5
 801ab80:	9300      	str	r3, [sp, #0]
 801ab82:	4653      	mov	r3, sl
 801ab84:	f001 fdf8 	bl	801c778 <_dtoa_r>
 801ab88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ab8c:	4607      	mov	r7, r0
 801ab8e:	d102      	bne.n	801ab96 <__cvt+0x66>
 801ab90:	f019 0f01 	tst.w	r9, #1
 801ab94:	d022      	beq.n	801abdc <__cvt+0xac>
 801ab96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ab9a:	eb07 0906 	add.w	r9, r7, r6
 801ab9e:	d110      	bne.n	801abc2 <__cvt+0x92>
 801aba0:	783b      	ldrb	r3, [r7, #0]
 801aba2:	2b30      	cmp	r3, #48	; 0x30
 801aba4:	d10a      	bne.n	801abbc <__cvt+0x8c>
 801aba6:	2200      	movs	r2, #0
 801aba8:	2300      	movs	r3, #0
 801abaa:	4620      	mov	r0, r4
 801abac:	4629      	mov	r1, r5
 801abae:	f7e5 ff8f 	bl	8000ad0 <__aeabi_dcmpeq>
 801abb2:	b918      	cbnz	r0, 801abbc <__cvt+0x8c>
 801abb4:	f1c6 0601 	rsb	r6, r6, #1
 801abb8:	f8ca 6000 	str.w	r6, [sl]
 801abbc:	f8da 3000 	ldr.w	r3, [sl]
 801abc0:	4499      	add	r9, r3
 801abc2:	2200      	movs	r2, #0
 801abc4:	2300      	movs	r3, #0
 801abc6:	4620      	mov	r0, r4
 801abc8:	4629      	mov	r1, r5
 801abca:	f7e5 ff81 	bl	8000ad0 <__aeabi_dcmpeq>
 801abce:	b108      	cbz	r0, 801abd4 <__cvt+0xa4>
 801abd0:	f8cd 900c 	str.w	r9, [sp, #12]
 801abd4:	2230      	movs	r2, #48	; 0x30
 801abd6:	9b03      	ldr	r3, [sp, #12]
 801abd8:	454b      	cmp	r3, r9
 801abda:	d307      	bcc.n	801abec <__cvt+0xbc>
 801abdc:	9b03      	ldr	r3, [sp, #12]
 801abde:	4638      	mov	r0, r7
 801abe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801abe2:	1bdb      	subs	r3, r3, r7
 801abe4:	6013      	str	r3, [r2, #0]
 801abe6:	b004      	add	sp, #16
 801abe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abec:	1c59      	adds	r1, r3, #1
 801abee:	9103      	str	r1, [sp, #12]
 801abf0:	701a      	strb	r2, [r3, #0]
 801abf2:	e7f0      	b.n	801abd6 <__cvt+0xa6>

0801abf4 <__exponent>:
 801abf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801abf6:	2900      	cmp	r1, #0
 801abf8:	4603      	mov	r3, r0
 801abfa:	bfb8      	it	lt
 801abfc:	4249      	neglt	r1, r1
 801abfe:	f803 2b02 	strb.w	r2, [r3], #2
 801ac02:	bfb4      	ite	lt
 801ac04:	222d      	movlt	r2, #45	; 0x2d
 801ac06:	222b      	movge	r2, #43	; 0x2b
 801ac08:	2909      	cmp	r1, #9
 801ac0a:	7042      	strb	r2, [r0, #1]
 801ac0c:	dd2a      	ble.n	801ac64 <__exponent+0x70>
 801ac0e:	f10d 0407 	add.w	r4, sp, #7
 801ac12:	270a      	movs	r7, #10
 801ac14:	46a4      	mov	ip, r4
 801ac16:	460a      	mov	r2, r1
 801ac18:	46a6      	mov	lr, r4
 801ac1a:	3c01      	subs	r4, #1
 801ac1c:	2a63      	cmp	r2, #99	; 0x63
 801ac1e:	fb91 f6f7 	sdiv	r6, r1, r7
 801ac22:	fb07 1516 	mls	r5, r7, r6, r1
 801ac26:	4631      	mov	r1, r6
 801ac28:	f105 0530 	add.w	r5, r5, #48	; 0x30
 801ac2c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ac30:	dcf1      	bgt.n	801ac16 <__exponent+0x22>
 801ac32:	3130      	adds	r1, #48	; 0x30
 801ac34:	f1ae 0502 	sub.w	r5, lr, #2
 801ac38:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ac3c:	1c44      	adds	r4, r0, #1
 801ac3e:	4629      	mov	r1, r5
 801ac40:	4561      	cmp	r1, ip
 801ac42:	d30a      	bcc.n	801ac5a <__exponent+0x66>
 801ac44:	f10d 0209 	add.w	r2, sp, #9
 801ac48:	eba2 020e 	sub.w	r2, r2, lr
 801ac4c:	4565      	cmp	r5, ip
 801ac4e:	bf88      	it	hi
 801ac50:	2200      	movhi	r2, #0
 801ac52:	4413      	add	r3, r2
 801ac54:	1a18      	subs	r0, r3, r0
 801ac56:	b003      	add	sp, #12
 801ac58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ac62:	e7ed      	b.n	801ac40 <__exponent+0x4c>
 801ac64:	2330      	movs	r3, #48	; 0x30
 801ac66:	3130      	adds	r1, #48	; 0x30
 801ac68:	7083      	strb	r3, [r0, #2]
 801ac6a:	1d03      	adds	r3, r0, #4
 801ac6c:	70c1      	strb	r1, [r0, #3]
 801ac6e:	e7f1      	b.n	801ac54 <__exponent+0x60>

0801ac70 <_printf_float>:
 801ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac74:	ed2d 8b02 	vpush	{d8}
 801ac78:	b08d      	sub	sp, #52	; 0x34
 801ac7a:	460c      	mov	r4, r1
 801ac7c:	4616      	mov	r6, r2
 801ac7e:	461f      	mov	r7, r3
 801ac80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ac84:	4605      	mov	r5, r0
 801ac86:	f002 fed1 	bl	801da2c <_localeconv_r>
 801ac8a:	f8d0 a000 	ldr.w	sl, [r0]
 801ac8e:	4650      	mov	r0, sl
 801ac90:	f7e5 faf2 	bl	8000278 <strlen>
 801ac94:	2300      	movs	r3, #0
 801ac96:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ac9a:	ee08 0a10 	vmov	s16, r0
 801ac9e:	930a      	str	r3, [sp, #40]	; 0x28
 801aca0:	6823      	ldr	r3, [r4, #0]
 801aca2:	9305      	str	r3, [sp, #20]
 801aca4:	f8d8 3000 	ldr.w	r3, [r8]
 801aca8:	3307      	adds	r3, #7
 801acaa:	f023 0307 	bic.w	r3, r3, #7
 801acae:	f103 0208 	add.w	r2, r3, #8
 801acb2:	f8c8 2000 	str.w	r2, [r8]
 801acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801acbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801acc2:	f04f 32ff 	mov.w	r2, #4294967295
 801acc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801acca:	f8cd 8018 	str.w	r8, [sp, #24]
 801acce:	9307      	str	r3, [sp, #28]
 801acd0:	4b9e      	ldr	r3, [pc, #632]	; (801af4c <_printf_float+0x2dc>)
 801acd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801acd6:	f7e5 ff2d 	bl	8000b34 <__aeabi_dcmpun>
 801acda:	bb88      	cbnz	r0, 801ad40 <_printf_float+0xd0>
 801acdc:	f04f 32ff 	mov.w	r2, #4294967295
 801ace0:	4b9a      	ldr	r3, [pc, #616]	; (801af4c <_printf_float+0x2dc>)
 801ace2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ace6:	f7e5 ff07 	bl	8000af8 <__aeabi_dcmple>
 801acea:	bb48      	cbnz	r0, 801ad40 <_printf_float+0xd0>
 801acec:	2200      	movs	r2, #0
 801acee:	2300      	movs	r3, #0
 801acf0:	4640      	mov	r0, r8
 801acf2:	4649      	mov	r1, r9
 801acf4:	f7e5 fef6 	bl	8000ae4 <__aeabi_dcmplt>
 801acf8:	b110      	cbz	r0, 801ad00 <_printf_float+0x90>
 801acfa:	232d      	movs	r3, #45	; 0x2d
 801acfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad00:	4b93      	ldr	r3, [pc, #588]	; (801af50 <_printf_float+0x2e0>)
 801ad02:	4894      	ldr	r0, [pc, #592]	; (801af54 <_printf_float+0x2e4>)
 801ad04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ad08:	bf94      	ite	ls
 801ad0a:	4698      	movls	r8, r3
 801ad0c:	4680      	movhi	r8, r0
 801ad0e:	2303      	movs	r3, #3
 801ad10:	f04f 0900 	mov.w	r9, #0
 801ad14:	6123      	str	r3, [r4, #16]
 801ad16:	9b05      	ldr	r3, [sp, #20]
 801ad18:	f023 0204 	bic.w	r2, r3, #4
 801ad1c:	6022      	str	r2, [r4, #0]
 801ad1e:	4633      	mov	r3, r6
 801ad20:	aa0b      	add	r2, sp, #44	; 0x2c
 801ad22:	4621      	mov	r1, r4
 801ad24:	4628      	mov	r0, r5
 801ad26:	9700      	str	r7, [sp, #0]
 801ad28:	f000 f9d8 	bl	801b0dc <_printf_common>
 801ad2c:	3001      	adds	r0, #1
 801ad2e:	f040 8090 	bne.w	801ae52 <_printf_float+0x1e2>
 801ad32:	f04f 30ff 	mov.w	r0, #4294967295
 801ad36:	b00d      	add	sp, #52	; 0x34
 801ad38:	ecbd 8b02 	vpop	{d8}
 801ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad40:	4642      	mov	r2, r8
 801ad42:	464b      	mov	r3, r9
 801ad44:	4640      	mov	r0, r8
 801ad46:	4649      	mov	r1, r9
 801ad48:	f7e5 fef4 	bl	8000b34 <__aeabi_dcmpun>
 801ad4c:	b140      	cbz	r0, 801ad60 <_printf_float+0xf0>
 801ad4e:	464b      	mov	r3, r9
 801ad50:	4881      	ldr	r0, [pc, #516]	; (801af58 <_printf_float+0x2e8>)
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	bfbc      	itt	lt
 801ad56:	232d      	movlt	r3, #45	; 0x2d
 801ad58:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ad5c:	4b7f      	ldr	r3, [pc, #508]	; (801af5c <_printf_float+0x2ec>)
 801ad5e:	e7d1      	b.n	801ad04 <_printf_float+0x94>
 801ad60:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ad64:	6863      	ldr	r3, [r4, #4]
 801ad66:	9206      	str	r2, [sp, #24]
 801ad68:	1c5a      	adds	r2, r3, #1
 801ad6a:	d13f      	bne.n	801adec <_printf_float+0x17c>
 801ad6c:	2306      	movs	r3, #6
 801ad6e:	6063      	str	r3, [r4, #4]
 801ad70:	9b05      	ldr	r3, [sp, #20]
 801ad72:	4628      	mov	r0, r5
 801ad74:	6861      	ldr	r1, [r4, #4]
 801ad76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	9303      	str	r3, [sp, #12]
 801ad7e:	ab0a      	add	r3, sp, #40	; 0x28
 801ad80:	6022      	str	r2, [r4, #0]
 801ad82:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ad86:	ab09      	add	r3, sp, #36	; 0x24
 801ad88:	ec49 8b10 	vmov	d0, r8, r9
 801ad8c:	9300      	str	r3, [sp, #0]
 801ad8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ad92:	f7ff fecd 	bl	801ab30 <__cvt>
 801ad96:	9b06      	ldr	r3, [sp, #24]
 801ad98:	4680      	mov	r8, r0
 801ad9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad9c:	2b47      	cmp	r3, #71	; 0x47
 801ad9e:	d108      	bne.n	801adb2 <_printf_float+0x142>
 801ada0:	1cc8      	adds	r0, r1, #3
 801ada2:	db02      	blt.n	801adaa <_printf_float+0x13a>
 801ada4:	6863      	ldr	r3, [r4, #4]
 801ada6:	4299      	cmp	r1, r3
 801ada8:	dd41      	ble.n	801ae2e <_printf_float+0x1be>
 801adaa:	f1ab 0b02 	sub.w	fp, fp, #2
 801adae:	fa5f fb8b 	uxtb.w	fp, fp
 801adb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801adb6:	d820      	bhi.n	801adfa <_printf_float+0x18a>
 801adb8:	3901      	subs	r1, #1
 801adba:	465a      	mov	r2, fp
 801adbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801adc0:	9109      	str	r1, [sp, #36]	; 0x24
 801adc2:	f7ff ff17 	bl	801abf4 <__exponent>
 801adc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801adc8:	4681      	mov	r9, r0
 801adca:	1813      	adds	r3, r2, r0
 801adcc:	2a01      	cmp	r2, #1
 801adce:	6123      	str	r3, [r4, #16]
 801add0:	dc02      	bgt.n	801add8 <_printf_float+0x168>
 801add2:	6822      	ldr	r2, [r4, #0]
 801add4:	07d2      	lsls	r2, r2, #31
 801add6:	d501      	bpl.n	801addc <_printf_float+0x16c>
 801add8:	3301      	adds	r3, #1
 801adda:	6123      	str	r3, [r4, #16]
 801addc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d09c      	beq.n	801ad1e <_printf_float+0xae>
 801ade4:	232d      	movs	r3, #45	; 0x2d
 801ade6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801adea:	e798      	b.n	801ad1e <_printf_float+0xae>
 801adec:	9a06      	ldr	r2, [sp, #24]
 801adee:	2a47      	cmp	r2, #71	; 0x47
 801adf0:	d1be      	bne.n	801ad70 <_printf_float+0x100>
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d1bc      	bne.n	801ad70 <_printf_float+0x100>
 801adf6:	2301      	movs	r3, #1
 801adf8:	e7b9      	b.n	801ad6e <_printf_float+0xfe>
 801adfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801adfe:	d118      	bne.n	801ae32 <_printf_float+0x1c2>
 801ae00:	2900      	cmp	r1, #0
 801ae02:	6863      	ldr	r3, [r4, #4]
 801ae04:	dd0b      	ble.n	801ae1e <_printf_float+0x1ae>
 801ae06:	6121      	str	r1, [r4, #16]
 801ae08:	b913      	cbnz	r3, 801ae10 <_printf_float+0x1a0>
 801ae0a:	6822      	ldr	r2, [r4, #0]
 801ae0c:	07d0      	lsls	r0, r2, #31
 801ae0e:	d502      	bpl.n	801ae16 <_printf_float+0x1a6>
 801ae10:	3301      	adds	r3, #1
 801ae12:	440b      	add	r3, r1
 801ae14:	6123      	str	r3, [r4, #16]
 801ae16:	f04f 0900 	mov.w	r9, #0
 801ae1a:	65a1      	str	r1, [r4, #88]	; 0x58
 801ae1c:	e7de      	b.n	801addc <_printf_float+0x16c>
 801ae1e:	b913      	cbnz	r3, 801ae26 <_printf_float+0x1b6>
 801ae20:	6822      	ldr	r2, [r4, #0]
 801ae22:	07d2      	lsls	r2, r2, #31
 801ae24:	d501      	bpl.n	801ae2a <_printf_float+0x1ba>
 801ae26:	3302      	adds	r3, #2
 801ae28:	e7f4      	b.n	801ae14 <_printf_float+0x1a4>
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	e7f2      	b.n	801ae14 <_printf_float+0x1a4>
 801ae2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae34:	4299      	cmp	r1, r3
 801ae36:	db05      	blt.n	801ae44 <_printf_float+0x1d4>
 801ae38:	6823      	ldr	r3, [r4, #0]
 801ae3a:	6121      	str	r1, [r4, #16]
 801ae3c:	07d8      	lsls	r0, r3, #31
 801ae3e:	d5ea      	bpl.n	801ae16 <_printf_float+0x1a6>
 801ae40:	1c4b      	adds	r3, r1, #1
 801ae42:	e7e7      	b.n	801ae14 <_printf_float+0x1a4>
 801ae44:	2900      	cmp	r1, #0
 801ae46:	bfd4      	ite	le
 801ae48:	f1c1 0202 	rsble	r2, r1, #2
 801ae4c:	2201      	movgt	r2, #1
 801ae4e:	4413      	add	r3, r2
 801ae50:	e7e0      	b.n	801ae14 <_printf_float+0x1a4>
 801ae52:	6823      	ldr	r3, [r4, #0]
 801ae54:	055a      	lsls	r2, r3, #21
 801ae56:	d407      	bmi.n	801ae68 <_printf_float+0x1f8>
 801ae58:	6923      	ldr	r3, [r4, #16]
 801ae5a:	4642      	mov	r2, r8
 801ae5c:	4631      	mov	r1, r6
 801ae5e:	4628      	mov	r0, r5
 801ae60:	47b8      	blx	r7
 801ae62:	3001      	adds	r0, #1
 801ae64:	d12c      	bne.n	801aec0 <_printf_float+0x250>
 801ae66:	e764      	b.n	801ad32 <_printf_float+0xc2>
 801ae68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ae6c:	f240 80e0 	bls.w	801b030 <_printf_float+0x3c0>
 801ae70:	2200      	movs	r2, #0
 801ae72:	2300      	movs	r3, #0
 801ae74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ae78:	f7e5 fe2a 	bl	8000ad0 <__aeabi_dcmpeq>
 801ae7c:	2800      	cmp	r0, #0
 801ae7e:	d034      	beq.n	801aeea <_printf_float+0x27a>
 801ae80:	2301      	movs	r3, #1
 801ae82:	4a37      	ldr	r2, [pc, #220]	; (801af60 <_printf_float+0x2f0>)
 801ae84:	4631      	mov	r1, r6
 801ae86:	4628      	mov	r0, r5
 801ae88:	47b8      	blx	r7
 801ae8a:	3001      	adds	r0, #1
 801ae8c:	f43f af51 	beq.w	801ad32 <_printf_float+0xc2>
 801ae90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae94:	429a      	cmp	r2, r3
 801ae96:	db02      	blt.n	801ae9e <_printf_float+0x22e>
 801ae98:	6823      	ldr	r3, [r4, #0]
 801ae9a:	07d8      	lsls	r0, r3, #31
 801ae9c:	d510      	bpl.n	801aec0 <_printf_float+0x250>
 801ae9e:	ee18 3a10 	vmov	r3, s16
 801aea2:	4652      	mov	r2, sl
 801aea4:	4631      	mov	r1, r6
 801aea6:	4628      	mov	r0, r5
 801aea8:	47b8      	blx	r7
 801aeaa:	3001      	adds	r0, #1
 801aeac:	f43f af41 	beq.w	801ad32 <_printf_float+0xc2>
 801aeb0:	f04f 0800 	mov.w	r8, #0
 801aeb4:	f104 091a 	add.w	r9, r4, #26
 801aeb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aeba:	3b01      	subs	r3, #1
 801aebc:	4543      	cmp	r3, r8
 801aebe:	dc09      	bgt.n	801aed4 <_printf_float+0x264>
 801aec0:	6823      	ldr	r3, [r4, #0]
 801aec2:	079b      	lsls	r3, r3, #30
 801aec4:	f100 8105 	bmi.w	801b0d2 <_printf_float+0x462>
 801aec8:	68e0      	ldr	r0, [r4, #12]
 801aeca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aecc:	4298      	cmp	r0, r3
 801aece:	bfb8      	it	lt
 801aed0:	4618      	movlt	r0, r3
 801aed2:	e730      	b.n	801ad36 <_printf_float+0xc6>
 801aed4:	2301      	movs	r3, #1
 801aed6:	464a      	mov	r2, r9
 801aed8:	4631      	mov	r1, r6
 801aeda:	4628      	mov	r0, r5
 801aedc:	47b8      	blx	r7
 801aede:	3001      	adds	r0, #1
 801aee0:	f43f af27 	beq.w	801ad32 <_printf_float+0xc2>
 801aee4:	f108 0801 	add.w	r8, r8, #1
 801aee8:	e7e6      	b.n	801aeb8 <_printf_float+0x248>
 801aeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	dc39      	bgt.n	801af64 <_printf_float+0x2f4>
 801aef0:	2301      	movs	r3, #1
 801aef2:	4a1b      	ldr	r2, [pc, #108]	; (801af60 <_printf_float+0x2f0>)
 801aef4:	4631      	mov	r1, r6
 801aef6:	4628      	mov	r0, r5
 801aef8:	47b8      	blx	r7
 801aefa:	3001      	adds	r0, #1
 801aefc:	f43f af19 	beq.w	801ad32 <_printf_float+0xc2>
 801af00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af04:	4313      	orrs	r3, r2
 801af06:	d102      	bne.n	801af0e <_printf_float+0x29e>
 801af08:	6823      	ldr	r3, [r4, #0]
 801af0a:	07d9      	lsls	r1, r3, #31
 801af0c:	d5d8      	bpl.n	801aec0 <_printf_float+0x250>
 801af0e:	ee18 3a10 	vmov	r3, s16
 801af12:	4652      	mov	r2, sl
 801af14:	4631      	mov	r1, r6
 801af16:	4628      	mov	r0, r5
 801af18:	47b8      	blx	r7
 801af1a:	3001      	adds	r0, #1
 801af1c:	f43f af09 	beq.w	801ad32 <_printf_float+0xc2>
 801af20:	f04f 0900 	mov.w	r9, #0
 801af24:	f104 0a1a 	add.w	sl, r4, #26
 801af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af2a:	425b      	negs	r3, r3
 801af2c:	454b      	cmp	r3, r9
 801af2e:	dc01      	bgt.n	801af34 <_printf_float+0x2c4>
 801af30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af32:	e792      	b.n	801ae5a <_printf_float+0x1ea>
 801af34:	2301      	movs	r3, #1
 801af36:	4652      	mov	r2, sl
 801af38:	4631      	mov	r1, r6
 801af3a:	4628      	mov	r0, r5
 801af3c:	47b8      	blx	r7
 801af3e:	3001      	adds	r0, #1
 801af40:	f43f aef7 	beq.w	801ad32 <_printf_float+0xc2>
 801af44:	f109 0901 	add.w	r9, r9, #1
 801af48:	e7ee      	b.n	801af28 <_printf_float+0x2b8>
 801af4a:	bf00      	nop
 801af4c:	7fefffff 	.word	0x7fefffff
 801af50:	08074458 	.word	0x08074458
 801af54:	0807445c 	.word	0x0807445c
 801af58:	08074464 	.word	0x08074464
 801af5c:	08074460 	.word	0x08074460
 801af60:	08074468 	.word	0x08074468
 801af64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801af68:	429a      	cmp	r2, r3
 801af6a:	bfa8      	it	ge
 801af6c:	461a      	movge	r2, r3
 801af6e:	2a00      	cmp	r2, #0
 801af70:	4691      	mov	r9, r2
 801af72:	dc37      	bgt.n	801afe4 <_printf_float+0x374>
 801af74:	f04f 0b00 	mov.w	fp, #0
 801af78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801af7c:	f104 021a 	add.w	r2, r4, #26
 801af80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801af82:	9305      	str	r3, [sp, #20]
 801af84:	eba3 0309 	sub.w	r3, r3, r9
 801af88:	455b      	cmp	r3, fp
 801af8a:	dc33      	bgt.n	801aff4 <_printf_float+0x384>
 801af8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af90:	429a      	cmp	r2, r3
 801af92:	db3b      	blt.n	801b00c <_printf_float+0x39c>
 801af94:	6823      	ldr	r3, [r4, #0]
 801af96:	07da      	lsls	r2, r3, #31
 801af98:	d438      	bmi.n	801b00c <_printf_float+0x39c>
 801af9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af9c:	9a05      	ldr	r2, [sp, #20]
 801af9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801afa0:	1a9a      	subs	r2, r3, r2
 801afa2:	eba3 0901 	sub.w	r9, r3, r1
 801afa6:	4591      	cmp	r9, r2
 801afa8:	bfa8      	it	ge
 801afaa:	4691      	movge	r9, r2
 801afac:	f1b9 0f00 	cmp.w	r9, #0
 801afb0:	dc35      	bgt.n	801b01e <_printf_float+0x3ae>
 801afb2:	f04f 0800 	mov.w	r8, #0
 801afb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801afba:	f104 0a1a 	add.w	sl, r4, #26
 801afbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801afc2:	1a9b      	subs	r3, r3, r2
 801afc4:	eba3 0309 	sub.w	r3, r3, r9
 801afc8:	4543      	cmp	r3, r8
 801afca:	f77f af79 	ble.w	801aec0 <_printf_float+0x250>
 801afce:	2301      	movs	r3, #1
 801afd0:	4652      	mov	r2, sl
 801afd2:	4631      	mov	r1, r6
 801afd4:	4628      	mov	r0, r5
 801afd6:	47b8      	blx	r7
 801afd8:	3001      	adds	r0, #1
 801afda:	f43f aeaa 	beq.w	801ad32 <_printf_float+0xc2>
 801afde:	f108 0801 	add.w	r8, r8, #1
 801afe2:	e7ec      	b.n	801afbe <_printf_float+0x34e>
 801afe4:	4613      	mov	r3, r2
 801afe6:	4631      	mov	r1, r6
 801afe8:	4642      	mov	r2, r8
 801afea:	4628      	mov	r0, r5
 801afec:	47b8      	blx	r7
 801afee:	3001      	adds	r0, #1
 801aff0:	d1c0      	bne.n	801af74 <_printf_float+0x304>
 801aff2:	e69e      	b.n	801ad32 <_printf_float+0xc2>
 801aff4:	2301      	movs	r3, #1
 801aff6:	4631      	mov	r1, r6
 801aff8:	4628      	mov	r0, r5
 801affa:	9205      	str	r2, [sp, #20]
 801affc:	47b8      	blx	r7
 801affe:	3001      	adds	r0, #1
 801b000:	f43f ae97 	beq.w	801ad32 <_printf_float+0xc2>
 801b004:	f10b 0b01 	add.w	fp, fp, #1
 801b008:	9a05      	ldr	r2, [sp, #20]
 801b00a:	e7b9      	b.n	801af80 <_printf_float+0x310>
 801b00c:	ee18 3a10 	vmov	r3, s16
 801b010:	4652      	mov	r2, sl
 801b012:	4631      	mov	r1, r6
 801b014:	4628      	mov	r0, r5
 801b016:	47b8      	blx	r7
 801b018:	3001      	adds	r0, #1
 801b01a:	d1be      	bne.n	801af9a <_printf_float+0x32a>
 801b01c:	e689      	b.n	801ad32 <_printf_float+0xc2>
 801b01e:	9a05      	ldr	r2, [sp, #20]
 801b020:	464b      	mov	r3, r9
 801b022:	4631      	mov	r1, r6
 801b024:	4628      	mov	r0, r5
 801b026:	4442      	add	r2, r8
 801b028:	47b8      	blx	r7
 801b02a:	3001      	adds	r0, #1
 801b02c:	d1c1      	bne.n	801afb2 <_printf_float+0x342>
 801b02e:	e680      	b.n	801ad32 <_printf_float+0xc2>
 801b030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b032:	2a01      	cmp	r2, #1
 801b034:	dc01      	bgt.n	801b03a <_printf_float+0x3ca>
 801b036:	07db      	lsls	r3, r3, #31
 801b038:	d538      	bpl.n	801b0ac <_printf_float+0x43c>
 801b03a:	2301      	movs	r3, #1
 801b03c:	4642      	mov	r2, r8
 801b03e:	4631      	mov	r1, r6
 801b040:	4628      	mov	r0, r5
 801b042:	47b8      	blx	r7
 801b044:	3001      	adds	r0, #1
 801b046:	f43f ae74 	beq.w	801ad32 <_printf_float+0xc2>
 801b04a:	ee18 3a10 	vmov	r3, s16
 801b04e:	4652      	mov	r2, sl
 801b050:	4631      	mov	r1, r6
 801b052:	4628      	mov	r0, r5
 801b054:	47b8      	blx	r7
 801b056:	3001      	adds	r0, #1
 801b058:	f43f ae6b 	beq.w	801ad32 <_printf_float+0xc2>
 801b05c:	2200      	movs	r2, #0
 801b05e:	2300      	movs	r3, #0
 801b060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b064:	f7e5 fd34 	bl	8000ad0 <__aeabi_dcmpeq>
 801b068:	b9d8      	cbnz	r0, 801b0a2 <_printf_float+0x432>
 801b06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b06c:	f108 0201 	add.w	r2, r8, #1
 801b070:	3b01      	subs	r3, #1
 801b072:	4631      	mov	r1, r6
 801b074:	4628      	mov	r0, r5
 801b076:	47b8      	blx	r7
 801b078:	3001      	adds	r0, #1
 801b07a:	d10e      	bne.n	801b09a <_printf_float+0x42a>
 801b07c:	e659      	b.n	801ad32 <_printf_float+0xc2>
 801b07e:	2301      	movs	r3, #1
 801b080:	4652      	mov	r2, sl
 801b082:	4631      	mov	r1, r6
 801b084:	4628      	mov	r0, r5
 801b086:	47b8      	blx	r7
 801b088:	3001      	adds	r0, #1
 801b08a:	f43f ae52 	beq.w	801ad32 <_printf_float+0xc2>
 801b08e:	f108 0801 	add.w	r8, r8, #1
 801b092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b094:	3b01      	subs	r3, #1
 801b096:	4543      	cmp	r3, r8
 801b098:	dcf1      	bgt.n	801b07e <_printf_float+0x40e>
 801b09a:	464b      	mov	r3, r9
 801b09c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b0a0:	e6dc      	b.n	801ae5c <_printf_float+0x1ec>
 801b0a2:	f04f 0800 	mov.w	r8, #0
 801b0a6:	f104 0a1a 	add.w	sl, r4, #26
 801b0aa:	e7f2      	b.n	801b092 <_printf_float+0x422>
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	4642      	mov	r2, r8
 801b0b0:	e7df      	b.n	801b072 <_printf_float+0x402>
 801b0b2:	2301      	movs	r3, #1
 801b0b4:	464a      	mov	r2, r9
 801b0b6:	4631      	mov	r1, r6
 801b0b8:	4628      	mov	r0, r5
 801b0ba:	47b8      	blx	r7
 801b0bc:	3001      	adds	r0, #1
 801b0be:	f43f ae38 	beq.w	801ad32 <_printf_float+0xc2>
 801b0c2:	f108 0801 	add.w	r8, r8, #1
 801b0c6:	68e3      	ldr	r3, [r4, #12]
 801b0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b0ca:	1a5b      	subs	r3, r3, r1
 801b0cc:	4543      	cmp	r3, r8
 801b0ce:	dcf0      	bgt.n	801b0b2 <_printf_float+0x442>
 801b0d0:	e6fa      	b.n	801aec8 <_printf_float+0x258>
 801b0d2:	f04f 0800 	mov.w	r8, #0
 801b0d6:	f104 0919 	add.w	r9, r4, #25
 801b0da:	e7f4      	b.n	801b0c6 <_printf_float+0x456>

0801b0dc <_printf_common>:
 801b0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0e0:	4616      	mov	r6, r2
 801b0e2:	4699      	mov	r9, r3
 801b0e4:	688a      	ldr	r2, [r1, #8]
 801b0e6:	4607      	mov	r7, r0
 801b0e8:	690b      	ldr	r3, [r1, #16]
 801b0ea:	460c      	mov	r4, r1
 801b0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b0f0:	4293      	cmp	r3, r2
 801b0f2:	bfb8      	it	lt
 801b0f4:	4613      	movlt	r3, r2
 801b0f6:	6033      	str	r3, [r6, #0]
 801b0f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b0fc:	b10a      	cbz	r2, 801b102 <_printf_common+0x26>
 801b0fe:	3301      	adds	r3, #1
 801b100:	6033      	str	r3, [r6, #0]
 801b102:	6823      	ldr	r3, [r4, #0]
 801b104:	0699      	lsls	r1, r3, #26
 801b106:	bf42      	ittt	mi
 801b108:	6833      	ldrmi	r3, [r6, #0]
 801b10a:	3302      	addmi	r3, #2
 801b10c:	6033      	strmi	r3, [r6, #0]
 801b10e:	6825      	ldr	r5, [r4, #0]
 801b110:	f015 0506 	ands.w	r5, r5, #6
 801b114:	d106      	bne.n	801b124 <_printf_common+0x48>
 801b116:	f104 0a19 	add.w	sl, r4, #25
 801b11a:	68e3      	ldr	r3, [r4, #12]
 801b11c:	6832      	ldr	r2, [r6, #0]
 801b11e:	1a9b      	subs	r3, r3, r2
 801b120:	42ab      	cmp	r3, r5
 801b122:	dc29      	bgt.n	801b178 <_printf_common+0x9c>
 801b124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b128:	1e13      	subs	r3, r2, #0
 801b12a:	6822      	ldr	r2, [r4, #0]
 801b12c:	bf18      	it	ne
 801b12e:	2301      	movne	r3, #1
 801b130:	0692      	lsls	r2, r2, #26
 801b132:	d42e      	bmi.n	801b192 <_printf_common+0xb6>
 801b134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b138:	4649      	mov	r1, r9
 801b13a:	4638      	mov	r0, r7
 801b13c:	47c0      	blx	r8
 801b13e:	3001      	adds	r0, #1
 801b140:	d021      	beq.n	801b186 <_printf_common+0xaa>
 801b142:	6823      	ldr	r3, [r4, #0]
 801b144:	341a      	adds	r4, #26
 801b146:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801b14a:	f003 0306 	and.w	r3, r3, #6
 801b14e:	6832      	ldr	r2, [r6, #0]
 801b150:	2600      	movs	r6, #0
 801b152:	2b04      	cmp	r3, #4
 801b154:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801b158:	bf08      	it	eq
 801b15a:	1aad      	subeq	r5, r5, r2
 801b15c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801b160:	bf14      	ite	ne
 801b162:	2500      	movne	r5, #0
 801b164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b168:	4293      	cmp	r3, r2
 801b16a:	bfc4      	itt	gt
 801b16c:	1a9b      	subgt	r3, r3, r2
 801b16e:	18ed      	addgt	r5, r5, r3
 801b170:	42b5      	cmp	r5, r6
 801b172:	d11a      	bne.n	801b1aa <_printf_common+0xce>
 801b174:	2000      	movs	r0, #0
 801b176:	e008      	b.n	801b18a <_printf_common+0xae>
 801b178:	2301      	movs	r3, #1
 801b17a:	4652      	mov	r2, sl
 801b17c:	4649      	mov	r1, r9
 801b17e:	4638      	mov	r0, r7
 801b180:	47c0      	blx	r8
 801b182:	3001      	adds	r0, #1
 801b184:	d103      	bne.n	801b18e <_printf_common+0xb2>
 801b186:	f04f 30ff 	mov.w	r0, #4294967295
 801b18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b18e:	3501      	adds	r5, #1
 801b190:	e7c3      	b.n	801b11a <_printf_common+0x3e>
 801b192:	18e1      	adds	r1, r4, r3
 801b194:	1c5a      	adds	r2, r3, #1
 801b196:	2030      	movs	r0, #48	; 0x30
 801b198:	3302      	adds	r3, #2
 801b19a:	4422      	add	r2, r4
 801b19c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b1a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b1a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b1a8:	e7c4      	b.n	801b134 <_printf_common+0x58>
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	4622      	mov	r2, r4
 801b1ae:	4649      	mov	r1, r9
 801b1b0:	4638      	mov	r0, r7
 801b1b2:	47c0      	blx	r8
 801b1b4:	3001      	adds	r0, #1
 801b1b6:	d0e6      	beq.n	801b186 <_printf_common+0xaa>
 801b1b8:	3601      	adds	r6, #1
 801b1ba:	e7d9      	b.n	801b170 <_printf_common+0x94>

0801b1bc <_printf_i>:
 801b1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b1c0:	7e0f      	ldrb	r7, [r1, #24]
 801b1c2:	4691      	mov	r9, r2
 801b1c4:	4680      	mov	r8, r0
 801b1c6:	460c      	mov	r4, r1
 801b1c8:	2f78      	cmp	r7, #120	; 0x78
 801b1ca:	469a      	mov	sl, r3
 801b1cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b1ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b1d2:	d807      	bhi.n	801b1e4 <_printf_i+0x28>
 801b1d4:	2f62      	cmp	r7, #98	; 0x62
 801b1d6:	d80a      	bhi.n	801b1ee <_printf_i+0x32>
 801b1d8:	2f00      	cmp	r7, #0
 801b1da:	f000 80d8 	beq.w	801b38e <_printf_i+0x1d2>
 801b1de:	2f58      	cmp	r7, #88	; 0x58
 801b1e0:	f000 80a3 	beq.w	801b32a <_printf_i+0x16e>
 801b1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b1e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b1ec:	e03a      	b.n	801b264 <_printf_i+0xa8>
 801b1ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b1f2:	2b15      	cmp	r3, #21
 801b1f4:	d8f6      	bhi.n	801b1e4 <_printf_i+0x28>
 801b1f6:	a101      	add	r1, pc, #4	; (adr r1, 801b1fc <_printf_i+0x40>)
 801b1f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b1fc:	0801b255 	.word	0x0801b255
 801b200:	0801b269 	.word	0x0801b269
 801b204:	0801b1e5 	.word	0x0801b1e5
 801b208:	0801b1e5 	.word	0x0801b1e5
 801b20c:	0801b1e5 	.word	0x0801b1e5
 801b210:	0801b1e5 	.word	0x0801b1e5
 801b214:	0801b269 	.word	0x0801b269
 801b218:	0801b1e5 	.word	0x0801b1e5
 801b21c:	0801b1e5 	.word	0x0801b1e5
 801b220:	0801b1e5 	.word	0x0801b1e5
 801b224:	0801b1e5 	.word	0x0801b1e5
 801b228:	0801b375 	.word	0x0801b375
 801b22c:	0801b299 	.word	0x0801b299
 801b230:	0801b357 	.word	0x0801b357
 801b234:	0801b1e5 	.word	0x0801b1e5
 801b238:	0801b1e5 	.word	0x0801b1e5
 801b23c:	0801b397 	.word	0x0801b397
 801b240:	0801b1e5 	.word	0x0801b1e5
 801b244:	0801b299 	.word	0x0801b299
 801b248:	0801b1e5 	.word	0x0801b1e5
 801b24c:	0801b1e5 	.word	0x0801b1e5
 801b250:	0801b35f 	.word	0x0801b35f
 801b254:	682b      	ldr	r3, [r5, #0]
 801b256:	1d1a      	adds	r2, r3, #4
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	602a      	str	r2, [r5, #0]
 801b25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b264:	2301      	movs	r3, #1
 801b266:	e0a3      	b.n	801b3b0 <_printf_i+0x1f4>
 801b268:	6820      	ldr	r0, [r4, #0]
 801b26a:	6829      	ldr	r1, [r5, #0]
 801b26c:	0606      	lsls	r6, r0, #24
 801b26e:	f101 0304 	add.w	r3, r1, #4
 801b272:	d50a      	bpl.n	801b28a <_printf_i+0xce>
 801b274:	680e      	ldr	r6, [r1, #0]
 801b276:	602b      	str	r3, [r5, #0]
 801b278:	2e00      	cmp	r6, #0
 801b27a:	da03      	bge.n	801b284 <_printf_i+0xc8>
 801b27c:	232d      	movs	r3, #45	; 0x2d
 801b27e:	4276      	negs	r6, r6
 801b280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b284:	485e      	ldr	r0, [pc, #376]	; (801b400 <_printf_i+0x244>)
 801b286:	230a      	movs	r3, #10
 801b288:	e019      	b.n	801b2be <_printf_i+0x102>
 801b28a:	680e      	ldr	r6, [r1, #0]
 801b28c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b290:	602b      	str	r3, [r5, #0]
 801b292:	bf18      	it	ne
 801b294:	b236      	sxthne	r6, r6
 801b296:	e7ef      	b.n	801b278 <_printf_i+0xbc>
 801b298:	682b      	ldr	r3, [r5, #0]
 801b29a:	6820      	ldr	r0, [r4, #0]
 801b29c:	1d19      	adds	r1, r3, #4
 801b29e:	6029      	str	r1, [r5, #0]
 801b2a0:	0601      	lsls	r1, r0, #24
 801b2a2:	d501      	bpl.n	801b2a8 <_printf_i+0xec>
 801b2a4:	681e      	ldr	r6, [r3, #0]
 801b2a6:	e002      	b.n	801b2ae <_printf_i+0xf2>
 801b2a8:	0646      	lsls	r6, r0, #25
 801b2aa:	d5fb      	bpl.n	801b2a4 <_printf_i+0xe8>
 801b2ac:	881e      	ldrh	r6, [r3, #0]
 801b2ae:	2f6f      	cmp	r7, #111	; 0x6f
 801b2b0:	4853      	ldr	r0, [pc, #332]	; (801b400 <_printf_i+0x244>)
 801b2b2:	bf0c      	ite	eq
 801b2b4:	2308      	moveq	r3, #8
 801b2b6:	230a      	movne	r3, #10
 801b2b8:	2100      	movs	r1, #0
 801b2ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b2be:	6865      	ldr	r5, [r4, #4]
 801b2c0:	2d00      	cmp	r5, #0
 801b2c2:	60a5      	str	r5, [r4, #8]
 801b2c4:	bfa2      	ittt	ge
 801b2c6:	6821      	ldrge	r1, [r4, #0]
 801b2c8:	f021 0104 	bicge.w	r1, r1, #4
 801b2cc:	6021      	strge	r1, [r4, #0]
 801b2ce:	b90e      	cbnz	r6, 801b2d4 <_printf_i+0x118>
 801b2d0:	2d00      	cmp	r5, #0
 801b2d2:	d04d      	beq.n	801b370 <_printf_i+0x1b4>
 801b2d4:	4615      	mov	r5, r2
 801b2d6:	fbb6 f1f3 	udiv	r1, r6, r3
 801b2da:	fb03 6711 	mls	r7, r3, r1, r6
 801b2de:	5dc7      	ldrb	r7, [r0, r7]
 801b2e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b2e4:	4637      	mov	r7, r6
 801b2e6:	460e      	mov	r6, r1
 801b2e8:	42bb      	cmp	r3, r7
 801b2ea:	d9f4      	bls.n	801b2d6 <_printf_i+0x11a>
 801b2ec:	2b08      	cmp	r3, #8
 801b2ee:	d10b      	bne.n	801b308 <_printf_i+0x14c>
 801b2f0:	6823      	ldr	r3, [r4, #0]
 801b2f2:	07de      	lsls	r6, r3, #31
 801b2f4:	d508      	bpl.n	801b308 <_printf_i+0x14c>
 801b2f6:	6923      	ldr	r3, [r4, #16]
 801b2f8:	6861      	ldr	r1, [r4, #4]
 801b2fa:	4299      	cmp	r1, r3
 801b2fc:	bfde      	ittt	le
 801b2fe:	2330      	movle	r3, #48	; 0x30
 801b300:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b304:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b308:	1b52      	subs	r2, r2, r5
 801b30a:	6122      	str	r2, [r4, #16]
 801b30c:	464b      	mov	r3, r9
 801b30e:	aa03      	add	r2, sp, #12
 801b310:	4621      	mov	r1, r4
 801b312:	4640      	mov	r0, r8
 801b314:	f8cd a000 	str.w	sl, [sp]
 801b318:	f7ff fee0 	bl	801b0dc <_printf_common>
 801b31c:	3001      	adds	r0, #1
 801b31e:	d14c      	bne.n	801b3ba <_printf_i+0x1fe>
 801b320:	f04f 30ff 	mov.w	r0, #4294967295
 801b324:	b004      	add	sp, #16
 801b326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b32a:	4835      	ldr	r0, [pc, #212]	; (801b400 <_printf_i+0x244>)
 801b32c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b330:	6829      	ldr	r1, [r5, #0]
 801b332:	6823      	ldr	r3, [r4, #0]
 801b334:	f851 6b04 	ldr.w	r6, [r1], #4
 801b338:	6029      	str	r1, [r5, #0]
 801b33a:	061d      	lsls	r5, r3, #24
 801b33c:	d514      	bpl.n	801b368 <_printf_i+0x1ac>
 801b33e:	07df      	lsls	r7, r3, #31
 801b340:	bf44      	itt	mi
 801b342:	f043 0320 	orrmi.w	r3, r3, #32
 801b346:	6023      	strmi	r3, [r4, #0]
 801b348:	b91e      	cbnz	r6, 801b352 <_printf_i+0x196>
 801b34a:	6823      	ldr	r3, [r4, #0]
 801b34c:	f023 0320 	bic.w	r3, r3, #32
 801b350:	6023      	str	r3, [r4, #0]
 801b352:	2310      	movs	r3, #16
 801b354:	e7b0      	b.n	801b2b8 <_printf_i+0xfc>
 801b356:	6823      	ldr	r3, [r4, #0]
 801b358:	f043 0320 	orr.w	r3, r3, #32
 801b35c:	6023      	str	r3, [r4, #0]
 801b35e:	2378      	movs	r3, #120	; 0x78
 801b360:	4828      	ldr	r0, [pc, #160]	; (801b404 <_printf_i+0x248>)
 801b362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b366:	e7e3      	b.n	801b330 <_printf_i+0x174>
 801b368:	0659      	lsls	r1, r3, #25
 801b36a:	bf48      	it	mi
 801b36c:	b2b6      	uxthmi	r6, r6
 801b36e:	e7e6      	b.n	801b33e <_printf_i+0x182>
 801b370:	4615      	mov	r5, r2
 801b372:	e7bb      	b.n	801b2ec <_printf_i+0x130>
 801b374:	682b      	ldr	r3, [r5, #0]
 801b376:	6826      	ldr	r6, [r4, #0]
 801b378:	1d18      	adds	r0, r3, #4
 801b37a:	6961      	ldr	r1, [r4, #20]
 801b37c:	6028      	str	r0, [r5, #0]
 801b37e:	0635      	lsls	r5, r6, #24
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	d501      	bpl.n	801b388 <_printf_i+0x1cc>
 801b384:	6019      	str	r1, [r3, #0]
 801b386:	e002      	b.n	801b38e <_printf_i+0x1d2>
 801b388:	0670      	lsls	r0, r6, #25
 801b38a:	d5fb      	bpl.n	801b384 <_printf_i+0x1c8>
 801b38c:	8019      	strh	r1, [r3, #0]
 801b38e:	2300      	movs	r3, #0
 801b390:	4615      	mov	r5, r2
 801b392:	6123      	str	r3, [r4, #16]
 801b394:	e7ba      	b.n	801b30c <_printf_i+0x150>
 801b396:	682b      	ldr	r3, [r5, #0]
 801b398:	2100      	movs	r1, #0
 801b39a:	1d1a      	adds	r2, r3, #4
 801b39c:	602a      	str	r2, [r5, #0]
 801b39e:	681d      	ldr	r5, [r3, #0]
 801b3a0:	6862      	ldr	r2, [r4, #4]
 801b3a2:	4628      	mov	r0, r5
 801b3a4:	f002 fb58 	bl	801da58 <memchr>
 801b3a8:	b108      	cbz	r0, 801b3ae <_printf_i+0x1f2>
 801b3aa:	1b40      	subs	r0, r0, r5
 801b3ac:	6060      	str	r0, [r4, #4]
 801b3ae:	6863      	ldr	r3, [r4, #4]
 801b3b0:	6123      	str	r3, [r4, #16]
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3b8:	e7a8      	b.n	801b30c <_printf_i+0x150>
 801b3ba:	6923      	ldr	r3, [r4, #16]
 801b3bc:	462a      	mov	r2, r5
 801b3be:	4649      	mov	r1, r9
 801b3c0:	4640      	mov	r0, r8
 801b3c2:	47d0      	blx	sl
 801b3c4:	3001      	adds	r0, #1
 801b3c6:	d0ab      	beq.n	801b320 <_printf_i+0x164>
 801b3c8:	6823      	ldr	r3, [r4, #0]
 801b3ca:	079b      	lsls	r3, r3, #30
 801b3cc:	d413      	bmi.n	801b3f6 <_printf_i+0x23a>
 801b3ce:	68e0      	ldr	r0, [r4, #12]
 801b3d0:	9b03      	ldr	r3, [sp, #12]
 801b3d2:	4298      	cmp	r0, r3
 801b3d4:	bfb8      	it	lt
 801b3d6:	4618      	movlt	r0, r3
 801b3d8:	e7a4      	b.n	801b324 <_printf_i+0x168>
 801b3da:	2301      	movs	r3, #1
 801b3dc:	4632      	mov	r2, r6
 801b3de:	4649      	mov	r1, r9
 801b3e0:	4640      	mov	r0, r8
 801b3e2:	47d0      	blx	sl
 801b3e4:	3001      	adds	r0, #1
 801b3e6:	d09b      	beq.n	801b320 <_printf_i+0x164>
 801b3e8:	3501      	adds	r5, #1
 801b3ea:	68e3      	ldr	r3, [r4, #12]
 801b3ec:	9903      	ldr	r1, [sp, #12]
 801b3ee:	1a5b      	subs	r3, r3, r1
 801b3f0:	42ab      	cmp	r3, r5
 801b3f2:	dcf2      	bgt.n	801b3da <_printf_i+0x21e>
 801b3f4:	e7eb      	b.n	801b3ce <_printf_i+0x212>
 801b3f6:	2500      	movs	r5, #0
 801b3f8:	f104 0619 	add.w	r6, r4, #25
 801b3fc:	e7f5      	b.n	801b3ea <_printf_i+0x22e>
 801b3fe:	bf00      	nop
 801b400:	0807446a 	.word	0x0807446a
 801b404:	0807447b 	.word	0x0807447b

0801b408 <_scanf_float>:
 801b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b40c:	b087      	sub	sp, #28
 801b40e:	4617      	mov	r7, r2
 801b410:	468b      	mov	fp, r1
 801b412:	4680      	mov	r8, r0
 801b414:	9303      	str	r3, [sp, #12]
 801b416:	460c      	mov	r4, r1
 801b418:	688b      	ldr	r3, [r1, #8]
 801b41a:	1e5a      	subs	r2, r3, #1
 801b41c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b420:	bf8b      	itete	hi
 801b422:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b426:	2300      	movls	r3, #0
 801b428:	195b      	addhi	r3, r3, r5
 801b42a:	9302      	strls	r3, [sp, #8]
 801b42c:	f04f 0500 	mov.w	r5, #0
 801b430:	bf84      	itt	hi
 801b432:	9302      	strhi	r3, [sp, #8]
 801b434:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b438:	46aa      	mov	sl, r5
 801b43a:	46a9      	mov	r9, r5
 801b43c:	bf88      	it	hi
 801b43e:	608b      	strhi	r3, [r1, #8]
 801b440:	680b      	ldr	r3, [r1, #0]
 801b442:	9501      	str	r5, [sp, #4]
 801b444:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b448:	f84b 3b1c 	str.w	r3, [fp], #28
 801b44c:	465e      	mov	r6, fp
 801b44e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b452:	68a2      	ldr	r2, [r4, #8]
 801b454:	b152      	cbz	r2, 801b46c <_scanf_float+0x64>
 801b456:	683b      	ldr	r3, [r7, #0]
 801b458:	781b      	ldrb	r3, [r3, #0]
 801b45a:	2b4e      	cmp	r3, #78	; 0x4e
 801b45c:	d864      	bhi.n	801b528 <_scanf_float+0x120>
 801b45e:	2b40      	cmp	r3, #64	; 0x40
 801b460:	d83c      	bhi.n	801b4dc <_scanf_float+0xd4>
 801b462:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b466:	b2c8      	uxtb	r0, r1
 801b468:	280e      	cmp	r0, #14
 801b46a:	d93a      	bls.n	801b4e2 <_scanf_float+0xda>
 801b46c:	f1b9 0f00 	cmp.w	r9, #0
 801b470:	d003      	beq.n	801b47a <_scanf_float+0x72>
 801b472:	6823      	ldr	r3, [r4, #0]
 801b474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b478:	6023      	str	r3, [r4, #0]
 801b47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b47e:	f1ba 0f01 	cmp.w	sl, #1
 801b482:	f200 8113 	bhi.w	801b6ac <_scanf_float+0x2a4>
 801b486:	455e      	cmp	r6, fp
 801b488:	f200 8105 	bhi.w	801b696 <_scanf_float+0x28e>
 801b48c:	2501      	movs	r5, #1
 801b48e:	4628      	mov	r0, r5
 801b490:	b007      	add	sp, #28
 801b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b496:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b49a:	2a0d      	cmp	r2, #13
 801b49c:	d8e6      	bhi.n	801b46c <_scanf_float+0x64>
 801b49e:	a101      	add	r1, pc, #4	; (adr r1, 801b4a4 <_scanf_float+0x9c>)
 801b4a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b4a4:	0801b5e3 	.word	0x0801b5e3
 801b4a8:	0801b46d 	.word	0x0801b46d
 801b4ac:	0801b46d 	.word	0x0801b46d
 801b4b0:	0801b46d 	.word	0x0801b46d
 801b4b4:	0801b643 	.word	0x0801b643
 801b4b8:	0801b61b 	.word	0x0801b61b
 801b4bc:	0801b46d 	.word	0x0801b46d
 801b4c0:	0801b46d 	.word	0x0801b46d
 801b4c4:	0801b5f1 	.word	0x0801b5f1
 801b4c8:	0801b46d 	.word	0x0801b46d
 801b4cc:	0801b46d 	.word	0x0801b46d
 801b4d0:	0801b46d 	.word	0x0801b46d
 801b4d4:	0801b46d 	.word	0x0801b46d
 801b4d8:	0801b5a9 	.word	0x0801b5a9
 801b4dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b4e0:	e7db      	b.n	801b49a <_scanf_float+0x92>
 801b4e2:	290e      	cmp	r1, #14
 801b4e4:	d8c2      	bhi.n	801b46c <_scanf_float+0x64>
 801b4e6:	a001      	add	r0, pc, #4	; (adr r0, 801b4ec <_scanf_float+0xe4>)
 801b4e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b4ec:	0801b59b 	.word	0x0801b59b
 801b4f0:	0801b46d 	.word	0x0801b46d
 801b4f4:	0801b59b 	.word	0x0801b59b
 801b4f8:	0801b62f 	.word	0x0801b62f
 801b4fc:	0801b46d 	.word	0x0801b46d
 801b500:	0801b549 	.word	0x0801b549
 801b504:	0801b585 	.word	0x0801b585
 801b508:	0801b585 	.word	0x0801b585
 801b50c:	0801b585 	.word	0x0801b585
 801b510:	0801b585 	.word	0x0801b585
 801b514:	0801b585 	.word	0x0801b585
 801b518:	0801b585 	.word	0x0801b585
 801b51c:	0801b585 	.word	0x0801b585
 801b520:	0801b585 	.word	0x0801b585
 801b524:	0801b585 	.word	0x0801b585
 801b528:	2b6e      	cmp	r3, #110	; 0x6e
 801b52a:	d809      	bhi.n	801b540 <_scanf_float+0x138>
 801b52c:	2b60      	cmp	r3, #96	; 0x60
 801b52e:	d8b2      	bhi.n	801b496 <_scanf_float+0x8e>
 801b530:	2b54      	cmp	r3, #84	; 0x54
 801b532:	d077      	beq.n	801b624 <_scanf_float+0x21c>
 801b534:	2b59      	cmp	r3, #89	; 0x59
 801b536:	d199      	bne.n	801b46c <_scanf_float+0x64>
 801b538:	2d07      	cmp	r5, #7
 801b53a:	d197      	bne.n	801b46c <_scanf_float+0x64>
 801b53c:	2508      	movs	r5, #8
 801b53e:	e029      	b.n	801b594 <_scanf_float+0x18c>
 801b540:	2b74      	cmp	r3, #116	; 0x74
 801b542:	d06f      	beq.n	801b624 <_scanf_float+0x21c>
 801b544:	2b79      	cmp	r3, #121	; 0x79
 801b546:	e7f6      	b.n	801b536 <_scanf_float+0x12e>
 801b548:	6821      	ldr	r1, [r4, #0]
 801b54a:	05c8      	lsls	r0, r1, #23
 801b54c:	d51a      	bpl.n	801b584 <_scanf_float+0x17c>
 801b54e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b552:	9b02      	ldr	r3, [sp, #8]
 801b554:	f109 0901 	add.w	r9, r9, #1
 801b558:	6021      	str	r1, [r4, #0]
 801b55a:	b11b      	cbz	r3, 801b564 <_scanf_float+0x15c>
 801b55c:	3b01      	subs	r3, #1
 801b55e:	3201      	adds	r2, #1
 801b560:	9302      	str	r3, [sp, #8]
 801b562:	60a2      	str	r2, [r4, #8]
 801b564:	68a3      	ldr	r3, [r4, #8]
 801b566:	3b01      	subs	r3, #1
 801b568:	60a3      	str	r3, [r4, #8]
 801b56a:	6923      	ldr	r3, [r4, #16]
 801b56c:	3301      	adds	r3, #1
 801b56e:	6123      	str	r3, [r4, #16]
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	3b01      	subs	r3, #1
 801b574:	2b00      	cmp	r3, #0
 801b576:	607b      	str	r3, [r7, #4]
 801b578:	f340 8084 	ble.w	801b684 <_scanf_float+0x27c>
 801b57c:	683b      	ldr	r3, [r7, #0]
 801b57e:	3301      	adds	r3, #1
 801b580:	603b      	str	r3, [r7, #0]
 801b582:	e766      	b.n	801b452 <_scanf_float+0x4a>
 801b584:	eb1a 0f05 	cmn.w	sl, r5
 801b588:	f47f af70 	bne.w	801b46c <_scanf_float+0x64>
 801b58c:	6822      	ldr	r2, [r4, #0]
 801b58e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b592:	6022      	str	r2, [r4, #0]
 801b594:	f806 3b01 	strb.w	r3, [r6], #1
 801b598:	e7e4      	b.n	801b564 <_scanf_float+0x15c>
 801b59a:	6822      	ldr	r2, [r4, #0]
 801b59c:	0610      	lsls	r0, r2, #24
 801b59e:	f57f af65 	bpl.w	801b46c <_scanf_float+0x64>
 801b5a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b5a6:	e7f4      	b.n	801b592 <_scanf_float+0x18a>
 801b5a8:	f1ba 0f00 	cmp.w	sl, #0
 801b5ac:	d10e      	bne.n	801b5cc <_scanf_float+0x1c4>
 801b5ae:	f1b9 0f00 	cmp.w	r9, #0
 801b5b2:	d10e      	bne.n	801b5d2 <_scanf_float+0x1ca>
 801b5b4:	6822      	ldr	r2, [r4, #0]
 801b5b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b5ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b5be:	d108      	bne.n	801b5d2 <_scanf_float+0x1ca>
 801b5c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b5c4:	f04f 0a01 	mov.w	sl, #1
 801b5c8:	6022      	str	r2, [r4, #0]
 801b5ca:	e7e3      	b.n	801b594 <_scanf_float+0x18c>
 801b5cc:	f1ba 0f02 	cmp.w	sl, #2
 801b5d0:	d055      	beq.n	801b67e <_scanf_float+0x276>
 801b5d2:	2d01      	cmp	r5, #1
 801b5d4:	d002      	beq.n	801b5dc <_scanf_float+0x1d4>
 801b5d6:	2d04      	cmp	r5, #4
 801b5d8:	f47f af48 	bne.w	801b46c <_scanf_float+0x64>
 801b5dc:	3501      	adds	r5, #1
 801b5de:	b2ed      	uxtb	r5, r5
 801b5e0:	e7d8      	b.n	801b594 <_scanf_float+0x18c>
 801b5e2:	f1ba 0f01 	cmp.w	sl, #1
 801b5e6:	f47f af41 	bne.w	801b46c <_scanf_float+0x64>
 801b5ea:	f04f 0a02 	mov.w	sl, #2
 801b5ee:	e7d1      	b.n	801b594 <_scanf_float+0x18c>
 801b5f0:	b97d      	cbnz	r5, 801b612 <_scanf_float+0x20a>
 801b5f2:	f1b9 0f00 	cmp.w	r9, #0
 801b5f6:	f47f af3c 	bne.w	801b472 <_scanf_float+0x6a>
 801b5fa:	6822      	ldr	r2, [r4, #0]
 801b5fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b600:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b604:	f47f af39 	bne.w	801b47a <_scanf_float+0x72>
 801b608:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b60c:	2501      	movs	r5, #1
 801b60e:	6022      	str	r2, [r4, #0]
 801b610:	e7c0      	b.n	801b594 <_scanf_float+0x18c>
 801b612:	2d03      	cmp	r5, #3
 801b614:	d0e2      	beq.n	801b5dc <_scanf_float+0x1d4>
 801b616:	2d05      	cmp	r5, #5
 801b618:	e7de      	b.n	801b5d8 <_scanf_float+0x1d0>
 801b61a:	2d02      	cmp	r5, #2
 801b61c:	f47f af26 	bne.w	801b46c <_scanf_float+0x64>
 801b620:	2503      	movs	r5, #3
 801b622:	e7b7      	b.n	801b594 <_scanf_float+0x18c>
 801b624:	2d06      	cmp	r5, #6
 801b626:	f47f af21 	bne.w	801b46c <_scanf_float+0x64>
 801b62a:	2507      	movs	r5, #7
 801b62c:	e7b2      	b.n	801b594 <_scanf_float+0x18c>
 801b62e:	6822      	ldr	r2, [r4, #0]
 801b630:	0591      	lsls	r1, r2, #22
 801b632:	f57f af1b 	bpl.w	801b46c <_scanf_float+0x64>
 801b636:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b63a:	f8cd 9004 	str.w	r9, [sp, #4]
 801b63e:	6022      	str	r2, [r4, #0]
 801b640:	e7a8      	b.n	801b594 <_scanf_float+0x18c>
 801b642:	6822      	ldr	r2, [r4, #0]
 801b644:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b648:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b64c:	d006      	beq.n	801b65c <_scanf_float+0x254>
 801b64e:	0550      	lsls	r0, r2, #21
 801b650:	f57f af0c 	bpl.w	801b46c <_scanf_float+0x64>
 801b654:	f1b9 0f00 	cmp.w	r9, #0
 801b658:	f43f af0f 	beq.w	801b47a <_scanf_float+0x72>
 801b65c:	0591      	lsls	r1, r2, #22
 801b65e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b662:	bf58      	it	pl
 801b664:	9901      	ldrpl	r1, [sp, #4]
 801b666:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b66a:	bf58      	it	pl
 801b66c:	eba9 0101 	subpl.w	r1, r9, r1
 801b670:	6022      	str	r2, [r4, #0]
 801b672:	f04f 0900 	mov.w	r9, #0
 801b676:	bf58      	it	pl
 801b678:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b67c:	e78a      	b.n	801b594 <_scanf_float+0x18c>
 801b67e:	f04f 0a03 	mov.w	sl, #3
 801b682:	e787      	b.n	801b594 <_scanf_float+0x18c>
 801b684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b688:	4639      	mov	r1, r7
 801b68a:	4640      	mov	r0, r8
 801b68c:	4798      	blx	r3
 801b68e:	2800      	cmp	r0, #0
 801b690:	f43f aedf 	beq.w	801b452 <_scanf_float+0x4a>
 801b694:	e6ea      	b.n	801b46c <_scanf_float+0x64>
 801b696:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b69a:	463a      	mov	r2, r7
 801b69c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b6a0:	4640      	mov	r0, r8
 801b6a2:	4798      	blx	r3
 801b6a4:	6923      	ldr	r3, [r4, #16]
 801b6a6:	3b01      	subs	r3, #1
 801b6a8:	6123      	str	r3, [r4, #16]
 801b6aa:	e6ec      	b.n	801b486 <_scanf_float+0x7e>
 801b6ac:	1e6b      	subs	r3, r5, #1
 801b6ae:	2b06      	cmp	r3, #6
 801b6b0:	d825      	bhi.n	801b6fe <_scanf_float+0x2f6>
 801b6b2:	2d02      	cmp	r5, #2
 801b6b4:	d836      	bhi.n	801b724 <_scanf_float+0x31c>
 801b6b6:	455e      	cmp	r6, fp
 801b6b8:	f67f aee8 	bls.w	801b48c <_scanf_float+0x84>
 801b6bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b6c0:	463a      	mov	r2, r7
 801b6c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b6c6:	4640      	mov	r0, r8
 801b6c8:	4798      	blx	r3
 801b6ca:	6923      	ldr	r3, [r4, #16]
 801b6cc:	3b01      	subs	r3, #1
 801b6ce:	6123      	str	r3, [r4, #16]
 801b6d0:	e7f1      	b.n	801b6b6 <_scanf_float+0x2ae>
 801b6d2:	9802      	ldr	r0, [sp, #8]
 801b6d4:	463a      	mov	r2, r7
 801b6d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b6da:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b6de:	9002      	str	r0, [sp, #8]
 801b6e0:	4640      	mov	r0, r8
 801b6e2:	4798      	blx	r3
 801b6e4:	6923      	ldr	r3, [r4, #16]
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	6123      	str	r3, [r4, #16]
 801b6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b6ee:	fa5f fa8a 	uxtb.w	sl, sl
 801b6f2:	f1ba 0f02 	cmp.w	sl, #2
 801b6f6:	d1ec      	bne.n	801b6d2 <_scanf_float+0x2ca>
 801b6f8:	3d03      	subs	r5, #3
 801b6fa:	b2ed      	uxtb	r5, r5
 801b6fc:	1b76      	subs	r6, r6, r5
 801b6fe:	6823      	ldr	r3, [r4, #0]
 801b700:	05da      	lsls	r2, r3, #23
 801b702:	d52e      	bpl.n	801b762 <_scanf_float+0x35a>
 801b704:	055b      	lsls	r3, r3, #21
 801b706:	d510      	bpl.n	801b72a <_scanf_float+0x322>
 801b708:	455e      	cmp	r6, fp
 801b70a:	f67f aebf 	bls.w	801b48c <_scanf_float+0x84>
 801b70e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b712:	463a      	mov	r2, r7
 801b714:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b718:	4640      	mov	r0, r8
 801b71a:	4798      	blx	r3
 801b71c:	6923      	ldr	r3, [r4, #16]
 801b71e:	3b01      	subs	r3, #1
 801b720:	6123      	str	r3, [r4, #16]
 801b722:	e7f1      	b.n	801b708 <_scanf_float+0x300>
 801b724:	46aa      	mov	sl, r5
 801b726:	9602      	str	r6, [sp, #8]
 801b728:	e7df      	b.n	801b6ea <_scanf_float+0x2e2>
 801b72a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b72e:	1e75      	subs	r5, r6, #1
 801b730:	6923      	ldr	r3, [r4, #16]
 801b732:	2965      	cmp	r1, #101	; 0x65
 801b734:	f103 33ff 	add.w	r3, r3, #4294967295
 801b738:	6123      	str	r3, [r4, #16]
 801b73a:	d00c      	beq.n	801b756 <_scanf_float+0x34e>
 801b73c:	2945      	cmp	r1, #69	; 0x45
 801b73e:	d00a      	beq.n	801b756 <_scanf_float+0x34e>
 801b740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b744:	463a      	mov	r2, r7
 801b746:	4640      	mov	r0, r8
 801b748:	1eb5      	subs	r5, r6, #2
 801b74a:	4798      	blx	r3
 801b74c:	6923      	ldr	r3, [r4, #16]
 801b74e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b752:	3b01      	subs	r3, #1
 801b754:	6123      	str	r3, [r4, #16]
 801b756:	462e      	mov	r6, r5
 801b758:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b75c:	463a      	mov	r2, r7
 801b75e:	4640      	mov	r0, r8
 801b760:	4798      	blx	r3
 801b762:	6825      	ldr	r5, [r4, #0]
 801b764:	f015 0510 	ands.w	r5, r5, #16
 801b768:	d159      	bne.n	801b81e <_scanf_float+0x416>
 801b76a:	7035      	strb	r5, [r6, #0]
 801b76c:	6823      	ldr	r3, [r4, #0]
 801b76e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b776:	d11b      	bne.n	801b7b0 <_scanf_float+0x3a8>
 801b778:	9b01      	ldr	r3, [sp, #4]
 801b77a:	454b      	cmp	r3, r9
 801b77c:	eba3 0209 	sub.w	r2, r3, r9
 801b780:	d123      	bne.n	801b7ca <_scanf_float+0x3c2>
 801b782:	2200      	movs	r2, #0
 801b784:	4659      	mov	r1, fp
 801b786:	4640      	mov	r0, r8
 801b788:	f000 fed8 	bl	801c53c <_strtod_r>
 801b78c:	6822      	ldr	r2, [r4, #0]
 801b78e:	9b03      	ldr	r3, [sp, #12]
 801b790:	f012 0f02 	tst.w	r2, #2
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	ec57 6b10 	vmov	r6, r7, d0
 801b79a:	d021      	beq.n	801b7e0 <_scanf_float+0x3d8>
 801b79c:	1d1a      	adds	r2, r3, #4
 801b79e:	9903      	ldr	r1, [sp, #12]
 801b7a0:	600a      	str	r2, [r1, #0]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	e9c3 6700 	strd	r6, r7, [r3]
 801b7a8:	68e3      	ldr	r3, [r4, #12]
 801b7aa:	3301      	adds	r3, #1
 801b7ac:	60e3      	str	r3, [r4, #12]
 801b7ae:	e66e      	b.n	801b48e <_scanf_float+0x86>
 801b7b0:	9b04      	ldr	r3, [sp, #16]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d0e5      	beq.n	801b782 <_scanf_float+0x37a>
 801b7b6:	9905      	ldr	r1, [sp, #20]
 801b7b8:	230a      	movs	r3, #10
 801b7ba:	462a      	mov	r2, r5
 801b7bc:	4640      	mov	r0, r8
 801b7be:	3101      	adds	r1, #1
 801b7c0:	f000 ff44 	bl	801c64c <_strtol_r>
 801b7c4:	9b04      	ldr	r3, [sp, #16]
 801b7c6:	9e05      	ldr	r6, [sp, #20]
 801b7c8:	1ac2      	subs	r2, r0, r3
 801b7ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b7ce:	4915      	ldr	r1, [pc, #84]	; (801b824 <_scanf_float+0x41c>)
 801b7d0:	429e      	cmp	r6, r3
 801b7d2:	bf28      	it	cs
 801b7d4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b7d8:	4630      	mov	r0, r6
 801b7da:	f000 f871 	bl	801b8c0 <siprintf>
 801b7de:	e7d0      	b.n	801b782 <_scanf_float+0x37a>
 801b7e0:	9903      	ldr	r1, [sp, #12]
 801b7e2:	f012 0f04 	tst.w	r2, #4
 801b7e6:	f103 0204 	add.w	r2, r3, #4
 801b7ea:	600a      	str	r2, [r1, #0]
 801b7ec:	d1d9      	bne.n	801b7a2 <_scanf_float+0x39a>
 801b7ee:	f8d3 8000 	ldr.w	r8, [r3]
 801b7f2:	ee10 2a10 	vmov	r2, s0
 801b7f6:	463b      	mov	r3, r7
 801b7f8:	ee10 0a10 	vmov	r0, s0
 801b7fc:	4639      	mov	r1, r7
 801b7fe:	f7e5 f999 	bl	8000b34 <__aeabi_dcmpun>
 801b802:	b128      	cbz	r0, 801b810 <_scanf_float+0x408>
 801b804:	4808      	ldr	r0, [pc, #32]	; (801b828 <_scanf_float+0x420>)
 801b806:	f000 f821 	bl	801b84c <nanf>
 801b80a:	ed88 0a00 	vstr	s0, [r8]
 801b80e:	e7cb      	b.n	801b7a8 <_scanf_float+0x3a0>
 801b810:	4630      	mov	r0, r6
 801b812:	4639      	mov	r1, r7
 801b814:	f7e5 f9ec 	bl	8000bf0 <__aeabi_d2f>
 801b818:	f8c8 0000 	str.w	r0, [r8]
 801b81c:	e7c4      	b.n	801b7a8 <_scanf_float+0x3a0>
 801b81e:	2500      	movs	r5, #0
 801b820:	e635      	b.n	801b48e <_scanf_float+0x86>
 801b822:	bf00      	nop
 801b824:	0807448c 	.word	0x0807448c
 801b828:	08074898 	.word	0x08074898

0801b82c <_sbrk_r>:
 801b82c:	b538      	push	{r3, r4, r5, lr}
 801b82e:	2300      	movs	r3, #0
 801b830:	4d05      	ldr	r5, [pc, #20]	; (801b848 <_sbrk_r+0x1c>)
 801b832:	4604      	mov	r4, r0
 801b834:	4608      	mov	r0, r1
 801b836:	602b      	str	r3, [r5, #0]
 801b838:	f7e8 fa1c 	bl	8003c74 <_sbrk>
 801b83c:	1c43      	adds	r3, r0, #1
 801b83e:	d102      	bne.n	801b846 <_sbrk_r+0x1a>
 801b840:	682b      	ldr	r3, [r5, #0]
 801b842:	b103      	cbz	r3, 801b846 <_sbrk_r+0x1a>
 801b844:	6023      	str	r3, [r4, #0]
 801b846:	bd38      	pop	{r3, r4, r5, pc}
 801b848:	200044f0 	.word	0x200044f0

0801b84c <nanf>:
 801b84c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b854 <nanf+0x8>
 801b850:	4770      	bx	lr
 801b852:	bf00      	nop
 801b854:	7fc00000 	.word	0x7fc00000

0801b858 <sniprintf>:
 801b858:	b40c      	push	{r2, r3}
 801b85a:	4b18      	ldr	r3, [pc, #96]	; (801b8bc <sniprintf+0x64>)
 801b85c:	b530      	push	{r4, r5, lr}
 801b85e:	1e0c      	subs	r4, r1, #0
 801b860:	b09d      	sub	sp, #116	; 0x74
 801b862:	681d      	ldr	r5, [r3, #0]
 801b864:	da08      	bge.n	801b878 <sniprintf+0x20>
 801b866:	238b      	movs	r3, #139	; 0x8b
 801b868:	f04f 30ff 	mov.w	r0, #4294967295
 801b86c:	602b      	str	r3, [r5, #0]
 801b86e:	b01d      	add	sp, #116	; 0x74
 801b870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b874:	b002      	add	sp, #8
 801b876:	4770      	bx	lr
 801b878:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b87c:	9002      	str	r0, [sp, #8]
 801b87e:	9006      	str	r0, [sp, #24]
 801b880:	a902      	add	r1, sp, #8
 801b882:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b886:	bf14      	ite	ne
 801b888:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b88c:	4623      	moveq	r3, r4
 801b88e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b890:	4628      	mov	r0, r5
 801b892:	9304      	str	r3, [sp, #16]
 801b894:	9307      	str	r3, [sp, #28]
 801b896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b89a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b89e:	ab21      	add	r3, sp, #132	; 0x84
 801b8a0:	9301      	str	r3, [sp, #4]
 801b8a2:	f002 fe59 	bl	801e558 <_svfiprintf_r>
 801b8a6:	1c43      	adds	r3, r0, #1
 801b8a8:	bfbc      	itt	lt
 801b8aa:	238b      	movlt	r3, #139	; 0x8b
 801b8ac:	602b      	strlt	r3, [r5, #0]
 801b8ae:	2c00      	cmp	r4, #0
 801b8b0:	d0dd      	beq.n	801b86e <sniprintf+0x16>
 801b8b2:	9b02      	ldr	r3, [sp, #8]
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	701a      	strb	r2, [r3, #0]
 801b8b8:	e7d9      	b.n	801b86e <sniprintf+0x16>
 801b8ba:	bf00      	nop
 801b8bc:	20000910 	.word	0x20000910

0801b8c0 <siprintf>:
 801b8c0:	b40e      	push	{r1, r2, r3}
 801b8c2:	b500      	push	{lr}
 801b8c4:	b09c      	sub	sp, #112	; 0x70
 801b8c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b8ca:	ab1d      	add	r3, sp, #116	; 0x74
 801b8cc:	9002      	str	r0, [sp, #8]
 801b8ce:	9006      	str	r0, [sp, #24]
 801b8d0:	9107      	str	r1, [sp, #28]
 801b8d2:	9104      	str	r1, [sp, #16]
 801b8d4:	4808      	ldr	r0, [pc, #32]	; (801b8f8 <siprintf+0x38>)
 801b8d6:	4909      	ldr	r1, [pc, #36]	; (801b8fc <siprintf+0x3c>)
 801b8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8dc:	9105      	str	r1, [sp, #20]
 801b8de:	a902      	add	r1, sp, #8
 801b8e0:	6800      	ldr	r0, [r0, #0]
 801b8e2:	9301      	str	r3, [sp, #4]
 801b8e4:	f002 fe38 	bl	801e558 <_svfiprintf_r>
 801b8e8:	9b02      	ldr	r3, [sp, #8]
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	701a      	strb	r2, [r3, #0]
 801b8ee:	b01c      	add	sp, #112	; 0x70
 801b8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8f4:	b003      	add	sp, #12
 801b8f6:	4770      	bx	lr
 801b8f8:	20000910 	.word	0x20000910
 801b8fc:	ffff0208 	.word	0xffff0208

0801b900 <sulp>:
 801b900:	b570      	push	{r4, r5, r6, lr}
 801b902:	4604      	mov	r4, r0
 801b904:	460d      	mov	r5, r1
 801b906:	4616      	mov	r6, r2
 801b908:	ec45 4b10 	vmov	d0, r4, r5
 801b90c:	f002 fc36 	bl	801e17c <__ulp>
 801b910:	ec51 0b10 	vmov	r0, r1, d0
 801b914:	b17e      	cbz	r6, 801b936 <sulp+0x36>
 801b916:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b91a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b91e:	2b00      	cmp	r3, #0
 801b920:	dd09      	ble.n	801b936 <sulp+0x36>
 801b922:	051b      	lsls	r3, r3, #20
 801b924:	2400      	movs	r4, #0
 801b926:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b92a:	4622      	mov	r2, r4
 801b92c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b930:	462b      	mov	r3, r5
 801b932:	f7e4 fe65 	bl	8000600 <__aeabi_dmul>
 801b936:	bd70      	pop	{r4, r5, r6, pc}

0801b938 <_strtod_l>:
 801b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b93c:	461f      	mov	r7, r3
 801b93e:	2300      	movs	r3, #0
 801b940:	4604      	mov	r4, r0
 801b942:	4688      	mov	r8, r1
 801b944:	f04f 0a00 	mov.w	sl, #0
 801b948:	f04f 0b00 	mov.w	fp, #0
 801b94c:	ed2d 8b02 	vpush	{d8}
 801b950:	b09d      	sub	sp, #116	; 0x74
 801b952:	9318      	str	r3, [sp, #96]	; 0x60
 801b954:	4b9f      	ldr	r3, [pc, #636]	; (801bbd4 <_strtod_l+0x29c>)
 801b956:	9213      	str	r2, [sp, #76]	; 0x4c
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	4618      	mov	r0, r3
 801b95c:	9305      	str	r3, [sp, #20]
 801b95e:	f7e4 fc8b 	bl	8000278 <strlen>
 801b962:	4605      	mov	r5, r0
 801b964:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b96a:	781a      	ldrb	r2, [r3, #0]
 801b96c:	2a2b      	cmp	r2, #43	; 0x2b
 801b96e:	d04e      	beq.n	801ba0e <_strtod_l+0xd6>
 801b970:	d83b      	bhi.n	801b9ea <_strtod_l+0xb2>
 801b972:	2a0d      	cmp	r2, #13
 801b974:	d834      	bhi.n	801b9e0 <_strtod_l+0xa8>
 801b976:	2a08      	cmp	r2, #8
 801b978:	d834      	bhi.n	801b9e4 <_strtod_l+0xac>
 801b97a:	2a00      	cmp	r2, #0
 801b97c:	d03e      	beq.n	801b9fc <_strtod_l+0xc4>
 801b97e:	2300      	movs	r3, #0
 801b980:	930a      	str	r3, [sp, #40]	; 0x28
 801b982:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801b984:	7833      	ldrb	r3, [r6, #0]
 801b986:	2b30      	cmp	r3, #48	; 0x30
 801b988:	f040 80b0 	bne.w	801baec <_strtod_l+0x1b4>
 801b98c:	7873      	ldrb	r3, [r6, #1]
 801b98e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b992:	2b58      	cmp	r3, #88	; 0x58
 801b994:	d168      	bne.n	801ba68 <_strtod_l+0x130>
 801b996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b998:	a917      	add	r1, sp, #92	; 0x5c
 801b99a:	9702      	str	r7, [sp, #8]
 801b99c:	4620      	mov	r0, r4
 801b99e:	9301      	str	r3, [sp, #4]
 801b9a0:	ab18      	add	r3, sp, #96	; 0x60
 801b9a2:	4a8d      	ldr	r2, [pc, #564]	; (801bbd8 <_strtod_l+0x2a0>)
 801b9a4:	9300      	str	r3, [sp, #0]
 801b9a6:	ab19      	add	r3, sp, #100	; 0x64
 801b9a8:	f001 fd38 	bl	801d41c <__gethex>
 801b9ac:	f010 0707 	ands.w	r7, r0, #7
 801b9b0:	4605      	mov	r5, r0
 801b9b2:	d005      	beq.n	801b9c0 <_strtod_l+0x88>
 801b9b4:	2f06      	cmp	r7, #6
 801b9b6:	d12c      	bne.n	801ba12 <_strtod_l+0xda>
 801b9b8:	3601      	adds	r6, #1
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	9617      	str	r6, [sp, #92]	; 0x5c
 801b9be:	930a      	str	r3, [sp, #40]	; 0x28
 801b9c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	f040 858e 	bne.w	801c4e4 <_strtod_l+0xbac>
 801b9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9ca:	b1eb      	cbz	r3, 801ba08 <_strtod_l+0xd0>
 801b9cc:	4652      	mov	r2, sl
 801b9ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b9d2:	ec43 2b10 	vmov	d0, r2, r3
 801b9d6:	b01d      	add	sp, #116	; 0x74
 801b9d8:	ecbd 8b02 	vpop	{d8}
 801b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e0:	2a20      	cmp	r2, #32
 801b9e2:	d1cc      	bne.n	801b97e <_strtod_l+0x46>
 801b9e4:	3301      	adds	r3, #1
 801b9e6:	9317      	str	r3, [sp, #92]	; 0x5c
 801b9e8:	e7be      	b.n	801b968 <_strtod_l+0x30>
 801b9ea:	2a2d      	cmp	r2, #45	; 0x2d
 801b9ec:	d1c7      	bne.n	801b97e <_strtod_l+0x46>
 801b9ee:	2201      	movs	r2, #1
 801b9f0:	920a      	str	r2, [sp, #40]	; 0x28
 801b9f2:	1c5a      	adds	r2, r3, #1
 801b9f4:	9217      	str	r2, [sp, #92]	; 0x5c
 801b9f6:	785b      	ldrb	r3, [r3, #1]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d1c2      	bne.n	801b982 <_strtod_l+0x4a>
 801b9fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b9fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	f040 856c 	bne.w	801c4e0 <_strtod_l+0xba8>
 801ba08:	4652      	mov	r2, sl
 801ba0a:	465b      	mov	r3, fp
 801ba0c:	e7e1      	b.n	801b9d2 <_strtod_l+0x9a>
 801ba0e:	2200      	movs	r2, #0
 801ba10:	e7ee      	b.n	801b9f0 <_strtod_l+0xb8>
 801ba12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ba14:	b13a      	cbz	r2, 801ba26 <_strtod_l+0xee>
 801ba16:	2135      	movs	r1, #53	; 0x35
 801ba18:	a81a      	add	r0, sp, #104	; 0x68
 801ba1a:	f002 fcb8 	bl	801e38e <__copybits>
 801ba1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ba20:	4620      	mov	r0, r4
 801ba22:	f002 f873 	bl	801db0c <_Bfree>
 801ba26:	3f01      	subs	r7, #1
 801ba28:	2f04      	cmp	r7, #4
 801ba2a:	d806      	bhi.n	801ba3a <_strtod_l+0x102>
 801ba2c:	e8df f007 	tbb	[pc, r7]
 801ba30:	1714030a 	.word	0x1714030a
 801ba34:	0a          	.byte	0x0a
 801ba35:	00          	.byte	0x00
 801ba36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801ba3a:	0728      	lsls	r0, r5, #28
 801ba3c:	d5c0      	bpl.n	801b9c0 <_strtod_l+0x88>
 801ba3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ba42:	e7bd      	b.n	801b9c0 <_strtod_l+0x88>
 801ba44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801ba48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ba4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ba4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ba52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ba56:	e7f0      	b.n	801ba3a <_strtod_l+0x102>
 801ba58:	f8df b180 	ldr.w	fp, [pc, #384]	; 801bbdc <_strtod_l+0x2a4>
 801ba5c:	e7ed      	b.n	801ba3a <_strtod_l+0x102>
 801ba5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ba62:	f04f 3aff 	mov.w	sl, #4294967295
 801ba66:	e7e8      	b.n	801ba3a <_strtod_l+0x102>
 801ba68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba6a:	1c5a      	adds	r2, r3, #1
 801ba6c:	9217      	str	r2, [sp, #92]	; 0x5c
 801ba6e:	785b      	ldrb	r3, [r3, #1]
 801ba70:	2b30      	cmp	r3, #48	; 0x30
 801ba72:	d0f9      	beq.n	801ba68 <_strtod_l+0x130>
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d0a3      	beq.n	801b9c0 <_strtod_l+0x88>
 801ba78:	2301      	movs	r3, #1
 801ba7a:	f04f 0900 	mov.w	r9, #0
 801ba7e:	9304      	str	r3, [sp, #16]
 801ba80:	220a      	movs	r2, #10
 801ba82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba84:	464f      	mov	r7, r9
 801ba86:	f8cd 901c 	str.w	r9, [sp, #28]
 801ba8a:	9308      	str	r3, [sp, #32]
 801ba8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ba8e:	7806      	ldrb	r6, [r0, #0]
 801ba90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ba94:	b2d9      	uxtb	r1, r3
 801ba96:	2909      	cmp	r1, #9
 801ba98:	d92a      	bls.n	801baf0 <_strtod_l+0x1b8>
 801ba9a:	462a      	mov	r2, r5
 801ba9c:	9905      	ldr	r1, [sp, #20]
 801ba9e:	f002 fe63 	bl	801e768 <strncmp>
 801baa2:	b3a0      	cbz	r0, 801bb0e <_strtod_l+0x1d6>
 801baa4:	2000      	movs	r0, #0
 801baa6:	4632      	mov	r2, r6
 801baa8:	463d      	mov	r5, r7
 801baaa:	4603      	mov	r3, r0
 801baac:	9005      	str	r0, [sp, #20]
 801baae:	2a65      	cmp	r2, #101	; 0x65
 801bab0:	d001      	beq.n	801bab6 <_strtod_l+0x17e>
 801bab2:	2a45      	cmp	r2, #69	; 0x45
 801bab4:	d118      	bne.n	801bae8 <_strtod_l+0x1b0>
 801bab6:	b91d      	cbnz	r5, 801bac0 <_strtod_l+0x188>
 801bab8:	9a04      	ldr	r2, [sp, #16]
 801baba:	4302      	orrs	r2, r0
 801babc:	d09e      	beq.n	801b9fc <_strtod_l+0xc4>
 801babe:	2500      	movs	r5, #0
 801bac0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801bac4:	f108 0201 	add.w	r2, r8, #1
 801bac8:	9217      	str	r2, [sp, #92]	; 0x5c
 801baca:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bace:	2a2b      	cmp	r2, #43	; 0x2b
 801bad0:	d075      	beq.n	801bbbe <_strtod_l+0x286>
 801bad2:	2a2d      	cmp	r2, #45	; 0x2d
 801bad4:	d07b      	beq.n	801bbce <_strtod_l+0x296>
 801bad6:	f04f 0c00 	mov.w	ip, #0
 801bada:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bade:	2909      	cmp	r1, #9
 801bae0:	f240 8082 	bls.w	801bbe8 <_strtod_l+0x2b0>
 801bae4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801bae8:	2600      	movs	r6, #0
 801baea:	e09d      	b.n	801bc28 <_strtod_l+0x2f0>
 801baec:	2300      	movs	r3, #0
 801baee:	e7c4      	b.n	801ba7a <_strtod_l+0x142>
 801baf0:	2f08      	cmp	r7, #8
 801baf2:	f100 0001 	add.w	r0, r0, #1
 801baf6:	f107 0701 	add.w	r7, r7, #1
 801bafa:	bfd4      	ite	le
 801bafc:	9907      	ldrle	r1, [sp, #28]
 801bafe:	fb02 3909 	mlagt	r9, r2, r9, r3
 801bb02:	9017      	str	r0, [sp, #92]	; 0x5c
 801bb04:	bfdc      	itt	le
 801bb06:	fb02 3301 	mlale	r3, r2, r1, r3
 801bb0a:	9307      	strle	r3, [sp, #28]
 801bb0c:	e7be      	b.n	801ba8c <_strtod_l+0x154>
 801bb0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bb10:	195a      	adds	r2, r3, r5
 801bb12:	9217      	str	r2, [sp, #92]	; 0x5c
 801bb14:	5d5a      	ldrb	r2, [r3, r5]
 801bb16:	2f00      	cmp	r7, #0
 801bb18:	d036      	beq.n	801bb88 <_strtod_l+0x250>
 801bb1a:	463d      	mov	r5, r7
 801bb1c:	9005      	str	r0, [sp, #20]
 801bb1e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801bb22:	2b09      	cmp	r3, #9
 801bb24:	d912      	bls.n	801bb4c <_strtod_l+0x214>
 801bb26:	2301      	movs	r3, #1
 801bb28:	e7c1      	b.n	801baae <_strtod_l+0x176>
 801bb2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bb2c:	3001      	adds	r0, #1
 801bb2e:	1c5a      	adds	r2, r3, #1
 801bb30:	9217      	str	r2, [sp, #92]	; 0x5c
 801bb32:	785a      	ldrb	r2, [r3, #1]
 801bb34:	2a30      	cmp	r2, #48	; 0x30
 801bb36:	d0f8      	beq.n	801bb2a <_strtod_l+0x1f2>
 801bb38:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bb3c:	2b08      	cmp	r3, #8
 801bb3e:	f200 84d6 	bhi.w	801c4ee <_strtod_l+0xbb6>
 801bb42:	9005      	str	r0, [sp, #20]
 801bb44:	2000      	movs	r0, #0
 801bb46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bb48:	4605      	mov	r5, r0
 801bb4a:	9308      	str	r3, [sp, #32]
 801bb4c:	3a30      	subs	r2, #48	; 0x30
 801bb4e:	f100 0301 	add.w	r3, r0, #1
 801bb52:	d013      	beq.n	801bb7c <_strtod_l+0x244>
 801bb54:	9905      	ldr	r1, [sp, #20]
 801bb56:	eb00 0e05 	add.w	lr, r0, r5
 801bb5a:	4419      	add	r1, r3
 801bb5c:	462b      	mov	r3, r5
 801bb5e:	9105      	str	r1, [sp, #20]
 801bb60:	210a      	movs	r1, #10
 801bb62:	4573      	cmp	r3, lr
 801bb64:	d112      	bne.n	801bb8c <_strtod_l+0x254>
 801bb66:	182b      	adds	r3, r5, r0
 801bb68:	3501      	adds	r5, #1
 801bb6a:	2b08      	cmp	r3, #8
 801bb6c:	4405      	add	r5, r0
 801bb6e:	dc1c      	bgt.n	801bbaa <_strtod_l+0x272>
 801bb70:	9907      	ldr	r1, [sp, #28]
 801bb72:	230a      	movs	r3, #10
 801bb74:	fb03 2301 	mla	r3, r3, r1, r2
 801bb78:	9307      	str	r3, [sp, #28]
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bb7e:	4618      	mov	r0, r3
 801bb80:	1c51      	adds	r1, r2, #1
 801bb82:	9117      	str	r1, [sp, #92]	; 0x5c
 801bb84:	7852      	ldrb	r2, [r2, #1]
 801bb86:	e7ca      	b.n	801bb1e <_strtod_l+0x1e6>
 801bb88:	4638      	mov	r0, r7
 801bb8a:	e7d3      	b.n	801bb34 <_strtod_l+0x1fc>
 801bb8c:	2b08      	cmp	r3, #8
 801bb8e:	dc04      	bgt.n	801bb9a <_strtod_l+0x262>
 801bb90:	9e07      	ldr	r6, [sp, #28]
 801bb92:	434e      	muls	r6, r1
 801bb94:	9607      	str	r6, [sp, #28]
 801bb96:	3301      	adds	r3, #1
 801bb98:	e7e3      	b.n	801bb62 <_strtod_l+0x22a>
 801bb9a:	f103 0c01 	add.w	ip, r3, #1
 801bb9e:	f1bc 0f10 	cmp.w	ip, #16
 801bba2:	bfd8      	it	le
 801bba4:	fb01 f909 	mulle.w	r9, r1, r9
 801bba8:	e7f5      	b.n	801bb96 <_strtod_l+0x25e>
 801bbaa:	2d10      	cmp	r5, #16
 801bbac:	bfdc      	itt	le
 801bbae:	230a      	movle	r3, #10
 801bbb0:	fb03 2909 	mlale	r9, r3, r9, r2
 801bbb4:	e7e1      	b.n	801bb7a <_strtod_l+0x242>
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	9305      	str	r3, [sp, #20]
 801bbba:	2301      	movs	r3, #1
 801bbbc:	e77c      	b.n	801bab8 <_strtod_l+0x180>
 801bbbe:	f04f 0c00 	mov.w	ip, #0
 801bbc2:	f108 0202 	add.w	r2, r8, #2
 801bbc6:	9217      	str	r2, [sp, #92]	; 0x5c
 801bbc8:	f898 2002 	ldrb.w	r2, [r8, #2]
 801bbcc:	e785      	b.n	801bada <_strtod_l+0x1a2>
 801bbce:	f04f 0c01 	mov.w	ip, #1
 801bbd2:	e7f6      	b.n	801bbc2 <_strtod_l+0x28a>
 801bbd4:	080746e0 	.word	0x080746e0
 801bbd8:	08074494 	.word	0x08074494
 801bbdc:	7ff00000 	.word	0x7ff00000
 801bbe0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bbe2:	1c51      	adds	r1, r2, #1
 801bbe4:	9117      	str	r1, [sp, #92]	; 0x5c
 801bbe6:	7852      	ldrb	r2, [r2, #1]
 801bbe8:	2a30      	cmp	r2, #48	; 0x30
 801bbea:	d0f9      	beq.n	801bbe0 <_strtod_l+0x2a8>
 801bbec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801bbf0:	2908      	cmp	r1, #8
 801bbf2:	f63f af79 	bhi.w	801bae8 <_strtod_l+0x1b0>
 801bbf6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801bbfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bbfc:	9206      	str	r2, [sp, #24]
 801bbfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bc00:	1c51      	adds	r1, r2, #1
 801bc02:	9117      	str	r1, [sp, #92]	; 0x5c
 801bc04:	7852      	ldrb	r2, [r2, #1]
 801bc06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801bc0a:	2e09      	cmp	r6, #9
 801bc0c:	d937      	bls.n	801bc7e <_strtod_l+0x346>
 801bc0e:	9e06      	ldr	r6, [sp, #24]
 801bc10:	1b89      	subs	r1, r1, r6
 801bc12:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801bc16:	2908      	cmp	r1, #8
 801bc18:	dc02      	bgt.n	801bc20 <_strtod_l+0x2e8>
 801bc1a:	4576      	cmp	r6, lr
 801bc1c:	bfa8      	it	ge
 801bc1e:	4676      	movge	r6, lr
 801bc20:	f1bc 0f00 	cmp.w	ip, #0
 801bc24:	d000      	beq.n	801bc28 <_strtod_l+0x2f0>
 801bc26:	4276      	negs	r6, r6
 801bc28:	2d00      	cmp	r5, #0
 801bc2a:	d14d      	bne.n	801bcc8 <_strtod_l+0x390>
 801bc2c:	9904      	ldr	r1, [sp, #16]
 801bc2e:	4301      	orrs	r1, r0
 801bc30:	f47f aec6 	bne.w	801b9c0 <_strtod_l+0x88>
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	f47f aee1 	bne.w	801b9fc <_strtod_l+0xc4>
 801bc3a:	2a69      	cmp	r2, #105	; 0x69
 801bc3c:	d027      	beq.n	801bc8e <_strtod_l+0x356>
 801bc3e:	dc24      	bgt.n	801bc8a <_strtod_l+0x352>
 801bc40:	2a49      	cmp	r2, #73	; 0x49
 801bc42:	d024      	beq.n	801bc8e <_strtod_l+0x356>
 801bc44:	2a4e      	cmp	r2, #78	; 0x4e
 801bc46:	f47f aed9 	bne.w	801b9fc <_strtod_l+0xc4>
 801bc4a:	499f      	ldr	r1, [pc, #636]	; (801bec8 <_strtod_l+0x590>)
 801bc4c:	a817      	add	r0, sp, #92	; 0x5c
 801bc4e:	f001 fe3d 	bl	801d8cc <__match>
 801bc52:	2800      	cmp	r0, #0
 801bc54:	f43f aed2 	beq.w	801b9fc <_strtod_l+0xc4>
 801bc58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bc5a:	781b      	ldrb	r3, [r3, #0]
 801bc5c:	2b28      	cmp	r3, #40	; 0x28
 801bc5e:	d12d      	bne.n	801bcbc <_strtod_l+0x384>
 801bc60:	aa1a      	add	r2, sp, #104	; 0x68
 801bc62:	499a      	ldr	r1, [pc, #616]	; (801becc <_strtod_l+0x594>)
 801bc64:	a817      	add	r0, sp, #92	; 0x5c
 801bc66:	f001 fe45 	bl	801d8f4 <__hexnan>
 801bc6a:	2805      	cmp	r0, #5
 801bc6c:	d126      	bne.n	801bcbc <_strtod_l+0x384>
 801bc6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801bc70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801bc74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801bc78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801bc7c:	e6a0      	b.n	801b9c0 <_strtod_l+0x88>
 801bc7e:	210a      	movs	r1, #10
 801bc80:	fb01 2e0e 	mla	lr, r1, lr, r2
 801bc84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801bc88:	e7b9      	b.n	801bbfe <_strtod_l+0x2c6>
 801bc8a:	2a6e      	cmp	r2, #110	; 0x6e
 801bc8c:	e7db      	b.n	801bc46 <_strtod_l+0x30e>
 801bc8e:	4990      	ldr	r1, [pc, #576]	; (801bed0 <_strtod_l+0x598>)
 801bc90:	a817      	add	r0, sp, #92	; 0x5c
 801bc92:	f001 fe1b 	bl	801d8cc <__match>
 801bc96:	2800      	cmp	r0, #0
 801bc98:	f43f aeb0 	beq.w	801b9fc <_strtod_l+0xc4>
 801bc9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bc9e:	a817      	add	r0, sp, #92	; 0x5c
 801bca0:	498c      	ldr	r1, [pc, #560]	; (801bed4 <_strtod_l+0x59c>)
 801bca2:	3b01      	subs	r3, #1
 801bca4:	9317      	str	r3, [sp, #92]	; 0x5c
 801bca6:	f001 fe11 	bl	801d8cc <__match>
 801bcaa:	b910      	cbnz	r0, 801bcb2 <_strtod_l+0x37a>
 801bcac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bcae:	3301      	adds	r3, #1
 801bcb0:	9317      	str	r3, [sp, #92]	; 0x5c
 801bcb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 801bee4 <_strtod_l+0x5ac>
 801bcb6:	f04f 0a00 	mov.w	sl, #0
 801bcba:	e681      	b.n	801b9c0 <_strtod_l+0x88>
 801bcbc:	4886      	ldr	r0, [pc, #536]	; (801bed8 <_strtod_l+0x5a0>)
 801bcbe:	f002 fd4b 	bl	801e758 <nan>
 801bcc2:	ec5b ab10 	vmov	sl, fp, d0
 801bcc6:	e67b      	b.n	801b9c0 <_strtod_l+0x88>
 801bcc8:	9b05      	ldr	r3, [sp, #20]
 801bcca:	2f00      	cmp	r7, #0
 801bccc:	bf08      	it	eq
 801bcce:	462f      	moveq	r7, r5
 801bcd0:	2d10      	cmp	r5, #16
 801bcd2:	9807      	ldr	r0, [sp, #28]
 801bcd4:	eba6 0303 	sub.w	r3, r6, r3
 801bcd8:	46a8      	mov	r8, r5
 801bcda:	bfa8      	it	ge
 801bcdc:	f04f 0810 	movge.w	r8, #16
 801bce0:	9306      	str	r3, [sp, #24]
 801bce2:	f7e4 fc13 	bl	800050c <__aeabi_ui2d>
 801bce6:	2d09      	cmp	r5, #9
 801bce8:	4682      	mov	sl, r0
 801bcea:	468b      	mov	fp, r1
 801bcec:	dd13      	ble.n	801bd16 <_strtod_l+0x3de>
 801bcee:	4b7b      	ldr	r3, [pc, #492]	; (801bedc <_strtod_l+0x5a4>)
 801bcf0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bcf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bcf8:	f7e4 fc82 	bl	8000600 <__aeabi_dmul>
 801bcfc:	4682      	mov	sl, r0
 801bcfe:	468b      	mov	fp, r1
 801bd00:	4648      	mov	r0, r9
 801bd02:	f7e4 fc03 	bl	800050c <__aeabi_ui2d>
 801bd06:	4602      	mov	r2, r0
 801bd08:	460b      	mov	r3, r1
 801bd0a:	4650      	mov	r0, sl
 801bd0c:	4659      	mov	r1, fp
 801bd0e:	f7e4 fac1 	bl	8000294 <__adddf3>
 801bd12:	4682      	mov	sl, r0
 801bd14:	468b      	mov	fp, r1
 801bd16:	2d0f      	cmp	r5, #15
 801bd18:	dc38      	bgt.n	801bd8c <_strtod_l+0x454>
 801bd1a:	9b06      	ldr	r3, [sp, #24]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	f43f ae4f 	beq.w	801b9c0 <_strtod_l+0x88>
 801bd22:	dd24      	ble.n	801bd6e <_strtod_l+0x436>
 801bd24:	2b16      	cmp	r3, #22
 801bd26:	dc0b      	bgt.n	801bd40 <_strtod_l+0x408>
 801bd28:	496c      	ldr	r1, [pc, #432]	; (801bedc <_strtod_l+0x5a4>)
 801bd2a:	4652      	mov	r2, sl
 801bd2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bd30:	465b      	mov	r3, fp
 801bd32:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd36:	f7e4 fc63 	bl	8000600 <__aeabi_dmul>
 801bd3a:	4682      	mov	sl, r0
 801bd3c:	468b      	mov	fp, r1
 801bd3e:	e63f      	b.n	801b9c0 <_strtod_l+0x88>
 801bd40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801bd44:	9a06      	ldr	r2, [sp, #24]
 801bd46:	4293      	cmp	r3, r2
 801bd48:	db20      	blt.n	801bd8c <_strtod_l+0x454>
 801bd4a:	f1c5 050f 	rsb	r5, r5, #15
 801bd4e:	4c63      	ldr	r4, [pc, #396]	; (801bedc <_strtod_l+0x5a4>)
 801bd50:	4652      	mov	r2, sl
 801bd52:	465b      	mov	r3, fp
 801bd54:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801bd58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd5c:	f7e4 fc50 	bl	8000600 <__aeabi_dmul>
 801bd60:	9b06      	ldr	r3, [sp, #24]
 801bd62:	1b5d      	subs	r5, r3, r5
 801bd64:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801bd68:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bd6c:	e7e3      	b.n	801bd36 <_strtod_l+0x3fe>
 801bd6e:	9b06      	ldr	r3, [sp, #24]
 801bd70:	3316      	adds	r3, #22
 801bd72:	db0b      	blt.n	801bd8c <_strtod_l+0x454>
 801bd74:	9b05      	ldr	r3, [sp, #20]
 801bd76:	4650      	mov	r0, sl
 801bd78:	4659      	mov	r1, fp
 801bd7a:	1b9e      	subs	r6, r3, r6
 801bd7c:	4b57      	ldr	r3, [pc, #348]	; (801bedc <_strtod_l+0x5a4>)
 801bd7e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801bd82:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bd86:	f7e4 fd65 	bl	8000854 <__aeabi_ddiv>
 801bd8a:	e7d6      	b.n	801bd3a <_strtod_l+0x402>
 801bd8c:	eba5 0808 	sub.w	r8, r5, r8
 801bd90:	9b06      	ldr	r3, [sp, #24]
 801bd92:	4498      	add	r8, r3
 801bd94:	f1b8 0f00 	cmp.w	r8, #0
 801bd98:	dd74      	ble.n	801be84 <_strtod_l+0x54c>
 801bd9a:	f018 030f 	ands.w	r3, r8, #15
 801bd9e:	d00a      	beq.n	801bdb6 <_strtod_l+0x47e>
 801bda0:	494e      	ldr	r1, [pc, #312]	; (801bedc <_strtod_l+0x5a4>)
 801bda2:	4652      	mov	r2, sl
 801bda4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bda8:	465b      	mov	r3, fp
 801bdaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bdae:	f7e4 fc27 	bl	8000600 <__aeabi_dmul>
 801bdb2:	4682      	mov	sl, r0
 801bdb4:	468b      	mov	fp, r1
 801bdb6:	f038 080f 	bics.w	r8, r8, #15
 801bdba:	d04f      	beq.n	801be5c <_strtod_l+0x524>
 801bdbc:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bdc0:	dd22      	ble.n	801be08 <_strtod_l+0x4d0>
 801bdc2:	2500      	movs	r5, #0
 801bdc4:	462e      	mov	r6, r5
 801bdc6:	9507      	str	r5, [sp, #28]
 801bdc8:	9505      	str	r5, [sp, #20]
 801bdca:	2322      	movs	r3, #34	; 0x22
 801bdcc:	f8df b114 	ldr.w	fp, [pc, #276]	; 801bee4 <_strtod_l+0x5ac>
 801bdd0:	f04f 0a00 	mov.w	sl, #0
 801bdd4:	6023      	str	r3, [r4, #0]
 801bdd6:	9b07      	ldr	r3, [sp, #28]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	f43f adf1 	beq.w	801b9c0 <_strtod_l+0x88>
 801bdde:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bde0:	4620      	mov	r0, r4
 801bde2:	f001 fe93 	bl	801db0c <_Bfree>
 801bde6:	9905      	ldr	r1, [sp, #20]
 801bde8:	4620      	mov	r0, r4
 801bdea:	f001 fe8f 	bl	801db0c <_Bfree>
 801bdee:	4631      	mov	r1, r6
 801bdf0:	4620      	mov	r0, r4
 801bdf2:	f001 fe8b 	bl	801db0c <_Bfree>
 801bdf6:	9907      	ldr	r1, [sp, #28]
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f001 fe87 	bl	801db0c <_Bfree>
 801bdfe:	4629      	mov	r1, r5
 801be00:	4620      	mov	r0, r4
 801be02:	f001 fe83 	bl	801db0c <_Bfree>
 801be06:	e5db      	b.n	801b9c0 <_strtod_l+0x88>
 801be08:	4b35      	ldr	r3, [pc, #212]	; (801bee0 <_strtod_l+0x5a8>)
 801be0a:	ea4f 1828 	mov.w	r8, r8, asr #4
 801be0e:	4650      	mov	r0, sl
 801be10:	4659      	mov	r1, fp
 801be12:	9304      	str	r3, [sp, #16]
 801be14:	2300      	movs	r3, #0
 801be16:	4699      	mov	r9, r3
 801be18:	f1b8 0f01 	cmp.w	r8, #1
 801be1c:	dc21      	bgt.n	801be62 <_strtod_l+0x52a>
 801be1e:	b10b      	cbz	r3, 801be24 <_strtod_l+0x4ec>
 801be20:	4682      	mov	sl, r0
 801be22:	468b      	mov	fp, r1
 801be24:	4b2e      	ldr	r3, [pc, #184]	; (801bee0 <_strtod_l+0x5a8>)
 801be26:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801be2a:	4652      	mov	r2, sl
 801be2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801be30:	465b      	mov	r3, fp
 801be32:	e9d9 0100 	ldrd	r0, r1, [r9]
 801be36:	f7e4 fbe3 	bl	8000600 <__aeabi_dmul>
 801be3a:	4b2a      	ldr	r3, [pc, #168]	; (801bee4 <_strtod_l+0x5ac>)
 801be3c:	460a      	mov	r2, r1
 801be3e:	4682      	mov	sl, r0
 801be40:	400b      	ands	r3, r1
 801be42:	4929      	ldr	r1, [pc, #164]	; (801bee8 <_strtod_l+0x5b0>)
 801be44:	428b      	cmp	r3, r1
 801be46:	d8bc      	bhi.n	801bdc2 <_strtod_l+0x48a>
 801be48:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801be4c:	428b      	cmp	r3, r1
 801be4e:	bf86      	itte	hi
 801be50:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801beec <_strtod_l+0x5b4>
 801be54:	f04f 3aff 	movhi.w	sl, #4294967295
 801be58:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801be5c:	2300      	movs	r3, #0
 801be5e:	9304      	str	r3, [sp, #16]
 801be60:	e083      	b.n	801bf6a <_strtod_l+0x632>
 801be62:	f018 0f01 	tst.w	r8, #1
 801be66:	d005      	beq.n	801be74 <_strtod_l+0x53c>
 801be68:	9b04      	ldr	r3, [sp, #16]
 801be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be6e:	f7e4 fbc7 	bl	8000600 <__aeabi_dmul>
 801be72:	2301      	movs	r3, #1
 801be74:	9a04      	ldr	r2, [sp, #16]
 801be76:	f109 0901 	add.w	r9, r9, #1
 801be7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801be7e:	3208      	adds	r2, #8
 801be80:	9204      	str	r2, [sp, #16]
 801be82:	e7c9      	b.n	801be18 <_strtod_l+0x4e0>
 801be84:	d0ea      	beq.n	801be5c <_strtod_l+0x524>
 801be86:	f1c8 0800 	rsb	r8, r8, #0
 801be8a:	f018 020f 	ands.w	r2, r8, #15
 801be8e:	d00a      	beq.n	801bea6 <_strtod_l+0x56e>
 801be90:	4b12      	ldr	r3, [pc, #72]	; (801bedc <_strtod_l+0x5a4>)
 801be92:	4650      	mov	r0, sl
 801be94:	4659      	mov	r1, fp
 801be96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be9e:	f7e4 fcd9 	bl	8000854 <__aeabi_ddiv>
 801bea2:	4682      	mov	sl, r0
 801bea4:	468b      	mov	fp, r1
 801bea6:	ea5f 1828 	movs.w	r8, r8, asr #4
 801beaa:	d0d7      	beq.n	801be5c <_strtod_l+0x524>
 801beac:	f1b8 0f1f 	cmp.w	r8, #31
 801beb0:	dd1e      	ble.n	801bef0 <_strtod_l+0x5b8>
 801beb2:	2500      	movs	r5, #0
 801beb4:	462e      	mov	r6, r5
 801beb6:	9507      	str	r5, [sp, #28]
 801beb8:	9505      	str	r5, [sp, #20]
 801beba:	2322      	movs	r3, #34	; 0x22
 801bebc:	f04f 0a00 	mov.w	sl, #0
 801bec0:	f04f 0b00 	mov.w	fp, #0
 801bec4:	6023      	str	r3, [r4, #0]
 801bec6:	e786      	b.n	801bdd6 <_strtod_l+0x49e>
 801bec8:	08074465 	.word	0x08074465
 801becc:	080744a8 	.word	0x080744a8
 801bed0:	0807445d 	.word	0x0807445d
 801bed4:	080745ec 	.word	0x080745ec
 801bed8:	08074898 	.word	0x08074898
 801bedc:	08074778 	.word	0x08074778
 801bee0:	08074750 	.word	0x08074750
 801bee4:	7ff00000 	.word	0x7ff00000
 801bee8:	7ca00000 	.word	0x7ca00000
 801beec:	7fefffff 	.word	0x7fefffff
 801bef0:	f018 0310 	ands.w	r3, r8, #16
 801bef4:	4650      	mov	r0, sl
 801bef6:	4659      	mov	r1, fp
 801bef8:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 801c2a4 <_strtod_l+0x96c>
 801befc:	bf18      	it	ne
 801befe:	236a      	movne	r3, #106	; 0x6a
 801bf00:	9304      	str	r3, [sp, #16]
 801bf02:	2300      	movs	r3, #0
 801bf04:	f018 0f01 	tst.w	r8, #1
 801bf08:	d004      	beq.n	801bf14 <_strtod_l+0x5dc>
 801bf0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bf0e:	f7e4 fb77 	bl	8000600 <__aeabi_dmul>
 801bf12:	2301      	movs	r3, #1
 801bf14:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bf18:	f109 0908 	add.w	r9, r9, #8
 801bf1c:	d1f2      	bne.n	801bf04 <_strtod_l+0x5cc>
 801bf1e:	b10b      	cbz	r3, 801bf24 <_strtod_l+0x5ec>
 801bf20:	4682      	mov	sl, r0
 801bf22:	468b      	mov	fp, r1
 801bf24:	9b04      	ldr	r3, [sp, #16]
 801bf26:	b1c3      	cbz	r3, 801bf5a <_strtod_l+0x622>
 801bf28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801bf2c:	4659      	mov	r1, fp
 801bf2e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	dd11      	ble.n	801bf5a <_strtod_l+0x622>
 801bf36:	2b1f      	cmp	r3, #31
 801bf38:	f340 8121 	ble.w	801c17e <_strtod_l+0x846>
 801bf3c:	2b34      	cmp	r3, #52	; 0x34
 801bf3e:	f04f 0a00 	mov.w	sl, #0
 801bf42:	bfdb      	ittet	le
 801bf44:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801bf48:	f04f 33ff 	movle.w	r3, #4294967295
 801bf4c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801bf50:	fa03 f202 	lslle.w	r2, r3, r2
 801bf54:	bfd8      	it	le
 801bf56:	ea02 0b01 	andle.w	fp, r2, r1
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	4650      	mov	r0, sl
 801bf60:	4659      	mov	r1, fp
 801bf62:	f7e4 fdb5 	bl	8000ad0 <__aeabi_dcmpeq>
 801bf66:	2800      	cmp	r0, #0
 801bf68:	d1a3      	bne.n	801beb2 <_strtod_l+0x57a>
 801bf6a:	9b07      	ldr	r3, [sp, #28]
 801bf6c:	463a      	mov	r2, r7
 801bf6e:	9908      	ldr	r1, [sp, #32]
 801bf70:	4620      	mov	r0, r4
 801bf72:	9300      	str	r3, [sp, #0]
 801bf74:	462b      	mov	r3, r5
 801bf76:	f001 fe33 	bl	801dbe0 <__s2b>
 801bf7a:	9007      	str	r0, [sp, #28]
 801bf7c:	2800      	cmp	r0, #0
 801bf7e:	f43f af20 	beq.w	801bdc2 <_strtod_l+0x48a>
 801bf82:	9b05      	ldr	r3, [sp, #20]
 801bf84:	2500      	movs	r5, #0
 801bf86:	1b9e      	subs	r6, r3, r6
 801bf88:	9b06      	ldr	r3, [sp, #24]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	bfb4      	ite	lt
 801bf8e:	4633      	movlt	r3, r6
 801bf90:	2300      	movge	r3, #0
 801bf92:	462e      	mov	r6, r5
 801bf94:	930c      	str	r3, [sp, #48]	; 0x30
 801bf96:	9b06      	ldr	r3, [sp, #24]
 801bf98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf9c:	9312      	str	r3, [sp, #72]	; 0x48
 801bf9e:	9b07      	ldr	r3, [sp, #28]
 801bfa0:	4620      	mov	r0, r4
 801bfa2:	6859      	ldr	r1, [r3, #4]
 801bfa4:	f001 fd72 	bl	801da8c <_Balloc>
 801bfa8:	9005      	str	r0, [sp, #20]
 801bfaa:	2800      	cmp	r0, #0
 801bfac:	f43f af0d 	beq.w	801bdca <_strtod_l+0x492>
 801bfb0:	9b07      	ldr	r3, [sp, #28]
 801bfb2:	300c      	adds	r0, #12
 801bfb4:	691a      	ldr	r2, [r3, #16]
 801bfb6:	f103 010c 	add.w	r1, r3, #12
 801bfba:	3202      	adds	r2, #2
 801bfbc:	0092      	lsls	r2, r2, #2
 801bfbe:	f7fe fcc1 	bl	801a944 <memcpy>
 801bfc2:	aa1a      	add	r2, sp, #104	; 0x68
 801bfc4:	a919      	add	r1, sp, #100	; 0x64
 801bfc6:	4620      	mov	r0, r4
 801bfc8:	ec4b ab10 	vmov	d0, sl, fp
 801bfcc:	f002 f950 	bl	801e270 <__d2b>
 801bfd0:	9018      	str	r0, [sp, #96]	; 0x60
 801bfd2:	ec4b ab18 	vmov	d8, sl, fp
 801bfd6:	2800      	cmp	r0, #0
 801bfd8:	f43f aef7 	beq.w	801bdca <_strtod_l+0x492>
 801bfdc:	2101      	movs	r1, #1
 801bfde:	4620      	mov	r0, r4
 801bfe0:	f001 fe98 	bl	801dd14 <__i2b>
 801bfe4:	4606      	mov	r6, r0
 801bfe6:	2800      	cmp	r0, #0
 801bfe8:	f43f aeef 	beq.w	801bdca <_strtod_l+0x492>
 801bfec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bfee:	9904      	ldr	r1, [sp, #16]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	eba3 0801 	sub.w	r8, r3, r1
 801bff6:	bfa9      	itett	ge
 801bff8:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801bffa:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801bffc:	eb03 0902 	addge.w	r9, r3, r2
 801c000:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c002:	bfb8      	it	lt
 801c004:	1ad7      	sublt	r7, r2, r3
 801c006:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c008:	4ba1      	ldr	r3, [pc, #644]	; (801c290 <_strtod_l+0x958>)
 801c00a:	4490      	add	r8, r2
 801c00c:	bfb8      	it	lt
 801c00e:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801c012:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c016:	f108 38ff 	add.w	r8, r8, #4294967295
 801c01a:	4598      	cmp	r8, r3
 801c01c:	f280 80c3 	bge.w	801c1a6 <_strtod_l+0x86e>
 801c020:	eba3 0308 	sub.w	r3, r3, r8
 801c024:	2101      	movs	r1, #1
 801c026:	2b1f      	cmp	r3, #31
 801c028:	eba2 0203 	sub.w	r2, r2, r3
 801c02c:	f300 80ae 	bgt.w	801c18c <_strtod_l+0x854>
 801c030:	fa01 f303 	lsl.w	r3, r1, r3
 801c034:	930d      	str	r3, [sp, #52]	; 0x34
 801c036:	2300      	movs	r3, #0
 801c038:	9308      	str	r3, [sp, #32]
 801c03a:	eb09 0802 	add.w	r8, r9, r2
 801c03e:	9b04      	ldr	r3, [sp, #16]
 801c040:	4417      	add	r7, r2
 801c042:	45c1      	cmp	r9, r8
 801c044:	441f      	add	r7, r3
 801c046:	464b      	mov	r3, r9
 801c048:	bfa8      	it	ge
 801c04a:	4643      	movge	r3, r8
 801c04c:	42bb      	cmp	r3, r7
 801c04e:	bfa8      	it	ge
 801c050:	463b      	movge	r3, r7
 801c052:	2b00      	cmp	r3, #0
 801c054:	bfc2      	ittt	gt
 801c056:	eba8 0803 	subgt.w	r8, r8, r3
 801c05a:	1aff      	subgt	r7, r7, r3
 801c05c:	eba9 0903 	subgt.w	r9, r9, r3
 801c060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c062:	2b00      	cmp	r3, #0
 801c064:	dd17      	ble.n	801c096 <_strtod_l+0x75e>
 801c066:	4631      	mov	r1, r6
 801c068:	461a      	mov	r2, r3
 801c06a:	4620      	mov	r0, r4
 801c06c:	f001 ff10 	bl	801de90 <__pow5mult>
 801c070:	4606      	mov	r6, r0
 801c072:	2800      	cmp	r0, #0
 801c074:	f43f aea9 	beq.w	801bdca <_strtod_l+0x492>
 801c078:	4601      	mov	r1, r0
 801c07a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c07c:	4620      	mov	r0, r4
 801c07e:	f001 fe5f 	bl	801dd40 <__multiply>
 801c082:	900b      	str	r0, [sp, #44]	; 0x2c
 801c084:	2800      	cmp	r0, #0
 801c086:	f43f aea0 	beq.w	801bdca <_strtod_l+0x492>
 801c08a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c08c:	4620      	mov	r0, r4
 801c08e:	f001 fd3d 	bl	801db0c <_Bfree>
 801c092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c094:	9318      	str	r3, [sp, #96]	; 0x60
 801c096:	f1b8 0f00 	cmp.w	r8, #0
 801c09a:	f300 8089 	bgt.w	801c1b0 <_strtod_l+0x878>
 801c09e:	9b06      	ldr	r3, [sp, #24]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	dd08      	ble.n	801c0b6 <_strtod_l+0x77e>
 801c0a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	9905      	ldr	r1, [sp, #20]
 801c0aa:	f001 fef1 	bl	801de90 <__pow5mult>
 801c0ae:	9005      	str	r0, [sp, #20]
 801c0b0:	2800      	cmp	r0, #0
 801c0b2:	f43f ae8a 	beq.w	801bdca <_strtod_l+0x492>
 801c0b6:	2f00      	cmp	r7, #0
 801c0b8:	dd08      	ble.n	801c0cc <_strtod_l+0x794>
 801c0ba:	463a      	mov	r2, r7
 801c0bc:	9905      	ldr	r1, [sp, #20]
 801c0be:	4620      	mov	r0, r4
 801c0c0:	f001 ff40 	bl	801df44 <__lshift>
 801c0c4:	9005      	str	r0, [sp, #20]
 801c0c6:	2800      	cmp	r0, #0
 801c0c8:	f43f ae7f 	beq.w	801bdca <_strtod_l+0x492>
 801c0cc:	f1b9 0f00 	cmp.w	r9, #0
 801c0d0:	dd08      	ble.n	801c0e4 <_strtod_l+0x7ac>
 801c0d2:	4631      	mov	r1, r6
 801c0d4:	464a      	mov	r2, r9
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	f001 ff34 	bl	801df44 <__lshift>
 801c0dc:	4606      	mov	r6, r0
 801c0de:	2800      	cmp	r0, #0
 801c0e0:	f43f ae73 	beq.w	801bdca <_strtod_l+0x492>
 801c0e4:	9a05      	ldr	r2, [sp, #20]
 801c0e6:	4620      	mov	r0, r4
 801c0e8:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c0ea:	f001 ffb7 	bl	801e05c <__mdiff>
 801c0ee:	4605      	mov	r5, r0
 801c0f0:	2800      	cmp	r0, #0
 801c0f2:	f43f ae6a 	beq.w	801bdca <_strtod_l+0x492>
 801c0f6:	68c3      	ldr	r3, [r0, #12]
 801c0f8:	4631      	mov	r1, r6
 801c0fa:	930b      	str	r3, [sp, #44]	; 0x2c
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	60c3      	str	r3, [r0, #12]
 801c100:	f001 ff90 	bl	801e024 <__mcmp>
 801c104:	2800      	cmp	r0, #0
 801c106:	da5d      	bge.n	801c1c4 <_strtod_l+0x88c>
 801c108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c10a:	ea53 030a 	orrs.w	r3, r3, sl
 801c10e:	d17f      	bne.n	801c210 <_strtod_l+0x8d8>
 801c110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c114:	2b00      	cmp	r3, #0
 801c116:	d17b      	bne.n	801c210 <_strtod_l+0x8d8>
 801c118:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c11c:	0d1b      	lsrs	r3, r3, #20
 801c11e:	051b      	lsls	r3, r3, #20
 801c120:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c124:	d974      	bls.n	801c210 <_strtod_l+0x8d8>
 801c126:	696b      	ldr	r3, [r5, #20]
 801c128:	b913      	cbnz	r3, 801c130 <_strtod_l+0x7f8>
 801c12a:	692b      	ldr	r3, [r5, #16]
 801c12c:	2b01      	cmp	r3, #1
 801c12e:	dd6f      	ble.n	801c210 <_strtod_l+0x8d8>
 801c130:	4629      	mov	r1, r5
 801c132:	2201      	movs	r2, #1
 801c134:	4620      	mov	r0, r4
 801c136:	f001 ff05 	bl	801df44 <__lshift>
 801c13a:	4631      	mov	r1, r6
 801c13c:	4605      	mov	r5, r0
 801c13e:	f001 ff71 	bl	801e024 <__mcmp>
 801c142:	2800      	cmp	r0, #0
 801c144:	dd64      	ble.n	801c210 <_strtod_l+0x8d8>
 801c146:	9904      	ldr	r1, [sp, #16]
 801c148:	465b      	mov	r3, fp
 801c14a:	4a52      	ldr	r2, [pc, #328]	; (801c294 <_strtod_l+0x95c>)
 801c14c:	2900      	cmp	r1, #0
 801c14e:	d07f      	beq.n	801c250 <_strtod_l+0x918>
 801c150:	ea02 010b 	and.w	r1, r2, fp
 801c154:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c158:	dc7a      	bgt.n	801c250 <_strtod_l+0x918>
 801c15a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c15e:	f77f aeac 	ble.w	801beba <_strtod_l+0x582>
 801c162:	4b4d      	ldr	r3, [pc, #308]	; (801c298 <_strtod_l+0x960>)
 801c164:	4650      	mov	r0, sl
 801c166:	4659      	mov	r1, fp
 801c168:	2200      	movs	r2, #0
 801c16a:	f7e4 fa49 	bl	8000600 <__aeabi_dmul>
 801c16e:	460b      	mov	r3, r1
 801c170:	4682      	mov	sl, r0
 801c172:	468b      	mov	fp, r1
 801c174:	4303      	orrs	r3, r0
 801c176:	bf04      	itt	eq
 801c178:	2322      	moveq	r3, #34	; 0x22
 801c17a:	6023      	streq	r3, [r4, #0]
 801c17c:	e62f      	b.n	801bdde <_strtod_l+0x4a6>
 801c17e:	f04f 32ff 	mov.w	r2, #4294967295
 801c182:	fa02 f303 	lsl.w	r3, r2, r3
 801c186:	ea03 0a0a 	and.w	sl, r3, sl
 801c18a:	e6e6      	b.n	801bf5a <_strtod_l+0x622>
 801c18c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c190:	910d      	str	r1, [sp, #52]	; 0x34
 801c192:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c196:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c19a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c19e:	fa01 f308 	lsl.w	r3, r1, r8
 801c1a2:	9308      	str	r3, [sp, #32]
 801c1a4:	e749      	b.n	801c03a <_strtod_l+0x702>
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	9308      	str	r3, [sp, #32]
 801c1aa:	2301      	movs	r3, #1
 801c1ac:	930d      	str	r3, [sp, #52]	; 0x34
 801c1ae:	e744      	b.n	801c03a <_strtod_l+0x702>
 801c1b0:	4642      	mov	r2, r8
 801c1b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c1b4:	4620      	mov	r0, r4
 801c1b6:	f001 fec5 	bl	801df44 <__lshift>
 801c1ba:	9018      	str	r0, [sp, #96]	; 0x60
 801c1bc:	2800      	cmp	r0, #0
 801c1be:	f47f af6e 	bne.w	801c09e <_strtod_l+0x766>
 801c1c2:	e602      	b.n	801bdca <_strtod_l+0x492>
 801c1c4:	465f      	mov	r7, fp
 801c1c6:	d16f      	bne.n	801c2a8 <_strtod_l+0x970>
 801c1c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c1ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1ce:	b342      	cbz	r2, 801c222 <_strtod_l+0x8ea>
 801c1d0:	4a32      	ldr	r2, [pc, #200]	; (801c29c <_strtod_l+0x964>)
 801c1d2:	4293      	cmp	r3, r2
 801c1d4:	d128      	bne.n	801c228 <_strtod_l+0x8f0>
 801c1d6:	9b04      	ldr	r3, [sp, #16]
 801c1d8:	4651      	mov	r1, sl
 801c1da:	b1eb      	cbz	r3, 801c218 <_strtod_l+0x8e0>
 801c1dc:	4b2d      	ldr	r3, [pc, #180]	; (801c294 <_strtod_l+0x95c>)
 801c1de:	f04f 32ff 	mov.w	r2, #4294967295
 801c1e2:	403b      	ands	r3, r7
 801c1e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c1e8:	d819      	bhi.n	801c21e <_strtod_l+0x8e6>
 801c1ea:	0d1b      	lsrs	r3, r3, #20
 801c1ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c1f0:	fa02 f303 	lsl.w	r3, r2, r3
 801c1f4:	4299      	cmp	r1, r3
 801c1f6:	d117      	bne.n	801c228 <_strtod_l+0x8f0>
 801c1f8:	4b29      	ldr	r3, [pc, #164]	; (801c2a0 <_strtod_l+0x968>)
 801c1fa:	429f      	cmp	r7, r3
 801c1fc:	d102      	bne.n	801c204 <_strtod_l+0x8cc>
 801c1fe:	3101      	adds	r1, #1
 801c200:	f43f ade3 	beq.w	801bdca <_strtod_l+0x492>
 801c204:	4b23      	ldr	r3, [pc, #140]	; (801c294 <_strtod_l+0x95c>)
 801c206:	f04f 0a00 	mov.w	sl, #0
 801c20a:	403b      	ands	r3, r7
 801c20c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c210:	9b04      	ldr	r3, [sp, #16]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d1a5      	bne.n	801c162 <_strtod_l+0x82a>
 801c216:	e5e2      	b.n	801bdde <_strtod_l+0x4a6>
 801c218:	f04f 33ff 	mov.w	r3, #4294967295
 801c21c:	e7ea      	b.n	801c1f4 <_strtod_l+0x8bc>
 801c21e:	4613      	mov	r3, r2
 801c220:	e7e8      	b.n	801c1f4 <_strtod_l+0x8bc>
 801c222:	ea53 030a 	orrs.w	r3, r3, sl
 801c226:	d08e      	beq.n	801c146 <_strtod_l+0x80e>
 801c228:	9b08      	ldr	r3, [sp, #32]
 801c22a:	b1db      	cbz	r3, 801c264 <_strtod_l+0x92c>
 801c22c:	423b      	tst	r3, r7
 801c22e:	d0ef      	beq.n	801c210 <_strtod_l+0x8d8>
 801c230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c232:	4650      	mov	r0, sl
 801c234:	9a04      	ldr	r2, [sp, #16]
 801c236:	4659      	mov	r1, fp
 801c238:	b1c3      	cbz	r3, 801c26c <_strtod_l+0x934>
 801c23a:	f7ff fb61 	bl	801b900 <sulp>
 801c23e:	4602      	mov	r2, r0
 801c240:	460b      	mov	r3, r1
 801c242:	ec51 0b18 	vmov	r0, r1, d8
 801c246:	f7e4 f825 	bl	8000294 <__adddf3>
 801c24a:	4682      	mov	sl, r0
 801c24c:	468b      	mov	fp, r1
 801c24e:	e7df      	b.n	801c210 <_strtod_l+0x8d8>
 801c250:	4013      	ands	r3, r2
 801c252:	f04f 3aff 	mov.w	sl, #4294967295
 801c256:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c25a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c25e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c262:	e7d5      	b.n	801c210 <_strtod_l+0x8d8>
 801c264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c266:	ea13 0f0a 	tst.w	r3, sl
 801c26a:	e7e0      	b.n	801c22e <_strtod_l+0x8f6>
 801c26c:	f7ff fb48 	bl	801b900 <sulp>
 801c270:	4602      	mov	r2, r0
 801c272:	460b      	mov	r3, r1
 801c274:	ec51 0b18 	vmov	r0, r1, d8
 801c278:	f7e4 f80a 	bl	8000290 <__aeabi_dsub>
 801c27c:	2200      	movs	r2, #0
 801c27e:	2300      	movs	r3, #0
 801c280:	4682      	mov	sl, r0
 801c282:	468b      	mov	fp, r1
 801c284:	f7e4 fc24 	bl	8000ad0 <__aeabi_dcmpeq>
 801c288:	2800      	cmp	r0, #0
 801c28a:	d0c1      	beq.n	801c210 <_strtod_l+0x8d8>
 801c28c:	e615      	b.n	801beba <_strtod_l+0x582>
 801c28e:	bf00      	nop
 801c290:	fffffc02 	.word	0xfffffc02
 801c294:	7ff00000 	.word	0x7ff00000
 801c298:	39500000 	.word	0x39500000
 801c29c:	000fffff 	.word	0x000fffff
 801c2a0:	7fefffff 	.word	0x7fefffff
 801c2a4:	080744c0 	.word	0x080744c0
 801c2a8:	4631      	mov	r1, r6
 801c2aa:	4628      	mov	r0, r5
 801c2ac:	f002 f83c 	bl	801e328 <__ratio>
 801c2b0:	2200      	movs	r2, #0
 801c2b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c2b6:	ee10 0a10 	vmov	r0, s0
 801c2ba:	ec59 8b10 	vmov	r8, r9, d0
 801c2be:	4649      	mov	r1, r9
 801c2c0:	f7e4 fc1a 	bl	8000af8 <__aeabi_dcmple>
 801c2c4:	2800      	cmp	r0, #0
 801c2c6:	d07a      	beq.n	801c3be <_strtod_l+0xa86>
 801c2c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d04a      	beq.n	801c364 <_strtod_l+0xa2c>
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	4b93      	ldr	r3, [pc, #588]	; (801c520 <_strtod_l+0xbe8>)
 801c2d2:	f04f 0800 	mov.w	r8, #0
 801c2d6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 801c520 <_strtod_l+0xbe8>
 801c2da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c2de:	4b91      	ldr	r3, [pc, #580]	; (801c524 <_strtod_l+0xbec>)
 801c2e0:	403b      	ands	r3, r7
 801c2e2:	930d      	str	r3, [sp, #52]	; 0x34
 801c2e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c2e6:	4b90      	ldr	r3, [pc, #576]	; (801c528 <_strtod_l+0xbf0>)
 801c2e8:	429a      	cmp	r2, r3
 801c2ea:	f040 80b0 	bne.w	801c44e <_strtod_l+0xb16>
 801c2ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c2f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c2f6:	ec4b ab10 	vmov	d0, sl, fp
 801c2fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c2fe:	f001 ff3d 	bl	801e17c <__ulp>
 801c302:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c306:	ec53 2b10 	vmov	r2, r3, d0
 801c30a:	f7e4 f979 	bl	8000600 <__aeabi_dmul>
 801c30e:	4652      	mov	r2, sl
 801c310:	465b      	mov	r3, fp
 801c312:	f7e3 ffbf 	bl	8000294 <__adddf3>
 801c316:	460b      	mov	r3, r1
 801c318:	4982      	ldr	r1, [pc, #520]	; (801c524 <_strtod_l+0xbec>)
 801c31a:	4682      	mov	sl, r0
 801c31c:	4a83      	ldr	r2, [pc, #524]	; (801c52c <_strtod_l+0xbf4>)
 801c31e:	4019      	ands	r1, r3
 801c320:	4291      	cmp	r1, r2
 801c322:	d960      	bls.n	801c3e6 <_strtod_l+0xaae>
 801c324:	ee18 3a90 	vmov	r3, s17
 801c328:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c32c:	4293      	cmp	r3, r2
 801c32e:	d104      	bne.n	801c33a <_strtod_l+0xa02>
 801c330:	ee18 3a10 	vmov	r3, s16
 801c334:	3301      	adds	r3, #1
 801c336:	f43f ad48 	beq.w	801bdca <_strtod_l+0x492>
 801c33a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c538 <_strtod_l+0xc00>
 801c33e:	f04f 3aff 	mov.w	sl, #4294967295
 801c342:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c344:	4620      	mov	r0, r4
 801c346:	f001 fbe1 	bl	801db0c <_Bfree>
 801c34a:	9905      	ldr	r1, [sp, #20]
 801c34c:	4620      	mov	r0, r4
 801c34e:	f001 fbdd 	bl	801db0c <_Bfree>
 801c352:	4631      	mov	r1, r6
 801c354:	4620      	mov	r0, r4
 801c356:	f001 fbd9 	bl	801db0c <_Bfree>
 801c35a:	4629      	mov	r1, r5
 801c35c:	4620      	mov	r0, r4
 801c35e:	f001 fbd5 	bl	801db0c <_Bfree>
 801c362:	e61c      	b.n	801bf9e <_strtod_l+0x666>
 801c364:	f1ba 0f00 	cmp.w	sl, #0
 801c368:	d11b      	bne.n	801c3a2 <_strtod_l+0xa6a>
 801c36a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c36e:	b9f3      	cbnz	r3, 801c3ae <_strtod_l+0xa76>
 801c370:	2200      	movs	r2, #0
 801c372:	4b6b      	ldr	r3, [pc, #428]	; (801c520 <_strtod_l+0xbe8>)
 801c374:	4640      	mov	r0, r8
 801c376:	4649      	mov	r1, r9
 801c378:	f7e4 fbb4 	bl	8000ae4 <__aeabi_dcmplt>
 801c37c:	b9d0      	cbnz	r0, 801c3b4 <_strtod_l+0xa7c>
 801c37e:	4640      	mov	r0, r8
 801c380:	4649      	mov	r1, r9
 801c382:	2200      	movs	r2, #0
 801c384:	4b6a      	ldr	r3, [pc, #424]	; (801c530 <_strtod_l+0xbf8>)
 801c386:	f7e4 f93b 	bl	8000600 <__aeabi_dmul>
 801c38a:	4680      	mov	r8, r0
 801c38c:	4689      	mov	r9, r1
 801c38e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c392:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801c396:	9315      	str	r3, [sp, #84]	; 0x54
 801c398:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c39c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c3a0:	e79d      	b.n	801c2de <_strtod_l+0x9a6>
 801c3a2:	f1ba 0f01 	cmp.w	sl, #1
 801c3a6:	d102      	bne.n	801c3ae <_strtod_l+0xa76>
 801c3a8:	2f00      	cmp	r7, #0
 801c3aa:	f43f ad86 	beq.w	801beba <_strtod_l+0x582>
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	4b60      	ldr	r3, [pc, #384]	; (801c534 <_strtod_l+0xbfc>)
 801c3b2:	e78e      	b.n	801c2d2 <_strtod_l+0x99a>
 801c3b4:	f04f 0800 	mov.w	r8, #0
 801c3b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801c530 <_strtod_l+0xbf8>
 801c3bc:	e7e7      	b.n	801c38e <_strtod_l+0xa56>
 801c3be:	4b5c      	ldr	r3, [pc, #368]	; (801c530 <_strtod_l+0xbf8>)
 801c3c0:	4640      	mov	r0, r8
 801c3c2:	4649      	mov	r1, r9
 801c3c4:	2200      	movs	r2, #0
 801c3c6:	f7e4 f91b 	bl	8000600 <__aeabi_dmul>
 801c3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c3cc:	4680      	mov	r8, r0
 801c3ce:	4689      	mov	r9, r1
 801c3d0:	b933      	cbnz	r3, 801c3e0 <_strtod_l+0xaa8>
 801c3d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c3d6:	900e      	str	r0, [sp, #56]	; 0x38
 801c3d8:	930f      	str	r3, [sp, #60]	; 0x3c
 801c3da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801c3de:	e7dd      	b.n	801c39c <_strtod_l+0xa64>
 801c3e0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801c3e4:	e7f9      	b.n	801c3da <_strtod_l+0xaa2>
 801c3e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c3ea:	9b04      	ldr	r3, [sp, #16]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d1a8      	bne.n	801c342 <_strtod_l+0xa0a>
 801c3f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c3f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c3f6:	0d1b      	lsrs	r3, r3, #20
 801c3f8:	051b      	lsls	r3, r3, #20
 801c3fa:	429a      	cmp	r2, r3
 801c3fc:	d1a1      	bne.n	801c342 <_strtod_l+0xa0a>
 801c3fe:	4640      	mov	r0, r8
 801c400:	4649      	mov	r1, r9
 801c402:	f7e4 fc5d 	bl	8000cc0 <__aeabi_d2lz>
 801c406:	f7e4 f8cd 	bl	80005a4 <__aeabi_l2d>
 801c40a:	4602      	mov	r2, r0
 801c40c:	460b      	mov	r3, r1
 801c40e:	4640      	mov	r0, r8
 801c410:	4649      	mov	r1, r9
 801c412:	f7e3 ff3d 	bl	8000290 <__aeabi_dsub>
 801c416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c41a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c41c:	4680      	mov	r8, r0
 801c41e:	ea43 030a 	orr.w	r3, r3, sl
 801c422:	4689      	mov	r9, r1
 801c424:	4313      	orrs	r3, r2
 801c426:	d055      	beq.n	801c4d4 <_strtod_l+0xb9c>
 801c428:	a335      	add	r3, pc, #212	; (adr r3, 801c500 <_strtod_l+0xbc8>)
 801c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c42e:	f7e4 fb59 	bl	8000ae4 <__aeabi_dcmplt>
 801c432:	2800      	cmp	r0, #0
 801c434:	f47f acd3 	bne.w	801bdde <_strtod_l+0x4a6>
 801c438:	4640      	mov	r0, r8
 801c43a:	4649      	mov	r1, r9
 801c43c:	a332      	add	r3, pc, #200	; (adr r3, 801c508 <_strtod_l+0xbd0>)
 801c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c442:	f7e4 fb6d 	bl	8000b20 <__aeabi_dcmpgt>
 801c446:	2800      	cmp	r0, #0
 801c448:	f43f af7b 	beq.w	801c342 <_strtod_l+0xa0a>
 801c44c:	e4c7      	b.n	801bdde <_strtod_l+0x4a6>
 801c44e:	9b04      	ldr	r3, [sp, #16]
 801c450:	b333      	cbz	r3, 801c4a0 <_strtod_l+0xb68>
 801c452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c454:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c458:	d822      	bhi.n	801c4a0 <_strtod_l+0xb68>
 801c45a:	4640      	mov	r0, r8
 801c45c:	4649      	mov	r1, r9
 801c45e:	a32c      	add	r3, pc, #176	; (adr r3, 801c510 <_strtod_l+0xbd8>)
 801c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c464:	f7e4 fb48 	bl	8000af8 <__aeabi_dcmple>
 801c468:	b1a0      	cbz	r0, 801c494 <_strtod_l+0xb5c>
 801c46a:	4649      	mov	r1, r9
 801c46c:	4640      	mov	r0, r8
 801c46e:	f7e4 fb9f 	bl	8000bb0 <__aeabi_d2uiz>
 801c472:	2801      	cmp	r0, #1
 801c474:	bf38      	it	cc
 801c476:	2001      	movcc	r0, #1
 801c478:	f7e4 f848 	bl	800050c <__aeabi_ui2d>
 801c47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c47e:	4680      	mov	r8, r0
 801c480:	4689      	mov	r9, r1
 801c482:	bb23      	cbnz	r3, 801c4ce <_strtod_l+0xb96>
 801c484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c488:	9010      	str	r0, [sp, #64]	; 0x40
 801c48a:	9311      	str	r3, [sp, #68]	; 0x44
 801c48c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c490:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c498:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c49c:	1a9b      	subs	r3, r3, r2
 801c49e:	9309      	str	r3, [sp, #36]	; 0x24
 801c4a0:	eeb0 0a48 	vmov.f32	s0, s16
 801c4a4:	eef0 0a68 	vmov.f32	s1, s17
 801c4a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c4ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c4b0:	f001 fe64 	bl	801e17c <__ulp>
 801c4b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c4b8:	ec53 2b10 	vmov	r2, r3, d0
 801c4bc:	f7e4 f8a0 	bl	8000600 <__aeabi_dmul>
 801c4c0:	ec53 2b18 	vmov	r2, r3, d8
 801c4c4:	f7e3 fee6 	bl	8000294 <__adddf3>
 801c4c8:	4682      	mov	sl, r0
 801c4ca:	468b      	mov	fp, r1
 801c4cc:	e78d      	b.n	801c3ea <_strtod_l+0xab2>
 801c4ce:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801c4d2:	e7db      	b.n	801c48c <_strtod_l+0xb54>
 801c4d4:	a310      	add	r3, pc, #64	; (adr r3, 801c518 <_strtod_l+0xbe0>)
 801c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4da:	f7e4 fb03 	bl	8000ae4 <__aeabi_dcmplt>
 801c4de:	e7b2      	b.n	801c446 <_strtod_l+0xb0e>
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	930a      	str	r3, [sp, #40]	; 0x28
 801c4e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c4e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c4e8:	6013      	str	r3, [r2, #0]
 801c4ea:	f7ff ba6d 	b.w	801b9c8 <_strtod_l+0x90>
 801c4ee:	2a65      	cmp	r2, #101	; 0x65
 801c4f0:	f43f ab61 	beq.w	801bbb6 <_strtod_l+0x27e>
 801c4f4:	2a45      	cmp	r2, #69	; 0x45
 801c4f6:	f43f ab5e 	beq.w	801bbb6 <_strtod_l+0x27e>
 801c4fa:	2301      	movs	r3, #1
 801c4fc:	f7ff bb96 	b.w	801bc2c <_strtod_l+0x2f4>
 801c500:	94a03595 	.word	0x94a03595
 801c504:	3fdfffff 	.word	0x3fdfffff
 801c508:	35afe535 	.word	0x35afe535
 801c50c:	3fe00000 	.word	0x3fe00000
 801c510:	ffc00000 	.word	0xffc00000
 801c514:	41dfffff 	.word	0x41dfffff
 801c518:	94a03595 	.word	0x94a03595
 801c51c:	3fcfffff 	.word	0x3fcfffff
 801c520:	3ff00000 	.word	0x3ff00000
 801c524:	7ff00000 	.word	0x7ff00000
 801c528:	7fe00000 	.word	0x7fe00000
 801c52c:	7c9fffff 	.word	0x7c9fffff
 801c530:	3fe00000 	.word	0x3fe00000
 801c534:	bff00000 	.word	0xbff00000
 801c538:	7fefffff 	.word	0x7fefffff

0801c53c <_strtod_r>:
 801c53c:	4b01      	ldr	r3, [pc, #4]	; (801c544 <_strtod_r+0x8>)
 801c53e:	f7ff b9fb 	b.w	801b938 <_strtod_l>
 801c542:	bf00      	nop
 801c544:	20000978 	.word	0x20000978

0801c548 <_strtol_l.constprop.0>:
 801c548:	2b01      	cmp	r3, #1
 801c54a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c54e:	d001      	beq.n	801c554 <_strtol_l.constprop.0+0xc>
 801c550:	2b24      	cmp	r3, #36	; 0x24
 801c552:	d906      	bls.n	801c562 <_strtol_l.constprop.0+0x1a>
 801c554:	f7fe f9c4 	bl	801a8e0 <__errno>
 801c558:	2316      	movs	r3, #22
 801c55a:	6003      	str	r3, [r0, #0]
 801c55c:	2000      	movs	r0, #0
 801c55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c562:	460d      	mov	r5, r1
 801c564:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801c648 <_strtol_l.constprop.0+0x100>
 801c568:	462e      	mov	r6, r5
 801c56a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c56e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801c572:	f017 0708 	ands.w	r7, r7, #8
 801c576:	d1f7      	bne.n	801c568 <_strtol_l.constprop.0+0x20>
 801c578:	2c2d      	cmp	r4, #45	; 0x2d
 801c57a:	d132      	bne.n	801c5e2 <_strtol_l.constprop.0+0x9a>
 801c57c:	782c      	ldrb	r4, [r5, #0]
 801c57e:	2701      	movs	r7, #1
 801c580:	1cb5      	adds	r5, r6, #2
 801c582:	2b00      	cmp	r3, #0
 801c584:	d05b      	beq.n	801c63e <_strtol_l.constprop.0+0xf6>
 801c586:	2b10      	cmp	r3, #16
 801c588:	d109      	bne.n	801c59e <_strtol_l.constprop.0+0x56>
 801c58a:	2c30      	cmp	r4, #48	; 0x30
 801c58c:	d107      	bne.n	801c59e <_strtol_l.constprop.0+0x56>
 801c58e:	782c      	ldrb	r4, [r5, #0]
 801c590:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c594:	2c58      	cmp	r4, #88	; 0x58
 801c596:	d14d      	bne.n	801c634 <_strtol_l.constprop.0+0xec>
 801c598:	786c      	ldrb	r4, [r5, #1]
 801c59a:	2310      	movs	r3, #16
 801c59c:	3502      	adds	r5, #2
 801c59e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c5a2:	f04f 0c00 	mov.w	ip, #0
 801c5a6:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5aa:	4666      	mov	r6, ip
 801c5ac:	fbb8 f9f3 	udiv	r9, r8, r3
 801c5b0:	fb03 8a19 	mls	sl, r3, r9, r8
 801c5b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801c5b8:	f1be 0f09 	cmp.w	lr, #9
 801c5bc:	d816      	bhi.n	801c5ec <_strtol_l.constprop.0+0xa4>
 801c5be:	4674      	mov	r4, lr
 801c5c0:	42a3      	cmp	r3, r4
 801c5c2:	dd24      	ble.n	801c60e <_strtol_l.constprop.0+0xc6>
 801c5c4:	f1bc 0f00 	cmp.w	ip, #0
 801c5c8:	db1e      	blt.n	801c608 <_strtol_l.constprop.0+0xc0>
 801c5ca:	45b1      	cmp	r9, r6
 801c5cc:	d31c      	bcc.n	801c608 <_strtol_l.constprop.0+0xc0>
 801c5ce:	d101      	bne.n	801c5d4 <_strtol_l.constprop.0+0x8c>
 801c5d0:	45a2      	cmp	sl, r4
 801c5d2:	db19      	blt.n	801c608 <_strtol_l.constprop.0+0xc0>
 801c5d4:	fb06 4603 	mla	r6, r6, r3, r4
 801c5d8:	f04f 0c01 	mov.w	ip, #1
 801c5dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c5e0:	e7e8      	b.n	801c5b4 <_strtol_l.constprop.0+0x6c>
 801c5e2:	2c2b      	cmp	r4, #43	; 0x2b
 801c5e4:	bf04      	itt	eq
 801c5e6:	782c      	ldrbeq	r4, [r5, #0]
 801c5e8:	1cb5      	addeq	r5, r6, #2
 801c5ea:	e7ca      	b.n	801c582 <_strtol_l.constprop.0+0x3a>
 801c5ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801c5f0:	f1be 0f19 	cmp.w	lr, #25
 801c5f4:	d801      	bhi.n	801c5fa <_strtol_l.constprop.0+0xb2>
 801c5f6:	3c37      	subs	r4, #55	; 0x37
 801c5f8:	e7e2      	b.n	801c5c0 <_strtol_l.constprop.0+0x78>
 801c5fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801c5fe:	f1be 0f19 	cmp.w	lr, #25
 801c602:	d804      	bhi.n	801c60e <_strtol_l.constprop.0+0xc6>
 801c604:	3c57      	subs	r4, #87	; 0x57
 801c606:	e7db      	b.n	801c5c0 <_strtol_l.constprop.0+0x78>
 801c608:	f04f 3cff 	mov.w	ip, #4294967295
 801c60c:	e7e6      	b.n	801c5dc <_strtol_l.constprop.0+0x94>
 801c60e:	f1bc 0f00 	cmp.w	ip, #0
 801c612:	da05      	bge.n	801c620 <_strtol_l.constprop.0+0xd8>
 801c614:	2322      	movs	r3, #34	; 0x22
 801c616:	4646      	mov	r6, r8
 801c618:	6003      	str	r3, [r0, #0]
 801c61a:	b942      	cbnz	r2, 801c62e <_strtol_l.constprop.0+0xe6>
 801c61c:	4630      	mov	r0, r6
 801c61e:	e79e      	b.n	801c55e <_strtol_l.constprop.0+0x16>
 801c620:	b107      	cbz	r7, 801c624 <_strtol_l.constprop.0+0xdc>
 801c622:	4276      	negs	r6, r6
 801c624:	2a00      	cmp	r2, #0
 801c626:	d0f9      	beq.n	801c61c <_strtol_l.constprop.0+0xd4>
 801c628:	f1bc 0f00 	cmp.w	ip, #0
 801c62c:	d000      	beq.n	801c630 <_strtol_l.constprop.0+0xe8>
 801c62e:	1e69      	subs	r1, r5, #1
 801c630:	6011      	str	r1, [r2, #0]
 801c632:	e7f3      	b.n	801c61c <_strtol_l.constprop.0+0xd4>
 801c634:	2430      	movs	r4, #48	; 0x30
 801c636:	2b00      	cmp	r3, #0
 801c638:	d1b1      	bne.n	801c59e <_strtol_l.constprop.0+0x56>
 801c63a:	2308      	movs	r3, #8
 801c63c:	e7af      	b.n	801c59e <_strtol_l.constprop.0+0x56>
 801c63e:	2c30      	cmp	r4, #48	; 0x30
 801c640:	d0a5      	beq.n	801c58e <_strtol_l.constprop.0+0x46>
 801c642:	230a      	movs	r3, #10
 801c644:	e7ab      	b.n	801c59e <_strtol_l.constprop.0+0x56>
 801c646:	bf00      	nop
 801c648:	080744e9 	.word	0x080744e9

0801c64c <_strtol_r>:
 801c64c:	f7ff bf7c 	b.w	801c548 <_strtol_l.constprop.0>

0801c650 <quorem>:
 801c650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c654:	6903      	ldr	r3, [r0, #16]
 801c656:	4607      	mov	r7, r0
 801c658:	690c      	ldr	r4, [r1, #16]
 801c65a:	42a3      	cmp	r3, r4
 801c65c:	f2c0 8087 	blt.w	801c76e <quorem+0x11e>
 801c660:	3c01      	subs	r4, #1
 801c662:	f100 0514 	add.w	r5, r0, #20
 801c666:	f101 0814 	add.w	r8, r1, #20
 801c66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c66e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c672:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c676:	9301      	str	r3, [sp, #4]
 801c678:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c67c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c680:	3301      	adds	r3, #1
 801c682:	429a      	cmp	r2, r3
 801c684:	fbb2 f6f3 	udiv	r6, r2, r3
 801c688:	d335      	bcc.n	801c6f6 <quorem+0xa6>
 801c68a:	f04f 0e00 	mov.w	lr, #0
 801c68e:	4640      	mov	r0, r8
 801c690:	46ac      	mov	ip, r5
 801c692:	46f2      	mov	sl, lr
 801c694:	f850 2b04 	ldr.w	r2, [r0], #4
 801c698:	b293      	uxth	r3, r2
 801c69a:	4581      	cmp	r9, r0
 801c69c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801c6a0:	fb06 e303 	mla	r3, r6, r3, lr
 801c6a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c6a8:	b29b      	uxth	r3, r3
 801c6aa:	fb06 e202 	mla	r2, r6, r2, lr
 801c6ae:	ebaa 0303 	sub.w	r3, sl, r3
 801c6b2:	f8dc a000 	ldr.w	sl, [ip]
 801c6b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c6ba:	fa1f fa8a 	uxth.w	sl, sl
 801c6be:	b292      	uxth	r2, r2
 801c6c0:	4453      	add	r3, sl
 801c6c2:	9300      	str	r3, [sp, #0]
 801c6c4:	f8dc 3000 	ldr.w	r3, [ip]
 801c6c8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 801c6cc:	9b00      	ldr	r3, [sp, #0]
 801c6ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c6d2:	f8bd 3000 	ldrh.w	r3, [sp]
 801c6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c6da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c6de:	f84c 3b04 	str.w	r3, [ip], #4
 801c6e2:	d2d7      	bcs.n	801c694 <quorem+0x44>
 801c6e4:	f855 300b 	ldr.w	r3, [r5, fp]
 801c6e8:	b92b      	cbnz	r3, 801c6f6 <quorem+0xa6>
 801c6ea:	9b01      	ldr	r3, [sp, #4]
 801c6ec:	3b04      	subs	r3, #4
 801c6ee:	429d      	cmp	r5, r3
 801c6f0:	461a      	mov	r2, r3
 801c6f2:	d330      	bcc.n	801c756 <quorem+0x106>
 801c6f4:	613c      	str	r4, [r7, #16]
 801c6f6:	4638      	mov	r0, r7
 801c6f8:	f001 fc94 	bl	801e024 <__mcmp>
 801c6fc:	2800      	cmp	r0, #0
 801c6fe:	db26      	blt.n	801c74e <quorem+0xfe>
 801c700:	3601      	adds	r6, #1
 801c702:	4628      	mov	r0, r5
 801c704:	f04f 0c00 	mov.w	ip, #0
 801c708:	f858 1b04 	ldr.w	r1, [r8], #4
 801c70c:	f8d0 e000 	ldr.w	lr, [r0]
 801c710:	b28b      	uxth	r3, r1
 801c712:	45c1      	cmp	r9, r8
 801c714:	fa1f f28e 	uxth.w	r2, lr
 801c718:	ebac 0303 	sub.w	r3, ip, r3
 801c71c:	4413      	add	r3, r2
 801c71e:	ea4f 4211 	mov.w	r2, r1, lsr #16
 801c722:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c726:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c72a:	b29b      	uxth	r3, r3
 801c72c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c734:	f840 3b04 	str.w	r3, [r0], #4
 801c738:	d2e6      	bcs.n	801c708 <quorem+0xb8>
 801c73a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c73e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c742:	b922      	cbnz	r2, 801c74e <quorem+0xfe>
 801c744:	3b04      	subs	r3, #4
 801c746:	429d      	cmp	r5, r3
 801c748:	461a      	mov	r2, r3
 801c74a:	d30a      	bcc.n	801c762 <quorem+0x112>
 801c74c:	613c      	str	r4, [r7, #16]
 801c74e:	4630      	mov	r0, r6
 801c750:	b003      	add	sp, #12
 801c752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c756:	6812      	ldr	r2, [r2, #0]
 801c758:	3b04      	subs	r3, #4
 801c75a:	2a00      	cmp	r2, #0
 801c75c:	d1ca      	bne.n	801c6f4 <quorem+0xa4>
 801c75e:	3c01      	subs	r4, #1
 801c760:	e7c5      	b.n	801c6ee <quorem+0x9e>
 801c762:	6812      	ldr	r2, [r2, #0]
 801c764:	3b04      	subs	r3, #4
 801c766:	2a00      	cmp	r2, #0
 801c768:	d1f0      	bne.n	801c74c <quorem+0xfc>
 801c76a:	3c01      	subs	r4, #1
 801c76c:	e7eb      	b.n	801c746 <quorem+0xf6>
 801c76e:	2000      	movs	r0, #0
 801c770:	e7ee      	b.n	801c750 <quorem+0x100>
 801c772:	0000      	movs	r0, r0
 801c774:	0000      	movs	r0, r0
	...

0801c778 <_dtoa_r>:
 801c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c77c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c77e:	4604      	mov	r4, r0
 801c780:	ee10 aa10 	vmov	sl, s0
 801c784:	ed2d 8b04 	vpush	{d8-d9}
 801c788:	b093      	sub	sp, #76	; 0x4c
 801c78a:	ec57 6b10 	vmov	r6, r7, d0
 801c78e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c792:	46bb      	mov	fp, r7
 801c794:	9106      	str	r1, [sp, #24]
 801c796:	9209      	str	r2, [sp, #36]	; 0x24
 801c798:	930c      	str	r3, [sp, #48]	; 0x30
 801c79a:	b975      	cbnz	r5, 801c7ba <_dtoa_r+0x42>
 801c79c:	2010      	movs	r0, #16
 801c79e:	f7fe f8c9 	bl	801a934 <malloc>
 801c7a2:	4602      	mov	r2, r0
 801c7a4:	6260      	str	r0, [r4, #36]	; 0x24
 801c7a6:	b920      	cbnz	r0, 801c7b2 <_dtoa_r+0x3a>
 801c7a8:	4ba7      	ldr	r3, [pc, #668]	; (801ca48 <_dtoa_r+0x2d0>)
 801c7aa:	21ea      	movs	r1, #234	; 0xea
 801c7ac:	48a7      	ldr	r0, [pc, #668]	; (801ca4c <_dtoa_r+0x2d4>)
 801c7ae:	f001 fffd 	bl	801e7ac <__assert_func>
 801c7b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c7b6:	6005      	str	r5, [r0, #0]
 801c7b8:	60c5      	str	r5, [r0, #12]
 801c7ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7bc:	6819      	ldr	r1, [r3, #0]
 801c7be:	b151      	cbz	r1, 801c7d6 <_dtoa_r+0x5e>
 801c7c0:	685a      	ldr	r2, [r3, #4]
 801c7c2:	2301      	movs	r3, #1
 801c7c4:	4620      	mov	r0, r4
 801c7c6:	4093      	lsls	r3, r2
 801c7c8:	604a      	str	r2, [r1, #4]
 801c7ca:	608b      	str	r3, [r1, #8]
 801c7cc:	f001 f99e 	bl	801db0c <_Bfree>
 801c7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	601a      	str	r2, [r3, #0]
 801c7d6:	1e3b      	subs	r3, r7, #0
 801c7d8:	bfad      	iteet	ge
 801c7da:	2300      	movge	r3, #0
 801c7dc:	2201      	movlt	r2, #1
 801c7de:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801c7e2:	f8c8 3000 	strge.w	r3, [r8]
 801c7e6:	4b9a      	ldr	r3, [pc, #616]	; (801ca50 <_dtoa_r+0x2d8>)
 801c7e8:	bfb8      	it	lt
 801c7ea:	f8c8 2000 	strlt.w	r2, [r8]
 801c7ee:	ea33 030b 	bics.w	r3, r3, fp
 801c7f2:	d11b      	bne.n	801c82c <_dtoa_r+0xb4>
 801c7f4:	f242 730f 	movw	r3, #9999	; 0x270f
 801c7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c7fa:	6013      	str	r3, [r2, #0]
 801c7fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c800:	4333      	orrs	r3, r6
 801c802:	f000 858f 	beq.w	801d324 <_dtoa_r+0xbac>
 801c806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c808:	b963      	cbnz	r3, 801c824 <_dtoa_r+0xac>
 801c80a:	4b92      	ldr	r3, [pc, #584]	; (801ca54 <_dtoa_r+0x2dc>)
 801c80c:	e022      	b.n	801c854 <_dtoa_r+0xdc>
 801c80e:	4b92      	ldr	r3, [pc, #584]	; (801ca58 <_dtoa_r+0x2e0>)
 801c810:	9301      	str	r3, [sp, #4]
 801c812:	3308      	adds	r3, #8
 801c814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c816:	6013      	str	r3, [r2, #0]
 801c818:	9801      	ldr	r0, [sp, #4]
 801c81a:	b013      	add	sp, #76	; 0x4c
 801c81c:	ecbd 8b04 	vpop	{d8-d9}
 801c820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c824:	4b8b      	ldr	r3, [pc, #556]	; (801ca54 <_dtoa_r+0x2dc>)
 801c826:	9301      	str	r3, [sp, #4]
 801c828:	3303      	adds	r3, #3
 801c82a:	e7f3      	b.n	801c814 <_dtoa_r+0x9c>
 801c82c:	2200      	movs	r2, #0
 801c82e:	2300      	movs	r3, #0
 801c830:	4650      	mov	r0, sl
 801c832:	4659      	mov	r1, fp
 801c834:	f7e4 f94c 	bl	8000ad0 <__aeabi_dcmpeq>
 801c838:	4680      	mov	r8, r0
 801c83a:	ec4b ab19 	vmov	d9, sl, fp
 801c83e:	b158      	cbz	r0, 801c858 <_dtoa_r+0xe0>
 801c840:	2301      	movs	r3, #1
 801c842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c844:	6013      	str	r3, [r2, #0]
 801c846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c848:	2b00      	cmp	r3, #0
 801c84a:	f000 8568 	beq.w	801d31e <_dtoa_r+0xba6>
 801c84e:	4883      	ldr	r0, [pc, #524]	; (801ca5c <_dtoa_r+0x2e4>)
 801c850:	6018      	str	r0, [r3, #0]
 801c852:	1e43      	subs	r3, r0, #1
 801c854:	9301      	str	r3, [sp, #4]
 801c856:	e7df      	b.n	801c818 <_dtoa_r+0xa0>
 801c858:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801c85c:	aa10      	add	r2, sp, #64	; 0x40
 801c85e:	a911      	add	r1, sp, #68	; 0x44
 801c860:	4620      	mov	r0, r4
 801c862:	ec4b ab10 	vmov	d0, sl, fp
 801c866:	f001 fd03 	bl	801e270 <__d2b>
 801c86a:	ee08 0a10 	vmov	s16, r0
 801c86e:	2d00      	cmp	r5, #0
 801c870:	f000 8082 	beq.w	801c978 <_dtoa_r+0x200>
 801c874:	ee19 3a90 	vmov	r3, s19
 801c878:	4656      	mov	r6, sl
 801c87a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c87e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c886:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c88a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c88e:	2200      	movs	r2, #0
 801c890:	4b73      	ldr	r3, [pc, #460]	; (801ca60 <_dtoa_r+0x2e8>)
 801c892:	4630      	mov	r0, r6
 801c894:	4639      	mov	r1, r7
 801c896:	f7e3 fcfb 	bl	8000290 <__aeabi_dsub>
 801c89a:	a365      	add	r3, pc, #404	; (adr r3, 801ca30 <_dtoa_r+0x2b8>)
 801c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a0:	f7e3 feae 	bl	8000600 <__aeabi_dmul>
 801c8a4:	a364      	add	r3, pc, #400	; (adr r3, 801ca38 <_dtoa_r+0x2c0>)
 801c8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8aa:	f7e3 fcf3 	bl	8000294 <__adddf3>
 801c8ae:	4606      	mov	r6, r0
 801c8b0:	460f      	mov	r7, r1
 801c8b2:	4628      	mov	r0, r5
 801c8b4:	f7e3 fe3a 	bl	800052c <__aeabi_i2d>
 801c8b8:	a361      	add	r3, pc, #388	; (adr r3, 801ca40 <_dtoa_r+0x2c8>)
 801c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8be:	f7e3 fe9f 	bl	8000600 <__aeabi_dmul>
 801c8c2:	4602      	mov	r2, r0
 801c8c4:	460b      	mov	r3, r1
 801c8c6:	4630      	mov	r0, r6
 801c8c8:	4639      	mov	r1, r7
 801c8ca:	f7e3 fce3 	bl	8000294 <__adddf3>
 801c8ce:	4606      	mov	r6, r0
 801c8d0:	460f      	mov	r7, r1
 801c8d2:	f7e4 f945 	bl	8000b60 <__aeabi_d2iz>
 801c8d6:	2200      	movs	r2, #0
 801c8d8:	9000      	str	r0, [sp, #0]
 801c8da:	2300      	movs	r3, #0
 801c8dc:	4630      	mov	r0, r6
 801c8de:	4639      	mov	r1, r7
 801c8e0:	f7e4 f900 	bl	8000ae4 <__aeabi_dcmplt>
 801c8e4:	b150      	cbz	r0, 801c8fc <_dtoa_r+0x184>
 801c8e6:	9800      	ldr	r0, [sp, #0]
 801c8e8:	f7e3 fe20 	bl	800052c <__aeabi_i2d>
 801c8ec:	4632      	mov	r2, r6
 801c8ee:	463b      	mov	r3, r7
 801c8f0:	f7e4 f8ee 	bl	8000ad0 <__aeabi_dcmpeq>
 801c8f4:	b910      	cbnz	r0, 801c8fc <_dtoa_r+0x184>
 801c8f6:	9b00      	ldr	r3, [sp, #0]
 801c8f8:	3b01      	subs	r3, #1
 801c8fa:	9300      	str	r3, [sp, #0]
 801c8fc:	9b00      	ldr	r3, [sp, #0]
 801c8fe:	2b16      	cmp	r3, #22
 801c900:	d859      	bhi.n	801c9b6 <_dtoa_r+0x23e>
 801c902:	9a00      	ldr	r2, [sp, #0]
 801c904:	4b57      	ldr	r3, [pc, #348]	; (801ca64 <_dtoa_r+0x2ec>)
 801c906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c90a:	ec51 0b19 	vmov	r0, r1, d9
 801c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c912:	f7e4 f8e7 	bl	8000ae4 <__aeabi_dcmplt>
 801c916:	2800      	cmp	r0, #0
 801c918:	d04f      	beq.n	801c9ba <_dtoa_r+0x242>
 801c91a:	9b00      	ldr	r3, [sp, #0]
 801c91c:	3b01      	subs	r3, #1
 801c91e:	9300      	str	r3, [sp, #0]
 801c920:	2300      	movs	r3, #0
 801c922:	930b      	str	r3, [sp, #44]	; 0x2c
 801c924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c926:	1b5d      	subs	r5, r3, r5
 801c928:	1e6b      	subs	r3, r5, #1
 801c92a:	9305      	str	r3, [sp, #20]
 801c92c:	bf49      	itett	mi
 801c92e:	f1c5 0301 	rsbmi	r3, r5, #1
 801c932:	2300      	movpl	r3, #0
 801c934:	9304      	strmi	r3, [sp, #16]
 801c936:	2300      	movmi	r3, #0
 801c938:	bf54      	ite	pl
 801c93a:	9304      	strpl	r3, [sp, #16]
 801c93c:	9305      	strmi	r3, [sp, #20]
 801c93e:	9b00      	ldr	r3, [sp, #0]
 801c940:	2b00      	cmp	r3, #0
 801c942:	db3c      	blt.n	801c9be <_dtoa_r+0x246>
 801c944:	9b05      	ldr	r3, [sp, #20]
 801c946:	9a00      	ldr	r2, [sp, #0]
 801c948:	4413      	add	r3, r2
 801c94a:	920a      	str	r2, [sp, #40]	; 0x28
 801c94c:	9305      	str	r3, [sp, #20]
 801c94e:	2300      	movs	r3, #0
 801c950:	9307      	str	r3, [sp, #28]
 801c952:	9b06      	ldr	r3, [sp, #24]
 801c954:	2b09      	cmp	r3, #9
 801c956:	f200 8089 	bhi.w	801ca6c <_dtoa_r+0x2f4>
 801c95a:	2b05      	cmp	r3, #5
 801c95c:	bfc5      	ittet	gt
 801c95e:	3b04      	subgt	r3, #4
 801c960:	2500      	movgt	r5, #0
 801c962:	2501      	movle	r5, #1
 801c964:	9306      	strgt	r3, [sp, #24]
 801c966:	9b06      	ldr	r3, [sp, #24]
 801c968:	3b02      	subs	r3, #2
 801c96a:	2b03      	cmp	r3, #3
 801c96c:	f200 8089 	bhi.w	801ca82 <_dtoa_r+0x30a>
 801c970:	e8df f003 	tbb	[pc, r3]
 801c974:	5a393b2e 	.word	0x5a393b2e
 801c978:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801c97c:	441d      	add	r5, r3
 801c97e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c982:	2b20      	cmp	r3, #32
 801c984:	bfc6      	itte	gt
 801c986:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c98a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c98e:	f1c3 0320 	rsble	r3, r3, #32
 801c992:	f105 35ff 	add.w	r5, r5, #4294967295
 801c996:	bfc5      	ittet	gt
 801c998:	fa0b f303 	lslgt.w	r3, fp, r3
 801c99c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c9a0:	fa06 f003 	lslle.w	r0, r6, r3
 801c9a4:	4318      	orrgt	r0, r3
 801c9a6:	f7e3 fdb1 	bl	800050c <__aeabi_ui2d>
 801c9aa:	2301      	movs	r3, #1
 801c9ac:	4606      	mov	r6, r0
 801c9ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c9b2:	930e      	str	r3, [sp, #56]	; 0x38
 801c9b4:	e76b      	b.n	801c88e <_dtoa_r+0x116>
 801c9b6:	2301      	movs	r3, #1
 801c9b8:	e7b3      	b.n	801c922 <_dtoa_r+0x1aa>
 801c9ba:	900b      	str	r0, [sp, #44]	; 0x2c
 801c9bc:	e7b2      	b.n	801c924 <_dtoa_r+0x1ac>
 801c9be:	9b04      	ldr	r3, [sp, #16]
 801c9c0:	9a00      	ldr	r2, [sp, #0]
 801c9c2:	1a9b      	subs	r3, r3, r2
 801c9c4:	9304      	str	r3, [sp, #16]
 801c9c6:	4253      	negs	r3, r2
 801c9c8:	9307      	str	r3, [sp, #28]
 801c9ca:	2300      	movs	r3, #0
 801c9cc:	930a      	str	r3, [sp, #40]	; 0x28
 801c9ce:	e7c0      	b.n	801c952 <_dtoa_r+0x1da>
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	9308      	str	r3, [sp, #32]
 801c9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	dc56      	bgt.n	801ca88 <_dtoa_r+0x310>
 801c9da:	2301      	movs	r3, #1
 801c9dc:	461a      	mov	r2, r3
 801c9de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c9e2:	9209      	str	r2, [sp, #36]	; 0x24
 801c9e4:	e00c      	b.n	801ca00 <_dtoa_r+0x288>
 801c9e6:	2301      	movs	r3, #1
 801c9e8:	e7f3      	b.n	801c9d2 <_dtoa_r+0x25a>
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c9ee:	9308      	str	r3, [sp, #32]
 801c9f0:	9b00      	ldr	r3, [sp, #0]
 801c9f2:	4413      	add	r3, r2
 801c9f4:	9302      	str	r3, [sp, #8]
 801c9f6:	3301      	adds	r3, #1
 801c9f8:	2b01      	cmp	r3, #1
 801c9fa:	9303      	str	r3, [sp, #12]
 801c9fc:	bfb8      	it	lt
 801c9fe:	2301      	movlt	r3, #1
 801ca00:	2200      	movs	r2, #0
 801ca02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ca04:	6042      	str	r2, [r0, #4]
 801ca06:	2204      	movs	r2, #4
 801ca08:	f102 0614 	add.w	r6, r2, #20
 801ca0c:	6841      	ldr	r1, [r0, #4]
 801ca0e:	429e      	cmp	r6, r3
 801ca10:	d93e      	bls.n	801ca90 <_dtoa_r+0x318>
 801ca12:	4620      	mov	r0, r4
 801ca14:	f001 f83a 	bl	801da8c <_Balloc>
 801ca18:	9001      	str	r0, [sp, #4]
 801ca1a:	2800      	cmp	r0, #0
 801ca1c:	d13c      	bne.n	801ca98 <_dtoa_r+0x320>
 801ca1e:	4b12      	ldr	r3, [pc, #72]	; (801ca68 <_dtoa_r+0x2f0>)
 801ca20:	4602      	mov	r2, r0
 801ca22:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ca26:	e6c1      	b.n	801c7ac <_dtoa_r+0x34>
 801ca28:	2301      	movs	r3, #1
 801ca2a:	e7df      	b.n	801c9ec <_dtoa_r+0x274>
 801ca2c:	f3af 8000 	nop.w
 801ca30:	636f4361 	.word	0x636f4361
 801ca34:	3fd287a7 	.word	0x3fd287a7
 801ca38:	8b60c8b3 	.word	0x8b60c8b3
 801ca3c:	3fc68a28 	.word	0x3fc68a28
 801ca40:	509f79fb 	.word	0x509f79fb
 801ca44:	3fd34413 	.word	0x3fd34413
 801ca48:	080745f6 	.word	0x080745f6
 801ca4c:	0807460d 	.word	0x0807460d
 801ca50:	7ff00000 	.word	0x7ff00000
 801ca54:	080745f2 	.word	0x080745f2
 801ca58:	080745e9 	.word	0x080745e9
 801ca5c:	08074469 	.word	0x08074469
 801ca60:	3ff80000 	.word	0x3ff80000
 801ca64:	08074778 	.word	0x08074778
 801ca68:	08074668 	.word	0x08074668
 801ca6c:	2501      	movs	r5, #1
 801ca6e:	2300      	movs	r3, #0
 801ca70:	9508      	str	r5, [sp, #32]
 801ca72:	9306      	str	r3, [sp, #24]
 801ca74:	f04f 33ff 	mov.w	r3, #4294967295
 801ca78:	2200      	movs	r2, #0
 801ca7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ca7e:	2312      	movs	r3, #18
 801ca80:	e7af      	b.n	801c9e2 <_dtoa_r+0x26a>
 801ca82:	2301      	movs	r3, #1
 801ca84:	9308      	str	r3, [sp, #32]
 801ca86:	e7f5      	b.n	801ca74 <_dtoa_r+0x2fc>
 801ca88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ca8e:	e7b7      	b.n	801ca00 <_dtoa_r+0x288>
 801ca90:	3101      	adds	r1, #1
 801ca92:	0052      	lsls	r2, r2, #1
 801ca94:	6041      	str	r1, [r0, #4]
 801ca96:	e7b7      	b.n	801ca08 <_dtoa_r+0x290>
 801ca98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ca9a:	9a01      	ldr	r2, [sp, #4]
 801ca9c:	601a      	str	r2, [r3, #0]
 801ca9e:	9b03      	ldr	r3, [sp, #12]
 801caa0:	2b0e      	cmp	r3, #14
 801caa2:	f200 809d 	bhi.w	801cbe0 <_dtoa_r+0x468>
 801caa6:	2d00      	cmp	r5, #0
 801caa8:	f000 809a 	beq.w	801cbe0 <_dtoa_r+0x468>
 801caac:	9b00      	ldr	r3, [sp, #0]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	dd32      	ble.n	801cb18 <_dtoa_r+0x3a0>
 801cab2:	f003 030f 	and.w	r3, r3, #15
 801cab6:	4ab6      	ldr	r2, [pc, #728]	; (801cd90 <_dtoa_r+0x618>)
 801cab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cabc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cac0:	9b00      	ldr	r3, [sp, #0]
 801cac2:	05d8      	lsls	r0, r3, #23
 801cac4:	ea4f 1723 	mov.w	r7, r3, asr #4
 801cac8:	d516      	bpl.n	801caf8 <_dtoa_r+0x380>
 801caca:	4bb2      	ldr	r3, [pc, #712]	; (801cd94 <_dtoa_r+0x61c>)
 801cacc:	f007 070f 	and.w	r7, r7, #15
 801cad0:	2503      	movs	r5, #3
 801cad2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cad6:	ec51 0b19 	vmov	r0, r1, d9
 801cada:	f7e3 febb 	bl	8000854 <__aeabi_ddiv>
 801cade:	4682      	mov	sl, r0
 801cae0:	468b      	mov	fp, r1
 801cae2:	4eac      	ldr	r6, [pc, #688]	; (801cd94 <_dtoa_r+0x61c>)
 801cae4:	b957      	cbnz	r7, 801cafc <_dtoa_r+0x384>
 801cae6:	4642      	mov	r2, r8
 801cae8:	464b      	mov	r3, r9
 801caea:	4650      	mov	r0, sl
 801caec:	4659      	mov	r1, fp
 801caee:	f7e3 feb1 	bl	8000854 <__aeabi_ddiv>
 801caf2:	4682      	mov	sl, r0
 801caf4:	468b      	mov	fp, r1
 801caf6:	e028      	b.n	801cb4a <_dtoa_r+0x3d2>
 801caf8:	2502      	movs	r5, #2
 801cafa:	e7f2      	b.n	801cae2 <_dtoa_r+0x36a>
 801cafc:	07f9      	lsls	r1, r7, #31
 801cafe:	d508      	bpl.n	801cb12 <_dtoa_r+0x39a>
 801cb00:	4640      	mov	r0, r8
 801cb02:	4649      	mov	r1, r9
 801cb04:	3501      	adds	r5, #1
 801cb06:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cb0a:	f7e3 fd79 	bl	8000600 <__aeabi_dmul>
 801cb0e:	4680      	mov	r8, r0
 801cb10:	4689      	mov	r9, r1
 801cb12:	107f      	asrs	r7, r7, #1
 801cb14:	3608      	adds	r6, #8
 801cb16:	e7e5      	b.n	801cae4 <_dtoa_r+0x36c>
 801cb18:	f000 809b 	beq.w	801cc52 <_dtoa_r+0x4da>
 801cb1c:	9b00      	ldr	r3, [sp, #0]
 801cb1e:	2502      	movs	r5, #2
 801cb20:	4f9c      	ldr	r7, [pc, #624]	; (801cd94 <_dtoa_r+0x61c>)
 801cb22:	425e      	negs	r6, r3
 801cb24:	4b9a      	ldr	r3, [pc, #616]	; (801cd90 <_dtoa_r+0x618>)
 801cb26:	f006 020f 	and.w	r2, r6, #15
 801cb2a:	1136      	asrs	r6, r6, #4
 801cb2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cb30:	ec51 0b19 	vmov	r0, r1, d9
 801cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb38:	f7e3 fd62 	bl	8000600 <__aeabi_dmul>
 801cb3c:	2300      	movs	r3, #0
 801cb3e:	4682      	mov	sl, r0
 801cb40:	468b      	mov	fp, r1
 801cb42:	2e00      	cmp	r6, #0
 801cb44:	d17a      	bne.n	801cc3c <_dtoa_r+0x4c4>
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d1d3      	bne.n	801caf2 <_dtoa_r+0x37a>
 801cb4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	f000 8082 	beq.w	801cc56 <_dtoa_r+0x4de>
 801cb52:	2200      	movs	r2, #0
 801cb54:	4b90      	ldr	r3, [pc, #576]	; (801cd98 <_dtoa_r+0x620>)
 801cb56:	4650      	mov	r0, sl
 801cb58:	4659      	mov	r1, fp
 801cb5a:	f7e3 ffc3 	bl	8000ae4 <__aeabi_dcmplt>
 801cb5e:	2800      	cmp	r0, #0
 801cb60:	d079      	beq.n	801cc56 <_dtoa_r+0x4de>
 801cb62:	9b03      	ldr	r3, [sp, #12]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d076      	beq.n	801cc56 <_dtoa_r+0x4de>
 801cb68:	9b02      	ldr	r3, [sp, #8]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	dd36      	ble.n	801cbdc <_dtoa_r+0x464>
 801cb6e:	9b00      	ldr	r3, [sp, #0]
 801cb70:	4650      	mov	r0, sl
 801cb72:	4659      	mov	r1, fp
 801cb74:	2200      	movs	r2, #0
 801cb76:	1e5f      	subs	r7, r3, #1
 801cb78:	4b88      	ldr	r3, [pc, #544]	; (801cd9c <_dtoa_r+0x624>)
 801cb7a:	f7e3 fd41 	bl	8000600 <__aeabi_dmul>
 801cb7e:	3501      	adds	r5, #1
 801cb80:	4682      	mov	sl, r0
 801cb82:	468b      	mov	fp, r1
 801cb84:	9e02      	ldr	r6, [sp, #8]
 801cb86:	4628      	mov	r0, r5
 801cb88:	46d0      	mov	r8, sl
 801cb8a:	f7e3 fccf 	bl	800052c <__aeabi_i2d>
 801cb8e:	4652      	mov	r2, sl
 801cb90:	465b      	mov	r3, fp
 801cb92:	46d9      	mov	r9, fp
 801cb94:	f7e3 fd34 	bl	8000600 <__aeabi_dmul>
 801cb98:	2200      	movs	r2, #0
 801cb9a:	4b81      	ldr	r3, [pc, #516]	; (801cda0 <_dtoa_r+0x628>)
 801cb9c:	f7e3 fb7a 	bl	8000294 <__adddf3>
 801cba0:	4682      	mov	sl, r0
 801cba2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801cba6:	2e00      	cmp	r6, #0
 801cba8:	d158      	bne.n	801cc5c <_dtoa_r+0x4e4>
 801cbaa:	2200      	movs	r2, #0
 801cbac:	4b7d      	ldr	r3, [pc, #500]	; (801cda4 <_dtoa_r+0x62c>)
 801cbae:	4640      	mov	r0, r8
 801cbb0:	4649      	mov	r1, r9
 801cbb2:	f7e3 fb6d 	bl	8000290 <__aeabi_dsub>
 801cbb6:	4652      	mov	r2, sl
 801cbb8:	465b      	mov	r3, fp
 801cbba:	4680      	mov	r8, r0
 801cbbc:	4689      	mov	r9, r1
 801cbbe:	f7e3 ffaf 	bl	8000b20 <__aeabi_dcmpgt>
 801cbc2:	2800      	cmp	r0, #0
 801cbc4:	f040 8293 	bne.w	801d0ee <_dtoa_r+0x976>
 801cbc8:	4652      	mov	r2, sl
 801cbca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801cbce:	4640      	mov	r0, r8
 801cbd0:	4649      	mov	r1, r9
 801cbd2:	f7e3 ff87 	bl	8000ae4 <__aeabi_dcmplt>
 801cbd6:	2800      	cmp	r0, #0
 801cbd8:	f040 8287 	bne.w	801d0ea <_dtoa_r+0x972>
 801cbdc:	ec5b ab19 	vmov	sl, fp, d9
 801cbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	f2c0 8148 	blt.w	801ce78 <_dtoa_r+0x700>
 801cbe8:	9a00      	ldr	r2, [sp, #0]
 801cbea:	2a0e      	cmp	r2, #14
 801cbec:	f300 8144 	bgt.w	801ce78 <_dtoa_r+0x700>
 801cbf0:	4b67      	ldr	r3, [pc, #412]	; (801cd90 <_dtoa_r+0x618>)
 801cbf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cbf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	f280 80d5 	bge.w	801cdac <_dtoa_r+0x634>
 801cc02:	9b03      	ldr	r3, [sp, #12]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	f300 80d1 	bgt.w	801cdac <_dtoa_r+0x634>
 801cc0a:	f040 826d 	bne.w	801d0e8 <_dtoa_r+0x970>
 801cc0e:	2200      	movs	r2, #0
 801cc10:	4b64      	ldr	r3, [pc, #400]	; (801cda4 <_dtoa_r+0x62c>)
 801cc12:	4640      	mov	r0, r8
 801cc14:	4649      	mov	r1, r9
 801cc16:	f7e3 fcf3 	bl	8000600 <__aeabi_dmul>
 801cc1a:	4652      	mov	r2, sl
 801cc1c:	465b      	mov	r3, fp
 801cc1e:	f7e3 ff75 	bl	8000b0c <__aeabi_dcmpge>
 801cc22:	9e03      	ldr	r6, [sp, #12]
 801cc24:	4637      	mov	r7, r6
 801cc26:	2800      	cmp	r0, #0
 801cc28:	f040 8243 	bne.w	801d0b2 <_dtoa_r+0x93a>
 801cc2c:	2331      	movs	r3, #49	; 0x31
 801cc2e:	9d01      	ldr	r5, [sp, #4]
 801cc30:	f805 3b01 	strb.w	r3, [r5], #1
 801cc34:	9b00      	ldr	r3, [sp, #0]
 801cc36:	3301      	adds	r3, #1
 801cc38:	9300      	str	r3, [sp, #0]
 801cc3a:	e23e      	b.n	801d0ba <_dtoa_r+0x942>
 801cc3c:	07f2      	lsls	r2, r6, #31
 801cc3e:	d505      	bpl.n	801cc4c <_dtoa_r+0x4d4>
 801cc40:	3501      	adds	r5, #1
 801cc42:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cc46:	f7e3 fcdb 	bl	8000600 <__aeabi_dmul>
 801cc4a:	2301      	movs	r3, #1
 801cc4c:	1076      	asrs	r6, r6, #1
 801cc4e:	3708      	adds	r7, #8
 801cc50:	e777      	b.n	801cb42 <_dtoa_r+0x3ca>
 801cc52:	2502      	movs	r5, #2
 801cc54:	e779      	b.n	801cb4a <_dtoa_r+0x3d2>
 801cc56:	9f00      	ldr	r7, [sp, #0]
 801cc58:	9e03      	ldr	r6, [sp, #12]
 801cc5a:	e794      	b.n	801cb86 <_dtoa_r+0x40e>
 801cc5c:	9901      	ldr	r1, [sp, #4]
 801cc5e:	4b4c      	ldr	r3, [pc, #304]	; (801cd90 <_dtoa_r+0x618>)
 801cc60:	4431      	add	r1, r6
 801cc62:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801cc66:	910d      	str	r1, [sp, #52]	; 0x34
 801cc68:	9908      	ldr	r1, [sp, #32]
 801cc6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cc6e:	2900      	cmp	r1, #0
 801cc70:	d043      	beq.n	801ccfa <_dtoa_r+0x582>
 801cc72:	2000      	movs	r0, #0
 801cc74:	494c      	ldr	r1, [pc, #304]	; (801cda8 <_dtoa_r+0x630>)
 801cc76:	f7e3 fded 	bl	8000854 <__aeabi_ddiv>
 801cc7a:	4652      	mov	r2, sl
 801cc7c:	465b      	mov	r3, fp
 801cc7e:	f7e3 fb07 	bl	8000290 <__aeabi_dsub>
 801cc82:	9d01      	ldr	r5, [sp, #4]
 801cc84:	4682      	mov	sl, r0
 801cc86:	468b      	mov	fp, r1
 801cc88:	4649      	mov	r1, r9
 801cc8a:	4640      	mov	r0, r8
 801cc8c:	f7e3 ff68 	bl	8000b60 <__aeabi_d2iz>
 801cc90:	4606      	mov	r6, r0
 801cc92:	f7e3 fc4b 	bl	800052c <__aeabi_i2d>
 801cc96:	4602      	mov	r2, r0
 801cc98:	3630      	adds	r6, #48	; 0x30
 801cc9a:	460b      	mov	r3, r1
 801cc9c:	4640      	mov	r0, r8
 801cc9e:	4649      	mov	r1, r9
 801cca0:	f7e3 faf6 	bl	8000290 <__aeabi_dsub>
 801cca4:	4652      	mov	r2, sl
 801cca6:	465b      	mov	r3, fp
 801cca8:	f805 6b01 	strb.w	r6, [r5], #1
 801ccac:	4680      	mov	r8, r0
 801ccae:	4689      	mov	r9, r1
 801ccb0:	f7e3 ff18 	bl	8000ae4 <__aeabi_dcmplt>
 801ccb4:	2800      	cmp	r0, #0
 801ccb6:	d163      	bne.n	801cd80 <_dtoa_r+0x608>
 801ccb8:	4642      	mov	r2, r8
 801ccba:	464b      	mov	r3, r9
 801ccbc:	2000      	movs	r0, #0
 801ccbe:	4936      	ldr	r1, [pc, #216]	; (801cd98 <_dtoa_r+0x620>)
 801ccc0:	f7e3 fae6 	bl	8000290 <__aeabi_dsub>
 801ccc4:	4652      	mov	r2, sl
 801ccc6:	465b      	mov	r3, fp
 801ccc8:	f7e3 ff0c 	bl	8000ae4 <__aeabi_dcmplt>
 801cccc:	2800      	cmp	r0, #0
 801ccce:	f040 80b5 	bne.w	801ce3c <_dtoa_r+0x6c4>
 801ccd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccd4:	429d      	cmp	r5, r3
 801ccd6:	d081      	beq.n	801cbdc <_dtoa_r+0x464>
 801ccd8:	2200      	movs	r2, #0
 801ccda:	4b30      	ldr	r3, [pc, #192]	; (801cd9c <_dtoa_r+0x624>)
 801ccdc:	4650      	mov	r0, sl
 801ccde:	4659      	mov	r1, fp
 801cce0:	f7e3 fc8e 	bl	8000600 <__aeabi_dmul>
 801cce4:	2200      	movs	r2, #0
 801cce6:	4682      	mov	sl, r0
 801cce8:	468b      	mov	fp, r1
 801ccea:	4640      	mov	r0, r8
 801ccec:	4649      	mov	r1, r9
 801ccee:	4b2b      	ldr	r3, [pc, #172]	; (801cd9c <_dtoa_r+0x624>)
 801ccf0:	f7e3 fc86 	bl	8000600 <__aeabi_dmul>
 801ccf4:	4680      	mov	r8, r0
 801ccf6:	4689      	mov	r9, r1
 801ccf8:	e7c6      	b.n	801cc88 <_dtoa_r+0x510>
 801ccfa:	4650      	mov	r0, sl
 801ccfc:	4659      	mov	r1, fp
 801ccfe:	f7e3 fc7f 	bl	8000600 <__aeabi_dmul>
 801cd02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd04:	4682      	mov	sl, r0
 801cd06:	468b      	mov	fp, r1
 801cd08:	9d01      	ldr	r5, [sp, #4]
 801cd0a:	930f      	str	r3, [sp, #60]	; 0x3c
 801cd0c:	4649      	mov	r1, r9
 801cd0e:	4640      	mov	r0, r8
 801cd10:	f7e3 ff26 	bl	8000b60 <__aeabi_d2iz>
 801cd14:	4606      	mov	r6, r0
 801cd16:	f7e3 fc09 	bl	800052c <__aeabi_i2d>
 801cd1a:	4602      	mov	r2, r0
 801cd1c:	460b      	mov	r3, r1
 801cd1e:	4640      	mov	r0, r8
 801cd20:	4649      	mov	r1, r9
 801cd22:	3630      	adds	r6, #48	; 0x30
 801cd24:	f7e3 fab4 	bl	8000290 <__aeabi_dsub>
 801cd28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd2a:	f805 6b01 	strb.w	r6, [r5], #1
 801cd2e:	4680      	mov	r8, r0
 801cd30:	429d      	cmp	r5, r3
 801cd32:	4689      	mov	r9, r1
 801cd34:	f04f 0200 	mov.w	r2, #0
 801cd38:	d124      	bne.n	801cd84 <_dtoa_r+0x60c>
 801cd3a:	4b1b      	ldr	r3, [pc, #108]	; (801cda8 <_dtoa_r+0x630>)
 801cd3c:	4650      	mov	r0, sl
 801cd3e:	4659      	mov	r1, fp
 801cd40:	f7e3 faa8 	bl	8000294 <__adddf3>
 801cd44:	4602      	mov	r2, r0
 801cd46:	460b      	mov	r3, r1
 801cd48:	4640      	mov	r0, r8
 801cd4a:	4649      	mov	r1, r9
 801cd4c:	f7e3 fee8 	bl	8000b20 <__aeabi_dcmpgt>
 801cd50:	2800      	cmp	r0, #0
 801cd52:	d173      	bne.n	801ce3c <_dtoa_r+0x6c4>
 801cd54:	4652      	mov	r2, sl
 801cd56:	465b      	mov	r3, fp
 801cd58:	2000      	movs	r0, #0
 801cd5a:	4913      	ldr	r1, [pc, #76]	; (801cda8 <_dtoa_r+0x630>)
 801cd5c:	f7e3 fa98 	bl	8000290 <__aeabi_dsub>
 801cd60:	4602      	mov	r2, r0
 801cd62:	460b      	mov	r3, r1
 801cd64:	4640      	mov	r0, r8
 801cd66:	4649      	mov	r1, r9
 801cd68:	f7e3 febc 	bl	8000ae4 <__aeabi_dcmplt>
 801cd6c:	2800      	cmp	r0, #0
 801cd6e:	f43f af35 	beq.w	801cbdc <_dtoa_r+0x464>
 801cd72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801cd74:	1e6b      	subs	r3, r5, #1
 801cd76:	930f      	str	r3, [sp, #60]	; 0x3c
 801cd78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cd7c:	2b30      	cmp	r3, #48	; 0x30
 801cd7e:	d0f8      	beq.n	801cd72 <_dtoa_r+0x5fa>
 801cd80:	9700      	str	r7, [sp, #0]
 801cd82:	e049      	b.n	801ce18 <_dtoa_r+0x6a0>
 801cd84:	4b05      	ldr	r3, [pc, #20]	; (801cd9c <_dtoa_r+0x624>)
 801cd86:	f7e3 fc3b 	bl	8000600 <__aeabi_dmul>
 801cd8a:	4680      	mov	r8, r0
 801cd8c:	4689      	mov	r9, r1
 801cd8e:	e7bd      	b.n	801cd0c <_dtoa_r+0x594>
 801cd90:	08074778 	.word	0x08074778
 801cd94:	08074750 	.word	0x08074750
 801cd98:	3ff00000 	.word	0x3ff00000
 801cd9c:	40240000 	.word	0x40240000
 801cda0:	401c0000 	.word	0x401c0000
 801cda4:	40140000 	.word	0x40140000
 801cda8:	3fe00000 	.word	0x3fe00000
 801cdac:	4656      	mov	r6, sl
 801cdae:	465f      	mov	r7, fp
 801cdb0:	9d01      	ldr	r5, [sp, #4]
 801cdb2:	4642      	mov	r2, r8
 801cdb4:	464b      	mov	r3, r9
 801cdb6:	4630      	mov	r0, r6
 801cdb8:	4639      	mov	r1, r7
 801cdba:	f7e3 fd4b 	bl	8000854 <__aeabi_ddiv>
 801cdbe:	f7e3 fecf 	bl	8000b60 <__aeabi_d2iz>
 801cdc2:	4682      	mov	sl, r0
 801cdc4:	f7e3 fbb2 	bl	800052c <__aeabi_i2d>
 801cdc8:	4642      	mov	r2, r8
 801cdca:	464b      	mov	r3, r9
 801cdcc:	f7e3 fc18 	bl	8000600 <__aeabi_dmul>
 801cdd0:	4602      	mov	r2, r0
 801cdd2:	4630      	mov	r0, r6
 801cdd4:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801cdd8:	460b      	mov	r3, r1
 801cdda:	4639      	mov	r1, r7
 801cddc:	f7e3 fa58 	bl	8000290 <__aeabi_dsub>
 801cde0:	f805 6b01 	strb.w	r6, [r5], #1
 801cde4:	9e01      	ldr	r6, [sp, #4]
 801cde6:	4602      	mov	r2, r0
 801cde8:	9f03      	ldr	r7, [sp, #12]
 801cdea:	460b      	mov	r3, r1
 801cdec:	1bae      	subs	r6, r5, r6
 801cdee:	42b7      	cmp	r7, r6
 801cdf0:	d135      	bne.n	801ce5e <_dtoa_r+0x6e6>
 801cdf2:	f7e3 fa4f 	bl	8000294 <__adddf3>
 801cdf6:	4642      	mov	r2, r8
 801cdf8:	464b      	mov	r3, r9
 801cdfa:	4606      	mov	r6, r0
 801cdfc:	460f      	mov	r7, r1
 801cdfe:	f7e3 fe8f 	bl	8000b20 <__aeabi_dcmpgt>
 801ce02:	b9d0      	cbnz	r0, 801ce3a <_dtoa_r+0x6c2>
 801ce04:	4642      	mov	r2, r8
 801ce06:	464b      	mov	r3, r9
 801ce08:	4630      	mov	r0, r6
 801ce0a:	4639      	mov	r1, r7
 801ce0c:	f7e3 fe60 	bl	8000ad0 <__aeabi_dcmpeq>
 801ce10:	b110      	cbz	r0, 801ce18 <_dtoa_r+0x6a0>
 801ce12:	f01a 0f01 	tst.w	sl, #1
 801ce16:	d110      	bne.n	801ce3a <_dtoa_r+0x6c2>
 801ce18:	4620      	mov	r0, r4
 801ce1a:	ee18 1a10 	vmov	r1, s16
 801ce1e:	f000 fe75 	bl	801db0c <_Bfree>
 801ce22:	2300      	movs	r3, #0
 801ce24:	9800      	ldr	r0, [sp, #0]
 801ce26:	702b      	strb	r3, [r5, #0]
 801ce28:	3001      	adds	r0, #1
 801ce2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce2c:	6018      	str	r0, [r3, #0]
 801ce2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	f43f acf1 	beq.w	801c818 <_dtoa_r+0xa0>
 801ce36:	601d      	str	r5, [r3, #0]
 801ce38:	e4ee      	b.n	801c818 <_dtoa_r+0xa0>
 801ce3a:	9f00      	ldr	r7, [sp, #0]
 801ce3c:	462b      	mov	r3, r5
 801ce3e:	461d      	mov	r5, r3
 801ce40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ce44:	2a39      	cmp	r2, #57	; 0x39
 801ce46:	d106      	bne.n	801ce56 <_dtoa_r+0x6de>
 801ce48:	9a01      	ldr	r2, [sp, #4]
 801ce4a:	429a      	cmp	r2, r3
 801ce4c:	d1f7      	bne.n	801ce3e <_dtoa_r+0x6c6>
 801ce4e:	2230      	movs	r2, #48	; 0x30
 801ce50:	9901      	ldr	r1, [sp, #4]
 801ce52:	3701      	adds	r7, #1
 801ce54:	700a      	strb	r2, [r1, #0]
 801ce56:	781a      	ldrb	r2, [r3, #0]
 801ce58:	3201      	adds	r2, #1
 801ce5a:	701a      	strb	r2, [r3, #0]
 801ce5c:	e790      	b.n	801cd80 <_dtoa_r+0x608>
 801ce5e:	2200      	movs	r2, #0
 801ce60:	4ba4      	ldr	r3, [pc, #656]	; (801d0f4 <_dtoa_r+0x97c>)
 801ce62:	f7e3 fbcd 	bl	8000600 <__aeabi_dmul>
 801ce66:	2200      	movs	r2, #0
 801ce68:	2300      	movs	r3, #0
 801ce6a:	4606      	mov	r6, r0
 801ce6c:	460f      	mov	r7, r1
 801ce6e:	f7e3 fe2f 	bl	8000ad0 <__aeabi_dcmpeq>
 801ce72:	2800      	cmp	r0, #0
 801ce74:	d09d      	beq.n	801cdb2 <_dtoa_r+0x63a>
 801ce76:	e7cf      	b.n	801ce18 <_dtoa_r+0x6a0>
 801ce78:	9a08      	ldr	r2, [sp, #32]
 801ce7a:	2a00      	cmp	r2, #0
 801ce7c:	f000 80d5 	beq.w	801d02a <_dtoa_r+0x8b2>
 801ce80:	9a06      	ldr	r2, [sp, #24]
 801ce82:	2a01      	cmp	r2, #1
 801ce84:	f300 80b9 	bgt.w	801cffa <_dtoa_r+0x882>
 801ce88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ce8a:	2a00      	cmp	r2, #0
 801ce8c:	f000 80b1 	beq.w	801cff2 <_dtoa_r+0x87a>
 801ce90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ce94:	9e07      	ldr	r6, [sp, #28]
 801ce96:	9d04      	ldr	r5, [sp, #16]
 801ce98:	9a04      	ldr	r2, [sp, #16]
 801ce9a:	2101      	movs	r1, #1
 801ce9c:	4620      	mov	r0, r4
 801ce9e:	441a      	add	r2, r3
 801cea0:	9204      	str	r2, [sp, #16]
 801cea2:	9a05      	ldr	r2, [sp, #20]
 801cea4:	441a      	add	r2, r3
 801cea6:	9205      	str	r2, [sp, #20]
 801cea8:	f000 ff34 	bl	801dd14 <__i2b>
 801ceac:	4607      	mov	r7, r0
 801ceae:	2d00      	cmp	r5, #0
 801ceb0:	dd0c      	ble.n	801cecc <_dtoa_r+0x754>
 801ceb2:	9b05      	ldr	r3, [sp, #20]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	dd09      	ble.n	801cecc <_dtoa_r+0x754>
 801ceb8:	42ab      	cmp	r3, r5
 801ceba:	9a04      	ldr	r2, [sp, #16]
 801cebc:	bfa8      	it	ge
 801cebe:	462b      	movge	r3, r5
 801cec0:	1ad2      	subs	r2, r2, r3
 801cec2:	1aed      	subs	r5, r5, r3
 801cec4:	9204      	str	r2, [sp, #16]
 801cec6:	9a05      	ldr	r2, [sp, #20]
 801cec8:	1ad3      	subs	r3, r2, r3
 801ceca:	9305      	str	r3, [sp, #20]
 801cecc:	9b07      	ldr	r3, [sp, #28]
 801cece:	b31b      	cbz	r3, 801cf18 <_dtoa_r+0x7a0>
 801ced0:	9b08      	ldr	r3, [sp, #32]
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	f000 80ad 	beq.w	801d032 <_dtoa_r+0x8ba>
 801ced8:	2e00      	cmp	r6, #0
 801ceda:	dd13      	ble.n	801cf04 <_dtoa_r+0x78c>
 801cedc:	4639      	mov	r1, r7
 801cede:	4632      	mov	r2, r6
 801cee0:	4620      	mov	r0, r4
 801cee2:	f000 ffd5 	bl	801de90 <__pow5mult>
 801cee6:	ee18 2a10 	vmov	r2, s16
 801ceea:	4601      	mov	r1, r0
 801ceec:	4607      	mov	r7, r0
 801ceee:	4620      	mov	r0, r4
 801cef0:	f000 ff26 	bl	801dd40 <__multiply>
 801cef4:	4680      	mov	r8, r0
 801cef6:	ee18 1a10 	vmov	r1, s16
 801cefa:	4620      	mov	r0, r4
 801cefc:	ee08 8a10 	vmov	s16, r8
 801cf00:	f000 fe04 	bl	801db0c <_Bfree>
 801cf04:	9b07      	ldr	r3, [sp, #28]
 801cf06:	1b9a      	subs	r2, r3, r6
 801cf08:	d006      	beq.n	801cf18 <_dtoa_r+0x7a0>
 801cf0a:	ee18 1a10 	vmov	r1, s16
 801cf0e:	4620      	mov	r0, r4
 801cf10:	f000 ffbe 	bl	801de90 <__pow5mult>
 801cf14:	ee08 0a10 	vmov	s16, r0
 801cf18:	2101      	movs	r1, #1
 801cf1a:	4620      	mov	r0, r4
 801cf1c:	f000 fefa 	bl	801dd14 <__i2b>
 801cf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf22:	4606      	mov	r6, r0
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	f340 8086 	ble.w	801d036 <_dtoa_r+0x8be>
 801cf2a:	461a      	mov	r2, r3
 801cf2c:	4601      	mov	r1, r0
 801cf2e:	4620      	mov	r0, r4
 801cf30:	f000 ffae 	bl	801de90 <__pow5mult>
 801cf34:	9b06      	ldr	r3, [sp, #24]
 801cf36:	4606      	mov	r6, r0
 801cf38:	2b01      	cmp	r3, #1
 801cf3a:	dd7f      	ble.n	801d03c <_dtoa_r+0x8c4>
 801cf3c:	f04f 0800 	mov.w	r8, #0
 801cf40:	6933      	ldr	r3, [r6, #16]
 801cf42:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cf46:	6918      	ldr	r0, [r3, #16]
 801cf48:	f000 fe94 	bl	801dc74 <__hi0bits>
 801cf4c:	f1c0 0020 	rsb	r0, r0, #32
 801cf50:	9b05      	ldr	r3, [sp, #20]
 801cf52:	4418      	add	r0, r3
 801cf54:	f010 001f 	ands.w	r0, r0, #31
 801cf58:	f000 8091 	beq.w	801d07e <_dtoa_r+0x906>
 801cf5c:	f1c0 0320 	rsb	r3, r0, #32
 801cf60:	2b04      	cmp	r3, #4
 801cf62:	f340 8089 	ble.w	801d078 <_dtoa_r+0x900>
 801cf66:	f1c0 001c 	rsb	r0, r0, #28
 801cf6a:	9b04      	ldr	r3, [sp, #16]
 801cf6c:	4405      	add	r5, r0
 801cf6e:	4403      	add	r3, r0
 801cf70:	9304      	str	r3, [sp, #16]
 801cf72:	9b05      	ldr	r3, [sp, #20]
 801cf74:	4403      	add	r3, r0
 801cf76:	9305      	str	r3, [sp, #20]
 801cf78:	9b04      	ldr	r3, [sp, #16]
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	dd07      	ble.n	801cf8e <_dtoa_r+0x816>
 801cf7e:	ee18 1a10 	vmov	r1, s16
 801cf82:	461a      	mov	r2, r3
 801cf84:	4620      	mov	r0, r4
 801cf86:	f000 ffdd 	bl	801df44 <__lshift>
 801cf8a:	ee08 0a10 	vmov	s16, r0
 801cf8e:	9b05      	ldr	r3, [sp, #20]
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	dd05      	ble.n	801cfa0 <_dtoa_r+0x828>
 801cf94:	4631      	mov	r1, r6
 801cf96:	461a      	mov	r2, r3
 801cf98:	4620      	mov	r0, r4
 801cf9a:	f000 ffd3 	bl	801df44 <__lshift>
 801cf9e:	4606      	mov	r6, r0
 801cfa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d06d      	beq.n	801d082 <_dtoa_r+0x90a>
 801cfa6:	4631      	mov	r1, r6
 801cfa8:	ee18 0a10 	vmov	r0, s16
 801cfac:	f001 f83a 	bl	801e024 <__mcmp>
 801cfb0:	2800      	cmp	r0, #0
 801cfb2:	da66      	bge.n	801d082 <_dtoa_r+0x90a>
 801cfb4:	9b00      	ldr	r3, [sp, #0]
 801cfb6:	ee18 1a10 	vmov	r1, s16
 801cfba:	220a      	movs	r2, #10
 801cfbc:	4620      	mov	r0, r4
 801cfbe:	3b01      	subs	r3, #1
 801cfc0:	9300      	str	r3, [sp, #0]
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	f000 fdc4 	bl	801db50 <__multadd>
 801cfc8:	9b08      	ldr	r3, [sp, #32]
 801cfca:	ee08 0a10 	vmov	s16, r0
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	f000 81af 	beq.w	801d332 <_dtoa_r+0xbba>
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	4639      	mov	r1, r7
 801cfd8:	220a      	movs	r2, #10
 801cfda:	4620      	mov	r0, r4
 801cfdc:	f000 fdb8 	bl	801db50 <__multadd>
 801cfe0:	9b02      	ldr	r3, [sp, #8]
 801cfe2:	4607      	mov	r7, r0
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	f300 808d 	bgt.w	801d104 <_dtoa_r+0x98c>
 801cfea:	9b06      	ldr	r3, [sp, #24]
 801cfec:	2b02      	cmp	r3, #2
 801cfee:	dc50      	bgt.n	801d092 <_dtoa_r+0x91a>
 801cff0:	e088      	b.n	801d104 <_dtoa_r+0x98c>
 801cff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cff4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cff8:	e74c      	b.n	801ce94 <_dtoa_r+0x71c>
 801cffa:	9b03      	ldr	r3, [sp, #12]
 801cffc:	1e5e      	subs	r6, r3, #1
 801cffe:	9b07      	ldr	r3, [sp, #28]
 801d000:	42b3      	cmp	r3, r6
 801d002:	bfb7      	itett	lt
 801d004:	9b07      	ldrlt	r3, [sp, #28]
 801d006:	1b9e      	subge	r6, r3, r6
 801d008:	9607      	strlt	r6, [sp, #28]
 801d00a:	1af2      	sublt	r2, r6, r3
 801d00c:	bfbf      	itttt	lt
 801d00e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d010:	2600      	movlt	r6, #0
 801d012:	189b      	addlt	r3, r3, r2
 801d014:	930a      	strlt	r3, [sp, #40]	; 0x28
 801d016:	9b03      	ldr	r3, [sp, #12]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	bfb7      	itett	lt
 801d01c:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801d020:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801d024:	1a9d      	sublt	r5, r3, r2
 801d026:	2300      	movlt	r3, #0
 801d028:	e736      	b.n	801ce98 <_dtoa_r+0x720>
 801d02a:	9e07      	ldr	r6, [sp, #28]
 801d02c:	9d04      	ldr	r5, [sp, #16]
 801d02e:	9f08      	ldr	r7, [sp, #32]
 801d030:	e73d      	b.n	801ceae <_dtoa_r+0x736>
 801d032:	9a07      	ldr	r2, [sp, #28]
 801d034:	e769      	b.n	801cf0a <_dtoa_r+0x792>
 801d036:	9b06      	ldr	r3, [sp, #24]
 801d038:	2b01      	cmp	r3, #1
 801d03a:	dc18      	bgt.n	801d06e <_dtoa_r+0x8f6>
 801d03c:	f1ba 0f00 	cmp.w	sl, #0
 801d040:	d115      	bne.n	801d06e <_dtoa_r+0x8f6>
 801d042:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d046:	b993      	cbnz	r3, 801d06e <_dtoa_r+0x8f6>
 801d048:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d04c:	0d1b      	lsrs	r3, r3, #20
 801d04e:	051b      	lsls	r3, r3, #20
 801d050:	b183      	cbz	r3, 801d074 <_dtoa_r+0x8fc>
 801d052:	9b04      	ldr	r3, [sp, #16]
 801d054:	f04f 0801 	mov.w	r8, #1
 801d058:	3301      	adds	r3, #1
 801d05a:	9304      	str	r3, [sp, #16]
 801d05c:	9b05      	ldr	r3, [sp, #20]
 801d05e:	3301      	adds	r3, #1
 801d060:	9305      	str	r3, [sp, #20]
 801d062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d064:	2b00      	cmp	r3, #0
 801d066:	f47f af6b 	bne.w	801cf40 <_dtoa_r+0x7c8>
 801d06a:	2001      	movs	r0, #1
 801d06c:	e770      	b.n	801cf50 <_dtoa_r+0x7d8>
 801d06e:	f04f 0800 	mov.w	r8, #0
 801d072:	e7f6      	b.n	801d062 <_dtoa_r+0x8ea>
 801d074:	4698      	mov	r8, r3
 801d076:	e7f4      	b.n	801d062 <_dtoa_r+0x8ea>
 801d078:	f43f af7e 	beq.w	801cf78 <_dtoa_r+0x800>
 801d07c:	4618      	mov	r0, r3
 801d07e:	301c      	adds	r0, #28
 801d080:	e773      	b.n	801cf6a <_dtoa_r+0x7f2>
 801d082:	9b03      	ldr	r3, [sp, #12]
 801d084:	2b00      	cmp	r3, #0
 801d086:	dc37      	bgt.n	801d0f8 <_dtoa_r+0x980>
 801d088:	9b06      	ldr	r3, [sp, #24]
 801d08a:	2b02      	cmp	r3, #2
 801d08c:	dd34      	ble.n	801d0f8 <_dtoa_r+0x980>
 801d08e:	9b03      	ldr	r3, [sp, #12]
 801d090:	9302      	str	r3, [sp, #8]
 801d092:	9b02      	ldr	r3, [sp, #8]
 801d094:	b96b      	cbnz	r3, 801d0b2 <_dtoa_r+0x93a>
 801d096:	4631      	mov	r1, r6
 801d098:	2205      	movs	r2, #5
 801d09a:	4620      	mov	r0, r4
 801d09c:	f000 fd58 	bl	801db50 <__multadd>
 801d0a0:	4601      	mov	r1, r0
 801d0a2:	4606      	mov	r6, r0
 801d0a4:	ee18 0a10 	vmov	r0, s16
 801d0a8:	f000 ffbc 	bl	801e024 <__mcmp>
 801d0ac:	2800      	cmp	r0, #0
 801d0ae:	f73f adbd 	bgt.w	801cc2c <_dtoa_r+0x4b4>
 801d0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0b4:	9d01      	ldr	r5, [sp, #4]
 801d0b6:	43db      	mvns	r3, r3
 801d0b8:	9300      	str	r3, [sp, #0]
 801d0ba:	f04f 0800 	mov.w	r8, #0
 801d0be:	4631      	mov	r1, r6
 801d0c0:	4620      	mov	r0, r4
 801d0c2:	f000 fd23 	bl	801db0c <_Bfree>
 801d0c6:	2f00      	cmp	r7, #0
 801d0c8:	f43f aea6 	beq.w	801ce18 <_dtoa_r+0x6a0>
 801d0cc:	f1b8 0f00 	cmp.w	r8, #0
 801d0d0:	d005      	beq.n	801d0de <_dtoa_r+0x966>
 801d0d2:	45b8      	cmp	r8, r7
 801d0d4:	d003      	beq.n	801d0de <_dtoa_r+0x966>
 801d0d6:	4641      	mov	r1, r8
 801d0d8:	4620      	mov	r0, r4
 801d0da:	f000 fd17 	bl	801db0c <_Bfree>
 801d0de:	4639      	mov	r1, r7
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	f000 fd13 	bl	801db0c <_Bfree>
 801d0e6:	e697      	b.n	801ce18 <_dtoa_r+0x6a0>
 801d0e8:	2600      	movs	r6, #0
 801d0ea:	4637      	mov	r7, r6
 801d0ec:	e7e1      	b.n	801d0b2 <_dtoa_r+0x93a>
 801d0ee:	9700      	str	r7, [sp, #0]
 801d0f0:	4637      	mov	r7, r6
 801d0f2:	e59b      	b.n	801cc2c <_dtoa_r+0x4b4>
 801d0f4:	40240000 	.word	0x40240000
 801d0f8:	9b08      	ldr	r3, [sp, #32]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	f000 80ca 	beq.w	801d294 <_dtoa_r+0xb1c>
 801d100:	9b03      	ldr	r3, [sp, #12]
 801d102:	9302      	str	r3, [sp, #8]
 801d104:	2d00      	cmp	r5, #0
 801d106:	dd05      	ble.n	801d114 <_dtoa_r+0x99c>
 801d108:	4639      	mov	r1, r7
 801d10a:	462a      	mov	r2, r5
 801d10c:	4620      	mov	r0, r4
 801d10e:	f000 ff19 	bl	801df44 <__lshift>
 801d112:	4607      	mov	r7, r0
 801d114:	f1b8 0f00 	cmp.w	r8, #0
 801d118:	d05b      	beq.n	801d1d2 <_dtoa_r+0xa5a>
 801d11a:	6879      	ldr	r1, [r7, #4]
 801d11c:	4620      	mov	r0, r4
 801d11e:	f000 fcb5 	bl	801da8c <_Balloc>
 801d122:	4605      	mov	r5, r0
 801d124:	b928      	cbnz	r0, 801d132 <_dtoa_r+0x9ba>
 801d126:	4b87      	ldr	r3, [pc, #540]	; (801d344 <_dtoa_r+0xbcc>)
 801d128:	4602      	mov	r2, r0
 801d12a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d12e:	f7ff bb3d 	b.w	801c7ac <_dtoa_r+0x34>
 801d132:	693a      	ldr	r2, [r7, #16]
 801d134:	f107 010c 	add.w	r1, r7, #12
 801d138:	300c      	adds	r0, #12
 801d13a:	3202      	adds	r2, #2
 801d13c:	0092      	lsls	r2, r2, #2
 801d13e:	f7fd fc01 	bl	801a944 <memcpy>
 801d142:	2201      	movs	r2, #1
 801d144:	4629      	mov	r1, r5
 801d146:	4620      	mov	r0, r4
 801d148:	f000 fefc 	bl	801df44 <__lshift>
 801d14c:	9b01      	ldr	r3, [sp, #4]
 801d14e:	46b8      	mov	r8, r7
 801d150:	4607      	mov	r7, r0
 801d152:	f103 0901 	add.w	r9, r3, #1
 801d156:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d15a:	4413      	add	r3, r2
 801d15c:	9305      	str	r3, [sp, #20]
 801d15e:	f00a 0301 	and.w	r3, sl, #1
 801d162:	9304      	str	r3, [sp, #16]
 801d164:	4631      	mov	r1, r6
 801d166:	ee18 0a10 	vmov	r0, s16
 801d16a:	f7ff fa71 	bl	801c650 <quorem>
 801d16e:	4641      	mov	r1, r8
 801d170:	9002      	str	r0, [sp, #8]
 801d172:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d176:	ee18 0a10 	vmov	r0, s16
 801d17a:	f109 3bff 	add.w	fp, r9, #4294967295
 801d17e:	f000 ff51 	bl	801e024 <__mcmp>
 801d182:	463a      	mov	r2, r7
 801d184:	9003      	str	r0, [sp, #12]
 801d186:	4631      	mov	r1, r6
 801d188:	4620      	mov	r0, r4
 801d18a:	f000 ff67 	bl	801e05c <__mdiff>
 801d18e:	68c2      	ldr	r2, [r0, #12]
 801d190:	4605      	mov	r5, r0
 801d192:	bb02      	cbnz	r2, 801d1d6 <_dtoa_r+0xa5e>
 801d194:	4601      	mov	r1, r0
 801d196:	ee18 0a10 	vmov	r0, s16
 801d19a:	f000 ff43 	bl	801e024 <__mcmp>
 801d19e:	4602      	mov	r2, r0
 801d1a0:	4629      	mov	r1, r5
 801d1a2:	4620      	mov	r0, r4
 801d1a4:	9207      	str	r2, [sp, #28]
 801d1a6:	f000 fcb1 	bl	801db0c <_Bfree>
 801d1aa:	464d      	mov	r5, r9
 801d1ac:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d1b0:	ea43 0102 	orr.w	r1, r3, r2
 801d1b4:	9b04      	ldr	r3, [sp, #16]
 801d1b6:	430b      	orrs	r3, r1
 801d1b8:	d10f      	bne.n	801d1da <_dtoa_r+0xa62>
 801d1ba:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d1be:	d02a      	beq.n	801d216 <_dtoa_r+0xa9e>
 801d1c0:	9b03      	ldr	r3, [sp, #12]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	dd02      	ble.n	801d1cc <_dtoa_r+0xa54>
 801d1c6:	9b02      	ldr	r3, [sp, #8]
 801d1c8:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801d1cc:	f88b a000 	strb.w	sl, [fp]
 801d1d0:	e775      	b.n	801d0be <_dtoa_r+0x946>
 801d1d2:	4638      	mov	r0, r7
 801d1d4:	e7ba      	b.n	801d14c <_dtoa_r+0x9d4>
 801d1d6:	2201      	movs	r2, #1
 801d1d8:	e7e2      	b.n	801d1a0 <_dtoa_r+0xa28>
 801d1da:	9b03      	ldr	r3, [sp, #12]
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	db04      	blt.n	801d1ea <_dtoa_r+0xa72>
 801d1e0:	9906      	ldr	r1, [sp, #24]
 801d1e2:	430b      	orrs	r3, r1
 801d1e4:	9904      	ldr	r1, [sp, #16]
 801d1e6:	430b      	orrs	r3, r1
 801d1e8:	d122      	bne.n	801d230 <_dtoa_r+0xab8>
 801d1ea:	2a00      	cmp	r2, #0
 801d1ec:	ddee      	ble.n	801d1cc <_dtoa_r+0xa54>
 801d1ee:	ee18 1a10 	vmov	r1, s16
 801d1f2:	2201      	movs	r2, #1
 801d1f4:	4620      	mov	r0, r4
 801d1f6:	f000 fea5 	bl	801df44 <__lshift>
 801d1fa:	4631      	mov	r1, r6
 801d1fc:	ee08 0a10 	vmov	s16, r0
 801d200:	f000 ff10 	bl	801e024 <__mcmp>
 801d204:	2800      	cmp	r0, #0
 801d206:	dc03      	bgt.n	801d210 <_dtoa_r+0xa98>
 801d208:	d1e0      	bne.n	801d1cc <_dtoa_r+0xa54>
 801d20a:	f01a 0f01 	tst.w	sl, #1
 801d20e:	d0dd      	beq.n	801d1cc <_dtoa_r+0xa54>
 801d210:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d214:	d1d7      	bne.n	801d1c6 <_dtoa_r+0xa4e>
 801d216:	2339      	movs	r3, #57	; 0x39
 801d218:	f88b 3000 	strb.w	r3, [fp]
 801d21c:	462b      	mov	r3, r5
 801d21e:	461d      	mov	r5, r3
 801d220:	3b01      	subs	r3, #1
 801d222:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d226:	2a39      	cmp	r2, #57	; 0x39
 801d228:	d070      	beq.n	801d30c <_dtoa_r+0xb94>
 801d22a:	3201      	adds	r2, #1
 801d22c:	701a      	strb	r2, [r3, #0]
 801d22e:	e746      	b.n	801d0be <_dtoa_r+0x946>
 801d230:	2a00      	cmp	r2, #0
 801d232:	dd07      	ble.n	801d244 <_dtoa_r+0xacc>
 801d234:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d238:	d0ed      	beq.n	801d216 <_dtoa_r+0xa9e>
 801d23a:	f10a 0301 	add.w	r3, sl, #1
 801d23e:	f88b 3000 	strb.w	r3, [fp]
 801d242:	e73c      	b.n	801d0be <_dtoa_r+0x946>
 801d244:	9b05      	ldr	r3, [sp, #20]
 801d246:	f809 ac01 	strb.w	sl, [r9, #-1]
 801d24a:	4599      	cmp	r9, r3
 801d24c:	d046      	beq.n	801d2dc <_dtoa_r+0xb64>
 801d24e:	ee18 1a10 	vmov	r1, s16
 801d252:	2300      	movs	r3, #0
 801d254:	220a      	movs	r2, #10
 801d256:	4620      	mov	r0, r4
 801d258:	f000 fc7a 	bl	801db50 <__multadd>
 801d25c:	45b8      	cmp	r8, r7
 801d25e:	ee08 0a10 	vmov	s16, r0
 801d262:	f04f 0300 	mov.w	r3, #0
 801d266:	f04f 020a 	mov.w	r2, #10
 801d26a:	4641      	mov	r1, r8
 801d26c:	4620      	mov	r0, r4
 801d26e:	d106      	bne.n	801d27e <_dtoa_r+0xb06>
 801d270:	f000 fc6e 	bl	801db50 <__multadd>
 801d274:	4680      	mov	r8, r0
 801d276:	4607      	mov	r7, r0
 801d278:	f109 0901 	add.w	r9, r9, #1
 801d27c:	e772      	b.n	801d164 <_dtoa_r+0x9ec>
 801d27e:	f000 fc67 	bl	801db50 <__multadd>
 801d282:	4639      	mov	r1, r7
 801d284:	4680      	mov	r8, r0
 801d286:	2300      	movs	r3, #0
 801d288:	220a      	movs	r2, #10
 801d28a:	4620      	mov	r0, r4
 801d28c:	f000 fc60 	bl	801db50 <__multadd>
 801d290:	4607      	mov	r7, r0
 801d292:	e7f1      	b.n	801d278 <_dtoa_r+0xb00>
 801d294:	9b03      	ldr	r3, [sp, #12]
 801d296:	9302      	str	r3, [sp, #8]
 801d298:	9d01      	ldr	r5, [sp, #4]
 801d29a:	4631      	mov	r1, r6
 801d29c:	ee18 0a10 	vmov	r0, s16
 801d2a0:	f7ff f9d6 	bl	801c650 <quorem>
 801d2a4:	9b01      	ldr	r3, [sp, #4]
 801d2a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d2aa:	f805 ab01 	strb.w	sl, [r5], #1
 801d2ae:	1aea      	subs	r2, r5, r3
 801d2b0:	9b02      	ldr	r3, [sp, #8]
 801d2b2:	4293      	cmp	r3, r2
 801d2b4:	dd09      	ble.n	801d2ca <_dtoa_r+0xb52>
 801d2b6:	ee18 1a10 	vmov	r1, s16
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	220a      	movs	r2, #10
 801d2be:	4620      	mov	r0, r4
 801d2c0:	f000 fc46 	bl	801db50 <__multadd>
 801d2c4:	ee08 0a10 	vmov	s16, r0
 801d2c8:	e7e7      	b.n	801d29a <_dtoa_r+0xb22>
 801d2ca:	9b02      	ldr	r3, [sp, #8]
 801d2cc:	f04f 0800 	mov.w	r8, #0
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	bfcc      	ite	gt
 801d2d4:	461d      	movgt	r5, r3
 801d2d6:	2501      	movle	r5, #1
 801d2d8:	9b01      	ldr	r3, [sp, #4]
 801d2da:	441d      	add	r5, r3
 801d2dc:	ee18 1a10 	vmov	r1, s16
 801d2e0:	2201      	movs	r2, #1
 801d2e2:	4620      	mov	r0, r4
 801d2e4:	f000 fe2e 	bl	801df44 <__lshift>
 801d2e8:	4631      	mov	r1, r6
 801d2ea:	ee08 0a10 	vmov	s16, r0
 801d2ee:	f000 fe99 	bl	801e024 <__mcmp>
 801d2f2:	2800      	cmp	r0, #0
 801d2f4:	dc92      	bgt.n	801d21c <_dtoa_r+0xaa4>
 801d2f6:	d102      	bne.n	801d2fe <_dtoa_r+0xb86>
 801d2f8:	f01a 0f01 	tst.w	sl, #1
 801d2fc:	d18e      	bne.n	801d21c <_dtoa_r+0xaa4>
 801d2fe:	462b      	mov	r3, r5
 801d300:	461d      	mov	r5, r3
 801d302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d306:	2a30      	cmp	r2, #48	; 0x30
 801d308:	d0fa      	beq.n	801d300 <_dtoa_r+0xb88>
 801d30a:	e6d8      	b.n	801d0be <_dtoa_r+0x946>
 801d30c:	9a01      	ldr	r2, [sp, #4]
 801d30e:	429a      	cmp	r2, r3
 801d310:	d185      	bne.n	801d21e <_dtoa_r+0xaa6>
 801d312:	9b00      	ldr	r3, [sp, #0]
 801d314:	3301      	adds	r3, #1
 801d316:	9300      	str	r3, [sp, #0]
 801d318:	2331      	movs	r3, #49	; 0x31
 801d31a:	7013      	strb	r3, [r2, #0]
 801d31c:	e6cf      	b.n	801d0be <_dtoa_r+0x946>
 801d31e:	4b0a      	ldr	r3, [pc, #40]	; (801d348 <_dtoa_r+0xbd0>)
 801d320:	f7ff ba98 	b.w	801c854 <_dtoa_r+0xdc>
 801d324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d326:	2b00      	cmp	r3, #0
 801d328:	f47f aa71 	bne.w	801c80e <_dtoa_r+0x96>
 801d32c:	4b07      	ldr	r3, [pc, #28]	; (801d34c <_dtoa_r+0xbd4>)
 801d32e:	f7ff ba91 	b.w	801c854 <_dtoa_r+0xdc>
 801d332:	9b02      	ldr	r3, [sp, #8]
 801d334:	2b00      	cmp	r3, #0
 801d336:	dcaf      	bgt.n	801d298 <_dtoa_r+0xb20>
 801d338:	9b06      	ldr	r3, [sp, #24]
 801d33a:	2b02      	cmp	r3, #2
 801d33c:	f73f aea9 	bgt.w	801d092 <_dtoa_r+0x91a>
 801d340:	e7aa      	b.n	801d298 <_dtoa_r+0xb20>
 801d342:	bf00      	nop
 801d344:	08074668 	.word	0x08074668
 801d348:	08074468 	.word	0x08074468
 801d34c:	080745e9 	.word	0x080745e9

0801d350 <rshift>:
 801d350:	6903      	ldr	r3, [r0, #16]
 801d352:	114a      	asrs	r2, r1, #5
 801d354:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d35c:	f100 0414 	add.w	r4, r0, #20
 801d360:	dd45      	ble.n	801d3ee <rshift+0x9e>
 801d362:	f011 011f 	ands.w	r1, r1, #31
 801d366:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d36a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d36e:	d10c      	bne.n	801d38a <rshift+0x3a>
 801d370:	f100 0710 	add.w	r7, r0, #16
 801d374:	4629      	mov	r1, r5
 801d376:	42b1      	cmp	r1, r6
 801d378:	d334      	bcc.n	801d3e4 <rshift+0x94>
 801d37a:	1a9b      	subs	r3, r3, r2
 801d37c:	1eea      	subs	r2, r5, #3
 801d37e:	009b      	lsls	r3, r3, #2
 801d380:	4296      	cmp	r6, r2
 801d382:	bf38      	it	cc
 801d384:	2300      	movcc	r3, #0
 801d386:	4423      	add	r3, r4
 801d388:	e015      	b.n	801d3b6 <rshift+0x66>
 801d38a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d38e:	f1c1 0820 	rsb	r8, r1, #32
 801d392:	f105 0e04 	add.w	lr, r5, #4
 801d396:	46a1      	mov	r9, r4
 801d398:	40cf      	lsrs	r7, r1
 801d39a:	4576      	cmp	r6, lr
 801d39c:	46f4      	mov	ip, lr
 801d39e:	d815      	bhi.n	801d3cc <rshift+0x7c>
 801d3a0:	1a9a      	subs	r2, r3, r2
 801d3a2:	3501      	adds	r5, #1
 801d3a4:	0092      	lsls	r2, r2, #2
 801d3a6:	3a04      	subs	r2, #4
 801d3a8:	42ae      	cmp	r6, r5
 801d3aa:	bf38      	it	cc
 801d3ac:	2200      	movcc	r2, #0
 801d3ae:	18a3      	adds	r3, r4, r2
 801d3b0:	50a7      	str	r7, [r4, r2]
 801d3b2:	b107      	cbz	r7, 801d3b6 <rshift+0x66>
 801d3b4:	3304      	adds	r3, #4
 801d3b6:	1b1a      	subs	r2, r3, r4
 801d3b8:	42a3      	cmp	r3, r4
 801d3ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d3be:	bf08      	it	eq
 801d3c0:	2300      	moveq	r3, #0
 801d3c2:	6102      	str	r2, [r0, #16]
 801d3c4:	bf08      	it	eq
 801d3c6:	6143      	streq	r3, [r0, #20]
 801d3c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3cc:	f8dc c000 	ldr.w	ip, [ip]
 801d3d0:	fa0c fc08 	lsl.w	ip, ip, r8
 801d3d4:	ea4c 0707 	orr.w	r7, ip, r7
 801d3d8:	f849 7b04 	str.w	r7, [r9], #4
 801d3dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d3e0:	40cf      	lsrs	r7, r1
 801d3e2:	e7da      	b.n	801d39a <rshift+0x4a>
 801d3e4:	f851 cb04 	ldr.w	ip, [r1], #4
 801d3e8:	f847 cf04 	str.w	ip, [r7, #4]!
 801d3ec:	e7c3      	b.n	801d376 <rshift+0x26>
 801d3ee:	4623      	mov	r3, r4
 801d3f0:	e7e1      	b.n	801d3b6 <rshift+0x66>

0801d3f2 <__hexdig_fun>:
 801d3f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d3f6:	2b09      	cmp	r3, #9
 801d3f8:	d802      	bhi.n	801d400 <__hexdig_fun+0xe>
 801d3fa:	3820      	subs	r0, #32
 801d3fc:	b2c0      	uxtb	r0, r0
 801d3fe:	4770      	bx	lr
 801d400:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d404:	2b05      	cmp	r3, #5
 801d406:	d801      	bhi.n	801d40c <__hexdig_fun+0x1a>
 801d408:	3847      	subs	r0, #71	; 0x47
 801d40a:	e7f7      	b.n	801d3fc <__hexdig_fun+0xa>
 801d40c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d410:	2b05      	cmp	r3, #5
 801d412:	d801      	bhi.n	801d418 <__hexdig_fun+0x26>
 801d414:	3827      	subs	r0, #39	; 0x27
 801d416:	e7f1      	b.n	801d3fc <__hexdig_fun+0xa>
 801d418:	2000      	movs	r0, #0
 801d41a:	4770      	bx	lr

0801d41c <__gethex>:
 801d41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d420:	ed2d 8b02 	vpush	{d8}
 801d424:	b089      	sub	sp, #36	; 0x24
 801d426:	ee08 0a10 	vmov	s16, r0
 801d42a:	468b      	mov	fp, r1
 801d42c:	4690      	mov	r8, r2
 801d42e:	9304      	str	r3, [sp, #16]
 801d430:	4bb2      	ldr	r3, [pc, #712]	; (801d6fc <__gethex+0x2e0>)
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	4618      	mov	r0, r3
 801d436:	9301      	str	r3, [sp, #4]
 801d438:	f7e2 ff1e 	bl	8000278 <strlen>
 801d43c:	9b01      	ldr	r3, [sp, #4]
 801d43e:	f8db 2000 	ldr.w	r2, [fp]
 801d442:	4682      	mov	sl, r0
 801d444:	4403      	add	r3, r0
 801d446:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d44a:	9305      	str	r3, [sp, #20]
 801d44c:	1c93      	adds	r3, r2, #2
 801d44e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d452:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d456:	32fe      	adds	r2, #254	; 0xfe
 801d458:	18d1      	adds	r1, r2, r3
 801d45a:	461f      	mov	r7, r3
 801d45c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d460:	9100      	str	r1, [sp, #0]
 801d462:	2830      	cmp	r0, #48	; 0x30
 801d464:	d0f8      	beq.n	801d458 <__gethex+0x3c>
 801d466:	f7ff ffc4 	bl	801d3f2 <__hexdig_fun>
 801d46a:	4604      	mov	r4, r0
 801d46c:	2800      	cmp	r0, #0
 801d46e:	d139      	bne.n	801d4e4 <__gethex+0xc8>
 801d470:	4652      	mov	r2, sl
 801d472:	9901      	ldr	r1, [sp, #4]
 801d474:	4638      	mov	r0, r7
 801d476:	f001 f977 	bl	801e768 <strncmp>
 801d47a:	4605      	mov	r5, r0
 801d47c:	2800      	cmp	r0, #0
 801d47e:	d167      	bne.n	801d550 <__gethex+0x134>
 801d480:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d484:	eb07 060a 	add.w	r6, r7, sl
 801d488:	f7ff ffb3 	bl	801d3f2 <__hexdig_fun>
 801d48c:	2800      	cmp	r0, #0
 801d48e:	d061      	beq.n	801d554 <__gethex+0x138>
 801d490:	4633      	mov	r3, r6
 801d492:	7818      	ldrb	r0, [r3, #0]
 801d494:	461f      	mov	r7, r3
 801d496:	3301      	adds	r3, #1
 801d498:	2830      	cmp	r0, #48	; 0x30
 801d49a:	d0fa      	beq.n	801d492 <__gethex+0x76>
 801d49c:	f7ff ffa9 	bl	801d3f2 <__hexdig_fun>
 801d4a0:	fab0 f480 	clz	r4, r0
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	4635      	mov	r5, r6
 801d4a8:	0964      	lsrs	r4, r4, #5
 801d4aa:	9300      	str	r3, [sp, #0]
 801d4ac:	463a      	mov	r2, r7
 801d4ae:	4616      	mov	r6, r2
 801d4b0:	3201      	adds	r2, #1
 801d4b2:	7830      	ldrb	r0, [r6, #0]
 801d4b4:	f7ff ff9d 	bl	801d3f2 <__hexdig_fun>
 801d4b8:	2800      	cmp	r0, #0
 801d4ba:	d1f8      	bne.n	801d4ae <__gethex+0x92>
 801d4bc:	4652      	mov	r2, sl
 801d4be:	9901      	ldr	r1, [sp, #4]
 801d4c0:	4630      	mov	r0, r6
 801d4c2:	f001 f951 	bl	801e768 <strncmp>
 801d4c6:	b980      	cbnz	r0, 801d4ea <__gethex+0xce>
 801d4c8:	b94d      	cbnz	r5, 801d4de <__gethex+0xc2>
 801d4ca:	eb06 050a 	add.w	r5, r6, sl
 801d4ce:	462a      	mov	r2, r5
 801d4d0:	4616      	mov	r6, r2
 801d4d2:	3201      	adds	r2, #1
 801d4d4:	7830      	ldrb	r0, [r6, #0]
 801d4d6:	f7ff ff8c 	bl	801d3f2 <__hexdig_fun>
 801d4da:	2800      	cmp	r0, #0
 801d4dc:	d1f8      	bne.n	801d4d0 <__gethex+0xb4>
 801d4de:	1bad      	subs	r5, r5, r6
 801d4e0:	00ad      	lsls	r5, r5, #2
 801d4e2:	e004      	b.n	801d4ee <__gethex+0xd2>
 801d4e4:	2400      	movs	r4, #0
 801d4e6:	4625      	mov	r5, r4
 801d4e8:	e7e0      	b.n	801d4ac <__gethex+0x90>
 801d4ea:	2d00      	cmp	r5, #0
 801d4ec:	d1f7      	bne.n	801d4de <__gethex+0xc2>
 801d4ee:	7833      	ldrb	r3, [r6, #0]
 801d4f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d4f4:	2b50      	cmp	r3, #80	; 0x50
 801d4f6:	d13b      	bne.n	801d570 <__gethex+0x154>
 801d4f8:	7873      	ldrb	r3, [r6, #1]
 801d4fa:	2b2b      	cmp	r3, #43	; 0x2b
 801d4fc:	d02c      	beq.n	801d558 <__gethex+0x13c>
 801d4fe:	2b2d      	cmp	r3, #45	; 0x2d
 801d500:	d02e      	beq.n	801d560 <__gethex+0x144>
 801d502:	1c71      	adds	r1, r6, #1
 801d504:	f04f 0900 	mov.w	r9, #0
 801d508:	7808      	ldrb	r0, [r1, #0]
 801d50a:	f7ff ff72 	bl	801d3f2 <__hexdig_fun>
 801d50e:	1e43      	subs	r3, r0, #1
 801d510:	b2db      	uxtb	r3, r3
 801d512:	2b18      	cmp	r3, #24
 801d514:	d82c      	bhi.n	801d570 <__gethex+0x154>
 801d516:	f1a0 0210 	sub.w	r2, r0, #16
 801d51a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d51e:	f7ff ff68 	bl	801d3f2 <__hexdig_fun>
 801d522:	1e43      	subs	r3, r0, #1
 801d524:	b2db      	uxtb	r3, r3
 801d526:	2b18      	cmp	r3, #24
 801d528:	d91d      	bls.n	801d566 <__gethex+0x14a>
 801d52a:	f1b9 0f00 	cmp.w	r9, #0
 801d52e:	d000      	beq.n	801d532 <__gethex+0x116>
 801d530:	4252      	negs	r2, r2
 801d532:	4415      	add	r5, r2
 801d534:	f8cb 1000 	str.w	r1, [fp]
 801d538:	b1e4      	cbz	r4, 801d574 <__gethex+0x158>
 801d53a:	9b00      	ldr	r3, [sp, #0]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	bf14      	ite	ne
 801d540:	2700      	movne	r7, #0
 801d542:	2706      	moveq	r7, #6
 801d544:	4638      	mov	r0, r7
 801d546:	b009      	add	sp, #36	; 0x24
 801d548:	ecbd 8b02 	vpop	{d8}
 801d54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d550:	463e      	mov	r6, r7
 801d552:	4625      	mov	r5, r4
 801d554:	2401      	movs	r4, #1
 801d556:	e7ca      	b.n	801d4ee <__gethex+0xd2>
 801d558:	f04f 0900 	mov.w	r9, #0
 801d55c:	1cb1      	adds	r1, r6, #2
 801d55e:	e7d3      	b.n	801d508 <__gethex+0xec>
 801d560:	f04f 0901 	mov.w	r9, #1
 801d564:	e7fa      	b.n	801d55c <__gethex+0x140>
 801d566:	230a      	movs	r3, #10
 801d568:	fb03 0202 	mla	r2, r3, r2, r0
 801d56c:	3a10      	subs	r2, #16
 801d56e:	e7d4      	b.n	801d51a <__gethex+0xfe>
 801d570:	4631      	mov	r1, r6
 801d572:	e7df      	b.n	801d534 <__gethex+0x118>
 801d574:	1bf3      	subs	r3, r6, r7
 801d576:	4621      	mov	r1, r4
 801d578:	3b01      	subs	r3, #1
 801d57a:	2b07      	cmp	r3, #7
 801d57c:	dc0b      	bgt.n	801d596 <__gethex+0x17a>
 801d57e:	ee18 0a10 	vmov	r0, s16
 801d582:	f000 fa83 	bl	801da8c <_Balloc>
 801d586:	4604      	mov	r4, r0
 801d588:	b940      	cbnz	r0, 801d59c <__gethex+0x180>
 801d58a:	4b5d      	ldr	r3, [pc, #372]	; (801d700 <__gethex+0x2e4>)
 801d58c:	4602      	mov	r2, r0
 801d58e:	21de      	movs	r1, #222	; 0xde
 801d590:	485c      	ldr	r0, [pc, #368]	; (801d704 <__gethex+0x2e8>)
 801d592:	f001 f90b 	bl	801e7ac <__assert_func>
 801d596:	3101      	adds	r1, #1
 801d598:	105b      	asrs	r3, r3, #1
 801d59a:	e7ee      	b.n	801d57a <__gethex+0x15e>
 801d59c:	f100 0914 	add.w	r9, r0, #20
 801d5a0:	f04f 0b00 	mov.w	fp, #0
 801d5a4:	f1ca 0301 	rsb	r3, sl, #1
 801d5a8:	f8cd 9008 	str.w	r9, [sp, #8]
 801d5ac:	f8cd b000 	str.w	fp, [sp]
 801d5b0:	9306      	str	r3, [sp, #24]
 801d5b2:	42b7      	cmp	r7, r6
 801d5b4:	d340      	bcc.n	801d638 <__gethex+0x21c>
 801d5b6:	9802      	ldr	r0, [sp, #8]
 801d5b8:	9b00      	ldr	r3, [sp, #0]
 801d5ba:	f840 3b04 	str.w	r3, [r0], #4
 801d5be:	eba0 0009 	sub.w	r0, r0, r9
 801d5c2:	1080      	asrs	r0, r0, #2
 801d5c4:	0146      	lsls	r6, r0, #5
 801d5c6:	6120      	str	r0, [r4, #16]
 801d5c8:	4618      	mov	r0, r3
 801d5ca:	f000 fb53 	bl	801dc74 <__hi0bits>
 801d5ce:	1a30      	subs	r0, r6, r0
 801d5d0:	f8d8 6000 	ldr.w	r6, [r8]
 801d5d4:	42b0      	cmp	r0, r6
 801d5d6:	dd63      	ble.n	801d6a0 <__gethex+0x284>
 801d5d8:	1b87      	subs	r7, r0, r6
 801d5da:	4620      	mov	r0, r4
 801d5dc:	4639      	mov	r1, r7
 801d5de:	f000 fef9 	bl	801e3d4 <__any_on>
 801d5e2:	4682      	mov	sl, r0
 801d5e4:	b1a8      	cbz	r0, 801d612 <__gethex+0x1f6>
 801d5e6:	1e7b      	subs	r3, r7, #1
 801d5e8:	f04f 0a01 	mov.w	sl, #1
 801d5ec:	1159      	asrs	r1, r3, #5
 801d5ee:	f003 021f 	and.w	r2, r3, #31
 801d5f2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d5f6:	fa0a f202 	lsl.w	r2, sl, r2
 801d5fa:	420a      	tst	r2, r1
 801d5fc:	d009      	beq.n	801d612 <__gethex+0x1f6>
 801d5fe:	4553      	cmp	r3, sl
 801d600:	dd05      	ble.n	801d60e <__gethex+0x1f2>
 801d602:	1eb9      	subs	r1, r7, #2
 801d604:	4620      	mov	r0, r4
 801d606:	f000 fee5 	bl	801e3d4 <__any_on>
 801d60a:	2800      	cmp	r0, #0
 801d60c:	d145      	bne.n	801d69a <__gethex+0x27e>
 801d60e:	f04f 0a02 	mov.w	sl, #2
 801d612:	443d      	add	r5, r7
 801d614:	4639      	mov	r1, r7
 801d616:	4620      	mov	r0, r4
 801d618:	f7ff fe9a 	bl	801d350 <rshift>
 801d61c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d620:	42ab      	cmp	r3, r5
 801d622:	da4c      	bge.n	801d6be <__gethex+0x2a2>
 801d624:	4621      	mov	r1, r4
 801d626:	ee18 0a10 	vmov	r0, s16
 801d62a:	f000 fa6f 	bl	801db0c <_Bfree>
 801d62e:	2300      	movs	r3, #0
 801d630:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d632:	27a3      	movs	r7, #163	; 0xa3
 801d634:	6013      	str	r3, [r2, #0]
 801d636:	e785      	b.n	801d544 <__gethex+0x128>
 801d638:	1e73      	subs	r3, r6, #1
 801d63a:	9a05      	ldr	r2, [sp, #20]
 801d63c:	9303      	str	r3, [sp, #12]
 801d63e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d642:	4293      	cmp	r3, r2
 801d644:	d019      	beq.n	801d67a <__gethex+0x25e>
 801d646:	f1bb 0f20 	cmp.w	fp, #32
 801d64a:	d107      	bne.n	801d65c <__gethex+0x240>
 801d64c:	9b02      	ldr	r3, [sp, #8]
 801d64e:	9a00      	ldr	r2, [sp, #0]
 801d650:	f843 2b04 	str.w	r2, [r3], #4
 801d654:	9302      	str	r3, [sp, #8]
 801d656:	2300      	movs	r3, #0
 801d658:	469b      	mov	fp, r3
 801d65a:	9300      	str	r3, [sp, #0]
 801d65c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d660:	f7ff fec7 	bl	801d3f2 <__hexdig_fun>
 801d664:	f000 000f 	and.w	r0, r0, #15
 801d668:	9b00      	ldr	r3, [sp, #0]
 801d66a:	fa00 f00b 	lsl.w	r0, r0, fp
 801d66e:	f10b 0b04 	add.w	fp, fp, #4
 801d672:	4303      	orrs	r3, r0
 801d674:	9300      	str	r3, [sp, #0]
 801d676:	9b03      	ldr	r3, [sp, #12]
 801d678:	e00d      	b.n	801d696 <__gethex+0x27a>
 801d67a:	9b03      	ldr	r3, [sp, #12]
 801d67c:	9a06      	ldr	r2, [sp, #24]
 801d67e:	4413      	add	r3, r2
 801d680:	42bb      	cmp	r3, r7
 801d682:	d3e0      	bcc.n	801d646 <__gethex+0x22a>
 801d684:	4618      	mov	r0, r3
 801d686:	4652      	mov	r2, sl
 801d688:	9901      	ldr	r1, [sp, #4]
 801d68a:	9307      	str	r3, [sp, #28]
 801d68c:	f001 f86c 	bl	801e768 <strncmp>
 801d690:	9b07      	ldr	r3, [sp, #28]
 801d692:	2800      	cmp	r0, #0
 801d694:	d1d7      	bne.n	801d646 <__gethex+0x22a>
 801d696:	461e      	mov	r6, r3
 801d698:	e78b      	b.n	801d5b2 <__gethex+0x196>
 801d69a:	f04f 0a03 	mov.w	sl, #3
 801d69e:	e7b8      	b.n	801d612 <__gethex+0x1f6>
 801d6a0:	da0a      	bge.n	801d6b8 <__gethex+0x29c>
 801d6a2:	1a37      	subs	r7, r6, r0
 801d6a4:	4621      	mov	r1, r4
 801d6a6:	ee18 0a10 	vmov	r0, s16
 801d6aa:	463a      	mov	r2, r7
 801d6ac:	1bed      	subs	r5, r5, r7
 801d6ae:	f000 fc49 	bl	801df44 <__lshift>
 801d6b2:	4604      	mov	r4, r0
 801d6b4:	f100 0914 	add.w	r9, r0, #20
 801d6b8:	f04f 0a00 	mov.w	sl, #0
 801d6bc:	e7ae      	b.n	801d61c <__gethex+0x200>
 801d6be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d6c2:	42a8      	cmp	r0, r5
 801d6c4:	dd72      	ble.n	801d7ac <__gethex+0x390>
 801d6c6:	1b45      	subs	r5, r0, r5
 801d6c8:	42ae      	cmp	r6, r5
 801d6ca:	dc35      	bgt.n	801d738 <__gethex+0x31c>
 801d6cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d6d0:	2b02      	cmp	r3, #2
 801d6d2:	d029      	beq.n	801d728 <__gethex+0x30c>
 801d6d4:	2b03      	cmp	r3, #3
 801d6d6:	d02b      	beq.n	801d730 <__gethex+0x314>
 801d6d8:	2b01      	cmp	r3, #1
 801d6da:	d11b      	bne.n	801d714 <__gethex+0x2f8>
 801d6dc:	42ae      	cmp	r6, r5
 801d6de:	d119      	bne.n	801d714 <__gethex+0x2f8>
 801d6e0:	2e01      	cmp	r6, #1
 801d6e2:	d111      	bne.n	801d708 <__gethex+0x2ec>
 801d6e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d6e8:	2762      	movs	r7, #98	; 0x62
 801d6ea:	9a04      	ldr	r2, [sp, #16]
 801d6ec:	6013      	str	r3, [r2, #0]
 801d6ee:	2301      	movs	r3, #1
 801d6f0:	6123      	str	r3, [r4, #16]
 801d6f2:	f8c9 3000 	str.w	r3, [r9]
 801d6f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d6f8:	601c      	str	r4, [r3, #0]
 801d6fa:	e723      	b.n	801d544 <__gethex+0x128>
 801d6fc:	080746e0 	.word	0x080746e0
 801d700:	08074668 	.word	0x08074668
 801d704:	08074679 	.word	0x08074679
 801d708:	1e71      	subs	r1, r6, #1
 801d70a:	4620      	mov	r0, r4
 801d70c:	f000 fe62 	bl	801e3d4 <__any_on>
 801d710:	2800      	cmp	r0, #0
 801d712:	d1e7      	bne.n	801d6e4 <__gethex+0x2c8>
 801d714:	4621      	mov	r1, r4
 801d716:	ee18 0a10 	vmov	r0, s16
 801d71a:	f000 f9f7 	bl	801db0c <_Bfree>
 801d71e:	2300      	movs	r3, #0
 801d720:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d722:	2750      	movs	r7, #80	; 0x50
 801d724:	6013      	str	r3, [r2, #0]
 801d726:	e70d      	b.n	801d544 <__gethex+0x128>
 801d728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d1f2      	bne.n	801d714 <__gethex+0x2f8>
 801d72e:	e7d9      	b.n	801d6e4 <__gethex+0x2c8>
 801d730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d732:	2b00      	cmp	r3, #0
 801d734:	d1d6      	bne.n	801d6e4 <__gethex+0x2c8>
 801d736:	e7ed      	b.n	801d714 <__gethex+0x2f8>
 801d738:	1e6f      	subs	r7, r5, #1
 801d73a:	f1ba 0f00 	cmp.w	sl, #0
 801d73e:	d132      	bne.n	801d7a6 <__gethex+0x38a>
 801d740:	b127      	cbz	r7, 801d74c <__gethex+0x330>
 801d742:	4639      	mov	r1, r7
 801d744:	4620      	mov	r0, r4
 801d746:	f000 fe45 	bl	801e3d4 <__any_on>
 801d74a:	4682      	mov	sl, r0
 801d74c:	117b      	asrs	r3, r7, #5
 801d74e:	2101      	movs	r1, #1
 801d750:	f007 071f 	and.w	r7, r7, #31
 801d754:	4620      	mov	r0, r4
 801d756:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d75a:	1b76      	subs	r6, r6, r5
 801d75c:	fa01 f707 	lsl.w	r7, r1, r7
 801d760:	4629      	mov	r1, r5
 801d762:	421f      	tst	r7, r3
 801d764:	f04f 0702 	mov.w	r7, #2
 801d768:	bf18      	it	ne
 801d76a:	f04a 0a02 	orrne.w	sl, sl, #2
 801d76e:	f7ff fdef 	bl	801d350 <rshift>
 801d772:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d776:	f1ba 0f00 	cmp.w	sl, #0
 801d77a:	d048      	beq.n	801d80e <__gethex+0x3f2>
 801d77c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d780:	2b02      	cmp	r3, #2
 801d782:	d015      	beq.n	801d7b0 <__gethex+0x394>
 801d784:	2b03      	cmp	r3, #3
 801d786:	d017      	beq.n	801d7b8 <__gethex+0x39c>
 801d788:	2b01      	cmp	r3, #1
 801d78a:	d109      	bne.n	801d7a0 <__gethex+0x384>
 801d78c:	f01a 0f02 	tst.w	sl, #2
 801d790:	d006      	beq.n	801d7a0 <__gethex+0x384>
 801d792:	f8d9 0000 	ldr.w	r0, [r9]
 801d796:	ea4a 0a00 	orr.w	sl, sl, r0
 801d79a:	f01a 0f01 	tst.w	sl, #1
 801d79e:	d10e      	bne.n	801d7be <__gethex+0x3a2>
 801d7a0:	f047 0710 	orr.w	r7, r7, #16
 801d7a4:	e033      	b.n	801d80e <__gethex+0x3f2>
 801d7a6:	f04f 0a01 	mov.w	sl, #1
 801d7aa:	e7cf      	b.n	801d74c <__gethex+0x330>
 801d7ac:	2701      	movs	r7, #1
 801d7ae:	e7e2      	b.n	801d776 <__gethex+0x35a>
 801d7b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d7b2:	f1c3 0301 	rsb	r3, r3, #1
 801d7b6:	9315      	str	r3, [sp, #84]	; 0x54
 801d7b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	d0f0      	beq.n	801d7a0 <__gethex+0x384>
 801d7be:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d7c2:	f104 0314 	add.w	r3, r4, #20
 801d7c6:	f04f 0c00 	mov.w	ip, #0
 801d7ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d7ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d7dc:	d01c      	beq.n	801d818 <__gethex+0x3fc>
 801d7de:	3201      	adds	r2, #1
 801d7e0:	6002      	str	r2, [r0, #0]
 801d7e2:	2f02      	cmp	r7, #2
 801d7e4:	f104 0314 	add.w	r3, r4, #20
 801d7e8:	d13f      	bne.n	801d86a <__gethex+0x44e>
 801d7ea:	f8d8 2000 	ldr.w	r2, [r8]
 801d7ee:	3a01      	subs	r2, #1
 801d7f0:	42b2      	cmp	r2, r6
 801d7f2:	d10a      	bne.n	801d80a <__gethex+0x3ee>
 801d7f4:	1171      	asrs	r1, r6, #5
 801d7f6:	2201      	movs	r2, #1
 801d7f8:	f006 061f 	and.w	r6, r6, #31
 801d7fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d800:	fa02 f606 	lsl.w	r6, r2, r6
 801d804:	421e      	tst	r6, r3
 801d806:	bf18      	it	ne
 801d808:	4617      	movne	r7, r2
 801d80a:	f047 0720 	orr.w	r7, r7, #32
 801d80e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d810:	601c      	str	r4, [r3, #0]
 801d812:	9b04      	ldr	r3, [sp, #16]
 801d814:	601d      	str	r5, [r3, #0]
 801d816:	e695      	b.n	801d544 <__gethex+0x128>
 801d818:	4299      	cmp	r1, r3
 801d81a:	f843 cc04 	str.w	ip, [r3, #-4]
 801d81e:	d8d8      	bhi.n	801d7d2 <__gethex+0x3b6>
 801d820:	68a3      	ldr	r3, [r4, #8]
 801d822:	459b      	cmp	fp, r3
 801d824:	db19      	blt.n	801d85a <__gethex+0x43e>
 801d826:	6861      	ldr	r1, [r4, #4]
 801d828:	ee18 0a10 	vmov	r0, s16
 801d82c:	3101      	adds	r1, #1
 801d82e:	f000 f92d 	bl	801da8c <_Balloc>
 801d832:	4681      	mov	r9, r0
 801d834:	b918      	cbnz	r0, 801d83e <__gethex+0x422>
 801d836:	4b1b      	ldr	r3, [pc, #108]	; (801d8a4 <__gethex+0x488>)
 801d838:	4602      	mov	r2, r0
 801d83a:	2184      	movs	r1, #132	; 0x84
 801d83c:	e6a8      	b.n	801d590 <__gethex+0x174>
 801d83e:	6922      	ldr	r2, [r4, #16]
 801d840:	f104 010c 	add.w	r1, r4, #12
 801d844:	300c      	adds	r0, #12
 801d846:	3202      	adds	r2, #2
 801d848:	0092      	lsls	r2, r2, #2
 801d84a:	f7fd f87b 	bl	801a944 <memcpy>
 801d84e:	4621      	mov	r1, r4
 801d850:	464c      	mov	r4, r9
 801d852:	ee18 0a10 	vmov	r0, s16
 801d856:	f000 f959 	bl	801db0c <_Bfree>
 801d85a:	6923      	ldr	r3, [r4, #16]
 801d85c:	1c5a      	adds	r2, r3, #1
 801d85e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d862:	6122      	str	r2, [r4, #16]
 801d864:	2201      	movs	r2, #1
 801d866:	615a      	str	r2, [r3, #20]
 801d868:	e7bb      	b.n	801d7e2 <__gethex+0x3c6>
 801d86a:	6922      	ldr	r2, [r4, #16]
 801d86c:	455a      	cmp	r2, fp
 801d86e:	dd0b      	ble.n	801d888 <__gethex+0x46c>
 801d870:	2101      	movs	r1, #1
 801d872:	4620      	mov	r0, r4
 801d874:	f7ff fd6c 	bl	801d350 <rshift>
 801d878:	3501      	adds	r5, #1
 801d87a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d87e:	42ab      	cmp	r3, r5
 801d880:	f6ff aed0 	blt.w	801d624 <__gethex+0x208>
 801d884:	2701      	movs	r7, #1
 801d886:	e7c0      	b.n	801d80a <__gethex+0x3ee>
 801d888:	f016 061f 	ands.w	r6, r6, #31
 801d88c:	d0fa      	beq.n	801d884 <__gethex+0x468>
 801d88e:	4453      	add	r3, sl
 801d890:	f1c6 0620 	rsb	r6, r6, #32
 801d894:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d898:	f000 f9ec 	bl	801dc74 <__hi0bits>
 801d89c:	42b0      	cmp	r0, r6
 801d89e:	dbe7      	blt.n	801d870 <__gethex+0x454>
 801d8a0:	e7f0      	b.n	801d884 <__gethex+0x468>
 801d8a2:	bf00      	nop
 801d8a4:	08074668 	.word	0x08074668

0801d8a8 <L_shift>:
 801d8a8:	f1c2 0208 	rsb	r2, r2, #8
 801d8ac:	0092      	lsls	r2, r2, #2
 801d8ae:	b570      	push	{r4, r5, r6, lr}
 801d8b0:	f1c2 0620 	rsb	r6, r2, #32
 801d8b4:	6843      	ldr	r3, [r0, #4]
 801d8b6:	6804      	ldr	r4, [r0, #0]
 801d8b8:	fa03 f506 	lsl.w	r5, r3, r6
 801d8bc:	40d3      	lsrs	r3, r2
 801d8be:	432c      	orrs	r4, r5
 801d8c0:	6004      	str	r4, [r0, #0]
 801d8c2:	f840 3f04 	str.w	r3, [r0, #4]!
 801d8c6:	4288      	cmp	r0, r1
 801d8c8:	d3f4      	bcc.n	801d8b4 <L_shift+0xc>
 801d8ca:	bd70      	pop	{r4, r5, r6, pc}

0801d8cc <__match>:
 801d8cc:	6803      	ldr	r3, [r0, #0]
 801d8ce:	3301      	adds	r3, #1
 801d8d0:	b530      	push	{r4, r5, lr}
 801d8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d8d6:	b914      	cbnz	r4, 801d8de <__match+0x12>
 801d8d8:	6003      	str	r3, [r0, #0]
 801d8da:	2001      	movs	r0, #1
 801d8dc:	bd30      	pop	{r4, r5, pc}
 801d8de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d8e6:	2d19      	cmp	r5, #25
 801d8e8:	bf98      	it	ls
 801d8ea:	3220      	addls	r2, #32
 801d8ec:	42a2      	cmp	r2, r4
 801d8ee:	d0f0      	beq.n	801d8d2 <__match+0x6>
 801d8f0:	2000      	movs	r0, #0
 801d8f2:	e7f3      	b.n	801d8dc <__match+0x10>

0801d8f4 <__hexnan>:
 801d8f4:	680b      	ldr	r3, [r1, #0]
 801d8f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8fa:	115e      	asrs	r6, r3, #5
 801d8fc:	f013 031f 	ands.w	r3, r3, #31
 801d900:	f04f 0500 	mov.w	r5, #0
 801d904:	b087      	sub	sp, #28
 801d906:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d90a:	4690      	mov	r8, r2
 801d90c:	4682      	mov	sl, r0
 801d90e:	6802      	ldr	r2, [r0, #0]
 801d910:	bf18      	it	ne
 801d912:	3604      	addne	r6, #4
 801d914:	46ab      	mov	fp, r5
 801d916:	9301      	str	r3, [sp, #4]
 801d918:	1f37      	subs	r7, r6, #4
 801d91a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d91e:	9502      	str	r5, [sp, #8]
 801d920:	46b9      	mov	r9, r7
 801d922:	463c      	mov	r4, r7
 801d924:	1c53      	adds	r3, r2, #1
 801d926:	7851      	ldrb	r1, [r2, #1]
 801d928:	9303      	str	r3, [sp, #12]
 801d92a:	b341      	cbz	r1, 801d97e <__hexnan+0x8a>
 801d92c:	4608      	mov	r0, r1
 801d92e:	9205      	str	r2, [sp, #20]
 801d930:	9104      	str	r1, [sp, #16]
 801d932:	f7ff fd5e 	bl	801d3f2 <__hexdig_fun>
 801d936:	2800      	cmp	r0, #0
 801d938:	d14f      	bne.n	801d9da <__hexnan+0xe6>
 801d93a:	9904      	ldr	r1, [sp, #16]
 801d93c:	9a05      	ldr	r2, [sp, #20]
 801d93e:	2920      	cmp	r1, #32
 801d940:	d818      	bhi.n	801d974 <__hexnan+0x80>
 801d942:	9b02      	ldr	r3, [sp, #8]
 801d944:	459b      	cmp	fp, r3
 801d946:	dd13      	ble.n	801d970 <__hexnan+0x7c>
 801d948:	454c      	cmp	r4, r9
 801d94a:	d206      	bcs.n	801d95a <__hexnan+0x66>
 801d94c:	2d07      	cmp	r5, #7
 801d94e:	dc04      	bgt.n	801d95a <__hexnan+0x66>
 801d950:	462a      	mov	r2, r5
 801d952:	4649      	mov	r1, r9
 801d954:	4620      	mov	r0, r4
 801d956:	f7ff ffa7 	bl	801d8a8 <L_shift>
 801d95a:	4544      	cmp	r4, r8
 801d95c:	d94f      	bls.n	801d9fe <__hexnan+0x10a>
 801d95e:	2300      	movs	r3, #0
 801d960:	f1a4 0904 	sub.w	r9, r4, #4
 801d964:	f8cd b008 	str.w	fp, [sp, #8]
 801d968:	f844 3c04 	str.w	r3, [r4, #-4]
 801d96c:	461d      	mov	r5, r3
 801d96e:	464c      	mov	r4, r9
 801d970:	9a03      	ldr	r2, [sp, #12]
 801d972:	e7d7      	b.n	801d924 <__hexnan+0x30>
 801d974:	2929      	cmp	r1, #41	; 0x29
 801d976:	d155      	bne.n	801da24 <__hexnan+0x130>
 801d978:	3202      	adds	r2, #2
 801d97a:	f8ca 2000 	str.w	r2, [sl]
 801d97e:	f1bb 0f00 	cmp.w	fp, #0
 801d982:	d04f      	beq.n	801da24 <__hexnan+0x130>
 801d984:	454c      	cmp	r4, r9
 801d986:	d206      	bcs.n	801d996 <__hexnan+0xa2>
 801d988:	2d07      	cmp	r5, #7
 801d98a:	dc04      	bgt.n	801d996 <__hexnan+0xa2>
 801d98c:	462a      	mov	r2, r5
 801d98e:	4649      	mov	r1, r9
 801d990:	4620      	mov	r0, r4
 801d992:	f7ff ff89 	bl	801d8a8 <L_shift>
 801d996:	4544      	cmp	r4, r8
 801d998:	d933      	bls.n	801da02 <__hexnan+0x10e>
 801d99a:	f1a8 0204 	sub.w	r2, r8, #4
 801d99e:	4623      	mov	r3, r4
 801d9a0:	f853 1b04 	ldr.w	r1, [r3], #4
 801d9a4:	429f      	cmp	r7, r3
 801d9a6:	f842 1f04 	str.w	r1, [r2, #4]!
 801d9aa:	d2f9      	bcs.n	801d9a0 <__hexnan+0xac>
 801d9ac:	1b3b      	subs	r3, r7, r4
 801d9ae:	3e03      	subs	r6, #3
 801d9b0:	3401      	adds	r4, #1
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	f023 0303 	bic.w	r3, r3, #3
 801d9b8:	3304      	adds	r3, #4
 801d9ba:	42b4      	cmp	r4, r6
 801d9bc:	bf88      	it	hi
 801d9be:	2304      	movhi	r3, #4
 801d9c0:	4443      	add	r3, r8
 801d9c2:	f843 2b04 	str.w	r2, [r3], #4
 801d9c6:	429f      	cmp	r7, r3
 801d9c8:	d2fb      	bcs.n	801d9c2 <__hexnan+0xce>
 801d9ca:	683b      	ldr	r3, [r7, #0]
 801d9cc:	b91b      	cbnz	r3, 801d9d6 <__hexnan+0xe2>
 801d9ce:	4547      	cmp	r7, r8
 801d9d0:	d126      	bne.n	801da20 <__hexnan+0x12c>
 801d9d2:	2301      	movs	r3, #1
 801d9d4:	603b      	str	r3, [r7, #0]
 801d9d6:	2005      	movs	r0, #5
 801d9d8:	e025      	b.n	801da26 <__hexnan+0x132>
 801d9da:	3501      	adds	r5, #1
 801d9dc:	f10b 0b01 	add.w	fp, fp, #1
 801d9e0:	2d08      	cmp	r5, #8
 801d9e2:	dd05      	ble.n	801d9f0 <__hexnan+0xfc>
 801d9e4:	4544      	cmp	r4, r8
 801d9e6:	d9c3      	bls.n	801d970 <__hexnan+0x7c>
 801d9e8:	2300      	movs	r3, #0
 801d9ea:	3c04      	subs	r4, #4
 801d9ec:	2501      	movs	r5, #1
 801d9ee:	6023      	str	r3, [r4, #0]
 801d9f0:	6822      	ldr	r2, [r4, #0]
 801d9f2:	f000 000f 	and.w	r0, r0, #15
 801d9f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d9fa:	6022      	str	r2, [r4, #0]
 801d9fc:	e7b8      	b.n	801d970 <__hexnan+0x7c>
 801d9fe:	2508      	movs	r5, #8
 801da00:	e7b6      	b.n	801d970 <__hexnan+0x7c>
 801da02:	9b01      	ldr	r3, [sp, #4]
 801da04:	2b00      	cmp	r3, #0
 801da06:	d0e0      	beq.n	801d9ca <__hexnan+0xd6>
 801da08:	f04f 32ff 	mov.w	r2, #4294967295
 801da0c:	f1c3 0320 	rsb	r3, r3, #32
 801da10:	fa22 f303 	lsr.w	r3, r2, r3
 801da14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801da18:	401a      	ands	r2, r3
 801da1a:	f846 2c04 	str.w	r2, [r6, #-4]
 801da1e:	e7d4      	b.n	801d9ca <__hexnan+0xd6>
 801da20:	3f04      	subs	r7, #4
 801da22:	e7d2      	b.n	801d9ca <__hexnan+0xd6>
 801da24:	2004      	movs	r0, #4
 801da26:	b007      	add	sp, #28
 801da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da2c <_localeconv_r>:
 801da2c:	4800      	ldr	r0, [pc, #0]	; (801da30 <_localeconv_r+0x4>)
 801da2e:	4770      	bx	lr
 801da30:	20000a68 	.word	0x20000a68

0801da34 <__ascii_mbtowc>:
 801da34:	b082      	sub	sp, #8
 801da36:	b901      	cbnz	r1, 801da3a <__ascii_mbtowc+0x6>
 801da38:	a901      	add	r1, sp, #4
 801da3a:	b142      	cbz	r2, 801da4e <__ascii_mbtowc+0x1a>
 801da3c:	b14b      	cbz	r3, 801da52 <__ascii_mbtowc+0x1e>
 801da3e:	7813      	ldrb	r3, [r2, #0]
 801da40:	600b      	str	r3, [r1, #0]
 801da42:	7812      	ldrb	r2, [r2, #0]
 801da44:	1e10      	subs	r0, r2, #0
 801da46:	bf18      	it	ne
 801da48:	2001      	movne	r0, #1
 801da4a:	b002      	add	sp, #8
 801da4c:	4770      	bx	lr
 801da4e:	4610      	mov	r0, r2
 801da50:	e7fb      	b.n	801da4a <__ascii_mbtowc+0x16>
 801da52:	f06f 0001 	mvn.w	r0, #1
 801da56:	e7f8      	b.n	801da4a <__ascii_mbtowc+0x16>

0801da58 <memchr>:
 801da58:	b2c9      	uxtb	r1, r1
 801da5a:	4402      	add	r2, r0
 801da5c:	b510      	push	{r4, lr}
 801da5e:	4290      	cmp	r0, r2
 801da60:	4603      	mov	r3, r0
 801da62:	d101      	bne.n	801da68 <memchr+0x10>
 801da64:	2300      	movs	r3, #0
 801da66:	e003      	b.n	801da70 <memchr+0x18>
 801da68:	781c      	ldrb	r4, [r3, #0]
 801da6a:	3001      	adds	r0, #1
 801da6c:	428c      	cmp	r4, r1
 801da6e:	d1f6      	bne.n	801da5e <memchr+0x6>
 801da70:	4618      	mov	r0, r3
 801da72:	bd10      	pop	{r4, pc}

0801da74 <__malloc_lock>:
 801da74:	4801      	ldr	r0, [pc, #4]	; (801da7c <__malloc_lock+0x8>)
 801da76:	f000 beca 	b.w	801e80e <__retarget_lock_acquire_recursive>
 801da7a:	bf00      	nop
 801da7c:	200044f4 	.word	0x200044f4

0801da80 <__malloc_unlock>:
 801da80:	4801      	ldr	r0, [pc, #4]	; (801da88 <__malloc_unlock+0x8>)
 801da82:	f000 bec5 	b.w	801e810 <__retarget_lock_release_recursive>
 801da86:	bf00      	nop
 801da88:	200044f4 	.word	0x200044f4

0801da8c <_Balloc>:
 801da8c:	b570      	push	{r4, r5, r6, lr}
 801da8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801da90:	4604      	mov	r4, r0
 801da92:	460d      	mov	r5, r1
 801da94:	b976      	cbnz	r6, 801dab4 <_Balloc+0x28>
 801da96:	2010      	movs	r0, #16
 801da98:	f7fc ff4c 	bl	801a934 <malloc>
 801da9c:	4602      	mov	r2, r0
 801da9e:	6260      	str	r0, [r4, #36]	; 0x24
 801daa0:	b920      	cbnz	r0, 801daac <_Balloc+0x20>
 801daa2:	4b18      	ldr	r3, [pc, #96]	; (801db04 <_Balloc+0x78>)
 801daa4:	2166      	movs	r1, #102	; 0x66
 801daa6:	4818      	ldr	r0, [pc, #96]	; (801db08 <_Balloc+0x7c>)
 801daa8:	f000 fe80 	bl	801e7ac <__assert_func>
 801daac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dab0:	6006      	str	r6, [r0, #0]
 801dab2:	60c6      	str	r6, [r0, #12]
 801dab4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801dab6:	68f3      	ldr	r3, [r6, #12]
 801dab8:	b183      	cbz	r3, 801dadc <_Balloc+0x50>
 801daba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dabc:	68db      	ldr	r3, [r3, #12]
 801dabe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dac2:	b9b8      	cbnz	r0, 801daf4 <_Balloc+0x68>
 801dac4:	2101      	movs	r1, #1
 801dac6:	4620      	mov	r0, r4
 801dac8:	fa01 f605 	lsl.w	r6, r1, r5
 801dacc:	1d72      	adds	r2, r6, #5
 801dace:	0092      	lsls	r2, r2, #2
 801dad0:	f000 fca1 	bl	801e416 <_calloc_r>
 801dad4:	b160      	cbz	r0, 801daf0 <_Balloc+0x64>
 801dad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dada:	e00e      	b.n	801dafa <_Balloc+0x6e>
 801dadc:	2221      	movs	r2, #33	; 0x21
 801dade:	2104      	movs	r1, #4
 801dae0:	4620      	mov	r0, r4
 801dae2:	f000 fc98 	bl	801e416 <_calloc_r>
 801dae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dae8:	60f0      	str	r0, [r6, #12]
 801daea:	68db      	ldr	r3, [r3, #12]
 801daec:	2b00      	cmp	r3, #0
 801daee:	d1e4      	bne.n	801daba <_Balloc+0x2e>
 801daf0:	2000      	movs	r0, #0
 801daf2:	bd70      	pop	{r4, r5, r6, pc}
 801daf4:	6802      	ldr	r2, [r0, #0]
 801daf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dafa:	2300      	movs	r3, #0
 801dafc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801db00:	e7f7      	b.n	801daf2 <_Balloc+0x66>
 801db02:	bf00      	nop
 801db04:	080745f6 	.word	0x080745f6
 801db08:	080746f4 	.word	0x080746f4

0801db0c <_Bfree>:
 801db0c:	b570      	push	{r4, r5, r6, lr}
 801db0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801db10:	4605      	mov	r5, r0
 801db12:	460c      	mov	r4, r1
 801db14:	b976      	cbnz	r6, 801db34 <_Bfree+0x28>
 801db16:	2010      	movs	r0, #16
 801db18:	f7fc ff0c 	bl	801a934 <malloc>
 801db1c:	4602      	mov	r2, r0
 801db1e:	6268      	str	r0, [r5, #36]	; 0x24
 801db20:	b920      	cbnz	r0, 801db2c <_Bfree+0x20>
 801db22:	4b09      	ldr	r3, [pc, #36]	; (801db48 <_Bfree+0x3c>)
 801db24:	218a      	movs	r1, #138	; 0x8a
 801db26:	4809      	ldr	r0, [pc, #36]	; (801db4c <_Bfree+0x40>)
 801db28:	f000 fe40 	bl	801e7ac <__assert_func>
 801db2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801db30:	6006      	str	r6, [r0, #0]
 801db32:	60c6      	str	r6, [r0, #12]
 801db34:	b13c      	cbz	r4, 801db46 <_Bfree+0x3a>
 801db36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801db38:	6862      	ldr	r2, [r4, #4]
 801db3a:	68db      	ldr	r3, [r3, #12]
 801db3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801db40:	6021      	str	r1, [r4, #0]
 801db42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801db46:	bd70      	pop	{r4, r5, r6, pc}
 801db48:	080745f6 	.word	0x080745f6
 801db4c:	080746f4 	.word	0x080746f4

0801db50 <__multadd>:
 801db50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db54:	f101 0c14 	add.w	ip, r1, #20
 801db58:	4607      	mov	r7, r0
 801db5a:	460c      	mov	r4, r1
 801db5c:	461e      	mov	r6, r3
 801db5e:	690d      	ldr	r5, [r1, #16]
 801db60:	2000      	movs	r0, #0
 801db62:	f8dc 3000 	ldr.w	r3, [ip]
 801db66:	3001      	adds	r0, #1
 801db68:	b299      	uxth	r1, r3
 801db6a:	4285      	cmp	r5, r0
 801db6c:	fb02 6101 	mla	r1, r2, r1, r6
 801db70:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801db74:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801db78:	b289      	uxth	r1, r1
 801db7a:	fb02 3306 	mla	r3, r2, r6, r3
 801db7e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801db82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801db86:	f84c 1b04 	str.w	r1, [ip], #4
 801db8a:	dcea      	bgt.n	801db62 <__multadd+0x12>
 801db8c:	b30e      	cbz	r6, 801dbd2 <__multadd+0x82>
 801db8e:	68a3      	ldr	r3, [r4, #8]
 801db90:	42ab      	cmp	r3, r5
 801db92:	dc19      	bgt.n	801dbc8 <__multadd+0x78>
 801db94:	6861      	ldr	r1, [r4, #4]
 801db96:	4638      	mov	r0, r7
 801db98:	3101      	adds	r1, #1
 801db9a:	f7ff ff77 	bl	801da8c <_Balloc>
 801db9e:	4680      	mov	r8, r0
 801dba0:	b928      	cbnz	r0, 801dbae <__multadd+0x5e>
 801dba2:	4602      	mov	r2, r0
 801dba4:	4b0c      	ldr	r3, [pc, #48]	; (801dbd8 <__multadd+0x88>)
 801dba6:	21b5      	movs	r1, #181	; 0xb5
 801dba8:	480c      	ldr	r0, [pc, #48]	; (801dbdc <__multadd+0x8c>)
 801dbaa:	f000 fdff 	bl	801e7ac <__assert_func>
 801dbae:	6922      	ldr	r2, [r4, #16]
 801dbb0:	f104 010c 	add.w	r1, r4, #12
 801dbb4:	300c      	adds	r0, #12
 801dbb6:	3202      	adds	r2, #2
 801dbb8:	0092      	lsls	r2, r2, #2
 801dbba:	f7fc fec3 	bl	801a944 <memcpy>
 801dbbe:	4621      	mov	r1, r4
 801dbc0:	4644      	mov	r4, r8
 801dbc2:	4638      	mov	r0, r7
 801dbc4:	f7ff ffa2 	bl	801db0c <_Bfree>
 801dbc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dbcc:	3501      	adds	r5, #1
 801dbce:	615e      	str	r6, [r3, #20]
 801dbd0:	6125      	str	r5, [r4, #16]
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbd8:	08074668 	.word	0x08074668
 801dbdc:	080746f4 	.word	0x080746f4

0801dbe0 <__s2b>:
 801dbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbe4:	4615      	mov	r5, r2
 801dbe6:	461f      	mov	r7, r3
 801dbe8:	2209      	movs	r2, #9
 801dbea:	3308      	adds	r3, #8
 801dbec:	460c      	mov	r4, r1
 801dbee:	4606      	mov	r6, r0
 801dbf0:	2100      	movs	r1, #0
 801dbf2:	fb93 f3f2 	sdiv	r3, r3, r2
 801dbf6:	2201      	movs	r2, #1
 801dbf8:	429a      	cmp	r2, r3
 801dbfa:	db09      	blt.n	801dc10 <__s2b+0x30>
 801dbfc:	4630      	mov	r0, r6
 801dbfe:	f7ff ff45 	bl	801da8c <_Balloc>
 801dc02:	b940      	cbnz	r0, 801dc16 <__s2b+0x36>
 801dc04:	4602      	mov	r2, r0
 801dc06:	4b19      	ldr	r3, [pc, #100]	; (801dc6c <__s2b+0x8c>)
 801dc08:	21ce      	movs	r1, #206	; 0xce
 801dc0a:	4819      	ldr	r0, [pc, #100]	; (801dc70 <__s2b+0x90>)
 801dc0c:	f000 fdce 	bl	801e7ac <__assert_func>
 801dc10:	0052      	lsls	r2, r2, #1
 801dc12:	3101      	adds	r1, #1
 801dc14:	e7f0      	b.n	801dbf8 <__s2b+0x18>
 801dc16:	9b08      	ldr	r3, [sp, #32]
 801dc18:	2d09      	cmp	r5, #9
 801dc1a:	6143      	str	r3, [r0, #20]
 801dc1c:	f04f 0301 	mov.w	r3, #1
 801dc20:	6103      	str	r3, [r0, #16]
 801dc22:	dd16      	ble.n	801dc52 <__s2b+0x72>
 801dc24:	f104 0909 	add.w	r9, r4, #9
 801dc28:	442c      	add	r4, r5
 801dc2a:	46c8      	mov	r8, r9
 801dc2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801dc30:	4601      	mov	r1, r0
 801dc32:	220a      	movs	r2, #10
 801dc34:	4630      	mov	r0, r6
 801dc36:	3b30      	subs	r3, #48	; 0x30
 801dc38:	f7ff ff8a 	bl	801db50 <__multadd>
 801dc3c:	45a0      	cmp	r8, r4
 801dc3e:	d1f5      	bne.n	801dc2c <__s2b+0x4c>
 801dc40:	f1a5 0408 	sub.w	r4, r5, #8
 801dc44:	444c      	add	r4, r9
 801dc46:	1b2d      	subs	r5, r5, r4
 801dc48:	1963      	adds	r3, r4, r5
 801dc4a:	42bb      	cmp	r3, r7
 801dc4c:	db04      	blt.n	801dc58 <__s2b+0x78>
 801dc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc52:	340a      	adds	r4, #10
 801dc54:	2509      	movs	r5, #9
 801dc56:	e7f6      	b.n	801dc46 <__s2b+0x66>
 801dc58:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dc5c:	4601      	mov	r1, r0
 801dc5e:	220a      	movs	r2, #10
 801dc60:	4630      	mov	r0, r6
 801dc62:	3b30      	subs	r3, #48	; 0x30
 801dc64:	f7ff ff74 	bl	801db50 <__multadd>
 801dc68:	e7ee      	b.n	801dc48 <__s2b+0x68>
 801dc6a:	bf00      	nop
 801dc6c:	08074668 	.word	0x08074668
 801dc70:	080746f4 	.word	0x080746f4

0801dc74 <__hi0bits>:
 801dc74:	0c03      	lsrs	r3, r0, #16
 801dc76:	041b      	lsls	r3, r3, #16
 801dc78:	b9d3      	cbnz	r3, 801dcb0 <__hi0bits+0x3c>
 801dc7a:	0400      	lsls	r0, r0, #16
 801dc7c:	2310      	movs	r3, #16
 801dc7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dc82:	bf04      	itt	eq
 801dc84:	0200      	lsleq	r0, r0, #8
 801dc86:	3308      	addeq	r3, #8
 801dc88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dc8c:	bf04      	itt	eq
 801dc8e:	0100      	lsleq	r0, r0, #4
 801dc90:	3304      	addeq	r3, #4
 801dc92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dc96:	bf04      	itt	eq
 801dc98:	0080      	lsleq	r0, r0, #2
 801dc9a:	3302      	addeq	r3, #2
 801dc9c:	2800      	cmp	r0, #0
 801dc9e:	db05      	blt.n	801dcac <__hi0bits+0x38>
 801dca0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dca4:	f103 0301 	add.w	r3, r3, #1
 801dca8:	bf08      	it	eq
 801dcaa:	2320      	moveq	r3, #32
 801dcac:	4618      	mov	r0, r3
 801dcae:	4770      	bx	lr
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	e7e4      	b.n	801dc7e <__hi0bits+0xa>

0801dcb4 <__lo0bits>:
 801dcb4:	6803      	ldr	r3, [r0, #0]
 801dcb6:	4601      	mov	r1, r0
 801dcb8:	f013 0207 	ands.w	r2, r3, #7
 801dcbc:	d00b      	beq.n	801dcd6 <__lo0bits+0x22>
 801dcbe:	07da      	lsls	r2, r3, #31
 801dcc0:	d423      	bmi.n	801dd0a <__lo0bits+0x56>
 801dcc2:	0798      	lsls	r0, r3, #30
 801dcc4:	bf47      	ittee	mi
 801dcc6:	085b      	lsrmi	r3, r3, #1
 801dcc8:	2001      	movmi	r0, #1
 801dcca:	089b      	lsrpl	r3, r3, #2
 801dccc:	2002      	movpl	r0, #2
 801dcce:	bf4c      	ite	mi
 801dcd0:	600b      	strmi	r3, [r1, #0]
 801dcd2:	600b      	strpl	r3, [r1, #0]
 801dcd4:	4770      	bx	lr
 801dcd6:	b298      	uxth	r0, r3
 801dcd8:	b9a8      	cbnz	r0, 801dd06 <__lo0bits+0x52>
 801dcda:	0c1b      	lsrs	r3, r3, #16
 801dcdc:	2010      	movs	r0, #16
 801dcde:	b2da      	uxtb	r2, r3
 801dce0:	b90a      	cbnz	r2, 801dce6 <__lo0bits+0x32>
 801dce2:	3008      	adds	r0, #8
 801dce4:	0a1b      	lsrs	r3, r3, #8
 801dce6:	071a      	lsls	r2, r3, #28
 801dce8:	bf04      	itt	eq
 801dcea:	091b      	lsreq	r3, r3, #4
 801dcec:	3004      	addeq	r0, #4
 801dcee:	079a      	lsls	r2, r3, #30
 801dcf0:	bf04      	itt	eq
 801dcf2:	089b      	lsreq	r3, r3, #2
 801dcf4:	3002      	addeq	r0, #2
 801dcf6:	07da      	lsls	r2, r3, #31
 801dcf8:	d403      	bmi.n	801dd02 <__lo0bits+0x4e>
 801dcfa:	085b      	lsrs	r3, r3, #1
 801dcfc:	f100 0001 	add.w	r0, r0, #1
 801dd00:	d005      	beq.n	801dd0e <__lo0bits+0x5a>
 801dd02:	600b      	str	r3, [r1, #0]
 801dd04:	4770      	bx	lr
 801dd06:	4610      	mov	r0, r2
 801dd08:	e7e9      	b.n	801dcde <__lo0bits+0x2a>
 801dd0a:	2000      	movs	r0, #0
 801dd0c:	4770      	bx	lr
 801dd0e:	2020      	movs	r0, #32
 801dd10:	4770      	bx	lr
	...

0801dd14 <__i2b>:
 801dd14:	b510      	push	{r4, lr}
 801dd16:	460c      	mov	r4, r1
 801dd18:	2101      	movs	r1, #1
 801dd1a:	f7ff feb7 	bl	801da8c <_Balloc>
 801dd1e:	4602      	mov	r2, r0
 801dd20:	b928      	cbnz	r0, 801dd2e <__i2b+0x1a>
 801dd22:	4b05      	ldr	r3, [pc, #20]	; (801dd38 <__i2b+0x24>)
 801dd24:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801dd28:	4804      	ldr	r0, [pc, #16]	; (801dd3c <__i2b+0x28>)
 801dd2a:	f000 fd3f 	bl	801e7ac <__assert_func>
 801dd2e:	2301      	movs	r3, #1
 801dd30:	6144      	str	r4, [r0, #20]
 801dd32:	6103      	str	r3, [r0, #16]
 801dd34:	bd10      	pop	{r4, pc}
 801dd36:	bf00      	nop
 801dd38:	08074668 	.word	0x08074668
 801dd3c:	080746f4 	.word	0x080746f4

0801dd40 <__multiply>:
 801dd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd44:	4691      	mov	r9, r2
 801dd46:	690a      	ldr	r2, [r1, #16]
 801dd48:	460c      	mov	r4, r1
 801dd4a:	b085      	sub	sp, #20
 801dd4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dd50:	429a      	cmp	r2, r3
 801dd52:	bfbe      	ittt	lt
 801dd54:	460b      	movlt	r3, r1
 801dd56:	464c      	movlt	r4, r9
 801dd58:	4699      	movlt	r9, r3
 801dd5a:	6927      	ldr	r7, [r4, #16]
 801dd5c:	68a3      	ldr	r3, [r4, #8]
 801dd5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801dd62:	6861      	ldr	r1, [r4, #4]
 801dd64:	eb07 060a 	add.w	r6, r7, sl
 801dd68:	42b3      	cmp	r3, r6
 801dd6a:	bfb8      	it	lt
 801dd6c:	3101      	addlt	r1, #1
 801dd6e:	f7ff fe8d 	bl	801da8c <_Balloc>
 801dd72:	b930      	cbnz	r0, 801dd82 <__multiply+0x42>
 801dd74:	4602      	mov	r2, r0
 801dd76:	4b44      	ldr	r3, [pc, #272]	; (801de88 <__multiply+0x148>)
 801dd78:	f240 115d 	movw	r1, #349	; 0x15d
 801dd7c:	4843      	ldr	r0, [pc, #268]	; (801de8c <__multiply+0x14c>)
 801dd7e:	f000 fd15 	bl	801e7ac <__assert_func>
 801dd82:	f100 0514 	add.w	r5, r0, #20
 801dd86:	2200      	movs	r2, #0
 801dd88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dd8c:	462b      	mov	r3, r5
 801dd8e:	4543      	cmp	r3, r8
 801dd90:	d321      	bcc.n	801ddd6 <__multiply+0x96>
 801dd92:	f104 0314 	add.w	r3, r4, #20
 801dd96:	f104 0115 	add.w	r1, r4, #21
 801dd9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801dd9e:	f109 0314 	add.w	r3, r9, #20
 801dda2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801dda6:	9202      	str	r2, [sp, #8]
 801dda8:	1b3a      	subs	r2, r7, r4
 801ddaa:	3a15      	subs	r2, #21
 801ddac:	f022 0203 	bic.w	r2, r2, #3
 801ddb0:	3204      	adds	r2, #4
 801ddb2:	428f      	cmp	r7, r1
 801ddb4:	bf38      	it	cc
 801ddb6:	2204      	movcc	r2, #4
 801ddb8:	9201      	str	r2, [sp, #4]
 801ddba:	9a02      	ldr	r2, [sp, #8]
 801ddbc:	9303      	str	r3, [sp, #12]
 801ddbe:	429a      	cmp	r2, r3
 801ddc0:	d80c      	bhi.n	801dddc <__multiply+0x9c>
 801ddc2:	2e00      	cmp	r6, #0
 801ddc4:	dd03      	ble.n	801ddce <__multiply+0x8e>
 801ddc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d05a      	beq.n	801de84 <__multiply+0x144>
 801ddce:	6106      	str	r6, [r0, #16]
 801ddd0:	b005      	add	sp, #20
 801ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddd6:	f843 2b04 	str.w	r2, [r3], #4
 801ddda:	e7d8      	b.n	801dd8e <__multiply+0x4e>
 801dddc:	f8b3 a000 	ldrh.w	sl, [r3]
 801dde0:	f1ba 0f00 	cmp.w	sl, #0
 801dde4:	d024      	beq.n	801de30 <__multiply+0xf0>
 801dde6:	f104 0e14 	add.w	lr, r4, #20
 801ddea:	46a9      	mov	r9, r5
 801ddec:	f04f 0c00 	mov.w	ip, #0
 801ddf0:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ddf4:	f8d9 1000 	ldr.w	r1, [r9]
 801ddf8:	fa1f fb82 	uxth.w	fp, r2
 801ddfc:	4577      	cmp	r7, lr
 801ddfe:	b289      	uxth	r1, r1
 801de00:	fb0a 110b 	mla	r1, sl, fp, r1
 801de04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801de08:	f8d9 2000 	ldr.w	r2, [r9]
 801de0c:	4461      	add	r1, ip
 801de0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801de12:	fb0a c20b 	mla	r2, sl, fp, ip
 801de16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801de1a:	b289      	uxth	r1, r1
 801de1c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801de20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801de24:	f849 1b04 	str.w	r1, [r9], #4
 801de28:	d8e2      	bhi.n	801ddf0 <__multiply+0xb0>
 801de2a:	9a01      	ldr	r2, [sp, #4]
 801de2c:	f845 c002 	str.w	ip, [r5, r2]
 801de30:	9a03      	ldr	r2, [sp, #12]
 801de32:	3304      	adds	r3, #4
 801de34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801de38:	f1b9 0f00 	cmp.w	r9, #0
 801de3c:	d020      	beq.n	801de80 <__multiply+0x140>
 801de3e:	6829      	ldr	r1, [r5, #0]
 801de40:	f104 0c14 	add.w	ip, r4, #20
 801de44:	46ae      	mov	lr, r5
 801de46:	f04f 0a00 	mov.w	sl, #0
 801de4a:	f8bc b000 	ldrh.w	fp, [ip]
 801de4e:	b289      	uxth	r1, r1
 801de50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801de54:	fb09 220b 	mla	r2, r9, fp, r2
 801de58:	4492      	add	sl, r2
 801de5a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801de5e:	f84e 1b04 	str.w	r1, [lr], #4
 801de62:	f85c 2b04 	ldr.w	r2, [ip], #4
 801de66:	f8be 1000 	ldrh.w	r1, [lr]
 801de6a:	0c12      	lsrs	r2, r2, #16
 801de6c:	4567      	cmp	r7, ip
 801de6e:	fb09 1102 	mla	r1, r9, r2, r1
 801de72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801de76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801de7a:	d8e6      	bhi.n	801de4a <__multiply+0x10a>
 801de7c:	9a01      	ldr	r2, [sp, #4]
 801de7e:	50a9      	str	r1, [r5, r2]
 801de80:	3504      	adds	r5, #4
 801de82:	e79a      	b.n	801ddba <__multiply+0x7a>
 801de84:	3e01      	subs	r6, #1
 801de86:	e79c      	b.n	801ddc2 <__multiply+0x82>
 801de88:	08074668 	.word	0x08074668
 801de8c:	080746f4 	.word	0x080746f4

0801de90 <__pow5mult>:
 801de90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de94:	4615      	mov	r5, r2
 801de96:	f012 0203 	ands.w	r2, r2, #3
 801de9a:	4606      	mov	r6, r0
 801de9c:	460f      	mov	r7, r1
 801de9e:	d007      	beq.n	801deb0 <__pow5mult+0x20>
 801dea0:	3a01      	subs	r2, #1
 801dea2:	4c25      	ldr	r4, [pc, #148]	; (801df38 <__pow5mult+0xa8>)
 801dea4:	2300      	movs	r3, #0
 801dea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801deaa:	f7ff fe51 	bl	801db50 <__multadd>
 801deae:	4607      	mov	r7, r0
 801deb0:	10ad      	asrs	r5, r5, #2
 801deb2:	d03d      	beq.n	801df30 <__pow5mult+0xa0>
 801deb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801deb6:	b97c      	cbnz	r4, 801ded8 <__pow5mult+0x48>
 801deb8:	2010      	movs	r0, #16
 801deba:	f7fc fd3b 	bl	801a934 <malloc>
 801debe:	4602      	mov	r2, r0
 801dec0:	6270      	str	r0, [r6, #36]	; 0x24
 801dec2:	b928      	cbnz	r0, 801ded0 <__pow5mult+0x40>
 801dec4:	4b1d      	ldr	r3, [pc, #116]	; (801df3c <__pow5mult+0xac>)
 801dec6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801deca:	481d      	ldr	r0, [pc, #116]	; (801df40 <__pow5mult+0xb0>)
 801decc:	f000 fc6e 	bl	801e7ac <__assert_func>
 801ded0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ded4:	6004      	str	r4, [r0, #0]
 801ded6:	60c4      	str	r4, [r0, #12]
 801ded8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dedc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dee0:	b94c      	cbnz	r4, 801def6 <__pow5mult+0x66>
 801dee2:	f240 2171 	movw	r1, #625	; 0x271
 801dee6:	4630      	mov	r0, r6
 801dee8:	f7ff ff14 	bl	801dd14 <__i2b>
 801deec:	2300      	movs	r3, #0
 801deee:	4604      	mov	r4, r0
 801def0:	f8c8 0008 	str.w	r0, [r8, #8]
 801def4:	6003      	str	r3, [r0, #0]
 801def6:	f04f 0900 	mov.w	r9, #0
 801defa:	07eb      	lsls	r3, r5, #31
 801defc:	d50a      	bpl.n	801df14 <__pow5mult+0x84>
 801defe:	4639      	mov	r1, r7
 801df00:	4622      	mov	r2, r4
 801df02:	4630      	mov	r0, r6
 801df04:	f7ff ff1c 	bl	801dd40 <__multiply>
 801df08:	4680      	mov	r8, r0
 801df0a:	4639      	mov	r1, r7
 801df0c:	4630      	mov	r0, r6
 801df0e:	4647      	mov	r7, r8
 801df10:	f7ff fdfc 	bl	801db0c <_Bfree>
 801df14:	106d      	asrs	r5, r5, #1
 801df16:	d00b      	beq.n	801df30 <__pow5mult+0xa0>
 801df18:	6820      	ldr	r0, [r4, #0]
 801df1a:	b938      	cbnz	r0, 801df2c <__pow5mult+0x9c>
 801df1c:	4622      	mov	r2, r4
 801df1e:	4621      	mov	r1, r4
 801df20:	4630      	mov	r0, r6
 801df22:	f7ff ff0d 	bl	801dd40 <__multiply>
 801df26:	6020      	str	r0, [r4, #0]
 801df28:	f8c0 9000 	str.w	r9, [r0]
 801df2c:	4604      	mov	r4, r0
 801df2e:	e7e4      	b.n	801defa <__pow5mult+0x6a>
 801df30:	4638      	mov	r0, r7
 801df32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df36:	bf00      	nop
 801df38:	08074840 	.word	0x08074840
 801df3c:	080745f6 	.word	0x080745f6
 801df40:	080746f4 	.word	0x080746f4

0801df44 <__lshift>:
 801df44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df48:	460c      	mov	r4, r1
 801df4a:	4607      	mov	r7, r0
 801df4c:	4691      	mov	r9, r2
 801df4e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801df52:	6923      	ldr	r3, [r4, #16]
 801df54:	6849      	ldr	r1, [r1, #4]
 801df56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801df5a:	68a3      	ldr	r3, [r4, #8]
 801df5c:	f108 0601 	add.w	r6, r8, #1
 801df60:	42b3      	cmp	r3, r6
 801df62:	db0b      	blt.n	801df7c <__lshift+0x38>
 801df64:	4638      	mov	r0, r7
 801df66:	f7ff fd91 	bl	801da8c <_Balloc>
 801df6a:	4605      	mov	r5, r0
 801df6c:	b948      	cbnz	r0, 801df82 <__lshift+0x3e>
 801df6e:	4602      	mov	r2, r0
 801df70:	4b2a      	ldr	r3, [pc, #168]	; (801e01c <__lshift+0xd8>)
 801df72:	f240 11d9 	movw	r1, #473	; 0x1d9
 801df76:	482a      	ldr	r0, [pc, #168]	; (801e020 <__lshift+0xdc>)
 801df78:	f000 fc18 	bl	801e7ac <__assert_func>
 801df7c:	3101      	adds	r1, #1
 801df7e:	005b      	lsls	r3, r3, #1
 801df80:	e7ee      	b.n	801df60 <__lshift+0x1c>
 801df82:	2300      	movs	r3, #0
 801df84:	f100 0114 	add.w	r1, r0, #20
 801df88:	f100 0210 	add.w	r2, r0, #16
 801df8c:	4618      	mov	r0, r3
 801df8e:	4553      	cmp	r3, sl
 801df90:	db37      	blt.n	801e002 <__lshift+0xbe>
 801df92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801df96:	f104 0314 	add.w	r3, r4, #20
 801df9a:	6920      	ldr	r0, [r4, #16]
 801df9c:	f019 091f 	ands.w	r9, r9, #31
 801dfa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dfa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801dfa8:	d02f      	beq.n	801e00a <__lshift+0xc6>
 801dfaa:	f1c9 0e20 	rsb	lr, r9, #32
 801dfae:	468a      	mov	sl, r1
 801dfb0:	f04f 0c00 	mov.w	ip, #0
 801dfb4:	681a      	ldr	r2, [r3, #0]
 801dfb6:	fa02 f209 	lsl.w	r2, r2, r9
 801dfba:	ea42 020c 	orr.w	r2, r2, ip
 801dfbe:	f84a 2b04 	str.w	r2, [sl], #4
 801dfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfc6:	4298      	cmp	r0, r3
 801dfc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801dfcc:	d8f2      	bhi.n	801dfb4 <__lshift+0x70>
 801dfce:	1b03      	subs	r3, r0, r4
 801dfd0:	f104 0215 	add.w	r2, r4, #21
 801dfd4:	3b15      	subs	r3, #21
 801dfd6:	f023 0303 	bic.w	r3, r3, #3
 801dfda:	3304      	adds	r3, #4
 801dfdc:	4290      	cmp	r0, r2
 801dfde:	bf38      	it	cc
 801dfe0:	2304      	movcc	r3, #4
 801dfe2:	f841 c003 	str.w	ip, [r1, r3]
 801dfe6:	f1bc 0f00 	cmp.w	ip, #0
 801dfea:	d001      	beq.n	801dff0 <__lshift+0xac>
 801dfec:	f108 0602 	add.w	r6, r8, #2
 801dff0:	3e01      	subs	r6, #1
 801dff2:	4638      	mov	r0, r7
 801dff4:	4621      	mov	r1, r4
 801dff6:	612e      	str	r6, [r5, #16]
 801dff8:	f7ff fd88 	bl	801db0c <_Bfree>
 801dffc:	4628      	mov	r0, r5
 801dffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e002:	3301      	adds	r3, #1
 801e004:	f842 0f04 	str.w	r0, [r2, #4]!
 801e008:	e7c1      	b.n	801df8e <__lshift+0x4a>
 801e00a:	3904      	subs	r1, #4
 801e00c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e010:	4298      	cmp	r0, r3
 801e012:	f841 2f04 	str.w	r2, [r1, #4]!
 801e016:	d8f9      	bhi.n	801e00c <__lshift+0xc8>
 801e018:	e7ea      	b.n	801dff0 <__lshift+0xac>
 801e01a:	bf00      	nop
 801e01c:	08074668 	.word	0x08074668
 801e020:	080746f4 	.word	0x080746f4

0801e024 <__mcmp>:
 801e024:	6902      	ldr	r2, [r0, #16]
 801e026:	b530      	push	{r4, r5, lr}
 801e028:	690c      	ldr	r4, [r1, #16]
 801e02a:	1b12      	subs	r2, r2, r4
 801e02c:	d10e      	bne.n	801e04c <__mcmp+0x28>
 801e02e:	f100 0314 	add.w	r3, r0, #20
 801e032:	3114      	adds	r1, #20
 801e034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e03c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e044:	42a5      	cmp	r5, r4
 801e046:	d003      	beq.n	801e050 <__mcmp+0x2c>
 801e048:	d305      	bcc.n	801e056 <__mcmp+0x32>
 801e04a:	2201      	movs	r2, #1
 801e04c:	4610      	mov	r0, r2
 801e04e:	bd30      	pop	{r4, r5, pc}
 801e050:	4283      	cmp	r3, r0
 801e052:	d3f3      	bcc.n	801e03c <__mcmp+0x18>
 801e054:	e7fa      	b.n	801e04c <__mcmp+0x28>
 801e056:	f04f 32ff 	mov.w	r2, #4294967295
 801e05a:	e7f7      	b.n	801e04c <__mcmp+0x28>

0801e05c <__mdiff>:
 801e05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e060:	460c      	mov	r4, r1
 801e062:	4606      	mov	r6, r0
 801e064:	4611      	mov	r1, r2
 801e066:	4692      	mov	sl, r2
 801e068:	4620      	mov	r0, r4
 801e06a:	f7ff ffdb 	bl	801e024 <__mcmp>
 801e06e:	1e05      	subs	r5, r0, #0
 801e070:	d110      	bne.n	801e094 <__mdiff+0x38>
 801e072:	4629      	mov	r1, r5
 801e074:	4630      	mov	r0, r6
 801e076:	f7ff fd09 	bl	801da8c <_Balloc>
 801e07a:	b930      	cbnz	r0, 801e08a <__mdiff+0x2e>
 801e07c:	4b3d      	ldr	r3, [pc, #244]	; (801e174 <__mdiff+0x118>)
 801e07e:	4602      	mov	r2, r0
 801e080:	f240 2132 	movw	r1, #562	; 0x232
 801e084:	483c      	ldr	r0, [pc, #240]	; (801e178 <__mdiff+0x11c>)
 801e086:	f000 fb91 	bl	801e7ac <__assert_func>
 801e08a:	2301      	movs	r3, #1
 801e08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e094:	bfa4      	itt	ge
 801e096:	4653      	movge	r3, sl
 801e098:	46a2      	movge	sl, r4
 801e09a:	4630      	mov	r0, r6
 801e09c:	bfa8      	it	ge
 801e09e:	2500      	movge	r5, #0
 801e0a0:	f8da 1004 	ldr.w	r1, [sl, #4]
 801e0a4:	bfac      	ite	ge
 801e0a6:	461c      	movge	r4, r3
 801e0a8:	2501      	movlt	r5, #1
 801e0aa:	f7ff fcef 	bl	801da8c <_Balloc>
 801e0ae:	b920      	cbnz	r0, 801e0ba <__mdiff+0x5e>
 801e0b0:	4b30      	ldr	r3, [pc, #192]	; (801e174 <__mdiff+0x118>)
 801e0b2:	4602      	mov	r2, r0
 801e0b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e0b8:	e7e4      	b.n	801e084 <__mdiff+0x28>
 801e0ba:	f8da 7010 	ldr.w	r7, [sl, #16]
 801e0be:	f104 0914 	add.w	r9, r4, #20
 801e0c2:	6926      	ldr	r6, [r4, #16]
 801e0c4:	f100 0814 	add.w	r8, r0, #20
 801e0c8:	60c5      	str	r5, [r0, #12]
 801e0ca:	f10a 0514 	add.w	r5, sl, #20
 801e0ce:	f10a 0210 	add.w	r2, sl, #16
 801e0d2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e0d6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 801e0da:	46c2      	mov	sl, r8
 801e0dc:	f04f 0c00 	mov.w	ip, #0
 801e0e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e0e4:	f859 3b04 	ldr.w	r3, [r9], #4
 801e0e8:	fa1f f18b 	uxth.w	r1, fp
 801e0ec:	454e      	cmp	r6, r9
 801e0ee:	448c      	add	ip, r1
 801e0f0:	b299      	uxth	r1, r3
 801e0f2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801e0f6:	ebac 0101 	sub.w	r1, ip, r1
 801e0fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e0fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801e102:	b289      	uxth	r1, r1
 801e104:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801e108:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801e10c:	f84a 3b04 	str.w	r3, [sl], #4
 801e110:	d8e6      	bhi.n	801e0e0 <__mdiff+0x84>
 801e112:	1b33      	subs	r3, r6, r4
 801e114:	3415      	adds	r4, #21
 801e116:	3b15      	subs	r3, #21
 801e118:	f023 0303 	bic.w	r3, r3, #3
 801e11c:	3304      	adds	r3, #4
 801e11e:	42a6      	cmp	r6, r4
 801e120:	bf38      	it	cc
 801e122:	2304      	movcc	r3, #4
 801e124:	441d      	add	r5, r3
 801e126:	4443      	add	r3, r8
 801e128:	462c      	mov	r4, r5
 801e12a:	461e      	mov	r6, r3
 801e12c:	4574      	cmp	r4, lr
 801e12e:	d30e      	bcc.n	801e14e <__mdiff+0xf2>
 801e130:	f10e 0203 	add.w	r2, lr, #3
 801e134:	1b52      	subs	r2, r2, r5
 801e136:	3d03      	subs	r5, #3
 801e138:	f022 0203 	bic.w	r2, r2, #3
 801e13c:	45ae      	cmp	lr, r5
 801e13e:	bf38      	it	cc
 801e140:	2200      	movcc	r2, #0
 801e142:	441a      	add	r2, r3
 801e144:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e148:	b18b      	cbz	r3, 801e16e <__mdiff+0x112>
 801e14a:	6107      	str	r7, [r0, #16]
 801e14c:	e7a0      	b.n	801e090 <__mdiff+0x34>
 801e14e:	f854 8b04 	ldr.w	r8, [r4], #4
 801e152:	fa1f f288 	uxth.w	r2, r8
 801e156:	4462      	add	r2, ip
 801e158:	1411      	asrs	r1, r2, #16
 801e15a:	b292      	uxth	r2, r2
 801e15c:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 801e160:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801e164:	ea4f 4c21 	mov.w	ip, r1, asr #16
 801e168:	f846 2b04 	str.w	r2, [r6], #4
 801e16c:	e7de      	b.n	801e12c <__mdiff+0xd0>
 801e16e:	3f01      	subs	r7, #1
 801e170:	e7e8      	b.n	801e144 <__mdiff+0xe8>
 801e172:	bf00      	nop
 801e174:	08074668 	.word	0x08074668
 801e178:	080746f4 	.word	0x080746f4

0801e17c <__ulp>:
 801e17c:	b082      	sub	sp, #8
 801e17e:	4913      	ldr	r1, [pc, #76]	; (801e1cc <__ulp+0x50>)
 801e180:	ed8d 0b00 	vstr	d0, [sp]
 801e184:	9b01      	ldr	r3, [sp, #4]
 801e186:	4019      	ands	r1, r3
 801e188:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e18c:	2900      	cmp	r1, #0
 801e18e:	dd05      	ble.n	801e19c <__ulp+0x20>
 801e190:	2200      	movs	r2, #0
 801e192:	460b      	mov	r3, r1
 801e194:	ec43 2b10 	vmov	d0, r2, r3
 801e198:	b002      	add	sp, #8
 801e19a:	4770      	bx	lr
 801e19c:	4249      	negs	r1, r1
 801e19e:	2200      	movs	r2, #0
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e1a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e1aa:	da04      	bge.n	801e1b6 <__ulp+0x3a>
 801e1ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e1b0:	fa41 f300 	asr.w	r3, r1, r0
 801e1b4:	e7ee      	b.n	801e194 <__ulp+0x18>
 801e1b6:	f1a0 0114 	sub.w	r1, r0, #20
 801e1ba:	291e      	cmp	r1, #30
 801e1bc:	bfd6      	itet	le
 801e1be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e1c2:	2101      	movgt	r1, #1
 801e1c4:	fa20 f101 	lsrle.w	r1, r0, r1
 801e1c8:	460a      	mov	r2, r1
 801e1ca:	e7e3      	b.n	801e194 <__ulp+0x18>
 801e1cc:	7ff00000 	.word	0x7ff00000

0801e1d0 <__b2d>:
 801e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1d2:	6905      	ldr	r5, [r0, #16]
 801e1d4:	f100 0714 	add.w	r7, r0, #20
 801e1d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e1dc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e1e0:	1f2e      	subs	r6, r5, #4
 801e1e2:	4620      	mov	r0, r4
 801e1e4:	f7ff fd46 	bl	801dc74 <__hi0bits>
 801e1e8:	f1c0 0320 	rsb	r3, r0, #32
 801e1ec:	280a      	cmp	r0, #10
 801e1ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e26c <__b2d+0x9c>
 801e1f2:	600b      	str	r3, [r1, #0]
 801e1f4:	dc15      	bgt.n	801e222 <__b2d+0x52>
 801e1f6:	f1c0 0e0b 	rsb	lr, r0, #11
 801e1fa:	42b7      	cmp	r7, r6
 801e1fc:	f100 0015 	add.w	r0, r0, #21
 801e200:	fa24 f10e 	lsr.w	r1, r4, lr
 801e204:	fa04 f000 	lsl.w	r0, r4, r0
 801e208:	ea41 030c 	orr.w	r3, r1, ip
 801e20c:	bf34      	ite	cc
 801e20e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e212:	2100      	movcs	r1, #0
 801e214:	fa21 f10e 	lsr.w	r1, r1, lr
 801e218:	ea40 0201 	orr.w	r2, r0, r1
 801e21c:	ec43 2b10 	vmov	d0, r2, r3
 801e220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e222:	42b7      	cmp	r7, r6
 801e224:	bf3a      	itte	cc
 801e226:	f1a5 0608 	subcc.w	r6, r5, #8
 801e22a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e22e:	2100      	movcs	r1, #0
 801e230:	380b      	subs	r0, #11
 801e232:	d017      	beq.n	801e264 <__b2d+0x94>
 801e234:	f1c0 0c20 	rsb	ip, r0, #32
 801e238:	fa04 f500 	lsl.w	r5, r4, r0
 801e23c:	42be      	cmp	r6, r7
 801e23e:	fa01 f000 	lsl.w	r0, r1, r0
 801e242:	fa21 f40c 	lsr.w	r4, r1, ip
 801e246:	ea45 0504 	orr.w	r5, r5, r4
 801e24a:	bf8c      	ite	hi
 801e24c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e250:	2400      	movls	r4, #0
 801e252:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e256:	fa24 f40c 	lsr.w	r4, r4, ip
 801e25a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e25e:	ea40 0204 	orr.w	r2, r0, r4
 801e262:	e7db      	b.n	801e21c <__b2d+0x4c>
 801e264:	ea44 030c 	orr.w	r3, r4, ip
 801e268:	460a      	mov	r2, r1
 801e26a:	e7d7      	b.n	801e21c <__b2d+0x4c>
 801e26c:	3ff00000 	.word	0x3ff00000

0801e270 <__d2b>:
 801e270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e274:	4689      	mov	r9, r1
 801e276:	2101      	movs	r1, #1
 801e278:	4690      	mov	r8, r2
 801e27a:	ec57 6b10 	vmov	r6, r7, d0
 801e27e:	f7ff fc05 	bl	801da8c <_Balloc>
 801e282:	4604      	mov	r4, r0
 801e284:	b930      	cbnz	r0, 801e294 <__d2b+0x24>
 801e286:	4602      	mov	r2, r0
 801e288:	4b25      	ldr	r3, [pc, #148]	; (801e320 <__d2b+0xb0>)
 801e28a:	f240 310a 	movw	r1, #778	; 0x30a
 801e28e:	4825      	ldr	r0, [pc, #148]	; (801e324 <__d2b+0xb4>)
 801e290:	f000 fa8c 	bl	801e7ac <__assert_func>
 801e294:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e29c:	bb35      	cbnz	r5, 801e2ec <__d2b+0x7c>
 801e29e:	2e00      	cmp	r6, #0
 801e2a0:	9301      	str	r3, [sp, #4]
 801e2a2:	d028      	beq.n	801e2f6 <__d2b+0x86>
 801e2a4:	4668      	mov	r0, sp
 801e2a6:	9600      	str	r6, [sp, #0]
 801e2a8:	f7ff fd04 	bl	801dcb4 <__lo0bits>
 801e2ac:	9900      	ldr	r1, [sp, #0]
 801e2ae:	b300      	cbz	r0, 801e2f2 <__d2b+0x82>
 801e2b0:	9a01      	ldr	r2, [sp, #4]
 801e2b2:	f1c0 0320 	rsb	r3, r0, #32
 801e2b6:	fa02 f303 	lsl.w	r3, r2, r3
 801e2ba:	40c2      	lsrs	r2, r0
 801e2bc:	430b      	orrs	r3, r1
 801e2be:	9201      	str	r2, [sp, #4]
 801e2c0:	6163      	str	r3, [r4, #20]
 801e2c2:	9b01      	ldr	r3, [sp, #4]
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	61a3      	str	r3, [r4, #24]
 801e2c8:	bf14      	ite	ne
 801e2ca:	2202      	movne	r2, #2
 801e2cc:	2201      	moveq	r2, #1
 801e2ce:	6122      	str	r2, [r4, #16]
 801e2d0:	b1d5      	cbz	r5, 801e308 <__d2b+0x98>
 801e2d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e2d6:	4405      	add	r5, r0
 801e2d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e2dc:	f8c9 5000 	str.w	r5, [r9]
 801e2e0:	f8c8 0000 	str.w	r0, [r8]
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	b003      	add	sp, #12
 801e2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e2ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e2f0:	e7d5      	b.n	801e29e <__d2b+0x2e>
 801e2f2:	6161      	str	r1, [r4, #20]
 801e2f4:	e7e5      	b.n	801e2c2 <__d2b+0x52>
 801e2f6:	a801      	add	r0, sp, #4
 801e2f8:	f7ff fcdc 	bl	801dcb4 <__lo0bits>
 801e2fc:	9b01      	ldr	r3, [sp, #4]
 801e2fe:	2201      	movs	r2, #1
 801e300:	3020      	adds	r0, #32
 801e302:	6163      	str	r3, [r4, #20]
 801e304:	6122      	str	r2, [r4, #16]
 801e306:	e7e3      	b.n	801e2d0 <__d2b+0x60>
 801e308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e30c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e310:	f8c9 0000 	str.w	r0, [r9]
 801e314:	6918      	ldr	r0, [r3, #16]
 801e316:	f7ff fcad 	bl	801dc74 <__hi0bits>
 801e31a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e31e:	e7df      	b.n	801e2e0 <__d2b+0x70>
 801e320:	08074668 	.word	0x08074668
 801e324:	080746f4 	.word	0x080746f4

0801e328 <__ratio>:
 801e328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e32c:	4688      	mov	r8, r1
 801e32e:	4681      	mov	r9, r0
 801e330:	4669      	mov	r1, sp
 801e332:	f7ff ff4d 	bl	801e1d0 <__b2d>
 801e336:	a901      	add	r1, sp, #4
 801e338:	4640      	mov	r0, r8
 801e33a:	ec55 4b10 	vmov	r4, r5, d0
 801e33e:	f7ff ff47 	bl	801e1d0 <__b2d>
 801e342:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e346:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e34a:	462f      	mov	r7, r5
 801e34c:	eba3 0c02 	sub.w	ip, r3, r2
 801e350:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e354:	ec51 0b10 	vmov	r0, r1, d0
 801e358:	1a9b      	subs	r3, r3, r2
 801e35a:	468b      	mov	fp, r1
 801e35c:	4620      	mov	r0, r4
 801e35e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e362:	2b00      	cmp	r3, #0
 801e364:	bfd5      	itete	le
 801e366:	460a      	movle	r2, r1
 801e368:	462a      	movgt	r2, r5
 801e36a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e36e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e372:	bfd8      	it	le
 801e374:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e378:	ee10 2a10 	vmov	r2, s0
 801e37c:	4639      	mov	r1, r7
 801e37e:	465b      	mov	r3, fp
 801e380:	f7e2 fa68 	bl	8000854 <__aeabi_ddiv>
 801e384:	ec41 0b10 	vmov	d0, r0, r1
 801e388:	b003      	add	sp, #12
 801e38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e38e <__copybits>:
 801e38e:	3901      	subs	r1, #1
 801e390:	f102 0314 	add.w	r3, r2, #20
 801e394:	1149      	asrs	r1, r1, #5
 801e396:	b570      	push	{r4, r5, r6, lr}
 801e398:	3101      	adds	r1, #1
 801e39a:	6914      	ldr	r4, [r2, #16]
 801e39c:	1f05      	subs	r5, r0, #4
 801e39e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e3a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e3a6:	42a3      	cmp	r3, r4
 801e3a8:	d30c      	bcc.n	801e3c4 <__copybits+0x36>
 801e3aa:	1aa3      	subs	r3, r4, r2
 801e3ac:	3211      	adds	r2, #17
 801e3ae:	3b11      	subs	r3, #17
 801e3b0:	f023 0303 	bic.w	r3, r3, #3
 801e3b4:	42a2      	cmp	r2, r4
 801e3b6:	bf88      	it	hi
 801e3b8:	2300      	movhi	r3, #0
 801e3ba:	4418      	add	r0, r3
 801e3bc:	2300      	movs	r3, #0
 801e3be:	4288      	cmp	r0, r1
 801e3c0:	d305      	bcc.n	801e3ce <__copybits+0x40>
 801e3c2:	bd70      	pop	{r4, r5, r6, pc}
 801e3c4:	f853 6b04 	ldr.w	r6, [r3], #4
 801e3c8:	f845 6f04 	str.w	r6, [r5, #4]!
 801e3cc:	e7eb      	b.n	801e3a6 <__copybits+0x18>
 801e3ce:	f840 3b04 	str.w	r3, [r0], #4
 801e3d2:	e7f4      	b.n	801e3be <__copybits+0x30>

0801e3d4 <__any_on>:
 801e3d4:	f100 0214 	add.w	r2, r0, #20
 801e3d8:	114b      	asrs	r3, r1, #5
 801e3da:	6900      	ldr	r0, [r0, #16]
 801e3dc:	4298      	cmp	r0, r3
 801e3de:	b510      	push	{r4, lr}
 801e3e0:	db11      	blt.n	801e406 <__any_on+0x32>
 801e3e2:	dd0a      	ble.n	801e3fa <__any_on+0x26>
 801e3e4:	f011 011f 	ands.w	r1, r1, #31
 801e3e8:	d007      	beq.n	801e3fa <__any_on+0x26>
 801e3ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e3ee:	fa24 f001 	lsr.w	r0, r4, r1
 801e3f2:	fa00 f101 	lsl.w	r1, r0, r1
 801e3f6:	428c      	cmp	r4, r1
 801e3f8:	d10b      	bne.n	801e412 <__any_on+0x3e>
 801e3fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e3fe:	4293      	cmp	r3, r2
 801e400:	d803      	bhi.n	801e40a <__any_on+0x36>
 801e402:	2000      	movs	r0, #0
 801e404:	bd10      	pop	{r4, pc}
 801e406:	4603      	mov	r3, r0
 801e408:	e7f7      	b.n	801e3fa <__any_on+0x26>
 801e40a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e40e:	2900      	cmp	r1, #0
 801e410:	d0f5      	beq.n	801e3fe <__any_on+0x2a>
 801e412:	2001      	movs	r0, #1
 801e414:	e7f6      	b.n	801e404 <__any_on+0x30>

0801e416 <_calloc_r>:
 801e416:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e418:	fba1 2402 	umull	r2, r4, r1, r2
 801e41c:	b94c      	cbnz	r4, 801e432 <_calloc_r+0x1c>
 801e41e:	4611      	mov	r1, r2
 801e420:	9201      	str	r2, [sp, #4]
 801e422:	f7fc fb11 	bl	801aa48 <_malloc_r>
 801e426:	9a01      	ldr	r2, [sp, #4]
 801e428:	4605      	mov	r5, r0
 801e42a:	b930      	cbnz	r0, 801e43a <_calloc_r+0x24>
 801e42c:	4628      	mov	r0, r5
 801e42e:	b003      	add	sp, #12
 801e430:	bd30      	pop	{r4, r5, pc}
 801e432:	220c      	movs	r2, #12
 801e434:	2500      	movs	r5, #0
 801e436:	6002      	str	r2, [r0, #0]
 801e438:	e7f8      	b.n	801e42c <_calloc_r+0x16>
 801e43a:	4621      	mov	r1, r4
 801e43c:	f7fc fa8f 	bl	801a95e <memset>
 801e440:	e7f4      	b.n	801e42c <_calloc_r+0x16>

0801e442 <_realloc_r>:
 801e442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e446:	4680      	mov	r8, r0
 801e448:	4614      	mov	r4, r2
 801e44a:	460e      	mov	r6, r1
 801e44c:	b921      	cbnz	r1, 801e458 <_realloc_r+0x16>
 801e44e:	4611      	mov	r1, r2
 801e450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e454:	f7fc baf8 	b.w	801aa48 <_malloc_r>
 801e458:	b92a      	cbnz	r2, 801e466 <_realloc_r+0x24>
 801e45a:	4625      	mov	r5, r4
 801e45c:	f7fc fa88 	bl	801a970 <_free_r>
 801e460:	4628      	mov	r0, r5
 801e462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e466:	f000 f9ee 	bl	801e846 <_malloc_usable_size_r>
 801e46a:	4284      	cmp	r4, r0
 801e46c:	4607      	mov	r7, r0
 801e46e:	d802      	bhi.n	801e476 <_realloc_r+0x34>
 801e470:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e474:	d812      	bhi.n	801e49c <_realloc_r+0x5a>
 801e476:	4621      	mov	r1, r4
 801e478:	4640      	mov	r0, r8
 801e47a:	f7fc fae5 	bl	801aa48 <_malloc_r>
 801e47e:	4605      	mov	r5, r0
 801e480:	2800      	cmp	r0, #0
 801e482:	d0ed      	beq.n	801e460 <_realloc_r+0x1e>
 801e484:	42bc      	cmp	r4, r7
 801e486:	4622      	mov	r2, r4
 801e488:	4631      	mov	r1, r6
 801e48a:	bf28      	it	cs
 801e48c:	463a      	movcs	r2, r7
 801e48e:	f7fc fa59 	bl	801a944 <memcpy>
 801e492:	4631      	mov	r1, r6
 801e494:	4640      	mov	r0, r8
 801e496:	f7fc fa6b 	bl	801a970 <_free_r>
 801e49a:	e7e1      	b.n	801e460 <_realloc_r+0x1e>
 801e49c:	4635      	mov	r5, r6
 801e49e:	e7df      	b.n	801e460 <_realloc_r+0x1e>

0801e4a0 <__ssputs_r>:
 801e4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e4a4:	688e      	ldr	r6, [r1, #8]
 801e4a6:	4682      	mov	sl, r0
 801e4a8:	460c      	mov	r4, r1
 801e4aa:	4690      	mov	r8, r2
 801e4ac:	429e      	cmp	r6, r3
 801e4ae:	461f      	mov	r7, r3
 801e4b0:	d838      	bhi.n	801e524 <__ssputs_r+0x84>
 801e4b2:	898a      	ldrh	r2, [r1, #12]
 801e4b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e4b8:	d032      	beq.n	801e520 <__ssputs_r+0x80>
 801e4ba:	6825      	ldr	r5, [r4, #0]
 801e4bc:	3301      	adds	r3, #1
 801e4be:	6909      	ldr	r1, [r1, #16]
 801e4c0:	eba5 0901 	sub.w	r9, r5, r1
 801e4c4:	6965      	ldr	r5, [r4, #20]
 801e4c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e4ca:	444b      	add	r3, r9
 801e4cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e4d0:	106d      	asrs	r5, r5, #1
 801e4d2:	429d      	cmp	r5, r3
 801e4d4:	bf38      	it	cc
 801e4d6:	461d      	movcc	r5, r3
 801e4d8:	0553      	lsls	r3, r2, #21
 801e4da:	d531      	bpl.n	801e540 <__ssputs_r+0xa0>
 801e4dc:	4629      	mov	r1, r5
 801e4de:	f7fc fab3 	bl	801aa48 <_malloc_r>
 801e4e2:	4606      	mov	r6, r0
 801e4e4:	b950      	cbnz	r0, 801e4fc <__ssputs_r+0x5c>
 801e4e6:	230c      	movs	r3, #12
 801e4e8:	f04f 30ff 	mov.w	r0, #4294967295
 801e4ec:	f8ca 3000 	str.w	r3, [sl]
 801e4f0:	89a3      	ldrh	r3, [r4, #12]
 801e4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e4f6:	81a3      	strh	r3, [r4, #12]
 801e4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4fc:	464a      	mov	r2, r9
 801e4fe:	6921      	ldr	r1, [r4, #16]
 801e500:	f7fc fa20 	bl	801a944 <memcpy>
 801e504:	89a3      	ldrh	r3, [r4, #12]
 801e506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e50a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e50e:	81a3      	strh	r3, [r4, #12]
 801e510:	6126      	str	r6, [r4, #16]
 801e512:	444e      	add	r6, r9
 801e514:	6165      	str	r5, [r4, #20]
 801e516:	eba5 0509 	sub.w	r5, r5, r9
 801e51a:	6026      	str	r6, [r4, #0]
 801e51c:	463e      	mov	r6, r7
 801e51e:	60a5      	str	r5, [r4, #8]
 801e520:	42be      	cmp	r6, r7
 801e522:	d900      	bls.n	801e526 <__ssputs_r+0x86>
 801e524:	463e      	mov	r6, r7
 801e526:	4632      	mov	r2, r6
 801e528:	4641      	mov	r1, r8
 801e52a:	6820      	ldr	r0, [r4, #0]
 801e52c:	f000 f971 	bl	801e812 <memmove>
 801e530:	68a3      	ldr	r3, [r4, #8]
 801e532:	2000      	movs	r0, #0
 801e534:	1b9b      	subs	r3, r3, r6
 801e536:	60a3      	str	r3, [r4, #8]
 801e538:	6823      	ldr	r3, [r4, #0]
 801e53a:	4433      	add	r3, r6
 801e53c:	6023      	str	r3, [r4, #0]
 801e53e:	e7db      	b.n	801e4f8 <__ssputs_r+0x58>
 801e540:	462a      	mov	r2, r5
 801e542:	f7ff ff7e 	bl	801e442 <_realloc_r>
 801e546:	4606      	mov	r6, r0
 801e548:	2800      	cmp	r0, #0
 801e54a:	d1e1      	bne.n	801e510 <__ssputs_r+0x70>
 801e54c:	6921      	ldr	r1, [r4, #16]
 801e54e:	4650      	mov	r0, sl
 801e550:	f7fc fa0e 	bl	801a970 <_free_r>
 801e554:	e7c7      	b.n	801e4e6 <__ssputs_r+0x46>
	...

0801e558 <_svfiprintf_r>:
 801e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e55c:	4698      	mov	r8, r3
 801e55e:	898b      	ldrh	r3, [r1, #12]
 801e560:	b09d      	sub	sp, #116	; 0x74
 801e562:	4607      	mov	r7, r0
 801e564:	061b      	lsls	r3, r3, #24
 801e566:	460d      	mov	r5, r1
 801e568:	4614      	mov	r4, r2
 801e56a:	d50e      	bpl.n	801e58a <_svfiprintf_r+0x32>
 801e56c:	690b      	ldr	r3, [r1, #16]
 801e56e:	b963      	cbnz	r3, 801e58a <_svfiprintf_r+0x32>
 801e570:	2140      	movs	r1, #64	; 0x40
 801e572:	f7fc fa69 	bl	801aa48 <_malloc_r>
 801e576:	6028      	str	r0, [r5, #0]
 801e578:	6128      	str	r0, [r5, #16]
 801e57a:	b920      	cbnz	r0, 801e586 <_svfiprintf_r+0x2e>
 801e57c:	230c      	movs	r3, #12
 801e57e:	603b      	str	r3, [r7, #0]
 801e580:	f04f 30ff 	mov.w	r0, #4294967295
 801e584:	e0d1      	b.n	801e72a <_svfiprintf_r+0x1d2>
 801e586:	2340      	movs	r3, #64	; 0x40
 801e588:	616b      	str	r3, [r5, #20]
 801e58a:	2300      	movs	r3, #0
 801e58c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e590:	f04f 0901 	mov.w	r9, #1
 801e594:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801e744 <_svfiprintf_r+0x1ec>
 801e598:	9309      	str	r3, [sp, #36]	; 0x24
 801e59a:	2320      	movs	r3, #32
 801e59c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e5a0:	2330      	movs	r3, #48	; 0x30
 801e5a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e5a6:	4623      	mov	r3, r4
 801e5a8:	469a      	mov	sl, r3
 801e5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e5ae:	b10a      	cbz	r2, 801e5b4 <_svfiprintf_r+0x5c>
 801e5b0:	2a25      	cmp	r2, #37	; 0x25
 801e5b2:	d1f9      	bne.n	801e5a8 <_svfiprintf_r+0x50>
 801e5b4:	ebba 0b04 	subs.w	fp, sl, r4
 801e5b8:	d00b      	beq.n	801e5d2 <_svfiprintf_r+0x7a>
 801e5ba:	465b      	mov	r3, fp
 801e5bc:	4622      	mov	r2, r4
 801e5be:	4629      	mov	r1, r5
 801e5c0:	4638      	mov	r0, r7
 801e5c2:	f7ff ff6d 	bl	801e4a0 <__ssputs_r>
 801e5c6:	3001      	adds	r0, #1
 801e5c8:	f000 80aa 	beq.w	801e720 <_svfiprintf_r+0x1c8>
 801e5cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e5ce:	445a      	add	r2, fp
 801e5d0:	9209      	str	r2, [sp, #36]	; 0x24
 801e5d2:	f89a 3000 	ldrb.w	r3, [sl]
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	f000 80a2 	beq.w	801e720 <_svfiprintf_r+0x1c8>
 801e5dc:	2300      	movs	r3, #0
 801e5de:	f04f 32ff 	mov.w	r2, #4294967295
 801e5e2:	f10a 0a01 	add.w	sl, sl, #1
 801e5e6:	9304      	str	r3, [sp, #16]
 801e5e8:	9307      	str	r3, [sp, #28]
 801e5ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e5ee:	931a      	str	r3, [sp, #104]	; 0x68
 801e5f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e5f4:	4654      	mov	r4, sl
 801e5f6:	2205      	movs	r2, #5
 801e5f8:	4852      	ldr	r0, [pc, #328]	; (801e744 <_svfiprintf_r+0x1ec>)
 801e5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5fe:	f7ff fa2b 	bl	801da58 <memchr>
 801e602:	9a04      	ldr	r2, [sp, #16]
 801e604:	b9d8      	cbnz	r0, 801e63e <_svfiprintf_r+0xe6>
 801e606:	06d0      	lsls	r0, r2, #27
 801e608:	bf44      	itt	mi
 801e60a:	2320      	movmi	r3, #32
 801e60c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e610:	0711      	lsls	r1, r2, #28
 801e612:	bf44      	itt	mi
 801e614:	232b      	movmi	r3, #43	; 0x2b
 801e616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e61a:	f89a 3000 	ldrb.w	r3, [sl]
 801e61e:	2b2a      	cmp	r3, #42	; 0x2a
 801e620:	d015      	beq.n	801e64e <_svfiprintf_r+0xf6>
 801e622:	9a07      	ldr	r2, [sp, #28]
 801e624:	4654      	mov	r4, sl
 801e626:	2000      	movs	r0, #0
 801e628:	f04f 0c0a 	mov.w	ip, #10
 801e62c:	4621      	mov	r1, r4
 801e62e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e632:	3b30      	subs	r3, #48	; 0x30
 801e634:	2b09      	cmp	r3, #9
 801e636:	d94e      	bls.n	801e6d6 <_svfiprintf_r+0x17e>
 801e638:	b1b0      	cbz	r0, 801e668 <_svfiprintf_r+0x110>
 801e63a:	9207      	str	r2, [sp, #28]
 801e63c:	e014      	b.n	801e668 <_svfiprintf_r+0x110>
 801e63e:	eba0 0308 	sub.w	r3, r0, r8
 801e642:	46a2      	mov	sl, r4
 801e644:	fa09 f303 	lsl.w	r3, r9, r3
 801e648:	4313      	orrs	r3, r2
 801e64a:	9304      	str	r3, [sp, #16]
 801e64c:	e7d2      	b.n	801e5f4 <_svfiprintf_r+0x9c>
 801e64e:	9b03      	ldr	r3, [sp, #12]
 801e650:	1d19      	adds	r1, r3, #4
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	2b00      	cmp	r3, #0
 801e656:	9103      	str	r1, [sp, #12]
 801e658:	bfbb      	ittet	lt
 801e65a:	425b      	neglt	r3, r3
 801e65c:	f042 0202 	orrlt.w	r2, r2, #2
 801e660:	9307      	strge	r3, [sp, #28]
 801e662:	9307      	strlt	r3, [sp, #28]
 801e664:	bfb8      	it	lt
 801e666:	9204      	strlt	r2, [sp, #16]
 801e668:	7823      	ldrb	r3, [r4, #0]
 801e66a:	2b2e      	cmp	r3, #46	; 0x2e
 801e66c:	d10c      	bne.n	801e688 <_svfiprintf_r+0x130>
 801e66e:	7863      	ldrb	r3, [r4, #1]
 801e670:	2b2a      	cmp	r3, #42	; 0x2a
 801e672:	d135      	bne.n	801e6e0 <_svfiprintf_r+0x188>
 801e674:	9b03      	ldr	r3, [sp, #12]
 801e676:	3402      	adds	r4, #2
 801e678:	1d1a      	adds	r2, r3, #4
 801e67a:	681b      	ldr	r3, [r3, #0]
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	9203      	str	r2, [sp, #12]
 801e680:	bfb8      	it	lt
 801e682:	f04f 33ff 	movlt.w	r3, #4294967295
 801e686:	9305      	str	r3, [sp, #20]
 801e688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e754 <_svfiprintf_r+0x1fc>
 801e68c:	2203      	movs	r2, #3
 801e68e:	7821      	ldrb	r1, [r4, #0]
 801e690:	4650      	mov	r0, sl
 801e692:	f7ff f9e1 	bl	801da58 <memchr>
 801e696:	b140      	cbz	r0, 801e6aa <_svfiprintf_r+0x152>
 801e698:	2340      	movs	r3, #64	; 0x40
 801e69a:	eba0 000a 	sub.w	r0, r0, sl
 801e69e:	3401      	adds	r4, #1
 801e6a0:	fa03 f000 	lsl.w	r0, r3, r0
 801e6a4:	9b04      	ldr	r3, [sp, #16]
 801e6a6:	4303      	orrs	r3, r0
 801e6a8:	9304      	str	r3, [sp, #16]
 801e6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6ae:	2206      	movs	r2, #6
 801e6b0:	4825      	ldr	r0, [pc, #148]	; (801e748 <_svfiprintf_r+0x1f0>)
 801e6b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e6b6:	f7ff f9cf 	bl	801da58 <memchr>
 801e6ba:	2800      	cmp	r0, #0
 801e6bc:	d038      	beq.n	801e730 <_svfiprintf_r+0x1d8>
 801e6be:	4b23      	ldr	r3, [pc, #140]	; (801e74c <_svfiprintf_r+0x1f4>)
 801e6c0:	bb1b      	cbnz	r3, 801e70a <_svfiprintf_r+0x1b2>
 801e6c2:	9b03      	ldr	r3, [sp, #12]
 801e6c4:	3307      	adds	r3, #7
 801e6c6:	f023 0307 	bic.w	r3, r3, #7
 801e6ca:	3308      	adds	r3, #8
 801e6cc:	9303      	str	r3, [sp, #12]
 801e6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6d0:	4433      	add	r3, r6
 801e6d2:	9309      	str	r3, [sp, #36]	; 0x24
 801e6d4:	e767      	b.n	801e5a6 <_svfiprintf_r+0x4e>
 801e6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801e6da:	460c      	mov	r4, r1
 801e6dc:	2001      	movs	r0, #1
 801e6de:	e7a5      	b.n	801e62c <_svfiprintf_r+0xd4>
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	3401      	adds	r4, #1
 801e6e4:	f04f 0c0a 	mov.w	ip, #10
 801e6e8:	4619      	mov	r1, r3
 801e6ea:	9305      	str	r3, [sp, #20]
 801e6ec:	4620      	mov	r0, r4
 801e6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e6f2:	3a30      	subs	r2, #48	; 0x30
 801e6f4:	2a09      	cmp	r2, #9
 801e6f6:	d903      	bls.n	801e700 <_svfiprintf_r+0x1a8>
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d0c5      	beq.n	801e688 <_svfiprintf_r+0x130>
 801e6fc:	9105      	str	r1, [sp, #20]
 801e6fe:	e7c3      	b.n	801e688 <_svfiprintf_r+0x130>
 801e700:	fb0c 2101 	mla	r1, ip, r1, r2
 801e704:	4604      	mov	r4, r0
 801e706:	2301      	movs	r3, #1
 801e708:	e7f0      	b.n	801e6ec <_svfiprintf_r+0x194>
 801e70a:	ab03      	add	r3, sp, #12
 801e70c:	462a      	mov	r2, r5
 801e70e:	a904      	add	r1, sp, #16
 801e710:	4638      	mov	r0, r7
 801e712:	9300      	str	r3, [sp, #0]
 801e714:	4b0e      	ldr	r3, [pc, #56]	; (801e750 <_svfiprintf_r+0x1f8>)
 801e716:	f7fc faab 	bl	801ac70 <_printf_float>
 801e71a:	1c42      	adds	r2, r0, #1
 801e71c:	4606      	mov	r6, r0
 801e71e:	d1d6      	bne.n	801e6ce <_svfiprintf_r+0x176>
 801e720:	89ab      	ldrh	r3, [r5, #12]
 801e722:	065b      	lsls	r3, r3, #25
 801e724:	f53f af2c 	bmi.w	801e580 <_svfiprintf_r+0x28>
 801e728:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e72a:	b01d      	add	sp, #116	; 0x74
 801e72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e730:	ab03      	add	r3, sp, #12
 801e732:	462a      	mov	r2, r5
 801e734:	a904      	add	r1, sp, #16
 801e736:	4638      	mov	r0, r7
 801e738:	9300      	str	r3, [sp, #0]
 801e73a:	4b05      	ldr	r3, [pc, #20]	; (801e750 <_svfiprintf_r+0x1f8>)
 801e73c:	f7fc fd3e 	bl	801b1bc <_printf_i>
 801e740:	e7eb      	b.n	801e71a <_svfiprintf_r+0x1c2>
 801e742:	bf00      	nop
 801e744:	0807484c 	.word	0x0807484c
 801e748:	08074856 	.word	0x08074856
 801e74c:	0801ac71 	.word	0x0801ac71
 801e750:	0801e4a1 	.word	0x0801e4a1
 801e754:	08074852 	.word	0x08074852

0801e758 <nan>:
 801e758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e760 <nan+0x8>
 801e75c:	4770      	bx	lr
 801e75e:	bf00      	nop
 801e760:	00000000 	.word	0x00000000
 801e764:	7ff80000 	.word	0x7ff80000

0801e768 <strncmp>:
 801e768:	b510      	push	{r4, lr}
 801e76a:	b17a      	cbz	r2, 801e78c <strncmp+0x24>
 801e76c:	4603      	mov	r3, r0
 801e76e:	3901      	subs	r1, #1
 801e770:	1884      	adds	r4, r0, r2
 801e772:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e776:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e77a:	4290      	cmp	r0, r2
 801e77c:	d101      	bne.n	801e782 <strncmp+0x1a>
 801e77e:	42a3      	cmp	r3, r4
 801e780:	d101      	bne.n	801e786 <strncmp+0x1e>
 801e782:	1a80      	subs	r0, r0, r2
 801e784:	bd10      	pop	{r4, pc}
 801e786:	2800      	cmp	r0, #0
 801e788:	d1f3      	bne.n	801e772 <strncmp+0xa>
 801e78a:	e7fa      	b.n	801e782 <strncmp+0x1a>
 801e78c:	4610      	mov	r0, r2
 801e78e:	e7f9      	b.n	801e784 <strncmp+0x1c>

0801e790 <__ascii_wctomb>:
 801e790:	b149      	cbz	r1, 801e7a6 <__ascii_wctomb+0x16>
 801e792:	2aff      	cmp	r2, #255	; 0xff
 801e794:	bf8d      	iteet	hi
 801e796:	238a      	movhi	r3, #138	; 0x8a
 801e798:	2001      	movls	r0, #1
 801e79a:	700a      	strbls	r2, [r1, #0]
 801e79c:	6003      	strhi	r3, [r0, #0]
 801e79e:	bf88      	it	hi
 801e7a0:	f04f 30ff 	movhi.w	r0, #4294967295
 801e7a4:	4770      	bx	lr
 801e7a6:	4608      	mov	r0, r1
 801e7a8:	4770      	bx	lr
	...

0801e7ac <__assert_func>:
 801e7ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e7ae:	4614      	mov	r4, r2
 801e7b0:	461a      	mov	r2, r3
 801e7b2:	4b09      	ldr	r3, [pc, #36]	; (801e7d8 <__assert_func+0x2c>)
 801e7b4:	4605      	mov	r5, r0
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	68d8      	ldr	r0, [r3, #12]
 801e7ba:	b14c      	cbz	r4, 801e7d0 <__assert_func+0x24>
 801e7bc:	4b07      	ldr	r3, [pc, #28]	; (801e7dc <__assert_func+0x30>)
 801e7be:	9100      	str	r1, [sp, #0]
 801e7c0:	4907      	ldr	r1, [pc, #28]	; (801e7e0 <__assert_func+0x34>)
 801e7c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e7c6:	462b      	mov	r3, r5
 801e7c8:	f000 f80e 	bl	801e7e8 <fiprintf>
 801e7cc:	f000 fa5c 	bl	801ec88 <abort>
 801e7d0:	4b04      	ldr	r3, [pc, #16]	; (801e7e4 <__assert_func+0x38>)
 801e7d2:	461c      	mov	r4, r3
 801e7d4:	e7f3      	b.n	801e7be <__assert_func+0x12>
 801e7d6:	bf00      	nop
 801e7d8:	20000910 	.word	0x20000910
 801e7dc:	0807485d 	.word	0x0807485d
 801e7e0:	0807486a 	.word	0x0807486a
 801e7e4:	08074898 	.word	0x08074898

0801e7e8 <fiprintf>:
 801e7e8:	b40e      	push	{r1, r2, r3}
 801e7ea:	b503      	push	{r0, r1, lr}
 801e7ec:	ab03      	add	r3, sp, #12
 801e7ee:	4601      	mov	r1, r0
 801e7f0:	4805      	ldr	r0, [pc, #20]	; (801e808 <fiprintf+0x20>)
 801e7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801e7f6:	6800      	ldr	r0, [r0, #0]
 801e7f8:	9301      	str	r3, [sp, #4]
 801e7fa:	f000 f855 	bl	801e8a8 <_vfiprintf_r>
 801e7fe:	b002      	add	sp, #8
 801e800:	f85d eb04 	ldr.w	lr, [sp], #4
 801e804:	b003      	add	sp, #12
 801e806:	4770      	bx	lr
 801e808:	20000910 	.word	0x20000910

0801e80c <__retarget_lock_init_recursive>:
 801e80c:	4770      	bx	lr

0801e80e <__retarget_lock_acquire_recursive>:
 801e80e:	4770      	bx	lr

0801e810 <__retarget_lock_release_recursive>:
 801e810:	4770      	bx	lr

0801e812 <memmove>:
 801e812:	4288      	cmp	r0, r1
 801e814:	b510      	push	{r4, lr}
 801e816:	eb01 0402 	add.w	r4, r1, r2
 801e81a:	d902      	bls.n	801e822 <memmove+0x10>
 801e81c:	4284      	cmp	r4, r0
 801e81e:	4623      	mov	r3, r4
 801e820:	d807      	bhi.n	801e832 <memmove+0x20>
 801e822:	1e43      	subs	r3, r0, #1
 801e824:	42a1      	cmp	r1, r4
 801e826:	d008      	beq.n	801e83a <memmove+0x28>
 801e828:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e82c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e830:	e7f8      	b.n	801e824 <memmove+0x12>
 801e832:	4402      	add	r2, r0
 801e834:	4601      	mov	r1, r0
 801e836:	428a      	cmp	r2, r1
 801e838:	d100      	bne.n	801e83c <memmove+0x2a>
 801e83a:	bd10      	pop	{r4, pc}
 801e83c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e840:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e844:	e7f7      	b.n	801e836 <memmove+0x24>

0801e846 <_malloc_usable_size_r>:
 801e846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e84a:	1f18      	subs	r0, r3, #4
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	bfbc      	itt	lt
 801e850:	580b      	ldrlt	r3, [r1, r0]
 801e852:	18c0      	addlt	r0, r0, r3
 801e854:	4770      	bx	lr

0801e856 <__sfputc_r>:
 801e856:	6893      	ldr	r3, [r2, #8]
 801e858:	3b01      	subs	r3, #1
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	6093      	str	r3, [r2, #8]
 801e85e:	b410      	push	{r4}
 801e860:	da08      	bge.n	801e874 <__sfputc_r+0x1e>
 801e862:	6994      	ldr	r4, [r2, #24]
 801e864:	42a3      	cmp	r3, r4
 801e866:	db01      	blt.n	801e86c <__sfputc_r+0x16>
 801e868:	290a      	cmp	r1, #10
 801e86a:	d103      	bne.n	801e874 <__sfputc_r+0x1e>
 801e86c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e870:	f000 b94a 	b.w	801eb08 <__swbuf_r>
 801e874:	6813      	ldr	r3, [r2, #0]
 801e876:	1c58      	adds	r0, r3, #1
 801e878:	6010      	str	r0, [r2, #0]
 801e87a:	4608      	mov	r0, r1
 801e87c:	7019      	strb	r1, [r3, #0]
 801e87e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e882:	4770      	bx	lr

0801e884 <__sfputs_r>:
 801e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e886:	4606      	mov	r6, r0
 801e888:	460f      	mov	r7, r1
 801e88a:	4614      	mov	r4, r2
 801e88c:	18d5      	adds	r5, r2, r3
 801e88e:	42ac      	cmp	r4, r5
 801e890:	d101      	bne.n	801e896 <__sfputs_r+0x12>
 801e892:	2000      	movs	r0, #0
 801e894:	e007      	b.n	801e8a6 <__sfputs_r+0x22>
 801e896:	463a      	mov	r2, r7
 801e898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e89c:	4630      	mov	r0, r6
 801e89e:	f7ff ffda 	bl	801e856 <__sfputc_r>
 801e8a2:	1c43      	adds	r3, r0, #1
 801e8a4:	d1f3      	bne.n	801e88e <__sfputs_r+0xa>
 801e8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e8a8 <_vfiprintf_r>:
 801e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8ac:	460d      	mov	r5, r1
 801e8ae:	b09d      	sub	sp, #116	; 0x74
 801e8b0:	4614      	mov	r4, r2
 801e8b2:	4698      	mov	r8, r3
 801e8b4:	4606      	mov	r6, r0
 801e8b6:	b118      	cbz	r0, 801e8c0 <_vfiprintf_r+0x18>
 801e8b8:	6983      	ldr	r3, [r0, #24]
 801e8ba:	b90b      	cbnz	r3, 801e8c0 <_vfiprintf_r+0x18>
 801e8bc:	f000 fb04 	bl	801eec8 <__sinit>
 801e8c0:	4b89      	ldr	r3, [pc, #548]	; (801eae8 <_vfiprintf_r+0x240>)
 801e8c2:	429d      	cmp	r5, r3
 801e8c4:	d11b      	bne.n	801e8fe <_vfiprintf_r+0x56>
 801e8c6:	6875      	ldr	r5, [r6, #4]
 801e8c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e8ca:	07d9      	lsls	r1, r3, #31
 801e8cc:	d405      	bmi.n	801e8da <_vfiprintf_r+0x32>
 801e8ce:	89ab      	ldrh	r3, [r5, #12]
 801e8d0:	059a      	lsls	r2, r3, #22
 801e8d2:	d402      	bmi.n	801e8da <_vfiprintf_r+0x32>
 801e8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e8d6:	f7ff ff9a 	bl	801e80e <__retarget_lock_acquire_recursive>
 801e8da:	89ab      	ldrh	r3, [r5, #12]
 801e8dc:	071b      	lsls	r3, r3, #28
 801e8de:	d501      	bpl.n	801e8e4 <_vfiprintf_r+0x3c>
 801e8e0:	692b      	ldr	r3, [r5, #16]
 801e8e2:	b9eb      	cbnz	r3, 801e920 <_vfiprintf_r+0x78>
 801e8e4:	4629      	mov	r1, r5
 801e8e6:	4630      	mov	r0, r6
 801e8e8:	f000 f960 	bl	801ebac <__swsetup_r>
 801e8ec:	b1c0      	cbz	r0, 801e920 <_vfiprintf_r+0x78>
 801e8ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e8f0:	07dc      	lsls	r4, r3, #31
 801e8f2:	d50e      	bpl.n	801e912 <_vfiprintf_r+0x6a>
 801e8f4:	f04f 30ff 	mov.w	r0, #4294967295
 801e8f8:	b01d      	add	sp, #116	; 0x74
 801e8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8fe:	4b7b      	ldr	r3, [pc, #492]	; (801eaec <_vfiprintf_r+0x244>)
 801e900:	429d      	cmp	r5, r3
 801e902:	d101      	bne.n	801e908 <_vfiprintf_r+0x60>
 801e904:	68b5      	ldr	r5, [r6, #8]
 801e906:	e7df      	b.n	801e8c8 <_vfiprintf_r+0x20>
 801e908:	4b79      	ldr	r3, [pc, #484]	; (801eaf0 <_vfiprintf_r+0x248>)
 801e90a:	429d      	cmp	r5, r3
 801e90c:	bf08      	it	eq
 801e90e:	68f5      	ldreq	r5, [r6, #12]
 801e910:	e7da      	b.n	801e8c8 <_vfiprintf_r+0x20>
 801e912:	89ab      	ldrh	r3, [r5, #12]
 801e914:	0598      	lsls	r0, r3, #22
 801e916:	d4ed      	bmi.n	801e8f4 <_vfiprintf_r+0x4c>
 801e918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e91a:	f7ff ff79 	bl	801e810 <__retarget_lock_release_recursive>
 801e91e:	e7e9      	b.n	801e8f4 <_vfiprintf_r+0x4c>
 801e920:	2300      	movs	r3, #0
 801e922:	f8cd 800c 	str.w	r8, [sp, #12]
 801e926:	f04f 0901 	mov.w	r9, #1
 801e92a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801eaf4 <_vfiprintf_r+0x24c>
 801e92e:	9309      	str	r3, [sp, #36]	; 0x24
 801e930:	2320      	movs	r3, #32
 801e932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e936:	2330      	movs	r3, #48	; 0x30
 801e938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e93c:	4623      	mov	r3, r4
 801e93e:	469a      	mov	sl, r3
 801e940:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e944:	b10a      	cbz	r2, 801e94a <_vfiprintf_r+0xa2>
 801e946:	2a25      	cmp	r2, #37	; 0x25
 801e948:	d1f9      	bne.n	801e93e <_vfiprintf_r+0x96>
 801e94a:	ebba 0b04 	subs.w	fp, sl, r4
 801e94e:	d00b      	beq.n	801e968 <_vfiprintf_r+0xc0>
 801e950:	465b      	mov	r3, fp
 801e952:	4622      	mov	r2, r4
 801e954:	4629      	mov	r1, r5
 801e956:	4630      	mov	r0, r6
 801e958:	f7ff ff94 	bl	801e884 <__sfputs_r>
 801e95c:	3001      	adds	r0, #1
 801e95e:	f000 80aa 	beq.w	801eab6 <_vfiprintf_r+0x20e>
 801e962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e964:	445a      	add	r2, fp
 801e966:	9209      	str	r2, [sp, #36]	; 0x24
 801e968:	f89a 3000 	ldrb.w	r3, [sl]
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	f000 80a2 	beq.w	801eab6 <_vfiprintf_r+0x20e>
 801e972:	2300      	movs	r3, #0
 801e974:	f04f 32ff 	mov.w	r2, #4294967295
 801e978:	f10a 0a01 	add.w	sl, sl, #1
 801e97c:	9304      	str	r3, [sp, #16]
 801e97e:	9307      	str	r3, [sp, #28]
 801e980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e984:	931a      	str	r3, [sp, #104]	; 0x68
 801e986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e98a:	4654      	mov	r4, sl
 801e98c:	2205      	movs	r2, #5
 801e98e:	4859      	ldr	r0, [pc, #356]	; (801eaf4 <_vfiprintf_r+0x24c>)
 801e990:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e994:	f7ff f860 	bl	801da58 <memchr>
 801e998:	9a04      	ldr	r2, [sp, #16]
 801e99a:	b9d8      	cbnz	r0, 801e9d4 <_vfiprintf_r+0x12c>
 801e99c:	06d1      	lsls	r1, r2, #27
 801e99e:	bf44      	itt	mi
 801e9a0:	2320      	movmi	r3, #32
 801e9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e9a6:	0713      	lsls	r3, r2, #28
 801e9a8:	bf44      	itt	mi
 801e9aa:	232b      	movmi	r3, #43	; 0x2b
 801e9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e9b0:	f89a 3000 	ldrb.w	r3, [sl]
 801e9b4:	2b2a      	cmp	r3, #42	; 0x2a
 801e9b6:	d015      	beq.n	801e9e4 <_vfiprintf_r+0x13c>
 801e9b8:	9a07      	ldr	r2, [sp, #28]
 801e9ba:	4654      	mov	r4, sl
 801e9bc:	2000      	movs	r0, #0
 801e9be:	f04f 0c0a 	mov.w	ip, #10
 801e9c2:	4621      	mov	r1, r4
 801e9c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e9c8:	3b30      	subs	r3, #48	; 0x30
 801e9ca:	2b09      	cmp	r3, #9
 801e9cc:	d94e      	bls.n	801ea6c <_vfiprintf_r+0x1c4>
 801e9ce:	b1b0      	cbz	r0, 801e9fe <_vfiprintf_r+0x156>
 801e9d0:	9207      	str	r2, [sp, #28]
 801e9d2:	e014      	b.n	801e9fe <_vfiprintf_r+0x156>
 801e9d4:	eba0 0308 	sub.w	r3, r0, r8
 801e9d8:	46a2      	mov	sl, r4
 801e9da:	fa09 f303 	lsl.w	r3, r9, r3
 801e9de:	4313      	orrs	r3, r2
 801e9e0:	9304      	str	r3, [sp, #16]
 801e9e2:	e7d2      	b.n	801e98a <_vfiprintf_r+0xe2>
 801e9e4:	9b03      	ldr	r3, [sp, #12]
 801e9e6:	1d19      	adds	r1, r3, #4
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	9103      	str	r1, [sp, #12]
 801e9ee:	bfbb      	ittet	lt
 801e9f0:	425b      	neglt	r3, r3
 801e9f2:	f042 0202 	orrlt.w	r2, r2, #2
 801e9f6:	9307      	strge	r3, [sp, #28]
 801e9f8:	9307      	strlt	r3, [sp, #28]
 801e9fa:	bfb8      	it	lt
 801e9fc:	9204      	strlt	r2, [sp, #16]
 801e9fe:	7823      	ldrb	r3, [r4, #0]
 801ea00:	2b2e      	cmp	r3, #46	; 0x2e
 801ea02:	d10c      	bne.n	801ea1e <_vfiprintf_r+0x176>
 801ea04:	7863      	ldrb	r3, [r4, #1]
 801ea06:	2b2a      	cmp	r3, #42	; 0x2a
 801ea08:	d135      	bne.n	801ea76 <_vfiprintf_r+0x1ce>
 801ea0a:	9b03      	ldr	r3, [sp, #12]
 801ea0c:	3402      	adds	r4, #2
 801ea0e:	1d1a      	adds	r2, r3, #4
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	9203      	str	r2, [sp, #12]
 801ea16:	bfb8      	it	lt
 801ea18:	f04f 33ff 	movlt.w	r3, #4294967295
 801ea1c:	9305      	str	r3, [sp, #20]
 801ea1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801eb04 <_vfiprintf_r+0x25c>
 801ea22:	2203      	movs	r2, #3
 801ea24:	7821      	ldrb	r1, [r4, #0]
 801ea26:	4650      	mov	r0, sl
 801ea28:	f7ff f816 	bl	801da58 <memchr>
 801ea2c:	b140      	cbz	r0, 801ea40 <_vfiprintf_r+0x198>
 801ea2e:	2340      	movs	r3, #64	; 0x40
 801ea30:	eba0 000a 	sub.w	r0, r0, sl
 801ea34:	3401      	adds	r4, #1
 801ea36:	fa03 f000 	lsl.w	r0, r3, r0
 801ea3a:	9b04      	ldr	r3, [sp, #16]
 801ea3c:	4303      	orrs	r3, r0
 801ea3e:	9304      	str	r3, [sp, #16]
 801ea40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea44:	2206      	movs	r2, #6
 801ea46:	482c      	ldr	r0, [pc, #176]	; (801eaf8 <_vfiprintf_r+0x250>)
 801ea48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ea4c:	f7ff f804 	bl	801da58 <memchr>
 801ea50:	2800      	cmp	r0, #0
 801ea52:	d03f      	beq.n	801ead4 <_vfiprintf_r+0x22c>
 801ea54:	4b29      	ldr	r3, [pc, #164]	; (801eafc <_vfiprintf_r+0x254>)
 801ea56:	bb1b      	cbnz	r3, 801eaa0 <_vfiprintf_r+0x1f8>
 801ea58:	9b03      	ldr	r3, [sp, #12]
 801ea5a:	3307      	adds	r3, #7
 801ea5c:	f023 0307 	bic.w	r3, r3, #7
 801ea60:	3308      	adds	r3, #8
 801ea62:	9303      	str	r3, [sp, #12]
 801ea64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea66:	443b      	add	r3, r7
 801ea68:	9309      	str	r3, [sp, #36]	; 0x24
 801ea6a:	e767      	b.n	801e93c <_vfiprintf_r+0x94>
 801ea6c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea70:	460c      	mov	r4, r1
 801ea72:	2001      	movs	r0, #1
 801ea74:	e7a5      	b.n	801e9c2 <_vfiprintf_r+0x11a>
 801ea76:	2300      	movs	r3, #0
 801ea78:	3401      	adds	r4, #1
 801ea7a:	f04f 0c0a 	mov.w	ip, #10
 801ea7e:	4619      	mov	r1, r3
 801ea80:	9305      	str	r3, [sp, #20]
 801ea82:	4620      	mov	r0, r4
 801ea84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea88:	3a30      	subs	r2, #48	; 0x30
 801ea8a:	2a09      	cmp	r2, #9
 801ea8c:	d903      	bls.n	801ea96 <_vfiprintf_r+0x1ee>
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d0c5      	beq.n	801ea1e <_vfiprintf_r+0x176>
 801ea92:	9105      	str	r1, [sp, #20]
 801ea94:	e7c3      	b.n	801ea1e <_vfiprintf_r+0x176>
 801ea96:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea9a:	4604      	mov	r4, r0
 801ea9c:	2301      	movs	r3, #1
 801ea9e:	e7f0      	b.n	801ea82 <_vfiprintf_r+0x1da>
 801eaa0:	ab03      	add	r3, sp, #12
 801eaa2:	462a      	mov	r2, r5
 801eaa4:	a904      	add	r1, sp, #16
 801eaa6:	4630      	mov	r0, r6
 801eaa8:	9300      	str	r3, [sp, #0]
 801eaaa:	4b15      	ldr	r3, [pc, #84]	; (801eb00 <_vfiprintf_r+0x258>)
 801eaac:	f7fc f8e0 	bl	801ac70 <_printf_float>
 801eab0:	4607      	mov	r7, r0
 801eab2:	1c78      	adds	r0, r7, #1
 801eab4:	d1d6      	bne.n	801ea64 <_vfiprintf_r+0x1bc>
 801eab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eab8:	07d9      	lsls	r1, r3, #31
 801eaba:	d405      	bmi.n	801eac8 <_vfiprintf_r+0x220>
 801eabc:	89ab      	ldrh	r3, [r5, #12]
 801eabe:	059a      	lsls	r2, r3, #22
 801eac0:	d402      	bmi.n	801eac8 <_vfiprintf_r+0x220>
 801eac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eac4:	f7ff fea4 	bl	801e810 <__retarget_lock_release_recursive>
 801eac8:	89ab      	ldrh	r3, [r5, #12]
 801eaca:	065b      	lsls	r3, r3, #25
 801eacc:	f53f af12 	bmi.w	801e8f4 <_vfiprintf_r+0x4c>
 801ead0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ead2:	e711      	b.n	801e8f8 <_vfiprintf_r+0x50>
 801ead4:	ab03      	add	r3, sp, #12
 801ead6:	462a      	mov	r2, r5
 801ead8:	a904      	add	r1, sp, #16
 801eada:	4630      	mov	r0, r6
 801eadc:	9300      	str	r3, [sp, #0]
 801eade:	4b08      	ldr	r3, [pc, #32]	; (801eb00 <_vfiprintf_r+0x258>)
 801eae0:	f7fc fb6c 	bl	801b1bc <_printf_i>
 801eae4:	e7e4      	b.n	801eab0 <_vfiprintf_r+0x208>
 801eae6:	bf00      	nop
 801eae8:	080748bc 	.word	0x080748bc
 801eaec:	080748dc 	.word	0x080748dc
 801eaf0:	0807489c 	.word	0x0807489c
 801eaf4:	0807484c 	.word	0x0807484c
 801eaf8:	08074856 	.word	0x08074856
 801eafc:	0801ac71 	.word	0x0801ac71
 801eb00:	0801e885 	.word	0x0801e885
 801eb04:	08074852 	.word	0x08074852

0801eb08 <__swbuf_r>:
 801eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb0a:	460e      	mov	r6, r1
 801eb0c:	4614      	mov	r4, r2
 801eb0e:	4605      	mov	r5, r0
 801eb10:	b118      	cbz	r0, 801eb1a <__swbuf_r+0x12>
 801eb12:	6983      	ldr	r3, [r0, #24]
 801eb14:	b90b      	cbnz	r3, 801eb1a <__swbuf_r+0x12>
 801eb16:	f000 f9d7 	bl	801eec8 <__sinit>
 801eb1a:	4b21      	ldr	r3, [pc, #132]	; (801eba0 <__swbuf_r+0x98>)
 801eb1c:	429c      	cmp	r4, r3
 801eb1e:	d12b      	bne.n	801eb78 <__swbuf_r+0x70>
 801eb20:	686c      	ldr	r4, [r5, #4]
 801eb22:	69a3      	ldr	r3, [r4, #24]
 801eb24:	60a3      	str	r3, [r4, #8]
 801eb26:	89a3      	ldrh	r3, [r4, #12]
 801eb28:	071a      	lsls	r2, r3, #28
 801eb2a:	d52f      	bpl.n	801eb8c <__swbuf_r+0x84>
 801eb2c:	6923      	ldr	r3, [r4, #16]
 801eb2e:	b36b      	cbz	r3, 801eb8c <__swbuf_r+0x84>
 801eb30:	6923      	ldr	r3, [r4, #16]
 801eb32:	b2f6      	uxtb	r6, r6
 801eb34:	6820      	ldr	r0, [r4, #0]
 801eb36:	4637      	mov	r7, r6
 801eb38:	1ac0      	subs	r0, r0, r3
 801eb3a:	6963      	ldr	r3, [r4, #20]
 801eb3c:	4283      	cmp	r3, r0
 801eb3e:	dc04      	bgt.n	801eb4a <__swbuf_r+0x42>
 801eb40:	4621      	mov	r1, r4
 801eb42:	4628      	mov	r0, r5
 801eb44:	f000 f92c 	bl	801eda0 <_fflush_r>
 801eb48:	bb30      	cbnz	r0, 801eb98 <__swbuf_r+0x90>
 801eb4a:	68a3      	ldr	r3, [r4, #8]
 801eb4c:	3001      	adds	r0, #1
 801eb4e:	3b01      	subs	r3, #1
 801eb50:	60a3      	str	r3, [r4, #8]
 801eb52:	6823      	ldr	r3, [r4, #0]
 801eb54:	1c5a      	adds	r2, r3, #1
 801eb56:	6022      	str	r2, [r4, #0]
 801eb58:	701e      	strb	r6, [r3, #0]
 801eb5a:	6963      	ldr	r3, [r4, #20]
 801eb5c:	4283      	cmp	r3, r0
 801eb5e:	d004      	beq.n	801eb6a <__swbuf_r+0x62>
 801eb60:	89a3      	ldrh	r3, [r4, #12]
 801eb62:	07db      	lsls	r3, r3, #31
 801eb64:	d506      	bpl.n	801eb74 <__swbuf_r+0x6c>
 801eb66:	2e0a      	cmp	r6, #10
 801eb68:	d104      	bne.n	801eb74 <__swbuf_r+0x6c>
 801eb6a:	4621      	mov	r1, r4
 801eb6c:	4628      	mov	r0, r5
 801eb6e:	f000 f917 	bl	801eda0 <_fflush_r>
 801eb72:	b988      	cbnz	r0, 801eb98 <__swbuf_r+0x90>
 801eb74:	4638      	mov	r0, r7
 801eb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb78:	4b0a      	ldr	r3, [pc, #40]	; (801eba4 <__swbuf_r+0x9c>)
 801eb7a:	429c      	cmp	r4, r3
 801eb7c:	d101      	bne.n	801eb82 <__swbuf_r+0x7a>
 801eb7e:	68ac      	ldr	r4, [r5, #8]
 801eb80:	e7cf      	b.n	801eb22 <__swbuf_r+0x1a>
 801eb82:	4b09      	ldr	r3, [pc, #36]	; (801eba8 <__swbuf_r+0xa0>)
 801eb84:	429c      	cmp	r4, r3
 801eb86:	bf08      	it	eq
 801eb88:	68ec      	ldreq	r4, [r5, #12]
 801eb8a:	e7ca      	b.n	801eb22 <__swbuf_r+0x1a>
 801eb8c:	4621      	mov	r1, r4
 801eb8e:	4628      	mov	r0, r5
 801eb90:	f000 f80c 	bl	801ebac <__swsetup_r>
 801eb94:	2800      	cmp	r0, #0
 801eb96:	d0cb      	beq.n	801eb30 <__swbuf_r+0x28>
 801eb98:	f04f 37ff 	mov.w	r7, #4294967295
 801eb9c:	e7ea      	b.n	801eb74 <__swbuf_r+0x6c>
 801eb9e:	bf00      	nop
 801eba0:	080748bc 	.word	0x080748bc
 801eba4:	080748dc 	.word	0x080748dc
 801eba8:	0807489c 	.word	0x0807489c

0801ebac <__swsetup_r>:
 801ebac:	4b32      	ldr	r3, [pc, #200]	; (801ec78 <__swsetup_r+0xcc>)
 801ebae:	b570      	push	{r4, r5, r6, lr}
 801ebb0:	681d      	ldr	r5, [r3, #0]
 801ebb2:	4606      	mov	r6, r0
 801ebb4:	460c      	mov	r4, r1
 801ebb6:	b125      	cbz	r5, 801ebc2 <__swsetup_r+0x16>
 801ebb8:	69ab      	ldr	r3, [r5, #24]
 801ebba:	b913      	cbnz	r3, 801ebc2 <__swsetup_r+0x16>
 801ebbc:	4628      	mov	r0, r5
 801ebbe:	f000 f983 	bl	801eec8 <__sinit>
 801ebc2:	4b2e      	ldr	r3, [pc, #184]	; (801ec7c <__swsetup_r+0xd0>)
 801ebc4:	429c      	cmp	r4, r3
 801ebc6:	d10f      	bne.n	801ebe8 <__swsetup_r+0x3c>
 801ebc8:	686c      	ldr	r4, [r5, #4]
 801ebca:	89a3      	ldrh	r3, [r4, #12]
 801ebcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ebd0:	0719      	lsls	r1, r3, #28
 801ebd2:	d42c      	bmi.n	801ec2e <__swsetup_r+0x82>
 801ebd4:	06dd      	lsls	r5, r3, #27
 801ebd6:	d411      	bmi.n	801ebfc <__swsetup_r+0x50>
 801ebd8:	2309      	movs	r3, #9
 801ebda:	6033      	str	r3, [r6, #0]
 801ebdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ebe0:	f04f 30ff 	mov.w	r0, #4294967295
 801ebe4:	81a3      	strh	r3, [r4, #12]
 801ebe6:	e03e      	b.n	801ec66 <__swsetup_r+0xba>
 801ebe8:	4b25      	ldr	r3, [pc, #148]	; (801ec80 <__swsetup_r+0xd4>)
 801ebea:	429c      	cmp	r4, r3
 801ebec:	d101      	bne.n	801ebf2 <__swsetup_r+0x46>
 801ebee:	68ac      	ldr	r4, [r5, #8]
 801ebf0:	e7eb      	b.n	801ebca <__swsetup_r+0x1e>
 801ebf2:	4b24      	ldr	r3, [pc, #144]	; (801ec84 <__swsetup_r+0xd8>)
 801ebf4:	429c      	cmp	r4, r3
 801ebf6:	bf08      	it	eq
 801ebf8:	68ec      	ldreq	r4, [r5, #12]
 801ebfa:	e7e6      	b.n	801ebca <__swsetup_r+0x1e>
 801ebfc:	0758      	lsls	r0, r3, #29
 801ebfe:	d512      	bpl.n	801ec26 <__swsetup_r+0x7a>
 801ec00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec02:	b141      	cbz	r1, 801ec16 <__swsetup_r+0x6a>
 801ec04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ec08:	4299      	cmp	r1, r3
 801ec0a:	d002      	beq.n	801ec12 <__swsetup_r+0x66>
 801ec0c:	4630      	mov	r0, r6
 801ec0e:	f7fb feaf 	bl	801a970 <_free_r>
 801ec12:	2300      	movs	r3, #0
 801ec14:	6363      	str	r3, [r4, #52]	; 0x34
 801ec16:	89a3      	ldrh	r3, [r4, #12]
 801ec18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ec1c:	81a3      	strh	r3, [r4, #12]
 801ec1e:	2300      	movs	r3, #0
 801ec20:	6063      	str	r3, [r4, #4]
 801ec22:	6923      	ldr	r3, [r4, #16]
 801ec24:	6023      	str	r3, [r4, #0]
 801ec26:	89a3      	ldrh	r3, [r4, #12]
 801ec28:	f043 0308 	orr.w	r3, r3, #8
 801ec2c:	81a3      	strh	r3, [r4, #12]
 801ec2e:	6923      	ldr	r3, [r4, #16]
 801ec30:	b94b      	cbnz	r3, 801ec46 <__swsetup_r+0x9a>
 801ec32:	89a3      	ldrh	r3, [r4, #12]
 801ec34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ec38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ec3c:	d003      	beq.n	801ec46 <__swsetup_r+0x9a>
 801ec3e:	4621      	mov	r1, r4
 801ec40:	4630      	mov	r0, r6
 801ec42:	f000 fa03 	bl	801f04c <__smakebuf_r>
 801ec46:	89a0      	ldrh	r0, [r4, #12]
 801ec48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ec4c:	f010 0301 	ands.w	r3, r0, #1
 801ec50:	d00a      	beq.n	801ec68 <__swsetup_r+0xbc>
 801ec52:	2300      	movs	r3, #0
 801ec54:	60a3      	str	r3, [r4, #8]
 801ec56:	6963      	ldr	r3, [r4, #20]
 801ec58:	425b      	negs	r3, r3
 801ec5a:	61a3      	str	r3, [r4, #24]
 801ec5c:	6923      	ldr	r3, [r4, #16]
 801ec5e:	b943      	cbnz	r3, 801ec72 <__swsetup_r+0xc6>
 801ec60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ec64:	d1ba      	bne.n	801ebdc <__swsetup_r+0x30>
 801ec66:	bd70      	pop	{r4, r5, r6, pc}
 801ec68:	0781      	lsls	r1, r0, #30
 801ec6a:	bf58      	it	pl
 801ec6c:	6963      	ldrpl	r3, [r4, #20]
 801ec6e:	60a3      	str	r3, [r4, #8]
 801ec70:	e7f4      	b.n	801ec5c <__swsetup_r+0xb0>
 801ec72:	2000      	movs	r0, #0
 801ec74:	e7f7      	b.n	801ec66 <__swsetup_r+0xba>
 801ec76:	bf00      	nop
 801ec78:	20000910 	.word	0x20000910
 801ec7c:	080748bc 	.word	0x080748bc
 801ec80:	080748dc 	.word	0x080748dc
 801ec84:	0807489c 	.word	0x0807489c

0801ec88 <abort>:
 801ec88:	2006      	movs	r0, #6
 801ec8a:	b508      	push	{r3, lr}
 801ec8c:	f000 fa46 	bl	801f11c <raise>
 801ec90:	2001      	movs	r0, #1
 801ec92:	f7e4 ff77 	bl	8003b84 <_exit>
	...

0801ec98 <__sflush_r>:
 801ec98:	898a      	ldrh	r2, [r1, #12]
 801ec9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec9e:	4605      	mov	r5, r0
 801eca0:	0710      	lsls	r0, r2, #28
 801eca2:	460c      	mov	r4, r1
 801eca4:	d458      	bmi.n	801ed58 <__sflush_r+0xc0>
 801eca6:	684b      	ldr	r3, [r1, #4]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	dc05      	bgt.n	801ecb8 <__sflush_r+0x20>
 801ecac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	dc02      	bgt.n	801ecb8 <__sflush_r+0x20>
 801ecb2:	2000      	movs	r0, #0
 801ecb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ecba:	2e00      	cmp	r6, #0
 801ecbc:	d0f9      	beq.n	801ecb2 <__sflush_r+0x1a>
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ecc4:	682f      	ldr	r7, [r5, #0]
 801ecc6:	602b      	str	r3, [r5, #0]
 801ecc8:	d032      	beq.n	801ed30 <__sflush_r+0x98>
 801ecca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eccc:	89a3      	ldrh	r3, [r4, #12]
 801ecce:	075a      	lsls	r2, r3, #29
 801ecd0:	d505      	bpl.n	801ecde <__sflush_r+0x46>
 801ecd2:	6863      	ldr	r3, [r4, #4]
 801ecd4:	1ac0      	subs	r0, r0, r3
 801ecd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ecd8:	b10b      	cbz	r3, 801ecde <__sflush_r+0x46>
 801ecda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ecdc:	1ac0      	subs	r0, r0, r3
 801ecde:	2300      	movs	r3, #0
 801ece0:	4602      	mov	r2, r0
 801ece2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ece4:	4628      	mov	r0, r5
 801ece6:	6a21      	ldr	r1, [r4, #32]
 801ece8:	47b0      	blx	r6
 801ecea:	1c43      	adds	r3, r0, #1
 801ecec:	89a3      	ldrh	r3, [r4, #12]
 801ecee:	d106      	bne.n	801ecfe <__sflush_r+0x66>
 801ecf0:	6829      	ldr	r1, [r5, #0]
 801ecf2:	291d      	cmp	r1, #29
 801ecf4:	d82c      	bhi.n	801ed50 <__sflush_r+0xb8>
 801ecf6:	4a29      	ldr	r2, [pc, #164]	; (801ed9c <__sflush_r+0x104>)
 801ecf8:	40ca      	lsrs	r2, r1
 801ecfa:	07d6      	lsls	r6, r2, #31
 801ecfc:	d528      	bpl.n	801ed50 <__sflush_r+0xb8>
 801ecfe:	2200      	movs	r2, #0
 801ed00:	04d9      	lsls	r1, r3, #19
 801ed02:	6062      	str	r2, [r4, #4]
 801ed04:	6922      	ldr	r2, [r4, #16]
 801ed06:	6022      	str	r2, [r4, #0]
 801ed08:	d504      	bpl.n	801ed14 <__sflush_r+0x7c>
 801ed0a:	1c42      	adds	r2, r0, #1
 801ed0c:	d101      	bne.n	801ed12 <__sflush_r+0x7a>
 801ed0e:	682b      	ldr	r3, [r5, #0]
 801ed10:	b903      	cbnz	r3, 801ed14 <__sflush_r+0x7c>
 801ed12:	6560      	str	r0, [r4, #84]	; 0x54
 801ed14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed16:	602f      	str	r7, [r5, #0]
 801ed18:	2900      	cmp	r1, #0
 801ed1a:	d0ca      	beq.n	801ecb2 <__sflush_r+0x1a>
 801ed1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed20:	4299      	cmp	r1, r3
 801ed22:	d002      	beq.n	801ed2a <__sflush_r+0x92>
 801ed24:	4628      	mov	r0, r5
 801ed26:	f7fb fe23 	bl	801a970 <_free_r>
 801ed2a:	2000      	movs	r0, #0
 801ed2c:	6360      	str	r0, [r4, #52]	; 0x34
 801ed2e:	e7c1      	b.n	801ecb4 <__sflush_r+0x1c>
 801ed30:	6a21      	ldr	r1, [r4, #32]
 801ed32:	2301      	movs	r3, #1
 801ed34:	4628      	mov	r0, r5
 801ed36:	47b0      	blx	r6
 801ed38:	1c41      	adds	r1, r0, #1
 801ed3a:	d1c7      	bne.n	801eccc <__sflush_r+0x34>
 801ed3c:	682b      	ldr	r3, [r5, #0]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d0c4      	beq.n	801eccc <__sflush_r+0x34>
 801ed42:	2b1d      	cmp	r3, #29
 801ed44:	d001      	beq.n	801ed4a <__sflush_r+0xb2>
 801ed46:	2b16      	cmp	r3, #22
 801ed48:	d101      	bne.n	801ed4e <__sflush_r+0xb6>
 801ed4a:	602f      	str	r7, [r5, #0]
 801ed4c:	e7b1      	b.n	801ecb2 <__sflush_r+0x1a>
 801ed4e:	89a3      	ldrh	r3, [r4, #12]
 801ed50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed54:	81a3      	strh	r3, [r4, #12]
 801ed56:	e7ad      	b.n	801ecb4 <__sflush_r+0x1c>
 801ed58:	690f      	ldr	r7, [r1, #16]
 801ed5a:	2f00      	cmp	r7, #0
 801ed5c:	d0a9      	beq.n	801ecb2 <__sflush_r+0x1a>
 801ed5e:	0793      	lsls	r3, r2, #30
 801ed60:	680e      	ldr	r6, [r1, #0]
 801ed62:	600f      	str	r7, [r1, #0]
 801ed64:	bf0c      	ite	eq
 801ed66:	694b      	ldreq	r3, [r1, #20]
 801ed68:	2300      	movne	r3, #0
 801ed6a:	eba6 0807 	sub.w	r8, r6, r7
 801ed6e:	608b      	str	r3, [r1, #8]
 801ed70:	f1b8 0f00 	cmp.w	r8, #0
 801ed74:	dd9d      	ble.n	801ecb2 <__sflush_r+0x1a>
 801ed76:	4643      	mov	r3, r8
 801ed78:	463a      	mov	r2, r7
 801ed7a:	6a21      	ldr	r1, [r4, #32]
 801ed7c:	4628      	mov	r0, r5
 801ed7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ed80:	47b0      	blx	r6
 801ed82:	2800      	cmp	r0, #0
 801ed84:	dc06      	bgt.n	801ed94 <__sflush_r+0xfc>
 801ed86:	89a3      	ldrh	r3, [r4, #12]
 801ed88:	f04f 30ff 	mov.w	r0, #4294967295
 801ed8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed90:	81a3      	strh	r3, [r4, #12]
 801ed92:	e78f      	b.n	801ecb4 <__sflush_r+0x1c>
 801ed94:	4407      	add	r7, r0
 801ed96:	eba8 0800 	sub.w	r8, r8, r0
 801ed9a:	e7e9      	b.n	801ed70 <__sflush_r+0xd8>
 801ed9c:	20400001 	.word	0x20400001

0801eda0 <_fflush_r>:
 801eda0:	b538      	push	{r3, r4, r5, lr}
 801eda2:	690b      	ldr	r3, [r1, #16]
 801eda4:	4605      	mov	r5, r0
 801eda6:	460c      	mov	r4, r1
 801eda8:	b913      	cbnz	r3, 801edb0 <_fflush_r+0x10>
 801edaa:	2500      	movs	r5, #0
 801edac:	4628      	mov	r0, r5
 801edae:	bd38      	pop	{r3, r4, r5, pc}
 801edb0:	b118      	cbz	r0, 801edba <_fflush_r+0x1a>
 801edb2:	6983      	ldr	r3, [r0, #24]
 801edb4:	b90b      	cbnz	r3, 801edba <_fflush_r+0x1a>
 801edb6:	f000 f887 	bl	801eec8 <__sinit>
 801edba:	4b14      	ldr	r3, [pc, #80]	; (801ee0c <_fflush_r+0x6c>)
 801edbc:	429c      	cmp	r4, r3
 801edbe:	d11b      	bne.n	801edf8 <_fflush_r+0x58>
 801edc0:	686c      	ldr	r4, [r5, #4]
 801edc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d0ef      	beq.n	801edaa <_fflush_r+0xa>
 801edca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801edcc:	07d0      	lsls	r0, r2, #31
 801edce:	d404      	bmi.n	801edda <_fflush_r+0x3a>
 801edd0:	0599      	lsls	r1, r3, #22
 801edd2:	d402      	bmi.n	801edda <_fflush_r+0x3a>
 801edd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801edd6:	f7ff fd1a 	bl	801e80e <__retarget_lock_acquire_recursive>
 801edda:	4628      	mov	r0, r5
 801eddc:	4621      	mov	r1, r4
 801edde:	f7ff ff5b 	bl	801ec98 <__sflush_r>
 801ede2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ede4:	4605      	mov	r5, r0
 801ede6:	07da      	lsls	r2, r3, #31
 801ede8:	d4e0      	bmi.n	801edac <_fflush_r+0xc>
 801edea:	89a3      	ldrh	r3, [r4, #12]
 801edec:	059b      	lsls	r3, r3, #22
 801edee:	d4dd      	bmi.n	801edac <_fflush_r+0xc>
 801edf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801edf2:	f7ff fd0d 	bl	801e810 <__retarget_lock_release_recursive>
 801edf6:	e7d9      	b.n	801edac <_fflush_r+0xc>
 801edf8:	4b05      	ldr	r3, [pc, #20]	; (801ee10 <_fflush_r+0x70>)
 801edfa:	429c      	cmp	r4, r3
 801edfc:	d101      	bne.n	801ee02 <_fflush_r+0x62>
 801edfe:	68ac      	ldr	r4, [r5, #8]
 801ee00:	e7df      	b.n	801edc2 <_fflush_r+0x22>
 801ee02:	4b04      	ldr	r3, [pc, #16]	; (801ee14 <_fflush_r+0x74>)
 801ee04:	429c      	cmp	r4, r3
 801ee06:	bf08      	it	eq
 801ee08:	68ec      	ldreq	r4, [r5, #12]
 801ee0a:	e7da      	b.n	801edc2 <_fflush_r+0x22>
 801ee0c:	080748bc 	.word	0x080748bc
 801ee10:	080748dc 	.word	0x080748dc
 801ee14:	0807489c 	.word	0x0807489c

0801ee18 <std>:
 801ee18:	2300      	movs	r3, #0
 801ee1a:	b510      	push	{r4, lr}
 801ee1c:	4604      	mov	r4, r0
 801ee1e:	6083      	str	r3, [r0, #8]
 801ee20:	8181      	strh	r1, [r0, #12]
 801ee22:	4619      	mov	r1, r3
 801ee24:	6643      	str	r3, [r0, #100]	; 0x64
 801ee26:	81c2      	strh	r2, [r0, #14]
 801ee28:	2208      	movs	r2, #8
 801ee2a:	6183      	str	r3, [r0, #24]
 801ee2c:	e9c0 3300 	strd	r3, r3, [r0]
 801ee30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ee34:	305c      	adds	r0, #92	; 0x5c
 801ee36:	f7fb fd92 	bl	801a95e <memset>
 801ee3a:	4b05      	ldr	r3, [pc, #20]	; (801ee50 <std+0x38>)
 801ee3c:	6224      	str	r4, [r4, #32]
 801ee3e:	6263      	str	r3, [r4, #36]	; 0x24
 801ee40:	4b04      	ldr	r3, [pc, #16]	; (801ee54 <std+0x3c>)
 801ee42:	62a3      	str	r3, [r4, #40]	; 0x28
 801ee44:	4b04      	ldr	r3, [pc, #16]	; (801ee58 <std+0x40>)
 801ee46:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ee48:	4b04      	ldr	r3, [pc, #16]	; (801ee5c <std+0x44>)
 801ee4a:	6323      	str	r3, [r4, #48]	; 0x30
 801ee4c:	bd10      	pop	{r4, pc}
 801ee4e:	bf00      	nop
 801ee50:	0801f155 	.word	0x0801f155
 801ee54:	0801f177 	.word	0x0801f177
 801ee58:	0801f1af 	.word	0x0801f1af
 801ee5c:	0801f1d3 	.word	0x0801f1d3

0801ee60 <_cleanup_r>:
 801ee60:	4901      	ldr	r1, [pc, #4]	; (801ee68 <_cleanup_r+0x8>)
 801ee62:	f000 b8af 	b.w	801efc4 <_fwalk_reent>
 801ee66:	bf00      	nop
 801ee68:	0801eda1 	.word	0x0801eda1

0801ee6c <__sfmoreglue>:
 801ee6c:	b570      	push	{r4, r5, r6, lr}
 801ee6e:	2268      	movs	r2, #104	; 0x68
 801ee70:	1e4d      	subs	r5, r1, #1
 801ee72:	460e      	mov	r6, r1
 801ee74:	4355      	muls	r5, r2
 801ee76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ee7a:	f7fb fde5 	bl	801aa48 <_malloc_r>
 801ee7e:	4604      	mov	r4, r0
 801ee80:	b140      	cbz	r0, 801ee94 <__sfmoreglue+0x28>
 801ee82:	2100      	movs	r1, #0
 801ee84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ee88:	e9c0 1600 	strd	r1, r6, [r0]
 801ee8c:	300c      	adds	r0, #12
 801ee8e:	60a0      	str	r0, [r4, #8]
 801ee90:	f7fb fd65 	bl	801a95e <memset>
 801ee94:	4620      	mov	r0, r4
 801ee96:	bd70      	pop	{r4, r5, r6, pc}

0801ee98 <__sfp_lock_acquire>:
 801ee98:	4801      	ldr	r0, [pc, #4]	; (801eea0 <__sfp_lock_acquire+0x8>)
 801ee9a:	f7ff bcb8 	b.w	801e80e <__retarget_lock_acquire_recursive>
 801ee9e:	bf00      	nop
 801eea0:	200044f5 	.word	0x200044f5

0801eea4 <__sfp_lock_release>:
 801eea4:	4801      	ldr	r0, [pc, #4]	; (801eeac <__sfp_lock_release+0x8>)
 801eea6:	f7ff bcb3 	b.w	801e810 <__retarget_lock_release_recursive>
 801eeaa:	bf00      	nop
 801eeac:	200044f5 	.word	0x200044f5

0801eeb0 <__sinit_lock_acquire>:
 801eeb0:	4801      	ldr	r0, [pc, #4]	; (801eeb8 <__sinit_lock_acquire+0x8>)
 801eeb2:	f7ff bcac 	b.w	801e80e <__retarget_lock_acquire_recursive>
 801eeb6:	bf00      	nop
 801eeb8:	200044f6 	.word	0x200044f6

0801eebc <__sinit_lock_release>:
 801eebc:	4801      	ldr	r0, [pc, #4]	; (801eec4 <__sinit_lock_release+0x8>)
 801eebe:	f7ff bca7 	b.w	801e810 <__retarget_lock_release_recursive>
 801eec2:	bf00      	nop
 801eec4:	200044f6 	.word	0x200044f6

0801eec8 <__sinit>:
 801eec8:	b510      	push	{r4, lr}
 801eeca:	4604      	mov	r4, r0
 801eecc:	f7ff fff0 	bl	801eeb0 <__sinit_lock_acquire>
 801eed0:	69a3      	ldr	r3, [r4, #24]
 801eed2:	b11b      	cbz	r3, 801eedc <__sinit+0x14>
 801eed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eed8:	f7ff bff0 	b.w	801eebc <__sinit_lock_release>
 801eedc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801eee0:	6523      	str	r3, [r4, #80]	; 0x50
 801eee2:	4620      	mov	r0, r4
 801eee4:	4b12      	ldr	r3, [pc, #72]	; (801ef30 <__sinit+0x68>)
 801eee6:	4a13      	ldr	r2, [pc, #76]	; (801ef34 <__sinit+0x6c>)
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	62a2      	str	r2, [r4, #40]	; 0x28
 801eeec:	42a3      	cmp	r3, r4
 801eeee:	bf04      	itt	eq
 801eef0:	2301      	moveq	r3, #1
 801eef2:	61a3      	streq	r3, [r4, #24]
 801eef4:	f000 f820 	bl	801ef38 <__sfp>
 801eef8:	6060      	str	r0, [r4, #4]
 801eefa:	4620      	mov	r0, r4
 801eefc:	f000 f81c 	bl	801ef38 <__sfp>
 801ef00:	60a0      	str	r0, [r4, #8]
 801ef02:	4620      	mov	r0, r4
 801ef04:	f000 f818 	bl	801ef38 <__sfp>
 801ef08:	2200      	movs	r2, #0
 801ef0a:	2104      	movs	r1, #4
 801ef0c:	60e0      	str	r0, [r4, #12]
 801ef0e:	6860      	ldr	r0, [r4, #4]
 801ef10:	f7ff ff82 	bl	801ee18 <std>
 801ef14:	2201      	movs	r2, #1
 801ef16:	2109      	movs	r1, #9
 801ef18:	68a0      	ldr	r0, [r4, #8]
 801ef1a:	f7ff ff7d 	bl	801ee18 <std>
 801ef1e:	2202      	movs	r2, #2
 801ef20:	2112      	movs	r1, #18
 801ef22:	68e0      	ldr	r0, [r4, #12]
 801ef24:	f7ff ff78 	bl	801ee18 <std>
 801ef28:	2301      	movs	r3, #1
 801ef2a:	61a3      	str	r3, [r4, #24]
 801ef2c:	e7d2      	b.n	801eed4 <__sinit+0xc>
 801ef2e:	bf00      	nop
 801ef30:	08074454 	.word	0x08074454
 801ef34:	0801ee61 	.word	0x0801ee61

0801ef38 <__sfp>:
 801ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef3a:	4607      	mov	r7, r0
 801ef3c:	f7ff ffac 	bl	801ee98 <__sfp_lock_acquire>
 801ef40:	4b1e      	ldr	r3, [pc, #120]	; (801efbc <__sfp+0x84>)
 801ef42:	681e      	ldr	r6, [r3, #0]
 801ef44:	69b3      	ldr	r3, [r6, #24]
 801ef46:	b913      	cbnz	r3, 801ef4e <__sfp+0x16>
 801ef48:	4630      	mov	r0, r6
 801ef4a:	f7ff ffbd 	bl	801eec8 <__sinit>
 801ef4e:	3648      	adds	r6, #72	; 0x48
 801ef50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ef54:	3b01      	subs	r3, #1
 801ef56:	d503      	bpl.n	801ef60 <__sfp+0x28>
 801ef58:	6833      	ldr	r3, [r6, #0]
 801ef5a:	b30b      	cbz	r3, 801efa0 <__sfp+0x68>
 801ef5c:	6836      	ldr	r6, [r6, #0]
 801ef5e:	e7f7      	b.n	801ef50 <__sfp+0x18>
 801ef60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ef64:	b9d5      	cbnz	r5, 801ef9c <__sfp+0x64>
 801ef66:	4b16      	ldr	r3, [pc, #88]	; (801efc0 <__sfp+0x88>)
 801ef68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ef6c:	6665      	str	r5, [r4, #100]	; 0x64
 801ef6e:	60e3      	str	r3, [r4, #12]
 801ef70:	f7ff fc4c 	bl	801e80c <__retarget_lock_init_recursive>
 801ef74:	f7ff ff96 	bl	801eea4 <__sfp_lock_release>
 801ef78:	2208      	movs	r2, #8
 801ef7a:	4629      	mov	r1, r5
 801ef7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ef80:	6025      	str	r5, [r4, #0]
 801ef82:	61a5      	str	r5, [r4, #24]
 801ef84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ef88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ef8c:	f7fb fce7 	bl	801a95e <memset>
 801ef90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ef94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ef98:	4620      	mov	r0, r4
 801ef9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef9c:	3468      	adds	r4, #104	; 0x68
 801ef9e:	e7d9      	b.n	801ef54 <__sfp+0x1c>
 801efa0:	2104      	movs	r1, #4
 801efa2:	4638      	mov	r0, r7
 801efa4:	f7ff ff62 	bl	801ee6c <__sfmoreglue>
 801efa8:	4604      	mov	r4, r0
 801efaa:	6030      	str	r0, [r6, #0]
 801efac:	2800      	cmp	r0, #0
 801efae:	d1d5      	bne.n	801ef5c <__sfp+0x24>
 801efb0:	f7ff ff78 	bl	801eea4 <__sfp_lock_release>
 801efb4:	230c      	movs	r3, #12
 801efb6:	603b      	str	r3, [r7, #0]
 801efb8:	e7ee      	b.n	801ef98 <__sfp+0x60>
 801efba:	bf00      	nop
 801efbc:	08074454 	.word	0x08074454
 801efc0:	ffff0001 	.word	0xffff0001

0801efc4 <_fwalk_reent>:
 801efc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801efc8:	4606      	mov	r6, r0
 801efca:	4688      	mov	r8, r1
 801efcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801efd0:	2700      	movs	r7, #0
 801efd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801efd6:	f1b9 0901 	subs.w	r9, r9, #1
 801efda:	d505      	bpl.n	801efe8 <_fwalk_reent+0x24>
 801efdc:	6824      	ldr	r4, [r4, #0]
 801efde:	2c00      	cmp	r4, #0
 801efe0:	d1f7      	bne.n	801efd2 <_fwalk_reent+0xe>
 801efe2:	4638      	mov	r0, r7
 801efe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801efe8:	89ab      	ldrh	r3, [r5, #12]
 801efea:	2b01      	cmp	r3, #1
 801efec:	d907      	bls.n	801effe <_fwalk_reent+0x3a>
 801efee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801eff2:	3301      	adds	r3, #1
 801eff4:	d003      	beq.n	801effe <_fwalk_reent+0x3a>
 801eff6:	4629      	mov	r1, r5
 801eff8:	4630      	mov	r0, r6
 801effa:	47c0      	blx	r8
 801effc:	4307      	orrs	r7, r0
 801effe:	3568      	adds	r5, #104	; 0x68
 801f000:	e7e9      	b.n	801efd6 <_fwalk_reent+0x12>

0801f002 <__swhatbuf_r>:
 801f002:	b570      	push	{r4, r5, r6, lr}
 801f004:	460e      	mov	r6, r1
 801f006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f00a:	b096      	sub	sp, #88	; 0x58
 801f00c:	4614      	mov	r4, r2
 801f00e:	2900      	cmp	r1, #0
 801f010:	461d      	mov	r5, r3
 801f012:	da08      	bge.n	801f026 <__swhatbuf_r+0x24>
 801f014:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f018:	2200      	movs	r2, #0
 801f01a:	602a      	str	r2, [r5, #0]
 801f01c:	061a      	lsls	r2, r3, #24
 801f01e:	d410      	bmi.n	801f042 <__swhatbuf_r+0x40>
 801f020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f024:	e00e      	b.n	801f044 <__swhatbuf_r+0x42>
 801f026:	466a      	mov	r2, sp
 801f028:	f000 f8fa 	bl	801f220 <_fstat_r>
 801f02c:	2800      	cmp	r0, #0
 801f02e:	dbf1      	blt.n	801f014 <__swhatbuf_r+0x12>
 801f030:	9a01      	ldr	r2, [sp, #4]
 801f032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f03a:	425a      	negs	r2, r3
 801f03c:	415a      	adcs	r2, r3
 801f03e:	602a      	str	r2, [r5, #0]
 801f040:	e7ee      	b.n	801f020 <__swhatbuf_r+0x1e>
 801f042:	2340      	movs	r3, #64	; 0x40
 801f044:	2000      	movs	r0, #0
 801f046:	6023      	str	r3, [r4, #0]
 801f048:	b016      	add	sp, #88	; 0x58
 801f04a:	bd70      	pop	{r4, r5, r6, pc}

0801f04c <__smakebuf_r>:
 801f04c:	898b      	ldrh	r3, [r1, #12]
 801f04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f050:	079d      	lsls	r5, r3, #30
 801f052:	4606      	mov	r6, r0
 801f054:	460c      	mov	r4, r1
 801f056:	d507      	bpl.n	801f068 <__smakebuf_r+0x1c>
 801f058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f05c:	6023      	str	r3, [r4, #0]
 801f05e:	6123      	str	r3, [r4, #16]
 801f060:	2301      	movs	r3, #1
 801f062:	6163      	str	r3, [r4, #20]
 801f064:	b002      	add	sp, #8
 801f066:	bd70      	pop	{r4, r5, r6, pc}
 801f068:	ab01      	add	r3, sp, #4
 801f06a:	466a      	mov	r2, sp
 801f06c:	f7ff ffc9 	bl	801f002 <__swhatbuf_r>
 801f070:	9900      	ldr	r1, [sp, #0]
 801f072:	4605      	mov	r5, r0
 801f074:	4630      	mov	r0, r6
 801f076:	f7fb fce7 	bl	801aa48 <_malloc_r>
 801f07a:	b948      	cbnz	r0, 801f090 <__smakebuf_r+0x44>
 801f07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f080:	059a      	lsls	r2, r3, #22
 801f082:	d4ef      	bmi.n	801f064 <__smakebuf_r+0x18>
 801f084:	f023 0303 	bic.w	r3, r3, #3
 801f088:	f043 0302 	orr.w	r3, r3, #2
 801f08c:	81a3      	strh	r3, [r4, #12]
 801f08e:	e7e3      	b.n	801f058 <__smakebuf_r+0xc>
 801f090:	4b0d      	ldr	r3, [pc, #52]	; (801f0c8 <__smakebuf_r+0x7c>)
 801f092:	62b3      	str	r3, [r6, #40]	; 0x28
 801f094:	89a3      	ldrh	r3, [r4, #12]
 801f096:	6020      	str	r0, [r4, #0]
 801f098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f09c:	6120      	str	r0, [r4, #16]
 801f09e:	81a3      	strh	r3, [r4, #12]
 801f0a0:	9b00      	ldr	r3, [sp, #0]
 801f0a2:	6163      	str	r3, [r4, #20]
 801f0a4:	9b01      	ldr	r3, [sp, #4]
 801f0a6:	b15b      	cbz	r3, 801f0c0 <__smakebuf_r+0x74>
 801f0a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f0ac:	4630      	mov	r0, r6
 801f0ae:	f000 f8c9 	bl	801f244 <_isatty_r>
 801f0b2:	b128      	cbz	r0, 801f0c0 <__smakebuf_r+0x74>
 801f0b4:	89a3      	ldrh	r3, [r4, #12]
 801f0b6:	f023 0303 	bic.w	r3, r3, #3
 801f0ba:	f043 0301 	orr.w	r3, r3, #1
 801f0be:	81a3      	strh	r3, [r4, #12]
 801f0c0:	89a0      	ldrh	r0, [r4, #12]
 801f0c2:	4305      	orrs	r5, r0
 801f0c4:	81a5      	strh	r5, [r4, #12]
 801f0c6:	e7cd      	b.n	801f064 <__smakebuf_r+0x18>
 801f0c8:	0801ee61 	.word	0x0801ee61

0801f0cc <_raise_r>:
 801f0cc:	291f      	cmp	r1, #31
 801f0ce:	b538      	push	{r3, r4, r5, lr}
 801f0d0:	4604      	mov	r4, r0
 801f0d2:	460d      	mov	r5, r1
 801f0d4:	d904      	bls.n	801f0e0 <_raise_r+0x14>
 801f0d6:	2316      	movs	r3, #22
 801f0d8:	6003      	str	r3, [r0, #0]
 801f0da:	f04f 30ff 	mov.w	r0, #4294967295
 801f0de:	bd38      	pop	{r3, r4, r5, pc}
 801f0e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f0e2:	b112      	cbz	r2, 801f0ea <_raise_r+0x1e>
 801f0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f0e8:	b94b      	cbnz	r3, 801f0fe <_raise_r+0x32>
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f000 f830 	bl	801f150 <_getpid_r>
 801f0f0:	462a      	mov	r2, r5
 801f0f2:	4601      	mov	r1, r0
 801f0f4:	4620      	mov	r0, r4
 801f0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f0fa:	f000 b817 	b.w	801f12c <_kill_r>
 801f0fe:	2b01      	cmp	r3, #1
 801f100:	d00a      	beq.n	801f118 <_raise_r+0x4c>
 801f102:	1c59      	adds	r1, r3, #1
 801f104:	d103      	bne.n	801f10e <_raise_r+0x42>
 801f106:	2316      	movs	r3, #22
 801f108:	6003      	str	r3, [r0, #0]
 801f10a:	2001      	movs	r0, #1
 801f10c:	e7e7      	b.n	801f0de <_raise_r+0x12>
 801f10e:	2400      	movs	r4, #0
 801f110:	4628      	mov	r0, r5
 801f112:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f116:	4798      	blx	r3
 801f118:	2000      	movs	r0, #0
 801f11a:	e7e0      	b.n	801f0de <_raise_r+0x12>

0801f11c <raise>:
 801f11c:	4b02      	ldr	r3, [pc, #8]	; (801f128 <raise+0xc>)
 801f11e:	4601      	mov	r1, r0
 801f120:	6818      	ldr	r0, [r3, #0]
 801f122:	f7ff bfd3 	b.w	801f0cc <_raise_r>
 801f126:	bf00      	nop
 801f128:	20000910 	.word	0x20000910

0801f12c <_kill_r>:
 801f12c:	b538      	push	{r3, r4, r5, lr}
 801f12e:	2300      	movs	r3, #0
 801f130:	4d06      	ldr	r5, [pc, #24]	; (801f14c <_kill_r+0x20>)
 801f132:	4604      	mov	r4, r0
 801f134:	4608      	mov	r0, r1
 801f136:	4611      	mov	r1, r2
 801f138:	602b      	str	r3, [r5, #0]
 801f13a:	f7e4 fd13 	bl	8003b64 <_kill>
 801f13e:	1c43      	adds	r3, r0, #1
 801f140:	d102      	bne.n	801f148 <_kill_r+0x1c>
 801f142:	682b      	ldr	r3, [r5, #0]
 801f144:	b103      	cbz	r3, 801f148 <_kill_r+0x1c>
 801f146:	6023      	str	r3, [r4, #0]
 801f148:	bd38      	pop	{r3, r4, r5, pc}
 801f14a:	bf00      	nop
 801f14c:	200044f0 	.word	0x200044f0

0801f150 <_getpid_r>:
 801f150:	f7e4 bd00 	b.w	8003b54 <_getpid>

0801f154 <__sread>:
 801f154:	b510      	push	{r4, lr}
 801f156:	460c      	mov	r4, r1
 801f158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f15c:	f000 f894 	bl	801f288 <_read_r>
 801f160:	2800      	cmp	r0, #0
 801f162:	bfab      	itete	ge
 801f164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f166:	89a3      	ldrhlt	r3, [r4, #12]
 801f168:	181b      	addge	r3, r3, r0
 801f16a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f16e:	bfac      	ite	ge
 801f170:	6563      	strge	r3, [r4, #84]	; 0x54
 801f172:	81a3      	strhlt	r3, [r4, #12]
 801f174:	bd10      	pop	{r4, pc}

0801f176 <__swrite>:
 801f176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f17a:	461f      	mov	r7, r3
 801f17c:	898b      	ldrh	r3, [r1, #12]
 801f17e:	4605      	mov	r5, r0
 801f180:	460c      	mov	r4, r1
 801f182:	05db      	lsls	r3, r3, #23
 801f184:	4616      	mov	r6, r2
 801f186:	d505      	bpl.n	801f194 <__swrite+0x1e>
 801f188:	2302      	movs	r3, #2
 801f18a:	2200      	movs	r2, #0
 801f18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f190:	f000 f868 	bl	801f264 <_lseek_r>
 801f194:	89a3      	ldrh	r3, [r4, #12]
 801f196:	4632      	mov	r2, r6
 801f198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f19c:	4628      	mov	r0, r5
 801f19e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f1a2:	81a3      	strh	r3, [r4, #12]
 801f1a4:	463b      	mov	r3, r7
 801f1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f1aa:	f000 b817 	b.w	801f1dc <_write_r>

0801f1ae <__sseek>:
 801f1ae:	b510      	push	{r4, lr}
 801f1b0:	460c      	mov	r4, r1
 801f1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1b6:	f000 f855 	bl	801f264 <_lseek_r>
 801f1ba:	1c43      	adds	r3, r0, #1
 801f1bc:	89a3      	ldrh	r3, [r4, #12]
 801f1be:	bf15      	itete	ne
 801f1c0:	6560      	strne	r0, [r4, #84]	; 0x54
 801f1c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f1c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f1ca:	81a3      	strheq	r3, [r4, #12]
 801f1cc:	bf18      	it	ne
 801f1ce:	81a3      	strhne	r3, [r4, #12]
 801f1d0:	bd10      	pop	{r4, pc}

0801f1d2 <__sclose>:
 801f1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1d6:	f000 b813 	b.w	801f200 <_close_r>
	...

0801f1dc <_write_r>:
 801f1dc:	b538      	push	{r3, r4, r5, lr}
 801f1de:	4604      	mov	r4, r0
 801f1e0:	4d06      	ldr	r5, [pc, #24]	; (801f1fc <_write_r+0x20>)
 801f1e2:	4608      	mov	r0, r1
 801f1e4:	4611      	mov	r1, r2
 801f1e6:	2200      	movs	r2, #0
 801f1e8:	602a      	str	r2, [r5, #0]
 801f1ea:	461a      	mov	r2, r3
 801f1ec:	f7e4 fcf1 	bl	8003bd2 <_write>
 801f1f0:	1c43      	adds	r3, r0, #1
 801f1f2:	d102      	bne.n	801f1fa <_write_r+0x1e>
 801f1f4:	682b      	ldr	r3, [r5, #0]
 801f1f6:	b103      	cbz	r3, 801f1fa <_write_r+0x1e>
 801f1f8:	6023      	str	r3, [r4, #0]
 801f1fa:	bd38      	pop	{r3, r4, r5, pc}
 801f1fc:	200044f0 	.word	0x200044f0

0801f200 <_close_r>:
 801f200:	b538      	push	{r3, r4, r5, lr}
 801f202:	2300      	movs	r3, #0
 801f204:	4d05      	ldr	r5, [pc, #20]	; (801f21c <_close_r+0x1c>)
 801f206:	4604      	mov	r4, r0
 801f208:	4608      	mov	r0, r1
 801f20a:	602b      	str	r3, [r5, #0]
 801f20c:	f7e4 fcfd 	bl	8003c0a <_close>
 801f210:	1c43      	adds	r3, r0, #1
 801f212:	d102      	bne.n	801f21a <_close_r+0x1a>
 801f214:	682b      	ldr	r3, [r5, #0]
 801f216:	b103      	cbz	r3, 801f21a <_close_r+0x1a>
 801f218:	6023      	str	r3, [r4, #0]
 801f21a:	bd38      	pop	{r3, r4, r5, pc}
 801f21c:	200044f0 	.word	0x200044f0

0801f220 <_fstat_r>:
 801f220:	b538      	push	{r3, r4, r5, lr}
 801f222:	2300      	movs	r3, #0
 801f224:	4d06      	ldr	r5, [pc, #24]	; (801f240 <_fstat_r+0x20>)
 801f226:	4604      	mov	r4, r0
 801f228:	4608      	mov	r0, r1
 801f22a:	4611      	mov	r1, r2
 801f22c:	602b      	str	r3, [r5, #0]
 801f22e:	f7e4 fcf8 	bl	8003c22 <_fstat>
 801f232:	1c43      	adds	r3, r0, #1
 801f234:	d102      	bne.n	801f23c <_fstat_r+0x1c>
 801f236:	682b      	ldr	r3, [r5, #0]
 801f238:	b103      	cbz	r3, 801f23c <_fstat_r+0x1c>
 801f23a:	6023      	str	r3, [r4, #0]
 801f23c:	bd38      	pop	{r3, r4, r5, pc}
 801f23e:	bf00      	nop
 801f240:	200044f0 	.word	0x200044f0

0801f244 <_isatty_r>:
 801f244:	b538      	push	{r3, r4, r5, lr}
 801f246:	2300      	movs	r3, #0
 801f248:	4d05      	ldr	r5, [pc, #20]	; (801f260 <_isatty_r+0x1c>)
 801f24a:	4604      	mov	r4, r0
 801f24c:	4608      	mov	r0, r1
 801f24e:	602b      	str	r3, [r5, #0]
 801f250:	f7e4 fcf7 	bl	8003c42 <_isatty>
 801f254:	1c43      	adds	r3, r0, #1
 801f256:	d102      	bne.n	801f25e <_isatty_r+0x1a>
 801f258:	682b      	ldr	r3, [r5, #0]
 801f25a:	b103      	cbz	r3, 801f25e <_isatty_r+0x1a>
 801f25c:	6023      	str	r3, [r4, #0]
 801f25e:	bd38      	pop	{r3, r4, r5, pc}
 801f260:	200044f0 	.word	0x200044f0

0801f264 <_lseek_r>:
 801f264:	b538      	push	{r3, r4, r5, lr}
 801f266:	4604      	mov	r4, r0
 801f268:	4d06      	ldr	r5, [pc, #24]	; (801f284 <_lseek_r+0x20>)
 801f26a:	4608      	mov	r0, r1
 801f26c:	4611      	mov	r1, r2
 801f26e:	2200      	movs	r2, #0
 801f270:	602a      	str	r2, [r5, #0]
 801f272:	461a      	mov	r2, r3
 801f274:	f7e4 fcf0 	bl	8003c58 <_lseek>
 801f278:	1c43      	adds	r3, r0, #1
 801f27a:	d102      	bne.n	801f282 <_lseek_r+0x1e>
 801f27c:	682b      	ldr	r3, [r5, #0]
 801f27e:	b103      	cbz	r3, 801f282 <_lseek_r+0x1e>
 801f280:	6023      	str	r3, [r4, #0]
 801f282:	bd38      	pop	{r3, r4, r5, pc}
 801f284:	200044f0 	.word	0x200044f0

0801f288 <_read_r>:
 801f288:	b538      	push	{r3, r4, r5, lr}
 801f28a:	4604      	mov	r4, r0
 801f28c:	4d06      	ldr	r5, [pc, #24]	; (801f2a8 <_read_r+0x20>)
 801f28e:	4608      	mov	r0, r1
 801f290:	4611      	mov	r1, r2
 801f292:	2200      	movs	r2, #0
 801f294:	602a      	str	r2, [r5, #0]
 801f296:	461a      	mov	r2, r3
 801f298:	f7e4 fc7e 	bl	8003b98 <_read>
 801f29c:	1c43      	adds	r3, r0, #1
 801f29e:	d102      	bne.n	801f2a6 <_read_r+0x1e>
 801f2a0:	682b      	ldr	r3, [r5, #0]
 801f2a2:	b103      	cbz	r3, 801f2a6 <_read_r+0x1e>
 801f2a4:	6023      	str	r3, [r4, #0]
 801f2a6:	bd38      	pop	{r3, r4, r5, pc}
 801f2a8:	200044f0 	.word	0x200044f0

0801f2ac <expf>:
 801f2ac:	b508      	push	{r3, lr}
 801f2ae:	ed2d 8b02 	vpush	{d8}
 801f2b2:	eef0 8a40 	vmov.f32	s17, s0
 801f2b6:	f000 f84d 	bl	801f354 <__ieee754_expf>
 801f2ba:	eeb0 8a40 	vmov.f32	s16, s0
 801f2be:	eeb0 0a68 	vmov.f32	s0, s17
 801f2c2:	f000 f93b 	bl	801f53c <finitef>
 801f2c6:	b160      	cbz	r0, 801f2e2 <expf+0x36>
 801f2c8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801f308 <expf+0x5c>
 801f2cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2d4:	dd0a      	ble.n	801f2ec <expf+0x40>
 801f2d6:	f7fb fb03 	bl	801a8e0 <__errno>
 801f2da:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801f30c <expf+0x60>
 801f2de:	2322      	movs	r3, #34	; 0x22
 801f2e0:	6003      	str	r3, [r0, #0]
 801f2e2:	eeb0 0a48 	vmov.f32	s0, s16
 801f2e6:	ecbd 8b02 	vpop	{d8}
 801f2ea:	bd08      	pop	{r3, pc}
 801f2ec:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f310 <expf+0x64>
 801f2f0:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2f8:	d5f3      	bpl.n	801f2e2 <expf+0x36>
 801f2fa:	f7fb faf1 	bl	801a8e0 <__errno>
 801f2fe:	2322      	movs	r3, #34	; 0x22
 801f300:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801f314 <expf+0x68>
 801f304:	6003      	str	r3, [r0, #0]
 801f306:	e7ec      	b.n	801f2e2 <expf+0x36>
 801f308:	42b17180 	.word	0x42b17180
 801f30c:	7f800000 	.word	0x7f800000
 801f310:	c2cff1b5 	.word	0xc2cff1b5
 801f314:	00000000 	.word	0x00000000

0801f318 <sqrtf>:
 801f318:	b508      	push	{r3, lr}
 801f31a:	ed2d 8b02 	vpush	{d8}
 801f31e:	eeb0 8a40 	vmov.f32	s16, s0
 801f322:	f000 f8e5 	bl	801f4f0 <__ieee754_sqrtf>
 801f326:	eeb4 8a48 	vcmp.f32	s16, s16
 801f32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f32e:	d60c      	bvs.n	801f34a <sqrtf+0x32>
 801f330:	eddf 8a07 	vldr	s17, [pc, #28]	; 801f350 <sqrtf+0x38>
 801f334:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801f338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f33c:	d505      	bpl.n	801f34a <sqrtf+0x32>
 801f33e:	f7fb facf 	bl	801a8e0 <__errno>
 801f342:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801f346:	2321      	movs	r3, #33	; 0x21
 801f348:	6003      	str	r3, [r0, #0]
 801f34a:	ecbd 8b02 	vpop	{d8}
 801f34e:	bd08      	pop	{r3, pc}
 801f350:	00000000 	.word	0x00000000

0801f354 <__ieee754_expf>:
 801f354:	ee10 2a10 	vmov	r2, s0
 801f358:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801f35c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f360:	d902      	bls.n	801f368 <__ieee754_expf+0x14>
 801f362:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f366:	4770      	bx	lr
 801f368:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801f36c:	d105      	bne.n	801f37a <__ieee754_expf+0x26>
 801f36e:	2b00      	cmp	r3, #0
 801f370:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801f4a8 <__ieee754_expf+0x154>
 801f374:	fe00 0a27 	vseleq.f32	s0, s0, s15
 801f378:	4770      	bx	lr
 801f37a:	484c      	ldr	r0, [pc, #304]	; (801f4ac <__ieee754_expf+0x158>)
 801f37c:	4282      	cmp	r2, r0
 801f37e:	dd02      	ble.n	801f386 <__ieee754_expf+0x32>
 801f380:	2000      	movs	r0, #0
 801f382:	f000 b8d5 	b.w	801f530 <__math_oflowf>
 801f386:	2a00      	cmp	r2, #0
 801f388:	da05      	bge.n	801f396 <__ieee754_expf+0x42>
 801f38a:	4a49      	ldr	r2, [pc, #292]	; (801f4b0 <__ieee754_expf+0x15c>)
 801f38c:	4291      	cmp	r1, r2
 801f38e:	d902      	bls.n	801f396 <__ieee754_expf+0x42>
 801f390:	2000      	movs	r0, #0
 801f392:	f000 b8c7 	b.w	801f524 <__math_uflowf>
 801f396:	4a47      	ldr	r2, [pc, #284]	; (801f4b4 <__ieee754_expf+0x160>)
 801f398:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f39c:	4291      	cmp	r1, r2
 801f39e:	d952      	bls.n	801f446 <__ieee754_expf+0xf2>
 801f3a0:	4a45      	ldr	r2, [pc, #276]	; (801f4b8 <__ieee754_expf+0x164>)
 801f3a2:	4291      	cmp	r1, r2
 801f3a4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801f3a8:	d834      	bhi.n	801f414 <__ieee754_expf+0xc0>
 801f3aa:	4944      	ldr	r1, [pc, #272]	; (801f4bc <__ieee754_expf+0x168>)
 801f3ac:	4411      	add	r1, r2
 801f3ae:	ed91 7a00 	vldr	s14, [r1]
 801f3b2:	4943      	ldr	r1, [pc, #268]	; (801f4c0 <__ieee754_expf+0x16c>)
 801f3b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801f3b8:	440a      	add	r2, r1
 801f3ba:	edd2 7a00 	vldr	s15, [r2]
 801f3be:	f1c3 0201 	rsb	r2, r3, #1
 801f3c2:	1ad2      	subs	r2, r2, r3
 801f3c4:	ee37 0a67 	vsub.f32	s0, s14, s15
 801f3c8:	ee20 6a00 	vmul.f32	s12, s0, s0
 801f3cc:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801f4c4 <__ieee754_expf+0x170>
 801f3d0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801f4c8 <__ieee754_expf+0x174>
 801f3d4:	eee6 6a05 	vfma.f32	s13, s12, s10
 801f3d8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801f4cc <__ieee754_expf+0x178>
 801f3dc:	eea6 5a86 	vfma.f32	s10, s13, s12
 801f3e0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801f4d0 <__ieee754_expf+0x17c>
 801f3e4:	eee5 6a06 	vfma.f32	s13, s10, s12
 801f3e8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801f4d4 <__ieee754_expf+0x180>
 801f3ec:	eea6 5a86 	vfma.f32	s10, s13, s12
 801f3f0:	eef0 6a40 	vmov.f32	s13, s0
 801f3f4:	eee5 6a46 	vfms.f32	s13, s10, s12
 801f3f8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f3fc:	ee20 5a26 	vmul.f32	s10, s0, s13
 801f400:	bb92      	cbnz	r2, 801f468 <__ieee754_expf+0x114>
 801f402:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801f406:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801f40a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f40e:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801f412:	4770      	bx	lr
 801f414:	4b30      	ldr	r3, [pc, #192]	; (801f4d8 <__ieee754_expf+0x184>)
 801f416:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801f4dc <__ieee754_expf+0x188>
 801f41a:	4413      	add	r3, r2
 801f41c:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f4e0 <__ieee754_expf+0x18c>
 801f420:	edd3 7a00 	vldr	s15, [r3]
 801f424:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f428:	eeb0 7a40 	vmov.f32	s14, s0
 801f42c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f430:	ee17 2a90 	vmov	r2, s15
 801f434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f438:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f43c:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f4e4 <__ieee754_expf+0x190>
 801f440:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f444:	e7be      	b.n	801f3c4 <__ieee754_expf+0x70>
 801f446:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801f44a:	d20b      	bcs.n	801f464 <__ieee754_expf+0x110>
 801f44c:	eddf 6a26 	vldr	s13, [pc, #152]	; 801f4e8 <__ieee754_expf+0x194>
 801f450:	ee70 6a26 	vadd.f32	s13, s0, s13
 801f454:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f45c:	dd02      	ble.n	801f464 <__ieee754_expf+0x110>
 801f45e:	ee30 0a25 	vadd.f32	s0, s0, s11
 801f462:	4770      	bx	lr
 801f464:	2200      	movs	r2, #0
 801f466:	e7af      	b.n	801f3c8 <__ieee754_expf+0x74>
 801f468:	ee76 6a66 	vsub.f32	s13, s12, s13
 801f46c:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801f470:	bfb8      	it	lt
 801f472:	3264      	addlt	r2, #100	; 0x64
 801f474:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801f478:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f47c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f480:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801f484:	ee17 3a90 	vmov	r3, s15
 801f488:	bfb5      	itete	lt
 801f48a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801f4ec <__ieee754_expf+0x198>
 801f48e:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801f492:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801f496:	ee00 3a10 	vmovge	s0, r3
 801f49a:	bfbc      	itt	lt
 801f49c:	ee00 3a10 	vmovlt	s0, r3
 801f4a0:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801f4a4:	4770      	bx	lr
 801f4a6:	bf00      	nop
 801f4a8:	00000000 	.word	0x00000000
 801f4ac:	42b17217 	.word	0x42b17217
 801f4b0:	42cff1b5 	.word	0x42cff1b5
 801f4b4:	3eb17218 	.word	0x3eb17218
 801f4b8:	3f851591 	.word	0x3f851591
 801f4bc:	08074904 	.word	0x08074904
 801f4c0:	0807490c 	.word	0x0807490c
 801f4c4:	3331bb4c 	.word	0x3331bb4c
 801f4c8:	b5ddea0e 	.word	0xb5ddea0e
 801f4cc:	388ab355 	.word	0x388ab355
 801f4d0:	bb360b61 	.word	0xbb360b61
 801f4d4:	3e2aaaab 	.word	0x3e2aaaab
 801f4d8:	080748fc 	.word	0x080748fc
 801f4dc:	3fb8aa3b 	.word	0x3fb8aa3b
 801f4e0:	3f317180 	.word	0x3f317180
 801f4e4:	3717f7d1 	.word	0x3717f7d1
 801f4e8:	7149f2ca 	.word	0x7149f2ca
 801f4ec:	0d800000 	.word	0x0d800000

0801f4f0 <__ieee754_sqrtf>:
 801f4f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f4f4:	4770      	bx	lr

0801f4f6 <with_errnof>:
 801f4f6:	b513      	push	{r0, r1, r4, lr}
 801f4f8:	4604      	mov	r4, r0
 801f4fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f4fe:	f7fb f9ef 	bl	801a8e0 <__errno>
 801f502:	ed9d 0a01 	vldr	s0, [sp, #4]
 801f506:	6004      	str	r4, [r0, #0]
 801f508:	b002      	add	sp, #8
 801f50a:	bd10      	pop	{r4, pc}

0801f50c <xflowf>:
 801f50c:	b130      	cbz	r0, 801f51c <xflowf+0x10>
 801f50e:	eef1 7a40 	vneg.f32	s15, s0
 801f512:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f516:	2022      	movs	r0, #34	; 0x22
 801f518:	f7ff bfed 	b.w	801f4f6 <with_errnof>
 801f51c:	eef0 7a40 	vmov.f32	s15, s0
 801f520:	e7f7      	b.n	801f512 <xflowf+0x6>
	...

0801f524 <__math_uflowf>:
 801f524:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f52c <__math_uflowf+0x8>
 801f528:	f7ff bff0 	b.w	801f50c <xflowf>
 801f52c:	10000000 	.word	0x10000000

0801f530 <__math_oflowf>:
 801f530:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f538 <__math_oflowf+0x8>
 801f534:	f7ff bfea 	b.w	801f50c <xflowf>
 801f538:	70000000 	.word	0x70000000

0801f53c <finitef>:
 801f53c:	b082      	sub	sp, #8
 801f53e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f542:	9801      	ldr	r0, [sp, #4]
 801f544:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f548:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801f54c:	bfac      	ite	ge
 801f54e:	2000      	movge	r0, #0
 801f550:	2001      	movlt	r0, #1
 801f552:	b002      	add	sp, #8
 801f554:	4770      	bx	lr
	...

0801f558 <_init>:
 801f558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f55a:	bf00      	nop
 801f55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f55e:	bc08      	pop	{r3}
 801f560:	469e      	mov	lr, r3
 801f562:	4770      	bx	lr

0801f564 <_fini>:
 801f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f566:	bf00      	nop
 801f568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f56a:	bc08      	pop	{r3}
 801f56c:	469e      	mov	lr, r3
 801f56e:	4770      	bx	lr
