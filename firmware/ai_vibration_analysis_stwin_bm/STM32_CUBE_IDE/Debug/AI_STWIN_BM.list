
AI_STWIN_BM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001393c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005520c  08013b00  08013b00  00023b00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08068d0c  08068d0c  00080b0c  2**0
                  CONTENTS
  4 .ARM          00000000  08068d0c  08068d0c  00080b0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08068d0c  08068d0c  00080b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08068d0c  08068d0c  00078d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08068d10  08068d10  00078d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b0c  20000000  08068d14  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000300c  20000b20  08069820  00080b20  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  20003b2c  08069820  00083b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080b0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042c14  00000000  00000000  00080b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007241  00000000  00000000  000c3750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002870  00000000  00000000  000ca998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002520  00000000  00000000  000cd208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000405b7  00000000  00000000  000cf728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f4c7  00000000  00000000  0010fcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00172dce  00000000  00000000  0013f1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000140  00000000  00000000  002b1f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b878  00000000  00000000  002b20b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003cc0  00000000  00000000  002bd92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b20 	.word	0x20000b20
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013ae4 	.word	0x08013ae4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000b24 	.word	0x20000b24
 80001fc:	08013ae4 	.word	0x08013ae4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <set_mems_int_pin_a_exti>:
extern volatile uint8_t MemsEventDetected;
extern volatile HAL_StatusTypeDef ret_hal_status;
static void mems_int_pin_a_hardware_event_isr(void);

void set_mems_int_pin_a_exti(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* register event irq handler */
  ret_hal_status = HAL_EXTI_GetHandle(&hexti8, EXTI_LINE_8);
 8000c7c:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <set_mems_int_pin_a_exti+0x3c>)
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <set_mems_int_pin_a_exti+0x40>)
 8000c80:	f004 fbd2 	bl	8005428 <HAL_EXTI_GetHandle>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <set_mems_int_pin_a_exti+0x44>)
 8000c8a:	701a      	strb	r2, [r3, #0]
  ret_hal_status = HAL_EXTI_RegisterCallback(&hexti8, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <set_mems_int_pin_a_exti+0x48>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <set_mems_int_pin_a_exti+0x40>)
 8000c92:	f004 fbaf 	bl	80053f4 <HAL_EXTI_RegisterCallback>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <set_mems_int_pin_a_exti+0x44>)
 8000c9c:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2017      	movs	r0, #23
 8000ca4:	f004 fa7b 	bl	800519e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ca8:	2017      	movs	r0, #23
 8000caa:	f004 fa94 	bl	80051d6 <HAL_NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	16000008 	.word	0x16000008
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000dfc 	.word	0x20000dfc
 8000cc0:	08000cc5 	.word	0x08000cc5

08000cc4 <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  MemsEventDetected = 1;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <mems_int_pin_a_hardware_event_isr+0x14>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	20000dfd 	.word	0x20000dfd

08000cdc <main>:
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce2:	f004 f8e1 	bl	8004ea8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ce6:	f000 f81f 	bl	8000d28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cea:	f000 f87b 	bl	8000de4 <PeriphCommonClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f000 f8a9 	bl	8000e44 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cf2:	f00b fe9d 	bl	800ca30 <MX_USB_DEVICE_Init>

  /* User init    */

  // CRC init needed to use AI on STM332
  HAL_CRC_Init(&hcrc);
 8000cf6:	480a      	ldr	r0, [pc, #40]	; (8000d20 <main+0x44>)
 8000cf8:	f004 fa88 	bl	800520c <HAL_CRC_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <main+0x48>)
 8000cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d00:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <main+0x48>)
 8000d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d06:	6493      	str	r3, [r2, #72]	; 0x48
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <main+0x48>)
 8000d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  // Sensor app init
  sensor_init();
 8000d14:	f000 f8c8 	bl	8000ea8 <sensor_init>

  /* While Loop */
  while (1)
  {
	  // sensor porces
	  sensor_process();
 8000d18:	f000 f942 	bl	8000fa0 <sensor_process>
 8000d1c:	e7fc      	b.n	8000d18 <main+0x3c>
 8000d1e:	bf00      	nop
 8000d20:	20000b3c 	.word	0x20000b3c
 8000d24:	40021000 	.word	0x40021000

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b096      	sub	sp, #88	; 0x58
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	2244      	movs	r2, #68	; 0x44
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00f fe98 	bl	8010a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f006 f876 	bl	8006e3c <HAL_PWREx_ControlVoltageScaling>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000d56:	f000 f8a1 	bl	8000e9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d5a:	f006 f83f 	bl	8006ddc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <SystemClock_Config+0xb8>)
 8000d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <SystemClock_Config+0xb8>)
 8000d66:	f023 0318 	bic.w	r3, r3, #24
 8000d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000d6e:	2325      	movs	r3, #37	; 0x25
 8000d70:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d80:	2302      	movs	r3, #2
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d84:	2303      	movs	r3, #3
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000d8c:	231e      	movs	r3, #30
 8000d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 f8ff 	bl	8006fa4 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000dac:	f000 f876 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2303      	movs	r3, #3
 8000db6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2105      	movs	r1, #5
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f006 fd05 	bl	80077d8 <HAL_RCC_ClockConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000dd4:	f000 f862 	bl	8000e9c <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3758      	adds	r7, #88	; 0x58
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0a8      	sub	sp, #160	; 0xa0
 8000de8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	229c      	movs	r2, #156	; 0x9c
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00f fe3b 	bl	8010a6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8000df6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000dfa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8000e14:	2319      	movs	r3, #25
 8000e16:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <PeriphCommonClock_Config+0x5c>)
 8000e22:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f006 ff64 	bl	8007cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000e32:	f000 f833 	bl	8000e9c <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	37a0      	adds	r7, #160	; 0xa0
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	01010000 	.word	0x01010000

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  // GPIO ISM330DHCX INT1 Clock source
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_GPIO_Init+0x50>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <MX_GPIO_Init+0x50>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_GPIO_Init+0x50>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : INT1_DHC_Pin */
  GPIO_InitStruct.Pin = INT1_DHC_Pin;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_GPIO_Init+0x54>)
 8000e86:	f004 fb13 	bl	80054b0 <HAL_GPIO_Init>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48001000 	.word	0x48001000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <sensor_init>:
// time measurement variables
int32_t time_elapsed=0;
int32_t post_FIFO_read;
int32_t pre_FIFO_read;

void sensor_init(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  // init GREEN LED and Turn it on
  BSP_LED_Init(LED1);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f003 f9d7 	bl	8004260 <BSP_LED_Init>

  // init user button
  ret = BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f003 f969 	bl	800418c <BSP_PB_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <sensor_init+0xdc>)
 8000ebe:	6013      	str	r3, [r2, #0]
  PushButtonState = (BSP_PB_GetState(BUTTON_USER)) ?  0 : 1;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f003 f9b3 	bl	800422c <BSP_PB_GetState>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <sensor_init+0xe0>)
 8000ed6:	601a      	str	r2, [r3, #0]

  // init mems exti 8
  set_mems_int_pin_a_exti();
 8000ed8:	f7ff fece 	bl	8000c78 <set_mems_int_pin_a_exti>

  // init ism330dhcx sensor
  ret_uint = Sensor_IO_SPI_CS_Init_All();
 8000edc:	f003 fa36 	bl	800434c <Sensor_IO_SPI_CS_Init_All>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <sensor_init+0xe4>)
 8000ee6:	701a      	strb	r2, [r3, #0]
  ret = BSP_MOTION_SENSOR_Init(ISM330DHCX_0,MOTION_ACCELERO);
 8000ee8:	2102      	movs	r1, #2
 8000eea:	2000      	movs	r0, #0
 8000eec:	f003 fbb2 	bl	8004654 <BSP_MOTION_SENSOR_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <sensor_init+0xdc>)
 8000ef4:	6013      	str	r3, [r2, #0]
  ret = BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DHCX_0, MOTION_ACCELERO,ISM330DHCX_ODR);
 8000ef6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8000f90 <sensor_init+0xe8>
 8000efa:	2102      	movs	r1, #2
 8000efc:	2000      	movs	r0, #0
 8000efe:	f003 fc75 	bl	80047ec <BSP_MOTION_SENSOR_SetOutputDataRate>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <sensor_init+0xdc>)
 8000f06:	6013      	str	r3, [r2, #0]
  ret = BSP_MOTION_SENSOR_FIFO_Set_BDR( ISM330DHCX_0,  MOTION_ACCELERO,  ISM330DHCX_ODR);
 8000f08:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000f90 <sensor_init+0xe8>
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f003 fe9a 	bl	8004c48 <BSP_MOTION_SENSOR_FIFO_Set_BDR>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <sensor_init+0xdc>)
 8000f18:	6013      	str	r3, [r2, #0]
  ret = BSP_MOTION_SENSOR_SetFullScale(ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_FS);
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f003 fcaa 	bl	8004878 <BSP_MOTION_SENSOR_SetFullScale>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <sensor_init+0xdc>)
 8000f28:	6013      	str	r3, [r2, #0]

  // get sensor sensitivity
  ret = BSP_MOTION_SENSOR_GetSensitivity(ISM330DHCX_0, MOTION_ACCELERO, &ism330dhcx_acc_sensitivity);
 8000f2a:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <sensor_init+0xec>)
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f003 fc18 	bl	8004764 <BSP_MOTION_SENSOR_GetSensitivity>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <sensor_init+0xdc>)
 8000f38:	6013      	str	r3, [r2, #0]

  // sensor fifo init
  ret = BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_0, ENABLE);
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f003 fecd 	bl	8004cdc <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <sensor_init+0xdc>)
 8000f46:	6013      	str	r3, [r2, #0]
  ret = BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level( ISM330DHCX_0, INPUT_BUFFER_SIZE);
 8000f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f003 feed 	bl	8004d2c <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <sensor_init+0xdc>)
 8000f56:	6013      	str	r3, [r2, #0]
  ret = BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(ISM330DHCX_0,  ENABLE);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f003 ff0e 	bl	8004d7c <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <sensor_init+0xdc>)
 8000f64:	6013      	str	r3, [r2, #0]
  ret = BSP_MOTION_SENSOR_FIFO_Set_Mode(ISM330DHCX_0,  ISM330DHCX_STREAM_MODE);
 8000f66:	2106      	movs	r1, #6
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f003 ff75 	bl	8004e58 <BSP_MOTION_SENSOR_FIFO_Set_Mode>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <sensor_init+0xdc>)
 8000f72:	6013      	str	r3, [r2, #0]

  // AI init
  aiInit();
 8000f74:	f000 fa6a 	bl	800144c <aiInit>
  // PRE PROCESSING init
  pre_processing_init(&pre_processing_data);
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <sensor_init+0xf0>)
 8000f7a:	f000 fd01 	bl	8001980 <pre_processing_init>

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000b80 	.word	0x20000b80
 8000f88:	20000df4 	.word	0x20000df4
 8000f8c:	20000b84 	.word	0x20000b84
 8000f90:	45d05800 	.word	0x45d05800
 8000f94:	20000df8 	.word	0x20000df8
 8000f98:	20000b88 	.word	0x20000b88
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <sensor_process>:

void sensor_process(void){
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af04      	add	r7, sp, #16
	if (ButtonEventDetected == 1){
 8000fa6:	4b62      	ldr	r3, [pc, #392]	; (8001130 <sensor_process+0x190>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	f040 80b7 	bne.w	800111e <sensor_process+0x17e>
	  if (MemsEventDetected == 1){
 8000fb0:	4b60      	ldr	r3, [pc, #384]	; (8001134 <sensor_process+0x194>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	f040 80b2 	bne.w	800111e <sensor_process+0x17e>

		  //pre_FIFO_read = BSP_GetTick();
		  BSP_LED_On(LED1);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f003 f992 	bl	80042e4 <BSP_LED_On>

		  // Read data from FIFO (no DMA)
		  for (int jj=0; jj<NUMBER_OF_SAMPLES; jj++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	e075      	b.n	80010b2 <sensor_process+0x112>
			  BSP_MOTION_SENSOR_FIFO_Get_Data_Word(ISM330DHCX_0, MOTION_ACCELERO, &DataOut);
 8000fc6:	4a5c      	ldr	r2, [pc, #368]	; (8001138 <sensor_process+0x198>)
 8000fc8:	2102      	movs	r1, #2
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f003 fefe 	bl	8004dcc <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>
			  ism330dhcx_acc[jj].x = ((float)DataOut[0])*ism330dhcx_acc_sensitivity*0.001; // from [mg] to [g]
 8000fd0:	4b59      	ldr	r3, [pc, #356]	; (8001138 <sensor_process+0x198>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <sensor_process+0x19c>)
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe8:	ee17 0a90 	vmov	r0, s15
 8000fec:	f7ff fac4 	bl	8000578 <__aeabi_f2d>
 8000ff0:	a34d      	add	r3, pc, #308	; (adr r3, 8001128 <sensor_process+0x188>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff fb17 	bl	8000628 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fde9 	bl	8000bd8 <__aeabi_d2f>
 8001006:	4601      	mov	r1, r0
 8001008:	484d      	ldr	r0, [pc, #308]	; (8001140 <sensor_process+0x1a0>)
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4403      	add	r3, r0
 8001016:	6019      	str	r1, [r3, #0]
			  ism330dhcx_acc[jj].y = ((float)DataOut[1])*ism330dhcx_acc_sensitivity*0.001;
 8001018:	4b47      	ldr	r3, [pc, #284]	; (8001138 <sensor_process+0x198>)
 800101a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001026:	4b45      	ldr	r3, [pc, #276]	; (800113c <sensor_process+0x19c>)
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	ee17 0a90 	vmov	r0, s15
 8001034:	f7ff faa0 	bl	8000578 <__aeabi_f2d>
 8001038:	a33b      	add	r3, pc, #236	; (adr r3, 8001128 <sensor_process+0x188>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff faf3 	bl	8000628 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fdc5 	bl	8000bd8 <__aeabi_d2f>
 800104e:	4601      	mov	r1, r0
 8001050:	483b      	ldr	r0, [pc, #236]	; (8001140 <sensor_process+0x1a0>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4403      	add	r3, r0
 800105e:	3304      	adds	r3, #4
 8001060:	6019      	str	r1, [r3, #0]
			  ism330dhcx_acc[jj].z = ((float)DataOut[2])*ism330dhcx_acc_sensitivity*0.001;
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <sensor_process+0x198>)
 8001064:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <sensor_process+0x19c>)
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	ee17 0a90 	vmov	r0, s15
 800107e:	f7ff fa7b 	bl	8000578 <__aeabi_f2d>
 8001082:	a329      	add	r3, pc, #164	; (adr r3, 8001128 <sensor_process+0x188>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff face 	bl	8000628 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fda0 	bl	8000bd8 <__aeabi_d2f>
 8001098:	4601      	mov	r1, r0
 800109a:	4829      	ldr	r0, [pc, #164]	; (8001140 <sensor_process+0x1a0>)
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4403      	add	r3, r0
 80010a8:	3308      	adds	r3, #8
 80010aa:	6019      	str	r1, [r3, #0]
		  for (int jj=0; jj<NUMBER_OF_SAMPLES; jj++){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2bff      	cmp	r3, #255	; 0xff
 80010b6:	dd86      	ble.n	8000fc6 <sensor_process+0x26>
		  }

		  // call pre_processing_functions
		  pre_processing_process(ism330dhcx_acc, INPUT_BUFFER_SIZE, preprocessing_output_array, INPUT_BUFFER_SIZE/2, &pre_processing_data);
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <sensor_process+0x1a4>)
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	4a22      	ldr	r2, [pc, #136]	; (8001148 <sensor_process+0x1a8>)
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	481e      	ldr	r0, [pc, #120]	; (8001140 <sensor_process+0x1a0>)
 80010c6:	f000 fc86 	bl	80019d6 <pre_processing_process>

		  // call ai process
		  aiProcess(preprocessing_output_array, ai_out);
 80010ca:	4920      	ldr	r1, [pc, #128]	; (800114c <sensor_process+0x1ac>)
 80010cc:	481e      	ldr	r0, [pc, #120]	; (8001148 <sensor_process+0x1a8>)
 80010ce:	f000 f9e9 	bl	80014a4 <aiProcess>

		  // print to Virtual COM
		  snprintf(string_out, sizeof(string_out), "label: %.0f , Accuracy: %.2f \r\n", ai_out[0], ai_out[1]);
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <sensor_process+0x1ac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa4e 	bl	8000578 <__aeabi_f2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <sensor_process+0x1ac>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa47 	bl	8000578 <__aeabi_f2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010f2:	e9cd 4500 	strd	r4, r5, [sp]
 80010f6:	4a16      	ldr	r2, [pc, #88]	; (8001150 <sensor_process+0x1b0>)
 80010f8:	211e      	movs	r1, #30
 80010fa:	4816      	ldr	r0, [pc, #88]	; (8001154 <sensor_process+0x1b4>)
 80010fc:	f010 fa18 	bl	8011530 <sniprintf>
		  CDC_Transmit_FS((uint8_t*)string_out, strlen(string_out));
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <sensor_process+0x1b4>)
 8001102:	f7ff f87d 	bl	8000200 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29b      	uxth	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <sensor_process+0x1b4>)
 800110e:	f00b fd4d 	bl	800cbac <CDC_Transmit_FS>

		  BSP_LED_Off(LED1);
 8001112:	2000      	movs	r0, #0
 8001114:	f003 f900 	bl	8004318 <BSP_LED_Off>
		  MemsEventDetected = 0;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <sensor_process+0x194>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
		  //post_FIFO_read = BSP_GetTick();

		  //time_elapsed = post_FIFO_read - pre_FIFO_read;
	  }
	}
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bdb0      	pop	{r4, r5, r7, pc}
 8001126:	bf00      	nop
 8001128:	d2f1a9fc 	.word	0xd2f1a9fc
 800112c:	3f50624d 	.word	0x3f50624d
 8001130:	20000dfe 	.word	0x20000dfe
 8001134:	20000dfd 	.word	0x20000dfd
 8001138:	20000e00 	.word	0x20000e00
 800113c:	20000df8 	.word	0x20000df8
 8001140:	20000e08 	.word	0x20000e08
 8001144:	20000b88 	.word	0x20000b88
 8001148:	20001a08 	.word	0x20001a08
 800114c:	20001c08 	.word	0x20001c08
 8001150:	08013b00 	.word	0x08013b00
 8001154:	20000b60 	.word	0x20000b60

08001158 <BSP_PB_Callback>:


void BSP_PB_Callback(Button_TypeDef Button)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if(ButtonEventDetected==0){
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <BSP_PB_Callback+0x5c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d110      	bne.n	800118c <BSP_PB_Callback+0x34>
		// Debouncing
		HAL_Delay(10);
 800116a:	200a      	movs	r0, #10
 800116c:	f003 ff18 	bl	8004fa0 <HAL_Delay>
		if(BSP_PB_GetState(BUTTON_USER) == 1){
 8001170:	2000      	movs	r0, #0
 8001172:	f003 f85b 	bl	800422c <BSP_PB_GetState>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d103      	bne.n	8001184 <BSP_PB_Callback+0x2c>
			ButtonEventDetected = 1;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <BSP_PB_Callback+0x5c>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
		}
		else{
			ButtonEventDetected = 1;
		}
	}
}
 8001182:	e013      	b.n	80011ac <BSP_PB_Callback+0x54>
			ButtonEventDetected = 0;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <BSP_PB_Callback+0x5c>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	e00f      	b.n	80011ac <BSP_PB_Callback+0x54>
		HAL_Delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f003 ff07 	bl	8004fa0 <HAL_Delay>
		if(BSP_PB_GetState(BUTTON_USER) == 1){
 8001192:	2000      	movs	r0, #0
 8001194:	f003 f84a 	bl	800422c <BSP_PB_GetState>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d103      	bne.n	80011a6 <BSP_PB_Callback+0x4e>
			ButtonEventDetected = 0;
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <BSP_PB_Callback+0x5c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	e002      	b.n	80011ac <BSP_PB_Callback+0x54>
			ButtonEventDetected = 1;
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <BSP_PB_Callback+0x5c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000dfe 	.word	0x20000dfe

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f003 feac 	bl	8004f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <OTG_FS_IRQHandler+0x10>)
 8001212:	f004 fd77 	bl	8005d04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200033f0 	.word	0x200033f0

08001220 <EXTI0_IRQHandler>:
  UNUSED(Button);

}

void EXTI0_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8001224:	2001      	movs	r0, #1
 8001226:	f004 fbf7 	bl	8005a18 <HAL_GPIO_EXTI_IRQHandler>
	BSP_PB_Callback(BUTTON_USER);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ff94 	bl	8001158 <BSP_PB_Callback>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_EXTI_IRQHandler(&H_EXTI_8);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <EXTI9_5_IRQHandler+0x10>)
 800123a:	f004 f909 	bl	8005450 <HAL_EXTI_IRQHandler>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000000 	.word	0x20000000

08001248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_kill>:

int _kill(int pid, int sig)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001262:	f00f fbc3 	bl	80109ec <__errno>
 8001266:	4603      	mov	r3, r0
 8001268:	2216      	movs	r2, #22
 800126a:	601a      	str	r2, [r3, #0]
	return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_exit>:

void _exit (int status)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffe7 	bl	8001258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800128a:	e7fe      	b.n	800128a <_exit+0x12>

0800128c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
	}

return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e009      	b.n	80012ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf1      	blt.n	80012d8 <_write+0x12>
	}
	return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_close>:

int _close(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001326:	605a      	str	r2, [r3, #4]
	return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_isatty>:

int _isatty(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return 1;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f00f fb28 	bl	80109ec <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200a0000 	.word	0x200a0000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	20001c10 	.word	0x20001c10
 80013d0:	20003b30 	.word	0x20003b30

080013d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013fc:	f7ff ffea 	bl	80013d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <LoopForever+0x6>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	; (8001438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <LoopForever+0xe>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <LoopForever+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f00f fae7 	bl	80109f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142a:	f7ff fc57 	bl	8000cdc <main>

0800142e <LoopForever>:

LoopForever:
    b LoopForever
 800142e:	e7fe      	b.n	800142e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000b0c 	.word	0x20000b0c
  ldr r2, =_sidata
 800143c:	08068d14 	.word	0x08068d14
  ldr r2, =_sbss
 8001440:	20000b20 	.word	0x20000b20
  ldr r4, =_ebss
 8001444:	20003b2c 	.word	0x20003b2c

08001448 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_IRQHandler>
	...

0800144c <aiInit>:
float32_t *p_out1;



int aiInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <aiInit+0x48>)
 8001454:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	480e      	ldr	r0, [pc, #56]	; (8001498 <aiInit+0x4c>)
 800145e:	f000 f973 	bl	8001748 <ai_network_create_and_init>
 8001462:	4603      	mov	r3, r0
 8001464:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {

  };

  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network , NULL);
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <aiInit+0x4c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f9df 	bl	8001830 <ai_network_inputs_get>
 8001472:	4603      	mov	r3, r0
 8001474:	4a09      	ldr	r2, [pc, #36]	; (800149c <aiInit+0x50>)
 8001476:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <aiInit+0x4c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f9f0 	bl	8001864 <ai_network_outputs_get>
 8001484:	4603      	mov	r3, r0
 8001486:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <aiInit+0x54>)
 8001488:	6013      	str	r3, [r2, #0]

  return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20001c40 	.word	0x20001c40
 8001498:	20001c20 	.word	0x20001c20
 800149c:	20001dd0 	.word	0x20001dd0
 80014a0:	20001dd4 	.word	0x20001dd4

080014a4 <aiProcess>:



int aiProcess(float *p_inData, float p_out_data[2])
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(p_inData);
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <aiProcess+0x98>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data[0]);
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <aiProcess+0x9c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a22      	ldr	r2, [pc, #136]	; (8001544 <aiProcess+0xa0>)
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	605a      	str	r2, [r3, #4]
	  ai_output[1].data = AI_HANDLE_PTR(out_data[1]);
  }

  if (AI_NETWORK_OUT_NUM == 1){
	  /* 2 - Perform the inference */
	  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <aiProcess+0xa4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <aiProcess+0x98>)
 80014c6:	6811      	ldr	r1, [r2, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <aiProcess+0x9c>)
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fa1f 	bl	8001910 <ai_network_run>
 80014d2:	6178      	str	r0, [r7, #20]
	  p_out0 = (float32_t*) ai_output[0].data;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <aiProcess+0x9c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <aiProcess+0xa8>)
 80014dc:	6013      	str	r3, [r2, #0]
	  float32_t max_out = *p_out0;
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <aiProcess+0xa8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	613b      	str	r3, [r7, #16]
	  uint32_t max_idx = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]

	  arm_max_f32(p_out0,AI_NETWORK_OUT_1_SIZE, &max_out, &max_idx);
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <aiProcess+0xa8>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	f107 0210 	add.w	r2, r7, #16
 80014f6:	2103      	movs	r1, #3
 80014f8:	f00c f922 	bl	800d740 <arm_max_f32>
	  p_out_data[0] = (float32_t)max_idx;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out * 100.0;
 800150c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001550 <aiProcess+0xac>
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[0] = (float32_t)p_out0[0];
	  p_out_data[1] = (float32_t)p_out1[(int) p_out0[0]];

  }

  if (n_batch != 1) {
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d004      	beq.n	8001530 <aiProcess+0x8c>
	  ai_network_get_error(network);
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <aiProcess+0xa4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f8ea 	bl	8001704 <ai_network_get_error>
  };


  return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20001dd0 	.word	0x20001dd0
 8001540:	20001dd4 	.word	0x20001dd4
 8001544:	2000000c 	.word	0x2000000c
 8001548:	20001c20 	.word	0x20001c20
 800154c:	20001dd8 	.word	0x20001dd8
 8001550:	42c80000 	.word	0x42c80000

08001554 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	4618      	mov	r0, r3
 800156c:	f00d fb7c 	bl	800ec68 <ai_platform_get_activations_map>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d023      	beq.n	80015be <network_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <network_configure_activations+0x80>)
 800157a:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <network_configure_activations+0x80>)
 8001580:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <network_configure_activations+0x84>)
 8001586:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <network_configure_activations+0x84>)
 800158c:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	33c8      	adds	r3, #200	; 0xc8
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <network_configure_activations+0x88>)
 8001594:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	33c8      	adds	r3, #200	; 0xc8
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <network_configure_activations+0x88>)
 800159c:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <network_configure_activations+0x8c>)
 80015a2:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <network_configure_activations+0x8c>)
 80015a8:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	33c8      	adds	r3, #200	; 0xc8
 80015ae:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <network_configure_activations+0x90>)
 80015b0:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	33c8      	adds	r3, #200	; 0xc8
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <network_configure_activations+0x90>)
 80015b8:	60d3      	str	r3, [r2, #12]
    
    return true;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e005      	b.n	80015ca <network_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80015be:	2213      	movs	r2, #19
 80015c0:	2130      	movs	r1, #48	; 0x30
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f00d fc38 	bl	800ee38 <ai_platform_network_set_error>
  return false;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000020 	.word	0x20000020
 80015d8:	20000030 	.word	0x20000030
 80015dc:	20000040 	.word	0x20000040
 80015e0:	20000050 	.word	0x20000050
 80015e4:	20000060 	.word	0x20000060

080015e8 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f00d fae2 	bl	800ebc8 <ai_platform_get_weights_map>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d065      	beq.n	80016d6 <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <network_configure_weights+0x104>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001612:	4a36      	ldr	r2, [pc, #216]	; (80016ec <network_configure_weights+0x104>)
 8001614:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a34      	ldr	r2, [pc, #208]	; (80016ec <network_configure_weights+0x104>)
 800161a:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a33      	ldr	r2, [pc, #204]	; (80016ec <network_configure_weights+0x104>)
 8001620:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <network_configure_weights+0x108>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800162a:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <network_configure_weights+0x108>)
 800162c:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 25600);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8001634:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <network_configure_weights+0x108>)
 8001636:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 25600);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 800163e:	4a2c      	ldr	r2, [pc, #176]	; (80016f0 <network_configure_weights+0x108>)
 8001640:	60d3      	str	r3, [r2, #12]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <network_configure_weights+0x10c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800164a:	4a2a      	ldr	r2, [pc, #168]	; (80016f4 <network_configure_weights+0x10c>)
 800164c:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 25800);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8001654:	3348      	adds	r3, #72	; 0x48
 8001656:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <network_configure_weights+0x10c>)
 8001658:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 25800);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8001660:	3348      	adds	r3, #72	; 0x48
 8001662:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <network_configure_weights+0x10c>)
 8001664:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <network_configure_weights+0x110>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800166e:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <network_configure_weights+0x110>)
 8001670:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 35800);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 8001678:	33d8      	adds	r3, #216	; 0xd8
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <network_configure_weights+0x110>)
 800167c:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 35800);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 8001684:	33d8      	adds	r3, #216	; 0xd8
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <network_configure_weights+0x110>)
 8001688:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <network_configure_weights+0x114>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <network_configure_weights+0x114>)
 8001694:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 36000);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800169c:	33a0      	adds	r3, #160	; 0xa0
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <network_configure_weights+0x114>)
 80016a0:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 36000);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80016a8:	33a0      	adds	r3, #160	; 0xa0
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <network_configure_weights+0x114>)
 80016ac:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <network_configure_weights+0x118>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <network_configure_weights+0x118>)
 80016b8:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 36600);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 80016c0:	33f8      	adds	r3, #248	; 0xf8
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <network_configure_weights+0x118>)
 80016c4:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 36600);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 80016cc:	33f8      	adds	r3, #248	; 0xf8
 80016ce:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <network_configure_weights+0x118>)
 80016d0:	60d3      	str	r3, [r2, #12]
    return true;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e005      	b.n	80016e2 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80016d6:	2212      	movs	r2, #18
 80016d8:	2130      	movs	r1, #48	; 0x30
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f00d fbac 	bl	800ee38 <ai_platform_network_set_error>
  return false;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000080 	.word	0x20000080
 80016f0:	20000090 	.word	0x20000090
 80016f4:	200000a0 	.word	0x200000a0
 80016f8:	200000b0 	.word	0x200000b0
 80016fc:	200000c0 	.word	0x200000c0
 8001700:	200000d0 	.word	0x200000d0

08001704 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f00d fb19 	bl	800ed44 <ai_platform_network_get_error>
 8001712:	4603      	mov	r3, r0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af02      	add	r7, sp, #8
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8001726:	2300      	movs	r3, #0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2305      	movs	r3, #5
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2301      	movs	r3, #1
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <ai_network_create+0x28>)
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f00d fd73 	bl	800f220 <ai_platform_network_create>
 800173a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000698 	.word	0x20000698

08001748 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b096      	sub	sp, #88	; 0x58
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8001754:	2100      	movs	r1, #0
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7ff ffe0 	bl	800171c <ai_network_create>
 800175c:	4603      	mov	r3, r0
 800175e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8001760:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <ai_network_create_and_init+0x24>
        return err;
 8001768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800176a:	e05d      	b.n	8001828 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f8dd 	bl	8001930 <ai_network_data_params_get>
 8001776:	4603      	mov	r3, r0
 8001778:	f083 0301 	eor.w	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ffbc 	bl	8001704 <ai_network_get_error>
 800178c:	4603      	mov	r3, r0
 800178e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8001790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001792:	e049      	b.n	8001828 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800179a:	2300      	movs	r3, #0
 800179c:	657b      	str	r3, [r7, #84]	; 0x54
 800179e:	e00e      	b.n	80017be <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80017a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4413      	add	r3, r2
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	330c      	adds	r3, #12
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00d f9f2 	bl	800eb9c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80017b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ba:	3301      	adds	r3, #1
 80017bc:	657b      	str	r3, [r7, #84]	; 0x54
 80017be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c0:	461a      	mov	r2, r3
 80017c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c4:	4293      	cmp	r3, r2
 80017c6:	dbeb      	blt.n	80017a0 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	653b      	str	r3, [r7, #80]	; 0x50
 80017d2:	e00e      	b.n	80017f2 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80017d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80017d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	3304      	adds	r3, #4
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00d f9d8 	bl	800eb9c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80017ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ee:	3301      	adds	r3, #1
 80017f0:	653b      	str	r3, [r7, #80]	; 0x50
 80017f2:	8b7b      	ldrh	r3, [r7, #26]
 80017f4:	461a      	mov	r2, r3
 80017f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f8:	4293      	cmp	r3, r2
 80017fa:	dbeb      	blt.n	80017d4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f107 0214 	add.w	r2, r7, #20
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f846 	bl	8001898 <ai_network_init>
 800180c:	4603      	mov	r3, r0
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff71 	bl	8001704 <ai_network_get_error>
 8001822:	4603      	mov	r3, r0
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8001826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8001828:	4618      	mov	r0, r3
 800182a:	3758      	adds	r7, #88	; 0x58
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d104      	bne.n	800184a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <ai_network_inputs_get+0x2c>)
 8001842:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a06      	ldr	r2, [pc, #24]	; (8001860 <ai_network_inputs_get+0x30>)
 8001848:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f00d faf9 	bl	800ee44 <ai_platform_inputs_get>
 8001852:	4603      	mov	r3, r0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000698 	.word	0x20000698
 8001860:	a1c00100 	.word	0xa1c00100

08001864 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d104      	bne.n	800187e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <ai_network_outputs_get+0x2c>)
 8001876:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a06      	ldr	r2, [pc, #24]	; (8001894 <ai_network_outputs_get+0x30>)
 800187c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f00d fbd3 	bl	800f02c <ai_platform_outputs_get>
 8001886:	4603      	mov	r3, r0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000698 	.word	0x20000698
 8001894:	a1c00100 	.word	0xa1c00100

08001898 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f00d fd9b 	bl	800f3e0 <ai_platform_network_init>
 80018aa:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <ai_network_init+0x1e>
 80018b2:	2300      	movs	r3, #0
 80018b4:	e028      	b.n	8001908 <ai_network_init+0x70>

  ai_bool ok = true;
 80018b6:	2301      	movs	r3, #1
 80018b8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80018ba:	6839      	ldr	r1, [r7, #0]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fe93 	bl	80015e8 <network_configure_weights>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff fe3c 	bl	8001554 <network_configure_activations>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f00d fe82 	bl	800f5f8 <ai_platform_network_post_init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	72fb      	strb	r3, [r7, #11]

  return ok;
 8001906:	7afb      	ldrb	r3, [r7, #11]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f00d fefd 	bl	800f720 <ai_platform_network_process>
 8001926:	4603      	mov	r3, r0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <ai_network_data_params_get+0x12>
 800193e:	2300      	movs	r3, #0
 8001940:	e016      	b.n	8001970 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8001942:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <ai_network_data_params_get+0x48>)
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800194c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <ai_network_data_params_get+0x4c>)
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800195a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800195e:	f107 0210 	add.w	r2, r7, #16
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f00d f9cf 	bl	800ed0c <ai_platform_bind_network_params>
 800196e:	4603      	mov	r3, r0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	08013b40 	.word	0x08013b40
 800197c:	08013b48 	.word	0x08013b48

08001980 <pre_processing_init>:

#include "arm_math.h"
#include "params.h"
#include "pre_processing_app.h"

void pre_processing_init(pre_processing_data_t * pre_processing_data) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
	arm_status status;

	arm_rfft_fast_init_f32(&((*pre_processing_data).fft_handler), INPUT_BUFFER_SIZE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3318      	adds	r3, #24
 800198c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001990:	4618      	mov	r0, r3
 8001992:	f00c f809 	bl	800d9a8 <arm_rfft_fast_init_f32>
	status=arm_dct4_init_f32(&((*pre_processing_data).dct4f32), &((*pre_processing_data).rfftf32), &((*pre_processing_data).cfftradix4f32), TRIANGULAR_FILTERS_BANK_SIZE, TRIANGULAR_FILTERS_BANK_SIZE/2, 0.125);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	f00c fc9d 	bl	800e2ec <arm_dct4_init_f32>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]


	pre_processing_data->axis = SELECTED_AXIS;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
	pre_processing_data->triangular_filters_scale = TRIANGULAR_FILTERS_SCALE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
	pre_processing_data->signal_windowing = SIGNAL_WINDOWING;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a

	// Calculation of the triangular filters bank.
	//triangular_filters_bank(INPUT_BUFFER_SIZE, ISM330DHCX_ODR, pre_processing_data->triangular_filters_scale, (*pre_processing_data).bin);
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <pre_processing_process>:

void pre_processing_process(tridimensional_data_t * data_in , uint32_t data_in_size , float32_t * data_out, uint32_t data_out_size, pre_processing_data_t * pre_processing_data) {
 80019d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019da:	b08d      	sub	sp, #52	; 0x34
 80019dc:	af02      	add	r7, sp, #8
 80019de:	6178      	str	r0, [r7, #20]
 80019e0:	6139      	str	r1, [r7, #16]
 80019e2:	60fa      	str	r2, [r7, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	466b      	mov	r3, sp
 80019e8:	461e      	mov	r6, r3
	// Accelerometer axes selection among X, Y, Z.
	float32_t data_1[data_in_size];
 80019ea:	6939      	ldr	r1, [r7, #16]
 80019ec:	460b      	mov	r3, r1
 80019ee:	3b01      	subs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	2300      	movs	r3, #0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	0143      	lsls	r3, r0, #5
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	0142      	lsls	r2, r0, #5
 8001a0e:	2300      	movs	r3, #0
 8001a10:	468a      	mov	sl, r1
 8001a12:	469b      	mov	fp, r3
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001a20:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001a24:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001a28:	008b      	lsls	r3, r1, #2
 8001a2a:	3307      	adds	r3, #7
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	ebad 0d03 	sub.w	sp, sp, r3
 8001a34:	ab02      	add	r3, sp, #8
 8001a36:	3303      	adds	r3, #3
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	623b      	str	r3, [r7, #32]
	axis_selection(data_in, data_in_size, data_1, data_in_size, pre_processing_data->axis);
 8001a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a40:	f893 3268 	ldrb.w	r3, [r3, #616]	; 0x268
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	6939      	ldr	r1, [r7, #16]
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f000 f85c 	bl	8001b0a <axis_selection>

	// Remove mean value from the signal.
	float32_t data_2[data_in_size];
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	460b      	mov	r3, r1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4688      	mov	r8, r1
 8001a5e:	4699      	mov	r9, r3
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001a6c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001a70:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001a74:	2300      	movs	r3, #0
 8001a76:	460c      	mov	r4, r1
 8001a78:	461d      	mov	r5, r3
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	016b      	lsls	r3, r5, #5
 8001a84:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001a88:	0162      	lsls	r2, r4, #5
 8001a8a:	008b      	lsls	r3, r1, #2
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	ebad 0d03 	sub.w	sp, sp, r3
 8001a96:	ab02      	add	r3, sp, #8
 8001a98:	3303      	adds	r3, #3
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
	mean_removal(data_1, data_in_size, data_2, data_in_size);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	6939      	ldr	r1, [r7, #16]
 8001aa6:	6a38      	ldr	r0, [r7, #32]
 8001aa8:	f000 f892 	bl	8001bd0 <mean_removal>

	// Mel Frequency Cepstral Coefficient calculation.
	//mfcc(data_2, data_in_size, data_out, data_out_size, ((*pre_processing_data).bin), &((*pre_processing_data).dct4f32), &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
	fft( data_2,  data_in_size, data_out,  data_out_size, &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing);
 8001aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aae:	3318      	adds	r3, #24
 8001ab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ab2:	f892 226a 	ldrb.w	r2, [r2, #618]	; 0x26a
 8001ab6:	9201      	str	r2, [sp, #4]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	6939      	ldr	r1, [r7, #16]
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f000 f909 	bl	8001cd8 <fft>
 8001ac6:	46b5      	mov	sp, r6
}
 8001ac8:	bf00      	nop
 8001aca:	372c      	adds	r7, #44	; 0x2c
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ad2 <complex_abs>:
/*----------------------------------------------------------------------------*/
/* Support functions          			      						          */
/*----------------------------------------------------------------------------*/

// calculation of the complex absolute value
float complex_abs(float real, float compl) {
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001adc:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8001ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ae8:	edd7 7a00 	vldr	s15, [r7]
 8001aec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	f011 fed4 	bl	80138a4 <sqrtf>
 8001afc:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <axis_selection>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Axis selection        						      */
/*----------------------------------------------------------------------------*/

void axis_selection( tridimensional_data_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, axis_t axis) {
 8001b0a:	b480      	push	{r7}
 8001b0c:	b089      	sub	sp, #36	; 0x24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	603b      	str	r3, [r7, #0]
	if (axis == X)
 8001b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d118      	bne.n	8001b52 <axis_selection+0x48>
	{
		for (int i=0; i<data_out_size ; i++){
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	e010      	b.n	8001b48 <axis_selection+0x3e>
	    	data_out[i]=data_in[i].x;
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	441a      	add	r2, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8ea      	bhi.n	8001b26 <axis_selection+0x1c>
	{
		for (int i=0; i<data_out_size ; i++){
	    	data_out[i]=data_in[i].z;
	    }
	}
}
 8001b50:	e038      	b.n	8001bc4 <axis_selection+0xba>
	else if (axis == Y)
 8001b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d118      	bne.n	8001b8c <axis_selection+0x82>
		for (int i=0; i<data_out_size ; i++){
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	e010      	b.n	8001b82 <axis_selection+0x78>
	    	data_out[i]=data_in[i].y;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	441a      	add	r2, r3
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	440b      	add	r3, r1
 8001b78:	6852      	ldr	r2, [r2, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d8ea      	bhi.n	8001b60 <axis_selection+0x56>
}
 8001b8a:	e01b      	b.n	8001bc4 <axis_selection+0xba>
	else if (axis == Z)
 8001b8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d117      	bne.n	8001bc4 <axis_selection+0xba>
		for (int i=0; i<data_out_size ; i++){
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e010      	b.n	8001bbc <axis_selection+0xb2>
	    	data_out[i]=data_in[i].z;
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	441a      	add	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	6892      	ldr	r2, [r2, #8]
 8001bb4:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8ea      	bhi.n	8001b9a <axis_selection+0x90>
}
 8001bc4:	bf00      	nop
 8001bc6:	3724      	adds	r7, #36	; 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <mean_removal>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Remove mean from signal     			          */
/*----------------------------------------------------------------------------*/

void mean_removal (float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]

	static float32_t mean;

	// calculation of the signal mean value
	arm_mean_f32(data_in, data_in_size, &mean);
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <mean_removal+0x58>)
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f00b fd6e 	bl	800d6c4 <arm_mean_f32>

	// subtract the mean value from the signal in order to remove gravity effect on the accelerometric data
	for (int i=0 ; i < data_out_size ; i++){
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e013      	b.n	8001c16 <mean_removal+0x46>
		data_out[i] = data_in[i] - mean;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <mean_removal+0x58>)
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0 ; i < data_out_size ; i++){
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d8e7      	bhi.n	8001bee <mean_removal+0x1e>
	}
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20001e68 	.word	0x20001e68

08001c2c <hanning>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Multiply the Hanning window to the input signal   */
/*----------------------------------------------------------------------------*/

void hanning(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < data_in_size; i++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e03e      	b.n	8001cbe <hanning+0x92>
		float32_t multiplier = 0.5 * (1 - arm_cos_f32((float32_t) 2*PI*i/(data_out_size-1)));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001cd0 <hanning+0xa4>
 8001c4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c62:	eeb0 0a66 	vmov.f32	s0, s13
 8001c66:	f00c fbad 	bl	800e3c4 <arm_cos_f32>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c76:	ee17 0a90 	vmov	r0, s15
 8001c7a:	f7fe fc7d 	bl	8000578 <__aeabi_f2d>
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <hanning+0xa8>)
 8001c84:	f7fe fcd0 	bl	8000628 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ffa2 	bl	8000bd8 <__aeabi_d2f>
 8001c94:	4603      	mov	r3, r0
 8001c96:	613b      	str	r3, [r7, #16]
		data_out[i] = multiplier * data_in[i];
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data_in_size; i++) {
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d8bc      	bhi.n	8001c40 <hanning+0x14>
	}
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40c90fdb 	.word	0x40c90fdb
 8001cd4:	3fe00000 	.word	0x3fe00000

08001cd8 <fft>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  FFT Calculation using CMSIS DSP Library           */
/*----------------------------------------------------------------------------*/

void fft(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, arm_rfft_fast_instance_f32 * fft_handler, signal_windowing_t signal_windowing) {
 8001cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cdc:	b089      	sub	sp, #36	; 0x24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	466b      	mov	r3, sp
 8001cea:	461e      	mov	r6, r3

	float32_t fft_out_buf[data_in_size];
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4688      	mov	r8, r1
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001d06:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001d0a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001d0e:	2300      	movs	r3, #0
 8001d10:	460c      	mov	r4, r1
 8001d12:	461d      	mov	r5, r3
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	016b      	lsls	r3, r5, #5
 8001d1e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001d22:	0162      	lsls	r2, r4, #5
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	3307      	adds	r3, #7
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	ebad 0d03 	sub.w	sp, sp, r3
 8001d30:	466b      	mov	r3, sp
 8001d32:	3303      	adds	r3, #3
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	613b      	str	r3, [r7, #16]

	switch (signal_windowing){
 8001d3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d106      	bne.n	8001d50 <fft+0x78>
		case HANNING:
		{
			hanning(data_in, data_in_size, data_in, data_in_size);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff ff6f 	bl	8001c2c <hanning>
			break;
 8001d4e:	e000      	b.n	8001d52 <fft+0x7a>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8001d50:	bf00      	nop
		}
	}

	arm_rfft_fast_f32(fft_handler, (float32_t*)  data_in, (float32_t*) fft_out_buf, 0);
 8001d52:	2300      	movs	r3, #0
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68f9      	ldr	r1, [r7, #12]
 8001d58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d5a:	f00b ff09 	bl	800db70 <arm_rfft_fast_f32>

	int freqpoint = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]

	for (int i=0;   i<data_in_size   ; i=i+2) {
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e036      	b.n	8001dd6 <fft+0xfe>
	  data_out[freqpoint] =(complex_abs(fft_out_buf[i], fft_out_buf[i+1])); //(sqrt(data_in_size));
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	3301      	adds	r3, #1
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	ed93 7a00 	vldr	s14, [r3]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	18d4      	adds	r4, r2, r3
 8001d8a:	eef0 0a47 	vmov.f32	s1, s14
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	f7ff fe9e 	bl	8001ad2 <complex_abs>
 8001d96:	eef0 7a40 	vmov.f32	s15, s0
 8001d9a:	edc4 7a00 	vstr	s15, [r4]
	  //data_out[freqpoint] = 2 * data_out[freqpoint]*data_out[freqpoint] /(float32_t)ISM330DHCX_ODR;

	  if(data_out[freqpoint] < 1e-3){
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbe5 	bl	8000578 <__aeabi_f2d>
 8001dae:	a311      	add	r3, pc, #68	; (adr r3, 8001df4 <fft+0x11c>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe feaa 	bl	8000b0c <__aeabi_dcmplt>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <fft+0xf2>
		  data_out[freqpoint] = 1e-3;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <fft+0x118>)
 8001dc8:	601a      	str	r2, [r3, #0]
	  }
	  freqpoint++;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61bb      	str	r3, [r7, #24]
	for (int i=0;   i<data_in_size   ; i=i+2) {
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d8c4      	bhi.n	8001d68 <fft+0x90>
 8001dde:	46b5      	mov	sp, r6
	}
}
 8001de0:	bf00      	nop
 8001de2:	3724      	adds	r7, #36	; 0x24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	3a83126f 	.word	0x3a83126f
 8001df4:	d2f1a9fc 	.word	0xd2f1a9fc
 8001df8:	3f50624d 	.word	0x3f50624d

08001dfc <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e04d      	b.n	8001eb4 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	7b1a      	ldrb	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	699a      	ldr	r2, [r3, #24]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <ISM330DHCX_RegisterBusIO+0xc4>)
 8001e54:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <ISM330DHCX_RegisterBusIO+0xc8>)
 8001e5a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e020      	b.n	8001eb4 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4798      	blx	r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e016      	b.n	8001eb4 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d112      	bne.n	8001eb4 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001e98:	230c      	movs	r3, #12
 8001e9a:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2112      	movs	r1, #18
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fd55 	bl	8002952 <ISM330DHCX_Write_Reg>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	080031b9 	.word	0x080031b9
 8001ec4:	080031ef 	.word	0x080031ef

08001ec8 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	331c      	adds	r3, #28
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 ff7e 	bl	8003dd8 <ism330dhcx_auto_increment_set>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee6:	e06c      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	331c      	adds	r3, #28
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 ff4c 	bl	8003d8c <ism330dhcx_reset_set>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001efe:	e060      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	331c      	adds	r3, #28
 8001f04:	2101      	movs	r1, #1
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 ff66 	bl	8003dd8 <ism330dhcx_auto_increment_set>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f16:	e054      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	331c      	adds	r3, #28
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 fe30 	bl	8003b84 <ism330dhcx_block_data_update_set>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2e:	e048      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	331c      	adds	r3, #28
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 f81c 	bl	8003f74 <ism330dhcx_fifo_mode_set>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f46:	e03c      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	331c      	adds	r3, #28
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 f9f2 	bl	8003340 <ism330dhcx_xl_data_rate_set>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <ISM330DHCX_Init+0xa0>
  {
    return ISM330DHCX_ERROR;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f66:	e02c      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	331c      	adds	r3, #28
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 f988 	bl	8003284 <ism330dhcx_xl_full_scale_set>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7e:	e020      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2204      	movs	r2, #4
 8001f84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	331c      	adds	r3, #28
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 fc26 	bl	80037e0 <ism330dhcx_gy_data_rate_set>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <ISM330DHCX_Init+0xd8>
  {
    return ISM330DHCX_ERROR;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f9e:	e010      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	331c      	adds	r3, #28
 8001fa4:	210c      	movs	r1, #12
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 fba2 	bl	80036f0 <ism330dhcx_gy_full_scale_set>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb6:	e004      	b.n	8001fc2 <ISM330DHCX_Init+0xfa>
  }

  pObj->is_initialized = 1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f888 	bl	80020e8 <ISM330DHCX_ACC_Disable>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe2:	e015      	b.n	8002010 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fa92 	bl	800250e <ISM330DHCX_GYRO_Disable>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff4:	e00c      	b.n	8002010 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	331c      	adds	r3, #28
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f001 fe9e 	bl	8003d6a <ism330dhcx_device_id_get>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002038:	e000      	b.n	800203c <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800206c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2210      	movs	r2, #16
 8002072:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <ISM330DHCX_GetCapabilities+0x58>)
 800207e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4a06      	ldr	r2, [pc, #24]	; (800209c <ISM330DHCX_GetCapabilities+0x58>)
 8002084:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	45d05800 	.word	0x45d05800

080020a0 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e014      	b.n	80020e0 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f103 021c 	add.w	r2, r3, #28
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f001 f93b 	bl	8003340 <ism330dhcx_xl_data_rate_set>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d4:	e004      	b.n	80020e0 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e01f      	b.n	800213e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 021c 	add.w	r2, r3, #28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	332b      	adds	r3, #43	; 0x2b
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f001 fa88 	bl	8003620 <ism330dhcx_xl_data_rate_get>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211a:	e010      	b.n	800213e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	331c      	adds	r3, #28
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f001 f90c 	bl	8003340 <ism330dhcx_xl_data_rate_set>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002132:	e004      	b.n	800213e <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	331c      	adds	r3, #28
 800215a:	f107 020b 	add.w	r2, r7, #11
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f001 f8b5 	bl	80032d0 <ism330dhcx_xl_full_scale_get>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002170:	e023      	b.n	80021ba <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d81b      	bhi.n	80021b0 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002191 	.word	0x08002191
 8002184:	080021a9 	.word	0x080021a9
 8002188:	08002199 	.word	0x08002199
 800218c:	080021a1 	.word	0x080021a1
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8002194:	601a      	str	r2, [r3, #0]
      break;
 8002196:	e00f      	b.n	80021b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 800219c:	601a      	str	r2, [r3, #0]
      break;
 800219e:	e00b      	b.n	80021b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <ISM330DHCX_ACC_GetSensitivity+0x84>)
 80021a4:	601a      	str	r2, [r3, #0]
      break;
 80021a6:	e007      	b.n	80021b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 80021ac:	601a      	str	r2, [r3, #0]
      break;
 80021ae:	e003      	b.n	80021b8 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021b4:	60fb      	str	r3, [r7, #12]
      break;
 80021b6:	bf00      	nop
  }

  return ret;
 80021b8:	68fb      	ldr	r3, [r7, #12]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	3d79db23 	.word	0x3d79db23
 80021c8:	3df9db23 	.word	0x3df9db23
 80021cc:	3e79db23 	.word	0x3e79db23
 80021d0:	3ef9db23 	.word	0x3ef9db23

080021d4 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	331c      	adds	r3, #28
 80021e6:	f107 020b 	add.w	r2, r7, #11
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fa17 	bl	8003620 <ism330dhcx_xl_data_rate_get>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021fc:	e04e      	b.n	800229c <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	2b0a      	cmp	r3, #10
 8002202:	d846      	bhi.n	8002292 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002239 	.word	0x08002239
 8002210:	08002243 	.word	0x08002243
 8002214:	0800224b 	.word	0x0800224b
 8002218:	08002253 	.word	0x08002253
 800221c:	0800225b 	.word	0x0800225b
 8002220:	08002263 	.word	0x08002263
 8002224:	0800226b 	.word	0x0800226b
 8002228:	08002273 	.word	0x08002273
 800222c:	0800227b 	.word	0x0800227b
 8002230:	08002283 	.word	0x08002283
 8002234:	0800228b 	.word	0x0800228b
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
      break;
 8002240:	e02b      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8002246:	601a      	str	r2, [r3, #0]
      break;
 8002248:	e027      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 800224e:	601a      	str	r2, [r3, #0]
      break;
 8002250:	e023      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8002256:	601a      	str	r2, [r3, #0]
      break;
 8002258:	e01f      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 800225e:	601a      	str	r2, [r3, #0]
      break;
 8002260:	e01b      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8002266:	601a      	str	r2, [r3, #0]
      break;
 8002268:	e017      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 800226e:	601a      	str	r2, [r3, #0]
      break;
 8002270:	e013      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8002276:	601a      	str	r2, [r3, #0]
      break;
 8002278:	e00f      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 800227e:	601a      	str	r2, [r3, #0]
      break;
 8002280:	e00b      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8002286:	601a      	str	r2, [r3, #0]
      break;
 8002288:	e007      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 800228e:	601a      	str	r2, [r3, #0]
      break;
 8002290:	e003      	b.n	800229a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002296:	60fb      	str	r3, [r7, #12]
      break;
 8002298:	bf00      	nop
  }

  return ret;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	41480000 	.word	0x41480000
 80022a8:	41d00000 	.word	0x41d00000
 80022ac:	42500000 	.word	0x42500000
 80022b0:	42d00000 	.word	0x42d00000
 80022b4:	43500000 	.word	0x43500000
 80022b8:	43d08000 	.word	0x43d08000
 80022bc:	44504000 	.word	0x44504000
 80022c0:	44d06000 	.word	0x44d06000
 80022c4:	45505000 	.word	0x45505000
 80022c8:	45d05800 	.word	0x45d05800

080022cc <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d106      	bne.n	80022f0 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80022e2:	ed97 0a00 	vldr	s0, [r7]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fd4a 	bl	8002d80 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80022ec:	4603      	mov	r3, r0
 80022ee:	e005      	b.n	80022fc <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80022f0:	ed97 0a00 	vldr	s0, [r7]
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fdcf 	bl	8002e98 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80022fa:	4603      	mov	r3, r0
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	331c      	adds	r3, #28
 8002316:	f107 020b 	add.w	r2, r7, #11
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 ffd7 	bl	80032d0 <ism330dhcx_xl_full_scale_get>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800232c:	e023      	b.n	8002376 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800232e:	7afb      	ldrb	r3, [r7, #11]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d81b      	bhi.n	800236c <ISM330DHCX_ACC_GetFullScale+0x68>
 8002334:	a201      	add	r2, pc, #4	; (adr r2, 800233c <ISM330DHCX_ACC_GetFullScale+0x38>)
 8002336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	0800234d 	.word	0x0800234d
 8002340:	08002365 	.word	0x08002365
 8002344:	08002355 	.word	0x08002355
 8002348:	0800235d 	.word	0x0800235d
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2202      	movs	r2, #2
 8002350:	601a      	str	r2, [r3, #0]
      break;
 8002352:	e00f      	b.n	8002374 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2204      	movs	r2, #4
 8002358:	601a      	str	r2, [r3, #0]
      break;
 800235a:	e00b      	b.n	8002374 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2208      	movs	r2, #8
 8002360:	601a      	str	r2, [r3, #0]
      break;
 8002362:	e007      	b.n	8002374 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2210      	movs	r2, #16
 8002368:	601a      	str	r2, [r3, #0]
      break;
 800236a:	e003      	b.n	8002374 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002370:	60fb      	str	r3, [r7, #12]
      break;
 8002372:	bf00      	nop
  }

  return ret;
 8002374:	68fb      	ldr	r3, [r7, #12]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop

08002380 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b02      	cmp	r3, #2
 800238e:	dd0b      	ble.n	80023a8 <ISM330DHCX_ACC_SetFullScale+0x28>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b04      	cmp	r3, #4
 8002394:	dd06      	ble.n	80023a4 <ISM330DHCX_ACC_SetFullScale+0x24>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b08      	cmp	r3, #8
 800239a:	dc01      	bgt.n	80023a0 <ISM330DHCX_ACC_SetFullScale+0x20>
 800239c:	2303      	movs	r3, #3
 800239e:	e004      	b.n	80023aa <ISM330DHCX_ACC_SetFullScale+0x2a>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e002      	b.n	80023aa <ISM330DHCX_ACC_SetFullScale+0x2a>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e000      	b.n	80023aa <ISM330DHCX_ACC_SetFullScale+0x2a>
 80023a8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 80023aa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	331c      	adds	r3, #28
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 ff65 	bl	8003284 <ism330dhcx_xl_full_scale_set>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c4:	e000      	b.n	80023c8 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	331c      	adds	r3, #28
 80023de:	f107 0208 	add.w	r2, r7, #8
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fc3e 	bl	8003c66 <ism330dhcx_acceleration_raw_get>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f4:	e00c      	b.n	8002410 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80023f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80023fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002406:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	331c      	adds	r3, #28
 800242c:	f107 0210 	add.w	r2, r7, #16
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f001 fc17 	bl	8003c66 <ism330dhcx_acceleration_raw_get>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002442:	e03c      	b.n	80024be <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fe7c 	bl	8002148 <ISM330DHCX_ACC_GetSensitivity>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245a:	e030      	b.n	80024be <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800245c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002468:	edd7 7a03 	vldr	s15, [r7, #12]
 800246c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002474:	ee17 2a90 	vmov	r2, s15
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800247c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002494:	ee17 2a90 	vmov	r2, s15
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800249c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 2a90 	vmov	r2, s15
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e014      	b.n	8002506 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f103 021c 	add.w	r2, r3, #28
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f001 f978 	bl	80037e0 <ism330dhcx_gy_data_rate_set>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fa:	e004      	b.n	8002506 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e01f      	b.n	8002564 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 021c 	add.w	r2, r3, #28
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	332c      	adds	r3, #44	; 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f001 fac5 	bl	8003ac0 <ism330dhcx_gy_data_rate_get>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002540:	e010      	b.n	8002564 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	331c      	adds	r3, #28
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f001 f949 	bl	80037e0 <ism330dhcx_gy_data_rate_set>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002558:	e004      	b.n	8002564 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	331c      	adds	r3, #28
 800257e:	f107 020b 	add.w	r2, r7, #11
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f001 f8d9 	bl	800373c <ism330dhcx_gy_full_scale_get>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002594:	e039      	b.n	800260a <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8002596:	7afb      	ldrb	r3, [r7, #11]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d831      	bhi.n	8002600 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025e1 	.word	0x080025e1
 80025a8:	08002601 	.word	0x08002601
 80025ac:	080025d9 	.word	0x080025d9
 80025b0:	08002601 	.word	0x08002601
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	08002601 	.word	0x08002601
 80025bc:	08002601 	.word	0x08002601
 80025c0:	08002601 	.word	0x08002601
 80025c4:	080025f1 	.word	0x080025f1
 80025c8:	08002601 	.word	0x08002601
 80025cc:	08002601 	.word	0x08002601
 80025d0:	08002601 	.word	0x08002601
 80025d4:	080025f9 	.word	0x080025f9
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 80025dc:	601a      	str	r2, [r3, #0]
      break;
 80025de:	e013      	b.n	8002608 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 80025e4:	601a      	str	r2, [r3, #0]
      break;
 80025e6:	e00f      	b.n	8002608 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4a0c      	ldr	r2, [pc, #48]	; (800261c <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 80025ec:	601a      	str	r2, [r3, #0]
      break;
 80025ee:	e00b      	b.n	8002608 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 80025f4:	601a      	str	r2, [r3, #0]
      break;
 80025f6:	e007      	b.n	8002608 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 80025fc:	601a      	str	r2, [r3, #0]
      break;
 80025fe:	e003      	b.n	8002608 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002604:	60fb      	str	r3, [r7, #12]
      break;
 8002606:	bf00      	nop
  }

  return ret;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	408c0000 	.word	0x408c0000
 8002618:	410c0000 	.word	0x410c0000
 800261c:	418c0000 	.word	0x418c0000
 8002620:	420c0000 	.word	0x420c0000
 8002624:	428c0000 	.word	0x428c0000

08002628 <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	331c      	adds	r3, #28
 800263a:	f107 020b 	add.w	r2, r7, #11
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f001 fa3d 	bl	8003ac0 <ism330dhcx_gy_data_rate_get>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002650:	e04e      	b.n	80026f0 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002652:	7afb      	ldrb	r3, [r7, #11]
 8002654:	2b0a      	cmp	r3, #10
 8002656:	d846      	bhi.n	80026e6 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	0800268d 	.word	0x0800268d
 8002664:	08002697 	.word	0x08002697
 8002668:	0800269f 	.word	0x0800269f
 800266c:	080026a7 	.word	0x080026a7
 8002670:	080026af 	.word	0x080026af
 8002674:	080026b7 	.word	0x080026b7
 8002678:	080026bf 	.word	0x080026bf
 800267c:	080026c7 	.word	0x080026c7
 8002680:	080026cf 	.word	0x080026cf
 8002684:	080026d7 	.word	0x080026d7
 8002688:	080026df 	.word	0x080026df
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
      break;
 8002694:	e02b      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 800269a:	601a      	str	r2, [r3, #0]
      break;
 800269c:	e027      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4a16      	ldr	r2, [pc, #88]	; (80026fc <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 80026a2:	601a      	str	r2, [r3, #0]
      break;
 80026a4:	e023      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 80026aa:	601a      	str	r2, [r3, #0]
      break;
 80026ac:	e01f      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 80026b2:	601a      	str	r2, [r3, #0]
      break;
 80026b4:	e01b      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 80026ba:	601a      	str	r2, [r3, #0]
      break;
 80026bc:	e017      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 80026c2:	601a      	str	r2, [r3, #0]
      break;
 80026c4:	e013      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	4a11      	ldr	r2, [pc, #68]	; (8002710 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 80026ca:	601a      	str	r2, [r3, #0]
      break;
 80026cc:	e00f      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	4a10      	ldr	r2, [pc, #64]	; (8002714 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 80026d2:	601a      	str	r2, [r3, #0]
      break;
 80026d4:	e00b      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 80026da:	601a      	str	r2, [r3, #0]
      break;
 80026dc:	e007      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 80026e2:	601a      	str	r2, [r3, #0]
      break;
 80026e4:	e003      	b.n	80026ee <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ea:	60fb      	str	r3, [r7, #12]
      break;
 80026ec:	bf00      	nop
  }

  return ret;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	41480000 	.word	0x41480000
 80026fc:	41d00000 	.word	0x41d00000
 8002700:	42500000 	.word	0x42500000
 8002704:	42d00000 	.word	0x42d00000
 8002708:	43500000 	.word	0x43500000
 800270c:	43d08000 	.word	0x43d08000
 8002710:	44504000 	.word	0x44504000
 8002714:	44d06000 	.word	0x44d06000
 8002718:	45505000 	.word	0x45505000
 800271c:	45d05800 	.word	0x45d05800

08002720 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002732:	2b01      	cmp	r3, #1
 8002734:	d106      	bne.n	8002744 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002736:	ed97 0a00 	vldr	s0, [r7]
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fc2e 	bl	8002f9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8002740:	4603      	mov	r3, r0
 8002742:	e005      	b.n	8002750 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002744:	ed97 0a00 	vldr	s0, [r7]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fcb3 	bl	80030b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 800274e:	4603      	mov	r3, r0
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	331c      	adds	r3, #28
 800276a:	f107 020b 	add.w	r2, r7, #11
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f000 ffe3 	bl	800373c <ism330dhcx_gy_full_scale_get>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002780:	e03c      	b.n	80027fc <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d834      	bhi.n	80027f2 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027cd 	.word	0x080027cd
 8002794:	080027f3 	.word	0x080027f3
 8002798:	080027c5 	.word	0x080027c5
 800279c:	080027f3 	.word	0x080027f3
 80027a0:	080027d5 	.word	0x080027d5
 80027a4:	080027f3 	.word	0x080027f3
 80027a8:	080027f3 	.word	0x080027f3
 80027ac:	080027f3 	.word	0x080027f3
 80027b0:	080027df 	.word	0x080027df
 80027b4:	080027f3 	.word	0x080027f3
 80027b8:	080027f3 	.word	0x080027f3
 80027bc:	080027f3 	.word	0x080027f3
 80027c0:	080027e9 	.word	0x080027e9
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	227d      	movs	r2, #125	; 0x7d
 80027c8:	601a      	str	r2, [r3, #0]
      break;
 80027ca:	e016      	b.n	80027fa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	22fa      	movs	r2, #250	; 0xfa
 80027d0:	601a      	str	r2, [r3, #0]
      break;
 80027d2:	e012      	b.n	80027fa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027da:	601a      	str	r2, [r3, #0]
      break;
 80027dc:	e00d      	b.n	80027fa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e4:	601a      	str	r2, [r3, #0]
      break;
 80027e6:	e008      	b.n	80027fa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027ee:	601a      	str	r2, [r3, #0]
      break;
 80027f0:	e003      	b.n	80027fa <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f6:	60fb      	str	r3, [r7, #12]
      break;
 80027f8:	bf00      	nop
  }

  return ret;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b7d      	cmp	r3, #125	; 0x7d
 8002812:	dd12      	ble.n	800283a <ISM330DHCX_GYRO_SetFullScale+0x36>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2bfa      	cmp	r3, #250	; 0xfa
 8002818:	dd0d      	ble.n	8002836 <ISM330DHCX_GYRO_SetFullScale+0x32>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002820:	dd07      	ble.n	8002832 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002828:	dc01      	bgt.n	800282e <ISM330DHCX_GYRO_SetFullScale+0x2a>
 800282a:	2308      	movs	r3, #8
 800282c:	e006      	b.n	800283c <ISM330DHCX_GYRO_SetFullScale+0x38>
 800282e:	230c      	movs	r3, #12
 8002830:	e004      	b.n	800283c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8002832:	2304      	movs	r3, #4
 8002834:	e002      	b.n	800283c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <ISM330DHCX_GYRO_SetFullScale+0x38>
 800283a:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 800283c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	331c      	adds	r3, #28
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 ff52 	bl	80036f0 <ism330dhcx_gy_full_scale_set>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002856:	e000      	b.n	800285a <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	331c      	adds	r3, #28
 8002870:	f107 0208 	add.w	r2, r7, #8
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f001 f9aa 	bl	8003bd0 <ism330dhcx_angular_rate_raw_get>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002886:	e00c      	b.n	80028a2 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002888:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002890:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002898:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	331c      	adds	r3, #28
 80028b8:	f107 0210 	add.w	r2, r7, #16
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 f986 	bl	8003bd0 <ism330dhcx_angular_rate_raw_get>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ce:	e03c      	b.n	800294a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fe48 	bl	800256c <ISM330DHCX_GYRO_GetSensitivity>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e6:	e030      	b.n	800294a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80028e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002900:	ee17 2a90 	vmov	r2, s15
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002908:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002914:	edd7 7a03 	vldr	s15, [r7, #12]
 8002918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002920:	ee17 2a90 	vmov	r2, s15
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002928:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002934:	edd7 7a03 	vldr	s15, [r7, #12]
 8002938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002940:	ee17 2a90 	vmov	r2, s15
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
 800295e:	4613      	mov	r3, r2
 8002960:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f103 001c 	add.w	r0, r3, #28
 8002968:	1cba      	adds	r2, r7, #2
 800296a:	78f9      	ldrb	r1, [r7, #3]
 800296c:	2301      	movs	r3, #1
 800296e:	f000 fc71 	bl	8003254 <ism330dhcx_write_reg>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800297c:	e000      	b.n	8002980 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <ISM330DHCX_FIFO_ACC_Set_BDR>:
 * @param  pObj the device pObj
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_ACC_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_xl_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 8002994:	edd7 7a00 	vldr	s15, [r7]
 8002998:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800299c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	d801      	bhi.n	80029aa <ISM330DHCX_FIFO_ACC_Set_BDR+0x22>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e058      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 80029aa:	edd7 7a00 	vldr	s15, [r7]
 80029ae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d801      	bhi.n	80029c0 <ISM330DHCX_FIFO_ACC_Set_BDR+0x38>
 80029bc:	2302      	movs	r3, #2
 80029be:	e04d      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 80029c0:	edd7 7a00 	vldr	s15, [r7]
 80029c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a84 <ISM330DHCX_FIFO_ACC_Set_BDR+0xfc>
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d801      	bhi.n	80029d6 <ISM330DHCX_FIFO_ACC_Set_BDR+0x4e>
 80029d2:	2303      	movs	r3, #3
 80029d4:	e042      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 80029d6:	edd7 7a00 	vldr	s15, [r7]
 80029da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002a88 <ISM330DHCX_FIFO_ACC_Set_BDR+0x100>
 80029de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d801      	bhi.n	80029ec <ISM330DHCX_FIFO_ACC_Set_BDR+0x64>
 80029e8:	2304      	movs	r3, #4
 80029ea:	e037      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 80029ec:	edd7 7a00 	vldr	s15, [r7]
 80029f0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002a8c <ISM330DHCX_FIFO_ACC_Set_BDR+0x104>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d801      	bhi.n	8002a02 <ISM330DHCX_FIFO_ACC_Set_BDR+0x7a>
 80029fe:	2305      	movs	r3, #5
 8002a00:	e02c      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002a02:	edd7 7a00 	vldr	s15, [r7]
 8002a06:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002a90 <ISM330DHCX_FIFO_ACC_Set_BDR+0x108>
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d801      	bhi.n	8002a18 <ISM330DHCX_FIFO_ACC_Set_BDR+0x90>
 8002a14:	2306      	movs	r3, #6
 8002a16:	e021      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002a18:	edd7 7a00 	vldr	s15, [r7]
 8002a1c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002a94 <ISM330DHCX_FIFO_ACC_Set_BDR+0x10c>
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d801      	bhi.n	8002a2e <ISM330DHCX_FIFO_ACC_Set_BDR+0xa6>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e016      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002a2e:	edd7 7a00 	vldr	s15, [r7]
 8002a32:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002a98 <ISM330DHCX_FIFO_ACC_Set_BDR+0x110>
 8002a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	d801      	bhi.n	8002a44 <ISM330DHCX_FIFO_ACC_Set_BDR+0xbc>
 8002a40:	2308      	movs	r3, #8
 8002a42:	e00b      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002a44:	edd7 7a00 	vldr	s15, [r7]
 8002a48:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002a9c <ISM330DHCX_FIFO_ACC_Set_BDR+0x114>
 8002a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d801      	bhi.n	8002a5a <ISM330DHCX_FIFO_ACC_Set_BDR+0xd2>
 8002a56:	2309      	movs	r3, #9
 8002a58:	e000      	b.n	8002a5c <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8002a5a:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
 8002a5c:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_XL_BATCHED_AT_3333Hz
            :                    ISM330DHCX_XL_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	331c      	adds	r3, #28
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 fa38 	bl	8003edc <ism330dhcx_fifo_xl_batch_set>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <ISM330DHCX_FIFO_ACC_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a76:	e000      	b.n	8002a7a <ISM330DHCX_FIFO_ACC_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	42500000 	.word	0x42500000
 8002a88:	42d00000 	.word	0x42d00000
 8002a8c:	43500000 	.word	0x43500000
 8002a90:	43d08000 	.word	0x43d08000
 8002a94:	44504000 	.word	0x44504000
 8002a98:	44d06000 	.word	0x44d06000
 8002a9c:	45505000 	.word	0x45505000

08002aa0 <ISM330DHCX_FIFO_GYRO_Set_BDR>:
 * @param  pObj the device pObj
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_GYRO_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_gy_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 8002aac:	edd7 7a00 	vldr	s15, [r7]
 8002ab0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abc:	d801      	bhi.n	8002ac2 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x22>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e058      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002ac2:	edd7 7a00 	vldr	s15, [r7]
 8002ac6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	d801      	bhi.n	8002ad8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x38>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e04d      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002ad8:	edd7 7a00 	vldr	s15, [r7]
 8002adc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002b9c <ISM330DHCX_FIFO_GYRO_Set_BDR+0xfc>
 8002ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae8:	d801      	bhi.n	8002aee <ISM330DHCX_FIFO_GYRO_Set_BDR+0x4e>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e042      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002aee:	edd7 7a00 	vldr	s15, [r7]
 8002af2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002ba0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x100>
 8002af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	d801      	bhi.n	8002b04 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x64>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e037      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002b04:	edd7 7a00 	vldr	s15, [r7]
 8002b08:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ba4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x104>
 8002b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b14:	d801      	bhi.n	8002b1a <ISM330DHCX_FIFO_GYRO_Set_BDR+0x7a>
 8002b16:	2305      	movs	r3, #5
 8002b18:	e02c      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002b1a:	edd7 7a00 	vldr	s15, [r7]
 8002b1e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002ba8 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x108>
 8002b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2a:	d801      	bhi.n	8002b30 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x90>
 8002b2c:	2306      	movs	r3, #6
 8002b2e:	e021      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002b30:	edd7 7a00 	vldr	s15, [r7]
 8002b34:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002bac <ISM330DHCX_FIFO_GYRO_Set_BDR+0x10c>
 8002b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	d801      	bhi.n	8002b46 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa6>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e016      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002b46:	edd7 7a00 	vldr	s15, [r7]
 8002b4a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002bb0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x110>
 8002b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	d801      	bhi.n	8002b5c <ISM330DHCX_FIFO_GYRO_Set_BDR+0xbc>
 8002b58:	2308      	movs	r3, #8
 8002b5a:	e00b      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002b5c:	edd7 7a00 	vldr	s15, [r7]
 8002b60:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002bb4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x114>
 8002b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	d801      	bhi.n	8002b72 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd2>
 8002b6e:	2309      	movs	r3, #9
 8002b70:	e000      	b.n	8002b74 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8002b72:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
 8002b74:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_GY_BATCHED_AT_3333Hz
            :                    ISM330DHCX_GY_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_gy_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	331c      	adds	r3, #28
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 f9d2 	bl	8003f28 <ism330dhcx_fifo_gy_batch_set>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b8e:	e000      	b.n	8002b92 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	42500000 	.word	0x42500000
 8002ba0:	42d00000 	.word	0x42d00000
 8002ba4:	43500000 	.word	0x43500000
 8002ba8:	43d08000 	.word	0x43d08000
 8002bac:	44504000 	.word	0x44504000
 8002bb0:	44d06000 	.word	0x44d06000
 8002bb4:	45505000 	.word	0x45505000

08002bb8 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>:
 * @param  pObj the device pObj
 * @param  Status FIFO full interrupt on INT1 pin status
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_reg_t reg;

  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 001c 	add.w	r0, r3, #28
 8002bca:	f107 020c 	add.w	r2, r7, #12
 8002bce:	2301      	movs	r3, #1
 8002bd0:	210d      	movs	r1, #13
 8002bd2:	f000 fb27 	bl	8003224 <ism330dhcx_read_reg>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002be0:	e017      	b.n	8002c12 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_fifo_full = Status;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	7b3b      	ldrb	r3, [r7, #12]
 8002bec:	f362 1345 	bfi	r3, r2, #5, #1
 8002bf0:	733b      	strb	r3, [r7, #12]

  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f103 001c 	add.w	r0, r3, #28
 8002bf8:	f107 020c 	add.w	r2, r7, #12
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	210d      	movs	r1, #13
 8002c00:	f000 fb28 	bl	8003254 <ism330dhcx_write_reg>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return ISM330DHCX_ERROR;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0e:	e000      	b.n	8002c12 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return ISM330DHCX_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <ISM330DHCX_FIFO_Set_Watermark_Level>:
 * @param  pObj the device pObj
 * @param  Watermark FIFO watermark level
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_Set_Watermark_Level(ISM330DHCX_Object_t *pObj, uint16_t Watermark)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	807b      	strh	r3, [r7, #2]
  if (ism330dhcx_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DHCX_OK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	331c      	adds	r3, #28
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f8f8 	bl	8003e24 <ism330dhcx_fifo_watermark_set>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <ISM330DHCX_FIFO_Set_Watermark_Level+0x26>
  {
    return ISM330DHCX_ERROR;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3e:	e000      	b.n	8002c42 <ISM330DHCX_FIFO_Set_Watermark_Level+0x28>
  }

  return ISM330DHCX_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <ISM330DHCX_FIFO_Set_Stop_On_Fth>:
 * @param  pObj the device pObj
 * @param  Status FIFO stop on watermark status
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_Set_Stop_On_Fth(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  if (ism330dhcx_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DHCX_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	331c      	adds	r3, #28
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f916 	bl	8003e90 <ism330dhcx_fifo_stop_on_wtm_set>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x26>
  {
    return ISM330DHCX_ERROR;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c6e:	e000      	b.n	8002c72 <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x28>
  }

  return ISM330DHCX_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <ISM330DHCX_FIFO_Set_Mode>:
 * @param  pObj the device pObj
 * @param  Mode FIFO mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_Set_Mode(ISM330DHCX_Object_t *pObj, uint8_t Mode)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330DHCX_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((ism330dhcx_fifo_mode_t)Mode)
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	bf8c      	ite	hi
 8002c90:	2201      	movhi	r2, #1
 8002c92:	2200      	movls	r2, #0
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	d10b      	bne.n	8002cb2 <ISM330DHCX_FIFO_Set_Mode+0x38>
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <ISM330DHCX_FIFO_Set_Mode+0x40>
    case ISM330DHCX_BYPASS_TO_STREAM_MODE:
    case ISM330DHCX_STREAM_MODE:
      break;

    default:
      ret = ISM330DHCX_ERROR;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb6:	60fb      	str	r3, [r7, #12]
      break;
 8002cb8:	e000      	b.n	8002cbc <ISM330DHCX_FIFO_Set_Mode+0x42>
      break;
 8002cba:	bf00      	nop
  }

  if (ret == ISM330DHCX_ERROR)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc2:	d101      	bne.n	8002cc8 <ISM330DHCX_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	e00d      	b.n	8002ce4 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), (ism330dhcx_fifo_mode_t)Mode) != ISM330DHCX_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	331c      	adds	r3, #28
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 f94f 	bl	8003f74 <ism330dhcx_fifo_mode_set>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <ISM330DHCX_FIFO_Set_Mode+0x68>
  {
    return ISM330DHCX_ERROR;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce0:	e000      	b.n	8002ce4 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <ISM330DHCX_FIFO_Get_Data>:
 * @param  pObj the device pObj
 * @param  Data FIFO raw data array [6]
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_Get_Data(ISM330DHCX_Object_t *pObj, uint8_t *Data)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_out_raw_get(&(pObj->Ctx), Data) != ISM330DHCX_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	331c      	adds	r3, #28
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fffd 	bl	8003cfc <ism330dhcx_fifo_out_raw_get>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <ISM330DHCX_FIFO_Get_Data+0x22>
  {
    return ISM330DHCX_ERROR;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d0c:	e000      	b.n	8002d10 <ISM330DHCX_FIFO_Get_Data+0x24>
  }

  return ISM330DHCX_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <ISM330DHCX_FIFO_Get_Data_Word>:
 * @param  pObj the device pObj
 * @param  Acceleration FIFO single data
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_FIFO_Get_Data_Word(ISM330DHCX_Object_t *pObj, int16_t *data_raw)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  if (ISM330DHCX_FIFO_Get_Data(pObj, data) != ISM330DHCX_OK)
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ffdf 	bl	8002cec <ISM330DHCX_FIFO_Get_Data>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <ISM330DHCX_FIFO_Get_Data_Word+0x22>
  {
    return ISM330DHCX_ERROR;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d38:	e01d      	b.n	8002d76 <ISM330DHCX_FIFO_Get_Data_Word+0x5e>
  }

  data_raw[0] = ((int16_t)data[1] << 8) | data[0];
 8002d3a:	7a7b      	ldrb	r3, [r7, #9]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	b21a      	sxth	r2, r3
 8002d40:	7a3b      	ldrb	r3, [r7, #8]
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b21a      	sxth	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	801a      	strh	r2, [r3, #0]
  data_raw[1] = ((int16_t)data[3] << 8) | data[2];
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	b219      	sxth	r1, r3
 8002d52:	7abb      	ldrb	r3, [r7, #10]
 8002d54:	b21a      	sxth	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	b212      	sxth	r2, r2
 8002d5e:	801a      	strh	r2, [r3, #0]
  data_raw[2] = ((int16_t)data[5] << 8) | data[4];
 8002d60:	7b7b      	ldrb	r3, [r7, #13]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	b219      	sxth	r1, r3
 8002d66:	7b3b      	ldrb	r3, [r7, #12]
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	b212      	sxth	r2, r2
 8002d72:	801a      	strh	r2, [r3, #0]

  return ISM330DHCX_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8002d8c:	edd7 7a00 	vldr	s15, [r7]
 8002d90:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	d801      	bhi.n	8002da2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e058      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002da2:	edd7 7a00 	vldr	s15, [r7]
 8002da6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	d801      	bhi.n	8002db8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e04d      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002db8:	edd7 7a00 	vldr	s15, [r7]
 8002dbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002e7c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d801      	bhi.n	8002dce <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e042      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002dce:	edd7 7a00 	vldr	s15, [r7]
 8002dd2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e80 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	d801      	bhi.n	8002de4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002de0:	2304      	movs	r3, #4
 8002de2:	e037      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002de4:	edd7 7a00 	vldr	s15, [r7]
 8002de8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002e84 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	d801      	bhi.n	8002dfa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e02c      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002dfa:	edd7 7a00 	vldr	s15, [r7]
 8002dfe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002e88 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8002e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	d801      	bhi.n	8002e10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002e0c:	2306      	movs	r3, #6
 8002e0e:	e021      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002e10:	edd7 7a00 	vldr	s15, [r7]
 8002e14:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002e8c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e20:	d801      	bhi.n	8002e26 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8002e22:	2307      	movs	r3, #7
 8002e24:	e016      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002e26:	edd7 7a00 	vldr	s15, [r7]
 8002e2a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002e90 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	d801      	bhi.n	8002e3c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002e38:	2308      	movs	r3, #8
 8002e3a:	e00b      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002e3c:	edd7 7a00 	vldr	s15, [r7]
 8002e40:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002e94 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	d801      	bhi.n	8002e52 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002e4e:	2309      	movs	r3, #9
 8002e50:	e000      	b.n	8002e54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002e52:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8002e54:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	331c      	adds	r3, #28
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fa6e 	bl	8003340 <ism330dhcx_xl_data_rate_set>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6e:	e000      	b.n	8002e72 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	42500000 	.word	0x42500000
 8002e80:	42d00000 	.word	0x42d00000
 8002e84:	43500000 	.word	0x43500000
 8002e88:	43d08000 	.word	0x43d08000
 8002e8c:	44504000 	.word	0x44504000
 8002e90:	44d06000 	.word	0x44d06000
 8002e94:	45505000 	.word	0x45505000

08002e98 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8002ea4:	edd7 7a00 	vldr	s15, [r7]
 8002ea8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	d801      	bhi.n	8002eba <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e058      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002eba:	edd7 7a00 	vldr	s15, [r7]
 8002ebe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eca:	d801      	bhi.n	8002ed0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e04d      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002ed0:	edd7 7a00 	vldr	s15, [r7]
 8002ed4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002f80 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d801      	bhi.n	8002ee6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e042      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002ee6:	edd7 7a00 	vldr	s15, [r7]
 8002eea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f84 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8002eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef6:	d801      	bhi.n	8002efc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e037      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002efc:	edd7 7a00 	vldr	s15, [r7]
 8002f00:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002f88 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	d801      	bhi.n	8002f12 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e02c      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002f12:	edd7 7a00 	vldr	s15, [r7]
 8002f16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f22:	d801      	bhi.n	8002f28 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002f24:	2306      	movs	r3, #6
 8002f26:	e021      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002f28:	edd7 7a00 	vldr	s15, [r7]
 8002f2c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002f90 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	d801      	bhi.n	8002f3e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e016      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002f3e:	edd7 7a00 	vldr	s15, [r7]
 8002f42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002f94 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8002f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4e:	d801      	bhi.n	8002f54 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002f50:	2308      	movs	r3, #8
 8002f52:	e00b      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002f54:	edd7 7a00 	vldr	s15, [r7]
 8002f58:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002f98 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	d801      	bhi.n	8002f6a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8002f66:	2309      	movs	r3, #9
 8002f68:	e000      	b.n	8002f6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002f6a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	42500000 	.word	0x42500000
 8002f84:	42d00000 	.word	0x42d00000
 8002f88:	43500000 	.word	0x43500000
 8002f8c:	43d08000 	.word	0x43d08000
 8002f90:	44504000 	.word	0x44504000
 8002f94:	44d06000 	.word	0x44d06000
 8002f98:	45505000 	.word	0x45505000

08002f9c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8002fa8:	edd7 7a00 	vldr	s15, [r7]
 8002fac:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb8:	d801      	bhi.n	8002fbe <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e058      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002fbe:	edd7 7a00 	vldr	s15, [r7]
 8002fc2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	d801      	bhi.n	8002fd4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e04d      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002fd4:	edd7 7a00 	vldr	s15, [r7]
 8002fd8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003098 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8002fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe4:	d801      	bhi.n	8002fea <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e042      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002fea:	edd7 7a00 	vldr	s15, [r7]
 8002fee:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800309c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8002ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	d801      	bhi.n	8003000 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	e037      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003000:	edd7 7a00 	vldr	s15, [r7]
 8003004:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80030a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d801      	bhi.n	8003016 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003012:	2305      	movs	r3, #5
 8003014:	e02c      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003016:	edd7 7a00 	vldr	s15, [r7]
 800301a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80030a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d801      	bhi.n	800302c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003028:	2306      	movs	r3, #6
 800302a:	e021      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800302c:	edd7 7a00 	vldr	s15, [r7]
 8003030:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80030a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	d801      	bhi.n	8003042 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800303e:	2307      	movs	r3, #7
 8003040:	e016      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003042:	edd7 7a00 	vldr	s15, [r7]
 8003046:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80030ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800304a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	d801      	bhi.n	8003058 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003054:	2308      	movs	r3, #8
 8003056:	e00b      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003058:	edd7 7a00 	vldr	s15, [r7]
 800305c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80030b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003068:	d801      	bhi.n	800306e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800306a:	2309      	movs	r3, #9
 800306c:	e000      	b.n	8003070 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800306e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003070:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	331c      	adds	r3, #28
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fbb0 	bl	80037e0 <ism330dhcx_gy_data_rate_set>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308a:	e000      	b.n	800308e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	42500000 	.word	0x42500000
 800309c:	42d00000 	.word	0x42d00000
 80030a0:	43500000 	.word	0x43500000
 80030a4:	43d08000 	.word	0x43d08000
 80030a8:	44504000 	.word	0x44504000
 80030ac:	44d06000 	.word	0x44d06000
 80030b0:	45505000 	.word	0x45505000

080030b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80030c0:	edd7 7a00 	vldr	s15, [r7]
 80030c4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80030c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	d801      	bhi.n	80030d6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e058      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80030d6:	edd7 7a00 	vldr	s15, [r7]
 80030da:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80030de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	d801      	bhi.n	80030ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e04d      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80030ec:	edd7 7a00 	vldr	s15, [r7]
 80030f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800319c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80030f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fc:	d801      	bhi.n	8003102 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80030fe:	2303      	movs	r3, #3
 8003100:	e042      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003102:	edd7 7a00 	vldr	s15, [r7]
 8003106:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80031a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	d801      	bhi.n	8003118 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003114:	2304      	movs	r3, #4
 8003116:	e037      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003118:	edd7 7a00 	vldr	s15, [r7]
 800311c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80031a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003128:	d801      	bhi.n	800312e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800312a:	2305      	movs	r3, #5
 800312c:	e02c      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800312e:	edd7 7a00 	vldr	s15, [r7]
 8003132:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80031a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d801      	bhi.n	8003144 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003140:	2306      	movs	r3, #6
 8003142:	e021      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003144:	edd7 7a00 	vldr	s15, [r7]
 8003148:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80031ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800314c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	d801      	bhi.n	800315a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003156:	2307      	movs	r3, #7
 8003158:	e016      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800315a:	edd7 7a00 	vldr	s15, [r7]
 800315e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80031b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8003162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316a:	d801      	bhi.n	8003170 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800316c:	2308      	movs	r3, #8
 800316e:	e00b      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003170:	edd7 7a00 	vldr	s15, [r7]
 8003174:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80031b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	d801      	bhi.n	8003186 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8003182:	2309      	movs	r3, #9
 8003184:	e000      	b.n	8003188 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003186:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	42500000 	.word	0x42500000
 80031a0:	42d00000 	.word	0x42d00000
 80031a4:	43500000 	.word	0x43500000
 80031a8:	43d08000 	.word	0x43d08000
 80031ac:	44504000 	.word	0x44504000
 80031b0:	44d06000 	.word	0x44d06000
 80031b4:	45505000 	.word	0x45505000

080031b8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	460b      	mov	r3, r1
 80031c6:	72fb      	strb	r3, [r7, #11]
 80031c8:	4613      	mov	r3, r2
 80031ca:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	695c      	ldr	r4, [r3, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	7b1b      	ldrb	r3, [r3, #12]
 80031d8:	b298      	uxth	r0, r3
 80031da:	7afb      	ldrb	r3, [r7, #11]
 80031dc:	b299      	uxth	r1, r3
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	47a0      	blx	r4
 80031e4:	4603      	mov	r3, r0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}

080031ee <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80031ee:	b590      	push	{r4, r7, lr}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	461a      	mov	r2, r3
 80031fa:	460b      	mov	r3, r1
 80031fc:	72fb      	strb	r3, [r7, #11]
 80031fe:	4613      	mov	r3, r2
 8003200:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	691c      	ldr	r4, [r3, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	7b1b      	ldrb	r3, [r3, #12]
 800320e:	b298      	uxth	r0, r3
 8003210:	7afb      	ldrb	r3, [r7, #11]
 8003212:	b299      	uxth	r1, r3
 8003214:	893b      	ldrh	r3, [r7, #8]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	47a0      	blx	r4
 800321a:	4603      	mov	r3, r0
}
 800321c:	4618      	mov	r0, r3
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}

08003224 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	461a      	mov	r2, r3
 8003230:	460b      	mov	r3, r1
 8003232:	72fb      	strb	r3, [r7, #11]
 8003234:	4613      	mov	r3, r2
 8003236:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685c      	ldr	r4, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6898      	ldr	r0, [r3, #8]
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	7af9      	ldrb	r1, [r7, #11]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	47a0      	blx	r4
 8003248:	6178      	str	r0, [r7, #20]
  return ret;
 800324a:	697b      	ldr	r3, [r7, #20]
}
 800324c:	4618      	mov	r0, r3
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd90      	pop	{r4, r7, pc}

08003254 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	461a      	mov	r2, r3
 8003260:	460b      	mov	r3, r1
 8003262:	72fb      	strb	r3, [r7, #11]
 8003264:	4613      	mov	r3, r2
 8003266:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681c      	ldr	r4, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6898      	ldr	r0, [r3, #8]
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	7af9      	ldrb	r1, [r7, #11]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	47a0      	blx	r4
 8003278:	6178      	str	r0, [r7, #20]
  return ret;
 800327a:	697b      	ldr	r3, [r7, #20]
}
 800327c:	4618      	mov	r0, r3
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}

08003284 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003290:	f107 0208 	add.w	r2, r7, #8
 8003294:	2301      	movs	r3, #1
 8003296:	2110      	movs	r1, #16
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ffc3 	bl	8003224 <ism330dhcx_read_reg>
 800329e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	7a3b      	ldrb	r3, [r7, #8]
 80032b0:	f362 0383 	bfi	r3, r2, #2, #2
 80032b4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80032b6:	f107 0208 	add.w	r2, r7, #8
 80032ba:	2301      	movs	r3, #1
 80032bc:	2110      	movs	r1, #16
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffc8 	bl	8003254 <ism330dhcx_write_reg>
 80032c4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80032c6:	68fb      	ldr	r3, [r7, #12]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80032da:	f107 0208 	add.w	r2, r7, #8
 80032de:	2301      	movs	r3, #1
 80032e0:	2110      	movs	r1, #16
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff9e 	bl	8003224 <ism330dhcx_read_reg>
 80032e8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 80032ea:	7a3b      	ldrb	r3, [r7, #8]
 80032ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d81a      	bhi.n	800332c <ism330dhcx_xl_full_scale_get+0x5c>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <ism330dhcx_xl_full_scale_get+0x2c>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003315 	.word	0x08003315
 8003304:	0800331d 	.word	0x0800331d
 8003308:	08003325 	.word	0x08003325
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
      break;
 8003312:	e00f      	b.n	8003334 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
      break;
 800331a:	e00b      	b.n	8003334 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
      break;
 8003322:	e007      	b.n	8003334 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2203      	movs	r2, #3
 8003328:	701a      	strb	r2, [r3, #0]
      break;
 800332a:	e003      	b.n	8003334 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
      break;
 8003332:	bf00      	nop
  }

  return ret;
 8003334:	68fb      	ldr	r3, [r7, #12]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop

08003340 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003350:	f107 030c 	add.w	r3, r7, #12
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fe32 	bl	8003fc0 <ism330dhcx_fsm_enable_get>
 800335c:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f040 80c4 	bne.w	80034ee <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003366:	7b3b      	ldrb	r3, [r7, #12]
 8003368:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800336c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800336e:	7b3b      	ldrb	r3, [r7, #12]
 8003370:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003374:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003376:	4313      	orrs	r3, r2
 8003378:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800337a:	7b3b      	ldrb	r3, [r7, #12]
 800337c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003380:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003382:	4313      	orrs	r3, r2
 8003384:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003386:	7b3b      	ldrb	r3, [r7, #12]
 8003388:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800338c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800338e:	4313      	orrs	r3, r2
 8003390:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003392:	7b3b      	ldrb	r3, [r7, #12]
 8003394:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003398:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800339a:	4313      	orrs	r3, r2
 800339c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800339e:	7b3b      	ldrb	r3, [r7, #12]
 80033a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80033a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80033aa:	7b3b      	ldrb	r3, [r7, #12]
 80033ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80033b6:	7b3b      	ldrb	r3, [r7, #12]
 80033b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80033be:	4313      	orrs	r3, r2
 80033c0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80033c2:	7b7b      	ldrb	r3, [r7, #13]
 80033c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033c8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80033ca:	4313      	orrs	r3, r2
 80033cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80033ce:	7b7b      	ldrb	r3, [r7, #13]
 80033d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80033da:	7b7b      	ldrb	r3, [r7, #13]
 80033dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033e0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80033e6:	7b7b      	ldrb	r3, [r7, #13]
 80033e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80033f2:	7b7b      	ldrb	r3, [r7, #13]
 80033f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80033fe:	7b7b      	ldrb	r3, [r7, #13]
 8003400:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003404:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003406:	4313      	orrs	r3, r2
 8003408:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003410:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003412:	4313      	orrs	r3, r2
 8003414:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003416:	7b7b      	ldrb	r3, [r7, #13]
 8003418:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800341c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800341e:	4313      	orrs	r3, r2
 8003420:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003422:	2b01      	cmp	r3, #1
 8003424:	d163      	bne.n	80034ee <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003426:	f107 030b 	add.w	r3, r7, #11
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fdf3 	bl	8004018 <ism330dhcx_fsm_data_rate_get>
 8003432:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d159      	bne.n	80034ee <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d853      	bhi.n	80034e8 <ism330dhcx_xl_data_rate_set+0x1a8>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <ism330dhcx_xl_data_rate_set+0x108>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003459 	.word	0x08003459
 800344c:	0800346b 	.word	0x0800346b
 8003450:	08003489 	.word	0x08003489
 8003454:	080034b3 	.word	0x080034b3
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003462:	e045      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	75fb      	strb	r3, [r7, #23]
            break;
 8003468:	e042      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003470:	2302      	movs	r3, #2
 8003472:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003474:	e03c      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800347c:	2302      	movs	r3, #2
 800347e:	75fb      	strb	r3, [r7, #23]
            break;
 8003480:	e036      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	75fb      	strb	r3, [r7, #23]
            break;
 8003486:	e033      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800348e:	2303      	movs	r3, #3
 8003490:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003492:	e02d      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800349a:	2303      	movs	r3, #3
 800349c:	75fb      	strb	r3, [r7, #23]
            break;
 800349e:	e027      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d102      	bne.n	80034ac <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80034a6:	2303      	movs	r3, #3
 80034a8:	75fb      	strb	r3, [r7, #23]
            break;
 80034aa:	e021      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	75fb      	strb	r3, [r7, #23]
            break;
 80034b0:	e01e      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80034b8:	2304      	movs	r3, #4
 80034ba:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80034bc:	e018      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80034c4:	2304      	movs	r3, #4
 80034c6:	75fb      	strb	r3, [r7, #23]
            break;
 80034c8:	e012      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d102      	bne.n	80034d6 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80034d0:	2304      	movs	r3, #4
 80034d2:	75fb      	strb	r3, [r7, #23]
            break;
 80034d4:	e00c      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d102      	bne.n	80034e2 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80034dc:	2304      	movs	r3, #4
 80034de:	75fb      	strb	r3, [r7, #23]
            break;
 80034e0:	e006      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	75fb      	strb	r3, [r7, #23]
            break;
 80034e6:	e003      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	75fb      	strb	r3, [r7, #23]
            break;
 80034ec:	e000      	b.n	80034f0 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 80034ee:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d16d      	bne.n	80035d6 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80034fa:	f107 030a 	add.w	r3, r7, #10
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fdd1 	bl	80040a8 <ism330dhcx_mlc_get>
 8003506:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003508:	7abb      	ldrb	r3, [r7, #10]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d163      	bne.n	80035d6 <ism330dhcx_xl_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800350e:	f107 0309 	add.w	r3, r7, #9
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fdf1 	bl	80040fc <ism330dhcx_mlc_data_rate_get>
 800351a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d159      	bne.n	80035d6 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 8003522:	7a7b      	ldrb	r3, [r7, #9]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d853      	bhi.n	80035d0 <ism330dhcx_xl_data_rate_set+0x290>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <ism330dhcx_xl_data_rate_set+0x1f0>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003571 	.word	0x08003571
 800353c:	0800359b 	.word	0x0800359b
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800354a:	e045      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	75fb      	strb	r3, [r7, #23]
            break;
 8003550:	e042      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003558:	2302      	movs	r3, #2
 800355a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800355c:	e03c      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d102      	bne.n	800356a <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003564:	2302      	movs	r3, #2
 8003566:	75fb      	strb	r3, [r7, #23]
            break;
 8003568:	e036      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	75fb      	strb	r3, [r7, #23]
            break;
 800356e:	e033      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003576:	2303      	movs	r3, #3
 8003578:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800357a:	e02d      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d102      	bne.n	8003588 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003582:	2303      	movs	r3, #3
 8003584:	75fb      	strb	r3, [r7, #23]
            break;
 8003586:	e027      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d102      	bne.n	8003594 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800358e:	2303      	movs	r3, #3
 8003590:	75fb      	strb	r3, [r7, #23]
            break;
 8003592:	e021      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	75fb      	strb	r3, [r7, #23]
            break;
 8003598:	e01e      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80035a0:	2304      	movs	r3, #4
 80035a2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80035a4:	e018      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80035ac:	2304      	movs	r3, #4
 80035ae:	75fb      	strb	r3, [r7, #23]
            break;
 80035b0:	e012      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d102      	bne.n	80035be <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80035b8:	2304      	movs	r3, #4
 80035ba:	75fb      	strb	r3, [r7, #23]
            break;
 80035bc:	e00c      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d102      	bne.n	80035ca <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80035c4:	2304      	movs	r3, #4
 80035c6:	75fb      	strb	r3, [r7, #23]
            break;
 80035c8:	e006      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	75fb      	strb	r3, [r7, #23]
            break;
 80035ce:	e003      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	75fb      	strb	r3, [r7, #23]
            break;
 80035d4:	e000      	b.n	80035d8 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 80035d6:	bf00      	nop
    }
  }

  if (ret == 0) {
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80035de:	f107 0208 	add.w	r2, r7, #8
 80035e2:	2301      	movs	r3, #1
 80035e4:	2110      	movs	r1, #16
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fe1c 	bl	8003224 <ism330dhcx_read_reg>
 80035ec:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	7a3b      	ldrb	r3, [r7, #8]
 80035fe:	f362 1307 	bfi	r3, r2, #4, #4
 8003602:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003604:	f107 0208 	add.w	r2, r7, #8
 8003608:	2301      	movs	r3, #1
 800360a:	2110      	movs	r1, #16
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fe21 	bl	8003254 <ism330dhcx_write_reg>
 8003612:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003614:	693b      	ldr	r3, [r7, #16]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop

08003620 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800362a:	f107 0208 	add.w	r2, r7, #8
 800362e:	2301      	movs	r3, #1
 8003630:	2110      	movs	r1, #16
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fdf6 	bl	8003224 <ism330dhcx_read_reg>
 8003638:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 800363a:	7a3b      	ldrb	r3, [r7, #8]
 800363c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b0b      	cmp	r3, #11
 8003644:	d84a      	bhi.n	80036dc <ism330dhcx_xl_data_rate_get+0xbc>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <ism330dhcx_xl_data_rate_get+0x2c>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	0800367d 	.word	0x0800367d
 8003650:	08003685 	.word	0x08003685
 8003654:	0800368d 	.word	0x0800368d
 8003658:	08003695 	.word	0x08003695
 800365c:	0800369d 	.word	0x0800369d
 8003660:	080036a5 	.word	0x080036a5
 8003664:	080036ad 	.word	0x080036ad
 8003668:	080036b5 	.word	0x080036b5
 800366c:	080036bd 	.word	0x080036bd
 8003670:	080036c5 	.word	0x080036c5
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036d5 	.word	0x080036d5
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
      break;
 8003682:	e02f      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	e02b      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
      break;
 8003692:	e027      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2203      	movs	r2, #3
 8003698:	701a      	strb	r2, [r3, #0]
      break;
 800369a:	e023      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2204      	movs	r2, #4
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e01f      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2205      	movs	r2, #5
 80036a8:	701a      	strb	r2, [r3, #0]
      break;
 80036aa:	e01b      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2206      	movs	r2, #6
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e017      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2207      	movs	r2, #7
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e013      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2208      	movs	r2, #8
 80036c0:	701a      	strb	r2, [r3, #0]
      break;
 80036c2:	e00f      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2209      	movs	r2, #9
 80036c8:	701a      	strb	r2, [r3, #0]
      break;
 80036ca:	e00b      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	220a      	movs	r2, #10
 80036d0:	701a      	strb	r2, [r3, #0]
      break;
 80036d2:	e007      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	220b      	movs	r2, #11
 80036d8:	701a      	strb	r2, [r3, #0]
      break;
 80036da:	e003      	b.n	80036e4 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
      break;
 80036e2:	bf00      	nop
  }

  return ret;
 80036e4:	68fb      	ldr	r3, [r7, #12]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop

080036f0 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80036fc:	f107 0208 	add.w	r2, r7, #8
 8003700:	2301      	movs	r3, #1
 8003702:	2111      	movs	r1, #17
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff fd8d 	bl	8003224 <ism330dhcx_read_reg>
 800370a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10f      	bne.n	8003732 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	b2da      	uxtb	r2, r3
 800371a:	7a3b      	ldrb	r3, [r7, #8]
 800371c:	f362 0303 	bfi	r3, r2, #0, #4
 8003720:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003722:	f107 0208 	add.w	r2, r7, #8
 8003726:	2301      	movs	r3, #1
 8003728:	2111      	movs	r1, #17
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fd92 	bl	8003254 <ism330dhcx_write_reg>
 8003730:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003746:	f107 0208 	add.w	r2, r7, #8
 800374a:	2301      	movs	r3, #1
 800374c:	2111      	movs	r1, #17
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fd68 	bl	8003224 <ism330dhcx_read_reg>
 8003754:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8003756:	7a3b      	ldrb	r3, [r7, #8]
 8003758:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d834      	bhi.n	80037cc <ism330dhcx_gy_full_scale_get+0x90>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <ism330dhcx_gy_full_scale_get+0x2c>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	080037a5 	.word	0x080037a5
 800376c:	080037c5 	.word	0x080037c5
 8003770:	0800379d 	.word	0x0800379d
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080037cd 	.word	0x080037cd
 8003780:	080037cd 	.word	0x080037cd
 8003784:	080037cd 	.word	0x080037cd
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cd 	.word	0x080037cd
 8003790:	080037cd 	.word	0x080037cd
 8003794:	080037cd 	.word	0x080037cd
 8003798:	080037bd 	.word	0x080037bd
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2202      	movs	r2, #2
 80037a0:	701a      	strb	r2, [r3, #0]
      break;
 80037a2:	e017      	b.n	80037d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
      break;
 80037aa:	e013      	b.n	80037d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2204      	movs	r2, #4
 80037b0:	701a      	strb	r2, [r3, #0]
      break;
 80037b2:	e00f      	b.n	80037d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2208      	movs	r2, #8
 80037b8:	701a      	strb	r2, [r3, #0]
      break;
 80037ba:	e00b      	b.n	80037d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	220c      	movs	r2, #12
 80037c0:	701a      	strb	r2, [r3, #0]
      break;
 80037c2:	e007      	b.n	80037d4 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
      break;
 80037ca:	e003      	b.n	80037d4 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
      break;
 80037d2:	bf00      	nop
  }

  return ret;
 80037d4:	68fb      	ldr	r3, [r7, #12]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop

080037e0 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80037f0:	f107 030c 	add.w	r3, r7, #12
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fbe2 	bl	8003fc0 <ism330dhcx_fsm_enable_get>
 80037fc:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 80c4 	bne.w	800398e <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003806:	7b3b      	ldrb	r3, [r7, #12]
 8003808:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800380c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800380e:	7b3b      	ldrb	r3, [r7, #12]
 8003810:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003814:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003816:	4313      	orrs	r3, r2
 8003818:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800381a:	7b3b      	ldrb	r3, [r7, #12]
 800381c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003820:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003822:	4313      	orrs	r3, r2
 8003824:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003826:	7b3b      	ldrb	r3, [r7, #12]
 8003828:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800382c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800382e:	4313      	orrs	r3, r2
 8003830:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003832:	7b3b      	ldrb	r3, [r7, #12]
 8003834:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003838:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800383a:	4313      	orrs	r3, r2
 800383c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800383e:	7b3b      	ldrb	r3, [r7, #12]
 8003840:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003844:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003846:	4313      	orrs	r3, r2
 8003848:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800384a:	7b3b      	ldrb	r3, [r7, #12]
 800384c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003850:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003852:	4313      	orrs	r3, r2
 8003854:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003856:	7b3b      	ldrb	r3, [r7, #12]
 8003858:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800385c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800385e:	4313      	orrs	r3, r2
 8003860:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003862:	7b7b      	ldrb	r3, [r7, #13]
 8003864:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003868:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800386a:	4313      	orrs	r3, r2
 800386c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800386e:	7b7b      	ldrb	r3, [r7, #13]
 8003870:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003874:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003876:	4313      	orrs	r3, r2
 8003878:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800387a:	7b7b      	ldrb	r3, [r7, #13]
 800387c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003880:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003882:	4313      	orrs	r3, r2
 8003884:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003886:	7b7b      	ldrb	r3, [r7, #13]
 8003888:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800388c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800388e:	4313      	orrs	r3, r2
 8003890:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003892:	7b7b      	ldrb	r3, [r7, #13]
 8003894:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003898:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800389a:	4313      	orrs	r3, r2
 800389c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80038aa:	7b7b      	ldrb	r3, [r7, #13]
 80038ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 80038b6:	7b7b      	ldrb	r3, [r7, #13]
 80038b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80038bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80038be:	4313      	orrs	r3, r2
 80038c0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d163      	bne.n	800398e <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80038c6:	f107 030b 	add.w	r3, r7, #11
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fba3 	bl	8004018 <ism330dhcx_fsm_data_rate_get>
 80038d2:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d159      	bne.n	800398e <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d853      	bhi.n	8003988 <ism330dhcx_gy_data_rate_set+0x1a8>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <ism330dhcx_gy_data_rate_set+0x108>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	0800390b 	.word	0x0800390b
 80038f0:	08003929 	.word	0x08003929
 80038f4:	08003953 	.word	0x08003953
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003902:	e045      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	75fb      	strb	r3, [r7, #23]
            break;
 8003908:	e042      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003910:	2302      	movs	r3, #2
 8003912:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003914:	e03c      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d102      	bne.n	8003922 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800391c:	2302      	movs	r3, #2
 800391e:	75fb      	strb	r3, [r7, #23]
            break;
 8003920:	e036      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	75fb      	strb	r3, [r7, #23]
            break;
 8003926:	e033      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800392e:	2303      	movs	r3, #3
 8003930:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003932:	e02d      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800393a:	2303      	movs	r3, #3
 800393c:	75fb      	strb	r3, [r7, #23]
            break;
 800393e:	e027      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d102      	bne.n	800394c <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003946:	2303      	movs	r3, #3
 8003948:	75fb      	strb	r3, [r7, #23]
            break;
 800394a:	e021      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	75fb      	strb	r3, [r7, #23]
            break;
 8003950:	e01e      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003958:	2304      	movs	r3, #4
 800395a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800395c:	e018      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d102      	bne.n	800396a <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003964:	2304      	movs	r3, #4
 8003966:	75fb      	strb	r3, [r7, #23]
            break;
 8003968:	e012      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d102      	bne.n	8003976 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003970:	2304      	movs	r3, #4
 8003972:	75fb      	strb	r3, [r7, #23]
            break;
 8003974:	e00c      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d102      	bne.n	8003982 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800397c:	2304      	movs	r3, #4
 800397e:	75fb      	strb	r3, [r7, #23]
            break;
 8003980:	e006      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	75fb      	strb	r3, [r7, #23]
            break;
 8003986:	e003      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	75fb      	strb	r3, [r7, #23]
            break;
 800398c:	e000      	b.n	8003990 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800398e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d16d      	bne.n	8003a76 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800399a:	f107 030a 	add.w	r3, r7, #10
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fb81 	bl	80040a8 <ism330dhcx_mlc_get>
 80039a6:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 80039a8:	7abb      	ldrb	r3, [r7, #10]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d163      	bne.n	8003a76 <ism330dhcx_gy_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80039ae:	f107 0309 	add.w	r3, r7, #9
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fba1 	bl	80040fc <ism330dhcx_mlc_data_rate_get>
 80039ba:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d159      	bne.n	8003a76 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 80039c2:	7a7b      	ldrb	r3, [r7, #9]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d853      	bhi.n	8003a70 <ism330dhcx_gy_data_rate_set+0x290>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <ism330dhcx_gy_data_rate_set+0x1f0>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039f3 	.word	0x080039f3
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a3b 	.word	0x08003a3b
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80039ea:	e045      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	75fb      	strb	r3, [r7, #23]
            break;
 80039f0:	e042      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80039f8:	2302      	movs	r3, #2
 80039fa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80039fc:	e03c      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003a04:	2302      	movs	r3, #2
 8003a06:	75fb      	strb	r3, [r7, #23]
            break;
 8003a08:	e036      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	75fb      	strb	r3, [r7, #23]
            break;
 8003a0e:	e033      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003a16:	2303      	movs	r3, #3
 8003a18:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003a1a:	e02d      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003a22:	2303      	movs	r3, #3
 8003a24:	75fb      	strb	r3, [r7, #23]
            break;
 8003a26:	e027      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d102      	bne.n	8003a34 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	75fb      	strb	r3, [r7, #23]
            break;
 8003a32:	e021      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	75fb      	strb	r3, [r7, #23]
            break;
 8003a38:	e01e      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003a40:	2304      	movs	r3, #4
 8003a42:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003a44:	e018      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	75fb      	strb	r3, [r7, #23]
            break;
 8003a50:	e012      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d102      	bne.n	8003a5e <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003a58:	2304      	movs	r3, #4
 8003a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a5c:	e00c      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d102      	bne.n	8003a6a <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003a64:	2304      	movs	r3, #4
 8003a66:	75fb      	strb	r3, [r7, #23]
            break;
 8003a68:	e006      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	75fb      	strb	r3, [r7, #23]
            break;
 8003a6e:	e003      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	75fb      	strb	r3, [r7, #23]
            break;
 8003a74:	e000      	b.n	8003a78 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8003a76:	bf00      	nop
    }
  }

  if (ret == 0) {
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003a7e:	f107 0208 	add.w	r2, r7, #8
 8003a82:	2301      	movs	r3, #1
 8003a84:	2111      	movs	r1, #17
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fbcc 	bl	8003224 <ism330dhcx_read_reg>
 8003a8c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	7a3b      	ldrb	r3, [r7, #8]
 8003a9e:	f362 1307 	bfi	r3, r2, #4, #4
 8003aa2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003aa4:	f107 0208 	add.w	r2, r7, #8
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	2111      	movs	r1, #17
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fbd1 	bl	8003254 <ism330dhcx_write_reg>
 8003ab2:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003ab4:	693b      	ldr	r3, [r7, #16]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop

08003ac0 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003aca:	f107 0208 	add.w	r2, r7, #8
 8003ace:	2301      	movs	r3, #1
 8003ad0:	2111      	movs	r1, #17
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fba6 	bl	8003224 <ism330dhcx_read_reg>
 8003ad8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8003ada:	7a3b      	ldrb	r3, [r7, #8]
 8003adc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b0a      	cmp	r3, #10
 8003ae4:	d844      	bhi.n	8003b70 <ism330dhcx_gy_data_rate_get+0xb0>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <ism330dhcx_gy_data_rate_get+0x2c>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b21 	.word	0x08003b21
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b31 	.word	0x08003b31
 8003afc:	08003b39 	.word	0x08003b39
 8003b00:	08003b41 	.word	0x08003b41
 8003b04:	08003b49 	.word	0x08003b49
 8003b08:	08003b51 	.word	0x08003b51
 8003b0c:	08003b59 	.word	0x08003b59
 8003b10:	08003b61 	.word	0x08003b61
 8003b14:	08003b69 	.word	0x08003b69
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
      break;
 8003b1e:	e02b      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e027      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	e023      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2203      	movs	r2, #3
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	e01f      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	e01b      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2205      	movs	r2, #5
 8003b44:	701a      	strb	r2, [r3, #0]
      break;
 8003b46:	e017      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2206      	movs	r2, #6
 8003b4c:	701a      	strb	r2, [r3, #0]
      break;
 8003b4e:	e013      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2207      	movs	r2, #7
 8003b54:	701a      	strb	r2, [r3, #0]
      break;
 8003b56:	e00f      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	701a      	strb	r2, [r3, #0]
      break;
 8003b5e:	e00b      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2209      	movs	r2, #9
 8003b64:	701a      	strb	r2, [r3, #0]
      break;
 8003b66:	e007      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	220a      	movs	r2, #10
 8003b6c:	701a      	strb	r2, [r3, #0]
      break;
 8003b6e:	e003      	b.n	8003b78 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
      break;
 8003b76:	bf00      	nop
  }

  return ret;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop

08003b84 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8003b90:	f107 0208 	add.w	r2, r7, #8
 8003b94:	2301      	movs	r3, #1
 8003b96:	2112      	movs	r1, #18
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fb43 	bl	8003224 <ism330dhcx_read_reg>
 8003b9e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	7a3b      	ldrb	r3, [r7, #8]
 8003bb0:	f362 1386 	bfi	r3, r2, #6, #1
 8003bb4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003bb6:	f107 0208 	add.w	r2, r7, #8
 8003bba:	2301      	movs	r3, #1
 8003bbc:	2112      	movs	r1, #18
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fb48 	bl	8003254 <ism330dhcx_write_reg>
 8003bc4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8003bda:	f107 020c 	add.w	r2, r7, #12
 8003bde:	2306      	movs	r3, #6
 8003be0:	2122      	movs	r1, #34	; 0x22
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fb1e 	bl	8003224 <ism330dhcx_read_reg>
 8003be8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003bea:	7b7b      	ldrb	r3, [r7, #13]
 8003bec:	b21a      	sxth	r2, r3
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	7b3b      	ldrb	r3, [r7, #12]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	b21a      	sxth	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	3302      	adds	r3, #2
 8003c12:	b212      	sxth	r2, r2
 8003c14:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3302      	adds	r3, #2
 8003c30:	b212      	sxth	r2, r2
 8003c32:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c34:	7c7a      	ldrb	r2, [r7, #17]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	b212      	sxth	r2, r2
 8003c3c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	3304      	adds	r3, #4
 8003c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	7c3b      	ldrb	r3, [r7, #16]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3304      	adds	r3, #4
 8003c58:	b212      	sxth	r2, r2
 8003c5a:	801a      	strh	r2, [r3, #0]
  return ret;
 8003c5c:	697b      	ldr	r3, [r7, #20]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8003c70:	f107 020c 	add.w	r2, r7, #12
 8003c74:	2306      	movs	r3, #6
 8003c76:	2128      	movs	r1, #40	; 0x28
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fad3 	bl	8003224 <ism330dhcx_read_reg>
 8003c7e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c80:	7b7b      	ldrb	r3, [r7, #13]
 8003c82:	b21a      	sxth	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	7b3b      	ldrb	r3, [r7, #12]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	b21a      	sxth	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	b212      	sxth	r2, r2
 8003caa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	3302      	adds	r3, #2
 8003cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	7bbb      	ldrb	r3, [r7, #14]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	b212      	sxth	r2, r2
 8003cc8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003cca:	7c7a      	ldrb	r2, [r7, #17]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	b212      	sxth	r2, r2
 8003cd2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	7c3b      	ldrb	r3, [r7, #16]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	3304      	adds	r3, #4
 8003cee:	b212      	sxth	r2, r2
 8003cf0:	801a      	strh	r2, [r3, #0]
  return ret;
 8003cf2:	697b      	ldr	r3, [r7, #20]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <ism330dhcx_fifo_out_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_out_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_X_L, buff, 6);
 8003d06:	2306      	movs	r3, #6
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	2179      	movs	r1, #121	; 0x79
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fa89 	bl	8003224 <ism330dhcx_read_reg>
 8003d12:	60f8      	str	r0, [r7, #12]
  return ret;
 8003d14:	68fb      	ldr	r3, [r7, #12]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8003d2a:	f107 0208 	add.w	r2, r7, #8
 8003d2e:	2301      	movs	r3, #1
 8003d30:	2101      	movs	r1, #1
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fa76 	bl	8003224 <ism330dhcx_read_reg>
 8003d38:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	7a3b      	ldrb	r3, [r7, #8]
 8003d4a:	f362 1387 	bfi	r3, r2, #6, #2
 8003d4e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8003d50:	f107 0208 	add.w	r2, r7, #8
 8003d54:	2301      	movs	r3, #1
 8003d56:	2101      	movs	r1, #1
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fa7b 	bl	8003254 <ism330dhcx_write_reg>
 8003d5e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8003d60:	68fb      	ldr	r3, [r7, #12]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8003d74:	2301      	movs	r3, #1
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	210f      	movs	r1, #15
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fa52 	bl	8003224 <ism330dhcx_read_reg>
 8003d80:	60f8      	str	r0, [r7, #12]
  return ret;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8003d98:	f107 0208 	add.w	r2, r7, #8
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2112      	movs	r1, #18
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fa3f 	bl	8003224 <ism330dhcx_read_reg>
 8003da6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	7a3b      	ldrb	r3, [r7, #8]
 8003db8:	f362 0300 	bfi	r3, r2, #0, #1
 8003dbc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003dbe:	f107 0208 	add.w	r2, r7, #8
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	2112      	movs	r1, #18
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fa44 	bl	8003254 <ism330dhcx_write_reg>
 8003dcc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8003de4:	f107 0208 	add.w	r2, r7, #8
 8003de8:	2301      	movs	r3, #1
 8003dea:	2112      	movs	r1, #18
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fa19 	bl	8003224 <ism330dhcx_read_reg>
 8003df2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	7a3b      	ldrb	r3, [r7, #8]
 8003e04:	f362 0382 	bfi	r3, r2, #2, #1
 8003e08:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8003e0a:	f107 0208 	add.w	r2, r7, #8
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2112      	movs	r1, #18
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fa1e 	bl	8003254 <ism330dhcx_write_reg>
 8003e18:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8003e30:	f107 020c 	add.w	r2, r7, #12
 8003e34:	2301      	movs	r3, #1
 8003e36:	2108      	movs	r1, #8
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff f9f3 	bl	8003224 <ism330dhcx_read_reg>
 8003e3e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d111      	bne.n	8003e6a <ism330dhcx_fifo_watermark_set+0x46>
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 8003e46:	887b      	ldrh	r3, [r7, #2]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	7b3b      	ldrb	r3, [r7, #12]
 8003e54:	f362 0300 	bfi	r3, r2, #0, #1
 8003e58:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8003e5a:	f107 020c 	add.w	r2, r7, #12
 8003e5e:	2301      	movs	r3, #1
 8003e60:	2108      	movs	r1, #8
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff f9f6 	bl	8003254 <ism330dhcx_write_reg>
 8003e68:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0) {
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <ism330dhcx_fifo_watermark_set+0x62>
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 8003e76:	f107 0210 	add.w	r2, r7, #16
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	2107      	movs	r1, #7
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff f9e8 	bl	8003254 <ism330dhcx_write_reg>
 8003e84:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 8003e86:	697b      	ldr	r3, [r7, #20]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <ism330dhcx_fifo_stop_on_wtm_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8003e9c:	f107 0208 	add.w	r2, r7, #8
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	2108      	movs	r1, #8
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff f9bd 	bl	8003224 <ism330dhcx_read_reg>
 8003eaa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <ism330dhcx_fifo_stop_on_wtm_set+0x42>
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	7a3b      	ldrb	r3, [r7, #8]
 8003ebc:	f362 13c7 	bfi	r3, r2, #7, #1
 8003ec0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8003ec2:	f107 0208 	add.w	r2, r7, #8
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	2108      	movs	r1, #8
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff f9c2 	bl	8003254 <ism330dhcx_write_reg>
 8003ed0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8003ee8:	f107 0208 	add.w	r2, r7, #8
 8003eec:	2301      	movs	r3, #1
 8003eee:	2109      	movs	r1, #9
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff f997 	bl	8003224 <ism330dhcx_read_reg>
 8003ef6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <ism330dhcx_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	7a3b      	ldrb	r3, [r7, #8]
 8003f08:	f362 0303 	bfi	r3, r2, #0, #4
 8003f0c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8003f0e:	f107 0208 	add.w	r2, r7, #8
 8003f12:	2301      	movs	r3, #1
 8003f14:	2109      	movs	r1, #9
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff f99c 	bl	8003254 <ism330dhcx_write_reg>
 8003f1c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8003f34:	f107 0208 	add.w	r2, r7, #8
 8003f38:	2301      	movs	r3, #1
 8003f3a:	2109      	movs	r1, #9
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff f971 	bl	8003224 <ism330dhcx_read_reg>
 8003f42:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <ism330dhcx_fifo_gy_batch_set+0x42>
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	7a3b      	ldrb	r3, [r7, #8]
 8003f54:	f362 1307 	bfi	r3, r2, #4, #4
 8003f58:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8003f5a:	f107 0208 	add.w	r2, r7, #8
 8003f5e:	2301      	movs	r3, #1
 8003f60:	2109      	movs	r1, #9
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff f976 	bl	8003254 <ism330dhcx_write_reg>
 8003f68:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8003f80:	f107 0208 	add.w	r2, r7, #8
 8003f84:	2301      	movs	r3, #1
 8003f86:	210a      	movs	r1, #10
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff f94b 	bl	8003224 <ism330dhcx_read_reg>
 8003f8e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	7a3b      	ldrb	r3, [r7, #8]
 8003fa0:	f362 0302 	bfi	r3, r2, #0, #3
 8003fa4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8003fa6:	f107 0208 	add.w	r2, r7, #8
 8003faa:	2301      	movs	r3, #1
 8003fac:	210a      	movs	r1, #10
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff f950 	bl	8003254 <ism330dhcx_write_reg>
 8003fb4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fea6 	bl	8003d1e <ism330dhcx_mem_bank_set>
 8003fd2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8003fda:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8003fdc:	2301      	movs	r3, #1
 8003fde:	2146      	movs	r1, #70	; 0x46
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff f91f 	bl	8003224 <ism330dhcx_read_reg>
 8003fe6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d107      	bne.n	8003ffe <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	2147      	movs	r1, #71	; 0x47
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff f914 	bl	8003224 <ism330dhcx_read_reg>
 8003ffc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004004:	2100      	movs	r1, #0
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe89 	bl	8003d1e <ism330dhcx_mem_bank_set>
 800400c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004022:	2102      	movs	r1, #2
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fe7a 	bl	8003d1e <ism330dhcx_mem_bank_set>
 800402a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d107      	bne.n	8004042 <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8004032:	f107 0208 	add.w	r2, r7, #8
 8004036:	2301      	movs	r3, #1
 8004038:	215f      	movs	r1, #95	; 0x5f
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff f8f2 	bl	8003224 <ism330dhcx_read_reg>
 8004040:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004048:	2100      	movs	r1, #0
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fe67 	bl	8003d1e <ism330dhcx_mem_bank_set>
 8004050:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 8004052:	7a3b      	ldrb	r3, [r7, #8]
 8004054:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b03      	cmp	r3, #3
 800405c:	d81a      	bhi.n	8004094 <ism330dhcx_fsm_data_rate_get+0x7c>
 800405e:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	08004075 	.word	0x08004075
 8004068:	0800407d 	.word	0x0800407d
 800406c:	08004085 	.word	0x08004085
 8004070:	0800408d 	.word	0x0800408d
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
      break;
 800407a:	e00f      	b.n	800409c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
      break;
 8004082:	e00b      	b.n	800409c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	e007      	b.n	800409c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2203      	movs	r2, #3
 8004090:	701a      	strb	r2, [r3, #0]
      break;
 8004092:	e003      	b.n	800409c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
      break;
 800409a:	bf00      	nop
  }

  return ret;
 800409c:	68fb      	ldr	r3, [r7, #12]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop

080040a8 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80040b2:	2102      	movs	r1, #2
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fe32 	bl	8003d1e <ism330dhcx_mem_bank_set>
 80040ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80040c2:	f107 0208 	add.w	r2, r7, #8
 80040c6:	2301      	movs	r3, #1
 80040c8:	2105      	movs	r1, #5
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff f8aa 	bl	8003224 <ism330dhcx_read_reg>
 80040d0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80040d8:	2100      	movs	r1, #0
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fe1f 	bl	8003d1e <ism330dhcx_mem_bank_set>
 80040e0:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80040e2:	7a3b      	ldrb	r3, [r7, #8]
 80040e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80040f0:	68fb      	ldr	r3, [r7, #12]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004106:	2102      	movs	r1, #2
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fe08 	bl	8003d1e <ism330dhcx_mem_bank_set>
 800410e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8004116:	f107 0208 	add.w	r2, r7, #8
 800411a:	2301      	movs	r3, #1
 800411c:	2160      	movs	r1, #96	; 0x60
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff f880 	bl	8003224 <ism330dhcx_read_reg>
 8004124:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d12a      	bne.n	8004182 <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 800412c:	7a3b      	ldrb	r3, [r7, #8]
 800412e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d81b      	bhi.n	8004170 <ism330dhcx_mlc_data_rate_get+0x74>
 8004138:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <ism330dhcx_mlc_data_rate_get+0x44>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004151 	.word	0x08004151
 8004144:	08004159 	.word	0x08004159
 8004148:	08004161 	.word	0x08004161
 800414c:	08004169 	.word	0x08004169
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
        break;
 8004156:	e00f      	b.n	8004178 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
        break;
 800415e:	e00b      	b.n	8004178 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2202      	movs	r2, #2
 8004164:	701a      	strb	r2, [r3, #0]
        break;
 8004166:	e007      	b.n	8004178 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2203      	movs	r2, #3
 800416c:	701a      	strb	r2, [r3, #0]
        break;
 800416e:	e003      	b.n	8004178 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
        break;
 8004176:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004178:	2100      	movs	r1, #0
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fdcf 	bl	8003d1e <ism330dhcx_mem_bank_set>
 8004180:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	460a      	mov	r2, r1
 8004196:	71fb      	strb	r3, [r7, #7]
 8004198:	4613      	mov	r3, r2
 800419a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800419c:	4b21      	ldr	r3, [pc, #132]	; (8004224 <BSP_PB_Init+0x98>)
 800419e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <BSP_PB_Init+0x98>)
 80041a2:	f043 0310 	orr.w	r3, r3, #16
 80041a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <BSP_PB_Init+0x98>)
 80041aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80041b4:	79bb      	ldrb	r3, [r7, #6]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d112      	bne.n	80041e0 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80041ba:	2301      	movs	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041c2:	2302      	movs	r3, #2
 80041c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041c6:	2302      	movs	r3, #2
 80041c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4a16      	ldr	r2, [pc, #88]	; (8004228 <BSP_PB_Init+0x9c>)
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	f107 020c 	add.w	r2, r7, #12
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f969 	bl	80054b0 <HAL_GPIO_Init>
 80041de:	e01c      	b.n	800421a <BSP_PB_Init+0x8e>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80041e0:	2301      	movs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80041ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <BSP_PB_Init+0x9c>)
 80041f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f6:	f107 020c 	add.w	r2, r7, #12
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 f957 	bl	80054b0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004202:	2306      	movs	r3, #6
 8004204:	b25b      	sxtb	r3, r3
 8004206:	2200      	movs	r2, #0
 8004208:	210f      	movs	r1, #15
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ffc7 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004210:	2306      	movs	r3, #6
 8004212:	b25b      	sxtb	r3, r3
 8004214:	4618      	mov	r0, r3
 8004216:	f000 ffde 	bl	80051d6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	20000790 	.word	0x20000790

0800422c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval The Button GPIO pin value.
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <BSP_PB_GetState+0x30>)
 800423a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423e:	2201      	movs	r2, #1
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f001 fbb8 	bl	80059b8 <HAL_GPIO_ReadPin>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000790 	.word	0x20000790

08004260 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10c      	bne.n	800428a <BSP_LED_Init+0x2a>
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <BSP_LED_Init+0x78>)
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <BSP_LED_Init+0x78>)
 8004276:	f043 0310 	orr.w	r3, r3, #16
 800427a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800427c:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <BSP_LED_Init+0x78>)
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	e00b      	b.n	80042a2 <BSP_LED_Init+0x42>
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <BSP_LED_Init+0x78>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <BSP_LED_Init+0x78>)
 8004290:	f043 0308 	orr.w	r3, r3, #8
 8004294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <BSP_LED_Init+0x78>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <BSP_LED_Init+0x7c>)
 80042a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80042b4:	2302      	movs	r3, #2
 80042b6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <BSP_LED_Init+0x80>)
 80042bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c0:	f107 0214 	add.w	r2, r7, #20
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 f8f2 	bl	80054b0 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3728      	adds	r7, #40	; 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0801cb28 	.word	0x0801cb28
 80042e0:	20000794 	.word	0x20000794

080042e4 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <BSP_LED_On+0x2c>)
 80042f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	4a06      	ldr	r2, [pc, #24]	; (8004314 <BSP_LED_On+0x30>)
 80042fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042fe:	2201      	movs	r2, #1
 8004300:	4619      	mov	r1, r3
 8004302:	f001 fb71 	bl	80059e8 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000794 	.word	0x20000794
 8004314:	0801cb28 	.word	0x0801cb28

08004318 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	4a07      	ldr	r2, [pc, #28]	; (8004344 <BSP_LED_Off+0x2c>)
 8004326:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	4a06      	ldr	r2, [pc, #24]	; (8004348 <BSP_LED_Off+0x30>)
 800432e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004332:	2200      	movs	r2, #0
 8004334:	4619      	mov	r1, r3
 8004336:	f001 fb57 	bl	80059e8 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000794 	.word	0x20000794
 8004348:	0801cb28 	.word	0x0801cb28

0800434c <Sensor_IO_SPI_CS_Init_All>:
  * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
  * @param  None
  * @retval HAL_StatusTypeDef HAL Status
  */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8004352:	4b35      	ldr	r3, [pc, #212]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	4a34      	ldr	r2, [pc, #208]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004358:	f043 0308 	orr.w	r3, r3, #8
 800435c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004370:	f043 0320 	orr.w	r3, r3, #32
 8004374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8004382:	4b29      	ldr	r3, [pc, #164]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	4a28      	ldr	r2, [pc, #160]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800438e:	4b26      	ldr	r3, [pc, #152]	; (8004428 <Sensor_IO_SPI_CS_Init_All+0xdc>)
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800439a:	2201      	movs	r2, #1
 800439c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043a0:	4822      	ldr	r0, [pc, #136]	; (800442c <Sensor_IO_SPI_CS_Init_All+0xe0>)
 80043a2:	f001 fb21 	bl	80059e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 80043a6:	2201      	movs	r2, #1
 80043a8:	2120      	movs	r1, #32
 80043aa:	4821      	ldr	r0, [pc, #132]	; (8004430 <Sensor_IO_SPI_CS_Init_All+0xe4>)
 80043ac:	f001 fb1c 	bl	80059e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 80043b0:	2201      	movs	r2, #1
 80043b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043b6:	481e      	ldr	r0, [pc, #120]	; (8004430 <Sensor_IO_SPI_CS_Init_All+0xe4>)
 80043b8:	f001 fb16 	bl	80059e8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80043bc:	2303      	movs	r3, #3
 80043be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043c4:	2301      	movs	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 80043c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	4619      	mov	r1, r3
 80043d4:	4815      	ldr	r0, [pc, #84]	; (800442c <Sensor_IO_SPI_CS_Init_All+0xe0>)
 80043d6:	f001 f86b 	bl	80054b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80043da:	2201      	movs	r2, #1
 80043dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043e0:	4812      	ldr	r0, [pc, #72]	; (800442c <Sensor_IO_SPI_CS_Init_All+0xe0>)
 80043e2:	f001 fb01 	bl	80059e8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 80043e6:	2320      	movs	r3, #32
 80043e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	4619      	mov	r1, r3
 80043f0:	480f      	ldr	r0, [pc, #60]	; (8004430 <Sensor_IO_SPI_CS_Init_All+0xe4>)
 80043f2:	f001 f85d 	bl	80054b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 80043f6:	2201      	movs	r2, #1
 80043f8:	2120      	movs	r1, #32
 80043fa:	480d      	ldr	r0, [pc, #52]	; (8004430 <Sensor_IO_SPI_CS_Init_All+0xe4>)
 80043fc:	f001 faf4 	bl	80059e8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8004400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004404:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	4619      	mov	r1, r3
 800440c:	4808      	ldr	r0, [pc, #32]	; (8004430 <Sensor_IO_SPI_CS_Init_All+0xe4>)
 800440e:	f001 f84f 	bl	80054b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 8004412:	2201      	movs	r2, #1
 8004414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004418:	4805      	ldr	r0, [pc, #20]	; (8004430 <Sensor_IO_SPI_CS_Init_All+0xe4>)
 800441a:	f001 fae5 	bl	80059e8 <HAL_GPIO_WritePin>

  return 0;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	48000c00 	.word	0x48000c00
 8004430:	48001400 	.word	0x48001400

08004434 <BSP_SPI3_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void) 
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
  
  hbusspi3.Instance  = SPI3;
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <BSP_SPI3_Init+0x40>)
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <BSP_SPI3_Init+0x44>)
 8004442:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8004444:	480b      	ldr	r0, [pc, #44]	; (8004474 <BSP_SPI3_Init+0x40>)
 8004446:	f005 f932 	bl	80096ae <HAL_SPI_GetState>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <BSP_SPI3_Init+0x34>
  { 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI3_MspInit(&hbusspi3);
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <BSP_SPI3_Init+0x40>)
 8004452:	f000 f8b5 	bl	80045c0 <SPI3_MspInit>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI3_Init(&hbusspi3) != HAL_OK)
 8004456:	4807      	ldr	r0, [pc, #28]	; (8004474 <BSP_SPI3_Init+0x40>)
 8004458:	f000 f868 	bl	800452c <MX_SPI3_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <BSP_SPI3_Init+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004462:	f06f 0307 	mvn.w	r3, #7
 8004466:	607b      	str	r3, [r7, #4]
    }
  } 

  return ret;
 8004468:	687b      	ldr	r3, [r7, #4]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20001e6c 	.word	0x20001e6c
 8004478:	40003c00 	.word	0x40003c00

0800447c <BSP_SPI3_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI3_DeInit(void) 
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8004482:	f06f 0307 	mvn.w	r3, #7
 8004486:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
  SPI3_MspDeInit(&hbusspi3);
 8004488:	4807      	ldr	r0, [pc, #28]	; (80044a8 <BSP_SPI3_DeInit+0x2c>)
 800448a:	f000 f8cd 	bl	8004628 <SPI3_MspDeInit>
#endif  
  
  if (HAL_SPI_DeInit(&hbusspi3) == HAL_OK) 
 800448e:	4806      	ldr	r0, [pc, #24]	; (80044a8 <BSP_SPI3_DeInit+0x2c>)
 8004490:	f004 fa74 	bl	800897c <HAL_SPI_DeInit>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <BSP_SPI3_DeInit+0x22>
  {
    ret = BSP_ERROR_NONE;
 800449a:	2300      	movs	r3, #0
 800449c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800449e:	687b      	ldr	r3, [r7, #4]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20001e6c 	.word	0x20001e6c

080044ac <BSP_SPI3_Send>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_Send(uint8_t *pData, uint16_t len)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80044b8:	f06f 0305 	mvn.w	r3, #5
 80044bc:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4806      	ldr	r0, [pc, #24]	; (80044e0 <BSP_SPI3_Send+0x34>)
 80044c8:	f004 fa94 	bl	80089f4 <HAL_SPI_Transmit>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <BSP_SPI3_Send+0x2a>
  {
      ret = (int32_t)len;
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80044d6:	68fb      	ldr	r3, [r7, #12]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20001e6c 	.word	0x20001e6c

080044e4 <BSP_SPI3_Recv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI3_Recv(uint8_t *pData, uint16_t len)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80044f0:	f06f 0305 	mvn.w	r3, #5
 80044f4:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4806      	ldr	r0, [pc, #24]	; (8004518 <BSP_SPI3_Recv+0x34>)
 8004500:	f004 fc08 	bl	8008d14 <HAL_SPI_Receive>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <BSP_SPI3_Recv+0x2a>
  {
      ret = (int32_t)len;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20001e6c 	.word	0x20001e6c

0800451c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004520:	f000 fd32 	bl	8004f88 <HAL_GetTick>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <MX_SPI3_Init>:
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
}

/* SPI3 init function */
__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI3;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a20      	ldr	r2, [pc, #128]	; (80045bc <MX_SPI3_Init+0x90>)
 800453c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004544:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004552:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004566:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2218      	movs	r2, #24
 800456c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2207      	movs	r2, #7
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2208      	movs	r2, #8
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f004 f926 	bl	80087e4 <HAL_SPI_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_SPI_ENABLE(hspi);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b0:	601a      	str	r2, [r3, #0]

  return ret;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40003c00 	.word	0x40003c00

080045c0 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable Peripheral clock */
  __HAL_RCC_SPI3_CLK_ENABLE();
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <SPI3_MspInit+0x60>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	4a14      	ldr	r2, [pc, #80]	; (8004620 <SPI3_MspInit+0x60>)
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d2:	6593      	str	r3, [r2, #88]	; 0x58
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <SPI3_MspInit+0x60>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <SPI3_MspInit+0x60>)
 80045e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e4:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <SPI3_MspInit+0x60>)
 80045e6:	f043 0302 	orr.w	r3, r3, #2
 80045ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <SPI3_MspInit+0x60>)
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
  /**SPI3 GPIO Configuration    
  PB3     ------> SPI3_SCK
  PB4     ------> SPI3_MISO
  PB5     ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80045f8:	2338      	movs	r3, #56	; 0x38
 80045fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fc:	2302      	movs	r3, #2
 80045fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004604:	2303      	movs	r3, #3
 8004606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004608:	2306      	movs	r3, #6
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	4619      	mov	r1, r3
 8004612:	4804      	ldr	r0, [pc, #16]	; (8004624 <SPI3_MspInit+0x64>)
 8004614:	f000 ff4c 	bl	80054b0 <HAL_GPIO_Init>
}
 8004618:	bf00      	nop
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40021000 	.word	0x40021000
 8004624:	48000400 	.word	0x48000400

08004628 <SPI3_MspDeInit>:

static void SPI3_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(spiHandle);
  /* Peripheral clock disable */
  __HAL_RCC_SPI3_CLK_DISABLE();
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <SPI3_MspDeInit+0x24>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	4a05      	ldr	r2, [pc, #20]	; (800464c <SPI3_MspDeInit+0x24>)
 8004636:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800463a:	6593      	str	r3, [r2, #88]	; 0x58
  
  /**SPI3 GPIO Configuration    
  PB3     ------> SPI3_SCK
  PB5     ------> SPI3_MOSI
  */
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 800463c:	2128      	movs	r1, #40	; 0x28
 800463e:	4804      	ldr	r0, [pc, #16]	; (8004650 <SPI3_MspDeInit+0x28>)
 8004640:	f001 f8c8 	bl	80057d4 <HAL_GPIO_DeInit>
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021000 	.word	0x40021000
 8004650:	48000400 	.word	0x48000400

08004654 <BSP_MOTION_SENSOR_Init>:
  * @brief  Initializes the motion sensors
  * @param  Instance Motion sensor instance
  * @retval BSP status
  */
int32_t  BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800465e:	2300      	movs	r3, #0
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004662:	2301      	movs	r3, #1
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d131      	bne.n	80046d4 <BSP_MOTION_SENSOR_Init+0x80>
      break;
#endif
      
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	f000 f945 	bl	8004900 <ISM330DHCX_0_Probe>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <BSP_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004680:	e064      	b.n	800474c <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004682:	4a34      	ldr	r2, [pc, #208]	; (8004754 <BSP_MOTION_SENSOR_Init+0x100>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4932      	ldr	r1, [pc, #200]	; (8004758 <BSP_MOTION_SENSOR_Init+0x104>)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004694:	f107 010c 	add.w	r1, r7, #12
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <BSP_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80046a2:	f06f 0306 	mvn.w	r3, #6
 80046a6:	e051      	b.n	800474c <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 80046a8:	7b3b      	ldrb	r3, [r7, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d103      	bne.n	80046b6 <BSP_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	f043 0302 	orr.w	r3, r3, #2
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80046b6:	7b7b      	ldrb	r3, [r7, #13]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d103      	bne.n	80046c4 <BSP_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80046c4:	7bbb      	ldrb	r3, [r7, #14]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d108      	bne.n	80046dc <BSP_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80046d2:	e003      	b.n	80046dc <BSP_MOTION_SENSOR_Init+0x88>
#endif
      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80046d4:	f06f 0301 	mvn.w	r3, #1
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80046da:	e000      	b.n	80046de <BSP_MOTION_SENSOR_Init+0x8a>
      break;
 80046dc:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <BSP_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	e031      	b.n	800474c <BSP_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ec:	e02a      	b.n	8004744 <BSP_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	4013      	ands	r3, r2
 80046f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d11e      	bne.n	8004738 <BSP_MOTION_SENSOR_Init+0xe4>
 80046fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	4013      	ands	r3, r2
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	429a      	cmp	r2, r3
 8004704:	d118      	bne.n	8004738 <BSP_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <BSP_MOTION_SENSOR_Init+0x108>)
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800470e:	4814      	ldr	r0, [pc, #80]	; (8004760 <BSP_MOTION_SENSOR_Init+0x10c>)
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	440b      	add	r3, r1
 800471a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	490d      	ldr	r1, [pc, #52]	; (8004758 <BSP_MOTION_SENSOR_Init+0x104>)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <BSP_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004732:	f06f 0304 	mvn.w	r3, #4
 8004736:	e009      	b.n	800474c <BSP_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	3301      	adds	r3, #1
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	2b02      	cmp	r3, #2
 8004748:	d9d1      	bls.n	80046ee <BSP_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800474c:	4618      	mov	r0, r3
 800474e:	3738      	adds	r7, #56	; 0x38
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20001ee0 	.word	0x20001ee0
 8004758:	20001ed0 	.word	0x20001ed0
 800475c:	2000079c 	.word	0x2000079c
 8004760:	20001ed4 	.word	0x20001ed4

08004764 <BSP_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <BSP_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004776:	f06f 0301 	mvn.w	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e029      	b.n	80047d2 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <BSP_MOTION_SENSOR_GetSensitivity+0x78>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4013      	ands	r3, r2
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	429a      	cmp	r2, r3
 800478e:	d11d      	bne.n	80047cc <BSP_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance],
 8004790:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <BSP_MOTION_SENSOR_GetSensitivity+0x7c>)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004798:	4812      	ldr	r0, [pc, #72]	; (80047e4 <BSP_MOTION_SENSOR_GetSensitivity+0x80>)
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	440b      	add	r3, r1
 80047a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	490f      	ldr	r1, [pc, #60]	; (80047e8 <BSP_MOTION_SENSOR_GetSensitivity+0x84>)
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4610      	mov	r0, r2
 80047b6:	4798      	blx	r3
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <BSP_MOTION_SENSOR_GetSensitivity+0x62>
          Sensitivity) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80047be:	f06f 0304 	mvn.w	r3, #4
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e005      	b.n	80047d2 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e002      	b.n	80047d2 <BSP_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80047cc:	f06f 0301 	mvn.w	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80047d2:	697b      	ldr	r3, [r7, #20]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20001ee4 	.word	0x20001ee4
 80047e0:	2000079c 	.word	0x2000079c
 80047e4:	20001ed4 	.word	0x20001ed4
 80047e8:	20001ed0 	.word	0x20001ed0

080047ec <BSP_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <BSP_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004800:	f06f 0301 	mvn.w	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e02a      	b.n	800485e <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004808:	4a17      	ldr	r2, [pc, #92]	; (8004868 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	429a      	cmp	r2, r3
 8004818:	d11e      	bne.n	8004858 <BSP_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800481a:	4a14      	ldr	r2, [pc, #80]	; (800486c <BSP_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004822:	4813      	ldr	r0, [pc, #76]	; (8004870 <BSP_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	440b      	add	r3, r1
 800482e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	490f      	ldr	r1, [pc, #60]	; (8004874 <BSP_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800483c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <BSP_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800484a:	f06f 0304 	mvn.w	r3, #4
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e005      	b.n	800485e <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e002      	b.n	800485e <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004858:	f06f 0301 	mvn.w	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800485e:	697b      	ldr	r3, [r7, #20]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20001ee4 	.word	0x20001ee4
 800486c:	2000079c 	.word	0x2000079c
 8004870:	20001ed4 	.word	0x20001ed4
 8004874:	20001ed0 	.word	0x20001ed0

08004878 <BSP_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_INSTANCES_NBR)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <BSP_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800488a:	f06f 0301 	mvn.w	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e029      	b.n	80048e6 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <BSP_MOTION_SENSOR_SetFullScale+0x78>)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d11d      	bne.n	80048e0 <BSP_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <BSP_MOTION_SENSOR_SetFullScale+0x7c>)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048ac:	4812      	ldr	r0, [pc, #72]	; (80048f8 <BSP_MOTION_SENSOR_SetFullScale+0x80>)
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4613      	mov	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	490f      	ldr	r1, [pc, #60]	; (80048fc <BSP_MOTION_SENSOR_SetFullScale+0x84>)
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4610      	mov	r0, r2
 80048ca:	4798      	blx	r3
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <BSP_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80048d2:	f06f 0304 	mvn.w	r3, #4
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e005      	b.n	80048e6 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e002      	b.n	80048e6 <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80048e0:	f06f 0301 	mvn.w	r3, #1
 80048e4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80048e6:	697b      	ldr	r3, [r7, #20]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20001ee4 	.word	0x20001ee4
 80048f4:	2000079c 	.word	0x2000079c
 80048f8:	20001ed4 	.word	0x20001ed4
 80048fc:	20001ed0 	.word	0x20001ed0

08004900 <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b092      	sub	sp, #72	; 0x48
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t             io_ctx;
  uint8_t                  id;
  static ISM330DHCX_Object_t  ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t   cap;
  int32_t ret = BSP_ERROR_NONE;
 8004908:	2300      	movs	r3, #0
 800490a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800490c:	2301      	movs	r3, #1
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = 0x0;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <ISM330DHCX_0_Probe+0x134>)
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <ISM330DHCX_0_Probe+0x138>)
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = BSP_ISM330DHCX_ReadReg;
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <ISM330DHCX_0_Probe+0x13c>)
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <ISM330DHCX_0_Probe+0x140>)
 8004924:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 8004926:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <ISM330DHCX_0_Probe+0x144>)
 8004928:	643b      	str	r3, [r7, #64]	; 0x40
  
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 800492a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800492e:	4619      	mov	r1, r3
 8004930:	4845      	ldr	r0, [pc, #276]	; (8004a48 <ISM330DHCX_0_Probe+0x148>)
 8004932:	f7fd fa63 	bl	8001dfc <ISM330DHCX_RegisterBusIO>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800493c:	f06f 0306 	mvn.w	r3, #6
 8004940:	647b      	str	r3, [r7, #68]	; 0x44
 8004942:	e071      	b.n	8004a28 <ISM330DHCX_0_Probe+0x128>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8004944:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004948:	4619      	mov	r1, r3
 800494a:	483f      	ldr	r0, [pc, #252]	; (8004a48 <ISM330DHCX_0_Probe+0x148>)
 800494c:	f7fd fb64 	bl	8002018 <ISM330DHCX_ReadID>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004956:	f06f 0306 	mvn.w	r3, #6
 800495a:	647b      	str	r3, [r7, #68]	; 0x44
 800495c:	e064      	b.n	8004a28 <ISM330DHCX_0_Probe+0x128>
  }
  else if (id != ISM330DHCX_ID)
 800495e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004962:	2b6b      	cmp	r3, #107	; 0x6b
 8004964:	d003      	beq.n	800496e <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004966:	f06f 0306 	mvn.w	r3, #6
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
 800496c:	e05c      	b.n	8004a28 <ISM330DHCX_0_Probe+0x128>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 800496e:	f107 0308 	add.w	r3, r7, #8
 8004972:	4619      	mov	r1, r3
 8004974:	4834      	ldr	r0, [pc, #208]	; (8004a48 <ISM330DHCX_0_Probe+0x148>)
 8004976:	f7fd fb65 	bl	8002044 <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800497a:	7a7b      	ldrb	r3, [r7, #9]
 800497c:	461a      	mov	r2, r3
 800497e:	7a3b      	ldrb	r3, [r7, #8]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	431a      	orrs	r2, r3
 8004984:	7abb      	ldrb	r3, [r7, #10]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4313      	orrs	r3, r2
 800498a:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <ISM330DHCX_0_Probe+0x14c>)
 800498c:	6013      	str	r3, [r2, #0]

    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 800498e:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <ISM330DHCX_0_Probe+0x150>)
 8004990:	4a2d      	ldr	r2, [pc, #180]	; (8004a48 <ISM330DHCX_0_Probe+0x148>)
 8004992:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8004994:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <ISM330DHCX_0_Probe+0x154>)
 8004996:	4a30      	ldr	r2, [pc, #192]	; (8004a58 <ISM330DHCX_0_Probe+0x158>)
 8004998:	601a      	str	r2, [r3, #0]

    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d018      	beq.n	80049d6 <ISM330DHCX_0_Probe+0xd6>
 80049a4:	7a3b      	ldrb	r3, [r7, #8]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d115      	bne.n	80049d6 <ISM330DHCX_0_Probe+0xd6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 80049aa:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <ISM330DHCX_0_Probe+0x15c>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <ISM330DHCX_0_Probe+0x160>)
 80049b0:	492c      	ldr	r1, [pc, #176]	; (8004a64 <ISM330DHCX_0_Probe+0x164>)
 80049b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 80049b6:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <ISM330DHCX_0_Probe+0x154>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <ISM330DHCX_0_Probe+0x150>)
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	4610      	mov	r0, r2
 80049c2:	4798      	blx	r3
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <ISM330DHCX_0_Probe+0xd2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80049ca:	f06f 0304 	mvn.w	r3, #4
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44
 80049d0:	e001      	b.n	80049d6 <ISM330DHCX_0_Probe+0xd6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d018      	beq.n	8004a12 <ISM330DHCX_0_Probe+0x112>
 80049e0:	7a7b      	ldrb	r3, [r7, #9]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d115      	bne.n	8004a12 <ISM330DHCX_0_Probe+0x112>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 80049e6:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <ISM330DHCX_0_Probe+0x15c>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4a1d      	ldr	r2, [pc, #116]	; (8004a60 <ISM330DHCX_0_Probe+0x160>)
 80049ec:	491e      	ldr	r1, [pc, #120]	; (8004a68 <ISM330DHCX_0_Probe+0x168>)
 80049ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 80049f2:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <ISM330DHCX_0_Probe+0x154>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <ISM330DHCX_0_Probe+0x150>)
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	4610      	mov	r0, r2
 80049fe:	4798      	blx	r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <ISM330DHCX_0_Probe+0x10e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a06:	f06f 0304 	mvn.w	r3, #4
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0c:	e001      	b.n	8004a12 <ISM330DHCX_0_Probe+0x112>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <ISM330DHCX_0_Probe+0x128>
 8004a1c:	7abb      	ldrb	r3, [r7, #10]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <ISM330DHCX_0_Probe+0x128>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a22:	f06f 0304 	mvn.w	r3, #4
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8004a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3748      	adds	r7, #72	; 0x48
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004b2d 	.word	0x08004b2d
 8004a3c:	08004bc9 	.word	0x08004bc9
 8004a40:	08004b51 	.word	0x08004b51
 8004a44:	0800451d 	.word	0x0800451d
 8004a48:	20001ee8 	.word	0x20001ee8
 8004a4c:	20001ee4 	.word	0x20001ee4
 8004a50:	20001ed0 	.word	0x20001ed0
 8004a54:	20001ee0 	.word	0x20001ee0
 8004a58:	20000738 	.word	0x20000738
 8004a5c:	2000079c 	.word	0x2000079c
 8004a60:	20001ed4 	.word	0x20001ed4
 8004a64:	20000748 	.word	0x20000748
 8004a68:	2000076c 	.word	0x2000076c

08004a6c <BSP_ISM330DHCX_Init>:
  
static int32_t BSP_ISM330DHCX_Init(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004a72:	f06f 0305 	mvn.w	r3, #5
 8004a76:	61fb      	str	r3, [r7, #28]
  
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a7e:	4829      	ldr	r0, [pc, #164]	; (8004b24 <BSP_ISM330DHCX_Init+0xb8>)
 8004a80:	f000 ffb2 	bl	80059e8 <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
  
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <BSP_ISM330DHCX_Init+0xbc>)
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <BSP_ISM330DHCX_Init+0xbc>)
 8004a96:	f043 0320 	orr.w	r3, r3, #32
 8004a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a9c:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <BSP_ISM330DHCX_Init+0xbc>)
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8004aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aac:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	481b      	ldr	r0, [pc, #108]	; (8004b24 <BSP_ISM330DHCX_Init+0xb8>)
 8004ab6:	f000 fcfb 	bl	80054b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8004aba:	2201      	movs	r2, #1
 8004abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ac0:	4818      	ldr	r0, [pc, #96]	; (8004b24 <BSP_ISM330DHCX_Init+0xb8>)
 8004ac2:	f000 ff91 	bl	80059e8 <HAL_GPIO_WritePin>

  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8004ac6:	f7ff fcb5 	bl	8004434 <BSP_SPI3_Init>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <BSP_ISM330DHCX_Init+0x68>
  {
    ret = BSP_ERROR_NONE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
  }
  

  /* GPIO Ports Clock Enable */
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8004ad4:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <BSP_ISM330DHCX_Init+0xbc>)
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <BSP_ISM330DHCX_Init+0xbc>)
 8004ada:	f043 0320 	orr.w	r3, r3, #32
 8004ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <BSP_ISM330DHCX_Init+0xbc>)
 8004ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 8004aec:	2310      	movs	r3, #16
 8004aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004af0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004af6:	2302      	movs	r3, #2
 8004af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	4619      	mov	r1, r3
 8004b04:	4807      	ldr	r0, [pc, #28]	; (8004b24 <BSP_ISM330DHCX_Init+0xb8>)
 8004b06:	f000 fcd3 	bl	80054b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	200a      	movs	r0, #10
 8004b10:	f000 fb45 	bl	800519e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 8004b14:	200a      	movs	r0, #10
 8004b16:	f000 fb5e 	bl	80051d6 <HAL_NVIC_EnableIRQ>
  

  return ret;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	48001400 	.word	0x48001400
 8004b28:	40021000 	.word	0x40021000

08004b2c <BSP_ISM330DHCX_DeInit>:

static int32_t BSP_ISM330DHCX_DeInit(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004b32:	f06f 0305 	mvn.w	r3, #5
 8004b36:	607b      	str	r3, [r7, #4]

  if(BSP_SPI3_DeInit() == BSP_ERROR_NONE)
 8004b38:	f7ff fca0 	bl	800447c <BSP_SPI3_DeInit>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <BSP_ISM330DHCX_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8004b46:	687b      	ldr	r3, [r7, #4]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <BSP_ISM330DHCX_WriteReg>:

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60ba      	str	r2, [r7, #8]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	81fb      	strh	r3, [r7, #14]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	81bb      	strh	r3, [r7, #12]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8004b6a:	89bb      	ldrh	r3, [r7, #12]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8004b70:	2200      	movs	r2, #0
 8004b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b76:	4813      	ldr	r0, [pc, #76]	; (8004bc4 <BSP_ISM330DHCX_WriteReg+0x74>)
 8004b78:	f000 ff36 	bl	80059e8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8004b7c:	f107 0313 	add.w	r3, r7, #19
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fc92 	bl	80044ac <BSP_SPI3_Send>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d002      	beq.n	8004b94 <BSP_ISM330DHCX_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004b8e:	f06f 0305 	mvn.w	r3, #5
 8004b92:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	4619      	mov	r1, r3
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f7ff fc87 	bl	80044ac <BSP_SPI3_Send>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d002      	beq.n	8004bac <BSP_ISM330DHCX_WriteReg+0x5c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ba6:	f06f 0305 	mvn.w	r3, #5
 8004baa:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8004bac:	2201      	movs	r2, #1
 8004bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bb2:	4804      	ldr	r0, [pc, #16]	; (8004bc4 <BSP_ISM330DHCX_WriteReg+0x74>)
 8004bb4:	f000 ff18 	bl	80059e8 <HAL_GPIO_WritePin>

  return ret;
 8004bb8:	697b      	ldr	r3, [r7, #20]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	48001400 	.word	0x48001400

08004bc8 <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60ba      	str	r2, [r7, #8]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	81fb      	strh	r3, [r7, #14]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	81bb      	strh	r3, [r7, #12]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8004be2:	89bb      	ldrh	r3, [r7, #12]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80U;
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bf8:	4812      	ldr	r0, [pc, #72]	; (8004c44 <BSP_ISM330DHCX_ReadReg+0x7c>)
 8004bfa:	f000 fef5 	bl	80059e8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8004bfe:	f107 0313 	add.w	r3, r7, #19
 8004c02:	2101      	movs	r1, #1
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fc51 	bl	80044ac <BSP_SPI3_Send>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d002      	beq.n	8004c16 <BSP_ISM330DHCX_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004c10:	f06f 0305 	mvn.w	r3, #5
 8004c14:	617b      	str	r3, [r7, #20]
  }

  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	68b8      	ldr	r0, [r7, #8]
 8004c1c:	f7ff fc62 	bl	80044e4 <BSP_SPI3_Recv>
 8004c20:	4602      	mov	r2, r0
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d002      	beq.n	8004c2e <BSP_ISM330DHCX_ReadReg+0x66>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004c28:	f06f 0305 	mvn.w	r3, #5
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c34:	4803      	ldr	r0, [pc, #12]	; (8004c44 <BSP_ISM330DHCX_ReadReg+0x7c>)
 8004c36:	f000 fed7 	bl	80059e8 <HAL_GPIO_WritePin>

  return ret;
 8004c3a:	697b      	ldr	r3, [r7, #20]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	48001400 	.word	0x48001400

08004c48 <BSP_MOTION_SENSOR_FIFO_Set_BDR>:
 * @param  Instance the device instance
 * @param  Odr FIFO ODR value
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;
      
  switch (Instance)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d133      	bne.n	8004cc4 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x7c>
    break;
#endif 
    
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
  case ISM330DHCX_0:
    if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x44>
    {
      if (ISM330DHCX_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd fe88 	bl	8002988 <ISM330DHCX_FIFO_ACC_Set_BDR>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x3e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c7e:	f06f 0304 	mvn.w	r3, #4
 8004c82:	617b      	str	r3, [r7, #20]
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
    }
    break;
 8004c84:	e022      	b.n	8004ccc <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
        ret = BSP_ERROR_NONE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
    break;
 8004c8a:	e01f      	b.n	8004ccc <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
    else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x74>
      if (ISM330DHCX_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd fefc 	bl	8002aa0 <ISM330DHCX_FIFO_GYRO_Set_BDR>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x6e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cae:	f06f 0304 	mvn.w	r3, #4
 8004cb2:	617b      	str	r3, [r7, #20]
    break;
 8004cb4:	e00a      	b.n	8004ccc <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
        ret = BSP_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
    break;
 8004cba:	e007      	b.n	8004ccc <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
      ret = BSP_ERROR_WRONG_PARAM;
 8004cbc:	f06f 0301 	mvn.w	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
    break;
 8004cc2:	e003      	b.n	8004ccc <BSP_MOTION_SENSOR_FIFO_Set_BDR+0x84>
#endif      
    
  default:
    ret = BSP_ERROR_WRONG_PARAM;
 8004cc4:	f06f 0301 	mvn.w	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
    break;
 8004cca:	bf00      	nop
  }
  
  return ret;
 8004ccc:	697b      	ldr	r3, [r7, #20]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20001ed0 	.word	0x20001ed0

08004cdc <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d112      	bne.n	8004d14 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
      break;
#endif      

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8004cee:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fd ff5c 	bl	8002bb8 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d06:	f06f 0304 	mvn.w	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8004d0c:	e006      	b.n	8004d1c <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
        ret = BSP_ERROR_NONE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
      break;
 8004d12:	e003      	b.n	8004d1c <BSP_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif      

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004d14:	f06f 0301 	mvn.w	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
      break;
 8004d1a:	bf00      	nop
  }

  return ret;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20001ed0 	.word	0x20001ed0

08004d2c <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d112      	bne.n	8004d64 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
      break;
#endif 

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d46:	887a      	ldrh	r2, [r7, #2]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fd ff65 	bl	8002c1a <ISM330DHCX_FIFO_Set_Watermark_Level>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d56:	f06f 0304 	mvn.w	r3, #4
 8004d5a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8004d5c:	e006      	b.n	8004d6c <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
        ret = BSP_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
      break;
 8004d62:	e003      	b.n	8004d6c <BSP_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004d64:	f06f 0301 	mvn.w	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
      break;
 8004d6a:	bf00      	nop
  }

  return ret;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20001ed0 	.word	0x20001ed0

08004d7c <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d112      	bne.n	8004db4 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
      break;
#endif      
      
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd ff55 	bl	8002c4a <ISM330DHCX_FIFO_Set_Stop_On_Fth>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004da6:	f06f 0304 	mvn.w	r3, #4
 8004daa:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8004dac:	e006      	b.n	8004dbc <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
        ret = BSP_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
      break;
 8004db2:	e003      	b.n	8004dbc <BSP_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif 
      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004db4:	f06f 0301 	mvn.w	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      break;
 8004dba:	bf00      	nop
  }

  return ret;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20001ed0 	.word	0x20001ed0

08004dcc <BSP_MOTION_SENSOR_FIFO_Get_Data_Word>:
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Get_Data_Word(uint32_t Instance,
                                                 uint32_t Function,
                                                 int16_t *Data)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch (Instance)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d131      	bne.n	8004e42 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x76>
  {
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x40>
      {
        if (ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 8004de8:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fd ff90 	bl	8002d18 <ISM330DHCX_FIFO_Get_Data_Word>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x3a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004dfe:	f06f 0304 	mvn.w	r3, #4
 8004e02:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 8004e04:	e021      	b.n	8004e4a <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
      break;
 8004e0a:	e01e      	b.n	8004e4a <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d011      	beq.n	8004e3a <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x6e>
        if (ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 8004e16:	4a0f      	ldr	r2, [pc, #60]	; (8004e54 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd ff79 	bl	8002d18 <ISM330DHCX_FIFO_Get_Data_Word>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x68>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004e2c:	f06f 0304 	mvn.w	r3, #4
 8004e30:	617b      	str	r3, [r7, #20]
      break;
 8004e32:	e00a      	b.n	8004e4a <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
          ret = BSP_ERROR_NONE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
      break;
 8004e38:	e007      	b.n	8004e4a <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
        ret = BSP_ERROR_WRONG_PARAM;
 8004e3a:	f06f 0301 	mvn.w	r3, #1
 8004e3e:	617b      	str	r3, [r7, #20]
      break;
 8004e40:	e003      	b.n	8004e4a <BSP_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004e42:	f06f 0301 	mvn.w	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
      break;
 8004e48:	bf00      	nop
  }

  return ret;
 8004e4a:	697b      	ldr	r3, [r7, #20]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20001ed0 	.word	0x20001ed0

08004e58 <BSP_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d112      	bne.n	8004e90 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x38>
      break;
#endif   

#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case ISM330DHCX_0:
      if (ISM330DHCX_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	4611      	mov	r1, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fd feff 	bl	8002c7a <ISM330DHCX_FIFO_Set_Mode>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004e82:	f06f 0304 	mvn.w	r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8004e88:	e006      	b.n	8004e98 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
      break;
 8004e8e:	e003      	b.n	8004e98 <BSP_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif
      
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004e90:	f06f 0301 	mvn.w	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
      break;
 8004e96:	bf00      	nop
  }

  return ret;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20001ed0 	.word	0x20001ed0

08004ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb2:	2003      	movs	r0, #3
 8004eb4:	f000 f968 	bl	8005188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f000 f815 	bl	8004ee8 <HAL_InitTick>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	71fb      	strb	r3, [r7, #7]
 8004ec8:	e001      	b.n	8004ece <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004eca:	f000 f805 	bl	8004ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ece:	79fb      	ldrb	r3, [r7, #7]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004ef4:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <HAL_InitTick+0x6c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d023      	beq.n	8004f44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004efc:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <HAL_InitTick+0x70>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <HAL_InitTick+0x6c>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f96d 	bl	80051f2 <HAL_SYSTICK_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b0f      	cmp	r3, #15
 8004f22:	d809      	bhi.n	8004f38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f24:	2200      	movs	r2, #0
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f2c:	f000 f937 	bl	800519e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <HAL_InitTick+0x74>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e007      	b.n	8004f48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	e004      	b.n	8004f48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	e001      	b.n	8004f48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200007b4 	.word	0x200007b4
 8004f58:	20000008 	.word	0x20000008
 8004f5c:	200007b0 	.word	0x200007b0

08004f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_IncTick+0x20>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_IncTick+0x24>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4413      	add	r3, r2
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_IncTick+0x24>)
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	200007b4 	.word	0x200007b4
 8004f84:	20001f18 	.word	0x20001f18

08004f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_GetTick+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20001f18 	.word	0x20001f18

08004fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fa8:	f7ff ffee 	bl	8004f88 <HAL_GetTick>
 8004fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb8:	d005      	beq.n	8004fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_Delay+0x44>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fc6:	bf00      	nop
 8004fc8:	f7ff ffde 	bl	8004f88 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d8f7      	bhi.n	8004fc8 <HAL_Delay+0x28>
  {
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200007b4 	.word	0x200007b4

08004fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <__NVIC_SetPriorityGrouping+0x44>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005004:	4013      	ands	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800501a:	4a04      	ldr	r2, [pc, #16]	; (800502c <__NVIC_SetPriorityGrouping+0x44>)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	60d3      	str	r3, [r2, #12]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	e000ed00 	.word	0xe000ed00

08005030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <__NVIC_GetPriorityGrouping+0x18>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	f003 0307 	and.w	r3, r3, #7
}
 800503e:	4618      	mov	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db0b      	blt.n	8005076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	f003 021f 	and.w	r2, r3, #31
 8005064:	4907      	ldr	r1, [pc, #28]	; (8005084 <__NVIC_EnableIRQ+0x38>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2001      	movs	r0, #1
 800506e:	fa00 f202 	lsl.w	r2, r0, r2
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	e000e100 	.word	0xe000e100

08005088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	6039      	str	r1, [r7, #0]
 8005092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005098:	2b00      	cmp	r3, #0
 800509a:	db0a      	blt.n	80050b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	490c      	ldr	r1, [pc, #48]	; (80050d4 <__NVIC_SetPriority+0x4c>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	0112      	lsls	r2, r2, #4
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	440b      	add	r3, r1
 80050ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b0:	e00a      	b.n	80050c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4908      	ldr	r1, [pc, #32]	; (80050d8 <__NVIC_SetPriority+0x50>)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	3b04      	subs	r3, #4
 80050c0:	0112      	lsls	r2, r2, #4
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	440b      	add	r3, r1
 80050c6:	761a      	strb	r2, [r3, #24]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000e100 	.word	0xe000e100
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f1c3 0307 	rsb	r3, r3, #7
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	bf28      	it	cs
 80050fa:	2304      	movcs	r3, #4
 80050fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3304      	adds	r3, #4
 8005102:	2b06      	cmp	r3, #6
 8005104:	d902      	bls.n	800510c <NVIC_EncodePriority+0x30>
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3b03      	subs	r3, #3
 800510a:	e000      	b.n	800510e <NVIC_EncodePriority+0x32>
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43da      	mvns	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	401a      	ands	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	43d9      	mvns	r1, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005134:	4313      	orrs	r3, r2
         );
}
 8005136:	4618      	mov	r0, r3
 8005138:	3724      	adds	r7, #36	; 0x24
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b01      	subs	r3, #1
 8005150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005154:	d301      	bcc.n	800515a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005156:	2301      	movs	r3, #1
 8005158:	e00f      	b.n	800517a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800515a:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <SysTick_Config+0x40>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005162:	210f      	movs	r1, #15
 8005164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005168:	f7ff ff8e 	bl	8005088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <SysTick_Config+0x40>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <SysTick_Config+0x40>)
 8005174:	2207      	movs	r2, #7
 8005176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	e000e010 	.word	0xe000e010

08005188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff29 	bl	8004fe8 <__NVIC_SetPriorityGrouping>
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b086      	sub	sp, #24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	4603      	mov	r3, r0
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051b0:	f7ff ff3e 	bl	8005030 <__NVIC_GetPriorityGrouping>
 80051b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff8e 	bl	80050dc <NVIC_EncodePriority>
 80051c0:	4602      	mov	r2, r0
 80051c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff ff5d 	bl	8005088 <__NVIC_SetPriority>
}
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff ff31 	bl	800504c <__NVIC_EnableIRQ>
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ffa2 	bl	8005144 <SysTick_Config>
 8005200:	4603      	mov	r3, r0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e054      	b.n	80052c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	7f5b      	ldrb	r3, [r3, #29]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f850 	bl	80052d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	791b      	ldrb	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10c      	bne.n	800525c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_CRC_Init+0xc4>)
 8005248:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0218 	bic.w	r2, r2, #24
 8005258:	609a      	str	r2, [r3, #8]
 800525a:	e00c      	b.n	8005276 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6899      	ldr	r1, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	461a      	mov	r2, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f83e 	bl	80052e8 <HAL_CRCEx_Polynomial_Set>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e028      	b.n	80052c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	795b      	ldrb	r3, [r3, #5]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005286:	611a      	str	r2, [r3, #16]
 8005288:	e004      	b.n	8005294 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6912      	ldr	r2, [r2, #16]
 8005292:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699a      	ldr	r2, [r3, #24]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	04c11db7 	.word	0x04c11db7

080052d4 <HAL_CRC_MspInit>:
  * @brief  Initializes the CRC MSP.
  * @param  hcrc CRC handle
  * @retval None
  */
__weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80052f8:	231f      	movs	r3, #31
 80052fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80052fc:	bf00      	nop
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1e5a      	subs	r2, r3, #1
 8005302:	613a      	str	r2, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d009      	beq.n	800531c <HAL_CRCEx_Polynomial_Set+0x34>
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b18      	cmp	r3, #24
 8005320:	d846      	bhi.n	80053b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	080053b7 	.word	0x080053b7
 800532c:	080053b1 	.word	0x080053b1
 8005330:	080053b1 	.word	0x080053b1
 8005334:	080053b1 	.word	0x080053b1
 8005338:	080053b1 	.word	0x080053b1
 800533c:	080053b1 	.word	0x080053b1
 8005340:	080053b1 	.word	0x080053b1
 8005344:	080053b1 	.word	0x080053b1
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053b1 	.word	0x080053b1
 8005350:	080053b1 	.word	0x080053b1
 8005354:	080053b1 	.word	0x080053b1
 8005358:	080053b1 	.word	0x080053b1
 800535c:	080053b1 	.word	0x080053b1
 8005360:	080053b1 	.word	0x080053b1
 8005364:	080053b1 	.word	0x080053b1
 8005368:	08005399 	.word	0x08005399
 800536c:	080053b1 	.word	0x080053b1
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053b1 	.word	0x080053b1
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080053b1 	.word	0x080053b1
 8005384:	080053b1 	.word	0x080053b1
 8005388:	0800538d 	.word	0x0800538d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b06      	cmp	r3, #6
 8005390:	d913      	bls.n	80053ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005396:	e010      	b.n	80053ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b07      	cmp	r3, #7
 800539c:	d90f      	bls.n	80053be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80053a2:	e00c      	b.n	80053be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d90b      	bls.n	80053c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80053ae:	e008      	b.n	80053c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
      break;
 80053b4:	e006      	b.n	80053c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80053b6:	bf00      	nop
 80053b8:	e004      	b.n	80053c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80053c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 0118 	bic.w	r1, r3, #24
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	460b      	mov	r3, r1
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	605a      	str	r2, [r3, #4]
      break;
 8005412:	e002      	b.n	800541a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
      break;
 8005418:	bf00      	nop
  }

  return status;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e003      	b.n	8005444 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005442:	2300      	movs	r3, #0
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	2201      	movs	r2, #1
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <HAL_EXTI_IRQHandler+0x5c>)
 800547a:	4413      	add	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4798      	blx	r3
    }
  }
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40010414 	.word	0x40010414

080054b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054be:	e166      	b.n	800578e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	4013      	ands	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8158 	beq.w	8005788 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d005      	beq.n	80054f0 <HAL_GPIO_Init+0x40>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d130      	bne.n	8005552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005526:	2201      	movs	r2, #1
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 0201 	and.w	r2, r3, #1
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d017      	beq.n	800558e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	2203      	movs	r2, #3
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4013      	ands	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d123      	bne.n	80055e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	08da      	lsrs	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3208      	adds	r2, #8
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	220f      	movs	r2, #15
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4013      	ands	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	08da      	lsrs	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3208      	adds	r2, #8
 80055dc:	6939      	ldr	r1, [r7, #16]
 80055de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2203      	movs	r2, #3
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4013      	ands	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0203 	and.w	r2, r3, #3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80b2 	beq.w	8005788 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005624:	4b61      	ldr	r3, [pc, #388]	; (80057ac <HAL_GPIO_Init+0x2fc>)
 8005626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005628:	4a60      	ldr	r2, [pc, #384]	; (80057ac <HAL_GPIO_Init+0x2fc>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6613      	str	r3, [r2, #96]	; 0x60
 8005630:	4b5e      	ldr	r3, [pc, #376]	; (80057ac <HAL_GPIO_Init+0x2fc>)
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800563c:	4a5c      	ldr	r2, [pc, #368]	; (80057b0 <HAL_GPIO_Init+0x300>)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	3302      	adds	r3, #2
 8005644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	220f      	movs	r2, #15
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005666:	d02b      	beq.n	80056c0 <HAL_GPIO_Init+0x210>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a52      	ldr	r2, [pc, #328]	; (80057b4 <HAL_GPIO_Init+0x304>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d025      	beq.n	80056bc <HAL_GPIO_Init+0x20c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a51      	ldr	r2, [pc, #324]	; (80057b8 <HAL_GPIO_Init+0x308>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01f      	beq.n	80056b8 <HAL_GPIO_Init+0x208>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a50      	ldr	r2, [pc, #320]	; (80057bc <HAL_GPIO_Init+0x30c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d019      	beq.n	80056b4 <HAL_GPIO_Init+0x204>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a4f      	ldr	r2, [pc, #316]	; (80057c0 <HAL_GPIO_Init+0x310>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_GPIO_Init+0x200>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a4e      	ldr	r2, [pc, #312]	; (80057c4 <HAL_GPIO_Init+0x314>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00d      	beq.n	80056ac <HAL_GPIO_Init+0x1fc>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a4d      	ldr	r2, [pc, #308]	; (80057c8 <HAL_GPIO_Init+0x318>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d007      	beq.n	80056a8 <HAL_GPIO_Init+0x1f8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a4c      	ldr	r2, [pc, #304]	; (80057cc <HAL_GPIO_Init+0x31c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d101      	bne.n	80056a4 <HAL_GPIO_Init+0x1f4>
 80056a0:	2307      	movs	r3, #7
 80056a2:	e00e      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056a4:	2308      	movs	r3, #8
 80056a6:	e00c      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056a8:	2306      	movs	r3, #6
 80056aa:	e00a      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056ac:	2305      	movs	r3, #5
 80056ae:	e008      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056b0:	2304      	movs	r3, #4
 80056b2:	e006      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056b4:	2303      	movs	r3, #3
 80056b6:	e004      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e002      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_GPIO_Init+0x212>
 80056c0:	2300      	movs	r3, #0
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	f002 0203 	and.w	r2, r2, #3
 80056c8:	0092      	lsls	r2, r2, #2
 80056ca:	4093      	lsls	r3, r2
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056d2:	4937      	ldr	r1, [pc, #220]	; (80057b0 <HAL_GPIO_Init+0x300>)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	089b      	lsrs	r3, r3, #2
 80056d8:	3302      	adds	r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056e0:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <HAL_GPIO_Init+0x320>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005704:	4a32      	ldr	r2, [pc, #200]	; (80057d0 <HAL_GPIO_Init+0x320>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_GPIO_Init+0x320>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800572e:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <HAL_GPIO_Init+0x320>)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005734:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <HAL_GPIO_Init+0x320>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	43db      	mvns	r3, r3
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005758:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <HAL_GPIO_Init+0x320>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <HAL_GPIO_Init+0x320>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	43db      	mvns	r3, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005782:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <HAL_GPIO_Init+0x320>)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3301      	adds	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	f47f ae91 	bne.w	80054c0 <HAL_GPIO_Init+0x10>
  }
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40010000 	.word	0x40010000
 80057b4:	48000400 	.word	0x48000400
 80057b8:	48000800 	.word	0x48000800
 80057bc:	48000c00 	.word	0x48000c00
 80057c0:	48001000 	.word	0x48001000
 80057c4:	48001400 	.word	0x48001400
 80057c8:	48001800 	.word	0x48001800
 80057cc:	48001c00 	.word	0x48001c00
 80057d0:	40010400 	.word	0x40010400

080057d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80057e2:	e0c9      	b.n	8005978 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80057e4:	2201      	movs	r2, #1
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	4013      	ands	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80bc 	beq.w	8005972 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80057fa:	4a66      	ldr	r2, [pc, #408]	; (8005994 <HAL_GPIO_DeInit+0x1c0>)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	089b      	lsrs	r3, r3, #2
 8005800:	3302      	adds	r3, #2
 8005802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005806:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	220f      	movs	r2, #15
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005822:	d02b      	beq.n	800587c <HAL_GPIO_DeInit+0xa8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a5c      	ldr	r2, [pc, #368]	; (8005998 <HAL_GPIO_DeInit+0x1c4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d025      	beq.n	8005878 <HAL_GPIO_DeInit+0xa4>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a5b      	ldr	r2, [pc, #364]	; (800599c <HAL_GPIO_DeInit+0x1c8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d01f      	beq.n	8005874 <HAL_GPIO_DeInit+0xa0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a5a      	ldr	r2, [pc, #360]	; (80059a0 <HAL_GPIO_DeInit+0x1cc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d019      	beq.n	8005870 <HAL_GPIO_DeInit+0x9c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a59      	ldr	r2, [pc, #356]	; (80059a4 <HAL_GPIO_DeInit+0x1d0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <HAL_GPIO_DeInit+0x98>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a58      	ldr	r2, [pc, #352]	; (80059a8 <HAL_GPIO_DeInit+0x1d4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00d      	beq.n	8005868 <HAL_GPIO_DeInit+0x94>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a57      	ldr	r2, [pc, #348]	; (80059ac <HAL_GPIO_DeInit+0x1d8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <HAL_GPIO_DeInit+0x90>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a56      	ldr	r2, [pc, #344]	; (80059b0 <HAL_GPIO_DeInit+0x1dc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_GPIO_DeInit+0x8c>
 800585c:	2307      	movs	r3, #7
 800585e:	e00e      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 8005860:	2308      	movs	r3, #8
 8005862:	e00c      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 8005864:	2306      	movs	r3, #6
 8005866:	e00a      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 8005868:	2305      	movs	r3, #5
 800586a:	e008      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 800586c:	2304      	movs	r3, #4
 800586e:	e006      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 8005870:	2303      	movs	r3, #3
 8005872:	e004      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 8005874:	2302      	movs	r3, #2
 8005876:	e002      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_GPIO_DeInit+0xaa>
 800587c:	2300      	movs	r3, #0
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	f002 0203 	and.w	r2, r2, #3
 8005884:	0092      	lsls	r2, r2, #2
 8005886:	4093      	lsls	r3, r2
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	429a      	cmp	r2, r3
 800588c:	d132      	bne.n	80058f4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800588e:	4b49      	ldr	r3, [pc, #292]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	43db      	mvns	r3, r3
 8005896:	4947      	ldr	r1, [pc, #284]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 8005898:	4013      	ands	r3, r2
 800589a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800589c:	4b45      	ldr	r3, [pc, #276]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	4943      	ldr	r1, [pc, #268]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80058aa:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	4940      	ldr	r1, [pc, #256]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80058b8:	4b3e      	ldr	r3, [pc, #248]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	43db      	mvns	r3, r3
 80058c0:	493c      	ldr	r1, [pc, #240]	; (80059b4 <HAL_GPIO_DeInit+0x1e0>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	220f      	movs	r2, #15
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80058d6:	4a2f      	ldr	r2, [pc, #188]	; (8005994 <HAL_GPIO_DeInit+0x1c0>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	3302      	adds	r3, #2
 80058de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	43da      	mvns	r2, r3
 80058e6:	482b      	ldr	r0, [pc, #172]	; (8005994 <HAL_GPIO_DeInit+0x1c0>)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	089b      	lsrs	r3, r3, #2
 80058ec:	400a      	ands	r2, r1
 80058ee:	3302      	adds	r3, #2
 80058f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	2103      	movs	r1, #3
 80058fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	08da      	lsrs	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3208      	adds	r2, #8
 8005910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	220f      	movs	r2, #15
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	08d2      	lsrs	r2, r2, #3
 8005928:	4019      	ands	r1, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3208      	adds	r2, #8
 800592e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	2103      	movs	r1, #3
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	2101      	movs	r1, #1
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	2103      	movs	r1, #3
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	43db      	mvns	r3, r3
 800596c:	401a      	ands	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	3301      	adds	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f af2f 	bne.w	80057e4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40010000 	.word	0x40010000
 8005998:	48000400 	.word	0x48000400
 800599c:	48000800 	.word	0x48000800
 80059a0:	48000c00 	.word	0x48000c00
 80059a4:	48001000 	.word	0x48001000
 80059a8:	48001400 	.word	0x48001400
 80059ac:	48001800 	.word	0x48001800
 80059b0:	48001c00 	.word	0x48001c00
 80059b4:	40010400 	.word	0x40010400

080059b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	887b      	ldrh	r3, [r7, #2]
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	e001      	b.n	80059da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
 80059f4:	4613      	mov	r3, r2
 80059f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059f8:	787b      	ldrb	r3, [r7, #1]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059fe:	887a      	ldrh	r2, [r7, #2]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a04:	e002      	b.n	8005a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a06:	887a      	ldrh	r2, [r7, #2]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a2e:	4a05      	ldr	r2, [pc, #20]	; (8005a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f806 	bl	8005a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40010400 	.word	0x40010400

08005a48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a60:	b08f      	sub	sp, #60	; 0x3c
 8005a62:	af0a      	add	r7, sp, #40	; 0x28
 8005a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e116      	b.n	8005c9e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f007 f9e8 	bl	800ce60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2203      	movs	r2, #3
 8005a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f004 f8a1 	bl	8009bf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	687e      	ldr	r6, [r7, #4]
 8005abc:	466d      	mov	r5, sp
 8005abe:	f106 0410 	add.w	r4, r6, #16
 8005ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ad2:	1d33      	adds	r3, r6, #4
 8005ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ad6:	6838      	ldr	r0, [r7, #0]
 8005ad8:	f003 ffb4 	bl	8009a44 <USB_CoreInit>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e0d7      	b.n	8005c9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f004 f88f 	bl	8009c18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
 8005afe:	e04a      	b.n	8005b96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	333d      	adds	r3, #61	; 0x3d
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b14:	7bfa      	ldrb	r2, [r7, #15]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	333c      	adds	r3, #60	; 0x3c
 8005b24:	7bfa      	ldrb	r2, [r7, #15]
 8005b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b28:	7bfa      	ldrb	r2, [r7, #15]
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	b298      	uxth	r0, r3
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	3344      	adds	r3, #68	; 0x44
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b40:	7bfa      	ldrb	r2, [r7, #15]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	3340      	adds	r3, #64	; 0x40
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3348      	adds	r3, #72	; 0x48
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	334c      	adds	r3, #76	; 0x4c
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b7c:	7bfa      	ldrb	r2, [r7, #15]
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	4613      	mov	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	3354      	adds	r3, #84	; 0x54
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	3301      	adds	r3, #1
 8005b94:	73fb      	strb	r3, [r7, #15]
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d3af      	bcc.n	8005b00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e044      	b.n	8005c30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005be8:	7bfa      	ldrb	r2, [r7, #15]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bfe:	7bfa      	ldrb	r2, [r7, #15]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
 8005c30:	7bfa      	ldrb	r2, [r7, #15]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d3b5      	bcc.n	8005ba6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	687e      	ldr	r6, [r7, #4]
 8005c42:	466d      	mov	r5, sp
 8005c44:	f106 0410 	add.w	r4, r6, #16
 8005c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c58:	1d33      	adds	r3, r6, #4
 8005c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f004 f827 	bl	8009cb0 <USB_DevInit>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e014      	b.n	8005c9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d102      	bne.n	8005c92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 f881 	bl	8006d94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f005 f8af 	bl	800adfa <USB_DevDisconnect>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ca6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_PCD_Start+0x1c>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e01c      	b.n	8005cfc <HAL_PCD_Start+0x56>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d105      	bne.n	8005cde <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f003 ff76 	bl	8009bd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f005 f863 	bl	800adb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b08d      	sub	sp, #52	; 0x34
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f005 f921 	bl	800af62 <USB_GetMode>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 847e 	bne.w	8006624 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f005 f885 	bl	800ae3c <USB_ReadInterrupts>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8474 	beq.w	8006622 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f005 f872 	bl	800ae3c <USB_ReadInterrupts>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d107      	bne.n	8005d72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f002 0202 	and.w	r2, r2, #2
 8005d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f005 f860 	bl	800ae3c <USB_ReadInterrupts>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b10      	cmp	r3, #16
 8005d84:	d161      	bne.n	8005e4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699a      	ldr	r2, [r3, #24]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0210 	bic.w	r2, r2, #16
 8005d94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 020f 	and.w	r2, r3, #15
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	3304      	adds	r3, #4
 8005db4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	0c5b      	lsrs	r3, r3, #17
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d124      	bne.n	8005e0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d035      	beq.n	8005e3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	6a38      	ldr	r0, [r7, #32]
 8005de2:	f004 fe97 	bl	800ab14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005df2:	441a      	add	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e04:	441a      	add	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
 8005e0a:	e016      	b.n	8005e3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	0c5b      	lsrs	r3, r3, #17
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2b06      	cmp	r3, #6
 8005e16:	d110      	bne.n	8005e3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e1e:	2208      	movs	r2, #8
 8005e20:	4619      	mov	r1, r3
 8005e22:	6a38      	ldr	r0, [r7, #32]
 8005e24:	f004 fe76 	bl	800ab14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e34:	441a      	add	r2, r3
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0210 	orr.w	r2, r2, #16
 8005e48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 fff4 	bl	800ae3c <USB_ReadInterrupts>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e5e:	f040 80a7 	bne.w	8005fb0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f004 fff9 	bl	800ae62 <USB_ReadDevAllOutEpInterrupt>
 8005e70:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005e72:	e099      	b.n	8005fa8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 808e 	beq.w	8005f9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f005 f81d 	bl	800aeca <USB_ReadDevOutEPInterrupt>
 8005e90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2301      	movs	r3, #1
 8005eac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fe95 	bl	8006be0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00c      	beq.n	8005eda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2308      	movs	r3, #8
 8005ed0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fed1 	bl	8006c7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d030      	beq.n	8005f62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d109      	bne.n	8005f20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	3304      	adds	r3, #4
 8005f34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d108      	bne.n	8005f50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2200      	movs	r2, #0
 8005f42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f007 f8cc 	bl	800d0e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2302      	movs	r3, #2
 8005f60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	461a      	mov	r2, r3
 8005f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f47f af62 	bne.w	8005e74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f004 ff41 	bl	800ae3c <USB_ReadInterrupts>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fc4:	f040 80a4 	bne.w	8006110 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f004 ff62 	bl	800ae96 <USB_ReadDevAllInEpInterrupt>
 8005fd2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005fd8:	e096      	b.n	8006108 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 808b 	beq.w	80060fc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f004 ff88 	bl	800af06 <USB_ReadDevInEPInterrupt>
 8005ff6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2201      	movs	r2, #1
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	43db      	mvns	r3, r3
 800601c:	69f9      	ldr	r1, [r7, #28]
 800601e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006022:	4013      	ands	r3, r2
 8006024:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006032:	461a      	mov	r2, r3
 8006034:	2301      	movs	r3, #1
 8006036:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	b2db      	uxtb	r3, r3
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f006 ffbd 	bl	800cfbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	461a      	mov	r2, r3
 800605c:	2308      	movs	r3, #8
 800605e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	461a      	mov	r2, r3
 8006078:	2310      	movs	r3, #16
 800607a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	461a      	mov	r2, r3
 8006094:	2340      	movs	r3, #64	; 0x40
 8006096:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d023      	beq.n	80060ea <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80060a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060a4:	6a38      	ldr	r0, [r7, #32]
 80060a6:	f003 ff4f 	bl	8009f48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	4613      	mov	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	3338      	adds	r3, #56	; 0x38
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	4413      	add	r3, r2
 80060ba:	3304      	adds	r3, #4
 80060bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	78db      	ldrb	r3, [r3, #3]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d108      	bne.n	80060d8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2200      	movs	r2, #0
 80060ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f007 f81a 	bl	800d10c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	461a      	mov	r2, r3
 80060e6:	2302      	movs	r3, #2
 80060e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80060f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fcea 	bl	8006ad0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	3301      	adds	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	f47f af65 	bne.w	8005fda <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f004 fe91 	bl	800ae3c <USB_ReadInterrupts>
 800611a:	4603      	mov	r3, r0
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006124:	d122      	bne.n	800616c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006140:	2b01      	cmp	r3, #1
 8006142:	d108      	bne.n	8006156 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800614c:	2100      	movs	r1, #0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f007 fa4c 	bl	800d5ec <HAL_PCDEx_LPM_Callback>
 8006154:	e002      	b.n	800615c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f006 ff9e 	bl	800d098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800616a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f004 fe63 	bl	800ae3c <USB_ReadInterrupts>
 8006176:	4603      	mov	r3, r0
 8006178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800617c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006180:	d112      	bne.n	80061a8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b01      	cmp	r3, #1
 8006190:	d102      	bne.n	8006198 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f006 ff5a 	bl	800d04c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80061a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f004 fe45 	bl	800ae3c <USB_ReadInterrupts>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061bc:	d121      	bne.n	8006202 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80061cc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d111      	bne.n	80061fc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	f003 020f 	and.w	r2, r3, #15
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80061f2:	2101      	movs	r1, #1
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f007 f9f9 	bl	800d5ec <HAL_PCDEx_LPM_Callback>
 80061fa:	e002      	b.n	8006202 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f006 ff25 	bl	800d04c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f004 fe18 	bl	800ae3c <USB_ReadInterrupts>
 800620c:	4603      	mov	r3, r0
 800620e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006216:	f040 80b5 	bne.w	8006384 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2110      	movs	r1, #16
 8006234:	4618      	mov	r0, r3
 8006236:	f003 fe87 	bl	8009f48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800623a:	2300      	movs	r3, #0
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623e:	e046      	b.n	80062ce <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	461a      	mov	r2, r3
 800624e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006252:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006272:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	461a      	mov	r2, r3
 8006282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006286:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	3301      	adds	r3, #1
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d3b3      	bcc.n	8006240 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80062ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d016      	beq.n	8006322 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006304:	f043 030b 	orr.w	r3, r3, #11
 8006308:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631a:	f043 030b 	orr.w	r3, r3, #11
 800631e:	6453      	str	r3, [r2, #68]	; 0x44
 8006320:	e015      	b.n	800634e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006334:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006338:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006348:	f043 030b 	orr.w	r3, r3, #11
 800634c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006360:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f004 fe28 	bl	800afc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006382:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f004 fd57 	bl	800ae3c <USB_ReadInterrupts>
 800638e:	4603      	mov	r3, r0
 8006390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006398:	d124      	bne.n	80063e4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f004 fded 	bl	800af7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f003 fe4a 	bl	800a042 <USB_GetDevSpeed>
 80063ae:	4603      	mov	r3, r0
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681c      	ldr	r4, [r3, #0]
 80063ba:	f001 fbd1 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 80063be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	4620      	mov	r0, r4
 80063ca:	f003 fb67 	bl	8009a9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f006 fe1d 	bl	800d00e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80063e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f004 fd27 	bl	800ae3c <USB_ReadInterrupts>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d10a      	bne.n	800640e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f006 fdfa 	bl	800cff2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f002 0208 	and.w	r2, r2, #8
 800640c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f004 fd12 	bl	800ae3c <USB_ReadInterrupts>
 8006418:	4603      	mov	r3, r0
 800641a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d122      	bne.n	8006468 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800642e:	2301      	movs	r3, #1
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
 8006432:	e014      	b.n	800645e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d105      	bne.n	8006458 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fb0b 	bl	8006a6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	3301      	adds	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006464:	429a      	cmp	r2, r3
 8006466:	d3e5      	bcc.n	8006434 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f004 fce5 	bl	800ae3c <USB_ReadInterrupts>
 8006472:	4603      	mov	r3, r0
 8006474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647c:	d13b      	bne.n	80064f6 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800647e:	2301      	movs	r3, #1
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
 8006482:	e02b      	b.n	80064dc <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006498:	4613      	mov	r3, r2
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	3340      	adds	r3, #64	; 0x40
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d115      	bne.n	80064d6 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80064aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da12      	bge.n	80064d6 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	333f      	adds	r3, #63	; 0x3f
 80064c0:	2201      	movs	r2, #1
 80064c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 facc 	bl	8006a6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	3301      	adds	r3, #1
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d3ce      	bcc.n	8006484 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80064f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f004 fc9e 	bl	800ae3c <USB_ReadInterrupts>
 8006500:	4603      	mov	r3, r0
 8006502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800650a:	d155      	bne.n	80065b8 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800650c:	2301      	movs	r3, #1
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
 8006510:	e045      	b.n	800659e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006526:	4613      	mov	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d12e      	bne.n	8006598 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800653a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800653c:	2b00      	cmp	r3, #0
 800653e:	da2b      	bge.n	8006598 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800654c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006550:	429a      	cmp	r2, r3
 8006552:	d121      	bne.n	8006598 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006594:	6053      	str	r3, [r2, #4]
            break;
 8006596:	e007      	b.n	80065a8 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	3301      	adds	r3, #1
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d3b4      	bcc.n	8006512 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80065b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f004 fc3d 	bl	800ae3c <USB_ReadInterrupts>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d10a      	bne.n	80065e4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f006 fdae 	bl	800d130 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80065e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f004 fc27 	bl	800ae3c <USB_ReadInterrupts>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d115      	bne.n	8006624 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f006 fd9e 	bl	800d14c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	e000      	b.n	8006624 <HAL_PCD_IRQHandler+0x920>
      return;
 8006622:	bf00      	nop
    }
  }
}
 8006624:	3734      	adds	r7, #52	; 0x34
 8006626:	46bd      	mov	sp, r7
 8006628:	bd90      	pop	{r4, r7, pc}

0800662a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_PCD_SetAddress+0x1a>
 8006640:	2302      	movs	r3, #2
 8006642:	e013      	b.n	800666c <HAL_PCD_SetAddress+0x42>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f004 fb85 	bl	800ad6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	461a      	mov	r2, r3
 8006682:	4603      	mov	r3, r0
 8006684:	70fb      	strb	r3, [r7, #3]
 8006686:	460b      	mov	r3, r1
 8006688:	803b      	strh	r3, [r7, #0]
 800668a:	4613      	mov	r3, r2
 800668c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006696:	2b00      	cmp	r3, #0
 8006698:	da0f      	bge.n	80066ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	3338      	adds	r3, #56	; 0x38
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	3304      	adds	r3, #4
 80066b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	705a      	strb	r2, [r3, #1]
 80066b8:	e00f      	b.n	80066da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	f003 020f 	and.w	r2, r3, #15
 80066c0:	4613      	mov	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	4413      	add	r3, r2
 80066d0:	3304      	adds	r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80066e6:	883a      	ldrh	r2, [r7, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	78ba      	ldrb	r2, [r7, #2]
 80066f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006704:	78bb      	ldrb	r3, [r7, #2]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d102      	bne.n	8006710 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_PCD_EP_Open+0xaa>
 800671a:	2302      	movs	r3, #2
 800671c:	e00e      	b.n	800673c <HAL_PCD_EP_Open+0xc8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	4618      	mov	r0, r3
 800672e:	f003 fca7 	bl	800a080 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800673a:	7afb      	ldrb	r3, [r7, #11]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006754:	2b00      	cmp	r3, #0
 8006756:	da0f      	bge.n	8006778 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	f003 020f 	and.w	r2, r3, #15
 800675e:	4613      	mov	r3, r2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	3338      	adds	r3, #56	; 0x38
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	4413      	add	r3, r2
 800676c:	3304      	adds	r3, #4
 800676e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	705a      	strb	r2, [r3, #1]
 8006776:	e00f      	b.n	8006798 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 020f 	and.w	r2, r3, #15
 800677e:	4613      	mov	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4413      	add	r3, r2
 800678e:	3304      	adds	r3, #4
 8006790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_PCD_EP_Close+0x6e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e00e      	b.n	80067d0 <HAL_PCD_EP_Close+0x8c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f003 fce5 	bl	800a190 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	607a      	str	r2, [r7, #4]
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	460b      	mov	r3, r1
 80067e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	3304      	adds	r3, #4
 8006800:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2200      	movs	r2, #0
 8006812:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2200      	movs	r2, #0
 8006818:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	b2da      	uxtb	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6979      	ldr	r1, [r7, #20]
 8006836:	4618      	mov	r0, r3
 8006838:	f003 ff66 	bl	800a708 <USB_EP0StartXfer>
 800683c:	e005      	b.n	800684a <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6979      	ldr	r1, [r7, #20]
 8006844:	4618      	mov	r0, r3
 8006846:	f003 fd7f 	bl	800a348 <USB_EPStartXfer>
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006876:	681b      	ldr	r3, [r3, #0]
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	460b      	mov	r3, r1
 8006892:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	f003 020f 	and.w	r2, r3, #15
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	3338      	adds	r3, #56	; 0x38
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2200      	movs	r2, #0
 80068bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2201      	movs	r2, #1
 80068c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6979      	ldr	r1, [r7, #20]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f003 ff11 	bl	800a708 <USB_EP0StartXfer>
 80068e6:	e005      	b.n	80068f4 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6979      	ldr	r1, [r7, #20]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 fd2a 	bl	800a348 <USB_EPStartXfer>
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 020f 	and.w	r2, r3, #15
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	429a      	cmp	r2, r3
 8006916:	d901      	bls.n	800691c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e04e      	b.n	80069ba <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800691c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006920:	2b00      	cmp	r3, #0
 8006922:	da0f      	bge.n	8006944 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	3338      	adds	r3, #56	; 0x38
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	4413      	add	r3, r2
 8006938:	3304      	adds	r3, #4
 800693a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	705a      	strb	r2, [r3, #1]
 8006942:	e00d      	b.n	8006960 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	4613      	mov	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	b2da      	uxtb	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_PCD_EP_SetStall+0x82>
 800697c:	2302      	movs	r3, #2
 800697e:	e01c      	b.n	80069ba <HAL_PCD_EP_SetStall+0xbc>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68f9      	ldr	r1, [r7, #12]
 800698e:	4618      	mov	r0, r3
 8006990:	f004 f918 	bl	800abc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f004 fb0a 	bl	800afc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	f003 020f 	and.w	r2, r3, #15
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d901      	bls.n	80069e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e042      	b.n	8006a66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da0f      	bge.n	8006a08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	f003 020f 	and.w	r2, r3, #15
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	3338      	adds	r3, #56	; 0x38
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	4413      	add	r3, r2
 80069fc:	3304      	adds	r3, #4
 80069fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	705a      	strb	r2, [r3, #1]
 8006a06:	e00f      	b.n	8006a28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	f003 020f 	and.w	r2, r3, #15
 8006a0e:	4613      	mov	r3, r2
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3304      	adds	r3, #4
 8006a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_PCD_EP_ClrStall+0x86>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e00e      	b.n	8006a66 <HAL_PCD_EP_ClrStall+0xa4>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 f922 	bl	800aca0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da0c      	bge.n	8006a9c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	f003 020f 	and.w	r2, r3, #15
 8006a88:	4613      	mov	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	3338      	adds	r3, #56	; 0x38
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	3304      	adds	r3, #4
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e00c      	b.n	8006ab6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f003 ff45 	bl	800a94c <USB_EPStopXfer>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	3338      	adds	r3, #56	; 0x38
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	3304      	adds	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d901      	bls.n	8006b08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e067      	b.n	8006bd8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d902      	bls.n	8006b24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3303      	adds	r3, #3
 8006b28:	089b      	lsrs	r3, r3, #2
 8006b2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b2c:	e026      	b.n	8006b7c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d902      	bls.n	8006b4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	3303      	adds	r3, #3
 8006b4e:	089b      	lsrs	r3, r3, #2
 8006b50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6919      	ldr	r1, [r3, #16]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	6978      	ldr	r0, [r7, #20]
 8006b60:	f003 ff9e 	bl	800aaa0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	441a      	add	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	441a      	add	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d809      	bhi.n	8006ba6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d203      	bcs.n	8006ba6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1c3      	bne.n	8006b2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d811      	bhi.n	8006bd6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	2201      	movs	r2, #1
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	6939      	ldr	r1, [r7, #16]
 8006bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	333c      	adds	r3, #60	; 0x3c
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a19      	ldr	r2, [pc, #100]	; (8006c78 <PCD_EP_OutXfrComplete_int+0x98>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d124      	bne.n	8006c60 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	6093      	str	r3, [r2, #8]
 8006c34:	e01a      	b.n	8006c6c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2320      	movs	r3, #32
 8006c50:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f006 f995 	bl	800cf88 <HAL_PCD_DataOutStageCallback>
 8006c5e:	e005      	b.n	8006c6c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f006 f98e 	bl	800cf88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	4f54310a 	.word	0x4f54310a

08006c7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	333c      	adds	r3, #60	; 0x3c
 8006c94:	3304      	adds	r3, #4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a0c      	ldr	r2, [pc, #48]	; (8006ce0 <PCD_EP_OutSetupPacket_int+0x64>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d90e      	bls.n	8006cd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f006 f947 	bl	800cf64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	4f54300a 	.word	0x4f54300a

08006ce4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d107      	bne.n	8006d12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d02:	883b      	ldrh	r3, [r7, #0]
 8006d04:	0419      	lsls	r1, r3, #16
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d10:	e028      	b.n	8006d64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
 8006d24:	e00d      	b.n	8006d42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	3340      	adds	r3, #64	; 0x40
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	0c1b      	lsrs	r3, r3, #16
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d3ec      	bcc.n	8006d26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d4c:	883b      	ldrh	r3, [r7, #0]
 8006d4e:	0418      	lsls	r0, r3, #16
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	4302      	orrs	r2, r0
 8006d5c:	3340      	adds	r3, #64	; 0x40
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	887a      	ldrh	r2, [r7, #2]
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	f043 0303 	orr.w	r3, r3, #3
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a04      	ldr	r2, [pc, #16]	; (8006df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dea:	6013      	str	r3, [r2, #0]
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40007000 	.word	0x40007000

08006dfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e00:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0c:	d102      	bne.n	8006e14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e12:	e00b      	b.n	8006e2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006e14:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e22:	d102      	bne.n	8006e2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e28:	e000      	b.n	8006e2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006e2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40007000 	.word	0x40007000

08006e3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d141      	bne.n	8006ece <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e4a:	4b4b      	ldr	r3, [pc, #300]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e56:	d131      	bne.n	8006ebc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e58:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e5e:	4a46      	ldr	r2, [pc, #280]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e68:	4b43      	ldr	r3, [pc, #268]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e70:	4a41      	ldr	r2, [pc, #260]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006e78:	4b40      	ldr	r3, [pc, #256]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2232      	movs	r2, #50	; 0x32
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	4a3f      	ldr	r2, [pc, #252]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	0c9b      	lsrs	r3, r3, #18
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e8e:	e002      	b.n	8006e96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e96:	4b38      	ldr	r3, [pc, #224]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea2:	d102      	bne.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1f2      	bne.n	8006e90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eaa:	4b33      	ldr	r3, [pc, #204]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d158      	bne.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e057      	b.n	8006f6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ebc:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec2:	4a2d      	ldr	r2, [pc, #180]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ecc:	e04d      	b.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed4:	d141      	bne.n	8006f5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ed6:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee2:	d131      	bne.n	8006f48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ee4:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eea:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ef4:	4b20      	ldr	r3, [pc, #128]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006efc:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2232      	movs	r2, #50	; 0x32
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
 8006f0e:	4a1c      	ldr	r2, [pc, #112]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	0c9b      	lsrs	r3, r3, #18
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f1a:	e002      	b.n	8006f22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2e:	d102      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f2      	bne.n	8006f1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f42:	d112      	bne.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e011      	b.n	8006f6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f58:	e007      	b.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f62:	4a05      	ldr	r2, [pc, #20]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40007000 	.word	0x40007000
 8006f7c:	20000008 	.word	0x20000008
 8006f80:	431bde83 	.word	0x431bde83

08006f84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f92:	6053      	str	r3, [r2, #4]
}
 8006f94:	bf00      	nop
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40007000 	.word	0x40007000

08006fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f000 bc08 	b.w	80077c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fb8:	4b96      	ldr	r3, [pc, #600]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 030c 	and.w	r3, r3, #12
 8006fc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fc2:	4b94      	ldr	r3, [pc, #592]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80e4 	beq.w	80071a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x4c>
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b0c      	cmp	r3, #12
 8006fe4:	f040 808b 	bne.w	80070fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	f040 8087 	bne.w	80070fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ff0:	4b88      	ldr	r3, [pc, #544]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_RCC_OscConfig+0x64>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e3df      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	4b81      	ldr	r3, [pc, #516]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_RCC_OscConfig+0x7e>
 8007018:	4b7e      	ldr	r3, [pc, #504]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007020:	e005      	b.n	800702e <HAL_RCC_OscConfig+0x8a>
 8007022:	4b7c      	ldr	r3, [pc, #496]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007028:	091b      	lsrs	r3, r3, #4
 800702a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702e:	4293      	cmp	r3, r2
 8007030:	d223      	bcs.n	800707a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fd9e 	bl	8007b78 <RCC_SetFlashLatencyFromMSIRange>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e3c0      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007046:	4b73      	ldr	r3, [pc, #460]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a72      	ldr	r2, [pc, #456]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800704c:	f043 0308 	orr.w	r3, r3, #8
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	4b70      	ldr	r3, [pc, #448]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	496d      	ldr	r1, [pc, #436]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007064:	4b6b      	ldr	r3, [pc, #428]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	4968      	ldr	r1, [pc, #416]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007074:	4313      	orrs	r3, r2
 8007076:	604b      	str	r3, [r1, #4]
 8007078:	e025      	b.n	80070c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800707a:	4b66      	ldr	r3, [pc, #408]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a65      	ldr	r2, [pc, #404]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4b63      	ldr	r3, [pc, #396]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	4960      	ldr	r1, [pc, #384]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007094:	4313      	orrs	r3, r2
 8007096:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007098:	4b5e      	ldr	r3, [pc, #376]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	495b      	ldr	r1, [pc, #364]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d109      	bne.n	80070c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fd5e 	bl	8007b78 <RCC_SetFlashLatencyFromMSIRange>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e380      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070c6:	f000 fcc1 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b51      	ldr	r3, [pc, #324]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	4950      	ldr	r1, [pc, #320]	; (8007218 <HAL_RCC_OscConfig+0x274>)
 80070d8:	5ccb      	ldrb	r3, [r1, r3]
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	fa22 f303 	lsr.w	r3, r2, r3
 80070e2:	4a4e      	ldr	r2, [pc, #312]	; (800721c <HAL_RCC_OscConfig+0x278>)
 80070e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070e6:	4b4e      	ldr	r3, [pc, #312]	; (8007220 <HAL_RCC_OscConfig+0x27c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd fefc 	bl	8004ee8 <HAL_InitTick>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d052      	beq.n	80071a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	e364      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d032      	beq.n	800716c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007106:	4b43      	ldr	r3, [pc, #268]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a42      	ldr	r2, [pc, #264]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800710c:	f043 0301 	orr.w	r3, r3, #1
 8007110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007112:	f7fd ff39 	bl	8004f88 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800711a:	f7fd ff35 	bl	8004f88 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e34d      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800712c:	4b39      	ldr	r3, [pc, #228]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007138:	4b36      	ldr	r3, [pc, #216]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a35      	ldr	r2, [pc, #212]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800713e:	f043 0308 	orr.w	r3, r3, #8
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	4b33      	ldr	r3, [pc, #204]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	4930      	ldr	r1, [pc, #192]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007152:	4313      	orrs	r3, r2
 8007154:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007156:	4b2f      	ldr	r3, [pc, #188]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	492b      	ldr	r1, [pc, #172]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007166:	4313      	orrs	r3, r2
 8007168:	604b      	str	r3, [r1, #4]
 800716a:	e01a      	b.n	80071a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800716c:	4b29      	ldr	r3, [pc, #164]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a28      	ldr	r2, [pc, #160]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007172:	f023 0301 	bic.w	r3, r3, #1
 8007176:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007178:	f7fd ff06 	bl	8004f88 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007180:	f7fd ff02 	bl	8004f88 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e31a      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007192:	4b20      	ldr	r3, [pc, #128]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x1dc>
 800719e:	e000      	b.n	80071a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d073      	beq.n	8007296 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d005      	beq.n	80071c0 <HAL_RCC_OscConfig+0x21c>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b0c      	cmp	r3, #12
 80071b8:	d10e      	bne.n	80071d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d10b      	bne.n	80071d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071c0:	4b14      	ldr	r3, [pc, #80]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d063      	beq.n	8007294 <HAL_RCC_OscConfig+0x2f0>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d15f      	bne.n	8007294 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e2f7      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e0:	d106      	bne.n	80071f0 <HAL_RCC_OscConfig+0x24c>
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 80071e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	e025      	b.n	800723c <HAL_RCC_OscConfig+0x298>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071f8:	d114      	bne.n	8007224 <HAL_RCC_OscConfig+0x280>
 80071fa:	4b06      	ldr	r3, [pc, #24]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a05      	ldr	r2, [pc, #20]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	4b03      	ldr	r3, [pc, #12]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a02      	ldr	r2, [pc, #8]	; (8007214 <HAL_RCC_OscConfig+0x270>)
 800720c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	e013      	b.n	800723c <HAL_RCC_OscConfig+0x298>
 8007214:	40021000 	.word	0x40021000
 8007218:	08013b9c 	.word	0x08013b9c
 800721c:	20000008 	.word	0x20000008
 8007220:	200007b0 	.word	0x200007b0
 8007224:	4ba0      	ldr	r3, [pc, #640]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a9f      	ldr	r2, [pc, #636]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800722a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	4b9d      	ldr	r3, [pc, #628]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a9c      	ldr	r2, [pc, #624]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800723a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d013      	beq.n	800726c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fd fea0 	bl	8004f88 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800724c:	f7fd fe9c 	bl	8004f88 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b64      	cmp	r3, #100	; 0x64
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e2b4      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800725e:	4b92      	ldr	r3, [pc, #584]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f0      	beq.n	800724c <HAL_RCC_OscConfig+0x2a8>
 800726a:	e014      	b.n	8007296 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fd fe8c 	bl	8004f88 <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007274:	f7fd fe88 	bl	8004f88 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b64      	cmp	r3, #100	; 0x64
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e2a0      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007286:	4b88      	ldr	r3, [pc, #544]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f0      	bne.n	8007274 <HAL_RCC_OscConfig+0x2d0>
 8007292:	e000      	b.n	8007296 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d060      	beq.n	8007364 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d005      	beq.n	80072b4 <HAL_RCC_OscConfig+0x310>
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b0c      	cmp	r3, #12
 80072ac:	d119      	bne.n	80072e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d116      	bne.n	80072e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b4:	4b7c      	ldr	r3, [pc, #496]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_RCC_OscConfig+0x328>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e27d      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072cc:	4b76      	ldr	r3, [pc, #472]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	061b      	lsls	r3, r3, #24
 80072da:	4973      	ldr	r1, [pc, #460]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e0:	e040      	b.n	8007364 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d023      	beq.n	8007332 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072ea:	4b6f      	ldr	r3, [pc, #444]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a6e      	ldr	r2, [pc, #440]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80072f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f6:	f7fd fe47 	bl	8004f88 <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072fe:	f7fd fe43 	bl	8004f88 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e25b      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007310:	4b65      	ldr	r3, [pc, #404]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731c:	4b62      	ldr	r3, [pc, #392]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	061b      	lsls	r3, r3, #24
 800732a:	495f      	ldr	r1, [pc, #380]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800732c:	4313      	orrs	r3, r2
 800732e:	604b      	str	r3, [r1, #4]
 8007330:	e018      	b.n	8007364 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007332:	4b5d      	ldr	r3, [pc, #372]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a5c      	ldr	r2, [pc, #368]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800733c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733e:	f7fd fe23 	bl	8004f88 <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007346:	f7fd fe1f 	bl	8004f88 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e237      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007358:	4b53      	ldr	r3, [pc, #332]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1f0      	bne.n	8007346 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d03c      	beq.n	80073ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01c      	beq.n	80073b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007378:	4b4b      	ldr	r3, [pc, #300]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800737a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800737e:	4a4a      	ldr	r2, [pc, #296]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007380:	f043 0301 	orr.w	r3, r3, #1
 8007384:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007388:	f7fd fdfe 	bl	8004f88 <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007390:	f7fd fdfa 	bl	8004f88 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e212      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073a2:	4b41      	ldr	r3, [pc, #260]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80073a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0ef      	beq.n	8007390 <HAL_RCC_OscConfig+0x3ec>
 80073b0:	e01b      	b.n	80073ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073b2:	4b3d      	ldr	r3, [pc, #244]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80073b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b8:	4a3b      	ldr	r2, [pc, #236]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80073ba:	f023 0301 	bic.w	r3, r3, #1
 80073be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c2:	f7fd fde1 	bl	8004f88 <HAL_GetTick>
 80073c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ca:	f7fd fddd 	bl	8004f88 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e1f5      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073dc:	4b32      	ldr	r3, [pc, #200]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80073de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1ef      	bne.n	80073ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80a6 	beq.w	8007544 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073f8:	2300      	movs	r3, #0
 80073fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80073fc:	4b2a      	ldr	r3, [pc, #168]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10d      	bne.n	8007424 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007408:	4b27      	ldr	r3, [pc, #156]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800740e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007412:	6593      	str	r3, [r2, #88]	; 0x58
 8007414:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007420:	2301      	movs	r3, #1
 8007422:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007424:	4b21      	ldr	r3, [pc, #132]	; (80074ac <HAL_RCC_OscConfig+0x508>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742c:	2b00      	cmp	r3, #0
 800742e:	d118      	bne.n	8007462 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007430:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <HAL_RCC_OscConfig+0x508>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <HAL_RCC_OscConfig+0x508>)
 8007436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800743c:	f7fd fda4 	bl	8004f88 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007444:	f7fd fda0 	bl	8004f88 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e1b8      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007456:	4b15      	ldr	r3, [pc, #84]	; (80074ac <HAL_RCC_OscConfig+0x508>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d108      	bne.n	800747c <HAL_RCC_OscConfig+0x4d8>
 800746a:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	4a0d      	ldr	r2, [pc, #52]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800747a:	e029      	b.n	80074d0 <HAL_RCC_OscConfig+0x52c>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b05      	cmp	r3, #5
 8007482:	d115      	bne.n	80074b0 <HAL_RCC_OscConfig+0x50c>
 8007484:	4b08      	ldr	r3, [pc, #32]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748a:	4a07      	ldr	r2, [pc, #28]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800748c:	f043 0304 	orr.w	r3, r3, #4
 8007490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007494:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	4a03      	ldr	r2, [pc, #12]	; (80074a8 <HAL_RCC_OscConfig+0x504>)
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074a4:	e014      	b.n	80074d0 <HAL_RCC_OscConfig+0x52c>
 80074a6:	bf00      	nop
 80074a8:	40021000 	.word	0x40021000
 80074ac:	40007000 	.word	0x40007000
 80074b0:	4b9d      	ldr	r3, [pc, #628]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	4a9c      	ldr	r2, [pc, #624]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074c0:	4b99      	ldr	r3, [pc, #612]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c6:	4a98      	ldr	r2, [pc, #608]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80074c8:	f023 0304 	bic.w	r3, r3, #4
 80074cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d016      	beq.n	8007506 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d8:	f7fd fd56 	bl	8004f88 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fd fd52 	bl	8004f88 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e168      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074f6:	4b8c      	ldr	r3, [pc, #560]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80074f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0ed      	beq.n	80074e0 <HAL_RCC_OscConfig+0x53c>
 8007504:	e015      	b.n	8007532 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007506:	f7fd fd3f 	bl	8004f88 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800750c:	e00a      	b.n	8007524 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750e:	f7fd fd3b 	bl	8004f88 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	f241 3288 	movw	r2, #5000	; 0x1388
 800751c:	4293      	cmp	r3, r2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e151      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007524:	4b80      	ldr	r3, [pc, #512]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ed      	bne.n	800750e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007532:	7ffb      	ldrb	r3, [r7, #31]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d105      	bne.n	8007544 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007538:	4b7b      	ldr	r3, [pc, #492]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 800753a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753c:	4a7a      	ldr	r2, [pc, #488]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 800753e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007542:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d03c      	beq.n	80075ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01c      	beq.n	8007592 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007558:	4b73      	ldr	r3, [pc, #460]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 800755a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800755e:	4a72      	ldr	r2, [pc, #456]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007568:	f7fd fd0e 	bl	8004f88 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007570:	f7fd fd0a 	bl	8004f88 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e122      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007582:	4b69      	ldr	r3, [pc, #420]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0ef      	beq.n	8007570 <HAL_RCC_OscConfig+0x5cc>
 8007590:	e01b      	b.n	80075ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007592:	4b65      	ldr	r3, [pc, #404]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007598:	4a63      	ldr	r2, [pc, #396]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 800759a:	f023 0301 	bic.w	r3, r3, #1
 800759e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a2:	f7fd fcf1 	bl	8004f88 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075aa:	f7fd fced 	bl	8004f88 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e105      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075bc:	4b5a      	ldr	r3, [pc, #360]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80075be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1ef      	bne.n	80075aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 80f9 	beq.w	80077c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	2b02      	cmp	r3, #2
 80075da:	f040 80cf 	bne.w	800777c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80075de:	4b52      	ldr	r3, [pc, #328]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 0203 	and.w	r2, r3, #3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d12c      	bne.n	800764c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	3b01      	subs	r3, #1
 80075fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007600:	429a      	cmp	r2, r3
 8007602:	d123      	bne.n	800764c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007610:	429a      	cmp	r2, r3
 8007612:	d11b      	bne.n	800764c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007620:	429a      	cmp	r2, r3
 8007622:	d113      	bne.n	800764c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	3b01      	subs	r3, #1
 8007632:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007634:	429a      	cmp	r2, r3
 8007636:	d109      	bne.n	800764c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	3b01      	subs	r3, #1
 8007646:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d071      	beq.n	8007730 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b0c      	cmp	r3, #12
 8007650:	d068      	beq.n	8007724 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007652:	4b35      	ldr	r3, [pc, #212]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800765e:	4b32      	ldr	r3, [pc, #200]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e0ac      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800766e:	4b2e      	ldr	r3, [pc, #184]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007678:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800767a:	f7fd fc85 	bl	8004f88 <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007682:	f7fd fc81 	bl	8004f88 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e099      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007694:	4b24      	ldr	r3, [pc, #144]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f0      	bne.n	8007682 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076a0:	4b21      	ldr	r3, [pc, #132]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	4b21      	ldr	r3, [pc, #132]	; (800772c <HAL_RCC_OscConfig+0x788>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076b0:	3a01      	subs	r2, #1
 80076b2:	0112      	lsls	r2, r2, #4
 80076b4:	4311      	orrs	r1, r2
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076ba:	0212      	lsls	r2, r2, #8
 80076bc:	4311      	orrs	r1, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076c2:	0852      	lsrs	r2, r2, #1
 80076c4:	3a01      	subs	r2, #1
 80076c6:	0552      	lsls	r2, r2, #21
 80076c8:	4311      	orrs	r1, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80076ce:	0852      	lsrs	r2, r2, #1
 80076d0:	3a01      	subs	r2, #1
 80076d2:	0652      	lsls	r2, r2, #25
 80076d4:	4311      	orrs	r1, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076da:	06d2      	lsls	r2, r2, #27
 80076dc:	430a      	orrs	r2, r1
 80076de:	4912      	ldr	r1, [pc, #72]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80076e4:	4b10      	ldr	r3, [pc, #64]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a0f      	ldr	r2, [pc, #60]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80076ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076f0:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 80076f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076fc:	f7fd fc44 	bl	8004f88 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007704:	f7fd fc40 	bl	8004f88 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e058      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007716:	4b04      	ldr	r3, [pc, #16]	; (8007728 <HAL_RCC_OscConfig+0x784>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f0      	beq.n	8007704 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007722:	e050      	b.n	80077c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e04f      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
 8007728:	40021000 	.word	0x40021000
 800772c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007730:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d144      	bne.n	80077c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800773c:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a23      	ldr	r2, [pc, #140]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 8007742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007748:	4b21      	ldr	r3, [pc, #132]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 800774e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007754:	f7fd fc18 	bl	8004f88 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800775c:	f7fd fc14 	bl	8004f88 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e02c      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800776e:	4b18      	ldr	r3, [pc, #96]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0f0      	beq.n	800775c <HAL_RCC_OscConfig+0x7b8>
 800777a:	e024      	b.n	80077c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b0c      	cmp	r3, #12
 8007780:	d01f      	beq.n	80077c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007782:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 8007788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800778c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778e:	f7fd fbfb 	bl	8004f88 <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007794:	e008      	b.n	80077a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007796:	f7fd fbf7 	bl	8004f88 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e00f      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f0      	bne.n	8007796 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	4905      	ldr	r1, [pc, #20]	; (80077d0 <HAL_RCC_OscConfig+0x82c>)
 80077ba:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <HAL_RCC_OscConfig+0x830>)
 80077bc:	4013      	ands	r3, r2
 80077be:	60cb      	str	r3, [r1, #12]
 80077c0:	e001      	b.n	80077c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40021000 	.word	0x40021000
 80077d4:	feeefffc 	.word	0xfeeefffc

080077d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e11d      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077f0:	4b90      	ldr	r3, [pc, #576]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d910      	bls.n	8007820 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fe:	4b8d      	ldr	r3, [pc, #564]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f023 020f 	bic.w	r2, r3, #15
 8007806:	498b      	ldr	r1, [pc, #556]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	4313      	orrs	r3, r2
 800780c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800780e:	4b89      	ldr	r3, [pc, #548]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d001      	beq.n	8007820 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e105      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d010      	beq.n	800784e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	4b81      	ldr	r3, [pc, #516]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007838:	429a      	cmp	r2, r3
 800783a:	d908      	bls.n	800784e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800783c:	4b7e      	ldr	r3, [pc, #504]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	497b      	ldr	r1, [pc, #492]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800784a:	4313      	orrs	r3, r2
 800784c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d079      	beq.n	800794e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d11e      	bne.n	80078a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007862:	4b75      	ldr	r3, [pc, #468]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e0dc      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007872:	f000 f9db 	bl	8007c2c <RCC_GetSysClockFreqFromPLLSource>
 8007876:	4603      	mov	r3, r0
 8007878:	4a70      	ldr	r2, [pc, #448]	; (8007a3c <HAL_RCC_ClockConfig+0x264>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d946      	bls.n	800790c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800787e:	4b6e      	ldr	r3, [pc, #440]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d140      	bne.n	800790c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800788a:	4b6b      	ldr	r3, [pc, #428]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007892:	4a69      	ldr	r2, [pc, #420]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007898:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	e035      	b.n	800790c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d107      	bne.n	80078b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078a8:	4b63      	ldr	r3, [pc, #396]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d115      	bne.n	80078e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e0b9      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078c0:	4b5d      	ldr	r3, [pc, #372]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0ad      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078d0:	4b59      	ldr	r3, [pc, #356]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e0a5      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80078e0:	f000 f8b4 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4a55      	ldr	r2, [pc, #340]	; (8007a3c <HAL_RCC_ClockConfig+0x264>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d90f      	bls.n	800790c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80078ec:	4b52      	ldr	r3, [pc, #328]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d109      	bne.n	800790c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078f8:	4b4f      	ldr	r3, [pc, #316]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007900:	4a4d      	ldr	r2, [pc, #308]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007906:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007908:	2380      	movs	r3, #128	; 0x80
 800790a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800790c:	4b4a      	ldr	r3, [pc, #296]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f023 0203 	bic.w	r2, r3, #3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	4947      	ldr	r1, [pc, #284]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800791a:	4313      	orrs	r3, r2
 800791c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791e:	f7fd fb33 	bl	8004f88 <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007924:	e00a      	b.n	800793c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007926:	f7fd fb2f 	bl	8004f88 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f241 3288 	movw	r2, #5000	; 0x1388
 8007934:	4293      	cmp	r3, r2
 8007936:	d901      	bls.n	800793c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e077      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800793c:	4b3e      	ldr	r3, [pc, #248]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 020c 	and.w	r2, r3, #12
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	429a      	cmp	r2, r3
 800794c:	d1eb      	bne.n	8007926 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b80      	cmp	r3, #128	; 0x80
 8007952:	d105      	bne.n	8007960 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007954:	4b38      	ldr	r3, [pc, #224]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	4a37      	ldr	r2, [pc, #220]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800795a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800795e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d010      	beq.n	800798e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007978:	429a      	cmp	r2, r3
 800797a:	d208      	bcs.n	800798e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800797c:	4b2e      	ldr	r3, [pc, #184]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	492b      	ldr	r1, [pc, #172]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 800798a:	4313      	orrs	r3, r2
 800798c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800798e:	4b29      	ldr	r3, [pc, #164]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d210      	bcs.n	80079be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f023 020f 	bic.w	r2, r3, #15
 80079a4:	4923      	ldr	r1, [pc, #140]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ac:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <HAL_RCC_ClockConfig+0x25c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d001      	beq.n	80079be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e036      	b.n	8007a2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079ca:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	4918      	ldr	r1, [pc, #96]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079e8:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	4910      	ldr	r1, [pc, #64]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079fc:	f000 f826 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8007a00:	4602      	mov	r2, r0
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <HAL_RCC_ClockConfig+0x260>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	490c      	ldr	r1, [pc, #48]	; (8007a40 <HAL_RCC_ClockConfig+0x268>)
 8007a0e:	5ccb      	ldrb	r3, [r1, r3]
 8007a10:	f003 031f 	and.w	r3, r3, #31
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <HAL_RCC_ClockConfig+0x26c>)
 8007a1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <HAL_RCC_ClockConfig+0x270>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fd fa61 	bl	8004ee8 <HAL_InitTick>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40022000 	.word	0x40022000
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	04c4b400 	.word	0x04c4b400
 8007a40:	08013b9c 	.word	0x08013b9c
 8007a44:	20000008 	.word	0x20000008
 8007a48:	200007b0 	.word	0x200007b0

08007a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	; 0x24
 8007a50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a5a:	4b3e      	ldr	r3, [pc, #248]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 030c 	and.w	r3, r3, #12
 8007a62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a64:	4b3b      	ldr	r3, [pc, #236]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0303 	and.w	r3, r3, #3
 8007a6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d005      	beq.n	8007a80 <HAL_RCC_GetSysClockFreq+0x34>
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2b0c      	cmp	r3, #12
 8007a78:	d121      	bne.n	8007abe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d11e      	bne.n	8007abe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007a80:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007a8c:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a92:	0a1b      	lsrs	r3, r3, #8
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	e005      	b.n	8007aa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007a9c:	4b2d      	ldr	r3, [pc, #180]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	091b      	lsrs	r3, r3, #4
 8007aa2:	f003 030f 	and.w	r3, r3, #15
 8007aa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007aa8:	4a2b      	ldr	r2, [pc, #172]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10d      	bne.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007abc:	e00a      	b.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d102      	bne.n	8007aca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ac4:	4b25      	ldr	r3, [pc, #148]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8007ac6:	61bb      	str	r3, [r7, #24]
 8007ac8:	e004      	b.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d101      	bne.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ad0:	4b22      	ldr	r3, [pc, #136]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8007ad2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2b0c      	cmp	r3, #12
 8007ad8:	d134      	bne.n	8007b44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ada:	4b1e      	ldr	r3, [pc, #120]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d003      	beq.n	8007af2 <HAL_RCC_GetSysClockFreq+0xa6>
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d003      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0xac>
 8007af0:	e005      	b.n	8007afe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007af2:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8007af4:	617b      	str	r3, [r7, #20]
      break;
 8007af6:	e005      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007af8:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8007afa:	617b      	str	r3, [r7, #20]
      break;
 8007afc:	e002      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	617b      	str	r3, [r7, #20]
      break;
 8007b02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	091b      	lsrs	r3, r3, #4
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	3301      	adds	r3, #1
 8007b10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	0a1b      	lsrs	r3, r3, #8
 8007b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	fb03 f202 	mul.w	r2, r3, r2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	0e5b      	lsrs	r3, r3, #25
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	3301      	adds	r3, #1
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b44:	69bb      	ldr	r3, [r7, #24]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3724      	adds	r7, #36	; 0x24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	40021000 	.word	0x40021000
 8007b58:	08013bac 	.word	0x08013bac
 8007b5c:	00f42400 	.word	0x00f42400

08007b60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b64:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b66:	681b      	ldr	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000008 	.word	0x20000008

08007b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b84:	4b27      	ldr	r3, [pc, #156]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b90:	f7ff f934 	bl	8006dfc <HAL_PWREx_GetVoltageRange>
 8007b94:	6178      	str	r0, [r7, #20]
 8007b96:	e014      	b.n	8007bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b98:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9c:	4a21      	ldr	r2, [pc, #132]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ba4:	4b1f      	ldr	r3, [pc, #124]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007bb0:	f7ff f924 	bl	8006dfc <HAL_PWREx_GetVoltageRange>
 8007bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007bb6:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	4a1a      	ldr	r2, [pc, #104]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc8:	d10b      	bne.n	8007be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b80      	cmp	r3, #128	; 0x80
 8007bce:	d913      	bls.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2ba0      	cmp	r3, #160	; 0xa0
 8007bd4:	d902      	bls.n	8007bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	613b      	str	r3, [r7, #16]
 8007bda:	e00d      	b.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bdc:	2301      	movs	r3, #1
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	e00a      	b.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b7f      	cmp	r3, #127	; 0x7f
 8007be6:	d902      	bls.n	8007bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007be8:	2302      	movs	r3, #2
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	e004      	b.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b70      	cmp	r3, #112	; 0x70
 8007bf2:	d101      	bne.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f023 020f 	bic.w	r2, r3, #15
 8007c00:	4909      	ldr	r1, [pc, #36]	; (8007c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c08:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d001      	beq.n	8007c1a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40021000 	.word	0x40021000
 8007c28:	40022000 	.word	0x40022000

08007c2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c32:	4b2d      	ldr	r3, [pc, #180]	; (8007ce8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d00b      	beq.n	8007c5a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d825      	bhi.n	8007c94 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d008      	beq.n	8007c60 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d11f      	bne.n	8007c94 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007c54:	4b25      	ldr	r3, [pc, #148]	; (8007cec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007c56:	613b      	str	r3, [r7, #16]
    break;
 8007c58:	e01f      	b.n	8007c9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007c5a:	4b24      	ldr	r3, [pc, #144]	; (8007cec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007c5c:	613b      	str	r3, [r7, #16]
    break;
 8007c5e:	e01c      	b.n	8007c9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c60:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d107      	bne.n	8007c7c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e005      	b.n	8007c88 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	091b      	lsrs	r3, r3, #4
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007c88:	4a19      	ldr	r2, [pc, #100]	; (8007cf0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c90:	613b      	str	r3, [r7, #16]
    break;
 8007c92:	e002      	b.n	8007c9a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	613b      	str	r3, [r7, #16]
    break;
 8007c98:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c9a:	4b13      	ldr	r3, [pc, #76]	; (8007ce8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	091b      	lsrs	r3, r3, #4
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	0a1b      	lsrs	r3, r3, #8
 8007cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	fb03 f202 	mul.w	r2, r3, r2
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cc0:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	0e5b      	lsrs	r3, r3, #25
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	3301      	adds	r3, #1
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007cda:	683b      	ldr	r3, [r7, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	00f42400 	.word	0x00f42400
 8007cf0:	08013bac 	.word	0x08013bac

08007cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d00:	2300      	movs	r3, #0
 8007d02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d040      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d14:	2b80      	cmp	r3, #128	; 0x80
 8007d16:	d02a      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d18:	2b80      	cmp	r3, #128	; 0x80
 8007d1a:	d825      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d1c:	2b60      	cmp	r3, #96	; 0x60
 8007d1e:	d026      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d20:	2b60      	cmp	r3, #96	; 0x60
 8007d22:	d821      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d24:	2b40      	cmp	r3, #64	; 0x40
 8007d26:	d006      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d81d      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d009      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d010      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007d34:	e018      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d36:	4b89      	ldr	r3, [pc, #548]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	4a88      	ldr	r2, [pc, #544]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d40:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007d42:	e015      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fb62 	bl	8008414 <RCCEx_PLLSAI1_Config>
 8007d50:	4603      	mov	r3, r0
 8007d52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007d54:	e00c      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3320      	adds	r3, #32
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fc4d 	bl	80085fc <RCCEx_PLLSAI2_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007d66:	e003      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	74fb      	strb	r3, [r7, #19]
      break;
 8007d6c:	e000      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d70:	7cfb      	ldrb	r3, [r7, #19]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10b      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d76:	4b79      	ldr	r3, [pc, #484]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d7c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d84:	4975      	ldr	r1, [pc, #468]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007d8c:	e001      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	7cfb      	ldrb	r3, [r7, #19]
 8007d90:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d047      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da6:	d030      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dac:	d82a      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db2:	d02a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db8:	d824      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dbe:	d008      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc4:	d81e      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dce:	d010      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007dd0:	e018      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007dd2:	4b62      	ldr	r3, [pc, #392]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	4a61      	ldr	r2, [pc, #388]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ddc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007dde:	e015      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3304      	adds	r3, #4
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fb14 	bl	8008414 <RCCEx_PLLSAI1_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007df0:	e00c      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3320      	adds	r3, #32
 8007df6:	2100      	movs	r1, #0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fbff 	bl	80085fc <RCCEx_PLLSAI2_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e02:	e003      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	74fb      	strb	r3, [r7, #19]
      break;
 8007e08:	e000      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e0c:	7cfb      	ldrb	r3, [r7, #19]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007e12:	4b52      	ldr	r3, [pc, #328]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e20:	494e      	ldr	r1, [pc, #312]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007e28:	e001      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	7cfb      	ldrb	r3, [r7, #19]
 8007e2c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 809f 	beq.w	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e40:	4b46      	ldr	r3, [pc, #280]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007e50:	2300      	movs	r3, #0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00d      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e56:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5a:	4a40      	ldr	r2, [pc, #256]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e60:	6593      	str	r3, [r2, #88]	; 0x58
 8007e62:	4b3e      	ldr	r3, [pc, #248]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6a:	60bb      	str	r3, [r7, #8]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e72:	4b3b      	ldr	r3, [pc, #236]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a3a      	ldr	r2, [pc, #232]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e7e:	f7fd f883 	bl	8004f88 <HAL_GetTick>
 8007e82:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e84:	e009      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e86:	f7fd f87f 	bl	8004f88 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d902      	bls.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	74fb      	strb	r3, [r7, #19]
        break;
 8007e98:	e005      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e9a:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0ef      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007ea6:	7cfb      	ldrb	r3, [r7, #19]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d15b      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007eac:	4b2b      	ldr	r3, [pc, #172]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01f      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d019      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007eca:	4b24      	ldr	r3, [pc, #144]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ed6:	4b21      	ldr	r3, [pc, #132]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007edc:	4a1f      	ldr	r2, [pc, #124]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eec:	4a1b      	ldr	r2, [pc, #108]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ef6:	4a19      	ldr	r2, [pc, #100]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d016      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f08:	f7fd f83e 	bl	8004f88 <HAL_GetTick>
 8007f0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f0e:	e00b      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f10:	f7fd f83a 	bl	8004f88 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d902      	bls.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	74fb      	strb	r3, [r7, #19]
            break;
 8007f26:	e006      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0ec      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007f36:	7cfb      	ldrb	r3, [r7, #19]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10c      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f3c:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f4c:	4903      	ldr	r1, [pc, #12]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f54:	e008      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f56:	7cfb      	ldrb	r3, [r7, #19]
 8007f58:	74bb      	strb	r3, [r7, #18]
 8007f5a:	e005      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	7cfb      	ldrb	r3, [r7, #19]
 8007f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f68:	7c7b      	ldrb	r3, [r7, #17]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d105      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f6e:	4ba0      	ldr	r3, [pc, #640]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f72:	4a9f      	ldr	r2, [pc, #636]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f86:	4b9a      	ldr	r3, [pc, #616]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8c:	f023 0203 	bic.w	r2, r3, #3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f94:	4996      	ldr	r1, [pc, #600]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fa8:	4b91      	ldr	r3, [pc, #580]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fae:	f023 020c 	bic.w	r2, r3, #12
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	498e      	ldr	r1, [pc, #568]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007fca:	4b89      	ldr	r3, [pc, #548]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd8:	4985      	ldr	r1, [pc, #532]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fec:	4b80      	ldr	r3, [pc, #512]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ffa:	497d      	ldr	r1, [pc, #500]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0310 	and.w	r3, r3, #16
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800800e:	4b78      	ldr	r3, [pc, #480]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801c:	4974      	ldr	r1, [pc, #464]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008030:	4b6f      	ldr	r3, [pc, #444]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803e:	496c      	ldr	r1, [pc, #432]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008040:	4313      	orrs	r3, r2
 8008042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008052:	4b67      	ldr	r3, [pc, #412]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008060:	4963      	ldr	r1, [pc, #396]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008062:	4313      	orrs	r3, r2
 8008064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00a      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008074:	4b5e      	ldr	r3, [pc, #376]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008082:	495b      	ldr	r1, [pc, #364]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008084:	4313      	orrs	r3, r2
 8008086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008096:	4b56      	ldr	r3, [pc, #344]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a4:	4952      	ldr	r1, [pc, #328]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00a      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080b8:	4b4d      	ldr	r3, [pc, #308]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c6:	494a      	ldr	r1, [pc, #296]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080da:	4b45      	ldr	r3, [pc, #276]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	4941      	ldr	r1, [pc, #260]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080fc:	4b3c      	ldr	r3, [pc, #240]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008102:	f023 0203 	bic.w	r2, r3, #3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810a:	4939      	ldr	r1, [pc, #228]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800810c:	4313      	orrs	r3, r2
 800810e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d028      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800811e:	4b34      	ldr	r3, [pc, #208]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800812c:	4930      	ldr	r1, [pc, #192]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800812e:	4313      	orrs	r3, r2
 8008130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800813c:	d106      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800813e:	4b2c      	ldr	r3, [pc, #176]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	4a2b      	ldr	r2, [pc, #172]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008148:	60d3      	str	r3, [r2, #12]
 800814a:	e011      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008154:	d10c      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3304      	adds	r3, #4
 800815a:	2101      	movs	r1, #1
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f959 	bl	8008414 <RCCEx_PLLSAI1_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008166:	7cfb      	ldrb	r3, [r7, #19]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800816c:	7cfb      	ldrb	r3, [r7, #19]
 800816e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d04d      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008184:	d108      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008186:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008188:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800818c:	4a18      	ldr	r2, [pc, #96]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800818e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008192:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008196:	e012      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800819a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800819e:	4a14      	ldr	r2, [pc, #80]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80081a8:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081b6:	490e      	ldr	r1, [pc, #56]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081c6:	d106      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081c8:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4a08      	ldr	r2, [pc, #32]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081d2:	60d3      	str	r3, [r2, #12]
 80081d4:	e020      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081de:	d109      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	4a02      	ldr	r2, [pc, #8]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ea:	60d3      	str	r3, [r2, #12]
 80081ec:	e014      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80081ee:	bf00      	nop
 80081f0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081fc:	d10c      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3304      	adds	r3, #4
 8008202:	2101      	movs	r1, #1
 8008204:	4618      	mov	r0, r3
 8008206:	f000 f905 	bl	8008414 <RCCEx_PLLSAI1_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800820e:	7cfb      	ldrb	r3, [r7, #19]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008214:	7cfb      	ldrb	r3, [r7, #19]
 8008216:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d028      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008224:	4b7a      	ldr	r3, [pc, #488]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008232:	4977      	ldr	r1, [pc, #476]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008242:	d106      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008244:	4b72      	ldr	r3, [pc, #456]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4a71      	ldr	r2, [pc, #452]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800824a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800824e:	60d3      	str	r3, [r2, #12]
 8008250:	e011      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800825a:	d10c      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3304      	adds	r3, #4
 8008260:	2101      	movs	r1, #1
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f8d6 	bl	8008414 <RCCEx_PLLSAI1_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800826c:	7cfb      	ldrb	r3, [r7, #19]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008272:	7cfb      	ldrb	r3, [r7, #19]
 8008274:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01e      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008282:	4b63      	ldr	r3, [pc, #396]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008288:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008292:	495f      	ldr	r1, [pc, #380]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008294:	4313      	orrs	r3, r2
 8008296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082a4:	d10c      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	2102      	movs	r1, #2
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f8b1 	bl	8008414 <RCCEx_PLLSAI1_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082b6:	7cfb      	ldrb	r3, [r7, #19]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80082bc:	7cfb      	ldrb	r3, [r7, #19]
 80082be:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082cc:	4b50      	ldr	r3, [pc, #320]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80082ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082d2:	f023 0204 	bic.w	r2, r3, #4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082dc:	494c      	ldr	r1, [pc, #304]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80082f0:	4b47      	ldr	r3, [pc, #284]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80082f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082f6:	f023 0218 	bic.w	r2, r3, #24
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008300:	4943      	ldr	r1, [pc, #268]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008302:	4313      	orrs	r3, r2
 8008304:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d035      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008314:	4b3e      	ldr	r3, [pc, #248]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a3d      	ldr	r2, [pc, #244]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800831a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800831e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008320:	f7fc fe32 	bl	8004f88 <HAL_GetTick>
 8008324:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008326:	e009      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008328:	f7fc fe2e 	bl	8004f88 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d902      	bls.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	74fb      	strb	r3, [r7, #19]
        break;
 800833a:	e005      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800833c:	4b34      	ldr	r3, [pc, #208]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1ef      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8008348:	7cfb      	ldrb	r3, [r7, #19]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d113      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800834e:	4b30      	ldr	r3, [pc, #192]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008350:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835e:	492c      	ldr	r1, [pc, #176]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3320      	adds	r3, #32
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f945 	bl	80085fc <RCCEx_PLLSAI2_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8008376:	7cfb      	ldrb	r3, [r7, #19]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800837c:	7cfb      	ldrb	r3, [r7, #19]
 800837e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01e      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800838c:	4b20      	ldr	r3, [pc, #128]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800838e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839c:	491c      	ldr	r1, [pc, #112]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ae:	d10c      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3320      	adds	r3, #32
 80083b4:	2101      	movs	r1, #1
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f920 	bl	80085fc <RCCEx_PLLSAI2_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083c0:	7cfb      	ldrb	r3, [r7, #19]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80083c6:	7cfb      	ldrb	r3, [r7, #19]
 80083c8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d017      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80083d6:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80083d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083e6:	490a      	ldr	r1, [pc, #40]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f8:	d105      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	4a04      	ldr	r2, [pc, #16]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008404:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008406:	7cbb      	ldrb	r3, [r7, #18]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40021000 	.word	0x40021000

08008414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008422:	4b72      	ldr	r3, [pc, #456]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00e      	beq.n	800844c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800842e:	4b6f      	ldr	r3, [pc, #444]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f003 0203 	and.w	r2, r3, #3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d103      	bne.n	8008446 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
       ||
 8008442:	2b00      	cmp	r3, #0
 8008444:	d142      	bne.n	80084cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	73fb      	strb	r3, [r7, #15]
 800844a:	e03f      	b.n	80084cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d018      	beq.n	8008486 <RCCEx_PLLSAI1_Config+0x72>
 8008454:	2b03      	cmp	r3, #3
 8008456:	d825      	bhi.n	80084a4 <RCCEx_PLLSAI1_Config+0x90>
 8008458:	2b01      	cmp	r3, #1
 800845a:	d002      	beq.n	8008462 <RCCEx_PLLSAI1_Config+0x4e>
 800845c:	2b02      	cmp	r3, #2
 800845e:	d009      	beq.n	8008474 <RCCEx_PLLSAI1_Config+0x60>
 8008460:	e020      	b.n	80084a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008462:	4b62      	ldr	r3, [pc, #392]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d11d      	bne.n	80084aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008472:	e01a      	b.n	80084aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008474:	4b5d      	ldr	r3, [pc, #372]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800847c:	2b00      	cmp	r3, #0
 800847e:	d116      	bne.n	80084ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008484:	e013      	b.n	80084ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008486:	4b59      	ldr	r3, [pc, #356]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10f      	bne.n	80084b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008492:	4b56      	ldr	r3, [pc, #344]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084a2:	e006      	b.n	80084b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
      break;
 80084a8:	e004      	b.n	80084b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084aa:	bf00      	nop
 80084ac:	e002      	b.n	80084b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084ae:	bf00      	nop
 80084b0:	e000      	b.n	80084b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d108      	bne.n	80084cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80084ba:	4b4c      	ldr	r3, [pc, #304]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f023 0203 	bic.w	r2, r3, #3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4949      	ldr	r1, [pc, #292]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 8086 	bne.w	80085e0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084d4:	4b45      	ldr	r3, [pc, #276]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a44      	ldr	r2, [pc, #272]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80084da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e0:	f7fc fd52 	bl	8004f88 <HAL_GetTick>
 80084e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084e6:	e009      	b.n	80084fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084e8:	f7fc fd4e 	bl	8004f88 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d902      	bls.n	80084fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	73fb      	strb	r3, [r7, #15]
        break;
 80084fa:	e005      	b.n	8008508 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084fc:	4b3b      	ldr	r3, [pc, #236]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1ef      	bne.n	80084e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d168      	bne.n	80085e0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d113      	bne.n	800853c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008514:	4b35      	ldr	r3, [pc, #212]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	4b35      	ldr	r3, [pc, #212]	; (80085f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800851a:	4013      	ands	r3, r2
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	6892      	ldr	r2, [r2, #8]
 8008520:	0211      	lsls	r1, r2, #8
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	68d2      	ldr	r2, [r2, #12]
 8008526:	06d2      	lsls	r2, r2, #27
 8008528:	4311      	orrs	r1, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6852      	ldr	r2, [r2, #4]
 800852e:	3a01      	subs	r2, #1
 8008530:	0112      	lsls	r2, r2, #4
 8008532:	430a      	orrs	r2, r1
 8008534:	492d      	ldr	r1, [pc, #180]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008536:	4313      	orrs	r3, r2
 8008538:	610b      	str	r3, [r1, #16]
 800853a:	e02d      	b.n	8008598 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d115      	bne.n	800856e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008542:	4b2a      	ldr	r3, [pc, #168]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	4b2b      	ldr	r3, [pc, #172]	; (80085f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008548:	4013      	ands	r3, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6892      	ldr	r2, [r2, #8]
 800854e:	0211      	lsls	r1, r2, #8
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6912      	ldr	r2, [r2, #16]
 8008554:	0852      	lsrs	r2, r2, #1
 8008556:	3a01      	subs	r2, #1
 8008558:	0552      	lsls	r2, r2, #21
 800855a:	4311      	orrs	r1, r2
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6852      	ldr	r2, [r2, #4]
 8008560:	3a01      	subs	r2, #1
 8008562:	0112      	lsls	r2, r2, #4
 8008564:	430a      	orrs	r2, r1
 8008566:	4921      	ldr	r1, [pc, #132]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008568:	4313      	orrs	r3, r2
 800856a:	610b      	str	r3, [r1, #16]
 800856c:	e014      	b.n	8008598 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800856e:	4b1f      	ldr	r3, [pc, #124]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008570:	691a      	ldr	r2, [r3, #16]
 8008572:	4b21      	ldr	r3, [pc, #132]	; (80085f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008574:	4013      	ands	r3, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6892      	ldr	r2, [r2, #8]
 800857a:	0211      	lsls	r1, r2, #8
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6952      	ldr	r2, [r2, #20]
 8008580:	0852      	lsrs	r2, r2, #1
 8008582:	3a01      	subs	r2, #1
 8008584:	0652      	lsls	r2, r2, #25
 8008586:	4311      	orrs	r1, r2
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6852      	ldr	r2, [r2, #4]
 800858c:	3a01      	subs	r2, #1
 800858e:	0112      	lsls	r2, r2, #4
 8008590:	430a      	orrs	r2, r1
 8008592:	4916      	ldr	r1, [pc, #88]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8008594:	4313      	orrs	r3, r2
 8008596:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008598:	4b14      	ldr	r3, [pc, #80]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a13      	ldr	r2, [pc, #76]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800859e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a4:	f7fc fcf0 	bl	8004f88 <HAL_GetTick>
 80085a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085aa:	e009      	b.n	80085c0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085ac:	f7fc fcec 	bl	8004f88 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d902      	bls.n	80085c0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	73fb      	strb	r3, [r7, #15]
          break;
 80085be:	e005      	b.n	80085cc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085c0:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0ef      	beq.n	80085ac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80085d4:	691a      	ldr	r2, [r3, #16]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	4904      	ldr	r1, [pc, #16]	; (80085ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40021000 	.word	0x40021000
 80085f0:	07ff800f 	.word	0x07ff800f
 80085f4:	ff9f800f 	.word	0xff9f800f
 80085f8:	f9ff800f 	.word	0xf9ff800f

080085fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800860a:	4b72      	ldr	r3, [pc, #456]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00e      	beq.n	8008634 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008616:	4b6f      	ldr	r3, [pc, #444]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f003 0203 	and.w	r2, r3, #3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	429a      	cmp	r2, r3
 8008624:	d103      	bne.n	800862e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
       ||
 800862a:	2b00      	cmp	r3, #0
 800862c:	d142      	bne.n	80086b4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]
 8008632:	e03f      	b.n	80086b4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b03      	cmp	r3, #3
 800863a:	d018      	beq.n	800866e <RCCEx_PLLSAI2_Config+0x72>
 800863c:	2b03      	cmp	r3, #3
 800863e:	d825      	bhi.n	800868c <RCCEx_PLLSAI2_Config+0x90>
 8008640:	2b01      	cmp	r3, #1
 8008642:	d002      	beq.n	800864a <RCCEx_PLLSAI2_Config+0x4e>
 8008644:	2b02      	cmp	r3, #2
 8008646:	d009      	beq.n	800865c <RCCEx_PLLSAI2_Config+0x60>
 8008648:	e020      	b.n	800868c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800864a:	4b62      	ldr	r3, [pc, #392]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d11d      	bne.n	8008692 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800865a:	e01a      	b.n	8008692 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800865c:	4b5d      	ldr	r3, [pc, #372]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008664:	2b00      	cmp	r3, #0
 8008666:	d116      	bne.n	8008696 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800866c:	e013      	b.n	8008696 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800866e:	4b59      	ldr	r3, [pc, #356]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10f      	bne.n	800869a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800867a:	4b56      	ldr	r3, [pc, #344]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800868a:	e006      	b.n	800869a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
      break;
 8008690:	e004      	b.n	800869c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008692:	bf00      	nop
 8008694:	e002      	b.n	800869c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008696:	bf00      	nop
 8008698:	e000      	b.n	800869c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800869a:	bf00      	nop
    }

    if(status == HAL_OK)
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d108      	bne.n	80086b4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80086a2:	4b4c      	ldr	r3, [pc, #304]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f023 0203 	bic.w	r2, r3, #3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4949      	ldr	r1, [pc, #292]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f040 8086 	bne.w	80087c8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80086bc:	4b45      	ldr	r3, [pc, #276]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a44      	ldr	r2, [pc, #272]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c8:	f7fc fc5e 	bl	8004f88 <HAL_GetTick>
 80086cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086ce:	e009      	b.n	80086e4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80086d0:	f7fc fc5a 	bl	8004f88 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d902      	bls.n	80086e4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	73fb      	strb	r3, [r7, #15]
        break;
 80086e2:	e005      	b.n	80086f0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086e4:	4b3b      	ldr	r3, [pc, #236]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1ef      	bne.n	80086d0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d168      	bne.n	80087c8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d113      	bne.n	8008724 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086fc:	4b35      	ldr	r3, [pc, #212]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086fe:	695a      	ldr	r2, [r3, #20]
 8008700:	4b35      	ldr	r3, [pc, #212]	; (80087d8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008702:	4013      	ands	r3, r2
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6892      	ldr	r2, [r2, #8]
 8008708:	0211      	lsls	r1, r2, #8
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	68d2      	ldr	r2, [r2, #12]
 800870e:	06d2      	lsls	r2, r2, #27
 8008710:	4311      	orrs	r1, r2
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6852      	ldr	r2, [r2, #4]
 8008716:	3a01      	subs	r2, #1
 8008718:	0112      	lsls	r2, r2, #4
 800871a:	430a      	orrs	r2, r1
 800871c:	492d      	ldr	r1, [pc, #180]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800871e:	4313      	orrs	r3, r2
 8008720:	614b      	str	r3, [r1, #20]
 8008722:	e02d      	b.n	8008780 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d115      	bne.n	8008756 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800872a:	4b2a      	ldr	r3, [pc, #168]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800872c:	695a      	ldr	r2, [r3, #20]
 800872e:	4b2b      	ldr	r3, [pc, #172]	; (80087dc <RCCEx_PLLSAI2_Config+0x1e0>)
 8008730:	4013      	ands	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6892      	ldr	r2, [r2, #8]
 8008736:	0211      	lsls	r1, r2, #8
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6912      	ldr	r2, [r2, #16]
 800873c:	0852      	lsrs	r2, r2, #1
 800873e:	3a01      	subs	r2, #1
 8008740:	0552      	lsls	r2, r2, #21
 8008742:	4311      	orrs	r1, r2
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6852      	ldr	r2, [r2, #4]
 8008748:	3a01      	subs	r2, #1
 800874a:	0112      	lsls	r2, r2, #4
 800874c:	430a      	orrs	r2, r1
 800874e:	4921      	ldr	r1, [pc, #132]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008750:	4313      	orrs	r3, r2
 8008752:	614b      	str	r3, [r1, #20]
 8008754:	e014      	b.n	8008780 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008756:	4b1f      	ldr	r3, [pc, #124]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008758:	695a      	ldr	r2, [r3, #20]
 800875a:	4b21      	ldr	r3, [pc, #132]	; (80087e0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800875c:	4013      	ands	r3, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6892      	ldr	r2, [r2, #8]
 8008762:	0211      	lsls	r1, r2, #8
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6952      	ldr	r2, [r2, #20]
 8008768:	0852      	lsrs	r2, r2, #1
 800876a:	3a01      	subs	r2, #1
 800876c:	0652      	lsls	r2, r2, #25
 800876e:	4311      	orrs	r1, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6852      	ldr	r2, [r2, #4]
 8008774:	3a01      	subs	r2, #1
 8008776:	0112      	lsls	r2, r2, #4
 8008778:	430a      	orrs	r2, r1
 800877a:	4916      	ldr	r1, [pc, #88]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800877c:	4313      	orrs	r3, r2
 800877e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008780:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800878a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878c:	f7fc fbfc 	bl	8004f88 <HAL_GetTick>
 8008790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008792:	e009      	b.n	80087a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008794:	f7fc fbf8 	bl	8004f88 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d902      	bls.n	80087a8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	73fb      	strb	r3, [r7, #15]
          break;
 80087a6:	e005      	b.n	80087b4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087a8:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0ef      	beq.n	8008794 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80087ba:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	4904      	ldr	r1, [pc, #16]	; (80087d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	40021000 	.word	0x40021000
 80087d8:	07ff800f 	.word	0x07ff800f
 80087dc:	ff9f800f 	.word	0xff9f800f
 80087e0:	f9ff800f 	.word	0xf9ff800f

080087e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e0be      	b.n	8008974 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d108      	bne.n	8008810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008806:	d009      	beq.n	800881c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	61da      	str	r2, [r3, #28]
 800880e:	e005      	b.n	800881c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f8cb 	bl	80089cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2202      	movs	r2, #2
 800883a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800884c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008856:	d902      	bls.n	800885e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e002      	b.n	8008864 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800885e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008862:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800886c:	d007      	beq.n	800887e <HAL_SPI_Init+0x9a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008876:	d002      	beq.n	800887e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	ea42 0103 	orr.w	r1, r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088dc:	d11b      	bne.n	8008916 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10b      	bne.n	80088fe <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088ee:	d903      	bls.n	80088f8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
 80088f6:	e002      	b.n	80088fe <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	2b02      	cmp	r3, #2
 8008904:	d107      	bne.n	8008916 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008914:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	f003 0204 	and.w	r2, r3, #4
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	f003 0310 	and.w	r3, r3, #16
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800893c:	ea42 0103 	orr.w	r1, r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008956:	d105      	bne.n	8008964 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	b292      	uxth	r2, r2
 8008962:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e01a      	b.n	80089c4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2202      	movs	r2, #2
 8008992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f81a 	bl	80089e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d101      	bne.n	8008a16 <HAL_SPI_Transmit+0x22>
 8008a12:	2302      	movs	r3, #2
 8008a14:	e17a      	b.n	8008d0c <HAL_SPI_Transmit+0x318>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a1e:	f7fc fab3 	bl	8004f88 <HAL_GetTick>
 8008a22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d002      	beq.n	8008a3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a34:	2302      	movs	r3, #2
 8008a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a38:	e15f      	b.n	8008cfa <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <HAL_SPI_Transmit+0x52>
 8008a40:	88fb      	ldrh	r3, [r7, #6]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a4a:	e156      	b.n	8008cfa <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	88fa      	ldrh	r2, [r7, #6]
 8008a64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	88fa      	ldrh	r2, [r7, #6]
 8008a6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a96:	d10f      	bne.n	8008ab8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ab6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac0:	d10f      	bne.n	8008ae2 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ae0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d007      	beq.n	8008b00 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b08:	d94b      	bls.n	8008ba2 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <HAL_SPI_Transmit+0x124>
 8008b12:	8afb      	ldrh	r3, [r7, #22]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d13e      	bne.n	8008b96 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	881a      	ldrh	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	1c9a      	adds	r2, r3, #2
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b3c:	e02b      	b.n	8008b96 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d112      	bne.n	8008b72 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	881a      	ldrh	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	1c9a      	adds	r2, r3, #2
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b70:	e011      	b.n	8008b96 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b72:	f7fc fa09 	bl	8004f88 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d803      	bhi.n	8008b8a <HAL_SPI_Transmit+0x196>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b88:	d102      	bne.n	8008b90 <HAL_SPI_Transmit+0x19c>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b94:	e0b1      	b.n	8008cfa <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1ce      	bne.n	8008b3e <HAL_SPI_Transmit+0x14a>
 8008ba0:	e07c      	b.n	8008c9c <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <HAL_SPI_Transmit+0x1bc>
 8008baa:	8afb      	ldrh	r3, [r7, #22]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d170      	bne.n	8008c92 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d912      	bls.n	8008be0 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbe:	881a      	ldrh	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bca:	1c9a      	adds	r2, r3, #2
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	3b02      	subs	r3, #2
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bde:	e058      	b.n	8008c92 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330c      	adds	r3, #12
 8008bea:	7812      	ldrb	r2, [r2, #0]
 8008bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c06:	e044      	b.n	8008c92 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d12b      	bne.n	8008c6e <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d912      	bls.n	8008c46 <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	881a      	ldrh	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	1c9a      	adds	r2, r3, #2
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3b02      	subs	r3, #2
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c44:	e025      	b.n	8008c92 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c6c:	e011      	b.n	8008c92 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c6e:	f7fc f98b 	bl	8004f88 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d803      	bhi.n	8008c86 <HAL_SPI_Transmit+0x292>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c84:	d102      	bne.n	8008c8c <HAL_SPI_Transmit+0x298>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c90:	e033      	b.n	8008cfa <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1b5      	bne.n	8008c08 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca4:	d107      	bne.n	8008cb6 <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008cb4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fe7c 	bl	80099b8 <SPI_EndRxTxTransaction>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	77fb      	strb	r3, [r7, #31]
 8008cf6:	e000      	b.n	8008cfa <HAL_SPI_Transmit+0x306>
  }

error:
 8008cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08c      	sub	sp, #48	; 0x30
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	4613      	mov	r3, r2
 8008d22:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d3a:	d112      	bne.n	8008d62 <HAL_SPI_Receive+0x4e>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10e      	bne.n	8008d62 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2204      	movs	r2, #4
 8008d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d4c:	88fa      	ldrh	r2, [r7, #6]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	4613      	mov	r3, r2
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	68b9      	ldr	r1, [r7, #8]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f9c4 	bl	80090e6 <HAL_SPI_TransmitReceive>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	e1bd      	b.n	80090de <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_SPI_Receive+0x5c>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e1b6      	b.n	80090de <HAL_SPI_Receive+0x3ca>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d78:	f7fc f906 	bl	8004f88 <HAL_GetTick>
 8008d7c:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d003      	beq.n	8008d92 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008d90:	e19b      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_SPI_Receive+0x8a>
 8008d98:	88fb      	ldrh	r3, [r7, #6]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d103      	bne.n	8008da6 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008da4:	e191      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2204      	movs	r2, #4
 8008daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	88fa      	ldrh	r2, [r7, #6]
 8008dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	88fa      	ldrh	r2, [r7, #6]
 8008dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008df0:	d118      	bne.n	8008e24 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e10:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e2c:	d908      	bls.n	8008e40 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	e007      	b.n	8008e50 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e58:	d10f      	bne.n	8008e7a <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e84:	2b40      	cmp	r3, #64	; 0x40
 8008e86:	d007      	beq.n	8008e98 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ea0:	d869      	bhi.n	8008f76 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ea2:	e031      	b.n	8008f08 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d117      	bne.n	8008ee2 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f103 020c 	add.w	r2, r3, #12
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	b2d2      	uxtb	r2, r2
 8008ec2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008ee0:	e012      	b.n	8008f08 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ee2:	f7fc f851 	bl	8004f88 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d803      	bhi.n	8008efa <HAL_SPI_Receive+0x1e6>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef8:	d102      	bne.n	8008f00 <HAL_SPI_Receive+0x1ec>
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d103      	bne.n	8008f08 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008f06:	e0e0      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1c7      	bne.n	8008ea4 <HAL_SPI_Receive+0x190>
 8008f14:	e035      	b.n	8008f82 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d115      	bne.n	8008f50 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	b292      	uxth	r2, r2
 8008f30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	1c9a      	adds	r2, r3, #2
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	3b01      	subs	r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008f4e:	e012      	b.n	8008f76 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f50:	f7fc f81a 	bl	8004f88 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d803      	bhi.n	8008f68 <HAL_SPI_Receive+0x254>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f66:	d102      	bne.n	8008f6e <HAL_SPI_Receive+0x25a>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008f74:	e0a9      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1c9      	bne.n	8008f16 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8a:	d178      	bne.n	800907e <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f9a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 fb90 	bl	80096cc <SPI_WaitFlagStateUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8008fb8:	e087      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fc2:	d907      	bls.n	8008fd4 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	b292      	uxth	r2, r2
 8008fd0:	801a      	strh	r2, [r3, #0]
 8008fd2:	e008      	b.n	8008fe6 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f103 020c 	add.w	r2, r3, #12
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	b2d2      	uxtb	r2, r2
 8008fe4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2201      	movs	r2, #1
 8008fee:	2101      	movs	r1, #1
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb6b 	bl	80096cc <SPI_WaitFlagStateUntilTimeout>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d009      	beq.n	8009010 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009000:	f043 0202 	orr.w	r2, r3, #2
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800900e:	e05c      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009018:	d105      	bne.n	8009026 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	e02b      	b.n	800907e <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	330c      	adds	r3, #12
 800902c:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009036:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009040:	d11d      	bne.n	800907e <HAL_SPI_Receive+0x36a>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009046:	2b02      	cmp	r3, #2
 8009048:	d119      	bne.n	800907e <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2201      	movs	r2, #1
 8009052:	2101      	movs	r1, #1
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fb39 	bl	80096cc <SPI_WaitFlagStateUntilTimeout>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009064:	f043 0202 	orr.w	r2, r3, #2
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009072:	e02a      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800907c:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800907e:	6a3a      	ldr	r2, [r7, #32]
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 fc40 	bl	8009908 <SPI_EndRxTransaction>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2220      	movs	r2, #32
 8009092:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 0310 	and.w	r3, r3, #16
 800909e:	2b10      	cmp	r3, #16
 80090a0:	d10a      	bne.n	80090b8 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a6:	f043 0202 	orr.w	r2, r3, #2
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80090b6:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090c6:	e000      	b.n	80090ca <HAL_SPI_Receive+0x3b6>
  }

error :
 80090c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80090da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3728      	adds	r7, #40	; 0x28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b092      	sub	sp, #72	; 0x48
 80090ea:	af02      	add	r7, sp, #8
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090fc:	2301      	movs	r3, #1
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_SPI_TransmitReceive+0x2e>
 8009110:	2302      	movs	r3, #2
 8009112:	e2c8      	b.n	80096a6 <HAL_SPI_TransmitReceive+0x5c0>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800911c:	f7fb ff34 	bl	8004f88 <HAL_GetTick>
 8009120:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009128:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8009132:	887b      	ldrh	r3, [r7, #2]
 8009134:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8009136:	887b      	ldrh	r3, [r7, #2]
 8009138:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800914a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800914e:	2b01      	cmp	r3, #1
 8009150:	d00f      	beq.n	8009172 <HAL_SPI_TransmitReceive+0x8c>
 8009152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009158:	d107      	bne.n	800916a <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <HAL_SPI_TransmitReceive+0x84>
 8009162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009166:	2b04      	cmp	r3, #4
 8009168:	d003      	beq.n	8009172 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 800916a:	2302      	movs	r3, #2
 800916c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009170:	e28f      	b.n	8009692 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <HAL_SPI_TransmitReceive+0x9e>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <HAL_SPI_TransmitReceive+0x9e>
 800917e:	887b      	ldrh	r3, [r7, #2]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800918a:	e282      	b.n	8009692 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b04      	cmp	r3, #4
 8009196:	d003      	beq.n	80091a0 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2205      	movs	r2, #5
 800919c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	887a      	ldrh	r2, [r7, #2]
 80091b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	887a      	ldrh	r2, [r7, #2]
 80091b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	887a      	ldrh	r2, [r7, #2]
 80091c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	887a      	ldrh	r2, [r7, #2]
 80091cc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091e2:	d10f      	bne.n	8009204 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009202:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800920c:	d802      	bhi.n	8009214 <HAL_SPI_TransmitReceive+0x12e>
 800920e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009210:	2b01      	cmp	r3, #1
 8009212:	d908      	bls.n	8009226 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009222:	605a      	str	r2, [r3, #4]
 8009224:	e007      	b.n	8009236 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009234:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009240:	2b40      	cmp	r3, #64	; 0x40
 8009242:	d007      	beq.n	8009254 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800925c:	f240 80a4 	bls.w	80093a8 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_SPI_TransmitReceive+0x18a>
 8009268:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800926a:	2b01      	cmp	r3, #1
 800926c:	f040 808e 	bne.w	800938c <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	881a      	ldrh	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	1c9a      	adds	r2, r3, #2
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009294:	e07a      	b.n	800938c <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d13f      	bne.n	8009324 <HAL_SPI_TransmitReceive+0x23e>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d03a      	beq.n	8009324 <HAL_SPI_TransmitReceive+0x23e>
 80092ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d137      	bne.n	8009324 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	881a      	ldrh	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	1c9a      	adds	r2, r3, #2
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	3b01      	subs	r3, #1
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d11e      	bne.n	8009324 <HAL_SPI_TransmitReceive+0x23e>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ee:	d119      	bne.n	8009324 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	f003 0304 	and.w	r3, r3, #4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10c      	bne.n	8009314 <HAL_SPI_TransmitReceive+0x22e>
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b00      	cmp	r3, #0
 8009302:	d007      	beq.n	8009314 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009312:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009322:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b01      	cmp	r3, #1
 8009330:	d11c      	bne.n	800936c <HAL_SPI_TransmitReceive+0x286>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d016      	beq.n	800936c <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	b292      	uxth	r2, r2
 800934a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	1c9a      	adds	r2, r3, #2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800935c:	b29b      	uxth	r3, r3
 800935e:	3b01      	subs	r3, #1
 8009360:	b29a      	uxth	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009368:	2301      	movs	r3, #1
 800936a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800936c:	f7fb fe0c 	bl	8004f88 <HAL_GetTick>
 8009370:	4602      	mov	r2, r0
 8009372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009378:	429a      	cmp	r2, r3
 800937a:	d807      	bhi.n	800938c <HAL_SPI_TransmitReceive+0x2a6>
 800937c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800937e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009382:	d003      	beq.n	800938c <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800938a:	e182      	b.n	8009692 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009390:	b29b      	uxth	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	f47f af7f 	bne.w	8009296 <HAL_SPI_TransmitReceive+0x1b0>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800939e:	b29b      	uxth	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f47f af78 	bne.w	8009296 <HAL_SPI_TransmitReceive+0x1b0>
 80093a6:	e103      	b.n	80095b0 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_SPI_TransmitReceive+0x2d2>
 80093b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	f040 80ef 	bne.w	8009596 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d912      	bls.n	80093e8 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	881a      	ldrh	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	1c9a      	adds	r2, r3, #2
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093dc:	b29b      	uxth	r3, r3
 80093de:	3b02      	subs	r3, #2
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093e6:	e0d6      	b.n	8009596 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	330c      	adds	r3, #12
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	b29a      	uxth	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800940e:	e0c2      	b.n	8009596 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b02      	cmp	r3, #2
 800941c:	d158      	bne.n	80094d0 <HAL_SPI_TransmitReceive+0x3ea>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009422:	b29b      	uxth	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d053      	beq.n	80094d0 <HAL_SPI_TransmitReceive+0x3ea>
 8009428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942a:	2b01      	cmp	r3, #1
 800942c:	d150      	bne.n	80094d0 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009432:	b29b      	uxth	r3, r3
 8009434:	2b01      	cmp	r3, #1
 8009436:	d912      	bls.n	800945e <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	881a      	ldrh	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009448:	1c9a      	adds	r2, r3, #2
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009452:	b29b      	uxth	r3, r3
 8009454:	3b02      	subs	r3, #2
 8009456:	b29a      	uxth	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800945c:	e012      	b.n	8009484 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330c      	adds	r3, #12
 8009468:	7812      	ldrb	r2, [r2, #0]
 800946a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947a:	b29b      	uxth	r3, r3
 800947c:	3b01      	subs	r3, #1
 800947e:	b29a      	uxth	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800948c:	b29b      	uxth	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d11e      	bne.n	80094d0 <HAL_SPI_TransmitReceive+0x3ea>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949a:	d119      	bne.n	80094d0 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10c      	bne.n	80094c0 <HAL_SPI_TransmitReceive+0x3da>
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094be:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094ce:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d148      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x48a>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d042      	beq.n	8009570 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d923      	bls.n	800953e <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	b292      	uxth	r2, r2
 8009502:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	1c9a      	adds	r2, r3, #2
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b02      	subs	r3, #2
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009526:	b29b      	uxth	r3, r3
 8009528:	2b01      	cmp	r3, #1
 800952a:	d81f      	bhi.n	800956c <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	e016      	b.n	800956c <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f103 020c 	add.w	r2, r3, #12
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	b2d2      	uxtb	r2, r2
 800954e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800956c:	2301      	movs	r3, #1
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009570:	f7fb fd0a 	bl	8004f88 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800957c:	429a      	cmp	r2, r3
 800957e:	d803      	bhi.n	8009588 <HAL_SPI_TransmitReceive+0x4a2>
 8009580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009586:	d102      	bne.n	800958e <HAL_SPI_TransmitReceive+0x4a8>
 8009588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800958a:	2b00      	cmp	r3, #0
 800958c:	d103      	bne.n	8009596 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009594:	e07d      	b.n	8009692 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	f47f af37 	bne.w	8009410 <HAL_SPI_TransmitReceive+0x32a>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f47f af30 	bne.w	8009410 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095b8:	d146      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095c0:	2201      	movs	r2, #1
 80095c2:	2101      	movs	r1, #1
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f881 	bl	80096cc <SPI_WaitFlagStateUntilTimeout>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d4:	f043 0202 	orr.w	r2, r3, #2
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80095e2:	e056      	b.n	8009692 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80095ec:	d105      	bne.n	80095fa <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	e026      	b.n	8009648 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	330c      	adds	r3, #12
 8009600:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800960a:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009610:	2b02      	cmp	r3, #2
 8009612:	d119      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800961a:	2201      	movs	r2, #1
 800961c:	2101      	movs	r1, #1
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 f854 	bl	80096cc <SPI_WaitFlagStateUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800962e:	f043 0202 	orr.w	r2, r3, #2
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 800963c:	e029      	b.n	8009692 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009646:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b10      	cmp	r3, #16
 8009654:	d10d      	bne.n	8009672 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965a:	f043 0202 	orr.w	r2, r3, #2
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800966a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009674:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f99e 	bl	80099b8 <SPI_EndRxTxTransaction>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d006      	beq.n	8009690 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2220      	movs	r2, #32
 800968c:	661a      	str	r2, [r3, #96]	; 0x60
 800968e:	e000      	b.n	8009692 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009690:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80096a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3740      	adds	r7, #64	; 0x40
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096bc:	b2db      	uxtb	r3, r3
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
	...

080096cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	4613      	mov	r3, r2
 80096da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096dc:	f7fb fc54 	bl	8004f88 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	4413      	add	r3, r2
 80096ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096ec:	f7fb fc4c 	bl	8004f88 <HAL_GetTick>
 80096f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096f2:	4b39      	ldr	r3, [pc, #228]	; (80097d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	015b      	lsls	r3, r3, #5
 80096f8:	0d1b      	lsrs	r3, r3, #20
 80096fa:	69fa      	ldr	r2, [r7, #28]
 80096fc:	fb02 f303 	mul.w	r3, r2, r3
 8009700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009702:	e054      	b.n	80097ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800970a:	d050      	beq.n	80097ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800970c:	f7fb fc3c 	bl	8004f88 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	429a      	cmp	r2, r3
 800971a:	d902      	bls.n	8009722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d13d      	bne.n	800979e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800973a:	d111      	bne.n	8009760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009744:	d004      	beq.n	8009750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800974e:	d107      	bne.n	8009760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800975e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009768:	d10f      	bne.n	800978a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e017      	b.n	80097ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4013      	ands	r3, r2
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	bf0c      	ite	eq
 80097be:	2301      	moveq	r3, #1
 80097c0:	2300      	movne	r3, #0
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	461a      	mov	r2, r3
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d19b      	bne.n	8009704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3720      	adds	r7, #32
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000008 	.word	0x20000008

080097dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	; 0x28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80097ee:	f7fb fbcb 	bl	8004f88 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	4413      	add	r3, r2
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80097fe:	f7fb fbc3 	bl	8004f88 <HAL_GetTick>
 8009802:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	330c      	adds	r3, #12
 800980a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800980c:	4b3d      	ldr	r3, [pc, #244]	; (8009904 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	00da      	lsls	r2, r3, #3
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	0d1b      	lsrs	r3, r3, #20
 800981c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981e:	fb02 f303 	mul.w	r3, r2, r3
 8009822:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009824:	e060      	b.n	80098e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800982c:	d107      	bne.n	800983e <SPI_WaitFifoStateUntilTimeout+0x62>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800983c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009844:	d050      	beq.n	80098e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009846:	f7fb fb9f 	bl	8004f88 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009852:	429a      	cmp	r2, r3
 8009854:	d902      	bls.n	800985c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	2b00      	cmp	r3, #0
 800985a:	d13d      	bne.n	80098d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800986a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009874:	d111      	bne.n	800989a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987e:	d004      	beq.n	800988a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009888:	d107      	bne.n	800989a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009898:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a2:	d10f      	bne.n	80098c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e010      	b.n	80098fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4013      	ands	r3, r2
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d196      	bne.n	8009826 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3728      	adds	r7, #40	; 0x28
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20000008 	.word	0x20000008

08009908 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af02      	add	r7, sp, #8
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800991c:	d111      	bne.n	8009942 <SPI_EndRxTransaction+0x3a>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009926:	d004      	beq.n	8009932 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009930:	d107      	bne.n	8009942 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009940:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2200      	movs	r2, #0
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff febd 	bl	80096cc <SPI_WaitFlagStateUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995c:	f043 0220 	orr.w	r2, r3, #32
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e023      	b.n	80099b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009970:	d11d      	bne.n	80099ae <SPI_EndRxTransaction+0xa6>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800997a:	d004      	beq.n	8009986 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009984:	d113      	bne.n	80099ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2200      	movs	r2, #0
 800998e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff ff22 	bl	80097dc <SPI_WaitFifoStateUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d007      	beq.n	80099ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e000      	b.n	80099b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af02      	add	r7, sp, #8
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f7ff ff03 	bl	80097dc <SPI_WaitFifoStateUntilTimeout>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e0:	f043 0220 	orr.w	r2, r3, #32
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e027      	b.n	8009a3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2200      	movs	r2, #0
 80099f4:	2180      	movs	r1, #128	; 0x80
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7ff fe68 	bl	80096cc <SPI_WaitFlagStateUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a06:	f043 0220 	orr.w	r2, r3, #32
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e014      	b.n	8009a3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7ff fedc 	bl	80097dc <SPI_WaitFifoStateUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a2e:	f043 0220 	orr.w	r2, r3, #32
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e000      	b.n	8009a3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a44:	b084      	sub	sp, #16
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	f107 001c 	add.w	r0, r7, #28
 8009a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 faf6 	bl	800b054 <USB_CoreReset>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8009a7e:	e005      	b.n	8009a8c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a98:	b004      	add	sp, #16
 8009a9a:	4770      	bx	lr

08009a9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d165      	bne.n	8009b7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4a3e      	ldr	r2, [pc, #248]	; (8009bac <USB_SetTurnaroundTime+0x110>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d906      	bls.n	8009ac6 <USB_SetTurnaroundTime+0x2a>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4a3d      	ldr	r2, [pc, #244]	; (8009bb0 <USB_SetTurnaroundTime+0x114>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d202      	bcs.n	8009ac6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009ac0:	230f      	movs	r3, #15
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e05c      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	4a39      	ldr	r2, [pc, #228]	; (8009bb0 <USB_SetTurnaroundTime+0x114>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d306      	bcc.n	8009adc <USB_SetTurnaroundTime+0x40>
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4a38      	ldr	r2, [pc, #224]	; (8009bb4 <USB_SetTurnaroundTime+0x118>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d202      	bcs.n	8009adc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ad6:	230e      	movs	r3, #14
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	e051      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	4a35      	ldr	r2, [pc, #212]	; (8009bb4 <USB_SetTurnaroundTime+0x118>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d306      	bcc.n	8009af2 <USB_SetTurnaroundTime+0x56>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4a34      	ldr	r2, [pc, #208]	; (8009bb8 <USB_SetTurnaroundTime+0x11c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d202      	bcs.n	8009af2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009aec:	230d      	movs	r3, #13
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	e046      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	4a30      	ldr	r2, [pc, #192]	; (8009bb8 <USB_SetTurnaroundTime+0x11c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d306      	bcc.n	8009b08 <USB_SetTurnaroundTime+0x6c>
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	4a2f      	ldr	r2, [pc, #188]	; (8009bbc <USB_SetTurnaroundTime+0x120>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d802      	bhi.n	8009b08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b02:	230c      	movs	r3, #12
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e03b      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4a2c      	ldr	r2, [pc, #176]	; (8009bbc <USB_SetTurnaroundTime+0x120>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d906      	bls.n	8009b1e <USB_SetTurnaroundTime+0x82>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4a2b      	ldr	r2, [pc, #172]	; (8009bc0 <USB_SetTurnaroundTime+0x124>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d802      	bhi.n	8009b1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009b18:	230b      	movs	r3, #11
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	e030      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	4a27      	ldr	r2, [pc, #156]	; (8009bc0 <USB_SetTurnaroundTime+0x124>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d906      	bls.n	8009b34 <USB_SetTurnaroundTime+0x98>
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <USB_SetTurnaroundTime+0x128>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d802      	bhi.n	8009b34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009b2e:	230a      	movs	r3, #10
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	e025      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4a23      	ldr	r2, [pc, #140]	; (8009bc4 <USB_SetTurnaroundTime+0x128>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d906      	bls.n	8009b4a <USB_SetTurnaroundTime+0xae>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4a22      	ldr	r2, [pc, #136]	; (8009bc8 <USB_SetTurnaroundTime+0x12c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d202      	bcs.n	8009b4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009b44:	2309      	movs	r3, #9
 8009b46:	617b      	str	r3, [r7, #20]
 8009b48:	e01a      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	4a1e      	ldr	r2, [pc, #120]	; (8009bc8 <USB_SetTurnaroundTime+0x12c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d306      	bcc.n	8009b60 <USB_SetTurnaroundTime+0xc4>
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4a1d      	ldr	r2, [pc, #116]	; (8009bcc <USB_SetTurnaroundTime+0x130>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d802      	bhi.n	8009b60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	e00f      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	4a1a      	ldr	r2, [pc, #104]	; (8009bcc <USB_SetTurnaroundTime+0x130>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d906      	bls.n	8009b76 <USB_SetTurnaroundTime+0xda>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4a19      	ldr	r2, [pc, #100]	; (8009bd0 <USB_SetTurnaroundTime+0x134>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d202      	bcs.n	8009b76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b70:	2307      	movs	r3, #7
 8009b72:	617b      	str	r3, [r7, #20]
 8009b74:	e004      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b76:	2306      	movs	r3, #6
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	e001      	b.n	8009b80 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b7c:	2309      	movs	r3, #9
 8009b7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	029b      	lsls	r3, r3, #10
 8009b94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	00d8acbf 	.word	0x00d8acbf
 8009bb0:	00e4e1c0 	.word	0x00e4e1c0
 8009bb4:	00f42400 	.word	0x00f42400
 8009bb8:	01067380 	.word	0x01067380
 8009bbc:	011a499f 	.word	0x011a499f
 8009bc0:	01312cff 	.word	0x01312cff
 8009bc4:	014ca43f 	.word	0x014ca43f
 8009bc8:	016e3600 	.word	0x016e3600
 8009bcc:	01a6ab1f 	.word	0x01a6ab1f
 8009bd0:	01e84800 	.word	0x01e84800

08009bd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f043 0201 	orr.w	r2, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f023 0201 	bic.w	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d115      	bne.n	8009c66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c46:	2001      	movs	r0, #1
 8009c48:	f7fb f9aa 	bl	8004fa0 <HAL_Delay>
      ms++;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 f985 	bl	800af62 <USB_GetMode>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d01e      	beq.n	8009c9c <USB_SetCurrentMode+0x84>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2b31      	cmp	r3, #49	; 0x31
 8009c62:	d9f0      	bls.n	8009c46 <USB_SetCurrentMode+0x2e>
 8009c64:	e01a      	b.n	8009c9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d115      	bne.n	8009c98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c78:	2001      	movs	r0, #1
 8009c7a:	f7fb f991 	bl	8004fa0 <HAL_Delay>
      ms++;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f96c 	bl	800af62 <USB_GetMode>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d005      	beq.n	8009c9c <USB_SetCurrentMode+0x84>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b31      	cmp	r3, #49	; 0x31
 8009c94:	d9f0      	bls.n	8009c78 <USB_SetCurrentMode+0x60>
 8009c96:	e001      	b.n	8009c9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e005      	b.n	8009ca8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b32      	cmp	r3, #50	; 0x32
 8009ca0:	d101      	bne.n	8009ca6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e000      	b.n	8009ca8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b086      	sub	sp, #24
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009cca:	2300      	movs	r3, #0
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	e009      	b.n	8009ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	3340      	adds	r3, #64	; 0x40
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b0e      	cmp	r3, #14
 8009ce8:	d9f2      	bls.n	8009cd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d11c      	bne.n	8009d2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	e005      	b.n	8009d36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d48:	4619      	mov	r1, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d50:	461a      	mov	r2, r3
 8009d52:	680b      	ldr	r3, [r1, #0]
 8009d54:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d56:	2103      	movs	r1, #3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f959 	bl	800a010 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d5e:	2110      	movs	r1, #16
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f8f1 	bl	8009f48 <USB_FlushTxFifo>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f91d 	bl	8009fb0 <USB_FlushRxFifo>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d86:	461a      	mov	r2, r3
 8009d88:	2300      	movs	r3, #0
 8009d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d92:	461a      	mov	r2, r3
 8009d94:	2300      	movs	r3, #0
 8009d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9e:	461a      	mov	r2, r3
 8009da0:	2300      	movs	r3, #0
 8009da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]
 8009da8:	e043      	b.n	8009e32 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dc0:	d118      	bne.n	8009df4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	e013      	b.n	8009e06 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dea:	461a      	mov	r2, r3
 8009dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	e008      	b.n	8009e06 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e00:	461a      	mov	r2, r3
 8009e02:	2300      	movs	r3, #0
 8009e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e12:	461a      	mov	r2, r3
 8009e14:	2300      	movs	r3, #0
 8009e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e24:	461a      	mov	r2, r3
 8009e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	613b      	str	r3, [r7, #16]
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d3b7      	bcc.n	8009daa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	e043      	b.n	8009ec8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e56:	d118      	bne.n	8009e8a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	e013      	b.n	8009e9c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e80:	461a      	mov	r2, r3
 8009e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	e008      	b.n	8009e9c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e96:	461a      	mov	r2, r3
 8009e98:	2300      	movs	r3, #0
 8009e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	613b      	str	r3, [r7, #16]
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d3b7      	bcc.n	8009e40 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	f043 0210 	orr.w	r2, r3, #16
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	699a      	ldr	r2, [r3, #24]
 8009f02:	4b10      	ldr	r3, [pc, #64]	; (8009f44 <USB_DevInit+0x294>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d005      	beq.n	8009f1c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	f043 0208 	orr.w	r2, r3, #8
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d107      	bne.n	8009f32 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f2a:	f043 0304 	orr.w	r3, r3, #4
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f3e:	b004      	add	sp, #16
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	803c3800 	.word	0x803c3800

08009f48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4a13      	ldr	r2, [pc, #76]	; (8009fac <USB_FlushTxFifo+0x64>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d901      	bls.n	8009f68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e01b      	b.n	8009fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	daf2      	bge.n	8009f56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	019b      	lsls	r3, r3, #6
 8009f78:	f043 0220 	orr.w	r2, r3, #32
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3301      	adds	r3, #1
 8009f84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4a08      	ldr	r2, [pc, #32]	; (8009fac <USB_FlushTxFifo+0x64>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d901      	bls.n	8009f92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e006      	b.n	8009fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	f003 0320 	and.w	r3, r3, #32
 8009f9a:	2b20      	cmp	r3, #32
 8009f9c:	d0f0      	beq.n	8009f80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	00030d40 	.word	0x00030d40

08009fb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a11      	ldr	r2, [pc, #68]	; (800a00c <USB_FlushRxFifo+0x5c>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d901      	bls.n	8009fce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e018      	b.n	800a000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	daf2      	bge.n	8009fbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2210      	movs	r2, #16
 8009fde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	4a08      	ldr	r2, [pc, #32]	; (800a00c <USB_FlushRxFifo+0x5c>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d901      	bls.n	8009ff2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e006      	b.n	800a000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	f003 0310 	and.w	r3, r3, #16
 8009ffa:	2b10      	cmp	r3, #16
 8009ffc:	d0f0      	beq.n	8009fe0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	00030d40 	.word	0x00030d40

0800a010 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a030:	4313      	orrs	r3, r2
 800a032:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a042:	b480      	push	{r7}
 800a044:	b087      	sub	sp, #28
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 0306 	and.w	r3, r3, #6
 800a05a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d002      	beq.n	800a068 <USB_GetDevSpeed+0x26>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b06      	cmp	r3, #6
 800a066:	d102      	bne.n	800a06e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a068:	2302      	movs	r3, #2
 800a06a:	75fb      	strb	r3, [r7, #23]
 800a06c:	e001      	b.n	800a072 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a06e:	230f      	movs	r3, #15
 800a070:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
}
 800a074:	4618      	mov	r0, r3
 800a076:	371c      	adds	r7, #28
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d13a      	bne.n	800a112 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a2:	69da      	ldr	r2, [r3, #28]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	f003 030f 	and.w	r3, r3, #15
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	68f9      	ldr	r1, [r7, #12]
 800a0b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d155      	bne.n	800a180 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	791b      	ldrb	r3, [r3, #4]
 800a0ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	059b      	lsls	r3, r3, #22
 800a0f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	0151      	lsls	r1, r2, #5
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	440a      	add	r2, r1
 800a102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a10a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	e036      	b.n	800a180 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a118:	69da      	ldr	r2, [r3, #28]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	f003 030f 	and.w	r3, r3, #15
 800a122:	2101      	movs	r1, #1
 800a124:	fa01 f303 	lsl.w	r3, r1, r3
 800a128:	041b      	lsls	r3, r3, #16
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a130:	4313      	orrs	r3, r2
 800a132:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d11a      	bne.n	800a180 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	791b      	ldrb	r3, [r3, #4]
 800a164:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a166:	430b      	orrs	r3, r1
 800a168:	4313      	orrs	r3, r2
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	0151      	lsls	r1, r2, #5
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	440a      	add	r2, r1
 800a172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a17a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a17e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
	...

0800a190 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d161      	bne.n	800a270 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c2:	d11f      	bne.n	800a204 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a202:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	2101      	movs	r1, #1
 800a216:	fa01 f303 	lsl.w	r3, r1, r3
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	43db      	mvns	r3, r3
 800a21e:	68f9      	ldr	r1, [r7, #12]
 800a220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a224:	4013      	ands	r3, r2
 800a226:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22e:	69da      	ldr	r2, [r3, #28]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	f003 030f 	and.w	r3, r3, #15
 800a238:	2101      	movs	r1, #1
 800a23a:	fa01 f303 	lsl.w	r3, r1, r3
 800a23e:	b29b      	uxth	r3, r3
 800a240:	43db      	mvns	r3, r3
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a248:	4013      	ands	r3, r2
 800a24a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	015a      	lsls	r2, r3, #5
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4413      	add	r3, r2
 800a254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	0159      	lsls	r1, r3, #5
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	440b      	add	r3, r1
 800a262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a266:	4619      	mov	r1, r3
 800a268:	4b35      	ldr	r3, [pc, #212]	; (800a340 <USB_DeactivateEndpoint+0x1b0>)
 800a26a:	4013      	ands	r3, r2
 800a26c:	600b      	str	r3, [r1, #0]
 800a26e:	e060      	b.n	800a332 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a286:	d11f      	bne.n	800a2c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	0151      	lsls	r1, r2, #5
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	440a      	add	r2, r1
 800a29e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	0151      	lsls	r1, r2, #5
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	440a      	add	r2, r1
 800a2be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	f003 030f 	and.w	r3, r3, #15
 800a2d8:	2101      	movs	r1, #1
 800a2da:	fa01 f303 	lsl.w	r3, r1, r3
 800a2de:	041b      	lsls	r3, r3, #16
 800a2e0:	43db      	mvns	r3, r3
 800a2e2:	68f9      	ldr	r1, [r7, #12]
 800a2e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f2:	69da      	ldr	r2, [r3, #28]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f003 030f 	and.w	r3, r3, #15
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a302:	041b      	lsls	r3, r3, #16
 800a304:	43db      	mvns	r3, r3
 800a306:	68f9      	ldr	r1, [r7, #12]
 800a308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a30c:	4013      	ands	r3, r2
 800a30e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	0159      	lsls	r1, r3, #5
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	440b      	add	r3, r1
 800a326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32a:	4619      	mov	r1, r3
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <USB_DeactivateEndpoint+0x1b4>)
 800a32e:	4013      	ands	r3, r2
 800a330:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	ec337800 	.word	0xec337800
 800a344:	eff37800 	.word	0xeff37800

0800a348 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	2b01      	cmp	r3, #1
 800a362:	f040 810a 	bne.w	800a57a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d132      	bne.n	800a3d4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	0151      	lsls	r1, r2, #5
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	440a      	add	r2, r1
 800a384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a388:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a38c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	0151      	lsls	r1, r2, #5
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3cc:	0cdb      	lsrs	r3, r3, #19
 800a3ce:	04db      	lsls	r3, r3, #19
 800a3d0:	6113      	str	r3, [r2, #16]
 800a3d2:	e074      	b.n	800a4be <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	0151      	lsls	r1, r2, #5
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	440a      	add	r2, r1
 800a3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ee:	0cdb      	lsrs	r3, r3, #19
 800a3f0:	04db      	lsls	r3, r3, #19
 800a3f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	0151      	lsls	r1, r2, #5
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	440a      	add	r2, r1
 800a40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a412:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a424:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	6999      	ldr	r1, [r3, #24]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	440b      	add	r3, r1
 800a430:	1e59      	subs	r1, r3, #1
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	fbb1 f3f3 	udiv	r3, r1, r3
 800a43a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a43c:	4b9e      	ldr	r3, [pc, #632]	; (800a6b8 <USB_EPStartXfer+0x370>)
 800a43e:	400b      	ands	r3, r1
 800a440:	6939      	ldr	r1, [r7, #16]
 800a442:	0148      	lsls	r0, r1, #5
 800a444:	6979      	ldr	r1, [r7, #20]
 800a446:	4401      	add	r1, r0
 800a448:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a44c:	4313      	orrs	r3, r2
 800a44e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a45c:	691a      	ldr	r2, [r3, #16]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a466:	6939      	ldr	r1, [r7, #16]
 800a468:	0148      	lsls	r0, r1, #5
 800a46a:	6979      	ldr	r1, [r7, #20]
 800a46c:	4401      	add	r1, r0
 800a46e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a472:	4313      	orrs	r3, r2
 800a474:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	791b      	ldrb	r3, [r3, #4]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d11f      	bne.n	800a4be <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	4413      	add	r3, r2
 800a486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	0151      	lsls	r1, r2, #5
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	440a      	add	r2, r1
 800a494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a498:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a49c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4bc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	0151      	lsls	r1, r2, #5
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	440a      	add	r2, r1
 800a4d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4dc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	791b      	ldrb	r3, [r3, #4]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d015      	beq.n	800a512 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 8106 	beq.w	800a6fc <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	f003 030f 	and.w	r3, r3, #15
 800a500:	2101      	movs	r1, #1
 800a502:	fa01 f303 	lsl.w	r3, r1, r3
 800a506:	6979      	ldr	r1, [r7, #20]
 800a508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a50c:	4313      	orrs	r3, r2
 800a50e:	634b      	str	r3, [r1, #52]	; 0x34
 800a510:	e0f4      	b.n	800a6fc <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d110      	bne.n	800a544 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	0151      	lsls	r1, r2, #5
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	440a      	add	r2, r1
 800a538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a53c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	e00f      	b.n	800a564 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a562:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	6919      	ldr	r1, [r3, #16]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781a      	ldrb	r2, [r3, #0]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	b29b      	uxth	r3, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa94 	bl	800aaa0 <USB_WritePacket>
 800a578:	e0c0      	b.n	800a6fc <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a594:	0cdb      	lsrs	r3, r3, #19
 800a596:	04db      	lsls	r3, r3, #19
 800a598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	0151      	lsls	r1, r2, #5
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	440a      	add	r2, r1
 800a5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d123      	bne.n	800a60e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	015a      	lsls	r2, r3, #5
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d2:	691a      	ldr	r2, [r3, #16]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5dc:	6939      	ldr	r1, [r7, #16]
 800a5de:	0148      	lsls	r0, r1, #5
 800a5e0:	6979      	ldr	r1, [r7, #20]
 800a5e2:	4401      	add	r1, r0
 800a5e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	0151      	lsls	r1, r2, #5
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	440a      	add	r2, r1
 800a602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a60a:	6113      	str	r3, [r2, #16]
 800a60c:	e037      	b.n	800a67e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	4413      	add	r3, r2
 800a618:	1e5a      	subs	r2, r3, #1
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a622:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	89fa      	ldrh	r2, [r7, #14]
 800a62a:	fb03 f202 	mul.w	r2, r3, r2
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63e:	691a      	ldr	r2, [r3, #16]
 800a640:	89fb      	ldrh	r3, [r7, #14]
 800a642:	04d9      	lsls	r1, r3, #19
 800a644:	4b1c      	ldr	r3, [pc, #112]	; (800a6b8 <USB_EPStartXfer+0x370>)
 800a646:	400b      	ands	r3, r1
 800a648:	6939      	ldr	r1, [r7, #16]
 800a64a:	0148      	lsls	r0, r1, #5
 800a64c:	6979      	ldr	r1, [r7, #20]
 800a64e:	4401      	add	r1, r0
 800a650:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a654:	4313      	orrs	r3, r2
 800a656:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a664:	691a      	ldr	r2, [r3, #16]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	69db      	ldr	r3, [r3, #28]
 800a66a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a66e:	6939      	ldr	r1, [r7, #16]
 800a670:	0148      	lsls	r0, r1, #5
 800a672:	6979      	ldr	r1, [r7, #20]
 800a674:	4401      	add	r1, r0
 800a676:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a67a:	4313      	orrs	r3, r2
 800a67c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	791b      	ldrb	r3, [r3, #4]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d12a      	bne.n	800a6dc <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a692:	2b00      	cmp	r3, #0
 800a694:	d112      	bne.n	800a6bc <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	0151      	lsls	r1, r2, #5
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	440a      	add	r2, r1
 800a6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	e011      	b.n	800a6dc <USB_EPStartXfer+0x394>
 800a6b8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop

0800a708 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	2b01      	cmp	r3, #1
 800a722:	f040 80ab 	bne.w	800a87c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d132      	bne.n	800a794 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	0151      	lsls	r1, r2, #5
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	440a      	add	r2, r1
 800a744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a748:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a74c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	0151      	lsls	r1, r2, #5
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	440a      	add	r2, r1
 800a788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a78c:	0cdb      	lsrs	r3, r3, #19
 800a78e:	04db      	lsls	r3, r3, #19
 800a790:	6113      	str	r3, [r2, #16]
 800a792:	e04e      	b.n	800a832 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	0151      	lsls	r1, r2, #5
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	440a      	add	r2, r1
 800a7aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ae:	0cdb      	lsrs	r3, r3, #19
 800a7b0:	04db      	lsls	r3, r3, #19
 800a7b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	0151      	lsls	r1, r2, #5
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	440a      	add	r2, r1
 800a7ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	699a      	ldr	r2, [r3, #24]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d903      	bls.n	800a7ec <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	68da      	ldr	r2, [r3, #12]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	0151      	lsls	r1, r2, #5
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	440a      	add	r2, r1
 800a802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a80a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a818:	691a      	ldr	r2, [r3, #16]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	0148      	lsls	r0, r1, #5
 800a826:	68f9      	ldr	r1, [r7, #12]
 800a828:	4401      	add	r1, r0
 800a82a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a82e:	4313      	orrs	r3, r2
 800a830:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	015a      	lsls	r2, r3, #5
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	4413      	add	r3, r2
 800a83a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	0151      	lsls	r1, r2, #5
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	440a      	add	r2, r1
 800a848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a84c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a850:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d071      	beq.n	800a93e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	2101      	movs	r1, #1
 800a86c:	fa01 f303 	lsl.w	r3, r1, r3
 800a870:	68f9      	ldr	r1, [r7, #12]
 800a872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a876:	4313      	orrs	r3, r2
 800a878:	634b      	str	r3, [r1, #52]	; 0x34
 800a87a:	e060      	b.n	800a93e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	0151      	lsls	r1, r2, #5
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	440a      	add	r2, r1
 800a892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a896:	0cdb      	lsrs	r3, r3, #19
 800a898:	04db      	lsls	r3, r3, #19
 800a89a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	0151      	lsls	r1, r2, #5
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	440a      	add	r2, r1
 800a8b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	68da      	ldr	r2, [r3, #12]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68da      	ldr	r2, [r3, #12]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	0151      	lsls	r1, r2, #5
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	440a      	add	r2, r1
 800a8ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a904:	691a      	ldr	r2, [r3, #16]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a90e:	68b9      	ldr	r1, [r7, #8]
 800a910:	0148      	lsls	r0, r1, #5
 800a912:	68f9      	ldr	r1, [r7, #12]
 800a914:	4401      	add	r1, r0
 800a916:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a91a:	4313      	orrs	r3, r2
 800a91c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	0151      	lsls	r1, r2, #5
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	440a      	add	r2, r1
 800a934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a93c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d14a      	bne.n	800aa00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a97e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a982:	f040 8086 	bne.w	800aa92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	7812      	ldrb	r2, [r2, #0]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	7812      	ldrb	r2, [r2, #0]
 800a9be:	0151      	lsls	r1, r2, #5
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	440a      	add	r2, r1
 800a9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d902      	bls.n	800a9e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a9e2:	e056      	b.n	800aa92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9fc:	d0e7      	beq.n	800a9ce <USB_EPStopXfer+0x82>
 800a9fe:	e048      	b.n	800aa92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa18:	d13b      	bne.n	800aa92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	0151      	lsls	r1, r2, #5
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	440a      	add	r2, r1
 800aa34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	7812      	ldrb	r2, [r2, #0]
 800aa52:	0151      	lsls	r1, r2, #5
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	440a      	add	r2, r1
 800aa58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d902      	bls.n	800aa78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	75fb      	strb	r3, [r7, #23]
          break;
 800aa76:	e00c      	b.n	800aa92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa90:	d0e7      	beq.n	800aa62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	371c      	adds	r7, #28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b089      	sub	sp, #36	; 0x24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	461a      	mov	r2, r3
 800aaae:	460b      	mov	r3, r1
 800aab0:	71fb      	strb	r3, [r7, #7]
 800aab2:	4613      	mov	r3, r2
 800aab4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800aabe:	88bb      	ldrh	r3, [r7, #4]
 800aac0:	3303      	adds	r3, #3
 800aac2:	089b      	lsrs	r3, r3, #2
 800aac4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800aac6:	2300      	movs	r3, #0
 800aac8:	61bb      	str	r3, [r7, #24]
 800aaca:	e018      	b.n	800aafe <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	031a      	lsls	r2, r3, #12
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad8:	461a      	mov	r2, r3
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6013      	str	r3, [r2, #0]
    pSrc++;
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	3301      	adds	r3, #1
 800aae4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	3301      	adds	r3, #1
 800aaea:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	3301      	adds	r3, #1
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d3e2      	bcc.n	800aacc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3724      	adds	r7, #36	; 0x24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b08b      	sub	sp, #44	; 0x2c
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ab2a:	88fb      	ldrh	r3, [r7, #6]
 800ab2c:	089b      	lsrs	r3, r3, #2
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ab32:	88fb      	ldrh	r3, [r7, #6]
 800ab34:	f003 0303 	and.w	r3, r3, #3
 800ab38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	623b      	str	r3, [r7, #32]
 800ab3e:	e014      	b.n	800ab6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	3301      	adds	r3, #1
 800ab50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	3301      	adds	r3, #1
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	3301      	adds	r3, #1
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	3301      	adds	r3, #1
 800ab68:	623b      	str	r3, [r7, #32]
 800ab6a:	6a3a      	ldr	r2, [r7, #32]
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d3e6      	bcc.n	800ab40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ab72:	8bfb      	ldrh	r3, [r7, #30]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01e      	beq.n	800abb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab82:	461a      	mov	r2, r3
 800ab84:	f107 0310 	add.w	r3, r7, #16
 800ab88:	6812      	ldr	r2, [r2, #0]
 800ab8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	fa22 f303 	lsr.w	r3, r2, r3
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	701a      	strb	r2, [r3, #0]
      i++;
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	3301      	adds	r3, #1
 800aba2:	623b      	str	r3, [r7, #32]
      pDest++;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	3301      	adds	r3, #1
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800abaa:	8bfb      	ldrh	r3, [r7, #30]
 800abac:	3b01      	subs	r3, #1
 800abae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800abb0:	8bfb      	ldrh	r3, [r7, #30]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1ea      	bne.n	800ab8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800abb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abb8:	4618      	mov	r0, r3
 800abba:	372c      	adds	r7, #44	; 0x2c
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	785b      	ldrb	r3, [r3, #1]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d12c      	bne.n	800ac3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	db12      	blt.n	800ac18 <USB_EPSetStall+0x54>
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00f      	beq.n	800ac18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	0151      	lsls	r1, r2, #5
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	440a      	add	r2, r1
 800ac0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	0151      	lsls	r1, r2, #5
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	440a      	add	r2, r1
 800ac2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	e02b      	b.n	800ac92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	db12      	blt.n	800ac72 <USB_EPSetStall+0xae>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00f      	beq.n	800ac72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	0151      	lsls	r1, r2, #5
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	440a      	add	r2, r1
 800ac68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	0151      	lsls	r1, r2, #5
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	440a      	add	r2, r1
 800ac88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d128      	bne.n	800ad0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	0151      	lsls	r1, r2, #5
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	440a      	add	r2, r1
 800acd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	791b      	ldrb	r3, [r3, #4]
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d003      	beq.n	800acec <USB_EPClearStall+0x4c>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	791b      	ldrb	r3, [r3, #4]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d138      	bne.n	800ad5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	0151      	lsls	r1, r2, #5
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	440a      	add	r2, r1
 800ad02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	e027      	b.n	800ad5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	791b      	ldrb	r3, [r3, #4]
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d003      	beq.n	800ad3e <USB_EPClearStall+0x9e>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d10f      	bne.n	800ad5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	0151      	lsls	r1, r2, #5
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	440a      	add	r2, r1
 800ad54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ad8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	011b      	lsls	r3, r3, #4
 800ad9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ada0:	68f9      	ldr	r1, [r7, #12]
 800ada2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ada6:	4313      	orrs	r3, r2
 800ada8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ade6:	f023 0302 	bic.w	r3, r3, #2
 800adea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b085      	sub	sp, #20
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae14:	f023 0303 	bic.w	r3, r3, #3
 800ae18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae28:	f043 0302 	orr.w	r3, r3, #2
 800ae2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	4013      	ands	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae54:	68fb      	ldr	r3, [r7, #12]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b085      	sub	sp, #20
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	4013      	ands	r3, r2
 800ae84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	0c1b      	lsrs	r3, r3, #16
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b085      	sub	sp, #20
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	b29b      	uxth	r3, r3
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b085      	sub	sp, #20
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4013      	ands	r3, r2
 800aef6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aef8:	68bb      	ldr	r3, [r7, #8]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af06:	b480      	push	{r7}
 800af08:	b087      	sub	sp, #28
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	460b      	mov	r3, r1
 800af10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	f003 030f 	and.w	r3, r3, #15
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	fa22 f303 	lsr.w	r3, r2, r3
 800af36:	01db      	lsls	r3, r3, #7
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	015a      	lsls	r2, r3, #5
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	4413      	add	r3, r2
 800af48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	4013      	ands	r3, r2
 800af52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af54:	68bb      	ldr	r3, [r7, #8]
}
 800af56:	4618      	mov	r0, r3
 800af58:	371c      	adds	r7, #28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	f003 0301 	and.w	r3, r3, #1
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800af9c:	f023 0307 	bic.w	r3, r3, #7
 800afa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	333c      	adds	r3, #60	; 0x3c
 800afd6:	3304      	adds	r3, #4
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	4a1c      	ldr	r2, [pc, #112]	; (800b050 <USB_EP0_OutStart+0x8c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d90a      	bls.n	800affa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aff4:	d101      	bne.n	800affa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	e024      	b.n	800b044 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b000:	461a      	mov	r2, r3
 800b002:	2300      	movs	r3, #0
 800b004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b028:	f043 0318 	orr.w	r3, r3, #24
 800b02c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b03c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b040:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	4f54300a 	.word	0x4f54300a

0800b054 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	4a13      	ldr	r2, [pc, #76]	; (800b0b8 <USB_CoreReset+0x64>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d901      	bls.n	800b072 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e01b      	b.n	800b0aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	daf2      	bge.n	800b060 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	f043 0201 	orr.w	r2, r3, #1
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3301      	adds	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a09      	ldr	r2, [pc, #36]	; (800b0b8 <USB_CoreReset+0x64>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d901      	bls.n	800b09c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e006      	b.n	800b0aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d0f0      	beq.n	800b08a <USB_CoreReset+0x36>

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	00030d40 	.word	0x00030d40

0800b0bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b0cc:	f002 fadc 	bl	800d688 <USBD_static_malloc>
 800b0d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d105      	bne.n	800b0e4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	e066      	b.n	800b1b2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	7c1b      	ldrb	r3, [r3, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d119      	bne.n	800b128 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	2181      	movs	r1, #129	; 0x81
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f002 f8af 	bl	800d260 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b10c:	2202      	movs	r2, #2
 800b10e:	2101      	movs	r1, #1
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f002 f8a5 	bl	800d260 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2210      	movs	r2, #16
 800b122:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b126:	e016      	b.n	800b156 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b128:	2340      	movs	r3, #64	; 0x40
 800b12a:	2202      	movs	r2, #2
 800b12c:	2181      	movs	r1, #129	; 0x81
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f002 f896 	bl	800d260 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b13a:	2340      	movs	r3, #64	; 0x40
 800b13c:	2202      	movs	r2, #2
 800b13e:	2101      	movs	r1, #1
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f002 f88d 	bl	800d260 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2210      	movs	r2, #16
 800b152:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b156:	2308      	movs	r3, #8
 800b158:	2203      	movs	r2, #3
 800b15a:	2182      	movs	r1, #130	; 0x82
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f002 f87f 	bl	800d260 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	7c1b      	ldrb	r3, [r3, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d109      	bne.n	800b1a0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b192:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b196:	2101      	movs	r1, #1
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f002 f9db 	bl	800d554 <USBD_LL_PrepareReceive>
 800b19e:	e007      	b.n	800b1b0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f002 f9d2 	bl	800d554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b1c6:	2181      	movs	r1, #129	; 0x81
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f002 f887 	bl	800d2dc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f002 f880 	bl	800d2dc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b1e4:	2182      	movs	r1, #130	; 0x82
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f002 f878 	bl	800d2dc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00e      	beq.n	800b224 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b216:	4618      	mov	r0, r3
 800b218:	f002 fa44 	bl	800d6a4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b240:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b254:	2303      	movs	r3, #3
 800b256:	e0af      	b.n	800b3b8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b260:	2b00      	cmp	r3, #0
 800b262:	d03f      	beq.n	800b2e4 <USBD_CDC_Setup+0xb4>
 800b264:	2b20      	cmp	r3, #32
 800b266:	f040 809f 	bne.w	800b3a8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	88db      	ldrh	r3, [r3, #6]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d02e      	beq.n	800b2d0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b25b      	sxtb	r3, r3
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da16      	bge.n	800b2aa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b288:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	88d2      	ldrh	r2, [r2, #6]
 800b28e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	88db      	ldrh	r3, [r3, #6]
 800b294:	2b07      	cmp	r3, #7
 800b296:	bf28      	it	cs
 800b298:	2307      	movcs	r3, #7
 800b29a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	89fa      	ldrh	r2, [r7, #14]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f001 fb43 	bl	800c92e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b2a8:	e085      	b.n	800b3b6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	785a      	ldrb	r2, [r3, #1]
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	88db      	ldrh	r3, [r3, #6]
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b2c0:	6939      	ldr	r1, [r7, #16]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	88db      	ldrh	r3, [r3, #6]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f001 fb5c 	bl	800c986 <USBD_CtlPrepareRx>
      break;
 800b2ce:	e072      	b.n	800b3b6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	7850      	ldrb	r0, [r2, #1]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	4798      	blx	r3
      break;
 800b2e2:	e068      	b.n	800b3b6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	785b      	ldrb	r3, [r3, #1]
 800b2e8:	2b0b      	cmp	r3, #11
 800b2ea:	d852      	bhi.n	800b392 <USBD_CDC_Setup+0x162>
 800b2ec:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <USBD_CDC_Setup+0xc4>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b325 	.word	0x0800b325
 800b2f8:	0800b3a1 	.word	0x0800b3a1
 800b2fc:	0800b393 	.word	0x0800b393
 800b300:	0800b393 	.word	0x0800b393
 800b304:	0800b393 	.word	0x0800b393
 800b308:	0800b393 	.word	0x0800b393
 800b30c:	0800b393 	.word	0x0800b393
 800b310:	0800b393 	.word	0x0800b393
 800b314:	0800b393 	.word	0x0800b393
 800b318:	0800b393 	.word	0x0800b393
 800b31c:	0800b34f 	.word	0x0800b34f
 800b320:	0800b379 	.word	0x0800b379
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d107      	bne.n	800b340 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b330:	f107 030a 	add.w	r3, r7, #10
 800b334:	2202      	movs	r2, #2
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 faf8 	bl	800c92e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b33e:	e032      	b.n	800b3a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 fa82 	bl	800c84c <USBD_CtlError>
            ret = USBD_FAIL;
 800b348:	2303      	movs	r3, #3
 800b34a:	75fb      	strb	r3, [r7, #23]
          break;
 800b34c:	e02b      	b.n	800b3a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b03      	cmp	r3, #3
 800b358:	d107      	bne.n	800b36a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b35a:	f107 030d 	add.w	r3, r7, #13
 800b35e:	2201      	movs	r2, #1
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 fae3 	bl	800c92e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b368:	e01d      	b.n	800b3a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f001 fa6d 	bl	800c84c <USBD_CtlError>
            ret = USBD_FAIL;
 800b372:	2303      	movs	r3, #3
 800b374:	75fb      	strb	r3, [r7, #23]
          break;
 800b376:	e016      	b.n	800b3a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b03      	cmp	r3, #3
 800b382:	d00f      	beq.n	800b3a4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 fa60 	bl	800c84c <USBD_CtlError>
            ret = USBD_FAIL;
 800b38c:	2303      	movs	r3, #3
 800b38e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b390:	e008      	b.n	800b3a4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fa59 	bl	800c84c <USBD_CtlError>
          ret = USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	75fb      	strb	r3, [r7, #23]
          break;
 800b39e:	e002      	b.n	800b3a6 <USBD_CDC_Setup+0x176>
          break;
 800b3a0:	bf00      	nop
 800b3a2:	e008      	b.n	800b3b6 <USBD_CDC_Setup+0x186>
          break;
 800b3a4:	bf00      	nop
      }
      break;
 800b3a6:	e006      	b.n	800b3b6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 fa4e 	bl	800c84c <USBD_CtlError>
      ret = USBD_FAIL;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e04f      	b.n	800b482 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b3ea:	78fa      	ldrb	r2, [r7, #3]
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	440b      	add	r3, r1
 800b3f8:	3318      	adds	r3, #24
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d029      	beq.n	800b454 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b400:	78fa      	ldrb	r2, [r7, #3]
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	440b      	add	r3, r1
 800b40e:	3318      	adds	r3, #24
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	78f9      	ldrb	r1, [r7, #3]
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	460b      	mov	r3, r1
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	440b      	add	r3, r1
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4403      	add	r3, r0
 800b420:	3348      	adds	r3, #72	; 0x48
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	fbb2 f1f3 	udiv	r1, r2, r3
 800b428:	fb01 f303 	mul.w	r3, r1, r3
 800b42c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d110      	bne.n	800b454 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	6879      	ldr	r1, [r7, #4]
 800b436:	4613      	mov	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	440b      	add	r3, r1
 800b440:	3318      	adds	r3, #24
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b446:	78f9      	ldrb	r1, [r7, #3]
 800b448:	2300      	movs	r3, #0
 800b44a:	2200      	movs	r2, #0
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f002 f849 	bl	800d4e4 <USBD_LL_Transmit>
 800b452:	e015      	b.n	800b480 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2200      	movs	r2, #0
 800b458:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00b      	beq.n	800b480 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b49c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e015      	b.n	800b4d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b4ac:	78fb      	ldrb	r3, [r7, #3]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f002 f887 	bl	800d5c4 <USBD_LL_GetRxDataSize>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e01b      	b.n	800b532 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d015      	beq.n	800b530 <USBD_CDC_EP0_RxReady+0x50>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b50a:	2bff      	cmp	r3, #255	; 0xff
 800b50c:	d010      	beq.n	800b530 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b51c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b524:	b292      	uxth	r2, r2
 800b526:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	22ff      	movs	r2, #255	; 0xff
 800b52c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
	...

0800b53c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2243      	movs	r2, #67	; 0x43
 800b548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b54a:	4b03      	ldr	r3, [pc, #12]	; (800b558 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	20000840 	.word	0x20000840

0800b55c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2243      	movs	r2, #67	; 0x43
 800b568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b56a:	4b03      	ldr	r3, [pc, #12]	; (800b578 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr
 800b578:	200007fc 	.word	0x200007fc

0800b57c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2243      	movs	r2, #67	; 0x43
 800b588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b58a:	4b03      	ldr	r3, [pc, #12]	; (800b598 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	20000884 	.word	0x20000884

0800b59c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	220a      	movs	r2, #10
 800b5a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5aa:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	200007b8 	.word	0x200007b8

0800b5bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e004      	b.n	800b5da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b087      	sub	sp, #28
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	60b9      	str	r1, [r7, #8]
 800b5f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5f8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	e008      	b.n	800b616 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b622:	b480      	push	{r7}
 800b624:	b085      	sub	sp, #20
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b632:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e004      	b.n	800b648 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b662:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b664:	2301      	movs	r3, #1
 800b666:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	e01a      	b.n	800b6ac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d114      	bne.n	800b6aa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2201      	movs	r2, #1
 800b684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b69e:	2181      	movs	r1, #129	; 0x81
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 ff1f 	bl	800d4e4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e016      	b.n	800b700 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	7c1b      	ldrb	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d109      	bne.n	800b6ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 ff34 	bl	800d554 <USBD_LL_PrepareReceive>
 800b6ec:	e007      	b.n	800b6fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6f4:	2340      	movs	r3, #64	; 0x40
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f001 ff2b 	bl	800d554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	4613      	mov	r3, r2
 800b714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d101      	bne.n	800b720 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e01f      	b.n	800b760 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	79fa      	ldrb	r2, [r7, #7]
 800b752:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f001 fd07 	bl	800d168 <USBD_LL_Init>
 800b75a:	4603      	mov	r3, r0
 800b75c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e016      	b.n	800b7ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	f107 020e 	add.w	r2, r7, #14
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	4798      	blx	r3
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b082      	sub	sp, #8
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f001 fd1c 	bl	800d1fc <USBD_LL_Start>
 800b7c4:	4603      	mov	r3, r0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b083      	sub	sp, #12
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d009      	beq.n	800b812 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	78fa      	ldrb	r2, [r7, #3]
 800b808:	4611      	mov	r1, r2
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	4798      	blx	r3
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b812:	7bfb      	ldrb	r3, [r7, #15]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d007      	beq.n	800b842 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	4611      	mov	r1, r2
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	4798      	blx	r3
  }

  return USBD_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 ffba 	bl	800c7d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b872:	461a      	mov	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b880:	f003 031f 	and.w	r3, r3, #31
 800b884:	2b02      	cmp	r3, #2
 800b886:	d01a      	beq.n	800b8be <USBD_LL_SetupStage+0x72>
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d822      	bhi.n	800b8d2 <USBD_LL_SetupStage+0x86>
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <USBD_LL_SetupStage+0x4a>
 800b890:	2b01      	cmp	r3, #1
 800b892:	d00a      	beq.n	800b8aa <USBD_LL_SetupStage+0x5e>
 800b894:	e01d      	b.n	800b8d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fa62 	bl	800bd68 <USBD_StdDevReq>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a8:	e020      	b.n	800b8ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fac6 	bl	800be44 <USBD_StdItfReq>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b8bc:	e016      	b.n	800b8ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fb05 	bl	800bed6 <USBD_StdEPReq>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d0:	e00c      	b.n	800b8ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 fd31 	bl	800d348 <USBD_LL_StallEP>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ea:	bf00      	nop
  }

  return ret;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b086      	sub	sp, #24
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	460b      	mov	r3, r1
 800b900:	607a      	str	r2, [r7, #4]
 800b902:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b904:	7afb      	ldrb	r3, [r7, #11]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d138      	bne.n	800b97c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b910:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b918:	2b03      	cmp	r3, #3
 800b91a:	d14a      	bne.n	800b9b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	429a      	cmp	r2, r3
 800b926:	d913      	bls.n	800b950 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	1ad2      	subs	r2, r2, r3
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	68da      	ldr	r2, [r3, #12]
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	4293      	cmp	r3, r2
 800b940:	bf28      	it	cs
 800b942:	4613      	movcs	r3, r2
 800b944:	461a      	mov	r2, r3
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f001 f839 	bl	800c9c0 <USBD_CtlContinueRx>
 800b94e:	e030      	b.n	800b9b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d10b      	bne.n	800b974 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f001 f834 	bl	800c9e2 <USBD_CtlSendStatus>
 800b97a:	e01a      	b.n	800b9b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b03      	cmp	r3, #3
 800b986:	d114      	bne.n	800b9b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00e      	beq.n	800b9b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	7afa      	ldrb	r2, [r7, #11]
 800b99e:	4611      	mov	r1, r2
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	4798      	blx	r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	e000      	b.n	800b9b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9ca:	7afb      	ldrb	r3, [r7, #11]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d16b      	bne.n	800baa8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3314      	adds	r3, #20
 800b9d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d156      	bne.n	800ba8e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	689a      	ldr	r2, [r3, #8]
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d914      	bls.n	800ba16 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	1ad2      	subs	r2, r2, r3
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 ffae 	bl	800c964 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f001 fda0 	bl	800d554 <USBD_LL_PrepareReceive>
 800ba14:	e03b      	b.n	800ba8e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	68da      	ldr	r2, [r3, #12]
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d11c      	bne.n	800ba5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d316      	bcc.n	800ba5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d20f      	bcs.n	800ba5c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2100      	movs	r1, #0
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 ff8f 	bl	800c964 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f001 fd7d 	bl	800d554 <USBD_LL_PrepareReceive>
 800ba5a:	e018      	b.n	800ba8e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d10b      	bne.n	800ba80 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba80:	2180      	movs	r1, #128	; 0x80
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f001 fc60 	bl	800d348 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 ffbd 	bl	800ca08 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d122      	bne.n	800bade <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff fe98 	bl	800b7ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800baa6:	e01a      	b.n	800bade <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d114      	bne.n	800bade <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00e      	beq.n	800bade <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac6:	695b      	ldr	r3, [r3, #20]
 800bac8:	7afa      	ldrb	r2, [r7, #11]
 800baca:	4611      	mov	r1, r2
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	4798      	blx	r3
 800bad0:	4603      	mov	r3, r0
 800bad2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bad4:	7dfb      	ldrb	r3, [r7, #23]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bada:	7dfb      	ldrb	r3, [r7, #23]
 800badc:	e000      	b.n	800bae0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3718      	adds	r7, #24
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e02f      	b.n	800bb7c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00f      	beq.n	800bb46 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d009      	beq.n	800bb46 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	6852      	ldr	r2, [r2, #4]
 800bb3e:	b2d2      	uxtb	r2, r2
 800bb40:	4611      	mov	r1, r2
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb46:	2340      	movs	r3, #64	; 0x40
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 fb87 	bl	800d260 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2240      	movs	r2, #64	; 0x40
 800bb5e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb62:	2340      	movs	r3, #64	; 0x40
 800bb64:	2200      	movs	r2, #0
 800bb66:	2180      	movs	r1, #128	; 0x80
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 fb79 	bl	800d260 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2240      	movs	r2, #64	; 0x40
 800bb78:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	78fa      	ldrb	r2, [r7, #3]
 800bb94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2204      	movs	r2, #4
 800bbbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	d106      	bne.n	800bbf2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e012      	b.n	800bc3c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	d10b      	bne.n	800bc3a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d005      	beq.n	800bc3a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d101      	bne.n	800bc5e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bc5a:	2303      	movs	r3, #3
 800bc5c:	e014      	b.n	800bc88 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d10d      	bne.n	800bc86 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d007      	beq.n	800bc86 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	78fa      	ldrb	r2, [r7, #3]
 800bc80:	4611      	mov	r1, r2
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d101      	bne.n	800bcaa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e014      	b.n	800bcd4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d10d      	bne.n	800bcd2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d007      	beq.n	800bcd2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcca:	78fa      	ldrb	r2, [r7, #3]
 800bccc:	4611      	mov	r1, r2
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d009      	beq.n	800bd20 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	6852      	ldr	r2, [r2, #4]
 800bd18:	b2d2      	uxtb	r2, r2
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	4798      	blx	r3
  }

  return USBD_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b087      	sub	sp, #28
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd48:	8a3b      	ldrh	r3, [r7, #16]
 800bd4a:	021b      	lsls	r3, r3, #8
 800bd4c:	b21a      	sxth	r2, r3
 800bd4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	b21b      	sxth	r3, r3
 800bd56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd58:	89fb      	ldrh	r3, [r7, #14]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
	...

0800bd68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd7e:	2b40      	cmp	r3, #64	; 0x40
 800bd80:	d005      	beq.n	800bd8e <USBD_StdDevReq+0x26>
 800bd82:	2b40      	cmp	r3, #64	; 0x40
 800bd84:	d853      	bhi.n	800be2e <USBD_StdDevReq+0xc6>
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00b      	beq.n	800bda2 <USBD_StdDevReq+0x3a>
 800bd8a:	2b20      	cmp	r3, #32
 800bd8c:	d14f      	bne.n	800be2e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	4798      	blx	r3
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bda0:	e04a      	b.n	800be38 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	d83b      	bhi.n	800be22 <USBD_StdDevReq+0xba>
 800bdaa:	a201      	add	r2, pc, #4	; (adr r2, 800bdb0 <USBD_StdDevReq+0x48>)
 800bdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb0:	0800be05 	.word	0x0800be05
 800bdb4:	0800be19 	.word	0x0800be19
 800bdb8:	0800be23 	.word	0x0800be23
 800bdbc:	0800be0f 	.word	0x0800be0f
 800bdc0:	0800be23 	.word	0x0800be23
 800bdc4:	0800bde3 	.word	0x0800bde3
 800bdc8:	0800bdd9 	.word	0x0800bdd9
 800bdcc:	0800be23 	.word	0x0800be23
 800bdd0:	0800bdfb 	.word	0x0800bdfb
 800bdd4:	0800bded 	.word	0x0800bded
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f9de 	bl	800c19c <USBD_GetDescriptor>
          break;
 800bde0:	e024      	b.n	800be2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 fb6d 	bl	800c4c4 <USBD_SetAddress>
          break;
 800bdea:	e01f      	b.n	800be2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bdec:	6839      	ldr	r1, [r7, #0]
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fbac 	bl	800c54c <USBD_SetConfig>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73fb      	strb	r3, [r7, #15]
          break;
 800bdf8:	e018      	b.n	800be2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fc4b 	bl	800c698 <USBD_GetConfig>
          break;
 800be02:	e013      	b.n	800be2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fc7c 	bl	800c704 <USBD_GetStatus>
          break;
 800be0c:	e00e      	b.n	800be2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fcab 	bl	800c76c <USBD_SetFeature>
          break;
 800be16:	e009      	b.n	800be2c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fcba 	bl	800c794 <USBD_ClrFeature>
          break;
 800be20:	e004      	b.n	800be2c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fd11 	bl	800c84c <USBD_CtlError>
          break;
 800be2a:	bf00      	nop
      }
      break;
 800be2c:	e004      	b.n	800be38 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fd0b 	bl	800c84c <USBD_CtlError>
      break;
 800be36:	bf00      	nop
  }

  return ret;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop

0800be44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be5a:	2b40      	cmp	r3, #64	; 0x40
 800be5c:	d005      	beq.n	800be6a <USBD_StdItfReq+0x26>
 800be5e:	2b40      	cmp	r3, #64	; 0x40
 800be60:	d82f      	bhi.n	800bec2 <USBD_StdItfReq+0x7e>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <USBD_StdItfReq+0x26>
 800be66:	2b20      	cmp	r3, #32
 800be68:	d12b      	bne.n	800bec2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be70:	b2db      	uxtb	r3, r3
 800be72:	3b01      	subs	r3, #1
 800be74:	2b02      	cmp	r3, #2
 800be76:	d81d      	bhi.n	800beb4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	889b      	ldrh	r3, [r3, #4]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d813      	bhi.n	800beaa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	4798      	blx	r3
 800be90:	4603      	mov	r3, r0
 800be92:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	88db      	ldrh	r3, [r3, #6]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d110      	bne.n	800bebe <USBD_StdItfReq+0x7a>
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10d      	bne.n	800bebe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fd9d 	bl	800c9e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bea8:	e009      	b.n	800bebe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fccd 	bl	800c84c <USBD_CtlError>
          break;
 800beb2:	e004      	b.n	800bebe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fcc8 	bl	800c84c <USBD_CtlError>
          break;
 800bebc:	e000      	b.n	800bec0 <USBD_StdItfReq+0x7c>
          break;
 800bebe:	bf00      	nop
      }
      break;
 800bec0:	e004      	b.n	800becc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fcc1 	bl	800c84c <USBD_CtlError>
      break;
 800beca:	bf00      	nop
  }

  return ret;
 800becc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b084      	sub	sp, #16
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	889b      	ldrh	r3, [r3, #4]
 800bee8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bef2:	2b40      	cmp	r3, #64	; 0x40
 800bef4:	d007      	beq.n	800bf06 <USBD_StdEPReq+0x30>
 800bef6:	2b40      	cmp	r3, #64	; 0x40
 800bef8:	f200 8145 	bhi.w	800c186 <USBD_StdEPReq+0x2b0>
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00c      	beq.n	800bf1a <USBD_StdEPReq+0x44>
 800bf00:	2b20      	cmp	r3, #32
 800bf02:	f040 8140 	bne.w	800c186 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	6839      	ldr	r1, [r7, #0]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	4798      	blx	r3
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]
      break;
 800bf18:	e13a      	b.n	800c190 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	785b      	ldrb	r3, [r3, #1]
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d007      	beq.n	800bf32 <USBD_StdEPReq+0x5c>
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	f300 8129 	bgt.w	800c17a <USBD_StdEPReq+0x2a4>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d07f      	beq.n	800c02c <USBD_StdEPReq+0x156>
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d03c      	beq.n	800bfaa <USBD_StdEPReq+0xd4>
 800bf30:	e123      	b.n	800c17a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d002      	beq.n	800bf44 <USBD_StdEPReq+0x6e>
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d016      	beq.n	800bf70 <USBD_StdEPReq+0x9a>
 800bf42:	e02c      	b.n	800bf9e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00d      	beq.n	800bf66 <USBD_StdEPReq+0x90>
 800bf4a:	7bbb      	ldrb	r3, [r7, #14]
 800bf4c:	2b80      	cmp	r3, #128	; 0x80
 800bf4e:	d00a      	beq.n	800bf66 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 f9f7 	bl	800d348 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf5a:	2180      	movs	r1, #128	; 0x80
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f001 f9f3 	bl	800d348 <USBD_LL_StallEP>
 800bf62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf64:	e020      	b.n	800bfa8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fc6f 	bl	800c84c <USBD_CtlError>
              break;
 800bf6e:	e01b      	b.n	800bfa8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	885b      	ldrh	r3, [r3, #2]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10e      	bne.n	800bf96 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00b      	beq.n	800bf96 <USBD_StdEPReq+0xc0>
 800bf7e:	7bbb      	ldrb	r3, [r7, #14]
 800bf80:	2b80      	cmp	r3, #128	; 0x80
 800bf82:	d008      	beq.n	800bf96 <USBD_StdEPReq+0xc0>
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	88db      	ldrh	r3, [r3, #6]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d104      	bne.n	800bf96 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 f9d9 	bl	800d348 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fd23 	bl	800c9e2 <USBD_CtlSendStatus>

              break;
 800bf9c:	e004      	b.n	800bfa8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fc53 	bl	800c84c <USBD_CtlError>
              break;
 800bfa6:	bf00      	nop
          }
          break;
 800bfa8:	e0ec      	b.n	800c184 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d002      	beq.n	800bfbc <USBD_StdEPReq+0xe6>
 800bfb6:	2b03      	cmp	r3, #3
 800bfb8:	d016      	beq.n	800bfe8 <USBD_StdEPReq+0x112>
 800bfba:	e030      	b.n	800c01e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfbc:	7bbb      	ldrb	r3, [r7, #14]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00d      	beq.n	800bfde <USBD_StdEPReq+0x108>
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	2b80      	cmp	r3, #128	; 0x80
 800bfc6:	d00a      	beq.n	800bfde <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 f9bb 	bl	800d348 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfd2:	2180      	movs	r1, #128	; 0x80
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 f9b7 	bl	800d348 <USBD_LL_StallEP>
 800bfda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfdc:	e025      	b.n	800c02a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fc33 	bl	800c84c <USBD_CtlError>
              break;
 800bfe6:	e020      	b.n	800c02a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	885b      	ldrh	r3, [r3, #2]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d11b      	bne.n	800c028 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
 800bff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d004      	beq.n	800c004 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	4619      	mov	r1, r3
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f001 f9d8 	bl	800d3b4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fcec 	bl	800c9e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
 800c018:	4603      	mov	r3, r0
 800c01a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c01c:	e004      	b.n	800c028 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fc13 	bl	800c84c <USBD_CtlError>
              break;
 800c026:	e000      	b.n	800c02a <USBD_StdEPReq+0x154>
              break;
 800c028:	bf00      	nop
          }
          break;
 800c02a:	e0ab      	b.n	800c184 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b02      	cmp	r3, #2
 800c036:	d002      	beq.n	800c03e <USBD_StdEPReq+0x168>
 800c038:	2b03      	cmp	r3, #3
 800c03a:	d032      	beq.n	800c0a2 <USBD_StdEPReq+0x1cc>
 800c03c:	e097      	b.n	800c16e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d007      	beq.n	800c054 <USBD_StdEPReq+0x17e>
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b80      	cmp	r3, #128	; 0x80
 800c048:	d004      	beq.n	800c054 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fbfd 	bl	800c84c <USBD_CtlError>
                break;
 800c052:	e091      	b.n	800c178 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	da0b      	bge.n	800c074 <USBD_StdEPReq+0x19e>
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	3310      	adds	r3, #16
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	4413      	add	r3, r2
 800c070:	3304      	adds	r3, #4
 800c072:	e00b      	b.n	800c08c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4413      	add	r3, r2
 800c08a:	3304      	adds	r3, #4
 800c08c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2202      	movs	r2, #2
 800c098:	4619      	mov	r1, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fc47 	bl	800c92e <USBD_CtlSendData>
              break;
 800c0a0:	e06a      	b.n	800c178 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da11      	bge.n	800c0ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	f003 020f 	and.w	r2, r3, #15
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3324      	adds	r3, #36	; 0x24
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d117      	bne.n	800c0f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fbc0 	bl	800c84c <USBD_CtlError>
                  break;
 800c0cc:	e054      	b.n	800c178 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	f003 020f 	and.w	r2, r3, #15
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	440b      	add	r3, r1
 800c0e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d104      	bne.n	800c0f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fbad 	bl	800c84c <USBD_CtlError>
                  break;
 800c0f2:	e041      	b.n	800c178 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	da0b      	bge.n	800c114 <USBD_StdEPReq+0x23e>
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	3310      	adds	r3, #16
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	4413      	add	r3, r2
 800c110:	3304      	adds	r3, #4
 800c112:	e00b      	b.n	800c12c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	4413      	add	r3, r2
 800c12a:	3304      	adds	r3, #4
 800c12c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <USBD_StdEPReq+0x264>
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	2b80      	cmp	r3, #128	; 0x80
 800c138:	d103      	bne.n	800c142 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e00e      	b.n	800c160 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c142:	7bbb      	ldrb	r3, [r7, #14]
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 f96a 	bl	800d420 <USBD_LL_IsStallEP>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2201      	movs	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	e002      	b.n	800c160 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2200      	movs	r2, #0
 800c15e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2202      	movs	r2, #2
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fbe1 	bl	800c92e <USBD_CtlSendData>
              break;
 800c16c:	e004      	b.n	800c178 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fb6b 	bl	800c84c <USBD_CtlError>
              break;
 800c176:	bf00      	nop
          }
          break;
 800c178:	e004      	b.n	800c184 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fb65 	bl	800c84c <USBD_CtlError>
          break;
 800c182:	bf00      	nop
      }
      break;
 800c184:	e004      	b.n	800c190 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fb5f 	bl	800c84c <USBD_CtlError>
      break;
 800c18e:	bf00      	nop
  }

  return ret;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	0a1b      	lsrs	r3, r3, #8
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b0e      	cmp	r3, #14
 800c1be:	f200 8152 	bhi.w	800c466 <USBD_GetDescriptor+0x2ca>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <USBD_GetDescriptor+0x2c>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c239 	.word	0x0800c239
 800c1cc:	0800c251 	.word	0x0800c251
 800c1d0:	0800c291 	.word	0x0800c291
 800c1d4:	0800c467 	.word	0x0800c467
 800c1d8:	0800c467 	.word	0x0800c467
 800c1dc:	0800c407 	.word	0x0800c407
 800c1e0:	0800c433 	.word	0x0800c433
 800c1e4:	0800c467 	.word	0x0800c467
 800c1e8:	0800c467 	.word	0x0800c467
 800c1ec:	0800c467 	.word	0x0800c467
 800c1f0:	0800c467 	.word	0x0800c467
 800c1f4:	0800c467 	.word	0x0800c467
 800c1f8:	0800c467 	.word	0x0800c467
 800c1fc:	0800c467 	.word	0x0800c467
 800c200:	0800c205 	.word	0x0800c205
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00b      	beq.n	800c228 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	7c12      	ldrb	r2, [r2, #16]
 800c21c:	f107 0108 	add.w	r1, r7, #8
 800c220:	4610      	mov	r0, r2
 800c222:	4798      	blx	r3
 800c224:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c226:	e126      	b.n	800c476 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c228:	6839      	ldr	r1, [r7, #0]
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fb0e 	bl	800c84c <USBD_CtlError>
        err++;
 800c230:	7afb      	ldrb	r3, [r7, #11]
 800c232:	3301      	adds	r3, #1
 800c234:	72fb      	strb	r3, [r7, #11]
      break;
 800c236:	e11e      	b.n	800c476 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	7c12      	ldrb	r2, [r2, #16]
 800c244:	f107 0108 	add.w	r1, r7, #8
 800c248:	4610      	mov	r0, r2
 800c24a:	4798      	blx	r3
 800c24c:	60f8      	str	r0, [r7, #12]
      break;
 800c24e:	e112      	b.n	800c476 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7c1b      	ldrb	r3, [r3, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10d      	bne.n	800c274 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c260:	f107 0208 	add.w	r2, r7, #8
 800c264:	4610      	mov	r0, r2
 800c266:	4798      	blx	r3
 800c268:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	3301      	adds	r3, #1
 800c26e:	2202      	movs	r2, #2
 800c270:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c272:	e100      	b.n	800c476 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27c:	f107 0208 	add.w	r2, r7, #8
 800c280:	4610      	mov	r0, r2
 800c282:	4798      	blx	r3
 800c284:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3301      	adds	r3, #1
 800c28a:	2202      	movs	r2, #2
 800c28c:	701a      	strb	r2, [r3, #0]
      break;
 800c28e:	e0f2      	b.n	800c476 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	885b      	ldrh	r3, [r3, #2]
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b05      	cmp	r3, #5
 800c298:	f200 80ac 	bhi.w	800c3f4 <USBD_GetDescriptor+0x258>
 800c29c:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <USBD_GetDescriptor+0x108>)
 800c29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a2:	bf00      	nop
 800c2a4:	0800c2bd 	.word	0x0800c2bd
 800c2a8:	0800c2f1 	.word	0x0800c2f1
 800c2ac:	0800c325 	.word	0x0800c325
 800c2b0:	0800c359 	.word	0x0800c359
 800c2b4:	0800c38d 	.word	0x0800c38d
 800c2b8:	0800c3c1 	.word	0x0800c3c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00b      	beq.n	800c2e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	7c12      	ldrb	r2, [r2, #16]
 800c2d4:	f107 0108 	add.w	r1, r7, #8
 800c2d8:	4610      	mov	r0, r2
 800c2da:	4798      	blx	r3
 800c2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2de:	e091      	b.n	800c404 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fab2 	bl	800c84c <USBD_CtlError>
            err++;
 800c2e8:	7afb      	ldrb	r3, [r7, #11]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ee:	e089      	b.n	800c404 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00b      	beq.n	800c314 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	7c12      	ldrb	r2, [r2, #16]
 800c308:	f107 0108 	add.w	r1, r7, #8
 800c30c:	4610      	mov	r0, r2
 800c30e:	4798      	blx	r3
 800c310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c312:	e077      	b.n	800c404 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fa98 	bl	800c84c <USBD_CtlError>
            err++;
 800c31c:	7afb      	ldrb	r3, [r7, #11]
 800c31e:	3301      	adds	r3, #1
 800c320:	72fb      	strb	r3, [r7, #11]
          break;
 800c322:	e06f      	b.n	800c404 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	7c12      	ldrb	r2, [r2, #16]
 800c33c:	f107 0108 	add.w	r1, r7, #8
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
 800c344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c346:	e05d      	b.n	800c404 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fa7e 	bl	800c84c <USBD_CtlError>
            err++;
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	3301      	adds	r3, #1
 800c354:	72fb      	strb	r3, [r7, #11]
          break;
 800c356:	e055      	b.n	800c404 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00b      	beq.n	800c37c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7c12      	ldrb	r2, [r2, #16]
 800c370:	f107 0108 	add.w	r1, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c37a:	e043      	b.n	800c404 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fa64 	bl	800c84c <USBD_CtlError>
            err++;
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	3301      	adds	r3, #1
 800c388:	72fb      	strb	r3, [r7, #11]
          break;
 800c38a:	e03b      	b.n	800c404 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	7c12      	ldrb	r2, [r2, #16]
 800c3a4:	f107 0108 	add.w	r1, r7, #8
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
 800c3ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ae:	e029      	b.n	800c404 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fa4a 	bl	800c84c <USBD_CtlError>
            err++;
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3be:	e021      	b.n	800c404 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	7c12      	ldrb	r2, [r2, #16]
 800c3d8:	f107 0108 	add.w	r1, r7, #8
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
 800c3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3e2:	e00f      	b.n	800c404 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa30 	bl	800c84c <USBD_CtlError>
            err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3f2:	e007      	b.n	800c404 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fa28 	bl	800c84c <USBD_CtlError>
          err++;
 800c3fc:	7afb      	ldrb	r3, [r7, #11]
 800c3fe:	3301      	adds	r3, #1
 800c400:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c402:	bf00      	nop
      }
      break;
 800c404:	e037      	b.n	800c476 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	7c1b      	ldrb	r3, [r3, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d109      	bne.n	800c422 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c416:	f107 0208 	add.w	r2, r7, #8
 800c41a:	4610      	mov	r0, r2
 800c41c:	4798      	blx	r3
 800c41e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c420:	e029      	b.n	800c476 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fa11 	bl	800c84c <USBD_CtlError>
        err++;
 800c42a:	7afb      	ldrb	r3, [r7, #11]
 800c42c:	3301      	adds	r3, #1
 800c42e:	72fb      	strb	r3, [r7, #11]
      break;
 800c430:	e021      	b.n	800c476 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	7c1b      	ldrb	r3, [r3, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10d      	bne.n	800c456 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c442:	f107 0208 	add.w	r2, r7, #8
 800c446:	4610      	mov	r0, r2
 800c448:	4798      	blx	r3
 800c44a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	3301      	adds	r3, #1
 800c450:	2207      	movs	r2, #7
 800c452:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c454:	e00f      	b.n	800c476 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 f9f7 	bl	800c84c <USBD_CtlError>
        err++;
 800c45e:	7afb      	ldrb	r3, [r7, #11]
 800c460:	3301      	adds	r3, #1
 800c462:	72fb      	strb	r3, [r7, #11]
      break;
 800c464:	e007      	b.n	800c476 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f9ef 	bl	800c84c <USBD_CtlError>
      err++;
 800c46e:	7afb      	ldrb	r3, [r7, #11]
 800c470:	3301      	adds	r3, #1
 800c472:	72fb      	strb	r3, [r7, #11]
      break;
 800c474:	bf00      	nop
  }

  if (err != 0U)
 800c476:	7afb      	ldrb	r3, [r7, #11]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d11e      	bne.n	800c4ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	88db      	ldrh	r3, [r3, #6]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d016      	beq.n	800c4b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c484:	893b      	ldrh	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00e      	beq.n	800c4a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	88da      	ldrh	r2, [r3, #6]
 800c48e:	893b      	ldrh	r3, [r7, #8]
 800c490:	4293      	cmp	r3, r2
 800c492:	bf28      	it	cs
 800c494:	4613      	movcs	r3, r2
 800c496:	b29b      	uxth	r3, r3
 800c498:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c49a:	893b      	ldrh	r3, [r7, #8]
 800c49c:	461a      	mov	r2, r3
 800c49e:	68f9      	ldr	r1, [r7, #12]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fa44 	bl	800c92e <USBD_CtlSendData>
 800c4a6:	e009      	b.n	800c4bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f9ce 	bl	800c84c <USBD_CtlError>
 800c4b0:	e004      	b.n	800c4bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fa95 	bl	800c9e2 <USBD_CtlSendStatus>
 800c4b8:	e000      	b.n	800c4bc <USBD_GetDescriptor+0x320>
    return;
 800c4ba:	bf00      	nop
  }
}
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop

0800c4c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	889b      	ldrh	r3, [r3, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d131      	bne.n	800c53a <USBD_SetAddress+0x76>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	88db      	ldrh	r3, [r3, #6]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d12d      	bne.n	800c53a <USBD_SetAddress+0x76>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	885b      	ldrh	r3, [r3, #2]
 800c4e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c4e4:	d829      	bhi.n	800c53a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	885b      	ldrh	r3, [r3, #2]
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d104      	bne.n	800c508 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f9a3 	bl	800c84c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c506:	e01d      	b.n	800c544 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	7bfa      	ldrb	r2, [r7, #15]
 800c50c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c510:	7bfb      	ldrb	r3, [r7, #15]
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 ffaf 	bl	800d478 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fa61 	bl	800c9e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d004      	beq.n	800c530 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2202      	movs	r2, #2
 800c52a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52e:	e009      	b.n	800c544 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c538:	e004      	b.n	800c544 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f985 	bl	800c84c <USBD_CtlError>
  }
}
 800c542:	bf00      	nop
 800c544:	bf00      	nop
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	885b      	ldrh	r3, [r3, #2]
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	4b4c      	ldr	r3, [pc, #304]	; (800c694 <USBD_SetConfig+0x148>)
 800c562:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c564:	4b4b      	ldr	r3, [pc, #300]	; (800c694 <USBD_SetConfig+0x148>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d905      	bls.n	800c578 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f96c 	bl	800c84c <USBD_CtlError>
    return USBD_FAIL;
 800c574:	2303      	movs	r3, #3
 800c576:	e088      	b.n	800c68a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b02      	cmp	r3, #2
 800c582:	d002      	beq.n	800c58a <USBD_SetConfig+0x3e>
 800c584:	2b03      	cmp	r3, #3
 800c586:	d025      	beq.n	800c5d4 <USBD_SetConfig+0x88>
 800c588:	e071      	b.n	800c66e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c58a:	4b42      	ldr	r3, [pc, #264]	; (800c694 <USBD_SetConfig+0x148>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d01c      	beq.n	800c5cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c592:	4b40      	ldr	r3, [pc, #256]	; (800c694 <USBD_SetConfig+0x148>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c59c:	4b3d      	ldr	r3, [pc, #244]	; (800c694 <USBD_SetConfig+0x148>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff f91e 	bl	800b7e4 <USBD_SetClassConfig>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f949 	bl	800c84c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5ba:	e065      	b.n	800c688 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fa10 	bl	800c9e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2203      	movs	r2, #3
 800c5c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5ca:	e05d      	b.n	800c688 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fa08 	bl	800c9e2 <USBD_CtlSendStatus>
      break;
 800c5d2:	e059      	b.n	800c688 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5d4:	4b2f      	ldr	r3, [pc, #188]	; (800c694 <USBD_SetConfig+0x148>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d112      	bne.n	800c602 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c5e4:	4b2b      	ldr	r3, [pc, #172]	; (800c694 <USBD_SetConfig+0x148>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5ee:	4b29      	ldr	r3, [pc, #164]	; (800c694 <USBD_SetConfig+0x148>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff f911 	bl	800b81c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f9f1 	bl	800c9e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c600:	e042      	b.n	800c688 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c602:	4b24      	ldr	r3, [pc, #144]	; (800c694 <USBD_SetConfig+0x148>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d02a      	beq.n	800c666 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	b2db      	uxtb	r3, r3
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7ff f8ff 	bl	800b81c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c61e:	4b1d      	ldr	r3, [pc, #116]	; (800c694 <USBD_SetConfig+0x148>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c628:	4b1a      	ldr	r3, [pc, #104]	; (800c694 <USBD_SetConfig+0x148>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff f8d8 	bl	800b7e4 <USBD_SetClassConfig>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00f      	beq.n	800c65e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f903 	bl	800c84c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff f8e4 	bl	800b81c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2202      	movs	r2, #2
 800c658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c65c:	e014      	b.n	800c688 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f9bf 	bl	800c9e2 <USBD_CtlSendStatus>
      break;
 800c664:	e010      	b.n	800c688 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f9bb 	bl	800c9e2 <USBD_CtlSendStatus>
      break;
 800c66c:	e00c      	b.n	800c688 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c66e:	6839      	ldr	r1, [r7, #0]
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f8eb 	bl	800c84c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c676:	4b07      	ldr	r3, [pc, #28]	; (800c694 <USBD_SetConfig+0x148>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7ff f8cd 	bl	800b81c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c682:	2303      	movs	r3, #3
 800c684:	73fb      	strb	r3, [r7, #15]
      break;
 800c686:	bf00      	nop
  }

  return ret;
 800c688:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20001f1c 	.word	0x20001f1c

0800c698 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	88db      	ldrh	r3, [r3, #6]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d004      	beq.n	800c6b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f8cd 	bl	800c84c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6b2:	e023      	b.n	800c6fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	dc02      	bgt.n	800c6c6 <USBD_GetConfig+0x2e>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	dc03      	bgt.n	800c6cc <USBD_GetConfig+0x34>
 800c6c4:	e015      	b.n	800c6f2 <USBD_GetConfig+0x5a>
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d00b      	beq.n	800c6e2 <USBD_GetConfig+0x4a>
 800c6ca:	e012      	b.n	800c6f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f927 	bl	800c92e <USBD_CtlSendData>
        break;
 800c6e0:	e00c      	b.n	800c6fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f91f 	bl	800c92e <USBD_CtlSendData>
        break;
 800c6f0:	e004      	b.n	800c6fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f8a9 	bl	800c84c <USBD_CtlError>
        break;
 800c6fa:	bf00      	nop
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	3b01      	subs	r3, #1
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d81e      	bhi.n	800c75a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	88db      	ldrh	r3, [r3, #6]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d004      	beq.n	800c72e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f890 	bl	800c84c <USBD_CtlError>
        break;
 800c72c:	e01a      	b.n	800c764 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d005      	beq.n	800c74a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	f043 0202 	orr.w	r2, r3, #2
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	330c      	adds	r3, #12
 800c74e:	2202      	movs	r2, #2
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f8eb 	bl	800c92e <USBD_CtlSendData>
      break;
 800c758:	e004      	b.n	800c764 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f875 	bl	800c84c <USBD_CtlError>
      break;
 800c762:	bf00      	nop
  }
}
 800c764:	bf00      	nop
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	885b      	ldrh	r3, [r3, #2]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d106      	bne.n	800c78c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f92b 	bl	800c9e2 <USBD_CtlSendStatus>
  }
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d80b      	bhi.n	800c7c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	885b      	ldrh	r3, [r3, #2]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d10c      	bne.n	800c7ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f910 	bl	800c9e2 <USBD_CtlSendStatus>
      }
      break;
 800c7c2:	e004      	b.n	800c7ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f840 	bl	800c84c <USBD_CtlError>
      break;
 800c7cc:	e000      	b.n	800c7d0 <USBD_ClrFeature+0x3c>
      break;
 800c7ce:	bf00      	nop
  }
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	781a      	ldrb	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3301      	adds	r3, #1
 800c800:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f7ff fa91 	bl	800bd2a <SWAPBYTE>
 800c808:	4603      	mov	r3, r0
 800c80a:	461a      	mov	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3301      	adds	r3, #1
 800c81a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f7ff fa84 	bl	800bd2a <SWAPBYTE>
 800c822:	4603      	mov	r3, r0
 800c824:	461a      	mov	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3301      	adds	r3, #1
 800c82e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3301      	adds	r3, #1
 800c834:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff fa77 	bl	800bd2a <SWAPBYTE>
 800c83c:	4603      	mov	r3, r0
 800c83e:	461a      	mov	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	80da      	strh	r2, [r3, #6]
}
 800c844:	bf00      	nop
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c856:	2180      	movs	r1, #128	; 0x80
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fd75 	bl	800d348 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c85e:	2100      	movs	r1, #0
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fd71 	bl	800d348 <USBD_LL_StallEP>
}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b086      	sub	sp, #24
 800c872:	af00      	add	r7, sp, #0
 800c874:	60f8      	str	r0, [r7, #12]
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c87a:	2300      	movs	r3, #0
 800c87c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d036      	beq.n	800c8f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c888:	6938      	ldr	r0, [r7, #16]
 800c88a:	f000 f836 	bl	800c8fa <USBD_GetLen>
 800c88e:	4603      	mov	r3, r0
 800c890:	3301      	adds	r3, #1
 800c892:	b29b      	uxth	r3, r3
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	b29a      	uxth	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	7812      	ldrb	r2, [r2, #0]
 800c8a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8a8:	7dfb      	ldrb	r3, [r7, #23]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8b8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8be:	e013      	b.n	800c8e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	7812      	ldrb	r2, [r2, #0]
 800c8ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	613b      	str	r3, [r7, #16]
    idx++;
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	4413      	add	r3, r2
 800c8de:	2200      	movs	r2, #0
 800c8e0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1e7      	bne.n	800c8c0 <USBD_GetString+0x52>
 800c8f0:	e000      	b.n	800c8f4 <USBD_GetString+0x86>
    return;
 800c8f2:	bf00      	nop
  }
}
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c902:	2300      	movs	r3, #0
 800c904:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c90a:	e005      	b.n	800c918 <USBD_GetLen+0x1e>
  {
    len++;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
 800c90e:	3301      	adds	r3, #1
 800c910:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	3301      	adds	r3, #1
 800c916:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1f5      	bne.n	800c90c <USBD_GetLen+0x12>
  }

  return len;
 800c920:	7bfb      	ldrb	r3, [r7, #15]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	60b9      	str	r1, [r7, #8]
 800c938:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2202      	movs	r2, #2
 800c93e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	2100      	movs	r1, #0
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f000 fdc5 	bl	800d4e4 <USBD_LL_Transmit>

  return USBD_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	2100      	movs	r1, #0
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f000 fdb4 	bl	800d4e4 <USBD_LL_Transmit>

  return USBD_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2203      	movs	r2, #3
 800c996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f000 fdcf 	bl	800d554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f000 fdbe 	bl	800d554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2204      	movs	r2, #4
 800c9ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fd73 	bl	800d4e4 <USBD_LL_Transmit>

  return USBD_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2205      	movs	r2, #5
 800ca14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca18:	2300      	movs	r3, #0
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fd98 	bl	800d554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
	...

0800ca30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca34:	2200      	movs	r2, #0
 800ca36:	4912      	ldr	r1, [pc, #72]	; (800ca80 <MX_USB_DEVICE_Init+0x50>)
 800ca38:	4812      	ldr	r0, [pc, #72]	; (800ca84 <MX_USB_DEVICE_Init+0x54>)
 800ca3a:	f7fe fe65 	bl	800b708 <USBD_Init>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca44:	f7f4 fa2a 	bl	8000e9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca48:	490f      	ldr	r1, [pc, #60]	; (800ca88 <MX_USB_DEVICE_Init+0x58>)
 800ca4a:	480e      	ldr	r0, [pc, #56]	; (800ca84 <MX_USB_DEVICE_Init+0x54>)
 800ca4c:	f7fe fe8c 	bl	800b768 <USBD_RegisterClass>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca56:	f7f4 fa21 	bl	8000e9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca5a:	490c      	ldr	r1, [pc, #48]	; (800ca8c <MX_USB_DEVICE_Init+0x5c>)
 800ca5c:	4809      	ldr	r0, [pc, #36]	; (800ca84 <MX_USB_DEVICE_Init+0x54>)
 800ca5e:	f7fe fdad 	bl	800b5bc <USBD_CDC_RegisterInterface>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca68:	f7f4 fa18 	bl	8000e9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca6c:	4805      	ldr	r0, [pc, #20]	; (800ca84 <MX_USB_DEVICE_Init+0x54>)
 800ca6e:	f7fe fea2 	bl	800b7b6 <USBD_Start>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca78:	f7f4 fa10 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca7c:	bf00      	nop
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	200008dc 	.word	0x200008dc
 800ca84:	20001f20 	.word	0x20001f20
 800ca88:	200007c4 	.word	0x200007c4
 800ca8c:	200008c8 	.word	0x200008c8

0800ca90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca94:	2200      	movs	r2, #0
 800ca96:	4905      	ldr	r1, [pc, #20]	; (800caac <CDC_Init_FS+0x1c>)
 800ca98:	4805      	ldr	r0, [pc, #20]	; (800cab0 <CDC_Init_FS+0x20>)
 800ca9a:	f7fe fda4 	bl	800b5e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca9e:	4905      	ldr	r1, [pc, #20]	; (800cab4 <CDC_Init_FS+0x24>)
 800caa0:	4803      	ldr	r0, [pc, #12]	; (800cab0 <CDC_Init_FS+0x20>)
 800caa2:	f7fe fdbe 	bl	800b622 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800caa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	200029f0 	.word	0x200029f0
 800cab0:	20001f20 	.word	0x20001f20
 800cab4:	200021f0 	.word	0x200021f0

0800cab8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cab8:	b480      	push	{r7}
 800caba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cabc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	4603      	mov	r3, r0
 800cad0:	6039      	str	r1, [r7, #0]
 800cad2:	71fb      	strb	r3, [r7, #7]
 800cad4:	4613      	mov	r3, r2
 800cad6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	2b23      	cmp	r3, #35	; 0x23
 800cadc:	d84a      	bhi.n	800cb74 <CDC_Control_FS+0xac>
 800cade:	a201      	add	r2, pc, #4	; (adr r2, 800cae4 <CDC_Control_FS+0x1c>)
 800cae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae4:	0800cb75 	.word	0x0800cb75
 800cae8:	0800cb75 	.word	0x0800cb75
 800caec:	0800cb75 	.word	0x0800cb75
 800caf0:	0800cb75 	.word	0x0800cb75
 800caf4:	0800cb75 	.word	0x0800cb75
 800caf8:	0800cb75 	.word	0x0800cb75
 800cafc:	0800cb75 	.word	0x0800cb75
 800cb00:	0800cb75 	.word	0x0800cb75
 800cb04:	0800cb75 	.word	0x0800cb75
 800cb08:	0800cb75 	.word	0x0800cb75
 800cb0c:	0800cb75 	.word	0x0800cb75
 800cb10:	0800cb75 	.word	0x0800cb75
 800cb14:	0800cb75 	.word	0x0800cb75
 800cb18:	0800cb75 	.word	0x0800cb75
 800cb1c:	0800cb75 	.word	0x0800cb75
 800cb20:	0800cb75 	.word	0x0800cb75
 800cb24:	0800cb75 	.word	0x0800cb75
 800cb28:	0800cb75 	.word	0x0800cb75
 800cb2c:	0800cb75 	.word	0x0800cb75
 800cb30:	0800cb75 	.word	0x0800cb75
 800cb34:	0800cb75 	.word	0x0800cb75
 800cb38:	0800cb75 	.word	0x0800cb75
 800cb3c:	0800cb75 	.word	0x0800cb75
 800cb40:	0800cb75 	.word	0x0800cb75
 800cb44:	0800cb75 	.word	0x0800cb75
 800cb48:	0800cb75 	.word	0x0800cb75
 800cb4c:	0800cb75 	.word	0x0800cb75
 800cb50:	0800cb75 	.word	0x0800cb75
 800cb54:	0800cb75 	.word	0x0800cb75
 800cb58:	0800cb75 	.word	0x0800cb75
 800cb5c:	0800cb75 	.word	0x0800cb75
 800cb60:	0800cb75 	.word	0x0800cb75
 800cb64:	0800cb75 	.word	0x0800cb75
 800cb68:	0800cb75 	.word	0x0800cb75
 800cb6c:	0800cb75 	.word	0x0800cb75
 800cb70:	0800cb75 	.word	0x0800cb75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb74:	bf00      	nop
  }

  return (USBD_OK);
 800cb76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	4805      	ldr	r0, [pc, #20]	; (800cba8 <CDC_Receive_FS+0x24>)
 800cb92:	f7fe fd46 	bl	800b622 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb96:	4804      	ldr	r0, [pc, #16]	; (800cba8 <CDC_Receive_FS+0x24>)
 800cb98:	f7fe fd8c 	bl	800b6b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	20001f20 	.word	0x20001f20

0800cbac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cbbc:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <CDC_Transmit_FS+0x48>)
 800cbbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e00b      	b.n	800cbea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cbd2:	887b      	ldrh	r3, [r7, #2]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	4806      	ldr	r0, [pc, #24]	; (800cbf4 <CDC_Transmit_FS+0x48>)
 800cbda:	f7fe fd04 	bl	800b5e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cbde:	4805      	ldr	r0, [pc, #20]	; (800cbf4 <CDC_Transmit_FS+0x48>)
 800cbe0:	f7fe fd38 	bl	800b654 <USBD_CDC_TransmitPacket>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20001f20 	.word	0x20001f20

0800cbf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4613      	mov	r3, r2
 800cc04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	371c      	adds	r7, #28
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr
	...

0800cc1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	4603      	mov	r3, r0
 800cc24:	6039      	str	r1, [r7, #0]
 800cc26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	2212      	movs	r2, #18
 800cc2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc2e:	4b03      	ldr	r3, [pc, #12]	; (800cc3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	200008fc 	.word	0x200008fc

0800cc40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	6039      	str	r1, [r7, #0]
 800cc4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2204      	movs	r2, #4
 800cc50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc52:	4b03      	ldr	r3, [pc, #12]	; (800cc60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	2000091c 	.word	0x2000091c

0800cc64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	6039      	str	r1, [r7, #0]
 800cc6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d105      	bne.n	800cc82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	4907      	ldr	r1, [pc, #28]	; (800cc98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc7a:	4808      	ldr	r0, [pc, #32]	; (800cc9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc7c:	f7ff fdf7 	bl	800c86e <USBD_GetString>
 800cc80:	e004      	b.n	800cc8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	4904      	ldr	r1, [pc, #16]	; (800cc98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc86:	4805      	ldr	r0, [pc, #20]	; (800cc9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc88:	f7ff fdf1 	bl	800c86e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc8c:	4b02      	ldr	r3, [pc, #8]	; (800cc98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	200031f0 	.word	0x200031f0
 800cc9c:	08013b50 	.word	0x08013b50

0800cca0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	6039      	str	r1, [r7, #0]
 800ccaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	4904      	ldr	r1, [pc, #16]	; (800ccc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ccb0:	4804      	ldr	r0, [pc, #16]	; (800ccc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ccb2:	f7ff fddc 	bl	800c86e <USBD_GetString>
  return USBD_StrDesc;
 800ccb6:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	200031f0 	.word	0x200031f0
 800ccc4:	08013b68 	.word	0x08013b68

0800ccc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	6039      	str	r1, [r7, #0]
 800ccd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	221a      	movs	r2, #26
 800ccd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccda:	f000 f855 	bl	800cd88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ccde:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20000920 	.word	0x20000920

0800ccec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	6039      	str	r1, [r7, #0]
 800ccf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d105      	bne.n	800cd0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	4907      	ldr	r1, [pc, #28]	; (800cd20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd02:	4808      	ldr	r0, [pc, #32]	; (800cd24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd04:	f7ff fdb3 	bl	800c86e <USBD_GetString>
 800cd08:	e004      	b.n	800cd14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	4904      	ldr	r1, [pc, #16]	; (800cd20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd0e:	4805      	ldr	r0, [pc, #20]	; (800cd24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd10:	f7ff fdad 	bl	800c86e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd14:	4b02      	ldr	r3, [pc, #8]	; (800cd20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	200031f0 	.word	0x200031f0
 800cd24:	08013b7c 	.word	0x08013b7c

0800cd28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	4603      	mov	r3, r0
 800cd30:	6039      	str	r1, [r7, #0]
 800cd32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd34:	79fb      	ldrb	r3, [r7, #7]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d105      	bne.n	800cd46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	4907      	ldr	r1, [pc, #28]	; (800cd5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd3e:	4808      	ldr	r0, [pc, #32]	; (800cd60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd40:	f7ff fd95 	bl	800c86e <USBD_GetString>
 800cd44:	e004      	b.n	800cd50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	4904      	ldr	r1, [pc, #16]	; (800cd5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd4a:	4805      	ldr	r0, [pc, #20]	; (800cd60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd4c:	f7ff fd8f 	bl	800c86e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd50:	4b02      	ldr	r3, [pc, #8]	; (800cd5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	200031f0 	.word	0x200031f0
 800cd60:	08013b88 	.word	0x08013b88

0800cd64 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	6039      	str	r1, [r7, #0]
 800cd6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	220c      	movs	r2, #12
 800cd74:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cd76:	4b03      	ldr	r3, [pc, #12]	; (800cd84 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	20000910 	.word	0x20000910

0800cd88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd8e:	4b0f      	ldr	r3, [pc, #60]	; (800cdcc <Get_SerialNum+0x44>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd94:	4b0e      	ldr	r3, [pc, #56]	; (800cdd0 <Get_SerialNum+0x48>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd9a:	4b0e      	ldr	r3, [pc, #56]	; (800cdd4 <Get_SerialNum+0x4c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4413      	add	r3, r2
 800cda6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d009      	beq.n	800cdc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdae:	2208      	movs	r2, #8
 800cdb0:	4909      	ldr	r1, [pc, #36]	; (800cdd8 <Get_SerialNum+0x50>)
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 f814 	bl	800cde0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cdb8:	2204      	movs	r2, #4
 800cdba:	4908      	ldr	r1, [pc, #32]	; (800cddc <Get_SerialNum+0x54>)
 800cdbc:	68b8      	ldr	r0, [r7, #8]
 800cdbe:	f000 f80f 	bl	800cde0 <IntToUnicode>
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	1fff7590 	.word	0x1fff7590
 800cdd0:	1fff7594 	.word	0x1fff7594
 800cdd4:	1fff7598 	.word	0x1fff7598
 800cdd8:	20000922 	.word	0x20000922
 800cddc:	20000932 	.word	0x20000932

0800cde0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	4613      	mov	r3, r2
 800cdec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	75fb      	strb	r3, [r7, #23]
 800cdf6:	e027      	b.n	800ce48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	0f1b      	lsrs	r3, r3, #28
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	d80b      	bhi.n	800ce18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	0f1b      	lsrs	r3, r3, #28
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	440b      	add	r3, r1
 800ce10:	3230      	adds	r2, #48	; 0x30
 800ce12:	b2d2      	uxtb	r2, r2
 800ce14:	701a      	strb	r2, [r3, #0]
 800ce16:	e00a      	b.n	800ce2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	0f1b      	lsrs	r3, r3, #28
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	4619      	mov	r1, r3
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	440b      	add	r3, r1
 800ce28:	3237      	adds	r2, #55	; 0x37
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	011b      	lsls	r3, r3, #4
 800ce32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	3301      	adds	r3, #1
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
 800ce44:	3301      	adds	r3, #1
 800ce46:	75fb      	strb	r3, [r7, #23]
 800ce48:	7dfa      	ldrb	r2, [r7, #23]
 800ce4a:	79fb      	ldrb	r3, [r7, #7]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d3d3      	bcc.n	800cdf8 <IntToUnicode+0x18>
  }
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	371c      	adds	r7, #28
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
	...

0800ce60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b0b2      	sub	sp, #200	; 0xc8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	605a      	str	r2, [r3, #4]
 800ce72:	609a      	str	r2, [r3, #8]
 800ce74:	60da      	str	r2, [r3, #12]
 800ce76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce78:	f107 0318 	add.w	r3, r7, #24
 800ce7c:	229c      	movs	r2, #156	; 0x9c
 800ce7e:	2100      	movs	r1, #0
 800ce80:	4618      	mov	r0, r3
 800ce82:	f003 fdf3 	bl	8010a6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce8e:	d163      	bne.n	800cf58 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ce90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ce96:	2300      	movs	r3, #0
 800ce98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce9c:	f107 0318 	add.w	r3, r7, #24
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fa ff27 	bl	8007cf4 <HAL_RCCEx_PeriphCLKConfig>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ceac:	f7f3 fff6 	bl	8000e9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceb0:	4b2b      	ldr	r3, [pc, #172]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800ceb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb4:	4a2a      	ldr	r2, [pc, #168]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800ceb6:	f043 0301 	orr.w	r3, r3, #1
 800ceba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cebc:	4b28      	ldr	r3, [pc, #160]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 800cec8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ced0:	2302      	movs	r3, #2
 800ced2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ced6:	2300      	movs	r3, #0
 800ced8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cedc:	2303      	movs	r3, #3
 800cede:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cee2:	230a      	movs	r3, #10
 800cee4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cee8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ceec:	4619      	mov	r1, r3
 800ceee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cef2:	f7f8 fadd 	bl	80054b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cef6:	4b1a      	ldr	r3, [pc, #104]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cefa:	4a19      	ldr	r2, [pc, #100]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cefc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cf00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf02:	4b17      	ldr	r3, [pc, #92]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cf04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf0a:	613b      	str	r3, [r7, #16]
 800cf0c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf0e:	4b14      	ldr	r3, [pc, #80]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cf10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d114      	bne.n	800cf44 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf1a:	4b11      	ldr	r3, [pc, #68]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cf1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf1e:	4a10      	ldr	r2, [pc, #64]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cf20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf24:	6593      	str	r3, [r2, #88]	; 0x58
 800cf26:	4b0e      	ldr	r3, [pc, #56]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cf28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800cf32:	f7fa f827 	bl	8006f84 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf36:	4b0a      	ldr	r3, [pc, #40]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cf38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf3a:	4a09      	ldr	r2, [pc, #36]	; (800cf60 <HAL_PCD_MspInit+0x100>)
 800cf3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf40:	6593      	str	r3, [r2, #88]	; 0x58
 800cf42:	e001      	b.n	800cf48 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800cf44:	f7fa f81e 	bl	8006f84 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cf48:	2200      	movs	r2, #0
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	2043      	movs	r0, #67	; 0x43
 800cf4e:	f7f8 f926 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf52:	2043      	movs	r0, #67	; 0x43
 800cf54:	f7f8 f93f 	bl	80051d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cf58:	bf00      	nop
 800cf5a:	37c8      	adds	r7, #200	; 0xc8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	40021000 	.word	0x40021000

0800cf64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	f7fe fc66 	bl	800b84c <USBD_LL_SetupStage>
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf9a:	78fa      	ldrb	r2, [r7, #3]
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	4413      	add	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	440b      	add	r3, r1
 800cfa8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	78fb      	ldrb	r3, [r7, #3]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	f7fe fca0 	bl	800b8f6 <USBD_LL_DataOutStage>
}
 800cfb6:	bf00      	nop
 800cfb8:	3708      	adds	r7, #8
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b082      	sub	sp, #8
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cfd0:	78fa      	ldrb	r2, [r7, #3]
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	4413      	add	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	440b      	add	r3, r1
 800cfde:	334c      	adds	r3, #76	; 0x4c
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	78fb      	ldrb	r3, [r7, #3]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	f7fe fce9 	bl	800b9bc <USBD_LL_DataInStage>
}
 800cfea:	bf00      	nop
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe fdfd 	bl	800bc00 <USBD_LL_SOF>
}
 800d006:	bf00      	nop
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b084      	sub	sp, #16
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d016:	2301      	movs	r3, #1
 800d018:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	2b02      	cmp	r3, #2
 800d020:	d001      	beq.n	800d026 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d022:	f7f3 ff3b 	bl	8000e9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d02c:	7bfa      	ldrb	r2, [r7, #15]
 800d02e:	4611      	mov	r1, r2
 800d030:	4618      	mov	r0, r3
 800d032:	f7fe fda7 	bl	800bb84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe fd53 	bl	800bae8 <USBD_LL_Reset>
}
 800d042:	bf00      	nop
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	6812      	ldr	r2, [r2, #0]
 800d062:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d066:	f043 0301 	orr.w	r3, r3, #1
 800d06a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fd96 	bl	800bba4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a1b      	ldr	r3, [r3, #32]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d080:	4b04      	ldr	r3, [pc, #16]	; (800d094 <HAL_PCD_SuspendCallback+0x48>)
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	4a03      	ldr	r2, [pc, #12]	; (800d094 <HAL_PCD_SuspendCallback+0x48>)
 800d086:	f043 0306 	orr.w	r3, r3, #6
 800d08a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	e000ed00 	.word	0xe000ed00

0800d098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	6812      	ldr	r2, [r2, #0]
 800d0ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d0b2:	f023 0301 	bic.w	r3, r3, #1
 800d0b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a1b      	ldr	r3, [r3, #32]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d007      	beq.n	800d0d0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0c0:	4b08      	ldr	r3, [pc, #32]	; (800d0e4 <HAL_PCD_ResumeCallback+0x4c>)
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	4a07      	ldr	r2, [pc, #28]	; (800d0e4 <HAL_PCD_ResumeCallback+0x4c>)
 800d0c6:	f023 0306 	bic.w	r3, r3, #6
 800d0ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d0cc:	f000 faf4 	bl	800d6b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fe fd7a 	bl	800bbd0 <USBD_LL_Resume>
}
 800d0dc:	bf00      	nop
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	e000ed00 	.word	0xe000ed00

0800d0e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0fa:	78fa      	ldrb	r2, [r7, #3]
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe fdc6 	bl	800bc90 <USBD_LL_IsoOUTIncomplete>
}
 800d104:	bf00      	nop
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d11e:	78fa      	ldrb	r2, [r7, #3]
 800d120:	4611      	mov	r1, r2
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fd8e 	bl	800bc44 <USBD_LL_IsoINIncomplete>
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe fdcc 	bl	800bcdc <USBD_LL_DevConnected>
}
 800d144:	bf00      	nop
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe fdc9 	bl	800bcf2 <USBD_LL_DevDisconnected>
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d139      	bne.n	800d1ec <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d178:	4a1f      	ldr	r2, [pc, #124]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a1d      	ldr	r2, [pc, #116]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d184:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d188:	4b1b      	ldr	r3, [pc, #108]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d18a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d18e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d190:	4b19      	ldr	r3, [pc, #100]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d192:	2206      	movs	r2, #6
 800d194:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d196:	4b18      	ldr	r3, [pc, #96]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d198:	2202      	movs	r2, #2
 800d19a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d19c:	4b16      	ldr	r3, [pc, #88]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d19e:	2200      	movs	r2, #0
 800d1a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d1a2:	4b15      	ldr	r3, [pc, #84]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d1a8:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d1ae:	4b12      	ldr	r3, [pc, #72]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d1b4:	4b10      	ldr	r3, [pc, #64]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d1ba:	4b0f      	ldr	r3, [pc, #60]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d1c0:	480d      	ldr	r0, [pc, #52]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1c2:	f7f8 fc4c 	bl	8005a5e <HAL_PCD_Init>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d001      	beq.n	800d1d0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d1cc:	f7f3 fe66 	bl	8000e9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d1d0:	2180      	movs	r1, #128	; 0x80
 800d1d2:	4809      	ldr	r0, [pc, #36]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1d4:	f7f9 fdcd 	bl	8006d72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d1d8:	2240      	movs	r2, #64	; 0x40
 800d1da:	2100      	movs	r1, #0
 800d1dc:	4806      	ldr	r0, [pc, #24]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1de:	f7f9 fd81 	bl	8006ce4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d1e2:	2280      	movs	r2, #128	; 0x80
 800d1e4:	2101      	movs	r1, #1
 800d1e6:	4804      	ldr	r0, [pc, #16]	; (800d1f8 <USBD_LL_Init+0x90>)
 800d1e8:	f7f9 fd7c 	bl	8006ce4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	200033f0 	.word	0x200033f0

0800d1fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d204:	2300      	movs	r3, #0
 800d206:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d212:	4618      	mov	r0, r3
 800d214:	f7f8 fd47 	bl	8005ca6 <HAL_PCD_Start>
 800d218:	4603      	mov	r3, r0
 800d21a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d21c:	7bbb      	ldrb	r3, [r7, #14]
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d816      	bhi.n	800d250 <USBD_LL_Start+0x54>
 800d222:	a201      	add	r2, pc, #4	; (adr r2, 800d228 <USBD_LL_Start+0x2c>)
 800d224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d228:	0800d239 	.word	0x0800d239
 800d22c:	0800d23f 	.word	0x0800d23f
 800d230:	0800d245 	.word	0x0800d245
 800d234:	0800d24b 	.word	0x0800d24b
    case HAL_OK :
      usb_status = USBD_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	73fb      	strb	r3, [r7, #15]
    break;
 800d23c:	e00b      	b.n	800d256 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d23e:	2303      	movs	r3, #3
 800d240:	73fb      	strb	r3, [r7, #15]
    break;
 800d242:	e008      	b.n	800d256 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d244:	2301      	movs	r3, #1
 800d246:	73fb      	strb	r3, [r7, #15]
    break;
 800d248:	e005      	b.n	800d256 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d24a:	2303      	movs	r3, #3
 800d24c:	73fb      	strb	r3, [r7, #15]
    break;
 800d24e:	e002      	b.n	800d256 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d250:	2303      	movs	r3, #3
 800d252:	73fb      	strb	r3, [r7, #15]
    break;
 800d254:	bf00      	nop
  }
  return usb_status;
 800d256:	7bfb      	ldrb	r3, [r7, #15]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	4608      	mov	r0, r1
 800d26a:	4611      	mov	r1, r2
 800d26c:	461a      	mov	r2, r3
 800d26e:	4603      	mov	r3, r0
 800d270:	70fb      	strb	r3, [r7, #3]
 800d272:	460b      	mov	r3, r1
 800d274:	70bb      	strb	r3, [r7, #2]
 800d276:	4613      	mov	r3, r2
 800d278:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d288:	78bb      	ldrb	r3, [r7, #2]
 800d28a:	883a      	ldrh	r2, [r7, #0]
 800d28c:	78f9      	ldrb	r1, [r7, #3]
 800d28e:	f7f9 f9f1 	bl	8006674 <HAL_PCD_EP_Open>
 800d292:	4603      	mov	r3, r0
 800d294:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d296:	7bbb      	ldrb	r3, [r7, #14]
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d817      	bhi.n	800d2cc <USBD_LL_OpenEP+0x6c>
 800d29c:	a201      	add	r2, pc, #4	; (adr r2, 800d2a4 <USBD_LL_OpenEP+0x44>)
 800d29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a2:	bf00      	nop
 800d2a4:	0800d2b5 	.word	0x0800d2b5
 800d2a8:	0800d2bb 	.word	0x0800d2bb
 800d2ac:	0800d2c1 	.word	0x0800d2c1
 800d2b0:	0800d2c7 	.word	0x0800d2c7
    case HAL_OK :
      usb_status = USBD_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b8:	e00b      	b.n	800d2d2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2ba:	2303      	movs	r3, #3
 800d2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d2be:	e008      	b.n	800d2d2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c4:	e005      	b.n	800d2d2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ca:	e002      	b.n	800d2d2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d0:	bf00      	nop
  }
  return usb_status;
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2f6:	78fa      	ldrb	r2, [r7, #3]
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7f9 fa22 	bl	8006744 <HAL_PCD_EP_Close>
 800d300:	4603      	mov	r3, r0
 800d302:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d304:	7bbb      	ldrb	r3, [r7, #14]
 800d306:	2b03      	cmp	r3, #3
 800d308:	d816      	bhi.n	800d338 <USBD_LL_CloseEP+0x5c>
 800d30a:	a201      	add	r2, pc, #4	; (adr r2, 800d310 <USBD_LL_CloseEP+0x34>)
 800d30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d310:	0800d321 	.word	0x0800d321
 800d314:	0800d327 	.word	0x0800d327
 800d318:	0800d32d 	.word	0x0800d32d
 800d31c:	0800d333 	.word	0x0800d333
    case HAL_OK :
      usb_status = USBD_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
    break;
 800d324:	e00b      	b.n	800d33e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	73fb      	strb	r3, [r7, #15]
    break;
 800d32a:	e008      	b.n	800d33e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d32c:	2301      	movs	r3, #1
 800d32e:	73fb      	strb	r3, [r7, #15]
    break;
 800d330:	e005      	b.n	800d33e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d332:	2303      	movs	r3, #3
 800d334:	73fb      	strb	r3, [r7, #15]
    break;
 800d336:	e002      	b.n	800d33e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d338:	2303      	movs	r3, #3
 800d33a:	73fb      	strb	r3, [r7, #15]
    break;
 800d33c:	bf00      	nop
  }
  return usb_status;
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d362:	78fa      	ldrb	r2, [r7, #3]
 800d364:	4611      	mov	r1, r2
 800d366:	4618      	mov	r0, r3
 800d368:	f7f9 fac9 	bl	80068fe <HAL_PCD_EP_SetStall>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d370:	7bbb      	ldrb	r3, [r7, #14]
 800d372:	2b03      	cmp	r3, #3
 800d374:	d816      	bhi.n	800d3a4 <USBD_LL_StallEP+0x5c>
 800d376:	a201      	add	r2, pc, #4	; (adr r2, 800d37c <USBD_LL_StallEP+0x34>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800d38d 	.word	0x0800d38d
 800d380:	0800d393 	.word	0x0800d393
 800d384:	0800d399 	.word	0x0800d399
 800d388:	0800d39f 	.word	0x0800d39f
    case HAL_OK :
      usb_status = USBD_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	73fb      	strb	r3, [r7, #15]
    break;
 800d390:	e00b      	b.n	800d3aa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d392:	2303      	movs	r3, #3
 800d394:	73fb      	strb	r3, [r7, #15]
    break;
 800d396:	e008      	b.n	800d3aa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d398:	2301      	movs	r3, #1
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	e005      	b.n	800d3aa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a2:	e002      	b.n	800d3aa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a8:	bf00      	nop
  }
  return usb_status;
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3ce:	78fa      	ldrb	r2, [r7, #3]
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f9 faf5 	bl	80069c2 <HAL_PCD_EP_ClrStall>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3dc:	7bbb      	ldrb	r3, [r7, #14]
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d816      	bhi.n	800d410 <USBD_LL_ClearStallEP+0x5c>
 800d3e2:	a201      	add	r2, pc, #4	; (adr r2, 800d3e8 <USBD_LL_ClearStallEP+0x34>)
 800d3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e8:	0800d3f9 	.word	0x0800d3f9
 800d3ec:	0800d3ff 	.word	0x0800d3ff
 800d3f0:	0800d405 	.word	0x0800d405
 800d3f4:	0800d40b 	.word	0x0800d40b
    case HAL_OK :
      usb_status = USBD_OK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d3fc:	e00b      	b.n	800d416 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3fe:	2303      	movs	r3, #3
 800d400:	73fb      	strb	r3, [r7, #15]
    break;
 800d402:	e008      	b.n	800d416 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d404:	2301      	movs	r3, #1
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	e005      	b.n	800d416 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d40a:	2303      	movs	r3, #3
 800d40c:	73fb      	strb	r3, [r7, #15]
    break;
 800d40e:	e002      	b.n	800d416 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d410:	2303      	movs	r3, #3
 800d412:	73fb      	strb	r3, [r7, #15]
    break;
 800d414:	bf00      	nop
  }
  return usb_status;
 800d416:	7bfb      	ldrb	r3, [r7, #15]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	460b      	mov	r3, r1
 800d42a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d432:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	da0b      	bge.n	800d454 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d43c:	78fb      	ldrb	r3, [r7, #3]
 800d43e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d442:	68f9      	ldr	r1, [r7, #12]
 800d444:	4613      	mov	r3, r2
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	4413      	add	r3, r2
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	440b      	add	r3, r1
 800d44e:	333e      	adds	r3, #62	; 0x3e
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	e00b      	b.n	800d46c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d454:	78fb      	ldrb	r3, [r7, #3]
 800d456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d45a:	68f9      	ldr	r1, [r7, #12]
 800d45c:	4613      	mov	r3, r2
 800d45e:	00db      	lsls	r3, r3, #3
 800d460:	4413      	add	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	440b      	add	r3, r1
 800d466:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d46a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3714      	adds	r7, #20
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	460b      	mov	r3, r1
 800d482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d492:	78fa      	ldrb	r2, [r7, #3]
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7f9 f8c7 	bl	800662a <HAL_PCD_SetAddress>
 800d49c:	4603      	mov	r3, r0
 800d49e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	d816      	bhi.n	800d4d4 <USBD_LL_SetUSBAddress+0x5c>
 800d4a6:	a201      	add	r2, pc, #4	; (adr r2, 800d4ac <USBD_LL_SetUSBAddress+0x34>)
 800d4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ac:	0800d4bd 	.word	0x0800d4bd
 800d4b0:	0800d4c3 	.word	0x0800d4c3
 800d4b4:	0800d4c9 	.word	0x0800d4c9
 800d4b8:	0800d4cf 	.word	0x0800d4cf
    case HAL_OK :
      usb_status = USBD_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c0:	e00b      	b.n	800d4da <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c6:	e008      	b.n	800d4da <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d4cc:	e005      	b.n	800d4da <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d2:	e002      	b.n	800d4da <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d8:	bf00      	nop
  }
  return usb_status;
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	607a      	str	r2, [r7, #4]
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d502:	7af9      	ldrb	r1, [r7, #11]
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	f7f9 f9bc 	bl	8006884 <HAL_PCD_EP_Transmit>
 800d50c:	4603      	mov	r3, r0
 800d50e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d510:	7dbb      	ldrb	r3, [r7, #22]
 800d512:	2b03      	cmp	r3, #3
 800d514:	d816      	bhi.n	800d544 <USBD_LL_Transmit+0x60>
 800d516:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <USBD_LL_Transmit+0x38>)
 800d518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51c:	0800d52d 	.word	0x0800d52d
 800d520:	0800d533 	.word	0x0800d533
 800d524:	0800d539 	.word	0x0800d539
 800d528:	0800d53f 	.word	0x0800d53f
    case HAL_OK :
      usb_status = USBD_OK;
 800d52c:	2300      	movs	r3, #0
 800d52e:	75fb      	strb	r3, [r7, #23]
    break;
 800d530:	e00b      	b.n	800d54a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d532:	2303      	movs	r3, #3
 800d534:	75fb      	strb	r3, [r7, #23]
    break;
 800d536:	e008      	b.n	800d54a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d538:	2301      	movs	r3, #1
 800d53a:	75fb      	strb	r3, [r7, #23]
    break;
 800d53c:	e005      	b.n	800d54a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d53e:	2303      	movs	r3, #3
 800d540:	75fb      	strb	r3, [r7, #23]
    break;
 800d542:	e002      	b.n	800d54a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d544:	2303      	movs	r3, #3
 800d546:	75fb      	strb	r3, [r7, #23]
    break;
 800d548:	bf00      	nop
  }
  return usb_status;
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	607a      	str	r2, [r7, #4]
 800d55e:	603b      	str	r3, [r7, #0]
 800d560:	460b      	mov	r3, r1
 800d562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d568:	2300      	movs	r3, #0
 800d56a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d572:	7af9      	ldrb	r1, [r7, #11]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	f7f9 f92e 	bl	80067d8 <HAL_PCD_EP_Receive>
 800d57c:	4603      	mov	r3, r0
 800d57e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d580:	7dbb      	ldrb	r3, [r7, #22]
 800d582:	2b03      	cmp	r3, #3
 800d584:	d816      	bhi.n	800d5b4 <USBD_LL_PrepareReceive+0x60>
 800d586:	a201      	add	r2, pc, #4	; (adr r2, 800d58c <USBD_LL_PrepareReceive+0x38>)
 800d588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58c:	0800d59d 	.word	0x0800d59d
 800d590:	0800d5a3 	.word	0x0800d5a3
 800d594:	0800d5a9 	.word	0x0800d5a9
 800d598:	0800d5af 	.word	0x0800d5af
    case HAL_OK :
      usb_status = USBD_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	75fb      	strb	r3, [r7, #23]
    break;
 800d5a0:	e00b      	b.n	800d5ba <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	75fb      	strb	r3, [r7, #23]
    break;
 800d5a6:	e008      	b.n	800d5ba <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	75fb      	strb	r3, [r7, #23]
    break;
 800d5ac:	e005      	b.n	800d5ba <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	75fb      	strb	r3, [r7, #23]
    break;
 800d5b2:	e002      	b.n	800d5ba <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	75fb      	strb	r3, [r7, #23]
    break;
 800d5b8:	bf00      	nop
  }
  return usb_status;
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5d6:	78fa      	ldrb	r2, [r7, #3]
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7f9 f93a 	bl	8006854 <HAL_PCD_EP_GetRxCount>
 800d5e0:	4603      	mov	r3, r0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
	...

0800d5ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d5f8:	78fb      	ldrb	r3, [r7, #3]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d002      	beq.n	800d604 <HAL_PCDEx_LPM_Callback+0x18>
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d01f      	beq.n	800d642 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d602:	e03b      	b.n	800d67c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d60c:	f000 f854 	bl	800d6b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d610:	4b1c      	ldr	r3, [pc, #112]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	4a1b      	ldr	r2, [pc, #108]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d616:	f023 0306 	bic.w	r3, r3, #6
 800d61a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	6812      	ldr	r2, [r2, #0]
 800d62a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d62e:	f023 0301 	bic.w	r3, r3, #1
 800d632:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fac8 	bl	800bbd0 <USBD_LL_Resume>
    break;
 800d640:	e01c      	b.n	800d67c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	6812      	ldr	r2, [r2, #0]
 800d650:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d654:	f043 0301 	orr.w	r3, r3, #1
 800d658:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe fa9f 	bl	800bba4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	4a04      	ldr	r2, [pc, #16]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d674:	f043 0306 	orr.w	r3, r3, #6
 800d678:	6113      	str	r3, [r2, #16]
    break;
 800d67a:	bf00      	nop
}
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	e000ed00 	.word	0xe000ed00

0800d688 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d690:	4b03      	ldr	r3, [pc, #12]	; (800d6a0 <USBD_static_malloc+0x18>)
}
 800d692:	4618      	mov	r0, r3
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	200038fc 	.word	0x200038fc

0800d6a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]

}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d6bc:	f7f3 fb34 	bl	8000d28 <SystemClock_Config>
}
 800d6c0:	bf00      	nop
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <arm_mean_f32>:
 800d6c4:	b430      	push	{r4, r5}
 800d6c6:	088d      	lsrs	r5, r1, #2
 800d6c8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d73c <arm_mean_f32+0x78>
 800d6cc:	d018      	beq.n	800d700 <arm_mean_f32+0x3c>
 800d6ce:	f100 0310 	add.w	r3, r0, #16
 800d6d2:	462c      	mov	r4, r5
 800d6d4:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d6d8:	ed13 6a03 	vldr	s12, [r3, #-12]
 800d6dc:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d6e0:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d6e4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d6e8:	3c01      	subs	r4, #1
 800d6ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d6ee:	f103 0310 	add.w	r3, r3, #16
 800d6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6fa:	d1eb      	bne.n	800d6d4 <arm_mean_f32+0x10>
 800d6fc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d700:	f011 0303 	ands.w	r3, r1, #3
 800d704:	d00f      	beq.n	800d726 <arm_mean_f32+0x62>
 800d706:	ed90 7a00 	vldr	s14, [r0]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d710:	d009      	beq.n	800d726 <arm_mean_f32+0x62>
 800d712:	ed90 7a01 	vldr	s14, [r0, #4]
 800d716:	2b01      	cmp	r3, #1
 800d718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d71c:	bf1c      	itt	ne
 800d71e:	ed90 7a02 	vldrne	s14, [r0, #8]
 800d722:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800d726:	ee07 1a10 	vmov	s14, r1
 800d72a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d72e:	bc30      	pop	{r4, r5}
 800d730:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d734:	edc2 6a00 	vstr	s13, [r2]
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	00000000 	.word	0x00000000

0800d740 <arm_max_f32>:
 800d740:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800d744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d746:	4607      	mov	r7, r0
 800d748:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800d74c:	ecf7 7a01 	vldmia	r7!, {s15}
 800d750:	d060      	beq.n	800d814 <arm_max_f32+0xd4>
 800d752:	2400      	movs	r4, #0
 800d754:	3014      	adds	r0, #20
 800d756:	4625      	mov	r5, r4
 800d758:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800d75c:	ed10 7a04 	vldr	s14, [r0, #-16]
 800d760:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d768:	bf48      	it	mi
 800d76a:	eef0 7a47 	vmovmi.f32	s15, s14
 800d76e:	ed10 7a03 	vldr	s14, [r0, #-12]
 800d772:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d776:	bf48      	it	mi
 800d778:	1c65      	addmi	r5, r4, #1
 800d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77e:	bf48      	it	mi
 800d780:	eef0 7a47 	vmovmi.f32	s15, s14
 800d784:	ed10 7a02 	vldr	s14, [r0, #-8]
 800d788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d78c:	bf48      	it	mi
 800d78e:	1ca5      	addmi	r5, r4, #2
 800d790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d794:	bf48      	it	mi
 800d796:	eef0 7a47 	vmovmi.f32	s15, s14
 800d79a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800d79e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7a2:	bf48      	it	mi
 800d7a4:	1ce5      	addmi	r5, r4, #3
 800d7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7aa:	f104 0404 	add.w	r4, r4, #4
 800d7ae:	bf44      	itt	mi
 800d7b0:	eef0 7a47 	vmovmi.f32	s15, s14
 800d7b4:	4625      	movmi	r5, r4
 800d7b6:	42a6      	cmp	r6, r4
 800d7b8:	f100 0010 	add.w	r0, r0, #16
 800d7bc:	d1ce      	bne.n	800d75c <arm_max_f32+0x1c>
 800d7be:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800d7c2:	f01c 0003 	ands.w	r0, ip, #3
 800d7c6:	d021      	beq.n	800d80c <arm_max_f32+0xcc>
 800d7c8:	ed97 7a00 	vldr	s14, [r7]
 800d7cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d4:	bfc4      	itt	gt
 800d7d6:	eef0 7a47 	vmovgt.f32	s15, s14
 800d7da:	1a0d      	subgt	r5, r1, r0
 800d7dc:	3801      	subs	r0, #1
 800d7de:	d015      	beq.n	800d80c <arm_max_f32+0xcc>
 800d7e0:	ed97 7a01 	vldr	s14, [r7, #4]
 800d7e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ec:	bf44      	itt	mi
 800d7ee:	eef0 7a47 	vmovmi.f32	s15, s14
 800d7f2:	1a0d      	submi	r5, r1, r0
 800d7f4:	2801      	cmp	r0, #1
 800d7f6:	d009      	beq.n	800d80c <arm_max_f32+0xcc>
 800d7f8:	ed97 7a02 	vldr	s14, [r7, #8]
 800d7fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d804:	bfc4      	itt	gt
 800d806:	eef0 7a47 	vmovgt.f32	s15, s14
 800d80a:	4665      	movgt	r5, ip
 800d80c:	edc2 7a00 	vstr	s15, [r2]
 800d810:	601d      	str	r5, [r3, #0]
 800d812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d814:	4675      	mov	r5, lr
 800d816:	e7d4      	b.n	800d7c2 <arm_max_f32+0x82>

0800d818 <arm_rfft_32_fast_init_f32>:
 800d818:	b178      	cbz	r0, 800d83a <arm_rfft_32_fast_init_f32+0x22>
 800d81a:	b430      	push	{r4, r5}
 800d81c:	4908      	ldr	r1, [pc, #32]	; (800d840 <arm_rfft_32_fast_init_f32+0x28>)
 800d81e:	4a09      	ldr	r2, [pc, #36]	; (800d844 <arm_rfft_32_fast_init_f32+0x2c>)
 800d820:	2310      	movs	r3, #16
 800d822:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800d826:	8003      	strh	r3, [r0, #0]
 800d828:	2520      	movs	r5, #32
 800d82a:	2414      	movs	r4, #20
 800d82c:	4b06      	ldr	r3, [pc, #24]	; (800d848 <arm_rfft_32_fast_init_f32+0x30>)
 800d82e:	8205      	strh	r5, [r0, #16]
 800d830:	8184      	strh	r4, [r0, #12]
 800d832:	6143      	str	r3, [r0, #20]
 800d834:	bc30      	pop	{r4, r5}
 800d836:	2000      	movs	r0, #0
 800d838:	4770      	bx	lr
 800d83a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d83e:	4770      	bx	lr
 800d840:	08032edc 	.word	0x08032edc
 800d844:	08053218 	.word	0x08053218
 800d848:	08063f98 	.word	0x08063f98

0800d84c <arm_rfft_64_fast_init_f32>:
 800d84c:	b178      	cbz	r0, 800d86e <arm_rfft_64_fast_init_f32+0x22>
 800d84e:	b430      	push	{r4, r5}
 800d850:	4908      	ldr	r1, [pc, #32]	; (800d874 <arm_rfft_64_fast_init_f32+0x28>)
 800d852:	4a09      	ldr	r2, [pc, #36]	; (800d878 <arm_rfft_64_fast_init_f32+0x2c>)
 800d854:	2320      	movs	r3, #32
 800d856:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800d85a:	8003      	strh	r3, [r0, #0]
 800d85c:	2540      	movs	r5, #64	; 0x40
 800d85e:	2430      	movs	r4, #48	; 0x30
 800d860:	4b06      	ldr	r3, [pc, #24]	; (800d87c <arm_rfft_64_fast_init_f32+0x30>)
 800d862:	8205      	strh	r5, [r0, #16]
 800d864:	8184      	strh	r4, [r0, #12]
 800d866:	6143      	str	r3, [r0, #20]
 800d868:	bc30      	pop	{r4, r5}
 800d86a:	2000      	movs	r0, #0
 800d86c:	4770      	bx	lr
 800d86e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d872:	4770      	bx	lr
 800d874:	08035034 	.word	0x08035034
 800d878:	08057a98 	.word	0x08057a98
 800d87c:	08068818 	.word	0x08068818

0800d880 <arm_rfft_256_fast_init_f32>:
 800d880:	b180      	cbz	r0, 800d8a4 <arm_rfft_256_fast_init_f32+0x24>
 800d882:	b430      	push	{r4, r5}
 800d884:	4909      	ldr	r1, [pc, #36]	; (800d8ac <arm_rfft_256_fast_init_f32+0x2c>)
 800d886:	4a0a      	ldr	r2, [pc, #40]	; (800d8b0 <arm_rfft_256_fast_init_f32+0x30>)
 800d888:	2380      	movs	r3, #128	; 0x80
 800d88a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800d88e:	8003      	strh	r3, [r0, #0]
 800d890:	f44f 7580 	mov.w	r5, #256	; 0x100
 800d894:	24d0      	movs	r4, #208	; 0xd0
 800d896:	4b07      	ldr	r3, [pc, #28]	; (800d8b4 <arm_rfft_256_fast_init_f32+0x34>)
 800d898:	8205      	strh	r5, [r0, #16]
 800d89a:	8184      	strh	r4, [r0, #12]
 800d89c:	6143      	str	r3, [r0, #20]
 800d89e:	bc30      	pop	{r4, r5}
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	4770      	bx	lr
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	08032d3c 	.word	0x08032d3c
 800d8b0:	08052e18 	.word	0x08052e18
 800d8b4:	08063b98 	.word	0x08063b98

0800d8b8 <arm_rfft_512_fast_init_f32>:
 800d8b8:	b190      	cbz	r0, 800d8e0 <arm_rfft_512_fast_init_f32+0x28>
 800d8ba:	b430      	push	{r4, r5}
 800d8bc:	490a      	ldr	r1, [pc, #40]	; (800d8e8 <arm_rfft_512_fast_init_f32+0x30>)
 800d8be:	4a0b      	ldr	r2, [pc, #44]	; (800d8ec <arm_rfft_512_fast_init_f32+0x34>)
 800d8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8c4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800d8c8:	8003      	strh	r3, [r0, #0]
 800d8ca:	f44f 7500 	mov.w	r5, #512	; 0x200
 800d8ce:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800d8d2:	4b07      	ldr	r3, [pc, #28]	; (800d8f0 <arm_rfft_512_fast_init_f32+0x38>)
 800d8d4:	8205      	strh	r5, [r0, #16]
 800d8d6:	8184      	strh	r4, [r0, #12]
 800d8d8:	6143      	str	r3, [r0, #20]
 800d8da:	bc30      	pop	{r4, r5}
 800d8dc:	2000      	movs	r0, #0
 800d8de:	4770      	bx	lr
 800d8e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	08034cc4 	.word	0x08034cc4
 800d8ec:	08057298 	.word	0x08057298
 800d8f0:	08068018 	.word	0x08068018

0800d8f4 <arm_rfft_1024_fast_init_f32>:
 800d8f4:	b190      	cbz	r0, 800d91c <arm_rfft_1024_fast_init_f32+0x28>
 800d8f6:	b430      	push	{r4, r5}
 800d8f8:	490a      	ldr	r1, [pc, #40]	; (800d924 <arm_rfft_1024_fast_init_f32+0x30>)
 800d8fa:	4a0b      	ldr	r2, [pc, #44]	; (800d928 <arm_rfft_1024_fast_init_f32+0x34>)
 800d8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d900:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800d904:	8003      	strh	r3, [r0, #0]
 800d906:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800d90a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800d90e:	4b07      	ldr	r3, [pc, #28]	; (800d92c <arm_rfft_1024_fast_init_f32+0x38>)
 800d910:	8205      	strh	r5, [r0, #16]
 800d912:	8184      	strh	r4, [r0, #12]
 800d914:	6143      	str	r3, [r0, #20]
 800d916:	bc30      	pop	{r4, r5}
 800d918:	2000      	movs	r0, #0
 800d91a:	4770      	bx	lr
 800d91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	08035094 	.word	0x08035094
 800d928:	0805fb98 	.word	0x0805fb98
 800d92c:	08060b98 	.word	0x08060b98

0800d930 <arm_rfft_2048_fast_init_f32>:
 800d930:	b190      	cbz	r0, 800d958 <arm_rfft_2048_fast_init_f32+0x28>
 800d932:	b430      	push	{r4, r5}
 800d934:	490a      	ldr	r1, [pc, #40]	; (800d960 <arm_rfft_2048_fast_init_f32+0x30>)
 800d936:	4a0b      	ldr	r2, [pc, #44]	; (800d964 <arm_rfft_2048_fast_init_f32+0x34>)
 800d938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d93c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800d940:	8003      	strh	r3, [r0, #0]
 800d942:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800d946:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800d94a:	4b07      	ldr	r3, [pc, #28]	; (800d968 <arm_rfft_2048_fast_init_f32+0x38>)
 800d94c:	8205      	strh	r5, [r0, #16]
 800d94e:	8184      	strh	r4, [r0, #12]
 800d950:	6143      	str	r3, [r0, #20]
 800d952:	bc30      	pop	{r4, r5}
 800d954:	2000      	movs	r0, #0
 800d956:	4770      	bx	lr
 800d958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	08031f2c 	.word	0x08031f2c
 800d964:	08050e18 	.word	0x08050e18
 800d968:	08061b98 	.word	0x08061b98

0800d96c <arm_rfft_4096_fast_init_f32>:
 800d96c:	b190      	cbz	r0, 800d994 <arm_rfft_4096_fast_init_f32+0x28>
 800d96e:	b430      	push	{r4, r5}
 800d970:	490a      	ldr	r1, [pc, #40]	; (800d99c <arm_rfft_4096_fast_init_f32+0x30>)
 800d972:	4a0b      	ldr	r2, [pc, #44]	; (800d9a0 <arm_rfft_4096_fast_init_f32+0x34>)
 800d974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d978:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800d97c:	8003      	strh	r3, [r0, #0]
 800d97e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800d982:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800d986:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <arm_rfft_4096_fast_init_f32+0x38>)
 800d988:	8205      	strh	r5, [r0, #16]
 800d98a:	8184      	strh	r4, [r0, #12]
 800d98c:	6143      	str	r3, [r0, #20]
 800d98e:	bc30      	pop	{r4, r5}
 800d990:	2000      	movs	r0, #0
 800d992:	4770      	bx	lr
 800d994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	08032f04 	.word	0x08032f04
 800d9a0:	08053298 	.word	0x08053298
 800d9a4:	08064018 	.word	0x08064018

0800d9a8 <arm_rfft_fast_init_f32>:
 800d9a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d9ac:	d01f      	beq.n	800d9ee <arm_rfft_fast_init_f32+0x46>
 800d9ae:	d90b      	bls.n	800d9c8 <arm_rfft_fast_init_f32+0x20>
 800d9b0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800d9b4:	d019      	beq.n	800d9ea <arm_rfft_fast_init_f32+0x42>
 800d9b6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800d9ba:	d012      	beq.n	800d9e2 <arm_rfft_fast_init_f32+0x3a>
 800d9bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d9c0:	d00d      	beq.n	800d9de <arm_rfft_fast_init_f32+0x36>
 800d9c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9c6:	4770      	bx	lr
 800d9c8:	2940      	cmp	r1, #64	; 0x40
 800d9ca:	d00c      	beq.n	800d9e6 <arm_rfft_fast_init_f32+0x3e>
 800d9cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d9d0:	d003      	beq.n	800d9da <arm_rfft_fast_init_f32+0x32>
 800d9d2:	2920      	cmp	r1, #32
 800d9d4:	d1f5      	bne.n	800d9c2 <arm_rfft_fast_init_f32+0x1a>
 800d9d6:	4b07      	ldr	r3, [pc, #28]	; (800d9f4 <arm_rfft_fast_init_f32+0x4c>)
 800d9d8:	4718      	bx	r3
 800d9da:	4b07      	ldr	r3, [pc, #28]	; (800d9f8 <arm_rfft_fast_init_f32+0x50>)
 800d9dc:	4718      	bx	r3
 800d9de:	4b07      	ldr	r3, [pc, #28]	; (800d9fc <arm_rfft_fast_init_f32+0x54>)
 800d9e0:	4718      	bx	r3
 800d9e2:	4b07      	ldr	r3, [pc, #28]	; (800da00 <arm_rfft_fast_init_f32+0x58>)
 800d9e4:	4718      	bx	r3
 800d9e6:	4b07      	ldr	r3, [pc, #28]	; (800da04 <arm_rfft_fast_init_f32+0x5c>)
 800d9e8:	e7f6      	b.n	800d9d8 <arm_rfft_fast_init_f32+0x30>
 800d9ea:	4b07      	ldr	r3, [pc, #28]	; (800da08 <arm_rfft_fast_init_f32+0x60>)
 800d9ec:	e7f4      	b.n	800d9d8 <arm_rfft_fast_init_f32+0x30>
 800d9ee:	4b07      	ldr	r3, [pc, #28]	; (800da0c <arm_rfft_fast_init_f32+0x64>)
 800d9f0:	e7f2      	b.n	800d9d8 <arm_rfft_fast_init_f32+0x30>
 800d9f2:	bf00      	nop
 800d9f4:	0800d819 	.word	0x0800d819
 800d9f8:	0800d881 	.word	0x0800d881
 800d9fc:	0800d8f5 	.word	0x0800d8f5
 800da00:	0800d96d 	.word	0x0800d96d
 800da04:	0800d84d 	.word	0x0800d84d
 800da08:	0800d931 	.word	0x0800d931
 800da0c:	0800d8b9 	.word	0x0800d8b9

0800da10 <stage_rfft_f32>:
 800da10:	b410      	push	{r4}
 800da12:	edd1 7a00 	vldr	s15, [r1]
 800da16:	ed91 7a01 	vldr	s14, [r1, #4]
 800da1a:	8804      	ldrh	r4, [r0, #0]
 800da1c:	6940      	ldr	r0, [r0, #20]
 800da1e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800da22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800da26:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800da2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800da2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da32:	3c01      	subs	r4, #1
 800da34:	ee26 7a84 	vmul.f32	s14, s13, s8
 800da38:	ee67 7a84 	vmul.f32	s15, s15, s8
 800da3c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800da40:	ed82 7a00 	vstr	s14, [r2]
 800da44:	edc2 7a01 	vstr	s15, [r2, #4]
 800da48:	3010      	adds	r0, #16
 800da4a:	3210      	adds	r2, #16
 800da4c:	3b08      	subs	r3, #8
 800da4e:	3110      	adds	r1, #16
 800da50:	ed11 5a02 	vldr	s10, [r1, #-8]
 800da54:	ed93 7a02 	vldr	s14, [r3, #8]
 800da58:	ed50 6a02 	vldr	s13, [r0, #-8]
 800da5c:	edd3 4a03 	vldr	s9, [r3, #12]
 800da60:	ed51 7a01 	vldr	s15, [r1, #-4]
 800da64:	ed10 6a01 	vldr	s12, [r0, #-4]
 800da68:	ee77 5a45 	vsub.f32	s11, s14, s10
 800da6c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800da70:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800da74:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800da78:	ee66 5a25 	vmul.f32	s11, s12, s11
 800da7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800da80:	ee37 7a23 	vadd.f32	s14, s14, s7
 800da84:	ee66 6a85 	vmul.f32	s13, s13, s10
 800da88:	ee26 6a05 	vmul.f32	s12, s12, s10
 800da8c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800da90:	ee37 7a06 	vadd.f32	s14, s14, s12
 800da94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da98:	ee27 7a04 	vmul.f32	s14, s14, s8
 800da9c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800daa0:	3c01      	subs	r4, #1
 800daa2:	ed02 7a02 	vstr	s14, [r2, #-8]
 800daa6:	ed42 7a01 	vstr	s15, [r2, #-4]
 800daaa:	f1a3 0308 	sub.w	r3, r3, #8
 800daae:	f101 0108 	add.w	r1, r1, #8
 800dab2:	f100 0008 	add.w	r0, r0, #8
 800dab6:	f102 0208 	add.w	r2, r2, #8
 800daba:	d1c9      	bne.n	800da50 <stage_rfft_f32+0x40>
 800dabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop

0800dac4 <merge_rfft_f32>:
 800dac4:	b410      	push	{r4}
 800dac6:	edd1 7a00 	vldr	s15, [r1]
 800daca:	edd1 6a01 	vldr	s13, [r1, #4]
 800dace:	8804      	ldrh	r4, [r0, #0]
 800dad0:	6940      	ldr	r0, [r0, #20]
 800dad2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dad6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dada:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800dade:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dae2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800dae6:	3c01      	subs	r4, #1
 800dae8:	ed82 7a00 	vstr	s14, [r2]
 800daec:	edc2 7a01 	vstr	s15, [r2, #4]
 800daf0:	b3dc      	cbz	r4, 800db6a <merge_rfft_f32+0xa6>
 800daf2:	00e3      	lsls	r3, r4, #3
 800daf4:	3b08      	subs	r3, #8
 800daf6:	440b      	add	r3, r1
 800daf8:	3010      	adds	r0, #16
 800dafa:	3210      	adds	r2, #16
 800dafc:	3110      	adds	r1, #16
 800dafe:	ed11 5a02 	vldr	s10, [r1, #-8]
 800db02:	ed93 7a02 	vldr	s14, [r3, #8]
 800db06:	ed50 6a02 	vldr	s13, [r0, #-8]
 800db0a:	edd3 4a03 	vldr	s9, [r3, #12]
 800db0e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800db12:	ed10 6a01 	vldr	s12, [r0, #-4]
 800db16:	ee75 5a47 	vsub.f32	s11, s10, s14
 800db1a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800db1e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800db22:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800db26:	ee66 5a25 	vmul.f32	s11, s12, s11
 800db2a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800db2e:	ee37 7a63 	vsub.f32	s14, s14, s7
 800db32:	ee66 6a85 	vmul.f32	s13, s13, s10
 800db36:	ee26 6a05 	vmul.f32	s12, s12, s10
 800db3a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800db3e:	ee37 7a46 	vsub.f32	s14, s14, s12
 800db42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800db46:	ee27 7a04 	vmul.f32	s14, s14, s8
 800db4a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800db4e:	3c01      	subs	r4, #1
 800db50:	ed02 7a02 	vstr	s14, [r2, #-8]
 800db54:	ed42 7a01 	vstr	s15, [r2, #-4]
 800db58:	f1a3 0308 	sub.w	r3, r3, #8
 800db5c:	f101 0108 	add.w	r1, r1, #8
 800db60:	f100 0008 	add.w	r0, r0, #8
 800db64:	f102 0208 	add.w	r2, r2, #8
 800db68:	d1c9      	bne.n	800dafe <merge_rfft_f32+0x3a>
 800db6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <arm_rfft_fast_f32>:
 800db70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db74:	8a05      	ldrh	r5, [r0, #16]
 800db76:	086d      	lsrs	r5, r5, #1
 800db78:	8005      	strh	r5, [r0, #0]
 800db7a:	4604      	mov	r4, r0
 800db7c:	4616      	mov	r6, r2
 800db7e:	461d      	mov	r5, r3
 800db80:	b14b      	cbz	r3, 800db96 <arm_rfft_fast_f32+0x26>
 800db82:	f7ff ff9f 	bl	800dac4 <merge_rfft_f32>
 800db86:	462a      	mov	r2, r5
 800db88:	4631      	mov	r1, r6
 800db8a:	4620      	mov	r0, r4
 800db8c:	2301      	movs	r3, #1
 800db8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db92:	f000 bb33 	b.w	800e1fc <arm_cfft_f32>
 800db96:	460f      	mov	r7, r1
 800db98:	461a      	mov	r2, r3
 800db9a:	2301      	movs	r3, #1
 800db9c:	f000 fb2e 	bl	800e1fc <arm_cfft_f32>
 800dba0:	4632      	mov	r2, r6
 800dba2:	4639      	mov	r1, r7
 800dba4:	4620      	mov	r0, r4
 800dba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	f7ff bf31 	b.w	800da10 <stage_rfft_f32>
 800dbae:	bf00      	nop

0800dbb0 <arm_cfft_radix8by2_f32>:
 800dbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb4:	ed2d 8b08 	vpush	{d8-d11}
 800dbb8:	4607      	mov	r7, r0
 800dbba:	4608      	mov	r0, r1
 800dbbc:	f8b7 c000 	ldrh.w	ip, [r7]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800dbc6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800dbca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dbce:	f000 80b0 	beq.w	800dd32 <arm_cfft_radix8by2_f32+0x182>
 800dbd2:	008c      	lsls	r4, r1, #2
 800dbd4:	3410      	adds	r4, #16
 800dbd6:	f100 0310 	add.w	r3, r0, #16
 800dbda:	1906      	adds	r6, r0, r4
 800dbdc:	3210      	adds	r2, #16
 800dbde:	4444      	add	r4, r8
 800dbe0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800dbe4:	f108 0510 	add.w	r5, r8, #16
 800dbe8:	ed15 2a04 	vldr	s4, [r5, #-16]
 800dbec:	ed55 2a03 	vldr	s5, [r5, #-12]
 800dbf0:	ed54 4a04 	vldr	s9, [r4, #-16]
 800dbf4:	ed14 4a03 	vldr	s8, [r4, #-12]
 800dbf8:	ed14 6a02 	vldr	s12, [r4, #-8]
 800dbfc:	ed54 5a01 	vldr	s11, [r4, #-4]
 800dc00:	ed53 3a04 	vldr	s7, [r3, #-16]
 800dc04:	ed15 0a02 	vldr	s0, [r5, #-8]
 800dc08:	ed55 0a01 	vldr	s1, [r5, #-4]
 800dc0c:	ed56 6a04 	vldr	s13, [r6, #-16]
 800dc10:	ed16 3a03 	vldr	s6, [r6, #-12]
 800dc14:	ed13 7a03 	vldr	s14, [r3, #-12]
 800dc18:	ed13 5a02 	vldr	s10, [r3, #-8]
 800dc1c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800dc20:	ed16 1a02 	vldr	s2, [r6, #-8]
 800dc24:	ed56 1a01 	vldr	s3, [r6, #-4]
 800dc28:	ee73 ba82 	vadd.f32	s23, s7, s4
 800dc2c:	ee37 ba22 	vadd.f32	s22, s14, s5
 800dc30:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800dc34:	ee33 9a04 	vadd.f32	s18, s6, s8
 800dc38:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800dc3c:	ee75 aa00 	vadd.f32	s21, s10, s0
 800dc40:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800dc44:	ee71 8a06 	vadd.f32	s17, s2, s12
 800dc48:	ed43 ba04 	vstr	s23, [r3, #-16]
 800dc4c:	ed03 ba03 	vstr	s22, [r3, #-12]
 800dc50:	ed43 aa02 	vstr	s21, [r3, #-8]
 800dc54:	ed03 aa01 	vstr	s20, [r3, #-4]
 800dc58:	ed06 8a01 	vstr	s16, [r6, #-4]
 800dc5c:	ed46 9a04 	vstr	s19, [r6, #-16]
 800dc60:	ed06 9a03 	vstr	s18, [r6, #-12]
 800dc64:	ed46 8a02 	vstr	s17, [r6, #-8]
 800dc68:	ee37 7a62 	vsub.f32	s14, s14, s5
 800dc6c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800dc70:	ee34 4a43 	vsub.f32	s8, s8, s6
 800dc74:	ed52 6a03 	vldr	s13, [r2, #-12]
 800dc78:	ed12 3a04 	vldr	s6, [r2, #-16]
 800dc7c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800dc80:	ee27 8a26 	vmul.f32	s16, s14, s13
 800dc84:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800dc88:	ee23 2a83 	vmul.f32	s4, s7, s6
 800dc8c:	ee64 4a83 	vmul.f32	s9, s9, s6
 800dc90:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800dc94:	ee27 7a03 	vmul.f32	s14, s14, s6
 800dc98:	ee64 6a26 	vmul.f32	s13, s8, s13
 800dc9c:	ee24 4a03 	vmul.f32	s8, s8, s6
 800dca0:	ee37 7a63 	vsub.f32	s14, s14, s7
 800dca4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800dca8:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800dcac:	ee32 3a08 	vadd.f32	s6, s4, s16
 800dcb0:	ed05 7a03 	vstr	s14, [r5, #-12]
 800dcb4:	ed05 3a04 	vstr	s6, [r5, #-16]
 800dcb8:	ed04 4a04 	vstr	s8, [r4, #-16]
 800dcbc:	ed44 6a03 	vstr	s13, [r4, #-12]
 800dcc0:	ed12 7a01 	vldr	s14, [r2, #-4]
 800dcc4:	ee76 6a41 	vsub.f32	s13, s12, s2
 800dcc8:	ee35 5a40 	vsub.f32	s10, s10, s0
 800dccc:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800dcd0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800dcd4:	ed52 5a02 	vldr	s11, [r2, #-8]
 800dcd8:	ee67 3a87 	vmul.f32	s7, s15, s14
 800dcdc:	ee66 4a87 	vmul.f32	s9, s13, s14
 800dce0:	ee25 4a25 	vmul.f32	s8, s10, s11
 800dce4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dce8:	ee25 5a07 	vmul.f32	s10, s10, s14
 800dcec:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dcf0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800dcf4:	ee26 6a25 	vmul.f32	s12, s12, s11
 800dcf8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800dcfc:	ee74 5a23 	vadd.f32	s11, s8, s7
 800dd00:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800dd04:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dd08:	3310      	adds	r3, #16
 800dd0a:	4563      	cmp	r3, ip
 800dd0c:	ed45 5a02 	vstr	s11, [r5, #-8]
 800dd10:	f106 0610 	add.w	r6, r6, #16
 800dd14:	ed45 7a01 	vstr	s15, [r5, #-4]
 800dd18:	f102 0210 	add.w	r2, r2, #16
 800dd1c:	ed04 6a02 	vstr	s12, [r4, #-8]
 800dd20:	ed04 7a01 	vstr	s14, [r4, #-4]
 800dd24:	f105 0510 	add.w	r5, r5, #16
 800dd28:	f104 0410 	add.w	r4, r4, #16
 800dd2c:	f47f af5c 	bne.w	800dbe8 <arm_cfft_radix8by2_f32+0x38>
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	b28c      	uxth	r4, r1
 800dd34:	4621      	mov	r1, r4
 800dd36:	2302      	movs	r3, #2
 800dd38:	f000 fb8e 	bl	800e458 <arm_radix8_butterfly_f32>
 800dd3c:	ecbd 8b08 	vpop	{d8-d11}
 800dd40:	4621      	mov	r1, r4
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	4640      	mov	r0, r8
 800dd46:	2302      	movs	r3, #2
 800dd48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4c:	f000 bb84 	b.w	800e458 <arm_radix8_butterfly_f32>

0800dd50 <arm_cfft_radix8by4_f32>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	ed2d 8b0a 	vpush	{d8-d12}
 800dd58:	b08d      	sub	sp, #52	; 0x34
 800dd5a:	460d      	mov	r5, r1
 800dd5c:	910b      	str	r1, [sp, #44]	; 0x2c
 800dd5e:	8801      	ldrh	r1, [r0, #0]
 800dd60:	6842      	ldr	r2, [r0, #4]
 800dd62:	900a      	str	r0, [sp, #40]	; 0x28
 800dd64:	0849      	lsrs	r1, r1, #1
 800dd66:	008b      	lsls	r3, r1, #2
 800dd68:	18ee      	adds	r6, r5, r3
 800dd6a:	18f0      	adds	r0, r6, r3
 800dd6c:	edd0 5a00 	vldr	s11, [r0]
 800dd70:	edd5 7a00 	vldr	s15, [r5]
 800dd74:	ed96 7a00 	vldr	s14, [r6]
 800dd78:	edd0 3a01 	vldr	s7, [r0, #4]
 800dd7c:	ed96 4a01 	vldr	s8, [r6, #4]
 800dd80:	ed95 5a01 	vldr	s10, [r5, #4]
 800dd84:	9008      	str	r0, [sp, #32]
 800dd86:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800dd8a:	18c7      	adds	r7, r0, r3
 800dd8c:	edd7 4a00 	vldr	s9, [r7]
 800dd90:	ed97 3a01 	vldr	s6, [r7, #4]
 800dd94:	9701      	str	r7, [sp, #4]
 800dd96:	ee77 6a06 	vadd.f32	s13, s14, s12
 800dd9a:	462c      	mov	r4, r5
 800dd9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800dda0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800dda4:	ee16 ca90 	vmov	ip, s13
 800dda8:	f844 cb08 	str.w	ip, [r4], #8
 800ddac:	ee75 6a23 	vadd.f32	s13, s10, s7
 800ddb0:	edd6 5a01 	vldr	s11, [r6, #4]
 800ddb4:	edd7 2a01 	vldr	s5, [r7, #4]
 800ddb8:	9404      	str	r4, [sp, #16]
 800ddba:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ddbe:	ee74 3a27 	vadd.f32	s7, s8, s15
 800ddc2:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ddc6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800ddca:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800ddce:	0849      	lsrs	r1, r1, #1
 800ddd0:	f102 0e08 	add.w	lr, r2, #8
 800ddd4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800ddd8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800dddc:	9109      	str	r1, [sp, #36]	; 0x24
 800ddde:	ee35 4a47 	vsub.f32	s8, s10, s14
 800dde2:	f1a1 0902 	sub.w	r9, r1, #2
 800dde6:	f8cd e00c 	str.w	lr, [sp, #12]
 800ddea:	4631      	mov	r1, r6
 800ddec:	ee13 ea90 	vmov	lr, s7
 800ddf0:	ee36 6a64 	vsub.f32	s12, s12, s9
 800ddf4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	edc5 5a01 	vstr	s11, [r5, #4]
 800ddfe:	ee37 7a05 	vadd.f32	s14, s14, s10
 800de02:	f841 eb08 	str.w	lr, [r1], #8
 800de06:	ee34 5a24 	vadd.f32	s10, s8, s9
 800de0a:	ee16 ea10 	vmov	lr, s12
 800de0e:	ed86 5a01 	vstr	s10, [r6, #4]
 800de12:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800de16:	f844 eb08 	str.w	lr, [r4], #8
 800de1a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800de1e:	edc0 6a01 	vstr	s13, [r0, #4]
 800de22:	9405      	str	r4, [sp, #20]
 800de24:	4604      	mov	r4, r0
 800de26:	ee17 0a90 	vmov	r0, s15
 800de2a:	9106      	str	r1, [sp, #24]
 800de2c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800de30:	f102 0110 	add.w	r1, r2, #16
 800de34:	46bc      	mov	ip, r7
 800de36:	9100      	str	r1, [sp, #0]
 800de38:	f847 0b08 	str.w	r0, [r7], #8
 800de3c:	f102 0118 	add.w	r1, r2, #24
 800de40:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800de44:	9102      	str	r1, [sp, #8]
 800de46:	ed8c 7a01 	vstr	s14, [ip, #4]
 800de4a:	9007      	str	r0, [sp, #28]
 800de4c:	f000 8134 	beq.w	800e0b8 <arm_cfft_radix8by4_f32+0x368>
 800de50:	f102 0920 	add.w	r9, r2, #32
 800de54:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800de58:	9a01      	ldr	r2, [sp, #4]
 800de5a:	f8dd a000 	ldr.w	sl, [sp]
 800de5e:	3b0c      	subs	r3, #12
 800de60:	4683      	mov	fp, r0
 800de62:	4463      	add	r3, ip
 800de64:	f105 0e10 	add.w	lr, r5, #16
 800de68:	f1a4 010c 	sub.w	r1, r4, #12
 800de6c:	f104 0510 	add.w	r5, r4, #16
 800de70:	f1a6 0c0c 	sub.w	ip, r6, #12
 800de74:	f1a2 040c 	sub.w	r4, r2, #12
 800de78:	f106 0010 	add.w	r0, r6, #16
 800de7c:	3210      	adds	r2, #16
 800de7e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800de82:	ed55 5a02 	vldr	s11, [r5, #-8]
 800de86:	ed50 7a02 	vldr	s15, [r0, #-8]
 800de8a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800de8e:	ed55 6a01 	vldr	s13, [r5, #-4]
 800de92:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800de96:	ed12 1a01 	vldr	s2, [r2, #-4]
 800de9a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800de9e:	ee35 4a25 	vadd.f32	s8, s10, s11
 800dea2:	ee30 6a26 	vadd.f32	s12, s0, s13
 800dea6:	ee37 7a84 	vadd.f32	s14, s15, s8
 800deaa:	ee30 0a66 	vsub.f32	s0, s0, s13
 800deae:	ee37 7a21 	vadd.f32	s14, s14, s3
 800deb2:	ee75 5a65 	vsub.f32	s11, s10, s11
 800deb6:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800deba:	ed10 7a01 	vldr	s14, [r0, #-4]
 800debe:	ed52 6a01 	vldr	s13, [r2, #-4]
 800dec2:	ee36 7a07 	vadd.f32	s14, s12, s14
 800dec6:	ee78 aa25 	vadd.f32	s21, s16, s11
 800deca:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dece:	ee70 3a67 	vsub.f32	s7, s0, s15
 800ded2:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800ded6:	ed94 7a02 	vldr	s14, [r4, #8]
 800deda:	ed9c 2a02 	vldr	s4, [ip, #8]
 800dede:	ed91 ba02 	vldr	s22, [r1, #8]
 800dee2:	edd3 9a02 	vldr	s19, [r3, #8]
 800dee6:	edd4 2a01 	vldr	s5, [r4, #4]
 800deea:	ed9c 9a01 	vldr	s18, [ip, #4]
 800deee:	ed93 5a01 	vldr	s10, [r3, #4]
 800def2:	edd1 0a01 	vldr	s1, [r1, #4]
 800def6:	ee72 6a07 	vadd.f32	s13, s4, s14
 800defa:	ee32 2a47 	vsub.f32	s4, s4, s14
 800defe:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800df02:	ee79 4a22 	vadd.f32	s9, s18, s5
 800df06:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800df0a:	ee79 2a62 	vsub.f32	s5, s18, s5
 800df0e:	ed8c 7a02 	vstr	s14, [ip, #8]
 800df12:	ed91 7a01 	vldr	s14, [r1, #4]
 800df16:	edd3 8a01 	vldr	s17, [r3, #4]
 800df1a:	ee34 7a87 	vadd.f32	s14, s9, s14
 800df1e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800df22:	ee37 7a28 	vadd.f32	s14, s14, s17
 800df26:	ee32 9a60 	vsub.f32	s18, s4, s1
 800df2a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800df2e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800df32:	ed1a aa02 	vldr	s20, [sl, #-8]
 800df36:	ee73 8a22 	vadd.f32	s17, s6, s5
 800df3a:	ee39 9a05 	vadd.f32	s18, s18, s10
 800df3e:	ee7a aac1 	vsub.f32	s21, s21, s2
 800df42:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800df46:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800df4a:	ee69 ba07 	vmul.f32	s23, s18, s14
 800df4e:	ee6a aa87 	vmul.f32	s21, s21, s14
 800df52:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800df56:	ee63 ca87 	vmul.f32	s25, s7, s14
 800df5a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800df5e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800df62:	ee68 8a87 	vmul.f32	s17, s17, s14
 800df66:	ee73 3aea 	vsub.f32	s7, s7, s21
 800df6a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800df6e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800df72:	ee3b aaca 	vsub.f32	s20, s23, s20
 800df76:	ee34 4a67 	vsub.f32	s8, s8, s15
 800df7a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800df7e:	ee36 6a48 	vsub.f32	s12, s12, s16
 800df82:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800df86:	ed00 7a02 	vstr	s14, [r0, #-8]
 800df8a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800df8e:	edc1 8a01 	vstr	s17, [r1, #4]
 800df92:	ed81 aa02 	vstr	s20, [r1, #8]
 800df96:	ed59 3a04 	vldr	s7, [r9, #-16]
 800df9a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800df9e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800dfa2:	ed59 6a03 	vldr	s13, [r9, #-12]
 800dfa6:	ee34 4a61 	vsub.f32	s8, s8, s3
 800dfaa:	ee36 6a41 	vsub.f32	s12, s12, s2
 800dfae:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800dfb2:	ee66 9a26 	vmul.f32	s19, s12, s13
 800dfb6:	ee24 9a23 	vmul.f32	s18, s8, s7
 800dfba:	ee26 6a23 	vmul.f32	s12, s12, s7
 800dfbe:	ee24 4a26 	vmul.f32	s8, s8, s13
 800dfc2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dfc6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800dfca:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800dfce:	ee36 6a44 	vsub.f32	s12, s12, s8
 800dfd2:	ee37 7a64 	vsub.f32	s14, s14, s9
 800dfd6:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800dfda:	ee79 3a29 	vadd.f32	s7, s18, s19
 800dfde:	ee75 6a60 	vsub.f32	s13, s10, s1
 800dfe2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800dfe6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dfea:	ed45 3a02 	vstr	s7, [r5, #-8]
 800dfee:	ed05 6a01 	vstr	s12, [r5, #-4]
 800dff2:	ed84 7a01 	vstr	s14, [r4, #4]
 800dff6:	ed84 4a02 	vstr	s8, [r4, #8]
 800dffa:	ee35 6a81 	vadd.f32	s12, s11, s2
 800dffe:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800e002:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800e006:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800e00a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e00e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800e012:	ee67 2a26 	vmul.f32	s5, s14, s13
 800e016:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800e01a:	ee26 5a25 	vmul.f32	s10, s12, s11
 800e01e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e022:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e026:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e02a:	ee63 6a26 	vmul.f32	s13, s6, s13
 800e02e:	ee23 3a25 	vmul.f32	s6, s6, s11
 800e032:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e036:	ee75 5a24 	vadd.f32	s11, s10, s9
 800e03a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800e03e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e042:	f1bb 0b01 	subs.w	fp, fp, #1
 800e046:	ed42 5a02 	vstr	s11, [r2, #-8]
 800e04a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e04e:	f10e 0e08 	add.w	lr, lr, #8
 800e052:	ed83 3a02 	vstr	s6, [r3, #8]
 800e056:	ed83 7a01 	vstr	s14, [r3, #4]
 800e05a:	f1ac 0c08 	sub.w	ip, ip, #8
 800e05e:	f10a 0a08 	add.w	sl, sl, #8
 800e062:	f100 0008 	add.w	r0, r0, #8
 800e066:	f1a1 0108 	sub.w	r1, r1, #8
 800e06a:	f109 0910 	add.w	r9, r9, #16
 800e06e:	f105 0508 	add.w	r5, r5, #8
 800e072:	f1a4 0408 	sub.w	r4, r4, #8
 800e076:	f108 0818 	add.w	r8, r8, #24
 800e07a:	f102 0208 	add.w	r2, r2, #8
 800e07e:	f1a3 0308 	sub.w	r3, r3, #8
 800e082:	f47f aefc 	bne.w	800de7e <arm_cfft_radix8by4_f32+0x12e>
 800e086:	9907      	ldr	r1, [sp, #28]
 800e088:	9800      	ldr	r0, [sp, #0]
 800e08a:	00cb      	lsls	r3, r1, #3
 800e08c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800e090:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800e094:	9100      	str	r1, [sp, #0]
 800e096:	9904      	ldr	r1, [sp, #16]
 800e098:	4419      	add	r1, r3
 800e09a:	9104      	str	r1, [sp, #16]
 800e09c:	9903      	ldr	r1, [sp, #12]
 800e09e:	4419      	add	r1, r3
 800e0a0:	9103      	str	r1, [sp, #12]
 800e0a2:	9906      	ldr	r1, [sp, #24]
 800e0a4:	4419      	add	r1, r3
 800e0a6:	9106      	str	r1, [sp, #24]
 800e0a8:	9905      	ldr	r1, [sp, #20]
 800e0aa:	441f      	add	r7, r3
 800e0ac:	4419      	add	r1, r3
 800e0ae:	9b02      	ldr	r3, [sp, #8]
 800e0b0:	9105      	str	r1, [sp, #20]
 800e0b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0b6:	9302      	str	r3, [sp, #8]
 800e0b8:	9904      	ldr	r1, [sp, #16]
 800e0ba:	9805      	ldr	r0, [sp, #20]
 800e0bc:	ed91 4a00 	vldr	s8, [r1]
 800e0c0:	edd0 6a00 	vldr	s13, [r0]
 800e0c4:	9b06      	ldr	r3, [sp, #24]
 800e0c6:	ed97 3a00 	vldr	s6, [r7]
 800e0ca:	edd3 7a00 	vldr	s15, [r3]
 800e0ce:	edd0 4a01 	vldr	s9, [r0, #4]
 800e0d2:	edd1 3a01 	vldr	s7, [r1, #4]
 800e0d6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e0da:	ed93 7a01 	vldr	s14, [r3, #4]
 800e0de:	9a03      	ldr	r2, [sp, #12]
 800e0e0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800e0e4:	ee34 6a26 	vadd.f32	s12, s8, s13
 800e0e8:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800e0ec:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e0f0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800e0f4:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e0f8:	ee74 6a66 	vsub.f32	s13, s8, s13
 800e0fc:	ed81 5a00 	vstr	s10, [r1]
 800e100:	ed93 5a01 	vldr	s10, [r3, #4]
 800e104:	edd7 4a01 	vldr	s9, [r7, #4]
 800e108:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e10c:	ee37 4a26 	vadd.f32	s8, s14, s13
 800e110:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e114:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800e118:	ed81 5a01 	vstr	s10, [r1, #4]
 800e11c:	edd2 1a00 	vldr	s3, [r2]
 800e120:	edd2 2a01 	vldr	s5, [r2, #4]
 800e124:	ee34 5a83 	vadd.f32	s10, s9, s6
 800e128:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e12c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e130:	ee64 4a21 	vmul.f32	s9, s8, s3
 800e134:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e138:	ee65 2a22 	vmul.f32	s5, s10, s5
 800e13c:	ee25 5a21 	vmul.f32	s10, s10, s3
 800e140:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800e144:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e148:	edc3 2a00 	vstr	s5, [r3]
 800e14c:	ed83 5a01 	vstr	s10, [r3, #4]
 800e150:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800e154:	9b00      	ldr	r3, [sp, #0]
 800e156:	ee36 6a43 	vsub.f32	s12, s12, s6
 800e15a:	ed93 4a01 	vldr	s8, [r3, #4]
 800e15e:	ed93 5a00 	vldr	s10, [r3]
 800e162:	9b02      	ldr	r3, [sp, #8]
 800e164:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800e168:	ee66 4a05 	vmul.f32	s9, s12, s10
 800e16c:	ee25 5a85 	vmul.f32	s10, s11, s10
 800e170:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e174:	ee65 5a84 	vmul.f32	s11, s11, s8
 800e178:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e17c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800e180:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e184:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e188:	ed80 6a01 	vstr	s12, [r0, #4]
 800e18c:	edc0 5a00 	vstr	s11, [r0]
 800e190:	edd3 5a01 	vldr	s11, [r3, #4]
 800e194:	edd3 6a00 	vldr	s13, [r3]
 800e198:	ee37 7a02 	vadd.f32	s14, s14, s4
 800e19c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800e1a0:	ee27 6a26 	vmul.f32	s12, s14, s13
 800e1a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e1a8:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e1ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e1b0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e1b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e1b8:	ed87 7a01 	vstr	s14, [r7, #4]
 800e1bc:	edc7 7a00 	vstr	s15, [r7]
 800e1c0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	686a      	ldr	r2, [r5, #4]
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	f000 f945 	bl	800e458 <arm_radix8_butterfly_f32>
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	686a      	ldr	r2, [r5, #4]
 800e1d4:	2304      	movs	r3, #4
 800e1d6:	f000 f93f 	bl	800e458 <arm_radix8_butterfly_f32>
 800e1da:	9808      	ldr	r0, [sp, #32]
 800e1dc:	686a      	ldr	r2, [r5, #4]
 800e1de:	4621      	mov	r1, r4
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f000 f939 	bl	800e458 <arm_radix8_butterfly_f32>
 800e1e6:	686a      	ldr	r2, [r5, #4]
 800e1e8:	9801      	ldr	r0, [sp, #4]
 800e1ea:	4621      	mov	r1, r4
 800e1ec:	2304      	movs	r3, #4
 800e1ee:	b00d      	add	sp, #52	; 0x34
 800e1f0:	ecbd 8b0a 	vpop	{d8-d12}
 800e1f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f8:	f000 b92e 	b.w	800e458 <arm_radix8_butterfly_f32>

0800e1fc <arm_cfft_f32>:
 800e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e200:	2a01      	cmp	r2, #1
 800e202:	4606      	mov	r6, r0
 800e204:	4617      	mov	r7, r2
 800e206:	460c      	mov	r4, r1
 800e208:	4698      	mov	r8, r3
 800e20a:	8805      	ldrh	r5, [r0, #0]
 800e20c:	d056      	beq.n	800e2bc <arm_cfft_f32+0xc0>
 800e20e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800e212:	d063      	beq.n	800e2dc <arm_cfft_f32+0xe0>
 800e214:	d916      	bls.n	800e244 <arm_cfft_f32+0x48>
 800e216:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e21a:	d01a      	beq.n	800e252 <arm_cfft_f32+0x56>
 800e21c:	d947      	bls.n	800e2ae <arm_cfft_f32+0xb2>
 800e21e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800e222:	d05b      	beq.n	800e2dc <arm_cfft_f32+0xe0>
 800e224:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800e228:	d105      	bne.n	800e236 <arm_cfft_f32+0x3a>
 800e22a:	2301      	movs	r3, #1
 800e22c:	6872      	ldr	r2, [r6, #4]
 800e22e:	4629      	mov	r1, r5
 800e230:	4620      	mov	r0, r4
 800e232:	f000 f911 	bl	800e458 <arm_radix8_butterfly_f32>
 800e236:	f1b8 0f00 	cmp.w	r8, #0
 800e23a:	d111      	bne.n	800e260 <arm_cfft_f32+0x64>
 800e23c:	2f01      	cmp	r7, #1
 800e23e:	d016      	beq.n	800e26e <arm_cfft_f32+0x72>
 800e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e244:	2d20      	cmp	r5, #32
 800e246:	d049      	beq.n	800e2dc <arm_cfft_f32+0xe0>
 800e248:	d935      	bls.n	800e2b6 <arm_cfft_f32+0xba>
 800e24a:	2d40      	cmp	r5, #64	; 0x40
 800e24c:	d0ed      	beq.n	800e22a <arm_cfft_f32+0x2e>
 800e24e:	2d80      	cmp	r5, #128	; 0x80
 800e250:	d1f1      	bne.n	800e236 <arm_cfft_f32+0x3a>
 800e252:	4621      	mov	r1, r4
 800e254:	4630      	mov	r0, r6
 800e256:	f7ff fcab 	bl	800dbb0 <arm_cfft_radix8by2_f32>
 800e25a:	f1b8 0f00 	cmp.w	r8, #0
 800e25e:	d0ed      	beq.n	800e23c <arm_cfft_f32+0x40>
 800e260:	68b2      	ldr	r2, [r6, #8]
 800e262:	89b1      	ldrh	r1, [r6, #12]
 800e264:	4620      	mov	r0, r4
 800e266:	f000 f88d 	bl	800e384 <arm_bitreversal_32>
 800e26a:	2f01      	cmp	r7, #1
 800e26c:	d1e8      	bne.n	800e240 <arm_cfft_f32+0x44>
 800e26e:	ee07 5a90 	vmov	s15, r5
 800e272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e27a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e27e:	2d00      	cmp	r5, #0
 800e280:	d0de      	beq.n	800e240 <arm_cfft_f32+0x44>
 800e282:	f104 0108 	add.w	r1, r4, #8
 800e286:	2300      	movs	r3, #0
 800e288:	3301      	adds	r3, #1
 800e28a:	429d      	cmp	r5, r3
 800e28c:	f101 0108 	add.w	r1, r1, #8
 800e290:	ed11 7a04 	vldr	s14, [r1, #-16]
 800e294:	ed51 7a03 	vldr	s15, [r1, #-12]
 800e298:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e29c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e2a0:	ed01 7a04 	vstr	s14, [r1, #-16]
 800e2a4:	ed41 7a03 	vstr	s15, [r1, #-12]
 800e2a8:	d1ee      	bne.n	800e288 <arm_cfft_f32+0x8c>
 800e2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ae:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800e2b2:	d0ba      	beq.n	800e22a <arm_cfft_f32+0x2e>
 800e2b4:	e7bf      	b.n	800e236 <arm_cfft_f32+0x3a>
 800e2b6:	2d10      	cmp	r5, #16
 800e2b8:	d0cb      	beq.n	800e252 <arm_cfft_f32+0x56>
 800e2ba:	e7bc      	b.n	800e236 <arm_cfft_f32+0x3a>
 800e2bc:	b19d      	cbz	r5, 800e2e6 <arm_cfft_f32+0xea>
 800e2be:	f101 030c 	add.w	r3, r1, #12
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	ed53 7a02 	vldr	s15, [r3, #-8]
 800e2c8:	3201      	adds	r2, #1
 800e2ca:	eef1 7a67 	vneg.f32	s15, s15
 800e2ce:	4295      	cmp	r5, r2
 800e2d0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800e2d4:	f103 0308 	add.w	r3, r3, #8
 800e2d8:	d1f4      	bne.n	800e2c4 <arm_cfft_f32+0xc8>
 800e2da:	e798      	b.n	800e20e <arm_cfft_f32+0x12>
 800e2dc:	4621      	mov	r1, r4
 800e2de:	4630      	mov	r0, r6
 800e2e0:	f7ff fd36 	bl	800dd50 <arm_cfft_radix8by4_f32>
 800e2e4:	e7a7      	b.n	800e236 <arm_cfft_f32+0x3a>
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0aa      	beq.n	800e240 <arm_cfft_f32+0x44>
 800e2ea:	e7b9      	b.n	800e260 <arm_cfft_f32+0x64>

0800e2ec <arm_dct4_init_f32>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800e2fc:	ed80 0a01 	vstr	s0, [r0, #4]
 800e300:	e9c0 4104 	strd	r4, r1, [r0, #16]
 800e304:	8003      	strh	r3, [r0, #0]
 800e306:	8042      	strh	r2, [r0, #2]
 800e308:	d020      	beq.n	800e34c <arm_dct4_init_f32+0x60>
 800e30a:	d914      	bls.n	800e336 <arm_dct4_init_f32+0x4a>
 800e30c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e310:	d022      	beq.n	800e358 <arm_dct4_init_f32+0x6c>
 800e312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e316:	d116      	bne.n	800e346 <arm_dct4_init_f32+0x5a>
 800e318:	4d12      	ldr	r5, [pc, #72]	; (800e364 <arm_dct4_init_f32+0x78>)
 800e31a:	4a13      	ldr	r2, [pc, #76]	; (800e368 <arm_dct4_init_f32+0x7c>)
 800e31c:	e9c0 5202 	strd	r5, r2, [r0, #8]
 800e320:	2500      	movs	r5, #0
 800e322:	2601      	movs	r6, #1
 800e324:	461a      	mov	r2, r3
 800e326:	4620      	mov	r0, r4
 800e328:	9600      	str	r6, [sp, #0]
 800e32a:	2300      	movs	r3, #0
 800e32c:	f000 fb54 	bl	800e9d8 <arm_rfft_init_f32>
 800e330:	4628      	mov	r0, r5
 800e332:	b002      	add	sp, #8
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	2b80      	cmp	r3, #128	; 0x80
 800e338:	d105      	bne.n	800e346 <arm_dct4_init_f32+0x5a>
 800e33a:	4d0c      	ldr	r5, [pc, #48]	; (800e36c <arm_dct4_init_f32+0x80>)
 800e33c:	4a0c      	ldr	r2, [pc, #48]	; (800e370 <arm_dct4_init_f32+0x84>)
 800e33e:	e9c0 5202 	strd	r5, r2, [r0, #8]
 800e342:	2500      	movs	r5, #0
 800e344:	e7ed      	b.n	800e322 <arm_dct4_init_f32+0x36>
 800e346:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e34a:	e7ea      	b.n	800e322 <arm_dct4_init_f32+0x36>
 800e34c:	4d09      	ldr	r5, [pc, #36]	; (800e374 <arm_dct4_init_f32+0x88>)
 800e34e:	4a0a      	ldr	r2, [pc, #40]	; (800e378 <arm_dct4_init_f32+0x8c>)
 800e350:	e9c0 5202 	strd	r5, r2, [r0, #8]
 800e354:	2500      	movs	r5, #0
 800e356:	e7e4      	b.n	800e322 <arm_dct4_init_f32+0x36>
 800e358:	4d08      	ldr	r5, [pc, #32]	; (800e37c <arm_dct4_init_f32+0x90>)
 800e35a:	4a09      	ldr	r2, [pc, #36]	; (800e380 <arm_dct4_init_f32+0x94>)
 800e35c:	e9c0 5202 	strd	r5, r2, [r0, #8]
 800e360:	2500      	movs	r5, #0
 800e362:	e7de      	b.n	800e322 <arm_dct4_init_f32+0x36>
 800e364:	08021f2c 	.word	0x08021f2c
 800e368:	08038614 	.word	0x08038614
 800e36c:	0801cb2c 	.word	0x0801cb2c
 800e370:	08035c14 	.word	0x08035c14
 800e374:	08020f2c 	.word	0x08020f2c
 800e378:	08037e14 	.word	0x08037e14
 800e37c:	0801cf2c 	.word	0x0801cf2c
 800e380:	08035e14 	.word	0x08035e14

0800e384 <arm_bitreversal_32>:
 800e384:	b1e9      	cbz	r1, 800e3c2 <arm_bitreversal_32+0x3e>
 800e386:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e388:	2500      	movs	r5, #0
 800e38a:	f102 0e02 	add.w	lr, r2, #2
 800e38e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800e392:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800e396:	08a4      	lsrs	r4, r4, #2
 800e398:	089b      	lsrs	r3, r3, #2
 800e39a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800e39e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800e3a2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800e3a6:	00a6      	lsls	r6, r4, #2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	1d34      	adds	r4, r6, #4
 800e3b2:	3502      	adds	r5, #2
 800e3b4:	58c6      	ldr	r6, [r0, r3]
 800e3b6:	5907      	ldr	r7, [r0, r4]
 800e3b8:	50c7      	str	r7, [r0, r3]
 800e3ba:	428d      	cmp	r5, r1
 800e3bc:	5106      	str	r6, [r0, r4]
 800e3be:	d3e6      	bcc.n	800e38e <arm_bitreversal_32+0xa>
 800e3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3c2:	4770      	bx	lr

0800e3c4 <arm_cos_f32>:
 800e3c4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800e44c <arm_cos_f32+0x88>
 800e3c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e3cc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e3d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e3e0:	d504      	bpl.n	800e3ec <arm_cos_f32+0x28>
 800e3e2:	ee17 3a90 	vmov	r3, s15
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	ee07 3a90 	vmov	s15, r3
 800e3ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e450 <arm_cos_f32+0x8c>
 800e3f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e3f8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e3fc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e400:	ee17 3a90 	vmov	r3, s15
 800e404:	b29b      	uxth	r3, r3
 800e406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e40a:	d21a      	bcs.n	800e442 <arm_cos_f32+0x7e>
 800e40c:	ee07 3a90 	vmov	s15, r3
 800e410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e414:	1c59      	adds	r1, r3, #1
 800e416:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e41a:	4a0e      	ldr	r2, [pc, #56]	; (800e454 <arm_cos_f32+0x90>)
 800e41c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e424:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e428:	ed93 7a00 	vldr	s14, [r3]
 800e42c:	edd2 6a00 	vldr	s13, [r2]
 800e430:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e434:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e43c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e440:	4770      	bx	lr
 800e442:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e446:	2101      	movs	r1, #1
 800e448:	2300      	movs	r3, #0
 800e44a:	e7e6      	b.n	800e41a <arm_cos_f32+0x56>
 800e44c:	3e22f983 	.word	0x3e22f983
 800e450:	44000000 	.word	0x44000000
 800e454:	08050614 	.word	0x08050614

0800e458 <arm_radix8_butterfly_f32>:
 800e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45c:	ed2d 8b10 	vpush	{d8-d15}
 800e460:	b095      	sub	sp, #84	; 0x54
 800e462:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e466:	4603      	mov	r3, r0
 800e468:	3304      	adds	r3, #4
 800e46a:	ed9f bab9 	vldr	s22, [pc, #740]	; 800e750 <arm_radix8_butterfly_f32+0x2f8>
 800e46e:	9012      	str	r0, [sp, #72]	; 0x48
 800e470:	468b      	mov	fp, r1
 800e472:	9313      	str	r3, [sp, #76]	; 0x4c
 800e474:	4689      	mov	r9, r1
 800e476:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800e47a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e47c:	960f      	str	r6, [sp, #60]	; 0x3c
 800e47e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800e482:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800e486:	eb03 0508 	add.w	r5, r3, r8
 800e48a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800e48e:	eb05 040e 	add.w	r4, r5, lr
 800e492:	0137      	lsls	r7, r6, #4
 800e494:	eba6 030a 	sub.w	r3, r6, sl
 800e498:	eb04 000e 	add.w	r0, r4, lr
 800e49c:	44b2      	add	sl, r6
 800e49e:	1d3a      	adds	r2, r7, #4
 800e4a0:	9702      	str	r7, [sp, #8]
 800e4a2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800e4a6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800e4aa:	ebae 0c06 	sub.w	ip, lr, r6
 800e4ae:	9703      	str	r7, [sp, #12]
 800e4b0:	eb03 0708 	add.w	r7, r3, r8
 800e4b4:	9701      	str	r7, [sp, #4]
 800e4b6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800e4ba:	9706      	str	r7, [sp, #24]
 800e4bc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e4be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800e4c2:	f10e 0104 	add.w	r1, lr, #4
 800e4c6:	4439      	add	r1, r7
 800e4c8:	443a      	add	r2, r7
 800e4ca:	0137      	lsls	r7, r6, #4
 800e4cc:	00f6      	lsls	r6, r6, #3
 800e4ce:	9704      	str	r7, [sp, #16]
 800e4d0:	9605      	str	r6, [sp, #20]
 800e4d2:	9f01      	ldr	r7, [sp, #4]
 800e4d4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e4d6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800e4da:	f04f 0c00 	mov.w	ip, #0
 800e4de:	edd4 6a00 	vldr	s13, [r4]
 800e4e2:	edd7 1a00 	vldr	s3, [r7]
 800e4e6:	ed16 aa01 	vldr	s20, [r6, #-4]
 800e4ea:	edd5 5a00 	vldr	s11, [r5]
 800e4ee:	ed52 9a01 	vldr	s19, [r2, #-4]
 800e4f2:	ed90 6a00 	vldr	s12, [r0]
 800e4f6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800e4fa:	ed93 3a00 	vldr	s6, [r3]
 800e4fe:	ee39 0a86 	vadd.f32	s0, s19, s12
 800e502:	ee33 2a21 	vadd.f32	s4, s6, s3
 800e506:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800e50a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800e50e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800e512:	ee34 4a80 	vadd.f32	s8, s9, s0
 800e516:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e51a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800e51e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800e522:	ed46 6a01 	vstr	s13, [r6, #-4]
 800e526:	ed85 4a00 	vstr	s8, [r5]
 800e52a:	edd1 6a00 	vldr	s13, [r1]
 800e52e:	ed94 9a01 	vldr	s18, [r4, #4]
 800e532:	edd3 2a01 	vldr	s5, [r3, #4]
 800e536:	edd7 8a01 	vldr	s17, [r7, #4]
 800e53a:	edd6 0a00 	vldr	s1, [r6]
 800e53e:	edd5 3a01 	vldr	s7, [r5, #4]
 800e542:	ed90 8a01 	vldr	s16, [r0, #4]
 800e546:	ed92 7a00 	vldr	s14, [r2]
 800e54a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e54e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800e552:	ee72 aae8 	vsub.f32	s21, s5, s17
 800e556:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800e55a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800e55e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e562:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800e566:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800e56a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800e56e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800e572:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800e576:	ee77 0a08 	vadd.f32	s1, s14, s16
 800e57a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800e57e:	ee37 7a48 	vsub.f32	s14, s14, s16
 800e582:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800e586:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800e58a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800e58e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800e592:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800e596:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e59a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800e59e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800e5a2:	ee33 2a20 	vadd.f32	s4, s6, s1
 800e5a6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800e5aa:	ee33 3a60 	vsub.f32	s6, s6, s1
 800e5ae:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800e5b2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800e5b6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800e5ba:	ee37 7a41 	vsub.f32	s14, s14, s2
 800e5be:	ee73 1a84 	vadd.f32	s3, s7, s8
 800e5c2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800e5c6:	ee76 3a27 	vadd.f32	s7, s12, s15
 800e5ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e5ce:	ee32 8a00 	vadd.f32	s16, s4, s0
 800e5d2:	ee33 1a45 	vsub.f32	s2, s6, s10
 800e5d6:	ee32 2a40 	vsub.f32	s4, s4, s0
 800e5da:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e5de:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800e5e2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800e5e6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800e5ea:	ee34 6a67 	vsub.f32	s12, s8, s15
 800e5ee:	ee75 4a87 	vadd.f32	s9, s11, s14
 800e5f2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800e5f6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800e5fa:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e5fe:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800e602:	44dc      	add	ip, fp
 800e604:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800e608:	45e1      	cmp	r9, ip
 800e60a:	ed86 8a00 	vstr	s16, [r6]
 800e60e:	ed85 2a01 	vstr	s4, [r5, #4]
 800e612:	4456      	add	r6, sl
 800e614:	ed02 0a01 	vstr	s0, [r2, #-4]
 800e618:	4455      	add	r5, sl
 800e61a:	edc0 6a00 	vstr	s13, [r0]
 800e61e:	ed82 1a00 	vstr	s2, [r2]
 800e622:	ed80 5a01 	vstr	s10, [r0, #4]
 800e626:	4452      	add	r2, sl
 800e628:	ed01 3a01 	vstr	s6, [r1, #-4]
 800e62c:	4450      	add	r0, sl
 800e62e:	edc7 2a00 	vstr	s5, [r7]
 800e632:	edc4 4a00 	vstr	s9, [r4]
 800e636:	ed83 7a00 	vstr	s14, [r3]
 800e63a:	edc1 5a00 	vstr	s11, [r1]
 800e63e:	edc7 3a01 	vstr	s7, [r7, #4]
 800e642:	4451      	add	r1, sl
 800e644:	ed84 6a01 	vstr	s12, [r4, #4]
 800e648:	4457      	add	r7, sl
 800e64a:	edc3 7a01 	vstr	s15, [r3, #4]
 800e64e:	4454      	add	r4, sl
 800e650:	4453      	add	r3, sl
 800e652:	f63f af44 	bhi.w	800e4de <arm_radix8_butterfly_f32+0x86>
 800e656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e658:	2b07      	cmp	r3, #7
 800e65a:	f240 81b7 	bls.w	800e9cc <arm_radix8_butterfly_f32+0x574>
 800e65e:	9b06      	ldr	r3, [sp, #24]
 800e660:	9903      	ldr	r1, [sp, #12]
 800e662:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e664:	9e05      	ldr	r6, [sp, #20]
 800e666:	9a04      	ldr	r2, [sp, #16]
 800e668:	f103 0c08 	add.w	ip, r3, #8
 800e66c:	9b02      	ldr	r3, [sp, #8]
 800e66e:	3108      	adds	r1, #8
 800e670:	f108 0808 	add.w	r8, r8, #8
 800e674:	1841      	adds	r1, r0, r1
 800e676:	3608      	adds	r6, #8
 800e678:	330c      	adds	r3, #12
 800e67a:	4604      	mov	r4, r0
 800e67c:	4444      	add	r4, r8
 800e67e:	18c3      	adds	r3, r0, r3
 800e680:	9109      	str	r1, [sp, #36]	; 0x24
 800e682:	1981      	adds	r1, r0, r6
 800e684:	f10e 0e08 	add.w	lr, lr, #8
 800e688:	3208      	adds	r2, #8
 800e68a:	940b      	str	r4, [sp, #44]	; 0x2c
 800e68c:	9107      	str	r1, [sp, #28]
 800e68e:	4604      	mov	r4, r0
 800e690:	4601      	mov	r1, r0
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	f100 030c 	add.w	r3, r0, #12
 800e698:	4474      	add	r4, lr
 800e69a:	f04f 0801 	mov.w	r8, #1
 800e69e:	1882      	adds	r2, r0, r2
 800e6a0:	4461      	add	r1, ip
 800e6a2:	9305      	str	r3, [sp, #20]
 800e6a4:	464b      	mov	r3, r9
 800e6a6:	940a      	str	r4, [sp, #40]	; 0x28
 800e6a8:	46c1      	mov	r9, r8
 800e6aa:	9208      	str	r2, [sp, #32]
 800e6ac:	46d8      	mov	r8, fp
 800e6ae:	9106      	str	r1, [sp, #24]
 800e6b0:	f04f 0e00 	mov.w	lr, #0
 800e6b4:	469b      	mov	fp, r3
 800e6b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6ba:	449e      	add	lr, r3
 800e6bc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800e6c0:	441a      	add	r2, r3
 800e6c2:	920e      	str	r2, [sp, #56]	; 0x38
 800e6c4:	441a      	add	r2, r3
 800e6c6:	18d4      	adds	r4, r2, r3
 800e6c8:	18e5      	adds	r5, r4, r3
 800e6ca:	18ee      	adds	r6, r5, r3
 800e6cc:	18f7      	adds	r7, r6, r3
 800e6ce:	eb07 0c03 	add.w	ip, r7, r3
 800e6d2:	920d      	str	r2, [sp, #52]	; 0x34
 800e6d4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800e6d8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800e6dc:	910c      	str	r1, [sp, #48]	; 0x30
 800e6de:	4419      	add	r1, r3
 800e6e0:	9103      	str	r1, [sp, #12]
 800e6e2:	4419      	add	r1, r3
 800e6e4:	18ca      	adds	r2, r1, r3
 800e6e6:	9202      	str	r2, [sp, #8]
 800e6e8:	441a      	add	r2, r3
 800e6ea:	18d0      	adds	r0, r2, r3
 800e6ec:	ed92 ea01 	vldr	s28, [r2, #4]
 800e6f0:	9a02      	ldr	r2, [sp, #8]
 800e6f2:	edd4 7a00 	vldr	s15, [r4]
 800e6f6:	edd2 da01 	vldr	s27, [r2, #4]
 800e6fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6fc:	ed91 da01 	vldr	s26, [r1, #4]
 800e700:	ed92 ca01 	vldr	s24, [r2, #4]
 800e704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e706:	9903      	ldr	r1, [sp, #12]
 800e708:	edcd 7a03 	vstr	s15, [sp, #12]
 800e70c:	edd2 7a00 	vldr	s15, [r2]
 800e710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e712:	edcd 7a02 	vstr	s15, [sp, #8]
 800e716:	edd2 7a00 	vldr	s15, [r2]
 800e71a:	edd0 ea01 	vldr	s29, [r0, #4]
 800e71e:	edd1 ca01 	vldr	s25, [r1, #4]
 800e722:	eddc ba00 	vldr	s23, [ip]
 800e726:	edd7 aa00 	vldr	s21, [r7]
 800e72a:	ed96 aa00 	vldr	s20, [r6]
 800e72e:	edd5 9a00 	vldr	s19, [r5]
 800e732:	edcd 7a01 	vstr	s15, [sp, #4]
 800e736:	4403      	add	r3, r0
 800e738:	ed93 fa01 	vldr	s30, [r3, #4]
 800e73c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800e740:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800e744:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e748:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e74c:	46cc      	mov	ip, r9
 800e74e:	e001      	b.n	800e754 <arm_radix8_butterfly_f32+0x2fc>
 800e750:	3f3504f3 	.word	0x3f3504f3
 800e754:	ed91 6a00 	vldr	s12, [r1]
 800e758:	ed93 5a00 	vldr	s10, [r3]
 800e75c:	edd0 fa00 	vldr	s31, [r0]
 800e760:	edd4 7a00 	vldr	s15, [r4]
 800e764:	ed95 7a00 	vldr	s14, [r5]
 800e768:	ed56 3a01 	vldr	s7, [r6, #-4]
 800e76c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800e770:	ed92 2a00 	vldr	s4, [r2]
 800e774:	ed96 0a00 	vldr	s0, [r6]
 800e778:	ee33 8a85 	vadd.f32	s16, s7, s10
 800e77c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800e780:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800e784:	ee77 4a87 	vadd.f32	s9, s15, s14
 800e788:	ee78 1a04 	vadd.f32	s3, s16, s8
 800e78c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800e790:	ee32 2a46 	vsub.f32	s4, s4, s12
 800e794:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800e798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e79c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800e7a0:	edd4 8a01 	vldr	s17, [r4, #4]
 800e7a4:	ed92 9a01 	vldr	s18, [r2, #4]
 800e7a8:	edd7 0a00 	vldr	s1, [r7]
 800e7ac:	edd1 2a01 	vldr	s5, [r1, #4]
 800e7b0:	ed95 7a01 	vldr	s14, [r5, #4]
 800e7b4:	ed93 6a01 	vldr	s12, [r3, #4]
 800e7b8:	edd0 5a01 	vldr	s11, [r0, #4]
 800e7bc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800e7c0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800e7c4:	ee39 5a62 	vsub.f32	s10, s18, s5
 800e7c8:	ee78 fac7 	vsub.f32	s31, s17, s14
 800e7cc:	ee38 4a44 	vsub.f32	s8, s16, s8
 800e7d0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800e7d4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800e7d8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800e7dc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800e7e0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800e7e4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800e7e8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800e7ec:	ee71 4a64 	vsub.f32	s9, s2, s9
 800e7f0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800e7f4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800e7f8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800e7fc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800e800:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800e804:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800e808:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800e80c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800e810:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800e814:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800e818:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800e81c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800e820:	ee30 6a46 	vsub.f32	s12, s0, s12
 800e824:	ee74 0a22 	vadd.f32	s1, s8, s5
 800e828:	ee36 0a28 	vadd.f32	s0, s12, s17
 800e82c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e830:	ee36 6a68 	vsub.f32	s12, s12, s17
 800e834:	ee32 4a64 	vsub.f32	s8, s4, s9
 800e838:	ee73 8a09 	vadd.f32	s17, s6, s18
 800e83c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800e840:	ee33 9a49 	vsub.f32	s18, s6, s18
 800e844:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800e848:	ee35 3a85 	vadd.f32	s6, s11, s10
 800e84c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800e850:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800e854:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800e858:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800e85c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800e860:	ee35 8a03 	vadd.f32	s16, s10, s6
 800e864:	ee38 0a80 	vadd.f32	s0, s17, s0
 800e868:	ee73 3a82 	vadd.f32	s7, s7, s4
 800e86c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800e870:	ed9d 2a01 	vldr	s4, [sp, #4]
 800e874:	eddd 1a02 	vldr	s3, [sp, #8]
 800e878:	ee35 5a43 	vsub.f32	s10, s10, s6
 800e87c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800e880:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800e884:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800e888:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e88c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800e890:	ee76 5a49 	vsub.f32	s11, s12, s18
 800e894:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800e898:	ee39 6a06 	vadd.f32	s12, s18, s12
 800e89c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800e8a0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800e8a4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800e8a8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800e8ac:	ee22 2a08 	vmul.f32	s4, s4, s16
 800e8b0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800e8b4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800e8b8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800e8bc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800e8c0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800e8c4:	ee74 0a60 	vsub.f32	s1, s8, s1
 800e8c8:	ee37 7a48 	vsub.f32	s14, s14, s16
 800e8cc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800e8d0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800e8d4:	ee72 1a21 	vadd.f32	s3, s4, s3
 800e8d8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800e8dc:	ee38 2a89 	vadd.f32	s4, s17, s18
 800e8e0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800e8e4:	ee38 8a04 	vadd.f32	s16, s16, s8
 800e8e8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800e8ec:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800e8f0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800e8f4:	eddd 5a03 	vldr	s11, [sp, #12]
 800e8f8:	edc6 fa00 	vstr	s31, [r6]
 800e8fc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800e900:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800e904:	ee30 0a45 	vsub.f32	s0, s0, s10
 800e908:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800e90c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800e910:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800e914:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800e918:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e91c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800e920:	ee74 4a89 	vadd.f32	s9, s9, s18
 800e924:	ee34 3a43 	vsub.f32	s6, s8, s6
 800e928:	ee78 8a85 	vadd.f32	s17, s17, s10
 800e92c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e930:	44c4      	add	ip, r8
 800e932:	45e3      	cmp	fp, ip
 800e934:	edc3 3a00 	vstr	s7, [r3]
 800e938:	edc3 6a01 	vstr	s13, [r3, #4]
 800e93c:	4456      	add	r6, sl
 800e93e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800e942:	edc7 0a00 	vstr	s1, [r7]
 800e946:	4453      	add	r3, sl
 800e948:	ed80 2a00 	vstr	s4, [r0]
 800e94c:	edc0 2a01 	vstr	s5, [r0, #4]
 800e950:	4457      	add	r7, sl
 800e952:	edc2 1a00 	vstr	s3, [r2]
 800e956:	ed82 7a01 	vstr	s14, [r2, #4]
 800e95a:	4450      	add	r0, sl
 800e95c:	ed85 8a00 	vstr	s16, [r5]
 800e960:	ed85 0a01 	vstr	s0, [r5, #4]
 800e964:	4452      	add	r2, sl
 800e966:	edc1 4a00 	vstr	s9, [r1]
 800e96a:	4455      	add	r5, sl
 800e96c:	ed81 3a01 	vstr	s6, [r1, #4]
 800e970:	edc4 8a00 	vstr	s17, [r4]
 800e974:	ed84 6a01 	vstr	s12, [r4, #4]
 800e978:	4451      	add	r1, sl
 800e97a:	4454      	add	r4, sl
 800e97c:	f63f aeea 	bhi.w	800e754 <arm_radix8_butterfly_f32+0x2fc>
 800e980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e982:	3308      	adds	r3, #8
 800e984:	930b      	str	r3, [sp, #44]	; 0x2c
 800e986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e988:	3308      	adds	r3, #8
 800e98a:	930a      	str	r3, [sp, #40]	; 0x28
 800e98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e98e:	3308      	adds	r3, #8
 800e990:	9309      	str	r3, [sp, #36]	; 0x24
 800e992:	9b08      	ldr	r3, [sp, #32]
 800e994:	3308      	adds	r3, #8
 800e996:	9308      	str	r3, [sp, #32]
 800e998:	9b07      	ldr	r3, [sp, #28]
 800e99a:	3308      	adds	r3, #8
 800e99c:	9307      	str	r3, [sp, #28]
 800e99e:	9b06      	ldr	r3, [sp, #24]
 800e9a0:	3308      	adds	r3, #8
 800e9a2:	9306      	str	r3, [sp, #24]
 800e9a4:	9b05      	ldr	r3, [sp, #20]
 800e9a6:	3308      	adds	r3, #8
 800e9a8:	9305      	str	r3, [sp, #20]
 800e9aa:	9b04      	ldr	r3, [sp, #16]
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	9304      	str	r3, [sp, #16]
 800e9b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9b2:	f109 0901 	add.w	r9, r9, #1
 800e9b6:	454b      	cmp	r3, r9
 800e9b8:	f47f ae7d 	bne.w	800e6b6 <arm_radix8_butterfly_f32+0x25e>
 800e9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	46d9      	mov	r9, fp
 800e9c4:	9310      	str	r3, [sp, #64]	; 0x40
 800e9c6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800e9ca:	e554      	b.n	800e476 <arm_radix8_butterfly_f32+0x1e>
 800e9cc:	b015      	add	sp, #84	; 0x54
 800e9ce:	ecbd 8b10 	vpop	{d8-d15}
 800e9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d6:	bf00      	nop

0800e9d8 <arm_rfft_init_f32>:
 800e9d8:	b570      	push	{r4, r5, r6, lr}
 800e9da:	4c22      	ldr	r4, [pc, #136]	; (800ea64 <arm_rfft_init_f32+0x8c>)
 800e9dc:	4e22      	ldr	r6, [pc, #136]	; (800ea68 <arm_rfft_init_f32+0x90>)
 800e9de:	6104      	str	r4, [r0, #16]
 800e9e0:	b294      	uxth	r4, r2
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	460d      	mov	r5, r1
 800e9e6:	60c6      	str	r6, [r0, #12]
 800e9e8:	f3c2 014e 	ubfx	r1, r2, #1, #15
 800e9ec:	9e04      	ldr	r6, [sp, #16]
 800e9ee:	7183      	strb	r3, [r0, #6]
 800e9f0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800e9f4:	71c6      	strb	r6, [r0, #7]
 800e9f6:	6004      	str	r4, [r0, #0]
 800e9f8:	8081      	strh	r1, [r0, #4]
 800e9fa:	d02f      	beq.n	800ea5c <arm_rfft_init_f32+0x84>
 800e9fc:	d910      	bls.n	800ea20 <arm_rfft_init_f32+0x48>
 800e9fe:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800ea02:	d023      	beq.n	800ea4c <arm_rfft_init_f32+0x74>
 800ea04:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800ea08:	d114      	bne.n	800ea34 <arm_rfft_init_f32+0x5c>
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	6082      	str	r2, [r0, #8]
 800ea0e:	2400      	movs	r4, #0
 800ea10:	6145      	str	r5, [r0, #20]
 800ea12:	4628      	mov	r0, r5
 800ea14:	b9a3      	cbnz	r3, 800ea40 <arm_rfft_init_f32+0x68>
 800ea16:	461a      	mov	r2, r3
 800ea18:	f000 f828 	bl	800ea6c <arm_cfft_radix4_init_f32>
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	bd70      	pop	{r4, r5, r6, pc}
 800ea20:	2c80      	cmp	r4, #128	; 0x80
 800ea22:	d107      	bne.n	800ea34 <arm_rfft_init_f32+0x5c>
 800ea24:	2240      	movs	r2, #64	; 0x40
 800ea26:	6082      	str	r2, [r0, #8]
 800ea28:	6145      	str	r5, [r0, #20]
 800ea2a:	2400      	movs	r4, #0
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d0f1      	beq.n	800ea16 <arm_rfft_init_f32+0x3e>
 800ea32:	e005      	b.n	800ea40 <arm_rfft_init_f32+0x68>
 800ea34:	6145      	str	r5, [r0, #20]
 800ea36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d0ea      	beq.n	800ea16 <arm_rfft_init_f32+0x3e>
 800ea40:	2300      	movs	r3, #0
 800ea42:	2201      	movs	r2, #1
 800ea44:	f000 f812 	bl	800ea6c <arm_cfft_radix4_init_f32>
 800ea48:	4620      	mov	r0, r4
 800ea4a:	bd70      	pop	{r4, r5, r6, pc}
 800ea4c:	2204      	movs	r2, #4
 800ea4e:	6082      	str	r2, [r0, #8]
 800ea50:	6145      	str	r5, [r0, #20]
 800ea52:	2400      	movs	r4, #0
 800ea54:	4628      	mov	r0, r5
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d0dd      	beq.n	800ea16 <arm_rfft_init_f32+0x3e>
 800ea5a:	e7f1      	b.n	800ea40 <arm_rfft_init_f32+0x68>
 800ea5c:	2210      	movs	r2, #16
 800ea5e:	6082      	str	r2, [r0, #8]
 800ea60:	2400      	movs	r4, #0
 800ea62:	e7d5      	b.n	800ea10 <arm_rfft_init_f32+0x38>
 800ea64:	08048614 	.word	0x08048614
 800ea68:	08040614 	.word	0x08040614

0800ea6c <arm_cfft_radix4_init_f32>:
 800ea6c:	b410      	push	{r4}
 800ea6e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ea72:	4c27      	ldr	r4, [pc, #156]	; (800eb10 <arm_cfft_radix4_init_f32+0xa4>)
 800ea74:	7082      	strb	r2, [r0, #2]
 800ea76:	70c3      	strb	r3, [r0, #3]
 800ea78:	8001      	strh	r1, [r0, #0]
 800ea7a:	6044      	str	r4, [r0, #4]
 800ea7c:	d027      	beq.n	800eace <arm_cfft_radix4_init_f32+0x62>
 800ea7e:	d911      	bls.n	800eaa4 <arm_cfft_radix4_init_f32+0x38>
 800ea80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ea84:	d02f      	beq.n	800eae6 <arm_cfft_radix4_init_f32+0x7a>
 800ea86:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800ea8a:	d11b      	bne.n	800eac4 <arm_cfft_radix4_init_f32+0x58>
 800ea8c:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800ea90:	4b20      	ldr	r3, [pc, #128]	; (800eb14 <arm_cfft_radix4_init_f32+0xa8>)
 800ea92:	6102      	str	r2, [r0, #16]
 800ea94:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800ea98:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaa2:	4770      	bx	lr
 800eaa4:	2910      	cmp	r1, #16
 800eaa6:	d028      	beq.n	800eafa <arm_cfft_radix4_init_f32+0x8e>
 800eaa8:	2940      	cmp	r1, #64	; 0x40
 800eaaa:	d10b      	bne.n	800eac4 <arm_cfft_radix4_init_f32+0x58>
 800eaac:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 800eab0:	4b19      	ldr	r3, [pc, #100]	; (800eb18 <arm_cfft_radix4_init_f32+0xac>)
 800eab2:	6102      	str	r2, [r0, #16]
 800eab4:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 800eab8:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800eabc:	2000      	movs	r0, #0
 800eabe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eac2:	4770      	bx	lr
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eacc:	4770      	bx	lr
 800eace:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800ead2:	4b12      	ldr	r3, [pc, #72]	; (800eb1c <arm_cfft_radix4_init_f32+0xb0>)
 800ead4:	6102      	str	r2, [r0, #16]
 800ead6:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 800eada:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800eade:	2000      	movs	r0, #0
 800eae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800eaea:	4b0d      	ldr	r3, [pc, #52]	; (800eb20 <arm_cfft_radix4_init_f32+0xb4>)
 800eaec:	6102      	str	r2, [r0, #16]
 800eaee:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800eaf2:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	e7d1      	b.n	800ea9e <arm_cfft_radix4_init_f32+0x32>
 800eafa:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 800eafe:	4b09      	ldr	r3, [pc, #36]	; (800eb24 <arm_cfft_radix4_init_f32+0xb8>)
 800eb00:	6102      	str	r2, [r0, #16]
 800eb02:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 800eb06:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e7c7      	b.n	800ea9e <arm_cfft_radix4_init_f32+0x32>
 800eb0e:	bf00      	nop
 800eb10:	08057b98 	.word	0x08057b98
 800eb14:	08035414 	.word	0x08035414
 800eb18:	08035492 	.word	0x08035492
 800eb1c:	08035432 	.word	0x08035432
 800eb20:	0803541a 	.word	0x0803541a
 800eb24:	08035612 	.word	0x08035612

0800eb28 <ai_buffer_get_size>:
 800eb28:	b358      	cbz	r0, 800eb82 <ai_buffer_get_size+0x5a>
 800eb2a:	b430      	push	{r4, r5}
 800eb2c:	6803      	ldr	r3, [r0, #0]
 800eb2e:	4d15      	ldr	r5, [pc, #84]	; (800eb84 <ai_buffer_get_size+0x5c>)
 800eb30:	6984      	ldr	r4, [r0, #24]
 800eb32:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800eb36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb3a:	42ab      	cmp	r3, r5
 800eb3c:	6862      	ldr	r2, [r4, #4]
 800eb3e:	d01a      	beq.n	800eb76 <ai_buffer_get_size+0x4e>
 800eb40:	7d03      	ldrb	r3, [r0, #20]
 800eb42:	6941      	ldr	r1, [r0, #20]
 800eb44:	f1a3 0301 	sub.w	r3, r3, #1
 800eb48:	fab3 f383 	clz	r3, r3
 800eb4c:	095b      	lsrs	r3, r3, #5
 800eb4e:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800eb52:	428b      	cmp	r3, r1
 800eb54:	da0b      	bge.n	800eb6e <ai_buffer_get_size+0x46>
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d102      	bne.n	800eb60 <ai_buffer_get_size+0x38>
 800eb5a:	2902      	cmp	r1, #2
 800eb5c:	d007      	beq.n	800eb6e <ai_buffer_get_size+0x46>
 800eb5e:	2302      	movs	r3, #2
 800eb60:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800eb64:	3301      	adds	r3, #1
 800eb66:	428b      	cmp	r3, r1
 800eb68:	fb00 f202 	mul.w	r2, r0, r2
 800eb6c:	d1f3      	bne.n	800eb56 <ai_buffer_get_size+0x2e>
 800eb6e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800eb72:	bc30      	pop	{r4, r5}
 800eb74:	4770      	bx	lr
 800eb76:	2900      	cmp	r1, #0
 800eb78:	d0e2      	beq.n	800eb40 <ai_buffer_get_size+0x18>
 800eb7a:	321f      	adds	r2, #31
 800eb7c:	f022 021f 	bic.w	r2, r2, #31
 800eb80:	e7de      	b.n	800eb40 <ai_buffer_get_size+0x18>
 800eb82:	4770      	bx	lr
 800eb84:	000400c0 	.word	0x000400c0

0800eb88 <ai_buffer_array_sane>:
 800eb88:	b138      	cbz	r0, 800eb9a <ai_buffer_array_sane+0x12>
 800eb8a:	6843      	ldr	r3, [r0, #4]
 800eb8c:	b123      	cbz	r3, 800eb98 <ai_buffer_array_sane+0x10>
 800eb8e:	8840      	ldrh	r0, [r0, #2]
 800eb90:	3000      	adds	r0, #0
 800eb92:	bf18      	it	ne
 800eb94:	2001      	movne	r0, #1
 800eb96:	4770      	bx	lr
 800eb98:	4618      	mov	r0, r3
 800eb9a:	4770      	bx	lr

0800eb9c <ai_buffer_array_item_set_address>:
 800eb9c:	b120      	cbz	r0, 800eba8 <ai_buffer_array_item_set_address+0xc>
 800eb9e:	6843      	ldr	r3, [r0, #4]
 800eba0:	b11b      	cbz	r3, 800ebaa <ai_buffer_array_item_set_address+0xe>
 800eba2:	8840      	ldrh	r0, [r0, #2]
 800eba4:	b918      	cbnz	r0, 800ebae <ai_buffer_array_item_set_address+0x12>
 800eba6:	4770      	bx	lr
 800eba8:	4770      	bx	lr
 800ebaa:	4618      	mov	r0, r3
 800ebac:	4770      	bx	lr
 800ebae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ebb2:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 800ebb6:	d0f7      	beq.n	800eba8 <ai_buffer_array_item_set_address+0xc>
 800ebb8:	6042      	str	r2, [r0, #4]
 800ebba:	2001      	movs	r0, #1
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop

0800ebc0 <_ai_platform_acquire_crc>:
 800ebc0:	2001      	movs	r0, #1
 800ebc2:	4770      	bx	lr

0800ebc4 <_ai_platform_release_crc>:
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop

0800ebc8 <ai_platform_get_weights_map>:
 800ebc8:	b192      	cbz	r2, 800ebf0 <ai_platform_get_weights_map+0x28>
 800ebca:	b188      	cbz	r0, 800ebf0 <ai_platform_get_weights_map+0x28>
 800ebcc:	b181      	cbz	r1, 800ebf0 <ai_platform_get_weights_map+0x28>
 800ebce:	b570      	push	{r4, r5, r6, lr}
 800ebd0:	4b24      	ldr	r3, [pc, #144]	; (800ec64 <ai_platform_get_weights_map+0x9c>)
 800ebd2:	6814      	ldr	r4, [r2, #0]
 800ebd4:	429c      	cmp	r4, r3
 800ebd6:	d00d      	beq.n	800ebf4 <ai_platform_get_weights_map+0x2c>
 800ebd8:	6854      	ldr	r4, [r2, #4]
 800ebda:	b194      	cbz	r4, 800ec02 <ai_platform_get_weights_map+0x3a>
 800ebdc:	6825      	ldr	r5, [r4, #0]
 800ebde:	429d      	cmp	r5, r3
 800ebe0:	d027      	beq.n	800ec32 <ai_platform_get_weights_map+0x6a>
 800ebe2:	6004      	str	r4, [r0, #0]
 800ebe4:	f1a1 0001 	sub.w	r0, r1, #1
 800ebe8:	fab0 f080 	clz	r0, r0
 800ebec:	0940      	lsrs	r0, r0, #5
 800ebee:	bd70      	pop	{r4, r5, r6, pc}
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	4770      	bx	lr
 800ebf4:	4605      	mov	r5, r0
 800ebf6:	1d10      	adds	r0, r2, #4
 800ebf8:	4616      	mov	r6, r2
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	f7ff ffc4 	bl	800eb88 <ai_buffer_array_sane>
 800ec00:	b908      	cbnz	r0, 800ec06 <ai_platform_get_weights_map+0x3e>
 800ec02:	2000      	movs	r0, #0
 800ec04:	bd70      	pop	{r4, r5, r6, pc}
 800ec06:	88f3      	ldrh	r3, [r6, #6]
 800ec08:	429c      	cmp	r4, r3
 800ec0a:	d1fa      	bne.n	800ec02 <ai_platform_get_weights_map+0x3a>
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	1f2b      	subs	r3, r5, #4
 800ec10:	4608      	mov	r0, r1
 800ec12:	68b2      	ldr	r2, [r6, #8]
 800ec14:	440a      	add	r2, r1
 800ec16:	311c      	adds	r1, #28
 800ec18:	6852      	ldr	r2, [r2, #4]
 800ec1a:	b12a      	cbz	r2, 800ec28 <ai_platform_get_weights_map+0x60>
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	4284      	cmp	r4, r0
 800ec20:	f843 2f04 	str.w	r2, [r3, #4]!
 800ec24:	d1f5      	bne.n	800ec12 <ai_platform_get_weights_map+0x4a>
 800ec26:	4620      	mov	r0, r4
 800ec28:	1a20      	subs	r0, r4, r0
 800ec2a:	fab0 f080 	clz	r0, r0
 800ec2e:	0940      	lsrs	r0, r0, #5
 800ec30:	bd70      	pop	{r4, r5, r6, pc}
 800ec32:	6863      	ldr	r3, [r4, #4]
 800ec34:	42ab      	cmp	r3, r5
 800ec36:	f104 0404 	add.w	r4, r4, #4
 800ec3a:	d0e2      	beq.n	800ec02 <ai_platform_get_weights_map+0x3a>
 800ec3c:	3804      	subs	r0, #4
 800ec3e:	4626      	mov	r6, r4
 800ec40:	2200      	movs	r2, #0
 800ec42:	e003      	b.n	800ec4c <ai_platform_get_weights_map+0x84>
 800ec44:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800ec48:	42ab      	cmp	r3, r5
 800ec4a:	d0da      	beq.n	800ec02 <ai_platform_get_weights_map+0x3a>
 800ec4c:	3201      	adds	r2, #1
 800ec4e:	4291      	cmp	r1, r2
 800ec50:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec54:	d1f6      	bne.n	800ec44 <ai_platform_get_weights_map+0x7c>
 800ec56:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800ec5a:	4b02      	ldr	r3, [pc, #8]	; (800ec64 <ai_platform_get_weights_map+0x9c>)
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d1d0      	bne.n	800ec02 <ai_platform_get_weights_map+0x3a>
 800ec60:	2001      	movs	r0, #1
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	a1facade 	.word	0xa1facade

0800ec68 <ai_platform_get_activations_map>:
 800ec68:	b192      	cbz	r2, 800ec90 <ai_platform_get_activations_map+0x28>
 800ec6a:	b188      	cbz	r0, 800ec90 <ai_platform_get_activations_map+0x28>
 800ec6c:	b181      	cbz	r1, 800ec90 <ai_platform_get_activations_map+0x28>
 800ec6e:	b570      	push	{r4, r5, r6, lr}
 800ec70:	4b25      	ldr	r3, [pc, #148]	; (800ed08 <ai_platform_get_activations_map+0xa0>)
 800ec72:	6814      	ldr	r4, [r2, #0]
 800ec74:	429c      	cmp	r4, r3
 800ec76:	d00d      	beq.n	800ec94 <ai_platform_get_activations_map+0x2c>
 800ec78:	6a14      	ldr	r4, [r2, #32]
 800ec7a:	b19c      	cbz	r4, 800eca4 <ai_platform_get_activations_map+0x3c>
 800ec7c:	6825      	ldr	r5, [r4, #0]
 800ec7e:	429d      	cmp	r5, r3
 800ec80:	d028      	beq.n	800ecd4 <ai_platform_get_activations_map+0x6c>
 800ec82:	6004      	str	r4, [r0, #0]
 800ec84:	f1a1 0001 	sub.w	r0, r1, #1
 800ec88:	fab0 f080 	clz	r0, r0
 800ec8c:	0940      	lsrs	r0, r0, #5
 800ec8e:	bd70      	pop	{r4, r5, r6, pc}
 800ec90:	2000      	movs	r0, #0
 800ec92:	4770      	bx	lr
 800ec94:	4605      	mov	r5, r0
 800ec96:	f102 000c 	add.w	r0, r2, #12
 800ec9a:	4616      	mov	r6, r2
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	f7ff ff73 	bl	800eb88 <ai_buffer_array_sane>
 800eca2:	b908      	cbnz	r0, 800eca8 <ai_platform_get_activations_map+0x40>
 800eca4:	2000      	movs	r0, #0
 800eca6:	bd70      	pop	{r4, r5, r6, pc}
 800eca8:	89f3      	ldrh	r3, [r6, #14]
 800ecaa:	429c      	cmp	r4, r3
 800ecac:	d1fa      	bne.n	800eca4 <ai_platform_get_activations_map+0x3c>
 800ecae:	2100      	movs	r1, #0
 800ecb0:	1f2b      	subs	r3, r5, #4
 800ecb2:	4608      	mov	r0, r1
 800ecb4:	6932      	ldr	r2, [r6, #16]
 800ecb6:	440a      	add	r2, r1
 800ecb8:	311c      	adds	r1, #28
 800ecba:	6852      	ldr	r2, [r2, #4]
 800ecbc:	b12a      	cbz	r2, 800ecca <ai_platform_get_activations_map+0x62>
 800ecbe:	3001      	adds	r0, #1
 800ecc0:	4284      	cmp	r4, r0
 800ecc2:	f843 2f04 	str.w	r2, [r3, #4]!
 800ecc6:	d1f5      	bne.n	800ecb4 <ai_platform_get_activations_map+0x4c>
 800ecc8:	4620      	mov	r0, r4
 800ecca:	1a20      	subs	r0, r4, r0
 800eccc:	fab0 f080 	clz	r0, r0
 800ecd0:	0940      	lsrs	r0, r0, #5
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}
 800ecd4:	6863      	ldr	r3, [r4, #4]
 800ecd6:	42ab      	cmp	r3, r5
 800ecd8:	f104 0404 	add.w	r4, r4, #4
 800ecdc:	d0e2      	beq.n	800eca4 <ai_platform_get_activations_map+0x3c>
 800ecde:	3804      	subs	r0, #4
 800ece0:	4626      	mov	r6, r4
 800ece2:	2200      	movs	r2, #0
 800ece4:	e003      	b.n	800ecee <ai_platform_get_activations_map+0x86>
 800ece6:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800ecea:	42ab      	cmp	r3, r5
 800ecec:	d0da      	beq.n	800eca4 <ai_platform_get_activations_map+0x3c>
 800ecee:	3201      	adds	r2, #1
 800ecf0:	4291      	cmp	r1, r2
 800ecf2:	f840 3f04 	str.w	r3, [r0, #4]!
 800ecf6:	d1f6      	bne.n	800ece6 <ai_platform_get_activations_map+0x7e>
 800ecf8:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800ecfc:	4b02      	ldr	r3, [pc, #8]	; (800ed08 <ai_platform_get_activations_map+0xa0>)
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d1d0      	bne.n	800eca4 <ai_platform_get_activations_map+0x3c>
 800ed02:	2001      	movs	r0, #1
 800ed04:	bd70      	pop	{r4, r5, r6, pc}
 800ed06:	bf00      	nop
 800ed08:	a1facade 	.word	0xa1facade

0800ed0c <ai_platform_bind_network_params>:
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	b190      	cbz	r0, 800ed36 <ai_platform_bind_network_params+0x2a>
 800ed10:	b1a1      	cbz	r1, 800ed3c <ai_platform_bind_network_params+0x30>
 800ed12:	b18a      	cbz	r2, 800ed38 <ai_platform_bind_network_params+0x2c>
 800ed14:	b410      	push	{r4}
 800ed16:	4604      	mov	r4, r0
 800ed18:	4809      	ldr	r0, [pc, #36]	; (800ed40 <ai_platform_bind_network_params+0x34>)
 800ed1a:	f844 0b04 	str.w	r0, [r4], #4
 800ed1e:	c903      	ldmia	r1, {r0, r1}
 800ed20:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed24:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed28:	330c      	adds	r3, #12
 800ed2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed2e:	2001      	movs	r0, #1
 800ed30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed34:	4770      	bx	lr
 800ed36:	4770      	bx	lr
 800ed38:	4610      	mov	r0, r2
 800ed3a:	4770      	bx	lr
 800ed3c:	4608      	mov	r0, r1
 800ed3e:	4770      	bx	lr
 800ed40:	a1facade 	.word	0xa1facade

0800ed44 <ai_platform_network_get_error>:
 800ed44:	b510      	push	{r4, lr}
 800ed46:	b120      	cbz	r0, 800ed52 <ai_platform_network_get_error+0xe>
 800ed48:	4b32      	ldr	r3, [pc, #200]	; (800ee14 <ai_platform_network_get_error+0xd0>)
 800ed4a:	6802      	ldr	r2, [r0, #0]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	4604      	mov	r4, r0
 800ed50:	d02e      	beq.n	800edb0 <ai_platform_network_get_error+0x6c>
 800ed52:	4a31      	ldr	r2, [pc, #196]	; (800ee18 <ai_platform_network_get_error+0xd4>)
 800ed54:	6813      	ldr	r3, [r2, #0]
 800ed56:	f023 0301 	bic.w	r3, r3, #1
 800ed5a:	6013      	str	r3, [r2, #0]
 800ed5c:	f7ff ff30 	bl	800ebc0 <_ai_platform_acquire_crc>
 800ed60:	4b2e      	ldr	r3, [pc, #184]	; (800ee1c <ai_platform_network_get_error+0xd8>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed6c:	d00d      	beq.n	800ed8a <ai_platform_network_get_error+0x46>
 800ed6e:	4b2c      	ldr	r3, [pc, #176]	; (800ee20 <ai_platform_network_get_error+0xdc>)
 800ed70:	2201      	movs	r2, #1
 800ed72:	601a      	str	r2, [r3, #0]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	2a00      	cmp	r2, #0
 800ed78:	d1fc      	bne.n	800ed74 <ai_platform_network_get_error+0x30>
 800ed7a:	4b2a      	ldr	r3, [pc, #168]	; (800ee24 <ai_platform_network_get_error+0xe0>)
 800ed7c:	4a2a      	ldr	r2, [pc, #168]	; (800ee28 <ai_platform_network_get_error+0xe4>)
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	4b2a      	ldr	r3, [pc, #168]	; (800ee2c <ai_platform_network_get_error+0xe8>)
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d00d      	beq.n	800eda4 <ai_platform_network_get_error+0x60>
 800ed88:	e7fe      	b.n	800ed88 <ai_platform_network_get_error+0x44>
 800ed8a:	4b29      	ldr	r3, [pc, #164]	; (800ee30 <ai_platform_network_get_error+0xec>)
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	2a00      	cmp	r2, #0
 800ed94:	d1fc      	bne.n	800ed90 <ai_platform_network_get_error+0x4c>
 800ed96:	4b27      	ldr	r3, [pc, #156]	; (800ee34 <ai_platform_network_get_error+0xf0>)
 800ed98:	4a23      	ldr	r2, [pc, #140]	; (800ee28 <ai_platform_network_get_error+0xe4>)
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	4b23      	ldr	r3, [pc, #140]	; (800ee2c <ai_platform_network_get_error+0xe8>)
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d104      	bne.n	800edae <ai_platform_network_get_error+0x6a>
 800eda4:	f7ff ff0e 	bl	800ebc4 <_ai_platform_release_crc>
 800eda8:	f241 0010 	movw	r0, #4112	; 0x1010
 800edac:	bd10      	pop	{r4, pc}
 800edae:	e7fe      	b.n	800edae <ai_platform_network_get_error+0x6a>
 800edb0:	4a19      	ldr	r2, [pc, #100]	; (800ee18 <ai_platform_network_get_error+0xd4>)
 800edb2:	6813      	ldr	r3, [r2, #0]
 800edb4:	f023 0301 	bic.w	r3, r3, #1
 800edb8:	6013      	str	r3, [r2, #0]
 800edba:	f7ff ff01 	bl	800ebc0 <_ai_platform_acquire_crc>
 800edbe:	4b17      	ldr	r3, [pc, #92]	; (800ee1c <ai_platform_network_get_error+0xd8>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800edc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edca:	d00d      	beq.n	800ede8 <ai_platform_network_get_error+0xa4>
 800edcc:	4b14      	ldr	r3, [pc, #80]	; (800ee20 <ai_platform_network_get_error+0xdc>)
 800edce:	2201      	movs	r2, #1
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	2a00      	cmp	r2, #0
 800edd6:	d1fc      	bne.n	800edd2 <ai_platform_network_get_error+0x8e>
 800edd8:	4b12      	ldr	r3, [pc, #72]	; (800ee24 <ai_platform_network_get_error+0xe0>)
 800edda:	4a13      	ldr	r2, [pc, #76]	; (800ee28 <ai_platform_network_get_error+0xe4>)
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	4b12      	ldr	r3, [pc, #72]	; (800ee2c <ai_platform_network_get_error+0xe8>)
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d00e      	beq.n	800ee04 <ai_platform_network_get_error+0xc0>
 800ede6:	e7fe      	b.n	800ede6 <ai_platform_network_get_error+0xa2>
 800ede8:	4b11      	ldr	r3, [pc, #68]	; (800ee30 <ai_platform_network_get_error+0xec>)
 800edea:	2201      	movs	r2, #1
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	2a00      	cmp	r2, #0
 800edf2:	d1fc      	bne.n	800edee <ai_platform_network_get_error+0xaa>
 800edf4:	4b0f      	ldr	r3, [pc, #60]	; (800ee34 <ai_platform_network_get_error+0xf0>)
 800edf6:	4a0c      	ldr	r2, [pc, #48]	; (800ee28 <ai_platform_network_get_error+0xe4>)
 800edf8:	601a      	str	r2, [r3, #0]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <ai_platform_network_get_error+0xe8>)
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d000      	beq.n	800ee04 <ai_platform_network_get_error+0xc0>
 800ee02:	e7fe      	b.n	800ee02 <ai_platform_network_get_error+0xbe>
 800ee04:	f7ff fede 	bl	800ebc4 <_ai_platform_release_crc>
 800ee08:	f104 0010 	add.w	r0, r4, #16
 800ee0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee10:	f000 bef4 	b.w	800fbfc <core_get_error>
 800ee14:	a1c00100 	.word	0xa1c00100
 800ee18:	e0002000 	.word	0xe0002000
 800ee1c:	e0042000 	.word	0xe0042000
 800ee20:	58024c08 	.word	0x58024c08
 800ee24:	58024c00 	.word	0x58024c00
 800ee28:	f407a5c2 	.word	0xf407a5c2
 800ee2c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ee30:	40023008 	.word	0x40023008
 800ee34:	40023000 	.word	0x40023000

0800ee38 <ai_platform_network_set_error>:
 800ee38:	b110      	cbz	r0, 800ee40 <ai_platform_network_set_error+0x8>
 800ee3a:	3010      	adds	r0, #16
 800ee3c:	f000 bee4 	b.w	800fc08 <core_set_error>
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop

0800ee44 <ai_platform_inputs_get>:
 800ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	b085      	sub	sp, #20
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	f000 80a1 	beq.w	800ef92 <ai_platform_inputs_get+0x14e>
 800ee50:	4b6d      	ldr	r3, [pc, #436]	; (800f008 <ai_platform_inputs_get+0x1c4>)
 800ee52:	6802      	ldr	r2, [r0, #0]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	4607      	mov	r7, r0
 800ee58:	f040 809b 	bne.w	800ef92 <ai_platform_inputs_get+0x14e>
 800ee5c:	4a6b      	ldr	r2, [pc, #428]	; (800f00c <ai_platform_inputs_get+0x1c8>)
 800ee5e:	6813      	ldr	r3, [r2, #0]
 800ee60:	f023 0301 	bic.w	r3, r3, #1
 800ee64:	6013      	str	r3, [r2, #0]
 800ee66:	468b      	mov	fp, r1
 800ee68:	f7ff feaa 	bl	800ebc0 <_ai_platform_acquire_crc>
 800ee6c:	4b68      	ldr	r3, [pc, #416]	; (800f010 <ai_platform_inputs_get+0x1cc>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ee74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee78:	d00d      	beq.n	800ee96 <ai_platform_inputs_get+0x52>
 800ee7a:	4b66      	ldr	r3, [pc, #408]	; (800f014 <ai_platform_inputs_get+0x1d0>)
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	601a      	str	r2, [r3, #0]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	2a00      	cmp	r2, #0
 800ee84:	d1fc      	bne.n	800ee80 <ai_platform_inputs_get+0x3c>
 800ee86:	4b64      	ldr	r3, [pc, #400]	; (800f018 <ai_platform_inputs_get+0x1d4>)
 800ee88:	4a64      	ldr	r2, [pc, #400]	; (800f01c <ai_platform_inputs_get+0x1d8>)
 800ee8a:	601a      	str	r2, [r3, #0]
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4b64      	ldr	r3, [pc, #400]	; (800f020 <ai_platform_inputs_get+0x1dc>)
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d00d      	beq.n	800eeb0 <ai_platform_inputs_get+0x6c>
 800ee94:	e7fe      	b.n	800ee94 <ai_platform_inputs_get+0x50>
 800ee96:	4b63      	ldr	r3, [pc, #396]	; (800f024 <ai_platform_inputs_get+0x1e0>)
 800ee98:	2201      	movs	r2, #1
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	2a00      	cmp	r2, #0
 800eea0:	d1fc      	bne.n	800ee9c <ai_platform_inputs_get+0x58>
 800eea2:	4b61      	ldr	r3, [pc, #388]	; (800f028 <ai_platform_inputs_get+0x1e4>)
 800eea4:	4a5d      	ldr	r2, [pc, #372]	; (800f01c <ai_platform_inputs_get+0x1d8>)
 800eea6:	601a      	str	r2, [r3, #0]
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	4b5d      	ldr	r3, [pc, #372]	; (800f020 <ai_platform_inputs_get+0x1dc>)
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d16f      	bne.n	800ef90 <ai_platform_inputs_get+0x14c>
 800eeb0:	f7ff fe88 	bl	800ebc4 <_ai_platform_release_crc>
 800eeb4:	f1bb 0f00 	cmp.w	fp, #0
 800eeb8:	d002      	beq.n	800eec0 <ai_platform_inputs_get+0x7c>
 800eeba:	2300      	movs	r3, #0
 800eebc:	f8ab 3000 	strh.w	r3, [fp]
 800eec0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	f000 8081 	beq.w	800efca <ai_platform_inputs_get+0x186>
 800eec8:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800eeca:	2e00      	cmp	r6, #0
 800eecc:	d07d      	beq.n	800efca <ai_platform_inputs_get+0x186>
 800eece:	8833      	ldrh	r3, [r6, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d07a      	beq.n	800efca <ai_platform_inputs_get+0x186>
 800eed4:	6873      	ldr	r3, [r6, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d077      	beq.n	800efca <ai_platform_inputs_get+0x186>
 800eeda:	681d      	ldr	r5, [r3, #0]
 800eedc:	2d00      	cmp	r5, #0
 800eede:	d074      	beq.n	800efca <ai_platform_inputs_get+0x186>
 800eee0:	f04f 0800 	mov.w	r8, #0
 800eee4:	f8cd b008 	str.w	fp, [sp, #8]
 800eee8:	46c1      	mov	r9, r8
 800eeea:	46bb      	mov	fp, r7
 800eeec:	68b0      	ldr	r0, [r6, #8]
 800eeee:	69aa      	ldr	r2, [r5, #24]
 800eef0:	68ab      	ldr	r3, [r5, #8]
 800eef2:	6844      	ldr	r4, [r0, #4]
 800eef4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800eef8:	6810      	ldr	r0, [r2, #0]
 800eefa:	68ef      	ldr	r7, [r5, #12]
 800eefc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800ef00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef04:	9301      	str	r3, [sp, #4]
 800ef06:	9203      	str	r2, [sp, #12]
 800ef08:	f001 fce6 	bl	80108d8 <ai_array_to_buffer_fmt>
 800ef0c:	9a03      	ldr	r2, [sp, #12]
 800ef0e:	4601      	mov	r1, r0
 800ef10:	69a8      	ldr	r0, [r5, #24]
 800ef12:	eb0a 0302 	add.w	r3, sl, r2
 800ef16:	4444      	add	r4, r8
 800ef18:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800ef1c:	b16b      	cbz	r3, 800ef3a <ai_platform_inputs_get+0xf6>
 800ef1e:	2000      	movs	r0, #0
 800ef20:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800ef24:	6828      	ldr	r0, [r5, #0]
 800ef26:	6058      	str	r0, [r3, #4]
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d058      	beq.n	800efde <ai_platform_inputs_get+0x19a>
 800ef2c:	8840      	ldrh	r0, [r0, #2]
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d055      	beq.n	800efde <ai_platform_inputs_get+0x19a>
 800ef32:	2001      	movs	r0, #1
 800ef34:	f84a 0002 	str.w	r0, [sl, r2]
 800ef38:	69a8      	ldr	r0, [r5, #24]
 800ef3a:	6842      	ldr	r2, [r0, #4]
 800ef3c:	6122      	str	r2, [r4, #16]
 800ef3e:	f04f 0001 	mov.w	r0, #1
 800ef42:	7520      	strb	r0, [r4, #20]
 800ef44:	9a01      	ldr	r2, [sp, #4]
 800ef46:	6960      	ldr	r0, [r4, #20]
 800ef48:	60a3      	str	r3, [r4, #8]
 800ef4a:	f362 201f 	bfi	r0, r2, #8, #24
 800ef4e:	e9c4 1e00 	strd	r1, lr, [r4]
 800ef52:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800ef56:	2300      	movs	r3, #0
 800ef58:	60e3      	str	r3, [r4, #12]
 800ef5a:	8830      	ldrh	r0, [r6, #0]
 800ef5c:	f109 0301 	add.w	r3, r9, #1
 800ef60:	4283      	cmp	r3, r0
 800ef62:	4699      	mov	r9, r3
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	d207      	bcs.n	800ef78 <ai_platform_inputs_get+0x134>
 800ef68:	6870      	ldr	r0, [r6, #4]
 800ef6a:	b128      	cbz	r0, 800ef78 <ai_platform_inputs_get+0x134>
 800ef6c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800ef70:	f108 081c 	add.w	r8, r8, #28
 800ef74:	2d00      	cmp	r5, #0
 800ef76:	d1b9      	bne.n	800eeec <ai_platform_inputs_get+0xa8>
 800ef78:	465f      	mov	r7, fp
 800ef7a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ef7e:	b322      	cbz	r2, 800efca <ai_platform_inputs_get+0x186>
 800ef80:	68b3      	ldr	r3, [r6, #8]
 800ef82:	6858      	ldr	r0, [r3, #4]
 800ef84:	f1bb 0f00 	cmp.w	fp, #0
 800ef88:	d026      	beq.n	800efd8 <ai_platform_inputs_get+0x194>
 800ef8a:	f8ab 2000 	strh.w	r2, [fp]
 800ef8e:	e023      	b.n	800efd8 <ai_platform_inputs_get+0x194>
 800ef90:	e7fe      	b.n	800ef90 <ai_platform_inputs_get+0x14c>
 800ef92:	4a1e      	ldr	r2, [pc, #120]	; (800f00c <ai_platform_inputs_get+0x1c8>)
 800ef94:	6813      	ldr	r3, [r2, #0]
 800ef96:	f023 0301 	bic.w	r3, r3, #1
 800ef9a:	6013      	str	r3, [r2, #0]
 800ef9c:	f7ff fe10 	bl	800ebc0 <_ai_platform_acquire_crc>
 800efa0:	4b1b      	ldr	r3, [pc, #108]	; (800f010 <ai_platform_inputs_get+0x1cc>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800efa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efac:	d01a      	beq.n	800efe4 <ai_platform_inputs_get+0x1a0>
 800efae:	4b19      	ldr	r3, [pc, #100]	; (800f014 <ai_platform_inputs_get+0x1d0>)
 800efb0:	2201      	movs	r2, #1
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d1fc      	bne.n	800efb4 <ai_platform_inputs_get+0x170>
 800efba:	4b17      	ldr	r3, [pc, #92]	; (800f018 <ai_platform_inputs_get+0x1d4>)
 800efbc:	4a17      	ldr	r2, [pc, #92]	; (800f01c <ai_platform_inputs_get+0x1d8>)
 800efbe:	601a      	str	r2, [r3, #0]
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	4b17      	ldr	r3, [pc, #92]	; (800f020 <ai_platform_inputs_get+0x1dc>)
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d01b      	beq.n	800f000 <ai_platform_inputs_get+0x1bc>
 800efc8:	e7fe      	b.n	800efc8 <ai_platform_inputs_get+0x184>
 800efca:	f107 0010 	add.w	r0, r7, #16
 800efce:	2218      	movs	r2, #24
 800efd0:	2111      	movs	r1, #17
 800efd2:	f000 fe19 	bl	800fc08 <core_set_error>
 800efd6:	2000      	movs	r0, #0
 800efd8:	b005      	add	sp, #20
 800efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efde:	69a8      	ldr	r0, [r5, #24]
 800efe0:	2300      	movs	r3, #0
 800efe2:	e7aa      	b.n	800ef3a <ai_platform_inputs_get+0xf6>
 800efe4:	4b0f      	ldr	r3, [pc, #60]	; (800f024 <ai_platform_inputs_get+0x1e0>)
 800efe6:	2201      	movs	r2, #1
 800efe8:	601a      	str	r2, [r3, #0]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	2a00      	cmp	r2, #0
 800efee:	d1fc      	bne.n	800efea <ai_platform_inputs_get+0x1a6>
 800eff0:	4b0d      	ldr	r3, [pc, #52]	; (800f028 <ai_platform_inputs_get+0x1e4>)
 800eff2:	4a0a      	ldr	r2, [pc, #40]	; (800f01c <ai_platform_inputs_get+0x1d8>)
 800eff4:	601a      	str	r2, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	4b09      	ldr	r3, [pc, #36]	; (800f020 <ai_platform_inputs_get+0x1dc>)
 800effa:	429a      	cmp	r2, r3
 800effc:	d000      	beq.n	800f000 <ai_platform_inputs_get+0x1bc>
 800effe:	e7fe      	b.n	800effe <ai_platform_inputs_get+0x1ba>
 800f000:	f7ff fde0 	bl	800ebc4 <_ai_platform_release_crc>
 800f004:	2000      	movs	r0, #0
 800f006:	e7e7      	b.n	800efd8 <ai_platform_inputs_get+0x194>
 800f008:	a1c00100 	.word	0xa1c00100
 800f00c:	e0002000 	.word	0xe0002000
 800f010:	e0042000 	.word	0xe0042000
 800f014:	58024c08 	.word	0x58024c08
 800f018:	58024c00 	.word	0x58024c00
 800f01c:	f407a5c2 	.word	0xf407a5c2
 800f020:	b5e8b5cd 	.word	0xb5e8b5cd
 800f024:	40023008 	.word	0x40023008
 800f028:	40023000 	.word	0x40023000

0800f02c <ai_platform_outputs_get>:
 800f02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f030:	b085      	sub	sp, #20
 800f032:	2800      	cmp	r0, #0
 800f034:	f000 80a9 	beq.w	800f18a <ai_platform_outputs_get+0x15e>
 800f038:	4b70      	ldr	r3, [pc, #448]	; (800f1fc <ai_platform_outputs_get+0x1d0>)
 800f03a:	6802      	ldr	r2, [r0, #0]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	4607      	mov	r7, r0
 800f040:	f040 80a3 	bne.w	800f18a <ai_platform_outputs_get+0x15e>
 800f044:	4a6e      	ldr	r2, [pc, #440]	; (800f200 <ai_platform_outputs_get+0x1d4>)
 800f046:	6813      	ldr	r3, [r2, #0]
 800f048:	f023 0301 	bic.w	r3, r3, #1
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	468b      	mov	fp, r1
 800f050:	f7ff fdb6 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f054:	4b6b      	ldr	r3, [pc, #428]	; (800f204 <ai_platform_outputs_get+0x1d8>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f05c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f060:	d00d      	beq.n	800f07e <ai_platform_outputs_get+0x52>
 800f062:	4b69      	ldr	r3, [pc, #420]	; (800f208 <ai_platform_outputs_get+0x1dc>)
 800f064:	2201      	movs	r2, #1
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	2a00      	cmp	r2, #0
 800f06c:	d1fc      	bne.n	800f068 <ai_platform_outputs_get+0x3c>
 800f06e:	4b67      	ldr	r3, [pc, #412]	; (800f20c <ai_platform_outputs_get+0x1e0>)
 800f070:	4a67      	ldr	r2, [pc, #412]	; (800f210 <ai_platform_outputs_get+0x1e4>)
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	4b67      	ldr	r3, [pc, #412]	; (800f214 <ai_platform_outputs_get+0x1e8>)
 800f078:	429a      	cmp	r2, r3
 800f07a:	d00d      	beq.n	800f098 <ai_platform_outputs_get+0x6c>
 800f07c:	e7fe      	b.n	800f07c <ai_platform_outputs_get+0x50>
 800f07e:	4b66      	ldr	r3, [pc, #408]	; (800f218 <ai_platform_outputs_get+0x1ec>)
 800f080:	2201      	movs	r2, #1
 800f082:	601a      	str	r2, [r3, #0]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	2a00      	cmp	r2, #0
 800f088:	d1fc      	bne.n	800f084 <ai_platform_outputs_get+0x58>
 800f08a:	4b64      	ldr	r3, [pc, #400]	; (800f21c <ai_platform_outputs_get+0x1f0>)
 800f08c:	4a60      	ldr	r2, [pc, #384]	; (800f210 <ai_platform_outputs_get+0x1e4>)
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	4b60      	ldr	r3, [pc, #384]	; (800f214 <ai_platform_outputs_get+0x1e8>)
 800f094:	429a      	cmp	r2, r3
 800f096:	d177      	bne.n	800f188 <ai_platform_outputs_get+0x15c>
 800f098:	f7ff fd94 	bl	800ebc4 <_ai_platform_release_crc>
 800f09c:	f1bb 0f00 	cmp.w	fp, #0
 800f0a0:	d002      	beq.n	800f0a8 <ai_platform_outputs_get+0x7c>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	f8ab 3000 	strh.w	r3, [fp]
 800f0a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	f240 809a 	bls.w	800f1e4 <ai_platform_outputs_get+0x1b8>
 800f0b0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800f0b2:	f116 0f0c 	cmn.w	r6, #12
 800f0b6:	f000 8095 	beq.w	800f1e4 <ai_platform_outputs_get+0x1b8>
 800f0ba:	89b3      	ldrh	r3, [r6, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f000 8091 	beq.w	800f1e4 <ai_platform_outputs_get+0x1b8>
 800f0c2:	6933      	ldr	r3, [r6, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f000 808d 	beq.w	800f1e4 <ai_platform_outputs_get+0x1b8>
 800f0ca:	681d      	ldr	r5, [r3, #0]
 800f0cc:	2d00      	cmp	r5, #0
 800f0ce:	f000 8089 	beq.w	800f1e4 <ai_platform_outputs_get+0x1b8>
 800f0d2:	f04f 0800 	mov.w	r8, #0
 800f0d6:	f8cd b008 	str.w	fp, [sp, #8]
 800f0da:	46c1      	mov	r9, r8
 800f0dc:	46bb      	mov	fp, r7
 800f0de:	6970      	ldr	r0, [r6, #20]
 800f0e0:	69aa      	ldr	r2, [r5, #24]
 800f0e2:	68ab      	ldr	r3, [r5, #8]
 800f0e4:	6844      	ldr	r4, [r0, #4]
 800f0e6:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800f0ea:	6810      	ldr	r0, [r2, #0]
 800f0ec:	68ef      	ldr	r7, [r5, #12]
 800f0ee:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800f0f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f0f6:	9301      	str	r3, [sp, #4]
 800f0f8:	9203      	str	r2, [sp, #12]
 800f0fa:	f001 fbed 	bl	80108d8 <ai_array_to_buffer_fmt>
 800f0fe:	9a03      	ldr	r2, [sp, #12]
 800f100:	4601      	mov	r1, r0
 800f102:	69a8      	ldr	r0, [r5, #24]
 800f104:	eb0a 0302 	add.w	r3, sl, r2
 800f108:	4444      	add	r4, r8
 800f10a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800f10e:	b16b      	cbz	r3, 800f12c <ai_platform_outputs_get+0x100>
 800f110:	2000      	movs	r0, #0
 800f112:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800f116:	6828      	ldr	r0, [r5, #0]
 800f118:	6058      	str	r0, [r3, #4]
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d051      	beq.n	800f1c2 <ai_platform_outputs_get+0x196>
 800f11e:	8840      	ldrh	r0, [r0, #2]
 800f120:	2800      	cmp	r0, #0
 800f122:	d04e      	beq.n	800f1c2 <ai_platform_outputs_get+0x196>
 800f124:	2001      	movs	r0, #1
 800f126:	f84a 0002 	str.w	r0, [sl, r2]
 800f12a:	69a8      	ldr	r0, [r5, #24]
 800f12c:	6842      	ldr	r2, [r0, #4]
 800f12e:	6122      	str	r2, [r4, #16]
 800f130:	f04f 0001 	mov.w	r0, #1
 800f134:	7520      	strb	r0, [r4, #20]
 800f136:	9a01      	ldr	r2, [sp, #4]
 800f138:	6960      	ldr	r0, [r4, #20]
 800f13a:	60a3      	str	r3, [r4, #8]
 800f13c:	f362 201f 	bfi	r0, r2, #8, #24
 800f140:	e9c4 1e00 	strd	r1, lr, [r4]
 800f144:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800f148:	2300      	movs	r3, #0
 800f14a:	60e3      	str	r3, [r4, #12]
 800f14c:	89b0      	ldrh	r0, [r6, #12]
 800f14e:	f109 0301 	add.w	r3, r9, #1
 800f152:	4283      	cmp	r3, r0
 800f154:	4699      	mov	r9, r3
 800f156:	b29a      	uxth	r2, r3
 800f158:	d207      	bcs.n	800f16a <ai_platform_outputs_get+0x13e>
 800f15a:	6930      	ldr	r0, [r6, #16]
 800f15c:	b128      	cbz	r0, 800f16a <ai_platform_outputs_get+0x13e>
 800f15e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800f162:	f108 081c 	add.w	r8, r8, #28
 800f166:	2d00      	cmp	r5, #0
 800f168:	d1b9      	bne.n	800f0de <ai_platform_outputs_get+0xb2>
 800f16a:	465f      	mov	r7, fp
 800f16c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f170:	2a00      	cmp	r2, #0
 800f172:	d037      	beq.n	800f1e4 <ai_platform_outputs_get+0x1b8>
 800f174:	6973      	ldr	r3, [r6, #20]
 800f176:	6858      	ldr	r0, [r3, #4]
 800f178:	f1bb 0f00 	cmp.w	fp, #0
 800f17c:	d001      	beq.n	800f182 <ai_platform_outputs_get+0x156>
 800f17e:	f8ab 2000 	strh.w	r2, [fp]
 800f182:	b005      	add	sp, #20
 800f184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f188:	e7fe      	b.n	800f188 <ai_platform_outputs_get+0x15c>
 800f18a:	4a1d      	ldr	r2, [pc, #116]	; (800f200 <ai_platform_outputs_get+0x1d4>)
 800f18c:	6813      	ldr	r3, [r2, #0]
 800f18e:	f023 0301 	bic.w	r3, r3, #1
 800f192:	6013      	str	r3, [r2, #0]
 800f194:	f7ff fd14 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f198:	4b1a      	ldr	r3, [pc, #104]	; (800f204 <ai_platform_outputs_get+0x1d8>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f1a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1a4:	d010      	beq.n	800f1c8 <ai_platform_outputs_get+0x19c>
 800f1a6:	4b18      	ldr	r3, [pc, #96]	; (800f208 <ai_platform_outputs_get+0x1dc>)
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	601a      	str	r2, [r3, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	2a00      	cmp	r2, #0
 800f1b0:	d1fc      	bne.n	800f1ac <ai_platform_outputs_get+0x180>
 800f1b2:	4b16      	ldr	r3, [pc, #88]	; (800f20c <ai_platform_outputs_get+0x1e0>)
 800f1b4:	4a16      	ldr	r2, [pc, #88]	; (800f210 <ai_platform_outputs_get+0x1e4>)
 800f1b6:	601a      	str	r2, [r3, #0]
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	4b16      	ldr	r3, [pc, #88]	; (800f214 <ai_platform_outputs_get+0x1e8>)
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d019      	beq.n	800f1f4 <ai_platform_outputs_get+0x1c8>
 800f1c0:	e7fe      	b.n	800f1c0 <ai_platform_outputs_get+0x194>
 800f1c2:	69a8      	ldr	r0, [r5, #24]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e7b1      	b.n	800f12c <ai_platform_outputs_get+0x100>
 800f1c8:	4b13      	ldr	r3, [pc, #76]	; (800f218 <ai_platform_outputs_get+0x1ec>)
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	601a      	str	r2, [r3, #0]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	2a00      	cmp	r2, #0
 800f1d2:	d1fc      	bne.n	800f1ce <ai_platform_outputs_get+0x1a2>
 800f1d4:	4b11      	ldr	r3, [pc, #68]	; (800f21c <ai_platform_outputs_get+0x1f0>)
 800f1d6:	4a0e      	ldr	r2, [pc, #56]	; (800f210 <ai_platform_outputs_get+0x1e4>)
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	4b0d      	ldr	r3, [pc, #52]	; (800f214 <ai_platform_outputs_get+0x1e8>)
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d008      	beq.n	800f1f4 <ai_platform_outputs_get+0x1c8>
 800f1e2:	e7fe      	b.n	800f1e2 <ai_platform_outputs_get+0x1b6>
 800f1e4:	f107 0010 	add.w	r0, r7, #16
 800f1e8:	2218      	movs	r2, #24
 800f1ea:	2111      	movs	r1, #17
 800f1ec:	f000 fd0c 	bl	800fc08 <core_set_error>
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	e7c6      	b.n	800f182 <ai_platform_outputs_get+0x156>
 800f1f4:	f7ff fce6 	bl	800ebc4 <_ai_platform_release_crc>
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	e7c2      	b.n	800f182 <ai_platform_outputs_get+0x156>
 800f1fc:	a1c00100 	.word	0xa1c00100
 800f200:	e0002000 	.word	0xe0002000
 800f204:	e0042000 	.word	0xe0042000
 800f208:	58024c08 	.word	0x58024c08
 800f20c:	58024c00 	.word	0x58024c00
 800f210:	f407a5c2 	.word	0xf407a5c2
 800f214:	b5e8b5cd 	.word	0xb5e8b5cd
 800f218:	40023008 	.word	0x40023008
 800f21c:	40023000 	.word	0x40023000

0800f220 <ai_platform_network_create>:
 800f220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f224:	b083      	sub	sp, #12
 800f226:	4606      	mov	r6, r0
 800f228:	4615      	mov	r5, r2
 800f22a:	461f      	mov	r7, r3
 800f22c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800f230:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800f234:	f7ff fcc4 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f238:	b178      	cbz	r0, 800f25a <ai_platform_network_create+0x3a>
 800f23a:	4b5f      	ldr	r3, [pc, #380]	; (800f3b8 <ai_platform_network_create+0x198>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f246:	4602      	mov	r2, r0
 800f248:	d00d      	beq.n	800f266 <ai_platform_network_create+0x46>
 800f24a:	4b5c      	ldr	r3, [pc, #368]	; (800f3bc <ai_platform_network_create+0x19c>)
 800f24c:	2118      	movs	r1, #24
 800f24e:	6019      	str	r1, [r3, #0]
 800f250:	6819      	ldr	r1, [r3, #0]
 800f252:	2918      	cmp	r1, #24
 800f254:	d01a      	beq.n	800f28c <ai_platform_network_create+0x6c>
 800f256:	f7ff fcb5 	bl	800ebc4 <_ai_platform_release_crc>
 800f25a:	f244 1333 	movw	r3, #16691	; 0x4133
 800f25e:	4618      	mov	r0, r3
 800f260:	b003      	add	sp, #12
 800f262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f266:	4b56      	ldr	r3, [pc, #344]	; (800f3c0 <ai_platform_network_create+0x1a0>)
 800f268:	2101      	movs	r1, #1
 800f26a:	6019      	str	r1, [r3, #0]
 800f26c:	2114      	movs	r1, #20
 800f26e:	e001      	b.n	800f274 <ai_platform_network_create+0x54>
 800f270:	3901      	subs	r1, #1
 800f272:	d002      	beq.n	800f27a <ai_platform_network_create+0x5a>
 800f274:	6818      	ldr	r0, [r3, #0]
 800f276:	2800      	cmp	r0, #0
 800f278:	d1fa      	bne.n	800f270 <ai_platform_network_create+0x50>
 800f27a:	4b51      	ldr	r3, [pc, #324]	; (800f3c0 <ai_platform_network_create+0x1a0>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	b91b      	cbnz	r3, 800f288 <ai_platform_network_create+0x68>
 800f280:	4b50      	ldr	r3, [pc, #320]	; (800f3c4 <ai_platform_network_create+0x1a4>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3301      	adds	r3, #1
 800f286:	d006      	beq.n	800f296 <ai_platform_network_create+0x76>
 800f288:	4610      	mov	r0, r2
 800f28a:	e7e4      	b.n	800f256 <ai_platform_network_create+0x36>
 800f28c:	2101      	movs	r1, #1
 800f28e:	6019      	str	r1, [r3, #0]
 800f290:	6819      	ldr	r1, [r3, #0]
 800f292:	2900      	cmp	r1, #0
 800f294:	d1fc      	bne.n	800f290 <ai_platform_network_create+0x70>
 800f296:	4610      	mov	r0, r2
 800f298:	f7ff fc94 	bl	800ebc4 <_ai_platform_release_crc>
 800f29c:	4a4a      	ldr	r2, [pc, #296]	; (800f3c8 <ai_platform_network_create+0x1a8>)
 800f29e:	6813      	ldr	r3, [r2, #0]
 800f2a0:	f023 0301 	bic.w	r3, r3, #1
 800f2a4:	6013      	str	r3, [r2, #0]
 800f2a6:	f7ff fc8b 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f2aa:	4b43      	ldr	r3, [pc, #268]	; (800f3b8 <ai_platform_network_create+0x198>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f2b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2b6:	d00d      	beq.n	800f2d4 <ai_platform_network_create+0xb4>
 800f2b8:	4b40      	ldr	r3, [pc, #256]	; (800f3bc <ai_platform_network_create+0x19c>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	2a00      	cmp	r2, #0
 800f2c2:	d1fc      	bne.n	800f2be <ai_platform_network_create+0x9e>
 800f2c4:	4b41      	ldr	r3, [pc, #260]	; (800f3cc <ai_platform_network_create+0x1ac>)
 800f2c6:	4a42      	ldr	r2, [pc, #264]	; (800f3d0 <ai_platform_network_create+0x1b0>)
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	4b41      	ldr	r3, [pc, #260]	; (800f3d4 <ai_platform_network_create+0x1b4>)
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d00e      	beq.n	800f2f0 <ai_platform_network_create+0xd0>
 800f2d2:	e7fe      	b.n	800f2d2 <ai_platform_network_create+0xb2>
 800f2d4:	4b3a      	ldr	r3, [pc, #232]	; (800f3c0 <ai_platform_network_create+0x1a0>)
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	601a      	str	r2, [r3, #0]
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	2a00      	cmp	r2, #0
 800f2de:	d1fc      	bne.n	800f2da <ai_platform_network_create+0xba>
 800f2e0:	4b38      	ldr	r3, [pc, #224]	; (800f3c4 <ai_platform_network_create+0x1a4>)
 800f2e2:	4a3b      	ldr	r2, [pc, #236]	; (800f3d0 <ai_platform_network_create+0x1b0>)
 800f2e4:	601a      	str	r2, [r3, #0]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	4b3a      	ldr	r3, [pc, #232]	; (800f3d4 <ai_platform_network_create+0x1b4>)
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d000      	beq.n	800f2f0 <ai_platform_network_create+0xd0>
 800f2ee:	e7fe      	b.n	800f2ee <ai_platform_network_create+0xce>
 800f2f0:	f7ff fc68 	bl	800ebc4 <_ai_platform_release_crc>
 800f2f4:	b1ae      	cbz	r6, 800f322 <ai_platform_network_create+0x102>
 800f2f6:	4b38      	ldr	r3, [pc, #224]	; (800f3d8 <ai_platform_network_create+0x1b8>)
 800f2f8:	602b      	str	r3, [r5, #0]
 800f2fa:	6035      	str	r5, [r6, #0]
 800f2fc:	f000 fc7c 	bl	800fbf8 <core_init>
 800f300:	b990      	cbnz	r0, 800f328 <ai_platform_network_create+0x108>
 800f302:	2430      	movs	r4, #48	; 0x30
 800f304:	2300      	movs	r3, #0
 800f306:	6033      	str	r3, [r6, #0]
 800f308:	2610      	movs	r6, #16
 800f30a:	464a      	mov	r2, r9
 800f30c:	4641      	mov	r1, r8
 800f30e:	4638      	mov	r0, r7
 800f310:	f001 fac8 	bl	80108a4 <ai_version_get>
 800f314:	2300      	movs	r3, #0
 800f316:	f364 0307 	bfi	r3, r4, #0, #8
 800f31a:	6468      	str	r0, [r5, #68]	; 0x44
 800f31c:	f366 231f 	bfi	r3, r6, #8, #24
 800f320:	e79d      	b.n	800f25e <ai_platform_network_create+0x3e>
 800f322:	f241 0310 	movw	r3, #4112	; 0x1010
 800f326:	e79a      	b.n	800f25e <ai_platform_network_create+0x3e>
 800f328:	4a27      	ldr	r2, [pc, #156]	; (800f3c8 <ai_platform_network_create+0x1a8>)
 800f32a:	6813      	ldr	r3, [r2, #0]
 800f32c:	f023 0301 	bic.w	r3, r3, #1
 800f330:	6013      	str	r3, [r2, #0]
 800f332:	f7ff fc45 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f336:	4b20      	ldr	r3, [pc, #128]	; (800f3b8 <ai_platform_network_create+0x198>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f33e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f342:	d00d      	beq.n	800f360 <ai_platform_network_create+0x140>
 800f344:	4b1d      	ldr	r3, [pc, #116]	; (800f3bc <ai_platform_network_create+0x19c>)
 800f346:	2201      	movs	r2, #1
 800f348:	601a      	str	r2, [r3, #0]
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	2a00      	cmp	r2, #0
 800f34e:	d1fc      	bne.n	800f34a <ai_platform_network_create+0x12a>
 800f350:	4b1e      	ldr	r3, [pc, #120]	; (800f3cc <ai_platform_network_create+0x1ac>)
 800f352:	4a1f      	ldr	r2, [pc, #124]	; (800f3d0 <ai_platform_network_create+0x1b0>)
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	4b1e      	ldr	r3, [pc, #120]	; (800f3d4 <ai_platform_network_create+0x1b4>)
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d00e      	beq.n	800f37c <ai_platform_network_create+0x15c>
 800f35e:	e7fe      	b.n	800f35e <ai_platform_network_create+0x13e>
 800f360:	4b17      	ldr	r3, [pc, #92]	; (800f3c0 <ai_platform_network_create+0x1a0>)
 800f362:	2201      	movs	r2, #1
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	2a00      	cmp	r2, #0
 800f36a:	d1fc      	bne.n	800f366 <ai_platform_network_create+0x146>
 800f36c:	4b15      	ldr	r3, [pc, #84]	; (800f3c4 <ai_platform_network_create+0x1a4>)
 800f36e:	4a18      	ldr	r2, [pc, #96]	; (800f3d0 <ai_platform_network_create+0x1b0>)
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	4b17      	ldr	r3, [pc, #92]	; (800f3d4 <ai_platform_network_create+0x1b4>)
 800f376:	429a      	cmp	r2, r3
 800f378:	d000      	beq.n	800f37c <ai_platform_network_create+0x15c>
 800f37a:	e7fe      	b.n	800f37a <ai_platform_network_create+0x15a>
 800f37c:	f7ff fc22 	bl	800ebc4 <_ai_platform_release_crc>
 800f380:	2200      	movs	r2, #0
 800f382:	4641      	mov	r1, r8
 800f384:	4638      	mov	r0, r7
 800f386:	f001 fa8d 	bl	80108a4 <ai_version_get>
 800f38a:	2200      	movs	r2, #0
 800f38c:	4604      	mov	r4, r0
 800f38e:	2105      	movs	r1, #5
 800f390:	2001      	movs	r0, #1
 800f392:	f001 fa87 	bl	80108a4 <ai_version_get>
 800f396:	4284      	cmp	r4, r0
 800f398:	d001      	beq.n	800f39e <ai_platform_network_create+0x17e>
 800f39a:	2401      	movs	r4, #1
 800f39c:	e7b2      	b.n	800f304 <ai_platform_network_create+0xe4>
 800f39e:	a802      	add	r0, sp, #8
 800f3a0:	4b0e      	ldr	r3, [pc, #56]	; (800f3dc <ai_platform_network_create+0x1bc>)
 800f3a2:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f3a6:	f001 f9d9 	bl	801075c <ai_check_custom_types>
 800f3aa:	b110      	cbz	r0, 800f3b2 <ai_platform_network_create+0x192>
 800f3ac:	2600      	movs	r6, #0
 800f3ae:	4634      	mov	r4, r6
 800f3b0:	e7ab      	b.n	800f30a <ai_platform_network_create+0xea>
 800f3b2:	2402      	movs	r4, #2
 800f3b4:	e7a6      	b.n	800f304 <ai_platform_network_create+0xe4>
 800f3b6:	bf00      	nop
 800f3b8:	e0042000 	.word	0xe0042000
 800f3bc:	58024c08 	.word	0x58024c08
 800f3c0:	40023008 	.word	0x40023008
 800f3c4:	40023000 	.word	0x40023000
 800f3c8:	e0002000 	.word	0xe0002000
 800f3cc:	58024c00 	.word	0x58024c00
 800f3d0:	f407a5c2 	.word	0xf407a5c2
 800f3d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800f3d8:	a1c00100 	.word	0xa1c00100
 800f3dc:	84048403 	.word	0x84048403

0800f3e0 <ai_platform_network_init>:
 800f3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d04b      	beq.n	800f480 <ai_platform_network_init+0xa0>
 800f3e8:	4b79      	ldr	r3, [pc, #484]	; (800f5d0 <ai_platform_network_init+0x1f0>)
 800f3ea:	6802      	ldr	r2, [r0, #0]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	d146      	bne.n	800f480 <ai_platform_network_init+0xa0>
 800f3f2:	4a78      	ldr	r2, [pc, #480]	; (800f5d4 <ai_platform_network_init+0x1f4>)
 800f3f4:	6813      	ldr	r3, [r2, #0]
 800f3f6:	f023 0301 	bic.w	r3, r3, #1
 800f3fa:	6013      	str	r3, [r2, #0]
 800f3fc:	460e      	mov	r6, r1
 800f3fe:	f7ff fbdf 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f402:	4b75      	ldr	r3, [pc, #468]	; (800f5d8 <ai_platform_network_init+0x1f8>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f40a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f40e:	d00d      	beq.n	800f42c <ai_platform_network_init+0x4c>
 800f410:	4b72      	ldr	r3, [pc, #456]	; (800f5dc <ai_platform_network_init+0x1fc>)
 800f412:	2201      	movs	r2, #1
 800f414:	601a      	str	r2, [r3, #0]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	2a00      	cmp	r2, #0
 800f41a:	d1fc      	bne.n	800f416 <ai_platform_network_init+0x36>
 800f41c:	4b70      	ldr	r3, [pc, #448]	; (800f5e0 <ai_platform_network_init+0x200>)
 800f41e:	4a71      	ldr	r2, [pc, #452]	; (800f5e4 <ai_platform_network_init+0x204>)
 800f420:	601a      	str	r2, [r3, #0]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	4b70      	ldr	r3, [pc, #448]	; (800f5e8 <ai_platform_network_init+0x208>)
 800f426:	429a      	cmp	r2, r3
 800f428:	d00d      	beq.n	800f446 <ai_platform_network_init+0x66>
 800f42a:	e7fe      	b.n	800f42a <ai_platform_network_init+0x4a>
 800f42c:	4b6f      	ldr	r3, [pc, #444]	; (800f5ec <ai_platform_network_init+0x20c>)
 800f42e:	2201      	movs	r2, #1
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	2a00      	cmp	r2, #0
 800f436:	d1fc      	bne.n	800f432 <ai_platform_network_init+0x52>
 800f438:	4b6d      	ldr	r3, [pc, #436]	; (800f5f0 <ai_platform_network_init+0x210>)
 800f43a:	4a6a      	ldr	r2, [pc, #424]	; (800f5e4 <ai_platform_network_init+0x204>)
 800f43c:	601a      	str	r2, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	4b69      	ldr	r3, [pc, #420]	; (800f5e8 <ai_platform_network_init+0x208>)
 800f442:	429a      	cmp	r2, r3
 800f444:	d11b      	bne.n	800f47e <ai_platform_network_init+0x9e>
 800f446:	f7ff fbbd 	bl	800ebc4 <_ai_platform_release_crc>
 800f44a:	2e00      	cmp	r6, #0
 800f44c:	d034      	beq.n	800f4b8 <ai_platform_network_init+0xd8>
 800f44e:	4b69      	ldr	r3, [pc, #420]	; (800f5f4 <ai_platform_network_init+0x214>)
 800f450:	6832      	ldr	r2, [r6, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d149      	bne.n	800f4ea <ai_platform_network_init+0x10a>
 800f456:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f45a:	6930      	ldr	r0, [r6, #16]
 800f45c:	89b3      	ldrh	r3, [r6, #12]
 800f45e:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 800f462:	62a0      	str	r0, [r4, #40]	; 0x28
 800f464:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800f468:	2203      	movs	r2, #3
 800f46a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800f46e:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f470:	60e2      	str	r2, [r4, #12]
 800f472:	4620      	mov	r0, r4
 800f474:	f001 f99c 	bl	80107b0 <ai_layers_init_all>
 800f478:	4620      	mov	r0, r4
 800f47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f47e:	e7fe      	b.n	800f47e <ai_platform_network_init+0x9e>
 800f480:	4a54      	ldr	r2, [pc, #336]	; (800f5d4 <ai_platform_network_init+0x1f4>)
 800f482:	6813      	ldr	r3, [r2, #0]
 800f484:	f023 0301 	bic.w	r3, r3, #1
 800f488:	6013      	str	r3, [r2, #0]
 800f48a:	f7ff fb99 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f48e:	4b52      	ldr	r3, [pc, #328]	; (800f5d8 <ai_platform_network_init+0x1f8>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f49a:	d015      	beq.n	800f4c8 <ai_platform_network_init+0xe8>
 800f49c:	4b4f      	ldr	r3, [pc, #316]	; (800f5dc <ai_platform_network_init+0x1fc>)
 800f49e:	2201      	movs	r2, #1
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	2a00      	cmp	r2, #0
 800f4a6:	d1fc      	bne.n	800f4a2 <ai_platform_network_init+0xc2>
 800f4a8:	4b4d      	ldr	r3, [pc, #308]	; (800f5e0 <ai_platform_network_init+0x200>)
 800f4aa:	4a4e      	ldr	r2, [pc, #312]	; (800f5e4 <ai_platform_network_init+0x204>)
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	4b4d      	ldr	r3, [pc, #308]	; (800f5e8 <ai_platform_network_init+0x208>)
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d015      	beq.n	800f4e2 <ai_platform_network_init+0x102>
 800f4b6:	e7fe      	b.n	800f4b6 <ai_platform_network_init+0xd6>
 800f4b8:	f104 0010 	add.w	r0, r4, #16
 800f4bc:	2211      	movs	r2, #17
 800f4be:	2110      	movs	r1, #16
 800f4c0:	4634      	mov	r4, r6
 800f4c2:	f000 fba1 	bl	800fc08 <core_set_error>
 800f4c6:	e7d7      	b.n	800f478 <ai_platform_network_init+0x98>
 800f4c8:	4b48      	ldr	r3, [pc, #288]	; (800f5ec <ai_platform_network_init+0x20c>)
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	601a      	str	r2, [r3, #0]
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	2a00      	cmp	r2, #0
 800f4d2:	d1fc      	bne.n	800f4ce <ai_platform_network_init+0xee>
 800f4d4:	4b46      	ldr	r3, [pc, #280]	; (800f5f0 <ai_platform_network_init+0x210>)
 800f4d6:	4a43      	ldr	r2, [pc, #268]	; (800f5e4 <ai_platform_network_init+0x204>)
 800f4d8:	601a      	str	r2, [r3, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	4b42      	ldr	r3, [pc, #264]	; (800f5e8 <ai_platform_network_init+0x208>)
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d16d      	bne.n	800f5be <ai_platform_network_init+0x1de>
 800f4e2:	f7ff fb6f 	bl	800ebc4 <_ai_platform_release_crc>
 800f4e6:	2400      	movs	r4, #0
 800f4e8:	e7c6      	b.n	800f478 <ai_platform_network_init+0x98>
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	2101      	movs	r1, #1
 800f4ee:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800f4f2:	f7ff fb19 	bl	800eb28 <ai_buffer_get_size>
 800f4f6:	4635      	mov	r5, r6
 800f4f8:	f106 071c 	add.w	r7, r6, #28
 800f4fc:	2101      	movs	r1, #1
 800f4fe:	4606      	mov	r6, r0
 800f500:	4638      	mov	r0, r7
 800f502:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800f506:	f7ff fb0f 	bl	800eb28 <ai_buffer_get_size>
 800f50a:	2e00      	cmp	r6, #0
 800f50c:	bf0a      	itet	eq
 800f50e:	46b6      	moveq	lr, r6
 800f510:	f04f 0e01 	movne.w	lr, #1
 800f514:	4635      	moveq	r5, r6
 800f516:	2800      	cmp	r0, #0
 800f518:	d14b      	bne.n	800f5b2 <ai_platform_network_init+0x1d2>
 800f51a:	4607      	mov	r7, r0
 800f51c:	4684      	mov	ip, r0
 800f51e:	f1b8 0f00 	cmp.w	r8, #0
 800f522:	d023      	beq.n	800f56c <ai_platform_network_init+0x18c>
 800f524:	8be3      	ldrh	r3, [r4, #30]
 800f526:	4573      	cmp	r3, lr
 800f528:	d207      	bcs.n	800f53a <ai_platform_network_init+0x15a>
 800f52a:	f104 0010 	add.w	r0, r4, #16
 800f52e:	2212      	movs	r2, #18
 800f530:	2116      	movs	r1, #22
 800f532:	f000 fb69 	bl	800fc08 <core_set_error>
 800f536:	2400      	movs	r4, #0
 800f538:	e79e      	b.n	800f478 <ai_platform_network_init+0x98>
 800f53a:	f1be 0f00 	cmp.w	lr, #0
 800f53e:	d006      	beq.n	800f54e <ai_platform_network_init+0x16e>
 800f540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f542:	6a26      	ldr	r6, [r4, #32]
 800f544:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f54a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f54e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800f550:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800f554:	2600      	movs	r6, #0
 800f556:	4563      	cmp	r3, ip
 800f558:	83a6      	strh	r6, [r4, #28]
 800f55a:	d211      	bcs.n	800f580 <ai_platform_network_init+0x1a0>
 800f55c:	f104 0010 	add.w	r0, r4, #16
 800f560:	2213      	movs	r2, #19
 800f562:	2116      	movs	r1, #22
 800f564:	f000 fb50 	bl	800fc08 <core_set_error>
 800f568:	4634      	mov	r4, r6
 800f56a:	e785      	b.n	800f478 <ai_platform_network_init+0x98>
 800f56c:	2e00      	cmp	r6, #0
 800f56e:	d0d9      	beq.n	800f524 <ai_platform_network_init+0x144>
 800f570:	f104 0010 	add.w	r0, r4, #16
 800f574:	2212      	movs	r2, #18
 800f576:	2110      	movs	r1, #16
 800f578:	4644      	mov	r4, r8
 800f57a:	f000 fb45 	bl	800fc08 <core_set_error>
 800f57e:	e77b      	b.n	800f478 <ai_platform_network_init+0x98>
 800f580:	f1bc 0f00 	cmp.w	ip, #0
 800f584:	d013      	beq.n	800f5ae <ai_platform_network_init+0x1ce>
 800f586:	f04f 081c 	mov.w	r8, #28
 800f58a:	fb08 f80c 	mul.w	r8, r8, ip
 800f58e:	eb07 0e06 	add.w	lr, r7, r6
 800f592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f596:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f598:	4435      	add	r5, r6
 800f59a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f59c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800f5a0:	361c      	adds	r6, #28
 800f5a2:	4546      	cmp	r6, r8
 800f5a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f5a8:	d1f1      	bne.n	800f58e <ai_platform_network_init+0x1ae>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e75c      	b.n	800f468 <ai_platform_network_init+0x88>
 800f5ae:	4663      	mov	r3, ip
 800f5b0:	e75a      	b.n	800f468 <ai_platform_network_init+0x88>
 800f5b2:	f1b9 0f00 	cmp.w	r9, #0
 800f5b6:	d003      	beq.n	800f5c0 <ai_platform_network_init+0x1e0>
 800f5b8:	f04f 0c01 	mov.w	ip, #1
 800f5bc:	e7af      	b.n	800f51e <ai_platform_network_init+0x13e>
 800f5be:	e7fe      	b.n	800f5be <ai_platform_network_init+0x1de>
 800f5c0:	f104 0010 	add.w	r0, r4, #16
 800f5c4:	2213      	movs	r2, #19
 800f5c6:	2110      	movs	r1, #16
 800f5c8:	464c      	mov	r4, r9
 800f5ca:	f000 fb1d 	bl	800fc08 <core_set_error>
 800f5ce:	e753      	b.n	800f478 <ai_platform_network_init+0x98>
 800f5d0:	a1c00100 	.word	0xa1c00100
 800f5d4:	e0002000 	.word	0xe0002000
 800f5d8:	e0042000 	.word	0xe0042000
 800f5dc:	58024c08 	.word	0x58024c08
 800f5e0:	58024c00 	.word	0x58024c00
 800f5e4:	f407a5c2 	.word	0xf407a5c2
 800f5e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800f5ec:	40023008 	.word	0x40023008
 800f5f0:	40023000 	.word	0x40023000
 800f5f4:	a1facade 	.word	0xa1facade

0800f5f8 <ai_platform_network_post_init>:
 800f5f8:	b538      	push	{r3, r4, r5, lr}
 800f5fa:	b120      	cbz	r0, 800f606 <ai_platform_network_post_init+0xe>
 800f5fc:	4b3f      	ldr	r3, [pc, #252]	; (800f6fc <ai_platform_network_post_init+0x104>)
 800f5fe:	6802      	ldr	r2, [r0, #0]
 800f600:	429a      	cmp	r2, r3
 800f602:	4604      	mov	r4, r0
 800f604:	d02d      	beq.n	800f662 <ai_platform_network_post_init+0x6a>
 800f606:	4a3e      	ldr	r2, [pc, #248]	; (800f700 <ai_platform_network_post_init+0x108>)
 800f608:	6813      	ldr	r3, [r2, #0]
 800f60a:	f023 0301 	bic.w	r3, r3, #1
 800f60e:	6013      	str	r3, [r2, #0]
 800f610:	f7ff fad6 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f614:	4b3b      	ldr	r3, [pc, #236]	; (800f704 <ai_platform_network_post_init+0x10c>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f61c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f620:	d00d      	beq.n	800f63e <ai_platform_network_post_init+0x46>
 800f622:	4b39      	ldr	r3, [pc, #228]	; (800f708 <ai_platform_network_post_init+0x110>)
 800f624:	2201      	movs	r2, #1
 800f626:	601a      	str	r2, [r3, #0]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	2a00      	cmp	r2, #0
 800f62c:	d1fc      	bne.n	800f628 <ai_platform_network_post_init+0x30>
 800f62e:	4b37      	ldr	r3, [pc, #220]	; (800f70c <ai_platform_network_post_init+0x114>)
 800f630:	4a37      	ldr	r2, [pc, #220]	; (800f710 <ai_platform_network_post_init+0x118>)
 800f632:	601a      	str	r2, [r3, #0]
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	4b37      	ldr	r3, [pc, #220]	; (800f714 <ai_platform_network_post_init+0x11c>)
 800f638:	429a      	cmp	r2, r3
 800f63a:	d00d      	beq.n	800f658 <ai_platform_network_post_init+0x60>
 800f63c:	e7fe      	b.n	800f63c <ai_platform_network_post_init+0x44>
 800f63e:	4b36      	ldr	r3, [pc, #216]	; (800f718 <ai_platform_network_post_init+0x120>)
 800f640:	2201      	movs	r2, #1
 800f642:	601a      	str	r2, [r3, #0]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	2a00      	cmp	r2, #0
 800f648:	d1fc      	bne.n	800f644 <ai_platform_network_post_init+0x4c>
 800f64a:	4b34      	ldr	r3, [pc, #208]	; (800f71c <ai_platform_network_post_init+0x124>)
 800f64c:	4a30      	ldr	r2, [pc, #192]	; (800f710 <ai_platform_network_post_init+0x118>)
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	4b30      	ldr	r3, [pc, #192]	; (800f714 <ai_platform_network_post_init+0x11c>)
 800f654:	429a      	cmp	r2, r3
 800f656:	d103      	bne.n	800f660 <ai_platform_network_post_init+0x68>
 800f658:	f7ff fab4 	bl	800ebc4 <_ai_platform_release_crc>
 800f65c:	2000      	movs	r0, #0
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	e7fe      	b.n	800f660 <ai_platform_network_post_init+0x68>
 800f662:	4a27      	ldr	r2, [pc, #156]	; (800f700 <ai_platform_network_post_init+0x108>)
 800f664:	6813      	ldr	r3, [r2, #0]
 800f666:	f023 0301 	bic.w	r3, r3, #1
 800f66a:	6013      	str	r3, [r2, #0]
 800f66c:	f7ff faa8 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f670:	4b24      	ldr	r3, [pc, #144]	; (800f704 <ai_platform_network_post_init+0x10c>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f67c:	d00d      	beq.n	800f69a <ai_platform_network_post_init+0xa2>
 800f67e:	4b22      	ldr	r3, [pc, #136]	; (800f708 <ai_platform_network_post_init+0x110>)
 800f680:	2201      	movs	r2, #1
 800f682:	601a      	str	r2, [r3, #0]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	2a00      	cmp	r2, #0
 800f688:	d1fc      	bne.n	800f684 <ai_platform_network_post_init+0x8c>
 800f68a:	4b20      	ldr	r3, [pc, #128]	; (800f70c <ai_platform_network_post_init+0x114>)
 800f68c:	4a20      	ldr	r2, [pc, #128]	; (800f710 <ai_platform_network_post_init+0x118>)
 800f68e:	601a      	str	r2, [r3, #0]
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	4b20      	ldr	r3, [pc, #128]	; (800f714 <ai_platform_network_post_init+0x11c>)
 800f694:	429a      	cmp	r2, r3
 800f696:	d00e      	beq.n	800f6b6 <ai_platform_network_post_init+0xbe>
 800f698:	e7fe      	b.n	800f698 <ai_platform_network_post_init+0xa0>
 800f69a:	4b1f      	ldr	r3, [pc, #124]	; (800f718 <ai_platform_network_post_init+0x120>)
 800f69c:	2201      	movs	r2, #1
 800f69e:	601a      	str	r2, [r3, #0]
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	2a00      	cmp	r2, #0
 800f6a4:	d1fc      	bne.n	800f6a0 <ai_platform_network_post_init+0xa8>
 800f6a6:	4b1d      	ldr	r3, [pc, #116]	; (800f71c <ai_platform_network_post_init+0x124>)
 800f6a8:	4a19      	ldr	r2, [pc, #100]	; (800f710 <ai_platform_network_post_init+0x118>)
 800f6aa:	601a      	str	r2, [r3, #0]
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	4b19      	ldr	r3, [pc, #100]	; (800f714 <ai_platform_network_post_init+0x11c>)
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d000      	beq.n	800f6b6 <ai_platform_network_post_init+0xbe>
 800f6b4:	e7fe      	b.n	800f6b4 <ai_platform_network_post_init+0xbc>
 800f6b6:	f7ff fa85 	bl	800ebc4 <_ai_platform_release_crc>
 800f6ba:	68e3      	ldr	r3, [r4, #12]
 800f6bc:	f013 0502 	ands.w	r5, r3, #2
 800f6c0:	d011      	beq.n	800f6e6 <ai_platform_network_post_init+0xee>
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f001 f888 	bl	80107d8 <ai_layers_post_init_all>
 800f6c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6ca:	b1a3      	cbz	r3, 800f6f6 <ai_platform_network_post_init+0xfe>
 800f6cc:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f6ce:	b195      	cbz	r5, 800f6f6 <ai_platform_network_post_init+0xfe>
 800f6d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f6d2:	4629      	mov	r1, r5
 800f6d4:	2000      	movs	r0, #0
 800f6d6:	4798      	blx	r3
 800f6d8:	692b      	ldr	r3, [r5, #16]
 800f6da:	42ab      	cmp	r3, r5
 800f6dc:	d00b      	beq.n	800f6f6 <ai_platform_network_post_init+0xfe>
 800f6de:	461d      	mov	r5, r3
 800f6e0:	b14b      	cbz	r3, 800f6f6 <ai_platform_network_post_init+0xfe>
 800f6e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6e4:	e7f4      	b.n	800f6d0 <ai_platform_network_post_init+0xd8>
 800f6e6:	f104 0010 	add.w	r0, r4, #16
 800f6ea:	2210      	movs	r2, #16
 800f6ec:	2111      	movs	r1, #17
 800f6ee:	f000 fa8b 	bl	800fc08 <core_set_error>
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	bd38      	pop	{r3, r4, r5, pc}
 800f6f6:	2001      	movs	r0, #1
 800f6f8:	bd38      	pop	{r3, r4, r5, pc}
 800f6fa:	bf00      	nop
 800f6fc:	a1c00100 	.word	0xa1c00100
 800f700:	e0002000 	.word	0xe0002000
 800f704:	e0042000 	.word	0xe0042000
 800f708:	58024c08 	.word	0x58024c08
 800f70c:	58024c00 	.word	0x58024c00
 800f710:	f407a5c2 	.word	0xf407a5c2
 800f714:	b5e8b5cd 	.word	0xb5e8b5cd
 800f718:	40023008 	.word	0x40023008
 800f71c:	40023000 	.word	0x40023000

0800f720 <ai_platform_network_process>:
 800f720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f724:	b085      	sub	sp, #20
 800f726:	460d      	mov	r5, r1
 800f728:	9202      	str	r2, [sp, #8]
 800f72a:	4604      	mov	r4, r0
 800f72c:	b120      	cbz	r0, 800f738 <ai_platform_network_process+0x18>
 800f72e:	4b73      	ldr	r3, [pc, #460]	; (800f8fc <ai_platform_network_process+0x1dc>)
 800f730:	6802      	ldr	r2, [r0, #0]
 800f732:	429a      	cmp	r2, r3
 800f734:	bf18      	it	ne
 800f736:	2400      	movne	r4, #0
 800f738:	4a71      	ldr	r2, [pc, #452]	; (800f900 <ai_platform_network_process+0x1e0>)
 800f73a:	6813      	ldr	r3, [r2, #0]
 800f73c:	f023 0301 	bic.w	r3, r3, #1
 800f740:	6013      	str	r3, [r2, #0]
 800f742:	f7ff fa3d 	bl	800ebc0 <_ai_platform_acquire_crc>
 800f746:	4b6f      	ldr	r3, [pc, #444]	; (800f904 <ai_platform_network_process+0x1e4>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f74e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f752:	d00d      	beq.n	800f770 <ai_platform_network_process+0x50>
 800f754:	4b6c      	ldr	r3, [pc, #432]	; (800f908 <ai_platform_network_process+0x1e8>)
 800f756:	2201      	movs	r2, #1
 800f758:	601a      	str	r2, [r3, #0]
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	2a00      	cmp	r2, #0
 800f75e:	d1fc      	bne.n	800f75a <ai_platform_network_process+0x3a>
 800f760:	4b6a      	ldr	r3, [pc, #424]	; (800f90c <ai_platform_network_process+0x1ec>)
 800f762:	4a6b      	ldr	r2, [pc, #428]	; (800f910 <ai_platform_network_process+0x1f0>)
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	4b6a      	ldr	r3, [pc, #424]	; (800f914 <ai_platform_network_process+0x1f4>)
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d00e      	beq.n	800f78c <ai_platform_network_process+0x6c>
 800f76e:	e7fe      	b.n	800f76e <ai_platform_network_process+0x4e>
 800f770:	4b69      	ldr	r3, [pc, #420]	; (800f918 <ai_platform_network_process+0x1f8>)
 800f772:	2201      	movs	r2, #1
 800f774:	601a      	str	r2, [r3, #0]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	2a00      	cmp	r2, #0
 800f77a:	d1fc      	bne.n	800f776 <ai_platform_network_process+0x56>
 800f77c:	4b67      	ldr	r3, [pc, #412]	; (800f91c <ai_platform_network_process+0x1fc>)
 800f77e:	4a64      	ldr	r2, [pc, #400]	; (800f910 <ai_platform_network_process+0x1f0>)
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	4b63      	ldr	r3, [pc, #396]	; (800f914 <ai_platform_network_process+0x1f4>)
 800f786:	429a      	cmp	r2, r3
 800f788:	d000      	beq.n	800f78c <ai_platform_network_process+0x6c>
 800f78a:	e7fe      	b.n	800f78a <ai_platform_network_process+0x6a>
 800f78c:	f7ff fa1a 	bl	800ebc4 <_ai_platform_release_crc>
 800f790:	2c00      	cmp	r4, #0
 800f792:	f000 8089 	beq.w	800f8a8 <ai_platform_network_process+0x188>
 800f796:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800f798:	2f00      	cmp	r7, #0
 800f79a:	f040 822b 	bne.w	800fbf4 <ai_platform_network_process+0x4d4>
 800f79e:	68e3      	ldr	r3, [r4, #12]
 800f7a0:	f003 0303 	and.w	r3, r3, #3
 800f7a4:	2600      	movs	r6, #0
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	6166      	str	r6, [r4, #20]
 800f7aa:	f040 821b 	bne.w	800fbe4 <ai_platform_network_process+0x4c4>
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	f000 809c 	beq.w	800f8ec <ai_platform_network_process+0x1cc>
 800f7b4:	2f00      	cmp	r7, #0
 800f7b6:	f000 8099 	beq.w	800f8ec <ai_platform_network_process+0x1cc>
 800f7ba:	883b      	ldrh	r3, [r7, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f000 8095 	beq.w	800f8ec <ai_platform_network_process+0x1cc>
 800f7c2:	69aa      	ldr	r2, [r5, #24]
 800f7c4:	9401      	str	r4, [sp, #4]
 800f7c6:	f8d2 8000 	ldr.w	r8, [r2]
 800f7ca:	429e      	cmp	r6, r3
 800f7cc:	f080 80a8 	bcs.w	800f920 <ai_platform_network_process+0x200>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f000 80a4 	beq.w	800f920 <ai_platform_network_process+0x200>
 800f7d8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800f7dc:	2c00      	cmp	r4, #0
 800f7de:	f000 809f 	beq.w	800f920 <ai_platform_network_process+0x200>
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	f8d3 b000 	ldr.w	fp, [r3]
 800f7e8:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800f7ec:	eb1b 0a09 	adds.w	sl, fp, r9
 800f7f0:	d07b      	beq.n	800f8ea <ai_platform_network_process+0x1ca>
 800f7f2:	69a3      	ldr	r3, [r4, #24]
 800f7f4:	2101      	movs	r1, #1
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	9303      	str	r3, [sp, #12]
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	f7ff f994 	bl	800eb28 <ai_buffer_get_size>
 800f800:	9b03      	ldr	r3, [sp, #12]
 800f802:	4283      	cmp	r3, r0
 800f804:	d368      	bcc.n	800f8d8 <ai_platform_network_process+0x1b8>
 800f806:	68e0      	ldr	r0, [r4, #12]
 800f808:	69a9      	ldr	r1, [r5, #24]
 800f80a:	68c2      	ldr	r2, [r0, #12]
 800f80c:	68cb      	ldr	r3, [r1, #12]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d162      	bne.n	800f8d8 <ai_platform_network_process+0x1b8>
 800f812:	6882      	ldr	r2, [r0, #8]
 800f814:	688b      	ldr	r3, [r1, #8]
 800f816:	429a      	cmp	r2, r3
 800f818:	d15e      	bne.n	800f8d8 <ai_platform_network_process+0x1b8>
 800f81a:	6842      	ldr	r2, [r0, #4]
 800f81c:	684b      	ldr	r3, [r1, #4]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d15a      	bne.n	800f8d8 <ai_platform_network_process+0x1b8>
 800f822:	69a3      	ldr	r3, [r4, #24]
 800f824:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f828:	f001 f8d0 	bl	80109cc <ai_array_get_data_byte_size>
 800f82c:	9003      	str	r0, [sp, #12]
 800f82e:	4620      	mov	r0, r4
 800f830:	f001 f83e 	bl	80108b0 <get_tensor_byte_size>
 800f834:	9b03      	ldr	r3, [sp, #12]
 800f836:	4283      	cmp	r3, r0
 800f838:	d34e      	bcc.n	800f8d8 <ai_platform_network_process+0x1b8>
 800f83a:	69a3      	ldr	r3, [r4, #24]
 800f83c:	6818      	ldr	r0, [r3, #0]
 800f83e:	f001 f84b 	bl	80108d8 <ai_array_to_buffer_fmt>
 800f842:	682b      	ldr	r3, [r5, #0]
 800f844:	4043      	eors	r3, r0
 800f846:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800f84a:	d13c      	bne.n	800f8c6 <ai_platform_network_process+0x1a6>
 800f84c:	686b      	ldr	r3, [r5, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d04b      	beq.n	800f8ea <ai_platform_network_process+0x1ca>
 800f852:	69ab      	ldr	r3, [r5, #24]
 800f854:	681a      	ldr	r2, [r3, #0]
 800f856:	b362      	cbz	r2, 800f8b2 <ai_platform_network_process+0x192>
 800f858:	4620      	mov	r0, r4
 800f85a:	9203      	str	r2, [sp, #12]
 800f85c:	f001 f828 	bl	80108b0 <get_tensor_byte_size>
 800f860:	f8ca 0008 	str.w	r0, [sl, #8]
 800f864:	69ab      	ldr	r3, [r5, #24]
 800f866:	9a03      	ldr	r2, [sp, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	fb03 f000 	mul.w	r0, r3, r0
 800f86e:	f8ca 000c 	str.w	r0, [sl, #12]
 800f872:	6869      	ldr	r1, [r5, #4]
 800f874:	f8ca 1004 	str.w	r1, [sl, #4]
 800f878:	686b      	ldr	r3, [r5, #4]
 800f87a:	4403      	add	r3, r0
 800f87c:	f84b 3009 	str.w	r3, [fp, r9]
 800f880:	69a0      	ldr	r0, [r4, #24]
 800f882:	6803      	ldr	r3, [r0, #0]
 800f884:	4590      	cmp	r8, r2
 800f886:	bf38      	it	cc
 800f888:	4690      	movcc	r8, r2
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	d408      	bmi.n	800f8a0 <ai_platform_network_process+0x180>
 800f88e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f892:	1a9b      	subs	r3, r3, r2
 800f894:	4419      	add	r1, r3
 800f896:	6081      	str	r1, [r0, #8]
 800f898:	69a3      	ldr	r3, [r4, #24]
 800f89a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f89e:	60da      	str	r2, [r3, #12]
 800f8a0:	883b      	ldrh	r3, [r7, #0]
 800f8a2:	3601      	adds	r6, #1
 800f8a4:	351c      	adds	r5, #28
 800f8a6:	e790      	b.n	800f7ca <ai_platform_network_process+0xaa>
 800f8a8:	4623      	mov	r3, r4
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	b005      	add	sp, #20
 800f8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b2:	9c01      	ldr	r4, [sp, #4]
 800f8b4:	4692      	mov	sl, r2
 800f8b6:	f104 0010 	add.w	r0, r4, #16
 800f8ba:	2221      	movs	r2, #33	; 0x21
 800f8bc:	2112      	movs	r1, #18
 800f8be:	f000 f9a3 	bl	800fc08 <core_set_error>
 800f8c2:	4653      	mov	r3, sl
 800f8c4:	e7f1      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800f8c6:	9c01      	ldr	r4, [sp, #4]
 800f8c8:	2219      	movs	r2, #25
 800f8ca:	f104 0010 	add.w	r0, r4, #16
 800f8ce:	2112      	movs	r1, #18
 800f8d0:	f000 f99a 	bl	800fc08 <core_set_error>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	e7e8      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800f8d8:	9c01      	ldr	r4, [sp, #4]
 800f8da:	2218      	movs	r2, #24
 800f8dc:	f104 0010 	add.w	r0, r4, #16
 800f8e0:	2112      	movs	r1, #18
 800f8e2:	f000 f991 	bl	800fc08 <core_set_error>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e7df      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800f8ea:	9c01      	ldr	r4, [sp, #4]
 800f8ec:	f104 0010 	add.w	r0, r4, #16
 800f8f0:	2217      	movs	r2, #23
 800f8f2:	2112      	movs	r1, #18
 800f8f4:	f000 f988 	bl	800fc08 <core_set_error>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	e7d6      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800f8fc:	a1c00100 	.word	0xa1c00100
 800f900:	e0002000 	.word	0xe0002000
 800f904:	e0042000 	.word	0xe0042000
 800f908:	58024c08 	.word	0x58024c08
 800f90c:	58024c00 	.word	0x58024c00
 800f910:	f407a5c2 	.word	0xf407a5c2
 800f914:	b5e8b5cd 	.word	0xb5e8b5cd
 800f918:	40023008 	.word	0x40023008
 800f91c:	40023000 	.word	0x40023000
 800f920:	9c01      	ldr	r4, [sp, #4]
 800f922:	9a02      	ldr	r2, [sp, #8]
 800f924:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800f926:	2a00      	cmp	r2, #0
 800f928:	f000 80ab 	beq.w	800fa82 <ai_platform_network_process+0x362>
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	f240 809e 	bls.w	800fa6e <ai_platform_network_process+0x34e>
 800f932:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800f936:	f119 0f0c 	cmn.w	r9, #12
 800f93a:	f000 8098 	beq.w	800fa6e <ai_platform_network_process+0x34e>
 800f93e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 8093 	beq.w	800fa6e <ai_platform_network_process+0x34e>
 800f948:	9d02      	ldr	r5, [sp, #8]
 800f94a:	9401      	str	r4, [sp, #4]
 800f94c:	2700      	movs	r7, #0
 800f94e:	429f      	cmp	r7, r3
 800f950:	f080 8095 	bcs.w	800fa7e <ai_platform_network_process+0x35e>
 800f954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 8090 	beq.w	800fa7e <ai_platform_network_process+0x35e>
 800f95e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f962:	2c00      	cmp	r4, #0
 800f964:	f000 808b 	beq.w	800fa7e <ai_platform_network_process+0x35e>
 800f968:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f96c:	f8d3 b000 	ldr.w	fp, [r3]
 800f970:	013e      	lsls	r6, r7, #4
 800f972:	eb1b 0a06 	adds.w	sl, fp, r6
 800f976:	f000 812c 	beq.w	800fbd2 <ai_platform_network_process+0x4b2>
 800f97a:	69a3      	ldr	r3, [r4, #24]
 800f97c:	2101      	movs	r1, #1
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	9302      	str	r3, [sp, #8]
 800f982:	4628      	mov	r0, r5
 800f984:	f7ff f8d0 	bl	800eb28 <ai_buffer_get_size>
 800f988:	9b02      	ldr	r3, [sp, #8]
 800f98a:	4283      	cmp	r3, r0
 800f98c:	d36e      	bcc.n	800fa6c <ai_platform_network_process+0x34c>
 800f98e:	68e0      	ldr	r0, [r4, #12]
 800f990:	69a9      	ldr	r1, [r5, #24]
 800f992:	68c2      	ldr	r2, [r0, #12]
 800f994:	68cb      	ldr	r3, [r1, #12]
 800f996:	429a      	cmp	r2, r3
 800f998:	d168      	bne.n	800fa6c <ai_platform_network_process+0x34c>
 800f99a:	6882      	ldr	r2, [r0, #8]
 800f99c:	688b      	ldr	r3, [r1, #8]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d164      	bne.n	800fa6c <ai_platform_network_process+0x34c>
 800f9a2:	6842      	ldr	r2, [r0, #4]
 800f9a4:	684b      	ldr	r3, [r1, #4]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d160      	bne.n	800fa6c <ai_platform_network_process+0x34c>
 800f9aa:	69a3      	ldr	r3, [r4, #24]
 800f9ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9b0:	f001 f80c 	bl	80109cc <ai_array_get_data_byte_size>
 800f9b4:	9002      	str	r0, [sp, #8]
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f000 ff7a 	bl	80108b0 <get_tensor_byte_size>
 800f9bc:	9b02      	ldr	r3, [sp, #8]
 800f9be:	4283      	cmp	r3, r0
 800f9c0:	d354      	bcc.n	800fa6c <ai_platform_network_process+0x34c>
 800f9c2:	69a3      	ldr	r3, [r4, #24]
 800f9c4:	6818      	ldr	r0, [r3, #0]
 800f9c6:	f000 ff87 	bl	80108d8 <ai_array_to_buffer_fmt>
 800f9ca:	682b      	ldr	r3, [r5, #0]
 800f9cc:	4043      	eors	r3, r0
 800f9ce:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800f9d2:	d142      	bne.n	800fa5a <ai_platform_network_process+0x33a>
 800f9d4:	686b      	ldr	r3, [r5, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d035      	beq.n	800fa46 <ai_platform_network_process+0x326>
 800f9da:	69ab      	ldr	r3, [r5, #24]
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	b342      	cbz	r2, 800fa32 <ai_platform_network_process+0x312>
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	9202      	str	r2, [sp, #8]
 800f9e4:	f000 ff64 	bl	80108b0 <get_tensor_byte_size>
 800f9e8:	f8ca 0008 	str.w	r0, [sl, #8]
 800f9ec:	69ab      	ldr	r3, [r5, #24]
 800f9ee:	9a02      	ldr	r2, [sp, #8]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	fb03 f000 	mul.w	r0, r3, r0
 800f9f6:	f8ca 000c 	str.w	r0, [sl, #12]
 800f9fa:	6869      	ldr	r1, [r5, #4]
 800f9fc:	f8ca 1004 	str.w	r1, [sl, #4]
 800fa00:	686b      	ldr	r3, [r5, #4]
 800fa02:	4403      	add	r3, r0
 800fa04:	f84b 3006 	str.w	r3, [fp, r6]
 800fa08:	69a0      	ldr	r0, [r4, #24]
 800fa0a:	6803      	ldr	r3, [r0, #0]
 800fa0c:	4590      	cmp	r8, r2
 800fa0e:	bf38      	it	cc
 800fa10:	4690      	movcc	r8, r2
 800fa12:	009e      	lsls	r6, r3, #2
 800fa14:	d408      	bmi.n	800fa28 <ai_platform_network_process+0x308>
 800fa16:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800fa1a:	1a9b      	subs	r3, r3, r2
 800fa1c:	4419      	add	r1, r3
 800fa1e:	6081      	str	r1, [r0, #8]
 800fa20:	69a3      	ldr	r3, [r4, #24]
 800fa22:	f8da 2004 	ldr.w	r2, [sl, #4]
 800fa26:	60da      	str	r2, [r3, #12]
 800fa28:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800fa2c:	3701      	adds	r7, #1
 800fa2e:	351c      	adds	r5, #28
 800fa30:	e78d      	b.n	800f94e <ai_platform_network_process+0x22e>
 800fa32:	9c01      	ldr	r4, [sp, #4]
 800fa34:	4692      	mov	sl, r2
 800fa36:	f104 0010 	add.w	r0, r4, #16
 800fa3a:	2221      	movs	r2, #33	; 0x21
 800fa3c:	2113      	movs	r1, #19
 800fa3e:	f000 f8e3 	bl	800fc08 <core_set_error>
 800fa42:	4653      	mov	r3, sl
 800fa44:	e731      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800fa46:	9c01      	ldr	r4, [sp, #4]
 800fa48:	469a      	mov	sl, r3
 800fa4a:	f104 0010 	add.w	r0, r4, #16
 800fa4e:	2217      	movs	r2, #23
 800fa50:	2113      	movs	r1, #19
 800fa52:	f000 f8d9 	bl	800fc08 <core_set_error>
 800fa56:	4653      	mov	r3, sl
 800fa58:	e727      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800fa5a:	9c01      	ldr	r4, [sp, #4]
 800fa5c:	2219      	movs	r2, #25
 800fa5e:	f104 0010 	add.w	r0, r4, #16
 800fa62:	2113      	movs	r1, #19
 800fa64:	f000 f8d0 	bl	800fc08 <core_set_error>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e71e      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800fa6c:	9c01      	ldr	r4, [sp, #4]
 800fa6e:	f104 0010 	add.w	r0, r4, #16
 800fa72:	2218      	movs	r2, #24
 800fa74:	2113      	movs	r1, #19
 800fa76:	f000 f8c7 	bl	800fc08 <core_set_error>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	e715      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800fa7e:	9c01      	ldr	r4, [sp, #4]
 800fa80:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800fa82:	f8a4 8014 	strh.w	r8, [r4, #20]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 80a0 	beq.w	800fbcc <ai_platform_network_process+0x4ac>
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fa90:	f240 809a 	bls.w	800fbc8 <ai_platform_network_process+0x4a8>
 800fa94:	f105 070c 	add.w	r7, r5, #12
 800fa98:	8ae3      	ldrh	r3, [r4, #22]
 800fa9a:	8aa2      	ldrh	r2, [r4, #20]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	f67f af04 	bls.w	800f8aa <ai_platform_network_process+0x18a>
 800faa2:	46a3      	mov	fp, r4
 800faa4:	2d00      	cmp	r5, #0
 800faa6:	d036      	beq.n	800fb16 <ai_platform_network_process+0x3f6>
 800faa8:	882b      	ldrh	r3, [r5, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d033      	beq.n	800fb16 <ai_platform_network_process+0x3f6>
 800faae:	686b      	ldr	r3, [r5, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d030      	beq.n	800fb16 <ai_platform_network_process+0x3f6>
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f04f 0800 	mov.w	r8, #0
 800faba:	b9db      	cbnz	r3, 800faf4 <ai_platform_network_process+0x3d4>
 800fabc:	e02b      	b.n	800fb16 <ai_platform_network_process+0x3f6>
 800fabe:	68d4      	ldr	r4, [r2, #12]
 800fac0:	1b00      	subs	r0, r0, r4
 800fac2:	4401      	add	r1, r0
 800fac4:	6091      	str	r1, [r2, #8]
 800fac6:	699b      	ldr	r3, [r3, #24]
 800fac8:	6872      	ldr	r2, [r6, #4]
 800faca:	60da      	str	r2, [r3, #12]
 800facc:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800fad0:	f85a 2009 	ldr.w	r2, [sl, r9]
 800fad4:	440b      	add	r3, r1
 800fad6:	4293      	cmp	r3, r2
 800fad8:	bf24      	itt	cs
 800fada:	68f3      	ldrcs	r3, [r6, #12]
 800fadc:	1ad3      	subcs	r3, r2, r3
 800fade:	6073      	str	r3, [r6, #4]
 800fae0:	882b      	ldrh	r3, [r5, #0]
 800fae2:	f108 0801 	add.w	r8, r8, #1
 800fae6:	4598      	cmp	r8, r3
 800fae8:	d215      	bcs.n	800fb16 <ai_platform_network_process+0x3f6>
 800faea:	686b      	ldr	r3, [r5, #4]
 800faec:	b19b      	cbz	r3, 800fb16 <ai_platform_network_process+0x3f6>
 800faee:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800faf2:	b183      	cbz	r3, 800fb16 <ai_platform_network_process+0x3f6>
 800faf4:	68a9      	ldr	r1, [r5, #8]
 800faf6:	699a      	ldr	r2, [r3, #24]
 800faf8:	f8d1 a000 	ldr.w	sl, [r1]
 800fafc:	6814      	ldr	r4, [r2, #0]
 800fafe:	6890      	ldr	r0, [r2, #8]
 800fb00:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800fb04:	eb0a 0609 	add.w	r6, sl, r9
 800fb08:	00a4      	lsls	r4, r4, #2
 800fb0a:	6871      	ldr	r1, [r6, #4]
 800fb0c:	d5d7      	bpl.n	800fabe <ai_platform_network_process+0x39e>
 800fb0e:	68b2      	ldr	r2, [r6, #8]
 800fb10:	f000 ff9e 	bl	8010a50 <memcpy>
 800fb14:	e7da      	b.n	800facc <ai_platform_network_process+0x3ac>
 800fb16:	4658      	mov	r0, fp
 800fb18:	f000 fe76 	bl	8010808 <ai_layers_forward_all>
 800fb1c:	2f00      	cmp	r7, #0
 800fb1e:	d047      	beq.n	800fbb0 <ai_platform_network_process+0x490>
 800fb20:	883b      	ldrh	r3, [r7, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d044      	beq.n	800fbb0 <ai_platform_network_process+0x490>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d041      	beq.n	800fbb0 <ai_platform_network_process+0x490>
 800fb2c:	6818      	ldr	r0, [r3, #0]
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d03e      	beq.n	800fbb0 <ai_platform_network_process+0x490>
 800fb32:	f04f 0800 	mov.w	r8, #0
 800fb36:	e019      	b.n	800fb6c <ai_platform_network_process+0x44c>
 800fb38:	f85a 2009 	ldr.w	r2, [sl, r9]
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	bf24      	itt	cs
 800fb40:	68f3      	ldrcs	r3, [r6, #12]
 800fb42:	1ad3      	subcs	r3, r2, r3
 800fb44:	6073      	str	r3, [r6, #4]
 800fb46:	6981      	ldr	r1, [r0, #24]
 800fb48:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800fb4c:	1b12      	subs	r2, r2, r4
 800fb4e:	4413      	add	r3, r2
 800fb50:	608b      	str	r3, [r1, #8]
 800fb52:	6983      	ldr	r3, [r0, #24]
 800fb54:	6872      	ldr	r2, [r6, #4]
 800fb56:	60da      	str	r2, [r3, #12]
 800fb58:	883b      	ldrh	r3, [r7, #0]
 800fb5a:	f108 0801 	add.w	r8, r8, #1
 800fb5e:	4598      	cmp	r8, r3
 800fb60:	d226      	bcs.n	800fbb0 <ai_platform_network_process+0x490>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	b323      	cbz	r3, 800fbb0 <ai_platform_network_process+0x490>
 800fb66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fb6a:	b308      	cbz	r0, 800fbb0 <ai_platform_network_process+0x490>
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	6981      	ldr	r1, [r0, #24]
 800fb70:	f8d3 a000 	ldr.w	sl, [r3]
 800fb74:	680c      	ldr	r4, [r1, #0]
 800fb76:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800fb7a:	eb0a 0609 	add.w	r6, sl, r9
 800fb7e:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800fb82:	00a4      	lsls	r4, r4, #2
 800fb84:	eb0c 0302 	add.w	r3, ip, r2
 800fb88:	d5d6      	bpl.n	800fb38 <ai_platform_network_process+0x418>
 800fb8a:	6889      	ldr	r1, [r1, #8]
 800fb8c:	4660      	mov	r0, ip
 800fb8e:	f000 ff5f 	bl	8010a50 <memcpy>
 800fb92:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800fb96:	f85a 2009 	ldr.w	r2, [sl, r9]
 800fb9a:	440b      	add	r3, r1
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	bf24      	itt	cs
 800fba0:	68f3      	ldrcs	r3, [r6, #12]
 800fba2:	1ad3      	subcs	r3, r2, r3
 800fba4:	6073      	str	r3, [r6, #4]
 800fba6:	883b      	ldrh	r3, [r7, #0]
 800fba8:	f108 0801 	add.w	r8, r8, #1
 800fbac:	4598      	cmp	r8, r3
 800fbae:	d3d8      	bcc.n	800fb62 <ai_platform_network_process+0x442>
 800fbb0:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800fbb4:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	f8ab 3016 	strh.w	r3, [fp, #22]
 800fbc2:	f63f af6f 	bhi.w	800faa4 <ai_platform_network_process+0x384>
 800fbc6:	e670      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800fbc8:	2700      	movs	r7, #0
 800fbca:	e765      	b.n	800fa98 <ai_platform_network_process+0x378>
 800fbcc:	461d      	mov	r5, r3
 800fbce:	461f      	mov	r7, r3
 800fbd0:	e762      	b.n	800fa98 <ai_platform_network_process+0x378>
 800fbd2:	9c01      	ldr	r4, [sp, #4]
 800fbd4:	2217      	movs	r2, #23
 800fbd6:	f104 0010 	add.w	r0, r4, #16
 800fbda:	2113      	movs	r1, #19
 800fbdc:	f000 f814 	bl	800fc08 <core_set_error>
 800fbe0:	4653      	mov	r3, sl
 800fbe2:	e662      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800fbe4:	f104 0010 	add.w	r0, r4, #16
 800fbe8:	2230      	movs	r2, #48	; 0x30
 800fbea:	2111      	movs	r1, #17
 800fbec:	f000 f80c 	bl	800fc08 <core_set_error>
 800fbf0:	4633      	mov	r3, r6
 800fbf2:	e65a      	b.n	800f8aa <ai_platform_network_process+0x18a>
 800fbf4:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800fbf6:	e5d2      	b.n	800f79e <ai_platform_network_process+0x7e>

0800fbf8 <core_init>:
 800fbf8:	2001      	movs	r0, #1
 800fbfa:	4770      	bx	lr

0800fbfc <core_get_error>:
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2200      	movs	r2, #0
 800fc00:	6800      	ldr	r0, [r0, #0]
 800fc02:	601a      	str	r2, [r3, #0]
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop

0800fc08 <core_set_error>:
 800fc08:	7803      	ldrb	r3, [r0, #0]
 800fc0a:	b933      	cbnz	r3, 800fc1a <core_set_error+0x12>
 800fc0c:	7001      	strb	r1, [r0, #0]
 800fc0e:	6803      	ldr	r3, [r0, #0]
 800fc10:	f362 231f 	bfi	r3, r2, #8, #24
 800fc14:	6003      	str	r3, [r0, #0]
 800fc16:	2001      	movs	r0, #1
 800fc18:	4770      	bx	lr
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop

0800fc20 <forward_dense>:
 800fc20:	6983      	ldr	r3, [r0, #24]
 800fc22:	881a      	ldrh	r2, [r3, #0]
 800fc24:	2a00      	cmp	r2, #0
 800fc26:	f000 8193 	beq.w	800ff50 <forward_dense+0x330>
 800fc2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2e:	ed2d 8b10 	vpush	{d8-d15}
 800fc32:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800fc36:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800fc3a:	b099      	sub	sp, #100	; 0x64
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f000 8194 	beq.w	800ff6a <forward_dense+0x34a>
 800fc42:	f8d3 8000 	ldr.w	r8, [r3]
 800fc46:	2a01      	cmp	r2, #1
 800fc48:	f240 817f 	bls.w	800ff4a <forward_dense+0x32a>
 800fc4c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800fc50:	b104      	cbz	r4, 800fc54 <forward_dense+0x34>
 800fc52:	6824      	ldr	r4, [r4, #0]
 800fc54:	2a02      	cmp	r2, #2
 800fc56:	f000 817d 	beq.w	800ff54 <forward_dense+0x334>
 800fc5a:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	f040 817b 	bne.w	800ff5a <forward_dense+0x33a>
 800fc64:	f11c 0118 	adds.w	r1, ip, #24
 800fc68:	930e      	str	r3, [sp, #56]	; 0x38
 800fc6a:	f000 817c 	beq.w	800ff66 <forward_dense+0x346>
 800fc6e:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 800fc72:	2901      	cmp	r1, #1
 800fc74:	f240 83ab 	bls.w	80103ce <forward_dense+0x7ae>
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 8178 	beq.w	800ff6e <forward_dense+0x34e>
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc84:	68e7      	ldr	r7, [r4, #12]
 800fc86:	6998      	ldr	r0, [r3, #24]
 800fc88:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800fc8c:	6803      	ldr	r3, [r0, #0]
 800fc8e:	6849      	ldr	r1, [r1, #4]
 800fc90:	9115      	str	r1, [sp, #84]	; 0x54
 800fc92:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 800fc96:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800fc9a:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800fc9e:	fa4e f101 	asr.w	r1, lr, r1
 800fca2:	2a03      	cmp	r2, #3
 800fca4:	68ff      	ldr	r7, [r7, #12]
 800fca6:	9113      	str	r1, [sp, #76]	; 0x4c
 800fca8:	fb05 f506 	mul.w	r5, r5, r6
 800fcac:	f000 8373 	beq.w	8010396 <forward_dense+0x776>
 800fcb0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800fcb4:	2a00      	cmp	r2, #0
 800fcb6:	f000 8371 	beq.w	801039c <forward_dense+0x77c>
 800fcba:	6812      	ldr	r2, [r2, #0]
 800fcbc:	2a00      	cmp	r2, #0
 800fcbe:	f000 836d 	beq.w	801039c <forward_dense+0x77c>
 800fcc2:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800fcc6:	2b04      	cmp	r3, #4
 800fcc8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800fccc:	f000 836c 	beq.w	80103a8 <forward_dense+0x788>
 800fcd0:	2b08      	cmp	r3, #8
 800fcd2:	f000 8369 	beq.w	80103a8 <forward_dense+0x788>
 800fcd6:	f04f 0a00 	mov.w	sl, #0
 800fcda:	69a3      	ldr	r3, [r4, #24]
 800fcdc:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800fce0:	6899      	ldr	r1, [r3, #8]
 800fce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fce4:	9102      	str	r1, [sp, #8]
 800fce6:	695b      	ldr	r3, [r3, #20]
 800fce8:	6892      	ldr	r2, [r2, #8]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	9305      	str	r3, [sp, #20]
 800fcee:	00ad      	lsls	r5, r5, #2
 800fcf0:	fb07 1005 	mla	r0, r7, r5, r1
 800fcf4:	00b4      	lsls	r4, r6, #2
 800fcf6:	4281      	cmp	r1, r0
 800fcf8:	9011      	str	r0, [sp, #68]	; 0x44
 800fcfa:	9410      	str	r4, [sp, #64]	; 0x40
 800fcfc:	eb01 0804 	add.w	r8, r1, r4
 800fd00:	f080 811e 	bcs.w	800ff40 <forward_dense+0x320>
 800fd04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fd06:	eddf faa0 	vldr	s31, [pc, #640]	; 800ff88 <forward_dense+0x368>
 800fd0a:	08e8      	lsrs	r0, r5, #3
 800fd0c:	0141      	lsls	r1, r0, #5
 800fd0e:	f025 0301 	bic.w	r3, r5, #1
 800fd12:	4606      	mov	r6, r0
 800fd14:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 800fd18:	9001      	str	r0, [sp, #4]
 800fd1a:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 800fd1e:	00f7      	lsls	r7, r6, #3
 800fd20:	9316      	str	r3, [sp, #88]	; 0x58
 800fd22:	0143      	lsls	r3, r0, #5
 800fd24:	00b6      	lsls	r6, r6, #2
 800fd26:	f1a5 0410 	sub.w	r4, r5, #16
 800fd2a:	9307      	str	r3, [sp, #28]
 800fd2c:	f107 0308 	add.w	r3, r7, #8
 800fd30:	0924      	lsrs	r4, r4, #4
 800fd32:	9304      	str	r3, [sp, #16]
 800fd34:	1d33      	adds	r3, r6, #4
 800fd36:	3401      	adds	r4, #1
 800fd38:	930d      	str	r3, [sp, #52]	; 0x34
 800fd3a:	f005 0301 	and.w	r3, r5, #1
 800fd3e:	01a4      	lsls	r4, r4, #6
 800fd40:	f005 0907 	and.w	r9, r5, #7
 800fd44:	9309      	str	r3, [sp, #36]	; 0x24
 800fd46:	00ab      	lsls	r3, r5, #2
 800fd48:	9312      	str	r3, [sp, #72]	; 0x48
 800fd4a:	9703      	str	r7, [sp, #12]
 800fd4c:	960c      	str	r6, [sp, #48]	; 0x30
 800fd4e:	9417      	str	r4, [sp, #92]	; 0x5c
 800fd50:	eb02 0b01 	add.w	fp, r2, r1
 800fd54:	4653      	mov	r3, sl
 800fd56:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800fd5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd5c:	9907      	ldr	r1, [sp, #28]
 800fd5e:	6992      	ldr	r2, [r2, #24]
 800fd60:	6894      	ldr	r4, [r2, #8]
 800fd62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd64:	4459      	add	r1, fp
 800fd66:	9106      	str	r1, [sp, #24]
 800fd68:	2a00      	cmp	r2, #0
 800fd6a:	f000 810f 	beq.w	800ff8c <forward_dense+0x36c>
 800fd6e:	6992      	ldr	r2, [r2, #24]
 800fd70:	6896      	ldr	r6, [r2, #8]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f000 810e 	beq.w	800ff94 <forward_dense+0x374>
 800fd78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd7a:	2a04      	cmp	r2, #4
 800fd7c:	f000 821e 	beq.w	80101bc <forward_dense+0x59c>
 800fd80:	9a02      	ldr	r2, [sp, #8]
 800fd82:	4590      	cmp	r8, r2
 800fd84:	f240 80d3 	bls.w	800ff2e <forward_dense+0x30e>
 800fd88:	4694      	mov	ip, r2
 800fd8a:	9a07      	ldr	r2, [sp, #28]
 800fd8c:	f8dd a014 	ldr.w	sl, [sp, #20]
 800fd90:	f102 0e20 	add.w	lr, r2, #32
 800fd94:	46b1      	mov	r9, r6
 800fd96:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800fd98:	44de      	add	lr, fp
 800fd9a:	f1b9 0f00 	cmp.w	r9, #0
 800fd9e:	f000 80e8 	beq.w	800ff72 <forward_dense+0x352>
 800fda2:	9a01      	ldr	r2, [sp, #4]
 800fda4:	edd9 2a00 	vldr	s5, [r9]
 800fda8:	eddf 6a77 	vldr	s13, [pc, #476]	; 800ff88 <forward_dense+0x368>
 800fdac:	f109 0904 	add.w	r9, r9, #4
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	f000 80e6 	beq.w	800ff82 <forward_dense+0x362>
 800fdb6:	9904      	ldr	r1, [sp, #16]
 800fdb8:	f104 0208 	add.w	r2, r4, #8
 800fdbc:	190f      	adds	r7, r1, r4
 800fdbe:	4671      	mov	r1, lr
 800fdc0:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800fdc4:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800fdc8:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 800fdcc:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 800fdd0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800fdd4:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 800fdd8:	ed51 3a04 	vldr	s7, [r1, #-16]
 800fddc:	ed51 4a03 	vldr	s9, [r1, #-12]
 800fde0:	ed51 5a02 	vldr	s11, [r1, #-8]
 800fde4:	ed11 6a01 	vldr	s12, [r1, #-4]
 800fde8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fdec:	ed95 7a00 	vldr	s14, [r5]
 800fdf0:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 800fdf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fdf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdfc:	ed90 7a00 	vldr	s14, [r0]
 800fe00:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 800fe04:	eee7 7a03 	vfma.f32	s15, s14, s6
 800fe08:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fe0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe10:	ed95 3a00 	vldr	s6, [r5]
 800fe14:	ed90 7a00 	vldr	s14, [r0]
 800fe18:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 800fe1c:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800fe20:	eee3 7a04 	vfma.f32	s15, s6, s8
 800fe24:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fe28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe2c:	ed95 3a00 	vldr	s6, [r5]
 800fe30:	ed90 4a00 	vldr	s8, [r0]
 800fe34:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 800fe38:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800fe3c:	eee7 7a05 	vfma.f32	s15, s14, s10
 800fe40:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fe44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe48:	ed95 5a00 	vldr	s10, [r5]
 800fe4c:	ed90 7a00 	vldr	s14, [r0]
 800fe50:	eee3 7a23 	vfma.f32	s15, s6, s7
 800fe54:	3208      	adds	r2, #8
 800fe56:	4297      	cmp	r7, r2
 800fe58:	f101 0120 	add.w	r1, r1, #32
 800fe5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fe60:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fe64:	eee7 7a06 	vfma.f32	s15, s14, s12
 800fe68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fe6c:	d1a8      	bne.n	800fdc0 <forward_dense+0x1a0>
 800fe6e:	9a03      	ldr	r2, [sp, #12]
 800fe70:	18a1      	adds	r1, r4, r2
 800fe72:	465a      	mov	r2, fp
 800fe74:	2e00      	cmp	r6, #0
 800fe76:	d04a      	beq.n	800ff0e <forward_dense+0x2ee>
 800fe78:	7808      	ldrb	r0, [r1, #0]
 800fe7a:	ed92 7a00 	vldr	s14, [r2]
 800fe7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe82:	edd0 7a00 	vldr	s15, [r0]
 800fe86:	2e01      	cmp	r6, #1
 800fe88:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fe8c:	d03f      	beq.n	800ff0e <forward_dense+0x2ee>
 800fe8e:	7848      	ldrb	r0, [r1, #1]
 800fe90:	edd2 7a01 	vldr	s15, [r2, #4]
 800fe94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe98:	ed90 7a00 	vldr	s14, [r0]
 800fe9c:	2e02      	cmp	r6, #2
 800fe9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fea2:	d034      	beq.n	800ff0e <forward_dense+0x2ee>
 800fea4:	7888      	ldrb	r0, [r1, #2]
 800fea6:	edd2 7a02 	vldr	s15, [r2, #8]
 800feaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800feae:	ed90 7a00 	vldr	s14, [r0]
 800feb2:	2e03      	cmp	r6, #3
 800feb4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800feb8:	d029      	beq.n	800ff0e <forward_dense+0x2ee>
 800feba:	78c8      	ldrb	r0, [r1, #3]
 800febc:	edd2 7a03 	vldr	s15, [r2, #12]
 800fec0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fec4:	ed90 7a00 	vldr	s14, [r0]
 800fec8:	2e04      	cmp	r6, #4
 800feca:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fece:	d01e      	beq.n	800ff0e <forward_dense+0x2ee>
 800fed0:	7908      	ldrb	r0, [r1, #4]
 800fed2:	edd2 7a04 	vldr	s15, [r2, #16]
 800fed6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800feda:	ed90 7a00 	vldr	s14, [r0]
 800fede:	2e05      	cmp	r6, #5
 800fee0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fee4:	d013      	beq.n	800ff0e <forward_dense+0x2ee>
 800fee6:	7948      	ldrb	r0, [r1, #5]
 800fee8:	edd2 7a05 	vldr	s15, [r2, #20]
 800feec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fef0:	ed90 7a00 	vldr	s14, [r0]
 800fef4:	2e06      	cmp	r6, #6
 800fef6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fefa:	d008      	beq.n	800ff0e <forward_dense+0x2ee>
 800fefc:	7989      	ldrb	r1, [r1, #6]
 800fefe:	edd2 7a06 	vldr	s15, [r2, #24]
 800ff02:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800ff06:	ed92 7a00 	vldr	s14, [r2]
 800ff0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ff0e:	4454      	add	r4, sl
 800ff10:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800ff14:	ecec 6a01 	vstmia	ip!, {s13}
 800ff18:	45c4      	cmp	ip, r8
 800ff1a:	f4ff af3e 	bcc.w	800fd9a <forward_dense+0x17a>
 800ff1e:	9902      	ldr	r1, [sp, #8]
 800ff20:	43ca      	mvns	r2, r1
 800ff22:	4442      	add	r2, r8
 800ff24:	f022 0203 	bic.w	r2, r2, #3
 800ff28:	3204      	adds	r2, #4
 800ff2a:	188a      	adds	r2, r1, r2
 800ff2c:	9202      	str	r2, [sp, #8]
 800ff2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff30:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ff32:	4490      	add	r8, r2
 800ff34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff36:	4493      	add	fp, r2
 800ff38:	9a02      	ldr	r2, [sp, #8]
 800ff3a:	428a      	cmp	r2, r1
 800ff3c:	f4ff af0d 	bcc.w	800fd5a <forward_dense+0x13a>
 800ff40:	b019      	add	sp, #100	; 0x64
 800ff42:	ecbd 8b10 	vpop	{d8-d15}
 800ff46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	deff      	udf	#255	; 0xff
 800ff50:	6853      	ldr	r3, [r2, #4]
 800ff52:	deff      	udf	#255	; 0xff
 800ff54:	2300      	movs	r3, #0
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	deff      	udf	#255	; 0xff
 800ff5a:	6819      	ldr	r1, [r3, #0]
 800ff5c:	910e      	str	r1, [sp, #56]	; 0x38
 800ff5e:	f11c 0118 	adds.w	r1, ip, #24
 800ff62:	f47f ae84 	bne.w	800fc6e <forward_dense+0x4e>
 800ff66:	910f      	str	r1, [sp, #60]	; 0x3c
 800ff68:	e68b      	b.n	800fc82 <forward_dense+0x62>
 800ff6a:	4698      	mov	r8, r3
 800ff6c:	e66b      	b.n	800fc46 <forward_dense+0x26>
 800ff6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff70:	e687      	b.n	800fc82 <forward_dense+0x62>
 800ff72:	9a01      	ldr	r2, [sp, #4]
 800ff74:	eddf 6a04 	vldr	s13, [pc, #16]	; 800ff88 <forward_dense+0x368>
 800ff78:	eef0 2a6f 	vmov.f32	s5, s31
 800ff7c:	2a00      	cmp	r2, #0
 800ff7e:	f47f af1a 	bne.w	800fdb6 <forward_dense+0x196>
 800ff82:	9a06      	ldr	r2, [sp, #24]
 800ff84:	4621      	mov	r1, r4
 800ff86:	e775      	b.n	800fe74 <forward_dense+0x254>
 800ff88:	00000000 	.word	0x00000000
 800ff8c:	4616      	mov	r6, r2
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f47f aef2 	bne.w	800fd78 <forward_dense+0x158>
 800ff94:	9a02      	ldr	r2, [sp, #8]
 800ff96:	4590      	cmp	r8, r2
 800ff98:	d9c9      	bls.n	800ff2e <forward_dense+0x30e>
 800ff9a:	4615      	mov	r5, r2
 800ff9c:	9a07      	ldr	r2, [sp, #28]
 800ff9e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ffa0:	9308      	str	r3, [sp, #32]
 800ffa2:	f102 0740 	add.w	r7, r2, #64	; 0x40
 800ffa6:	9a06      	ldr	r2, [sp, #24]
 800ffa8:	9b05      	ldr	r3, [sp, #20]
 800ffaa:	4610      	mov	r0, r2
 800ffac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ffae:	445f      	add	r7, fp
 800ffb0:	eb00 0c02 	add.w	ip, r0, r2
 800ffb4:	f001 0e0f 	and.w	lr, r1, #15
 800ffb8:	468a      	mov	sl, r1
 800ffba:	4691      	mov	r9, r2
 800ffbc:	2e00      	cmp	r6, #0
 800ffbe:	f000 81de 	beq.w	801037e <forward_dense+0x75e>
 800ffc2:	f1ba 0f0f 	cmp.w	sl, #15
 800ffc6:	ed96 fa00 	vldr	s30, [r6]
 800ffca:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 800ff88 <forward_dense+0x368>
 800ffce:	f106 0604 	add.w	r6, r6, #4
 800ffd2:	f240 81dc 	bls.w	801038e <forward_dense+0x76e>
 800ffd6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ffda:	463a      	mov	r2, r7
 800ffdc:	4650      	mov	r0, sl
 800ffde:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 800ffe2:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800ffe6:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 800ffea:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 800ffee:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 800fff2:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 800fff6:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 800fffa:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 800fffe:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 8010002:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 8010006:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 801000a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 801000e:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 8010012:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 8010016:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 801001a:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 801001e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8010022:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 8010026:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 801002a:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 801002e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8010032:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 8010036:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 801003a:	ed12 4a04 	vldr	s8, [r2, #-16]
 801003e:	ed51 4a04 	vldr	s9, [r1, #-16]
 8010042:	ed12 5a03 	vldr	s10, [r2, #-12]
 8010046:	ed51 5a03 	vldr	s11, [r1, #-12]
 801004a:	ed12 6a02 	vldr	s12, [r2, #-8]
 801004e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010052:	ee67 7aae 	vmul.f32	s15, s15, s29
 8010056:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 801005a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 801005e:	3810      	subs	r0, #16
 8010060:	280f      	cmp	r0, #15
 8010062:	ed11 ea01 	vldr	s28, [r1, #-4]
 8010066:	ed52 da01 	vldr	s27, [r2, #-4]
 801006a:	eeed 7a2e 	vfma.f32	s15, s26, s29
 801006e:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8010072:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8010076:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801007a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801007e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8010082:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010086:	eee8 7a88 	vfma.f32	s15, s17, s16
 801008a:	eee0 7a20 	vfma.f32	s15, s0, s1
 801008e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8010092:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010096:	eee3 7a23 	vfma.f32	s15, s6, s7
 801009a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801009e:	eee5 7a25 	vfma.f32	s15, s10, s11
 80100a2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100a6:	eeee 7a2d 	vfma.f32	s15, s28, s27
 80100aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80100ae:	d896      	bhi.n	800ffde <forward_dense+0x3be>
 80100b0:	eb04 0009 	add.w	r0, r4, r9
 80100b4:	4672      	mov	r2, lr
 80100b6:	4661      	mov	r1, ip
 80100b8:	2a00      	cmp	r2, #0
 80100ba:	d075      	beq.n	80101a8 <forward_dense+0x588>
 80100bc:	ed90 7a00 	vldr	s14, [r0]
 80100c0:	edd1 7a00 	vldr	s15, [r1]
 80100c4:	2a01      	cmp	r2, #1
 80100c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100ca:	d06d      	beq.n	80101a8 <forward_dense+0x588>
 80100cc:	ed90 7a01 	vldr	s14, [r0, #4]
 80100d0:	edd1 7a01 	vldr	s15, [r1, #4]
 80100d4:	2a02      	cmp	r2, #2
 80100d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100da:	d065      	beq.n	80101a8 <forward_dense+0x588>
 80100dc:	ed90 7a02 	vldr	s14, [r0, #8]
 80100e0:	edd1 7a02 	vldr	s15, [r1, #8]
 80100e4:	2a03      	cmp	r2, #3
 80100e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100ea:	d05d      	beq.n	80101a8 <forward_dense+0x588>
 80100ec:	ed90 7a03 	vldr	s14, [r0, #12]
 80100f0:	edd1 7a03 	vldr	s15, [r1, #12]
 80100f4:	2a04      	cmp	r2, #4
 80100f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100fa:	d055      	beq.n	80101a8 <forward_dense+0x588>
 80100fc:	ed90 7a04 	vldr	s14, [r0, #16]
 8010100:	edd1 7a04 	vldr	s15, [r1, #16]
 8010104:	2a05      	cmp	r2, #5
 8010106:	eee7 6a27 	vfma.f32	s13, s14, s15
 801010a:	d04d      	beq.n	80101a8 <forward_dense+0x588>
 801010c:	ed90 7a05 	vldr	s14, [r0, #20]
 8010110:	edd1 7a05 	vldr	s15, [r1, #20]
 8010114:	2a06      	cmp	r2, #6
 8010116:	eee7 6a27 	vfma.f32	s13, s14, s15
 801011a:	d045      	beq.n	80101a8 <forward_dense+0x588>
 801011c:	ed90 7a06 	vldr	s14, [r0, #24]
 8010120:	edd1 7a06 	vldr	s15, [r1, #24]
 8010124:	2a07      	cmp	r2, #7
 8010126:	eee7 6a27 	vfma.f32	s13, s14, s15
 801012a:	d03d      	beq.n	80101a8 <forward_dense+0x588>
 801012c:	ed90 7a07 	vldr	s14, [r0, #28]
 8010130:	edd1 7a07 	vldr	s15, [r1, #28]
 8010134:	2a08      	cmp	r2, #8
 8010136:	eee7 6a27 	vfma.f32	s13, s14, s15
 801013a:	d035      	beq.n	80101a8 <forward_dense+0x588>
 801013c:	ed90 7a08 	vldr	s14, [r0, #32]
 8010140:	edd1 7a08 	vldr	s15, [r1, #32]
 8010144:	2a09      	cmp	r2, #9
 8010146:	eee7 6a27 	vfma.f32	s13, s14, s15
 801014a:	d02d      	beq.n	80101a8 <forward_dense+0x588>
 801014c:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8010150:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8010154:	2a0a      	cmp	r2, #10
 8010156:	eee7 6a27 	vfma.f32	s13, s14, s15
 801015a:	d025      	beq.n	80101a8 <forward_dense+0x588>
 801015c:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8010160:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8010164:	2a0b      	cmp	r2, #11
 8010166:	eee7 6a27 	vfma.f32	s13, s14, s15
 801016a:	d01d      	beq.n	80101a8 <forward_dense+0x588>
 801016c:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8010170:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8010174:	2a0c      	cmp	r2, #12
 8010176:	eee7 6a27 	vfma.f32	s13, s14, s15
 801017a:	d015      	beq.n	80101a8 <forward_dense+0x588>
 801017c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8010180:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8010184:	2a0d      	cmp	r2, #13
 8010186:	eee7 6a27 	vfma.f32	s13, s14, s15
 801018a:	d00d      	beq.n	80101a8 <forward_dense+0x588>
 801018c:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8010190:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8010194:	2a0e      	cmp	r2, #14
 8010196:	eee7 6a27 	vfma.f32	s13, s14, s15
 801019a:	d005      	beq.n	80101a8 <forward_dense+0x588>
 801019c:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 80101a0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80101a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80101a8:	441c      	add	r4, r3
 80101aa:	ee7f 6a26 	vadd.f32	s13, s30, s13
 80101ae:	ece5 6a01 	vstmia	r5!, {s13}
 80101b2:	4545      	cmp	r5, r8
 80101b4:	f4ff af02 	bcc.w	800ffbc <forward_dense+0x39c>
 80101b8:	9b08      	ldr	r3, [sp, #32]
 80101ba:	e6b0      	b.n	800ff1e <forward_dense+0x2fe>
 80101bc:	9902      	ldr	r1, [sp, #8]
 80101be:	4588      	cmp	r8, r1
 80101c0:	f67f aeb5 	bls.w	800ff2e <forward_dense+0x30e>
 80101c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80101c6:	eb02 000b 	add.w	r0, r2, fp
 80101ca:	9a07      	ldr	r2, [sp, #28]
 80101cc:	9008      	str	r0, [sp, #32]
 80101ce:	3220      	adds	r2, #32
 80101d0:	3007      	adds	r0, #7
 80101d2:	445a      	add	r2, fp
 80101d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80101d6:	920a      	str	r2, [sp, #40]	; 0x28
 80101d8:	4689      	mov	r9, r1
 80101da:	2e00      	cmp	r6, #0
 80101dc:	f000 80b9 	beq.w	8010352 <forward_dense+0x732>
 80101e0:	9a01      	ldr	r2, [sp, #4]
 80101e2:	edd6 2a00 	vldr	s5, [r6]
 80101e6:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 800ff88 <forward_dense+0x368>
 80101ea:	3604      	adds	r6, #4
 80101ec:	2a00      	cmp	r2, #0
 80101ee:	f000 80b8 	beq.w	8010362 <forward_dense+0x742>
 80101f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101f4:	1917      	adds	r7, r2, r4
 80101f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101f8:	1d21      	adds	r1, r4, #4
 80101fa:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 80101fe:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8010202:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8010206:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 801020a:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 801020e:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 8010212:	ed52 4a04 	vldr	s9, [r2, #-16]
 8010216:	ed12 5a03 	vldr	s10, [r2, #-12]
 801021a:	ed52 5a02 	vldr	s11, [r2, #-8]
 801021e:	ed12 6a01 	vldr	s12, [r2, #-4]
 8010222:	f005 0e0f 	and.w	lr, r5, #15
 8010226:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 801022a:	ed9e 7a00 	vldr	s14, [lr]
 801022e:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8010232:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010236:	ee67 7a27 	vmul.f32	s15, s14, s15
 801023a:	ed9c 7a00 	vldr	s14, [ip]
 801023e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 8010242:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8010246:	eee7 7a03 	vfma.f32	s15, s14, s6
 801024a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 801024e:	f000 0c0f 	and.w	ip, r0, #15
 8010252:	ed9e 7a00 	vldr	s14, [lr]
 8010256:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 801025a:	eee7 7a23 	vfma.f32	s15, s14, s7
 801025e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010262:	3104      	adds	r1, #4
 8010264:	ed9c 7a00 	vldr	s14, [ip]
 8010268:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 801026c:	eee7 7a04 	vfma.f32	s15, s14, s8
 8010270:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010274:	f005 050f 	and.w	r5, r5, #15
 8010278:	ed9c 7a00 	vldr	s14, [ip]
 801027c:	eee7 7a24 	vfma.f32	s15, s14, s9
 8010280:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010284:	428f      	cmp	r7, r1
 8010286:	ed95 7a00 	vldr	s14, [r5]
 801028a:	ea4f 1510 	mov.w	r5, r0, lsr #4
 801028e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8010292:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010296:	f000 000f 	and.w	r0, r0, #15
 801029a:	ed95 7a00 	vldr	s14, [r5]
 801029e:	eee7 7a25 	vfma.f32	s15, s14, s11
 80102a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80102a6:	f102 0220 	add.w	r2, r2, #32
 80102aa:	ed90 7a00 	vldr	s14, [r0]
 80102ae:	eee7 7a06 	vfma.f32	s15, s14, s12
 80102b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80102b6:	d1a0      	bne.n	80101fa <forward_dense+0x5da>
 80102b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102ba:	46de      	mov	lr, fp
 80102bc:	eb04 0a02 	add.w	sl, r4, r2
 80102c0:	9a08      	ldr	r2, [sp, #32]
 80102c2:	4596      	cmp	lr, r2
 80102c4:	d22c      	bcs.n	8010320 <forward_dense+0x700>
 80102c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102c8:	f10e 0108 	add.w	r1, lr, #8
 80102cc:	eba2 0c01 	sub.w	ip, r2, r1
 80102d0:	f02c 0207 	bic.w	r2, ip, #7
 80102d4:	f10e 0710 	add.w	r7, lr, #16
 80102d8:	4417      	add	r7, r2
 80102da:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
 80102de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80102e2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80102e6:	ed11 6a02 	vldr	s12, [r1, #-8]
 80102ea:	f002 000f 	and.w	r0, r2, #15
 80102ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80102f2:	ed90 7a00 	vldr	s14, [r0]
 80102f6:	0912      	lsrs	r2, r2, #4
 80102f8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80102fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010300:	ed92 7a00 	vldr	s14, [r2]
 8010304:	eee7 7a06 	vfma.f32	s15, s14, s12
 8010308:	3108      	adds	r1, #8
 801030a:	428f      	cmp	r7, r1
 801030c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010310:	d1e5      	bne.n	80102de <forward_dense+0x6be>
 8010312:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8010316:	f10c 0c01 	add.w	ip, ip, #1
 801031a:	44e2      	add	sl, ip
 801031c:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 8010320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010322:	b312      	cbz	r2, 801036a <forward_dense+0x74a>
 8010324:	f89a 2000 	ldrb.w	r2, [sl]
 8010328:	edde 7a00 	vldr	s15, [lr]
 801032c:	0912      	lsrs	r2, r2, #4
 801032e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010332:	ed92 7a00 	vldr	s14, [r2]
 8010336:	9a05      	ldr	r2, [sp, #20]
 8010338:	eee7 6a27 	vfma.f32	s13, s14, s15
 801033c:	4414      	add	r4, r2
 801033e:	ee76 2aa2 	vadd.f32	s5, s13, s5
 8010342:	ece9 2a01 	vstmia	r9!, {s5}
 8010346:	45c8      	cmp	r8, r9
 8010348:	f67f ade9 	bls.w	800ff1e <forward_dense+0x2fe>
 801034c:	2e00      	cmp	r6, #0
 801034e:	f47f af47 	bne.w	80101e0 <forward_dense+0x5c0>
 8010352:	9a01      	ldr	r2, [sp, #4]
 8010354:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80103d4 <forward_dense+0x7b4>
 8010358:	eef0 2a6f 	vmov.f32	s5, s31
 801035c:	2a00      	cmp	r2, #0
 801035e:	f47f af48 	bne.w	80101f2 <forward_dense+0x5d2>
 8010362:	f8dd e018 	ldr.w	lr, [sp, #24]
 8010366:	46a2      	mov	sl, r4
 8010368:	e7aa      	b.n	80102c0 <forward_dense+0x6a0>
 801036a:	ee72 6aa6 	vadd.f32	s13, s5, s13
 801036e:	9a05      	ldr	r2, [sp, #20]
 8010370:	ece9 6a01 	vstmia	r9!, {s13}
 8010374:	45c1      	cmp	r9, r8
 8010376:	4414      	add	r4, r2
 8010378:	f4ff af2f 	bcc.w	80101da <forward_dense+0x5ba>
 801037c:	e5cf      	b.n	800ff1e <forward_dense+0x2fe>
 801037e:	f1ba 0f0f 	cmp.w	sl, #15
 8010382:	eeb0 fa6f 	vmov.f32	s30, s31
 8010386:	eddf 6a13 	vldr	s13, [pc, #76]	; 80103d4 <forward_dense+0x7b4>
 801038a:	f63f ae24 	bhi.w	800ffd6 <forward_dense+0x3b6>
 801038e:	4652      	mov	r2, sl
 8010390:	4620      	mov	r0, r4
 8010392:	9906      	ldr	r1, [sp, #24]
 8010394:	e690      	b.n	80100b8 <forward_dense+0x498>
 8010396:	2300      	movs	r3, #0
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	deff      	udf	#255	; 0xff
 801039c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80103a0:	2b04      	cmp	r3, #4
 80103a2:	4691      	mov	r9, r2
 80103a4:	f47f ac94 	bne.w	800fcd0 <forward_dense+0xb0>
 80103a8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80103ac:	f1b9 0f00 	cmp.w	r9, #0
 80103b0:	f43f ac93 	beq.w	800fcda <forward_dense+0xba>
 80103b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80103b8:	f000 fae4 	bl	8010984 <ai_array_get_byte_size>
 80103bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80103c0:	4602      	mov	r2, r0
 80103c2:	4651      	mov	r1, sl
 80103c4:	4618      	mov	r0, r3
 80103c6:	f000 fb43 	bl	8010a50 <memcpy>
 80103ca:	4682      	mov	sl, r0
 80103cc:	e485      	b.n	800fcda <forward_dense+0xba>
 80103ce:	2300      	movs	r3, #0
 80103d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80103d2:	e456      	b.n	800fc82 <forward_dense+0x62>
 80103d4:	00000000 	.word	0x00000000

080103d8 <nl_func_sm_array_f32>:
 80103d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103dc:	ed2d 8b04 	vpush	{d8-d9}
 80103e0:	b089      	sub	sp, #36	; 0x24
 80103e2:	698f      	ldr	r7, [r1, #24]
 80103e4:	6984      	ldr	r4, [r0, #24]
 80103e6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80103ea:	68bd      	ldr	r5, [r7, #8]
 80103ec:	9402      	str	r4, [sp, #8]
 80103ee:	4626      	mov	r6, r4
 80103f0:	4696      	mov	lr, r2
 80103f2:	eba2 020c 	sub.w	r2, r2, ip
 80103f6:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80103fa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	68b6      	ldr	r6, [r6, #8]
 8010400:	ebae 0e04 	sub.w	lr, lr, r4
 8010404:	4295      	cmp	r5, r2
 8010406:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 801040a:	d354      	bcc.n	80104b6 <nl_func_sm_array_f32+0xde>
 801040c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8010410:	f1cc 0200 	rsb	r2, ip, #0
 8010414:	00a4      	lsls	r4, r4, #2
 8010416:	e9cd 1006 	strd	r1, r0, [sp, #24]
 801041a:	9303      	str	r3, [sp, #12]
 801041c:	9204      	str	r2, [sp, #16]
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	4262      	negs	r2, r4
 8010422:	9205      	str	r2, [sp, #20]
 8010424:	9301      	str	r3, [sp, #4]
 8010426:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801042a:	9b02      	ldr	r3, [sp, #8]
 801042c:	9a07      	ldr	r2, [sp, #28]
 801042e:	60bd      	str	r5, [r7, #8]
 8010430:	609e      	str	r6, [r3, #8]
 8010432:	9b06      	ldr	r3, [sp, #24]
 8010434:	6992      	ldr	r2, [r2, #24]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	6894      	ldr	r4, [r2, #8]
 801043a:	9a03      	ldr	r2, [sp, #12]
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	2a01      	cmp	r2, #1
 8010440:	ed93 8a00 	vldr	s16, [r3]
 8010444:	d940      	bls.n	80104c8 <nl_func_sm_array_f32+0xf0>
 8010446:	9901      	ldr	r1, [sp, #4]
 8010448:	1d1a      	adds	r2, r3, #4
 801044a:	eb03 0b01 	add.w	fp, r3, r1
 801044e:	ecf2 7a01 	vldmia	r2!, {s15}
 8010452:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045a:	bfb8      	it	lt
 801045c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8010460:	4593      	cmp	fp, r2
 8010462:	d1f4      	bne.n	801044e <nl_func_sm_array_f32+0x76>
 8010464:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80104d4 <nl_func_sm_array_f32+0xfc>
 8010468:	469a      	mov	sl, r3
 801046a:	46a1      	mov	r9, r4
 801046c:	46a0      	mov	r8, r4
 801046e:	ecba 0a01 	vldmia	sl!, {s0}
 8010472:	ee30 0a48 	vsub.f32	s0, s0, s16
 8010476:	f003 f9df 	bl	8013838 <expf>
 801047a:	45d3      	cmp	fp, sl
 801047c:	eca8 0a01 	vstmia	r8!, {s0}
 8010480:	ee78 8a80 	vadd.f32	s17, s17, s0
 8010484:	d1f3      	bne.n	801046e <nl_func_sm_array_f32+0x96>
 8010486:	eef5 8a40 	vcmp.f32	s17, #0.0
 801048a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801048e:	d00b      	beq.n	80104a8 <nl_func_sm_array_f32+0xd0>
 8010490:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8010494:	9b01      	ldr	r3, [sp, #4]
 8010496:	441c      	add	r4, r3
 8010498:	edd9 7a00 	vldr	s15, [r9]
 801049c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80104a0:	ece9 7a01 	vstmia	r9!, {s15}
 80104a4:	454c      	cmp	r4, r9
 80104a6:	d1f7      	bne.n	8010498 <nl_func_sm_array_f32+0xc0>
 80104a8:	9b04      	ldr	r3, [sp, #16]
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	441d      	add	r5, r3
 80104ae:	9b05      	ldr	r3, [sp, #20]
 80104b0:	42aa      	cmp	r2, r5
 80104b2:	441e      	add	r6, r3
 80104b4:	d9b9      	bls.n	801042a <nl_func_sm_array_f32+0x52>
 80104b6:	60ba      	str	r2, [r7, #8]
 80104b8:	9a02      	ldr	r2, [sp, #8]
 80104ba:	68d3      	ldr	r3, [r2, #12]
 80104bc:	6093      	str	r3, [r2, #8]
 80104be:	b009      	add	sp, #36	; 0x24
 80104c0:	ecbd 8b04 	vpop	{d8-d9}
 80104c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c8:	2a00      	cmp	r2, #0
 80104ca:	d0ed      	beq.n	80104a8 <nl_func_sm_array_f32+0xd0>
 80104cc:	9a01      	ldr	r2, [sp, #4]
 80104ce:	eb03 0b02 	add.w	fp, r3, r2
 80104d2:	e7c7      	b.n	8010464 <nl_func_sm_array_f32+0x8c>
 80104d4:	00000000 	.word	0x00000000

080104d8 <nl_func_relu_generic_array_f32>:
 80104d8:	b430      	push	{r4, r5}
 80104da:	6989      	ldr	r1, [r1, #24]
 80104dc:	6980      	ldr	r0, [r0, #24]
 80104de:	edd3 6a02 	vldr	s13, [r3, #8]
 80104e2:	688c      	ldr	r4, [r1, #8]
 80104e4:	6880      	ldr	r0, [r0, #8]
 80104e6:	ed93 7a00 	vldr	s14, [r3]
 80104ea:	ed93 6a01 	vldr	s12, [r3, #4]
 80104ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80104f2:	3a01      	subs	r2, #1
 80104f4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80104f8:	0092      	lsls	r2, r2, #2
 80104fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fe:	4410      	add	r0, r2
 8010500:	4422      	add	r2, r4
 8010502:	d421      	bmi.n	8010548 <nl_func_relu_generic_array_f32+0x70>
 8010504:	4294      	cmp	r4, r2
 8010506:	d83d      	bhi.n	8010584 <nl_func_relu_generic_array_f32+0xac>
 8010508:	1d13      	adds	r3, r2, #4
 801050a:	1d02      	adds	r2, r0, #4
 801050c:	e010      	b.n	8010530 <nl_func_relu_generic_array_f32+0x58>
 801050e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010516:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801051a:	d501      	bpl.n	8010520 <nl_func_relu_generic_array_f32+0x48>
 801051c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8010520:	ed62 7a01 	vstmdb	r2!, {s15}
 8010524:	6888      	ldr	r0, [r1, #8]
 8010526:	f1a3 0408 	sub.w	r4, r3, #8
 801052a:	4284      	cmp	r4, r0
 801052c:	462b      	mov	r3, r5
 801052e:	d329      	bcc.n	8010584 <nl_func_relu_generic_array_f32+0xac>
 8010530:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010534:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053c:	f1a3 0504 	sub.w	r5, r3, #4
 8010540:	d4e5      	bmi.n	801050e <nl_func_relu_generic_array_f32+0x36>
 8010542:	eef0 7a66 	vmov.f32	s15, s13
 8010546:	e7eb      	b.n	8010520 <nl_func_relu_generic_array_f32+0x48>
 8010548:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801054c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010550:	d01a      	beq.n	8010588 <nl_func_relu_generic_array_f32+0xb0>
 8010552:	4294      	cmp	r4, r2
 8010554:	d816      	bhi.n	8010584 <nl_func_relu_generic_array_f32+0xac>
 8010556:	1d13      	adds	r3, r2, #4
 8010558:	1d02      	adds	r2, r0, #4
 801055a:	ed53 7a01 	vldr	s15, [r3, #-4]
 801055e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8010562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010566:	f1a3 0408 	sub.w	r4, r3, #8
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	f1a3 0004 	sub.w	r0, r3, #4
 8010572:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010576:	4623      	mov	r3, r4
 8010578:	d51e      	bpl.n	80105b8 <nl_func_relu_generic_array_f32+0xe0>
 801057a:	ed62 6a01 	vstmdb	r2!, {s13}
 801057e:	688b      	ldr	r3, [r1, #8]
 8010580:	42a3      	cmp	r3, r4
 8010582:	d91e      	bls.n	80105c2 <nl_func_relu_generic_array_f32+0xea>
 8010584:	bc30      	pop	{r4, r5}
 8010586:	4770      	bx	lr
 8010588:	4294      	cmp	r4, r2
 801058a:	d8fb      	bhi.n	8010584 <nl_func_relu_generic_array_f32+0xac>
 801058c:	1d13      	adds	r3, r2, #4
 801058e:	2500      	movs	r5, #0
 8010590:	1d02      	adds	r2, r0, #4
 8010592:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010596:	eef4 7ac7 	vcmpe.f32	s15, s14
 801059a:	f1a3 0408 	sub.w	r4, r3, #8
 801059e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a2:	f1a3 0004 	sub.w	r0, r3, #4
 80105a6:	4623      	mov	r3, r4
 80105a8:	db0d      	blt.n	80105c6 <nl_func_relu_generic_array_f32+0xee>
 80105aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80105ae:	688b      	ldr	r3, [r1, #8]
 80105b0:	42a3      	cmp	r3, r4
 80105b2:	d8e7      	bhi.n	8010584 <nl_func_relu_generic_array_f32+0xac>
 80105b4:	4603      	mov	r3, r0
 80105b6:	e7ec      	b.n	8010592 <nl_func_relu_generic_array_f32+0xba>
 80105b8:	ed62 7a01 	vstmdb	r2!, {s15}
 80105bc:	688c      	ldr	r4, [r1, #8]
 80105be:	429c      	cmp	r4, r3
 80105c0:	d8e0      	bhi.n	8010584 <nl_func_relu_generic_array_f32+0xac>
 80105c2:	4603      	mov	r3, r0
 80105c4:	e7c9      	b.n	801055a <nl_func_relu_generic_array_f32+0x82>
 80105c6:	f842 5d04 	str.w	r5, [r2, #-4]!
 80105ca:	688c      	ldr	r4, [r1, #8]
 80105cc:	429c      	cmp	r4, r3
 80105ce:	d8d9      	bhi.n	8010584 <nl_func_relu_generic_array_f32+0xac>
 80105d0:	4603      	mov	r3, r0
 80105d2:	e7de      	b.n	8010592 <nl_func_relu_generic_array_f32+0xba>

080105d4 <forward_relu>:
 80105d4:	6982      	ldr	r2, [r0, #24]
 80105d6:	8813      	ldrh	r3, [r2, #0]
 80105d8:	b333      	cbz	r3, 8010628 <forward_relu+0x54>
 80105da:	6852      	ldr	r2, [r2, #4]
 80105dc:	6851      	ldr	r1, [r2, #4]
 80105de:	b101      	cbz	r1, 80105e2 <forward_relu+0xe>
 80105e0:	6809      	ldr	r1, [r1, #0]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d91d      	bls.n	8010622 <forward_relu+0x4e>
 80105e6:	b4f0      	push	{r4, r5, r6, r7}
 80105e8:	6917      	ldr	r7, [r2, #16]
 80105ea:	b107      	cbz	r7, 80105ee <forward_relu+0x1a>
 80105ec:	683f      	ldr	r7, [r7, #0]
 80105ee:	688c      	ldr	r4, [r1, #8]
 80105f0:	69c3      	ldr	r3, [r0, #28]
 80105f2:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d044      	beq.n	8010684 <forward_relu+0xb0>
 80105fa:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80105fe:	2d01      	cmp	r5, #1
 8010600:	d014      	beq.n	801062c <forward_relu+0x58>
 8010602:	2c00      	cmp	r4, #0
 8010604:	d074      	beq.n	80106f0 <forward_relu+0x11c>
 8010606:	68ce      	ldr	r6, [r1, #12]
 8010608:	2201      	movs	r2, #1
 801060a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801060e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010612:	42a6      	cmp	r6, r4
 8010614:	fb05 f202 	mul.w	r2, r5, r2
 8010618:	d1f9      	bne.n	801060e <forward_relu+0x3a>
 801061a:	4638      	mov	r0, r7
 801061c:	bcf0      	pop	{r4, r5, r6, r7}
 801061e:	f7ff bf5b 	b.w	80104d8 <nl_func_relu_generic_array_f32>
 8010622:	2300      	movs	r3, #0
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	deff      	udf	#255	; 0xff
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	deff      	udf	#255	; 0xff
 801062c:	69ba      	ldr	r2, [r7, #24]
 801062e:	6988      	ldr	r0, [r1, #24]
 8010630:	6896      	ldr	r6, [r2, #8]
 8010632:	ed93 7a00 	vldr	s14, [r3]
 8010636:	6882      	ldr	r2, [r0, #8]
 8010638:	b184      	cbz	r4, 801065c <forward_relu+0x88>
 801063a:	68cf      	ldr	r7, [r1, #12]
 801063c:	462b      	mov	r3, r5
 801063e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8010642:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8010646:	42a7      	cmp	r7, r4
 8010648:	fb01 f303 	mul.w	r3, r1, r3
 801064c:	d1f9      	bne.n	8010642 <forward_relu+0x6e>
 801064e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010652:	3b01      	subs	r3, #1
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	18d2      	adds	r2, r2, r3
 8010658:	441e      	add	r6, r3
 801065a:	d23f      	bcs.n	80106dc <forward_relu+0x108>
 801065c:	1d13      	adds	r3, r2, #4
 801065e:	2500      	movs	r5, #0
 8010660:	1d32      	adds	r2, r6, #4
 8010662:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066e:	f1a3 0104 	sub.w	r1, r3, #4
 8010672:	d835      	bhi.n	80106e0 <forward_relu+0x10c>
 8010674:	ed62 7a01 	vstmdb	r2!, {s15}
 8010678:	6884      	ldr	r4, [r0, #8]
 801067a:	3b08      	subs	r3, #8
 801067c:	429c      	cmp	r4, r3
 801067e:	d82d      	bhi.n	80106dc <forward_relu+0x108>
 8010680:	460b      	mov	r3, r1
 8010682:	e7ee      	b.n	8010662 <forward_relu+0x8e>
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	698d      	ldr	r5, [r1, #24]
 8010688:	6898      	ldr	r0, [r3, #8]
 801068a:	68ab      	ldr	r3, [r5, #8]
 801068c:	b184      	cbz	r4, 80106b0 <forward_relu+0xdc>
 801068e:	68ce      	ldr	r6, [r1, #12]
 8010690:	2201      	movs	r2, #1
 8010692:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8010696:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 801069a:	42a6      	cmp	r6, r4
 801069c:	fb01 f202 	mul.w	r2, r1, r2
 80106a0:	d1f9      	bne.n	8010696 <forward_relu+0xc2>
 80106a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80106a6:	3a01      	subs	r2, #1
 80106a8:	0092      	lsls	r2, r2, #2
 80106aa:	189b      	adds	r3, r3, r2
 80106ac:	4410      	add	r0, r2
 80106ae:	d215      	bcs.n	80106dc <forward_relu+0x108>
 80106b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80106f4 <forward_relu+0x120>
 80106b4:	3304      	adds	r3, #4
 80106b6:	1d01      	adds	r1, r0, #4
 80106b8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80106bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80106c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c4:	bfb8      	it	lt
 80106c6:	eef0 7a47 	vmovlt.f32	s15, s14
 80106ca:	ed61 7a01 	vstmdb	r1!, {s15}
 80106ce:	68a8      	ldr	r0, [r5, #8]
 80106d0:	f1a3 0208 	sub.w	r2, r3, #8
 80106d4:	4290      	cmp	r0, r2
 80106d6:	f1a3 0304 	sub.w	r3, r3, #4
 80106da:	d9ed      	bls.n	80106b8 <forward_relu+0xe4>
 80106dc:	bcf0      	pop	{r4, r5, r6, r7}
 80106de:	4770      	bx	lr
 80106e0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80106e4:	6884      	ldr	r4, [r0, #8]
 80106e6:	3b08      	subs	r3, #8
 80106e8:	429c      	cmp	r4, r3
 80106ea:	d8f7      	bhi.n	80106dc <forward_relu+0x108>
 80106ec:	460b      	mov	r3, r1
 80106ee:	e7b8      	b.n	8010662 <forward_relu+0x8e>
 80106f0:	2201      	movs	r2, #1
 80106f2:	e792      	b.n	801061a <forward_relu+0x46>
 80106f4:	00000000 	.word	0x00000000

080106f8 <forward_sm>:
 80106f8:	6982      	ldr	r2, [r0, #24]
 80106fa:	8813      	ldrh	r3, [r2, #0]
 80106fc:	b32b      	cbz	r3, 801074a <forward_sm+0x52>
 80106fe:	6852      	ldr	r2, [r2, #4]
 8010700:	6851      	ldr	r1, [r2, #4]
 8010702:	b101      	cbz	r1, 8010706 <forward_sm+0xe>
 8010704:	6809      	ldr	r1, [r1, #0]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d91c      	bls.n	8010744 <forward_sm+0x4c>
 801070a:	6913      	ldr	r3, [r2, #16]
 801070c:	b1c3      	cbz	r3, 8010740 <forward_sm+0x48>
 801070e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010710:	6818      	ldr	r0, [r3, #0]
 8010712:	688c      	ldr	r4, [r1, #8]
 8010714:	68c3      	ldr	r3, [r0, #12]
 8010716:	68ce      	ldr	r6, [r1, #12]
 8010718:	685f      	ldr	r7, [r3, #4]
 801071a:	6873      	ldr	r3, [r6, #4]
 801071c:	0a24      	lsrs	r4, r4, #8
 801071e:	b083      	sub	sp, #12
 8010720:	d015      	beq.n	801074e <forward_sm+0x56>
 8010722:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8010726:	2201      	movs	r2, #1
 8010728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801072c:	42a6      	cmp	r6, r4
 801072e:	fb05 f202 	mul.w	r2, r5, r2
 8010732:	d1f9      	bne.n	8010728 <forward_sm+0x30>
 8010734:	e9cd 3700 	strd	r3, r7, [sp]
 8010738:	f7ff fe4e 	bl	80103d8 <nl_func_sm_array_f32>
 801073c:	b003      	add	sp, #12
 801073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	deff      	udf	#255	; 0xff
 8010744:	2300      	movs	r3, #0
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	deff      	udf	#255	; 0xff
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	deff      	udf	#255	; 0xff
 801074e:	2201      	movs	r2, #1
 8010750:	e9cd 3700 	strd	r3, r7, [sp]
 8010754:	f7ff fe40 	bl	80103d8 <nl_func_sm_array_f32>
 8010758:	b003      	add	sp, #12
 801075a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801075c <ai_check_custom_types>:
 801075c:	4b13      	ldr	r3, [pc, #76]	; (80107ac <ai_check_custom_types+0x50>)
 801075e:	b082      	sub	sp, #8
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	9301      	str	r3, [sp, #4]
 8010764:	b118      	cbz	r0, 801076e <ai_check_custom_types+0x12>
 8010766:	7803      	ldrb	r3, [r0, #0]
 8010768:	2b03      	cmp	r3, #3
 801076a:	d002      	beq.n	8010772 <ai_check_custom_types+0x16>
 801076c:	2000      	movs	r0, #0
 801076e:	b002      	add	sp, #8
 8010770:	4770      	bx	lr
 8010772:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010776:	4293      	cmp	r3, r2
 8010778:	d004      	beq.n	8010784 <ai_check_custom_types+0x28>
 801077a:	2001      	movs	r0, #1
 801077c:	f080 0001 	eor.w	r0, r0, #1
 8010780:	b002      	add	sp, #8
 8010782:	4770      	bx	lr
 8010784:	7842      	ldrb	r2, [r0, #1]
 8010786:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801078a:	429a      	cmp	r2, r3
 801078c:	f100 0001 	add.w	r0, r0, #1
 8010790:	d1f3      	bne.n	801077a <ai_check_custom_types+0x1e>
 8010792:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010796:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801079a:	429a      	cmp	r2, r3
 801079c:	d1ed      	bne.n	801077a <ai_check_custom_types+0x1e>
 801079e:	7842      	ldrb	r2, [r0, #1]
 80107a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d1e8      	bne.n	801077a <ai_check_custom_types+0x1e>
 80107a8:	2000      	movs	r0, #0
 80107aa:	e7e7      	b.n	801077c <ai_check_custom_types+0x20>
 80107ac:	08013b98 	.word	0x08013b98

080107b0 <ai_layers_init_all>:
 80107b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80107b2:	b17a      	cbz	r2, 80107d4 <ai_layers_init_all+0x24>
 80107b4:	6913      	ldr	r3, [r2, #16]
 80107b6:	60d0      	str	r0, [r2, #12]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	f04f 0201 	mov.w	r2, #1
 80107be:	d009      	beq.n	80107d4 <ai_layers_init_all+0x24>
 80107c0:	b143      	cbz	r3, 80107d4 <ai_layers_init_all+0x24>
 80107c2:	6919      	ldr	r1, [r3, #16]
 80107c4:	60d8      	str	r0, [r3, #12]
 80107c6:	4299      	cmp	r1, r3
 80107c8:	f102 0201 	add.w	r2, r2, #1
 80107cc:	d002      	beq.n	80107d4 <ai_layers_init_all+0x24>
 80107ce:	460b      	mov	r3, r1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1f6      	bne.n	80107c2 <ai_layers_init_all+0x12>
 80107d4:	4610      	mov	r0, r2
 80107d6:	4770      	bx	lr

080107d8 <ai_layers_post_init_all>:
 80107d8:	b538      	push	{r3, r4, r5, lr}
 80107da:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80107dc:	b18c      	cbz	r4, 8010802 <ai_layers_post_init_all+0x2a>
 80107de:	2500      	movs	r5, #0
 80107e0:	6863      	ldr	r3, [r4, #4]
 80107e2:	f013 0f01 	tst.w	r3, #1
 80107e6:	4620      	mov	r0, r4
 80107e8:	d003      	beq.n	80107f2 <ai_layers_post_init_all+0x1a>
 80107ea:	6a23      	ldr	r3, [r4, #32]
 80107ec:	b10b      	cbz	r3, 80107f2 <ai_layers_post_init_all+0x1a>
 80107ee:	4798      	blx	r3
 80107f0:	3501      	adds	r5, #1
 80107f2:	6923      	ldr	r3, [r4, #16]
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	d002      	beq.n	80107fe <ai_layers_post_init_all+0x26>
 80107f8:	461c      	mov	r4, r3
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d1f0      	bne.n	80107e0 <ai_layers_post_init_all+0x8>
 80107fe:	4628      	mov	r0, r5
 8010800:	bd38      	pop	{r3, r4, r5, pc}
 8010802:	4625      	mov	r5, r4
 8010804:	e7fb      	b.n	80107fe <ai_layers_post_init_all+0x26>
 8010806:	bf00      	nop

08010808 <ai_layers_forward_all>:
 8010808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801080c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 801080e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010810:	4604      	mov	r4, r0
 8010812:	2f00      	cmp	r7, #0
 8010814:	d02c      	beq.n	8010870 <ai_layers_forward_all+0x68>
 8010816:	2d00      	cmp	r5, #0
 8010818:	d03f      	beq.n	801089a <ai_layers_forward_all+0x92>
 801081a:	6385      	str	r5, [r0, #56]	; 0x38
 801081c:	4629      	mov	r1, r5
 801081e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010820:	2001      	movs	r0, #1
 8010822:	47b8      	blx	r7
 8010824:	2600      	movs	r6, #0
 8010826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010828:	46b0      	mov	r8, r6
 801082a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801082c:	2002      	movs	r0, #2
 801082e:	47b8      	blx	r7
 8010830:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010832:	696b      	ldr	r3, [r5, #20]
 8010834:	4628      	mov	r0, r5
 8010836:	4798      	blx	r3
 8010838:	692b      	ldr	r3, [r5, #16]
 801083a:	429d      	cmp	r5, r3
 801083c:	f04f 0003 	mov.w	r0, #3
 8010840:	4619      	mov	r1, r3
 8010842:	d009      	beq.n	8010858 <ai_layers_forward_all+0x50>
 8010844:	63a3      	str	r3, [r4, #56]	; 0x38
 8010846:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010848:	47b8      	blx	r7
 801084a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801084c:	3601      	adds	r6, #1
 801084e:	2900      	cmp	r1, #0
 8010850:	d1eb      	bne.n	801082a <ai_layers_forward_all+0x22>
 8010852:	4630      	mov	r0, r6
 8010854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010858:	2100      	movs	r1, #0
 801085a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801085e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010860:	47b8      	blx	r7
 8010862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010864:	3601      	adds	r6, #1
 8010866:	2900      	cmp	r1, #0
 8010868:	d1df      	bne.n	801082a <ai_layers_forward_all+0x22>
 801086a:	4630      	mov	r0, r6
 801086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010870:	b19d      	cbz	r5, 801089a <ai_layers_forward_all+0x92>
 8010872:	6385      	str	r5, [r0, #56]	; 0x38
 8010874:	463e      	mov	r6, r7
 8010876:	696b      	ldr	r3, [r5, #20]
 8010878:	4628      	mov	r0, r5
 801087a:	4798      	blx	r3
 801087c:	692b      	ldr	r3, [r5, #16]
 801087e:	42ab      	cmp	r3, r5
 8010880:	f106 0601 	add.w	r6, r6, #1
 8010884:	d004      	beq.n	8010890 <ai_layers_forward_all+0x88>
 8010886:	63a3      	str	r3, [r4, #56]	; 0x38
 8010888:	461d      	mov	r5, r3
 801088a:	2b00      	cmp	r3, #0
 801088c:	d1f3      	bne.n	8010876 <ai_layers_forward_all+0x6e>
 801088e:	e7e0      	b.n	8010852 <ai_layers_forward_all+0x4a>
 8010890:	2300      	movs	r3, #0
 8010892:	63a3      	str	r3, [r4, #56]	; 0x38
 8010894:	4630      	mov	r0, r6
 8010896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801089a:	462e      	mov	r6, r5
 801089c:	4630      	mov	r0, r6
 801089e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a2:	bf00      	nop

080108a4 <ai_version_get>:
 80108a4:	0212      	lsls	r2, r2, #8
 80108a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80108aa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80108ae:	4770      	bx	lr

080108b0 <get_tensor_byte_size>:
 80108b0:	6983      	ldr	r3, [r0, #24]
 80108b2:	68c1      	ldr	r1, [r0, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	6940      	ldr	r0, [r0, #20]
 80108b8:	4a06      	ldr	r2, [pc, #24]	; (80108d4 <get_tensor_byte_size+0x24>)
 80108ba:	68c9      	ldr	r1, [r1, #12]
 80108bc:	68c0      	ldr	r0, [r0, #12]
 80108be:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80108c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80108c6:	fb00 f001 	mul.w	r0, r0, r1
 80108ca:	4293      	cmp	r3, r2
 80108cc:	bf04      	itt	eq
 80108ce:	3007      	addeq	r0, #7
 80108d0:	08c0      	lsreq	r0, r0, #3
 80108d2:	4770      	bx	lr
 80108d4:	000400c0 	.word	0x000400c0

080108d8 <ai_array_to_buffer_fmt>:
 80108d8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80108dc:	2b02      	cmp	r3, #2
 80108de:	d036      	beq.n	801094e <ai_array_to_buffer_fmt+0x76>
 80108e0:	4a21      	ldr	r2, [pc, #132]	; (8010968 <ai_array_to_buffer_fmt+0x90>)
 80108e2:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d00f      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 80108ea:	dd12      	ble.n	8010912 <ai_array_to_buffer_fmt+0x3a>
 80108ec:	4a1f      	ldr	r2, [pc, #124]	; (801096c <ai_array_to_buffer_fmt+0x94>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d00b      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 80108f2:	dd1e      	ble.n	8010932 <ai_array_to_buffer_fmt+0x5a>
 80108f4:	4a1e      	ldr	r2, [pc, #120]	; (8010970 <ai_array_to_buffer_fmt+0x98>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d007      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 80108fa:	dd30      	ble.n	801095e <ai_array_to_buffer_fmt+0x86>
 80108fc:	4a1d      	ldr	r2, [pc, #116]	; (8010974 <ai_array_to_buffer_fmt+0x9c>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d003      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 8010902:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8010906:	4293      	cmp	r3, r2
 8010908:	d11f      	bne.n	801094a <ai_array_to_buffer_fmt+0x72>
 801090a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801090e:	4318      	orrs	r0, r3
 8010910:	4770      	bx	lr
 8010912:	4a19      	ldr	r2, [pc, #100]	; (8010978 <ai_array_to_buffer_fmt+0xa0>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d0f8      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 8010918:	dd0b      	ble.n	8010932 <ai_array_to_buffer_fmt+0x5a>
 801091a:	4a18      	ldr	r2, [pc, #96]	; (801097c <ai_array_to_buffer_fmt+0xa4>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d0f4      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 8010920:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8010924:	4293      	cmp	r3, r2
 8010926:	d0f0      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 8010928:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 801092c:	4293      	cmp	r3, r2
 801092e:	d10c      	bne.n	801094a <ai_array_to_buffer_fmt+0x72>
 8010930:	e7eb      	b.n	801090a <ai_array_to_buffer_fmt+0x32>
 8010932:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8010936:	4293      	cmp	r3, r2
 8010938:	d0e7      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 801093a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 801093e:	4293      	cmp	r3, r2
 8010940:	d0e3      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 8010942:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8010946:	4293      	cmp	r3, r2
 8010948:	d0df      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 801094a:	2340      	movs	r3, #64	; 0x40
 801094c:	e7dd      	b.n	801090a <ai_array_to_buffer_fmt+0x32>
 801094e:	4b0c      	ldr	r3, [pc, #48]	; (8010980 <ai_array_to_buffer_fmt+0xa8>)
 8010950:	4003      	ands	r3, r0
 8010952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010956:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801095a:	4318      	orrs	r0, r3
 801095c:	4770      	bx	lr
 801095e:	3a0f      	subs	r2, #15
 8010960:	4293      	cmp	r3, r2
 8010962:	d0d2      	beq.n	801090a <ai_array_to_buffer_fmt+0x32>
 8010964:	e7f1      	b.n	801094a <ai_array_to_buffer_fmt+0x72>
 8010966:	bf00      	nop
 8010968:	00060440 	.word	0x00060440
 801096c:	00840447 	.word	0x00840447
 8010970:	0084084f 	.word	0x0084084f
 8010974:	00841040 	.word	0x00841040
 8010978:	00040447 	.word	0x00040447
 801097c:	0004084f 	.word	0x0004084f
 8010980:	00803fff 	.word	0x00803fff

08010984 <ai_array_get_byte_size>:
 8010984:	b1c1      	cbz	r1, 80109b8 <ai_array_get_byte_size+0x34>
 8010986:	11c3      	asrs	r3, r0, #7
 8010988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801098c:	fb01 f102 	mul.w	r1, r1, r2
 8010990:	3107      	adds	r1, #7
 8010992:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8010996:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801099a:	f021 0107 	bic.w	r1, r1, #7
 801099e:	2804      	cmp	r0, #4
 80109a0:	fa21 f102 	lsr.w	r1, r1, r2
 80109a4:	d00a      	beq.n	80109bc <ai_array_get_byte_size+0x38>
 80109a6:	2808      	cmp	r0, #8
 80109a8:	d103      	bne.n	80109b2 <ai_array_get_byte_size+0x2e>
 80109aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109ae:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80109b2:	3107      	adds	r1, #7
 80109b4:	08c8      	lsrs	r0, r1, #3
 80109b6:	4770      	bx	lr
 80109b8:	4608      	mov	r0, r1
 80109ba:	4770      	bx	lr
 80109bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109c0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80109c4:	3107      	adds	r1, #7
 80109c6:	08c8      	lsrs	r0, r1, #3
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop

080109cc <ai_array_get_data_byte_size>:
 80109cc:	b161      	cbz	r1, 80109e8 <ai_array_get_data_byte_size+0x1c>
 80109ce:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80109d2:	fb01 f103 	mul.w	r1, r1, r3
 80109d6:	3107      	adds	r1, #7
 80109d8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80109dc:	f021 0107 	bic.w	r1, r1, #7
 80109e0:	40c1      	lsrs	r1, r0
 80109e2:	3107      	adds	r1, #7
 80109e4:	08c8      	lsrs	r0, r1, #3
 80109e6:	4770      	bx	lr
 80109e8:	4608      	mov	r0, r1
 80109ea:	4770      	bx	lr

080109ec <__errno>:
 80109ec:	4b01      	ldr	r3, [pc, #4]	; (80109f4 <__errno+0x8>)
 80109ee:	6818      	ldr	r0, [r3, #0]
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	2000093c 	.word	0x2000093c

080109f8 <__libc_init_array>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	4d0d      	ldr	r5, [pc, #52]	; (8010a30 <__libc_init_array+0x38>)
 80109fc:	4c0d      	ldr	r4, [pc, #52]	; (8010a34 <__libc_init_array+0x3c>)
 80109fe:	1b64      	subs	r4, r4, r5
 8010a00:	10a4      	asrs	r4, r4, #2
 8010a02:	2600      	movs	r6, #0
 8010a04:	42a6      	cmp	r6, r4
 8010a06:	d109      	bne.n	8010a1c <__libc_init_array+0x24>
 8010a08:	4d0b      	ldr	r5, [pc, #44]	; (8010a38 <__libc_init_array+0x40>)
 8010a0a:	4c0c      	ldr	r4, [pc, #48]	; (8010a3c <__libc_init_array+0x44>)
 8010a0c:	f003 f86a 	bl	8013ae4 <_init>
 8010a10:	1b64      	subs	r4, r4, r5
 8010a12:	10a4      	asrs	r4, r4, #2
 8010a14:	2600      	movs	r6, #0
 8010a16:	42a6      	cmp	r6, r4
 8010a18:	d105      	bne.n	8010a26 <__libc_init_array+0x2e>
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}
 8010a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a20:	4798      	blx	r3
 8010a22:	3601      	adds	r6, #1
 8010a24:	e7ee      	b.n	8010a04 <__libc_init_array+0xc>
 8010a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a2a:	4798      	blx	r3
 8010a2c:	3601      	adds	r6, #1
 8010a2e:	e7f2      	b.n	8010a16 <__libc_init_array+0x1e>
 8010a30:	08068d0c 	.word	0x08068d0c
 8010a34:	08068d0c 	.word	0x08068d0c
 8010a38:	08068d0c 	.word	0x08068d0c
 8010a3c:	08068d10 	.word	0x08068d10

08010a40 <malloc>:
 8010a40:	4b02      	ldr	r3, [pc, #8]	; (8010a4c <malloc+0xc>)
 8010a42:	4601      	mov	r1, r0
 8010a44:	6818      	ldr	r0, [r3, #0]
 8010a46:	f000 b885 	b.w	8010b54 <_malloc_r>
 8010a4a:	bf00      	nop
 8010a4c:	2000093c 	.word	0x2000093c

08010a50 <memcpy>:
 8010a50:	440a      	add	r2, r1
 8010a52:	4291      	cmp	r1, r2
 8010a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010a58:	d100      	bne.n	8010a5c <memcpy+0xc>
 8010a5a:	4770      	bx	lr
 8010a5c:	b510      	push	{r4, lr}
 8010a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a66:	4291      	cmp	r1, r2
 8010a68:	d1f9      	bne.n	8010a5e <memcpy+0xe>
 8010a6a:	bd10      	pop	{r4, pc}

08010a6c <memset>:
 8010a6c:	4402      	add	r2, r0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d100      	bne.n	8010a76 <memset+0xa>
 8010a74:	4770      	bx	lr
 8010a76:	f803 1b01 	strb.w	r1, [r3], #1
 8010a7a:	e7f9      	b.n	8010a70 <memset+0x4>

08010a7c <_free_r>:
 8010a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a7e:	2900      	cmp	r1, #0
 8010a80:	d044      	beq.n	8010b0c <_free_r+0x90>
 8010a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a86:	9001      	str	r0, [sp, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8010a8e:	bfb8      	it	lt
 8010a90:	18e4      	addlt	r4, r4, r3
 8010a92:	f001 fbff 	bl	8012294 <__malloc_lock>
 8010a96:	4a1e      	ldr	r2, [pc, #120]	; (8010b10 <_free_r+0x94>)
 8010a98:	9801      	ldr	r0, [sp, #4]
 8010a9a:	6813      	ldr	r3, [r2, #0]
 8010a9c:	b933      	cbnz	r3, 8010aac <_free_r+0x30>
 8010a9e:	6063      	str	r3, [r4, #4]
 8010aa0:	6014      	str	r4, [r2, #0]
 8010aa2:	b003      	add	sp, #12
 8010aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aa8:	f001 bbfa 	b.w	80122a0 <__malloc_unlock>
 8010aac:	42a3      	cmp	r3, r4
 8010aae:	d908      	bls.n	8010ac2 <_free_r+0x46>
 8010ab0:	6825      	ldr	r5, [r4, #0]
 8010ab2:	1961      	adds	r1, r4, r5
 8010ab4:	428b      	cmp	r3, r1
 8010ab6:	bf01      	itttt	eq
 8010ab8:	6819      	ldreq	r1, [r3, #0]
 8010aba:	685b      	ldreq	r3, [r3, #4]
 8010abc:	1949      	addeq	r1, r1, r5
 8010abe:	6021      	streq	r1, [r4, #0]
 8010ac0:	e7ed      	b.n	8010a9e <_free_r+0x22>
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	b10b      	cbz	r3, 8010acc <_free_r+0x50>
 8010ac8:	42a3      	cmp	r3, r4
 8010aca:	d9fa      	bls.n	8010ac2 <_free_r+0x46>
 8010acc:	6811      	ldr	r1, [r2, #0]
 8010ace:	1855      	adds	r5, r2, r1
 8010ad0:	42a5      	cmp	r5, r4
 8010ad2:	d10b      	bne.n	8010aec <_free_r+0x70>
 8010ad4:	6824      	ldr	r4, [r4, #0]
 8010ad6:	4421      	add	r1, r4
 8010ad8:	1854      	adds	r4, r2, r1
 8010ada:	42a3      	cmp	r3, r4
 8010adc:	6011      	str	r1, [r2, #0]
 8010ade:	d1e0      	bne.n	8010aa2 <_free_r+0x26>
 8010ae0:	681c      	ldr	r4, [r3, #0]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	6053      	str	r3, [r2, #4]
 8010ae6:	4421      	add	r1, r4
 8010ae8:	6011      	str	r1, [r2, #0]
 8010aea:	e7da      	b.n	8010aa2 <_free_r+0x26>
 8010aec:	d902      	bls.n	8010af4 <_free_r+0x78>
 8010aee:	230c      	movs	r3, #12
 8010af0:	6003      	str	r3, [r0, #0]
 8010af2:	e7d6      	b.n	8010aa2 <_free_r+0x26>
 8010af4:	6825      	ldr	r5, [r4, #0]
 8010af6:	1961      	adds	r1, r4, r5
 8010af8:	428b      	cmp	r3, r1
 8010afa:	bf04      	itt	eq
 8010afc:	6819      	ldreq	r1, [r3, #0]
 8010afe:	685b      	ldreq	r3, [r3, #4]
 8010b00:	6063      	str	r3, [r4, #4]
 8010b02:	bf04      	itt	eq
 8010b04:	1949      	addeq	r1, r1, r5
 8010b06:	6021      	streq	r1, [r4, #0]
 8010b08:	6054      	str	r4, [r2, #4]
 8010b0a:	e7ca      	b.n	8010aa2 <_free_r+0x26>
 8010b0c:	b003      	add	sp, #12
 8010b0e:	bd30      	pop	{r4, r5, pc}
 8010b10:	20003b1c 	.word	0x20003b1c

08010b14 <sbrk_aligned>:
 8010b14:	b570      	push	{r4, r5, r6, lr}
 8010b16:	4e0e      	ldr	r6, [pc, #56]	; (8010b50 <sbrk_aligned+0x3c>)
 8010b18:	460c      	mov	r4, r1
 8010b1a:	6831      	ldr	r1, [r6, #0]
 8010b1c:	4605      	mov	r5, r0
 8010b1e:	b911      	cbnz	r1, 8010b26 <sbrk_aligned+0x12>
 8010b20:	f000 fcf6 	bl	8011510 <_sbrk_r>
 8010b24:	6030      	str	r0, [r6, #0]
 8010b26:	4621      	mov	r1, r4
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f000 fcf1 	bl	8011510 <_sbrk_r>
 8010b2e:	1c43      	adds	r3, r0, #1
 8010b30:	d00a      	beq.n	8010b48 <sbrk_aligned+0x34>
 8010b32:	1cc4      	adds	r4, r0, #3
 8010b34:	f024 0403 	bic.w	r4, r4, #3
 8010b38:	42a0      	cmp	r0, r4
 8010b3a:	d007      	beq.n	8010b4c <sbrk_aligned+0x38>
 8010b3c:	1a21      	subs	r1, r4, r0
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f000 fce6 	bl	8011510 <_sbrk_r>
 8010b44:	3001      	adds	r0, #1
 8010b46:	d101      	bne.n	8010b4c <sbrk_aligned+0x38>
 8010b48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}
 8010b50:	20003b20 	.word	0x20003b20

08010b54 <_malloc_r>:
 8010b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b58:	1ccd      	adds	r5, r1, #3
 8010b5a:	f025 0503 	bic.w	r5, r5, #3
 8010b5e:	3508      	adds	r5, #8
 8010b60:	2d0c      	cmp	r5, #12
 8010b62:	bf38      	it	cc
 8010b64:	250c      	movcc	r5, #12
 8010b66:	2d00      	cmp	r5, #0
 8010b68:	4607      	mov	r7, r0
 8010b6a:	db01      	blt.n	8010b70 <_malloc_r+0x1c>
 8010b6c:	42a9      	cmp	r1, r5
 8010b6e:	d905      	bls.n	8010b7c <_malloc_r+0x28>
 8010b70:	230c      	movs	r3, #12
 8010b72:	603b      	str	r3, [r7, #0]
 8010b74:	2600      	movs	r6, #0
 8010b76:	4630      	mov	r0, r6
 8010b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b7c:	4e2e      	ldr	r6, [pc, #184]	; (8010c38 <_malloc_r+0xe4>)
 8010b7e:	f001 fb89 	bl	8012294 <__malloc_lock>
 8010b82:	6833      	ldr	r3, [r6, #0]
 8010b84:	461c      	mov	r4, r3
 8010b86:	bb34      	cbnz	r4, 8010bd6 <_malloc_r+0x82>
 8010b88:	4629      	mov	r1, r5
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	f7ff ffc2 	bl	8010b14 <sbrk_aligned>
 8010b90:	1c43      	adds	r3, r0, #1
 8010b92:	4604      	mov	r4, r0
 8010b94:	d14d      	bne.n	8010c32 <_malloc_r+0xde>
 8010b96:	6834      	ldr	r4, [r6, #0]
 8010b98:	4626      	mov	r6, r4
 8010b9a:	2e00      	cmp	r6, #0
 8010b9c:	d140      	bne.n	8010c20 <_malloc_r+0xcc>
 8010b9e:	6823      	ldr	r3, [r4, #0]
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	4638      	mov	r0, r7
 8010ba4:	eb04 0803 	add.w	r8, r4, r3
 8010ba8:	f000 fcb2 	bl	8011510 <_sbrk_r>
 8010bac:	4580      	cmp	r8, r0
 8010bae:	d13a      	bne.n	8010c26 <_malloc_r+0xd2>
 8010bb0:	6821      	ldr	r1, [r4, #0]
 8010bb2:	3503      	adds	r5, #3
 8010bb4:	1a6d      	subs	r5, r5, r1
 8010bb6:	f025 0503 	bic.w	r5, r5, #3
 8010bba:	3508      	adds	r5, #8
 8010bbc:	2d0c      	cmp	r5, #12
 8010bbe:	bf38      	it	cc
 8010bc0:	250c      	movcc	r5, #12
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	4638      	mov	r0, r7
 8010bc6:	f7ff ffa5 	bl	8010b14 <sbrk_aligned>
 8010bca:	3001      	adds	r0, #1
 8010bcc:	d02b      	beq.n	8010c26 <_malloc_r+0xd2>
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	442b      	add	r3, r5
 8010bd2:	6023      	str	r3, [r4, #0]
 8010bd4:	e00e      	b.n	8010bf4 <_malloc_r+0xa0>
 8010bd6:	6822      	ldr	r2, [r4, #0]
 8010bd8:	1b52      	subs	r2, r2, r5
 8010bda:	d41e      	bmi.n	8010c1a <_malloc_r+0xc6>
 8010bdc:	2a0b      	cmp	r2, #11
 8010bde:	d916      	bls.n	8010c0e <_malloc_r+0xba>
 8010be0:	1961      	adds	r1, r4, r5
 8010be2:	42a3      	cmp	r3, r4
 8010be4:	6025      	str	r5, [r4, #0]
 8010be6:	bf18      	it	ne
 8010be8:	6059      	strne	r1, [r3, #4]
 8010bea:	6863      	ldr	r3, [r4, #4]
 8010bec:	bf08      	it	eq
 8010bee:	6031      	streq	r1, [r6, #0]
 8010bf0:	5162      	str	r2, [r4, r5]
 8010bf2:	604b      	str	r3, [r1, #4]
 8010bf4:	4638      	mov	r0, r7
 8010bf6:	f104 060b 	add.w	r6, r4, #11
 8010bfa:	f001 fb51 	bl	80122a0 <__malloc_unlock>
 8010bfe:	f026 0607 	bic.w	r6, r6, #7
 8010c02:	1d23      	adds	r3, r4, #4
 8010c04:	1af2      	subs	r2, r6, r3
 8010c06:	d0b6      	beq.n	8010b76 <_malloc_r+0x22>
 8010c08:	1b9b      	subs	r3, r3, r6
 8010c0a:	50a3      	str	r3, [r4, r2]
 8010c0c:	e7b3      	b.n	8010b76 <_malloc_r+0x22>
 8010c0e:	6862      	ldr	r2, [r4, #4]
 8010c10:	42a3      	cmp	r3, r4
 8010c12:	bf0c      	ite	eq
 8010c14:	6032      	streq	r2, [r6, #0]
 8010c16:	605a      	strne	r2, [r3, #4]
 8010c18:	e7ec      	b.n	8010bf4 <_malloc_r+0xa0>
 8010c1a:	4623      	mov	r3, r4
 8010c1c:	6864      	ldr	r4, [r4, #4]
 8010c1e:	e7b2      	b.n	8010b86 <_malloc_r+0x32>
 8010c20:	4634      	mov	r4, r6
 8010c22:	6876      	ldr	r6, [r6, #4]
 8010c24:	e7b9      	b.n	8010b9a <_malloc_r+0x46>
 8010c26:	230c      	movs	r3, #12
 8010c28:	603b      	str	r3, [r7, #0]
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	f001 fb38 	bl	80122a0 <__malloc_unlock>
 8010c30:	e7a1      	b.n	8010b76 <_malloc_r+0x22>
 8010c32:	6025      	str	r5, [r4, #0]
 8010c34:	e7de      	b.n	8010bf4 <_malloc_r+0xa0>
 8010c36:	bf00      	nop
 8010c38:	20003b1c 	.word	0x20003b1c

08010c3c <__cvt>:
 8010c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c40:	ec55 4b10 	vmov	r4, r5, d0
 8010c44:	2d00      	cmp	r5, #0
 8010c46:	460e      	mov	r6, r1
 8010c48:	4619      	mov	r1, r3
 8010c4a:	462b      	mov	r3, r5
 8010c4c:	bfbb      	ittet	lt
 8010c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010c52:	461d      	movlt	r5, r3
 8010c54:	2300      	movge	r3, #0
 8010c56:	232d      	movlt	r3, #45	; 0x2d
 8010c58:	700b      	strb	r3, [r1, #0]
 8010c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010c60:	4691      	mov	r9, r2
 8010c62:	f023 0820 	bic.w	r8, r3, #32
 8010c66:	bfbc      	itt	lt
 8010c68:	4622      	movlt	r2, r4
 8010c6a:	4614      	movlt	r4, r2
 8010c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c70:	d005      	beq.n	8010c7e <__cvt+0x42>
 8010c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c76:	d100      	bne.n	8010c7a <__cvt+0x3e>
 8010c78:	3601      	adds	r6, #1
 8010c7a:	2102      	movs	r1, #2
 8010c7c:	e000      	b.n	8010c80 <__cvt+0x44>
 8010c7e:	2103      	movs	r1, #3
 8010c80:	ab03      	add	r3, sp, #12
 8010c82:	9301      	str	r3, [sp, #4]
 8010c84:	ab02      	add	r3, sp, #8
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	ec45 4b10 	vmov	d0, r4, r5
 8010c8c:	4653      	mov	r3, sl
 8010c8e:	4632      	mov	r2, r6
 8010c90:	f000 fd0e 	bl	80116b0 <_dtoa_r>
 8010c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010c98:	4607      	mov	r7, r0
 8010c9a:	d102      	bne.n	8010ca2 <__cvt+0x66>
 8010c9c:	f019 0f01 	tst.w	r9, #1
 8010ca0:	d022      	beq.n	8010ce8 <__cvt+0xac>
 8010ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ca6:	eb07 0906 	add.w	r9, r7, r6
 8010caa:	d110      	bne.n	8010cce <__cvt+0x92>
 8010cac:	783b      	ldrb	r3, [r7, #0]
 8010cae:	2b30      	cmp	r3, #48	; 0x30
 8010cb0:	d10a      	bne.n	8010cc8 <__cvt+0x8c>
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	4629      	mov	r1, r5
 8010cba:	f7ef ff1d 	bl	8000af8 <__aeabi_dcmpeq>
 8010cbe:	b918      	cbnz	r0, 8010cc8 <__cvt+0x8c>
 8010cc0:	f1c6 0601 	rsb	r6, r6, #1
 8010cc4:	f8ca 6000 	str.w	r6, [sl]
 8010cc8:	f8da 3000 	ldr.w	r3, [sl]
 8010ccc:	4499      	add	r9, r3
 8010cce:	2200      	movs	r2, #0
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	f7ef ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 8010cda:	b108      	cbz	r0, 8010ce0 <__cvt+0xa4>
 8010cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ce0:	2230      	movs	r2, #48	; 0x30
 8010ce2:	9b03      	ldr	r3, [sp, #12]
 8010ce4:	454b      	cmp	r3, r9
 8010ce6:	d307      	bcc.n	8010cf8 <__cvt+0xbc>
 8010ce8:	9b03      	ldr	r3, [sp, #12]
 8010cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cec:	1bdb      	subs	r3, r3, r7
 8010cee:	4638      	mov	r0, r7
 8010cf0:	6013      	str	r3, [r2, #0]
 8010cf2:	b004      	add	sp, #16
 8010cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf8:	1c59      	adds	r1, r3, #1
 8010cfa:	9103      	str	r1, [sp, #12]
 8010cfc:	701a      	strb	r2, [r3, #0]
 8010cfe:	e7f0      	b.n	8010ce2 <__cvt+0xa6>

08010d00 <__exponent>:
 8010d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d02:	4603      	mov	r3, r0
 8010d04:	2900      	cmp	r1, #0
 8010d06:	bfb8      	it	lt
 8010d08:	4249      	neglt	r1, r1
 8010d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8010d0e:	bfb4      	ite	lt
 8010d10:	222d      	movlt	r2, #45	; 0x2d
 8010d12:	222b      	movge	r2, #43	; 0x2b
 8010d14:	2909      	cmp	r1, #9
 8010d16:	7042      	strb	r2, [r0, #1]
 8010d18:	dd2a      	ble.n	8010d70 <__exponent+0x70>
 8010d1a:	f10d 0407 	add.w	r4, sp, #7
 8010d1e:	46a4      	mov	ip, r4
 8010d20:	270a      	movs	r7, #10
 8010d22:	46a6      	mov	lr, r4
 8010d24:	460a      	mov	r2, r1
 8010d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8010d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8010d2e:	3530      	adds	r5, #48	; 0x30
 8010d30:	2a63      	cmp	r2, #99	; 0x63
 8010d32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010d3a:	4631      	mov	r1, r6
 8010d3c:	dcf1      	bgt.n	8010d22 <__exponent+0x22>
 8010d3e:	3130      	adds	r1, #48	; 0x30
 8010d40:	f1ae 0502 	sub.w	r5, lr, #2
 8010d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010d48:	1c44      	adds	r4, r0, #1
 8010d4a:	4629      	mov	r1, r5
 8010d4c:	4561      	cmp	r1, ip
 8010d4e:	d30a      	bcc.n	8010d66 <__exponent+0x66>
 8010d50:	f10d 0209 	add.w	r2, sp, #9
 8010d54:	eba2 020e 	sub.w	r2, r2, lr
 8010d58:	4565      	cmp	r5, ip
 8010d5a:	bf88      	it	hi
 8010d5c:	2200      	movhi	r2, #0
 8010d5e:	4413      	add	r3, r2
 8010d60:	1a18      	subs	r0, r3, r0
 8010d62:	b003      	add	sp, #12
 8010d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010d6e:	e7ed      	b.n	8010d4c <__exponent+0x4c>
 8010d70:	2330      	movs	r3, #48	; 0x30
 8010d72:	3130      	adds	r1, #48	; 0x30
 8010d74:	7083      	strb	r3, [r0, #2]
 8010d76:	70c1      	strb	r1, [r0, #3]
 8010d78:	1d03      	adds	r3, r0, #4
 8010d7a:	e7f1      	b.n	8010d60 <__exponent+0x60>

08010d7c <_printf_float>:
 8010d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d80:	ed2d 8b02 	vpush	{d8}
 8010d84:	b08d      	sub	sp, #52	; 0x34
 8010d86:	460c      	mov	r4, r1
 8010d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010d8c:	4616      	mov	r6, r2
 8010d8e:	461f      	mov	r7, r3
 8010d90:	4605      	mov	r5, r0
 8010d92:	f001 fa7b 	bl	801228c <_localeconv_r>
 8010d96:	f8d0 a000 	ldr.w	sl, [r0]
 8010d9a:	4650      	mov	r0, sl
 8010d9c:	f7ef fa30 	bl	8000200 <strlen>
 8010da0:	2300      	movs	r3, #0
 8010da2:	930a      	str	r3, [sp, #40]	; 0x28
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	9305      	str	r3, [sp, #20]
 8010da8:	f8d8 3000 	ldr.w	r3, [r8]
 8010dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010db0:	3307      	adds	r3, #7
 8010db2:	f023 0307 	bic.w	r3, r3, #7
 8010db6:	f103 0208 	add.w	r2, r3, #8
 8010dba:	f8c8 2000 	str.w	r2, [r8]
 8010dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010dce:	9307      	str	r3, [sp, #28]
 8010dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8010dd4:	ee08 0a10 	vmov	s16, r0
 8010dd8:	4b9f      	ldr	r3, [pc, #636]	; (8011058 <_printf_float+0x2dc>)
 8010dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010de2:	f7ef febb 	bl	8000b5c <__aeabi_dcmpun>
 8010de6:	bb88      	cbnz	r0, 8010e4c <_printf_float+0xd0>
 8010de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dec:	4b9a      	ldr	r3, [pc, #616]	; (8011058 <_printf_float+0x2dc>)
 8010dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010df2:	f7ef fe95 	bl	8000b20 <__aeabi_dcmple>
 8010df6:	bb48      	cbnz	r0, 8010e4c <_printf_float+0xd0>
 8010df8:	2200      	movs	r2, #0
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	4640      	mov	r0, r8
 8010dfe:	4649      	mov	r1, r9
 8010e00:	f7ef fe84 	bl	8000b0c <__aeabi_dcmplt>
 8010e04:	b110      	cbz	r0, 8010e0c <_printf_float+0x90>
 8010e06:	232d      	movs	r3, #45	; 0x2d
 8010e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e0c:	4b93      	ldr	r3, [pc, #588]	; (801105c <_printf_float+0x2e0>)
 8010e0e:	4894      	ldr	r0, [pc, #592]	; (8011060 <_printf_float+0x2e4>)
 8010e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e14:	bf94      	ite	ls
 8010e16:	4698      	movls	r8, r3
 8010e18:	4680      	movhi	r8, r0
 8010e1a:	2303      	movs	r3, #3
 8010e1c:	6123      	str	r3, [r4, #16]
 8010e1e:	9b05      	ldr	r3, [sp, #20]
 8010e20:	f023 0204 	bic.w	r2, r3, #4
 8010e24:	6022      	str	r2, [r4, #0]
 8010e26:	f04f 0900 	mov.w	r9, #0
 8010e2a:	9700      	str	r7, [sp, #0]
 8010e2c:	4633      	mov	r3, r6
 8010e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e30:	4621      	mov	r1, r4
 8010e32:	4628      	mov	r0, r5
 8010e34:	f000 f9d8 	bl	80111e8 <_printf_common>
 8010e38:	3001      	adds	r0, #1
 8010e3a:	f040 8090 	bne.w	8010f5e <_printf_float+0x1e2>
 8010e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e42:	b00d      	add	sp, #52	; 0x34
 8010e44:	ecbd 8b02 	vpop	{d8}
 8010e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4c:	4642      	mov	r2, r8
 8010e4e:	464b      	mov	r3, r9
 8010e50:	4640      	mov	r0, r8
 8010e52:	4649      	mov	r1, r9
 8010e54:	f7ef fe82 	bl	8000b5c <__aeabi_dcmpun>
 8010e58:	b140      	cbz	r0, 8010e6c <_printf_float+0xf0>
 8010e5a:	464b      	mov	r3, r9
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	bfbc      	itt	lt
 8010e60:	232d      	movlt	r3, #45	; 0x2d
 8010e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010e66:	487f      	ldr	r0, [pc, #508]	; (8011064 <_printf_float+0x2e8>)
 8010e68:	4b7f      	ldr	r3, [pc, #508]	; (8011068 <_printf_float+0x2ec>)
 8010e6a:	e7d1      	b.n	8010e10 <_printf_float+0x94>
 8010e6c:	6863      	ldr	r3, [r4, #4]
 8010e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010e72:	9206      	str	r2, [sp, #24]
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	d13f      	bne.n	8010ef8 <_printf_float+0x17c>
 8010e78:	2306      	movs	r3, #6
 8010e7a:	6063      	str	r3, [r4, #4]
 8010e7c:	9b05      	ldr	r3, [sp, #20]
 8010e7e:	6861      	ldr	r1, [r4, #4]
 8010e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e84:	2300      	movs	r3, #0
 8010e86:	9303      	str	r3, [sp, #12]
 8010e88:	ab0a      	add	r3, sp, #40	; 0x28
 8010e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010e8e:	ab09      	add	r3, sp, #36	; 0x24
 8010e90:	ec49 8b10 	vmov	d0, r8, r9
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	6022      	str	r2, [r4, #0]
 8010e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	f7ff fecd 	bl	8010c3c <__cvt>
 8010ea2:	9b06      	ldr	r3, [sp, #24]
 8010ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ea6:	2b47      	cmp	r3, #71	; 0x47
 8010ea8:	4680      	mov	r8, r0
 8010eaa:	d108      	bne.n	8010ebe <_printf_float+0x142>
 8010eac:	1cc8      	adds	r0, r1, #3
 8010eae:	db02      	blt.n	8010eb6 <_printf_float+0x13a>
 8010eb0:	6863      	ldr	r3, [r4, #4]
 8010eb2:	4299      	cmp	r1, r3
 8010eb4:	dd41      	ble.n	8010f3a <_printf_float+0x1be>
 8010eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8010eba:	fa5f fb8b 	uxtb.w	fp, fp
 8010ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ec2:	d820      	bhi.n	8010f06 <_printf_float+0x18a>
 8010ec4:	3901      	subs	r1, #1
 8010ec6:	465a      	mov	r2, fp
 8010ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8010ece:	f7ff ff17 	bl	8010d00 <__exponent>
 8010ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ed4:	1813      	adds	r3, r2, r0
 8010ed6:	2a01      	cmp	r2, #1
 8010ed8:	4681      	mov	r9, r0
 8010eda:	6123      	str	r3, [r4, #16]
 8010edc:	dc02      	bgt.n	8010ee4 <_printf_float+0x168>
 8010ede:	6822      	ldr	r2, [r4, #0]
 8010ee0:	07d2      	lsls	r2, r2, #31
 8010ee2:	d501      	bpl.n	8010ee8 <_printf_float+0x16c>
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	6123      	str	r3, [r4, #16]
 8010ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d09c      	beq.n	8010e2a <_printf_float+0xae>
 8010ef0:	232d      	movs	r3, #45	; 0x2d
 8010ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ef6:	e798      	b.n	8010e2a <_printf_float+0xae>
 8010ef8:	9a06      	ldr	r2, [sp, #24]
 8010efa:	2a47      	cmp	r2, #71	; 0x47
 8010efc:	d1be      	bne.n	8010e7c <_printf_float+0x100>
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1bc      	bne.n	8010e7c <_printf_float+0x100>
 8010f02:	2301      	movs	r3, #1
 8010f04:	e7b9      	b.n	8010e7a <_printf_float+0xfe>
 8010f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f0a:	d118      	bne.n	8010f3e <_printf_float+0x1c2>
 8010f0c:	2900      	cmp	r1, #0
 8010f0e:	6863      	ldr	r3, [r4, #4]
 8010f10:	dd0b      	ble.n	8010f2a <_printf_float+0x1ae>
 8010f12:	6121      	str	r1, [r4, #16]
 8010f14:	b913      	cbnz	r3, 8010f1c <_printf_float+0x1a0>
 8010f16:	6822      	ldr	r2, [r4, #0]
 8010f18:	07d0      	lsls	r0, r2, #31
 8010f1a:	d502      	bpl.n	8010f22 <_printf_float+0x1a6>
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	440b      	add	r3, r1
 8010f20:	6123      	str	r3, [r4, #16]
 8010f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f24:	f04f 0900 	mov.w	r9, #0
 8010f28:	e7de      	b.n	8010ee8 <_printf_float+0x16c>
 8010f2a:	b913      	cbnz	r3, 8010f32 <_printf_float+0x1b6>
 8010f2c:	6822      	ldr	r2, [r4, #0]
 8010f2e:	07d2      	lsls	r2, r2, #31
 8010f30:	d501      	bpl.n	8010f36 <_printf_float+0x1ba>
 8010f32:	3302      	adds	r3, #2
 8010f34:	e7f4      	b.n	8010f20 <_printf_float+0x1a4>
 8010f36:	2301      	movs	r3, #1
 8010f38:	e7f2      	b.n	8010f20 <_printf_float+0x1a4>
 8010f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f40:	4299      	cmp	r1, r3
 8010f42:	db05      	blt.n	8010f50 <_printf_float+0x1d4>
 8010f44:	6823      	ldr	r3, [r4, #0]
 8010f46:	6121      	str	r1, [r4, #16]
 8010f48:	07d8      	lsls	r0, r3, #31
 8010f4a:	d5ea      	bpl.n	8010f22 <_printf_float+0x1a6>
 8010f4c:	1c4b      	adds	r3, r1, #1
 8010f4e:	e7e7      	b.n	8010f20 <_printf_float+0x1a4>
 8010f50:	2900      	cmp	r1, #0
 8010f52:	bfd4      	ite	le
 8010f54:	f1c1 0202 	rsble	r2, r1, #2
 8010f58:	2201      	movgt	r2, #1
 8010f5a:	4413      	add	r3, r2
 8010f5c:	e7e0      	b.n	8010f20 <_printf_float+0x1a4>
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	055a      	lsls	r2, r3, #21
 8010f62:	d407      	bmi.n	8010f74 <_printf_float+0x1f8>
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	4642      	mov	r2, r8
 8010f68:	4631      	mov	r1, r6
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	47b8      	blx	r7
 8010f6e:	3001      	adds	r0, #1
 8010f70:	d12c      	bne.n	8010fcc <_printf_float+0x250>
 8010f72:	e764      	b.n	8010e3e <_printf_float+0xc2>
 8010f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f78:	f240 80e0 	bls.w	801113c <_printf_float+0x3c0>
 8010f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f80:	2200      	movs	r2, #0
 8010f82:	2300      	movs	r3, #0
 8010f84:	f7ef fdb8 	bl	8000af8 <__aeabi_dcmpeq>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d034      	beq.n	8010ff6 <_printf_float+0x27a>
 8010f8c:	4a37      	ldr	r2, [pc, #220]	; (801106c <_printf_float+0x2f0>)
 8010f8e:	2301      	movs	r3, #1
 8010f90:	4631      	mov	r1, r6
 8010f92:	4628      	mov	r0, r5
 8010f94:	47b8      	blx	r7
 8010f96:	3001      	adds	r0, #1
 8010f98:	f43f af51 	beq.w	8010e3e <_printf_float+0xc2>
 8010f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	db02      	blt.n	8010faa <_printf_float+0x22e>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	07d8      	lsls	r0, r3, #31
 8010fa8:	d510      	bpl.n	8010fcc <_printf_float+0x250>
 8010faa:	ee18 3a10 	vmov	r3, s16
 8010fae:	4652      	mov	r2, sl
 8010fb0:	4631      	mov	r1, r6
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	47b8      	blx	r7
 8010fb6:	3001      	adds	r0, #1
 8010fb8:	f43f af41 	beq.w	8010e3e <_printf_float+0xc2>
 8010fbc:	f04f 0800 	mov.w	r8, #0
 8010fc0:	f104 091a 	add.w	r9, r4, #26
 8010fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fc6:	3b01      	subs	r3, #1
 8010fc8:	4543      	cmp	r3, r8
 8010fca:	dc09      	bgt.n	8010fe0 <_printf_float+0x264>
 8010fcc:	6823      	ldr	r3, [r4, #0]
 8010fce:	079b      	lsls	r3, r3, #30
 8010fd0:	f100 8105 	bmi.w	80111de <_printf_float+0x462>
 8010fd4:	68e0      	ldr	r0, [r4, #12]
 8010fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fd8:	4298      	cmp	r0, r3
 8010fda:	bfb8      	it	lt
 8010fdc:	4618      	movlt	r0, r3
 8010fde:	e730      	b.n	8010e42 <_printf_float+0xc6>
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	464a      	mov	r2, r9
 8010fe4:	4631      	mov	r1, r6
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	47b8      	blx	r7
 8010fea:	3001      	adds	r0, #1
 8010fec:	f43f af27 	beq.w	8010e3e <_printf_float+0xc2>
 8010ff0:	f108 0801 	add.w	r8, r8, #1
 8010ff4:	e7e6      	b.n	8010fc4 <_printf_float+0x248>
 8010ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	dc39      	bgt.n	8011070 <_printf_float+0x2f4>
 8010ffc:	4a1b      	ldr	r2, [pc, #108]	; (801106c <_printf_float+0x2f0>)
 8010ffe:	2301      	movs	r3, #1
 8011000:	4631      	mov	r1, r6
 8011002:	4628      	mov	r0, r5
 8011004:	47b8      	blx	r7
 8011006:	3001      	adds	r0, #1
 8011008:	f43f af19 	beq.w	8010e3e <_printf_float+0xc2>
 801100c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011010:	4313      	orrs	r3, r2
 8011012:	d102      	bne.n	801101a <_printf_float+0x29e>
 8011014:	6823      	ldr	r3, [r4, #0]
 8011016:	07d9      	lsls	r1, r3, #31
 8011018:	d5d8      	bpl.n	8010fcc <_printf_float+0x250>
 801101a:	ee18 3a10 	vmov	r3, s16
 801101e:	4652      	mov	r2, sl
 8011020:	4631      	mov	r1, r6
 8011022:	4628      	mov	r0, r5
 8011024:	47b8      	blx	r7
 8011026:	3001      	adds	r0, #1
 8011028:	f43f af09 	beq.w	8010e3e <_printf_float+0xc2>
 801102c:	f04f 0900 	mov.w	r9, #0
 8011030:	f104 0a1a 	add.w	sl, r4, #26
 8011034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011036:	425b      	negs	r3, r3
 8011038:	454b      	cmp	r3, r9
 801103a:	dc01      	bgt.n	8011040 <_printf_float+0x2c4>
 801103c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801103e:	e792      	b.n	8010f66 <_printf_float+0x1ea>
 8011040:	2301      	movs	r3, #1
 8011042:	4652      	mov	r2, sl
 8011044:	4631      	mov	r1, r6
 8011046:	4628      	mov	r0, r5
 8011048:	47b8      	blx	r7
 801104a:	3001      	adds	r0, #1
 801104c:	f43f aef7 	beq.w	8010e3e <_printf_float+0xc2>
 8011050:	f109 0901 	add.w	r9, r9, #1
 8011054:	e7ee      	b.n	8011034 <_printf_float+0x2b8>
 8011056:	bf00      	nop
 8011058:	7fefffff 	.word	0x7fefffff
 801105c:	0806891c 	.word	0x0806891c
 8011060:	08068920 	.word	0x08068920
 8011064:	08068928 	.word	0x08068928
 8011068:	08068924 	.word	0x08068924
 801106c:	0806892c 	.word	0x0806892c
 8011070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011074:	429a      	cmp	r2, r3
 8011076:	bfa8      	it	ge
 8011078:	461a      	movge	r2, r3
 801107a:	2a00      	cmp	r2, #0
 801107c:	4691      	mov	r9, r2
 801107e:	dc37      	bgt.n	80110f0 <_printf_float+0x374>
 8011080:	f04f 0b00 	mov.w	fp, #0
 8011084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011088:	f104 021a 	add.w	r2, r4, #26
 801108c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801108e:	9305      	str	r3, [sp, #20]
 8011090:	eba3 0309 	sub.w	r3, r3, r9
 8011094:	455b      	cmp	r3, fp
 8011096:	dc33      	bgt.n	8011100 <_printf_float+0x384>
 8011098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801109c:	429a      	cmp	r2, r3
 801109e:	db3b      	blt.n	8011118 <_printf_float+0x39c>
 80110a0:	6823      	ldr	r3, [r4, #0]
 80110a2:	07da      	lsls	r2, r3, #31
 80110a4:	d438      	bmi.n	8011118 <_printf_float+0x39c>
 80110a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110a8:	9a05      	ldr	r2, [sp, #20]
 80110aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80110ac:	1a9a      	subs	r2, r3, r2
 80110ae:	eba3 0901 	sub.w	r9, r3, r1
 80110b2:	4591      	cmp	r9, r2
 80110b4:	bfa8      	it	ge
 80110b6:	4691      	movge	r9, r2
 80110b8:	f1b9 0f00 	cmp.w	r9, #0
 80110bc:	dc35      	bgt.n	801112a <_printf_float+0x3ae>
 80110be:	f04f 0800 	mov.w	r8, #0
 80110c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110c6:	f104 0a1a 	add.w	sl, r4, #26
 80110ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110ce:	1a9b      	subs	r3, r3, r2
 80110d0:	eba3 0309 	sub.w	r3, r3, r9
 80110d4:	4543      	cmp	r3, r8
 80110d6:	f77f af79 	ble.w	8010fcc <_printf_float+0x250>
 80110da:	2301      	movs	r3, #1
 80110dc:	4652      	mov	r2, sl
 80110de:	4631      	mov	r1, r6
 80110e0:	4628      	mov	r0, r5
 80110e2:	47b8      	blx	r7
 80110e4:	3001      	adds	r0, #1
 80110e6:	f43f aeaa 	beq.w	8010e3e <_printf_float+0xc2>
 80110ea:	f108 0801 	add.w	r8, r8, #1
 80110ee:	e7ec      	b.n	80110ca <_printf_float+0x34e>
 80110f0:	4613      	mov	r3, r2
 80110f2:	4631      	mov	r1, r6
 80110f4:	4642      	mov	r2, r8
 80110f6:	4628      	mov	r0, r5
 80110f8:	47b8      	blx	r7
 80110fa:	3001      	adds	r0, #1
 80110fc:	d1c0      	bne.n	8011080 <_printf_float+0x304>
 80110fe:	e69e      	b.n	8010e3e <_printf_float+0xc2>
 8011100:	2301      	movs	r3, #1
 8011102:	4631      	mov	r1, r6
 8011104:	4628      	mov	r0, r5
 8011106:	9205      	str	r2, [sp, #20]
 8011108:	47b8      	blx	r7
 801110a:	3001      	adds	r0, #1
 801110c:	f43f ae97 	beq.w	8010e3e <_printf_float+0xc2>
 8011110:	9a05      	ldr	r2, [sp, #20]
 8011112:	f10b 0b01 	add.w	fp, fp, #1
 8011116:	e7b9      	b.n	801108c <_printf_float+0x310>
 8011118:	ee18 3a10 	vmov	r3, s16
 801111c:	4652      	mov	r2, sl
 801111e:	4631      	mov	r1, r6
 8011120:	4628      	mov	r0, r5
 8011122:	47b8      	blx	r7
 8011124:	3001      	adds	r0, #1
 8011126:	d1be      	bne.n	80110a6 <_printf_float+0x32a>
 8011128:	e689      	b.n	8010e3e <_printf_float+0xc2>
 801112a:	9a05      	ldr	r2, [sp, #20]
 801112c:	464b      	mov	r3, r9
 801112e:	4442      	add	r2, r8
 8011130:	4631      	mov	r1, r6
 8011132:	4628      	mov	r0, r5
 8011134:	47b8      	blx	r7
 8011136:	3001      	adds	r0, #1
 8011138:	d1c1      	bne.n	80110be <_printf_float+0x342>
 801113a:	e680      	b.n	8010e3e <_printf_float+0xc2>
 801113c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801113e:	2a01      	cmp	r2, #1
 8011140:	dc01      	bgt.n	8011146 <_printf_float+0x3ca>
 8011142:	07db      	lsls	r3, r3, #31
 8011144:	d538      	bpl.n	80111b8 <_printf_float+0x43c>
 8011146:	2301      	movs	r3, #1
 8011148:	4642      	mov	r2, r8
 801114a:	4631      	mov	r1, r6
 801114c:	4628      	mov	r0, r5
 801114e:	47b8      	blx	r7
 8011150:	3001      	adds	r0, #1
 8011152:	f43f ae74 	beq.w	8010e3e <_printf_float+0xc2>
 8011156:	ee18 3a10 	vmov	r3, s16
 801115a:	4652      	mov	r2, sl
 801115c:	4631      	mov	r1, r6
 801115e:	4628      	mov	r0, r5
 8011160:	47b8      	blx	r7
 8011162:	3001      	adds	r0, #1
 8011164:	f43f ae6b 	beq.w	8010e3e <_printf_float+0xc2>
 8011168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801116c:	2200      	movs	r2, #0
 801116e:	2300      	movs	r3, #0
 8011170:	f7ef fcc2 	bl	8000af8 <__aeabi_dcmpeq>
 8011174:	b9d8      	cbnz	r0, 80111ae <_printf_float+0x432>
 8011176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011178:	f108 0201 	add.w	r2, r8, #1
 801117c:	3b01      	subs	r3, #1
 801117e:	4631      	mov	r1, r6
 8011180:	4628      	mov	r0, r5
 8011182:	47b8      	blx	r7
 8011184:	3001      	adds	r0, #1
 8011186:	d10e      	bne.n	80111a6 <_printf_float+0x42a>
 8011188:	e659      	b.n	8010e3e <_printf_float+0xc2>
 801118a:	2301      	movs	r3, #1
 801118c:	4652      	mov	r2, sl
 801118e:	4631      	mov	r1, r6
 8011190:	4628      	mov	r0, r5
 8011192:	47b8      	blx	r7
 8011194:	3001      	adds	r0, #1
 8011196:	f43f ae52 	beq.w	8010e3e <_printf_float+0xc2>
 801119a:	f108 0801 	add.w	r8, r8, #1
 801119e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111a0:	3b01      	subs	r3, #1
 80111a2:	4543      	cmp	r3, r8
 80111a4:	dcf1      	bgt.n	801118a <_printf_float+0x40e>
 80111a6:	464b      	mov	r3, r9
 80111a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111ac:	e6dc      	b.n	8010f68 <_printf_float+0x1ec>
 80111ae:	f04f 0800 	mov.w	r8, #0
 80111b2:	f104 0a1a 	add.w	sl, r4, #26
 80111b6:	e7f2      	b.n	801119e <_printf_float+0x422>
 80111b8:	2301      	movs	r3, #1
 80111ba:	4642      	mov	r2, r8
 80111bc:	e7df      	b.n	801117e <_printf_float+0x402>
 80111be:	2301      	movs	r3, #1
 80111c0:	464a      	mov	r2, r9
 80111c2:	4631      	mov	r1, r6
 80111c4:	4628      	mov	r0, r5
 80111c6:	47b8      	blx	r7
 80111c8:	3001      	adds	r0, #1
 80111ca:	f43f ae38 	beq.w	8010e3e <_printf_float+0xc2>
 80111ce:	f108 0801 	add.w	r8, r8, #1
 80111d2:	68e3      	ldr	r3, [r4, #12]
 80111d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	4543      	cmp	r3, r8
 80111da:	dcf0      	bgt.n	80111be <_printf_float+0x442>
 80111dc:	e6fa      	b.n	8010fd4 <_printf_float+0x258>
 80111de:	f04f 0800 	mov.w	r8, #0
 80111e2:	f104 0919 	add.w	r9, r4, #25
 80111e6:	e7f4      	b.n	80111d2 <_printf_float+0x456>

080111e8 <_printf_common>:
 80111e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ec:	4616      	mov	r6, r2
 80111ee:	4699      	mov	r9, r3
 80111f0:	688a      	ldr	r2, [r1, #8]
 80111f2:	690b      	ldr	r3, [r1, #16]
 80111f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80111f8:	4293      	cmp	r3, r2
 80111fa:	bfb8      	it	lt
 80111fc:	4613      	movlt	r3, r2
 80111fe:	6033      	str	r3, [r6, #0]
 8011200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011204:	4607      	mov	r7, r0
 8011206:	460c      	mov	r4, r1
 8011208:	b10a      	cbz	r2, 801120e <_printf_common+0x26>
 801120a:	3301      	adds	r3, #1
 801120c:	6033      	str	r3, [r6, #0]
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	0699      	lsls	r1, r3, #26
 8011212:	bf42      	ittt	mi
 8011214:	6833      	ldrmi	r3, [r6, #0]
 8011216:	3302      	addmi	r3, #2
 8011218:	6033      	strmi	r3, [r6, #0]
 801121a:	6825      	ldr	r5, [r4, #0]
 801121c:	f015 0506 	ands.w	r5, r5, #6
 8011220:	d106      	bne.n	8011230 <_printf_common+0x48>
 8011222:	f104 0a19 	add.w	sl, r4, #25
 8011226:	68e3      	ldr	r3, [r4, #12]
 8011228:	6832      	ldr	r2, [r6, #0]
 801122a:	1a9b      	subs	r3, r3, r2
 801122c:	42ab      	cmp	r3, r5
 801122e:	dc26      	bgt.n	801127e <_printf_common+0x96>
 8011230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011234:	1e13      	subs	r3, r2, #0
 8011236:	6822      	ldr	r2, [r4, #0]
 8011238:	bf18      	it	ne
 801123a:	2301      	movne	r3, #1
 801123c:	0692      	lsls	r2, r2, #26
 801123e:	d42b      	bmi.n	8011298 <_printf_common+0xb0>
 8011240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011244:	4649      	mov	r1, r9
 8011246:	4638      	mov	r0, r7
 8011248:	47c0      	blx	r8
 801124a:	3001      	adds	r0, #1
 801124c:	d01e      	beq.n	801128c <_printf_common+0xa4>
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	68e5      	ldr	r5, [r4, #12]
 8011252:	6832      	ldr	r2, [r6, #0]
 8011254:	f003 0306 	and.w	r3, r3, #6
 8011258:	2b04      	cmp	r3, #4
 801125a:	bf08      	it	eq
 801125c:	1aad      	subeq	r5, r5, r2
 801125e:	68a3      	ldr	r3, [r4, #8]
 8011260:	6922      	ldr	r2, [r4, #16]
 8011262:	bf0c      	ite	eq
 8011264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011268:	2500      	movne	r5, #0
 801126a:	4293      	cmp	r3, r2
 801126c:	bfc4      	itt	gt
 801126e:	1a9b      	subgt	r3, r3, r2
 8011270:	18ed      	addgt	r5, r5, r3
 8011272:	2600      	movs	r6, #0
 8011274:	341a      	adds	r4, #26
 8011276:	42b5      	cmp	r5, r6
 8011278:	d11a      	bne.n	80112b0 <_printf_common+0xc8>
 801127a:	2000      	movs	r0, #0
 801127c:	e008      	b.n	8011290 <_printf_common+0xa8>
 801127e:	2301      	movs	r3, #1
 8011280:	4652      	mov	r2, sl
 8011282:	4649      	mov	r1, r9
 8011284:	4638      	mov	r0, r7
 8011286:	47c0      	blx	r8
 8011288:	3001      	adds	r0, #1
 801128a:	d103      	bne.n	8011294 <_printf_common+0xac>
 801128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011294:	3501      	adds	r5, #1
 8011296:	e7c6      	b.n	8011226 <_printf_common+0x3e>
 8011298:	18e1      	adds	r1, r4, r3
 801129a:	1c5a      	adds	r2, r3, #1
 801129c:	2030      	movs	r0, #48	; 0x30
 801129e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112a2:	4422      	add	r2, r4
 80112a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112ac:	3302      	adds	r3, #2
 80112ae:	e7c7      	b.n	8011240 <_printf_common+0x58>
 80112b0:	2301      	movs	r3, #1
 80112b2:	4622      	mov	r2, r4
 80112b4:	4649      	mov	r1, r9
 80112b6:	4638      	mov	r0, r7
 80112b8:	47c0      	blx	r8
 80112ba:	3001      	adds	r0, #1
 80112bc:	d0e6      	beq.n	801128c <_printf_common+0xa4>
 80112be:	3601      	adds	r6, #1
 80112c0:	e7d9      	b.n	8011276 <_printf_common+0x8e>
	...

080112c4 <_printf_i>:
 80112c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112c8:	7e0f      	ldrb	r7, [r1, #24]
 80112ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112cc:	2f78      	cmp	r7, #120	; 0x78
 80112ce:	4691      	mov	r9, r2
 80112d0:	4680      	mov	r8, r0
 80112d2:	460c      	mov	r4, r1
 80112d4:	469a      	mov	sl, r3
 80112d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80112da:	d807      	bhi.n	80112ec <_printf_i+0x28>
 80112dc:	2f62      	cmp	r7, #98	; 0x62
 80112de:	d80a      	bhi.n	80112f6 <_printf_i+0x32>
 80112e0:	2f00      	cmp	r7, #0
 80112e2:	f000 80d8 	beq.w	8011496 <_printf_i+0x1d2>
 80112e6:	2f58      	cmp	r7, #88	; 0x58
 80112e8:	f000 80a3 	beq.w	8011432 <_printf_i+0x16e>
 80112ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80112f4:	e03a      	b.n	801136c <_printf_i+0xa8>
 80112f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80112fa:	2b15      	cmp	r3, #21
 80112fc:	d8f6      	bhi.n	80112ec <_printf_i+0x28>
 80112fe:	a101      	add	r1, pc, #4	; (adr r1, 8011304 <_printf_i+0x40>)
 8011300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011304:	0801135d 	.word	0x0801135d
 8011308:	08011371 	.word	0x08011371
 801130c:	080112ed 	.word	0x080112ed
 8011310:	080112ed 	.word	0x080112ed
 8011314:	080112ed 	.word	0x080112ed
 8011318:	080112ed 	.word	0x080112ed
 801131c:	08011371 	.word	0x08011371
 8011320:	080112ed 	.word	0x080112ed
 8011324:	080112ed 	.word	0x080112ed
 8011328:	080112ed 	.word	0x080112ed
 801132c:	080112ed 	.word	0x080112ed
 8011330:	0801147d 	.word	0x0801147d
 8011334:	080113a1 	.word	0x080113a1
 8011338:	0801145f 	.word	0x0801145f
 801133c:	080112ed 	.word	0x080112ed
 8011340:	080112ed 	.word	0x080112ed
 8011344:	0801149f 	.word	0x0801149f
 8011348:	080112ed 	.word	0x080112ed
 801134c:	080113a1 	.word	0x080113a1
 8011350:	080112ed 	.word	0x080112ed
 8011354:	080112ed 	.word	0x080112ed
 8011358:	08011467 	.word	0x08011467
 801135c:	682b      	ldr	r3, [r5, #0]
 801135e:	1d1a      	adds	r2, r3, #4
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	602a      	str	r2, [r5, #0]
 8011364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801136c:	2301      	movs	r3, #1
 801136e:	e0a3      	b.n	80114b8 <_printf_i+0x1f4>
 8011370:	6820      	ldr	r0, [r4, #0]
 8011372:	6829      	ldr	r1, [r5, #0]
 8011374:	0606      	lsls	r6, r0, #24
 8011376:	f101 0304 	add.w	r3, r1, #4
 801137a:	d50a      	bpl.n	8011392 <_printf_i+0xce>
 801137c:	680e      	ldr	r6, [r1, #0]
 801137e:	602b      	str	r3, [r5, #0]
 8011380:	2e00      	cmp	r6, #0
 8011382:	da03      	bge.n	801138c <_printf_i+0xc8>
 8011384:	232d      	movs	r3, #45	; 0x2d
 8011386:	4276      	negs	r6, r6
 8011388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801138c:	485e      	ldr	r0, [pc, #376]	; (8011508 <_printf_i+0x244>)
 801138e:	230a      	movs	r3, #10
 8011390:	e019      	b.n	80113c6 <_printf_i+0x102>
 8011392:	680e      	ldr	r6, [r1, #0]
 8011394:	602b      	str	r3, [r5, #0]
 8011396:	f010 0f40 	tst.w	r0, #64	; 0x40
 801139a:	bf18      	it	ne
 801139c:	b236      	sxthne	r6, r6
 801139e:	e7ef      	b.n	8011380 <_printf_i+0xbc>
 80113a0:	682b      	ldr	r3, [r5, #0]
 80113a2:	6820      	ldr	r0, [r4, #0]
 80113a4:	1d19      	adds	r1, r3, #4
 80113a6:	6029      	str	r1, [r5, #0]
 80113a8:	0601      	lsls	r1, r0, #24
 80113aa:	d501      	bpl.n	80113b0 <_printf_i+0xec>
 80113ac:	681e      	ldr	r6, [r3, #0]
 80113ae:	e002      	b.n	80113b6 <_printf_i+0xf2>
 80113b0:	0646      	lsls	r6, r0, #25
 80113b2:	d5fb      	bpl.n	80113ac <_printf_i+0xe8>
 80113b4:	881e      	ldrh	r6, [r3, #0]
 80113b6:	4854      	ldr	r0, [pc, #336]	; (8011508 <_printf_i+0x244>)
 80113b8:	2f6f      	cmp	r7, #111	; 0x6f
 80113ba:	bf0c      	ite	eq
 80113bc:	2308      	moveq	r3, #8
 80113be:	230a      	movne	r3, #10
 80113c0:	2100      	movs	r1, #0
 80113c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113c6:	6865      	ldr	r5, [r4, #4]
 80113c8:	60a5      	str	r5, [r4, #8]
 80113ca:	2d00      	cmp	r5, #0
 80113cc:	bfa2      	ittt	ge
 80113ce:	6821      	ldrge	r1, [r4, #0]
 80113d0:	f021 0104 	bicge.w	r1, r1, #4
 80113d4:	6021      	strge	r1, [r4, #0]
 80113d6:	b90e      	cbnz	r6, 80113dc <_printf_i+0x118>
 80113d8:	2d00      	cmp	r5, #0
 80113da:	d04d      	beq.n	8011478 <_printf_i+0x1b4>
 80113dc:	4615      	mov	r5, r2
 80113de:	fbb6 f1f3 	udiv	r1, r6, r3
 80113e2:	fb03 6711 	mls	r7, r3, r1, r6
 80113e6:	5dc7      	ldrb	r7, [r0, r7]
 80113e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80113ec:	4637      	mov	r7, r6
 80113ee:	42bb      	cmp	r3, r7
 80113f0:	460e      	mov	r6, r1
 80113f2:	d9f4      	bls.n	80113de <_printf_i+0x11a>
 80113f4:	2b08      	cmp	r3, #8
 80113f6:	d10b      	bne.n	8011410 <_printf_i+0x14c>
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	07de      	lsls	r6, r3, #31
 80113fc:	d508      	bpl.n	8011410 <_printf_i+0x14c>
 80113fe:	6923      	ldr	r3, [r4, #16]
 8011400:	6861      	ldr	r1, [r4, #4]
 8011402:	4299      	cmp	r1, r3
 8011404:	bfde      	ittt	le
 8011406:	2330      	movle	r3, #48	; 0x30
 8011408:	f805 3c01 	strble.w	r3, [r5, #-1]
 801140c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011410:	1b52      	subs	r2, r2, r5
 8011412:	6122      	str	r2, [r4, #16]
 8011414:	f8cd a000 	str.w	sl, [sp]
 8011418:	464b      	mov	r3, r9
 801141a:	aa03      	add	r2, sp, #12
 801141c:	4621      	mov	r1, r4
 801141e:	4640      	mov	r0, r8
 8011420:	f7ff fee2 	bl	80111e8 <_printf_common>
 8011424:	3001      	adds	r0, #1
 8011426:	d14c      	bne.n	80114c2 <_printf_i+0x1fe>
 8011428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801142c:	b004      	add	sp, #16
 801142e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011432:	4835      	ldr	r0, [pc, #212]	; (8011508 <_printf_i+0x244>)
 8011434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011438:	6829      	ldr	r1, [r5, #0]
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011440:	6029      	str	r1, [r5, #0]
 8011442:	061d      	lsls	r5, r3, #24
 8011444:	d514      	bpl.n	8011470 <_printf_i+0x1ac>
 8011446:	07df      	lsls	r7, r3, #31
 8011448:	bf44      	itt	mi
 801144a:	f043 0320 	orrmi.w	r3, r3, #32
 801144e:	6023      	strmi	r3, [r4, #0]
 8011450:	b91e      	cbnz	r6, 801145a <_printf_i+0x196>
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	f023 0320 	bic.w	r3, r3, #32
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	2310      	movs	r3, #16
 801145c:	e7b0      	b.n	80113c0 <_printf_i+0xfc>
 801145e:	6823      	ldr	r3, [r4, #0]
 8011460:	f043 0320 	orr.w	r3, r3, #32
 8011464:	6023      	str	r3, [r4, #0]
 8011466:	2378      	movs	r3, #120	; 0x78
 8011468:	4828      	ldr	r0, [pc, #160]	; (801150c <_printf_i+0x248>)
 801146a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801146e:	e7e3      	b.n	8011438 <_printf_i+0x174>
 8011470:	0659      	lsls	r1, r3, #25
 8011472:	bf48      	it	mi
 8011474:	b2b6      	uxthmi	r6, r6
 8011476:	e7e6      	b.n	8011446 <_printf_i+0x182>
 8011478:	4615      	mov	r5, r2
 801147a:	e7bb      	b.n	80113f4 <_printf_i+0x130>
 801147c:	682b      	ldr	r3, [r5, #0]
 801147e:	6826      	ldr	r6, [r4, #0]
 8011480:	6961      	ldr	r1, [r4, #20]
 8011482:	1d18      	adds	r0, r3, #4
 8011484:	6028      	str	r0, [r5, #0]
 8011486:	0635      	lsls	r5, r6, #24
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	d501      	bpl.n	8011490 <_printf_i+0x1cc>
 801148c:	6019      	str	r1, [r3, #0]
 801148e:	e002      	b.n	8011496 <_printf_i+0x1d2>
 8011490:	0670      	lsls	r0, r6, #25
 8011492:	d5fb      	bpl.n	801148c <_printf_i+0x1c8>
 8011494:	8019      	strh	r1, [r3, #0]
 8011496:	2300      	movs	r3, #0
 8011498:	6123      	str	r3, [r4, #16]
 801149a:	4615      	mov	r5, r2
 801149c:	e7ba      	b.n	8011414 <_printf_i+0x150>
 801149e:	682b      	ldr	r3, [r5, #0]
 80114a0:	1d1a      	adds	r2, r3, #4
 80114a2:	602a      	str	r2, [r5, #0]
 80114a4:	681d      	ldr	r5, [r3, #0]
 80114a6:	6862      	ldr	r2, [r4, #4]
 80114a8:	2100      	movs	r1, #0
 80114aa:	4628      	mov	r0, r5
 80114ac:	f7ee feb0 	bl	8000210 <memchr>
 80114b0:	b108      	cbz	r0, 80114b6 <_printf_i+0x1f2>
 80114b2:	1b40      	subs	r0, r0, r5
 80114b4:	6060      	str	r0, [r4, #4]
 80114b6:	6863      	ldr	r3, [r4, #4]
 80114b8:	6123      	str	r3, [r4, #16]
 80114ba:	2300      	movs	r3, #0
 80114bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114c0:	e7a8      	b.n	8011414 <_printf_i+0x150>
 80114c2:	6923      	ldr	r3, [r4, #16]
 80114c4:	462a      	mov	r2, r5
 80114c6:	4649      	mov	r1, r9
 80114c8:	4640      	mov	r0, r8
 80114ca:	47d0      	blx	sl
 80114cc:	3001      	adds	r0, #1
 80114ce:	d0ab      	beq.n	8011428 <_printf_i+0x164>
 80114d0:	6823      	ldr	r3, [r4, #0]
 80114d2:	079b      	lsls	r3, r3, #30
 80114d4:	d413      	bmi.n	80114fe <_printf_i+0x23a>
 80114d6:	68e0      	ldr	r0, [r4, #12]
 80114d8:	9b03      	ldr	r3, [sp, #12]
 80114da:	4298      	cmp	r0, r3
 80114dc:	bfb8      	it	lt
 80114de:	4618      	movlt	r0, r3
 80114e0:	e7a4      	b.n	801142c <_printf_i+0x168>
 80114e2:	2301      	movs	r3, #1
 80114e4:	4632      	mov	r2, r6
 80114e6:	4649      	mov	r1, r9
 80114e8:	4640      	mov	r0, r8
 80114ea:	47d0      	blx	sl
 80114ec:	3001      	adds	r0, #1
 80114ee:	d09b      	beq.n	8011428 <_printf_i+0x164>
 80114f0:	3501      	adds	r5, #1
 80114f2:	68e3      	ldr	r3, [r4, #12]
 80114f4:	9903      	ldr	r1, [sp, #12]
 80114f6:	1a5b      	subs	r3, r3, r1
 80114f8:	42ab      	cmp	r3, r5
 80114fa:	dcf2      	bgt.n	80114e2 <_printf_i+0x21e>
 80114fc:	e7eb      	b.n	80114d6 <_printf_i+0x212>
 80114fe:	2500      	movs	r5, #0
 8011500:	f104 0619 	add.w	r6, r4, #25
 8011504:	e7f5      	b.n	80114f2 <_printf_i+0x22e>
 8011506:	bf00      	nop
 8011508:	0806892e 	.word	0x0806892e
 801150c:	0806893f 	.word	0x0806893f

08011510 <_sbrk_r>:
 8011510:	b538      	push	{r3, r4, r5, lr}
 8011512:	4d06      	ldr	r5, [pc, #24]	; (801152c <_sbrk_r+0x1c>)
 8011514:	2300      	movs	r3, #0
 8011516:	4604      	mov	r4, r0
 8011518:	4608      	mov	r0, r1
 801151a:	602b      	str	r3, [r5, #0]
 801151c:	f7ef ff24 	bl	8001368 <_sbrk>
 8011520:	1c43      	adds	r3, r0, #1
 8011522:	d102      	bne.n	801152a <_sbrk_r+0x1a>
 8011524:	682b      	ldr	r3, [r5, #0]
 8011526:	b103      	cbz	r3, 801152a <_sbrk_r+0x1a>
 8011528:	6023      	str	r3, [r4, #0]
 801152a:	bd38      	pop	{r3, r4, r5, pc}
 801152c:	20003b24 	.word	0x20003b24

08011530 <sniprintf>:
 8011530:	b40c      	push	{r2, r3}
 8011532:	b530      	push	{r4, r5, lr}
 8011534:	4b17      	ldr	r3, [pc, #92]	; (8011594 <sniprintf+0x64>)
 8011536:	1e0c      	subs	r4, r1, #0
 8011538:	681d      	ldr	r5, [r3, #0]
 801153a:	b09d      	sub	sp, #116	; 0x74
 801153c:	da08      	bge.n	8011550 <sniprintf+0x20>
 801153e:	238b      	movs	r3, #139	; 0x8b
 8011540:	602b      	str	r3, [r5, #0]
 8011542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011546:	b01d      	add	sp, #116	; 0x74
 8011548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801154c:	b002      	add	sp, #8
 801154e:	4770      	bx	lr
 8011550:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011554:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011558:	bf14      	ite	ne
 801155a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801155e:	4623      	moveq	r3, r4
 8011560:	9304      	str	r3, [sp, #16]
 8011562:	9307      	str	r3, [sp, #28]
 8011564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011568:	9002      	str	r0, [sp, #8]
 801156a:	9006      	str	r0, [sp, #24]
 801156c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011570:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011572:	ab21      	add	r3, sp, #132	; 0x84
 8011574:	a902      	add	r1, sp, #8
 8011576:	4628      	mov	r0, r5
 8011578:	9301      	str	r3, [sp, #4]
 801157a:	f001 fabb 	bl	8012af4 <_svfiprintf_r>
 801157e:	1c43      	adds	r3, r0, #1
 8011580:	bfbc      	itt	lt
 8011582:	238b      	movlt	r3, #139	; 0x8b
 8011584:	602b      	strlt	r3, [r5, #0]
 8011586:	2c00      	cmp	r4, #0
 8011588:	d0dd      	beq.n	8011546 <sniprintf+0x16>
 801158a:	9b02      	ldr	r3, [sp, #8]
 801158c:	2200      	movs	r2, #0
 801158e:	701a      	strb	r2, [r3, #0]
 8011590:	e7d9      	b.n	8011546 <sniprintf+0x16>
 8011592:	bf00      	nop
 8011594:	2000093c 	.word	0x2000093c

08011598 <quorem>:
 8011598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801159c:	6903      	ldr	r3, [r0, #16]
 801159e:	690c      	ldr	r4, [r1, #16]
 80115a0:	42a3      	cmp	r3, r4
 80115a2:	4607      	mov	r7, r0
 80115a4:	f2c0 8081 	blt.w	80116aa <quorem+0x112>
 80115a8:	3c01      	subs	r4, #1
 80115aa:	f101 0814 	add.w	r8, r1, #20
 80115ae:	f100 0514 	add.w	r5, r0, #20
 80115b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115c0:	3301      	adds	r3, #1
 80115c2:	429a      	cmp	r2, r3
 80115c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80115c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80115cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80115d0:	d331      	bcc.n	8011636 <quorem+0x9e>
 80115d2:	f04f 0e00 	mov.w	lr, #0
 80115d6:	4640      	mov	r0, r8
 80115d8:	46ac      	mov	ip, r5
 80115da:	46f2      	mov	sl, lr
 80115dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80115e0:	b293      	uxth	r3, r2
 80115e2:	fb06 e303 	mla	r3, r6, r3, lr
 80115e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	ebaa 0303 	sub.w	r3, sl, r3
 80115f0:	f8dc a000 	ldr.w	sl, [ip]
 80115f4:	0c12      	lsrs	r2, r2, #16
 80115f6:	fa13 f38a 	uxtah	r3, r3, sl
 80115fa:	fb06 e202 	mla	r2, r6, r2, lr
 80115fe:	9300      	str	r3, [sp, #0]
 8011600:	9b00      	ldr	r3, [sp, #0]
 8011602:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011606:	b292      	uxth	r2, r2
 8011608:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801160c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011610:	f8bd 3000 	ldrh.w	r3, [sp]
 8011614:	4581      	cmp	r9, r0
 8011616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801161a:	f84c 3b04 	str.w	r3, [ip], #4
 801161e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011622:	d2db      	bcs.n	80115dc <quorem+0x44>
 8011624:	f855 300b 	ldr.w	r3, [r5, fp]
 8011628:	b92b      	cbnz	r3, 8011636 <quorem+0x9e>
 801162a:	9b01      	ldr	r3, [sp, #4]
 801162c:	3b04      	subs	r3, #4
 801162e:	429d      	cmp	r5, r3
 8011630:	461a      	mov	r2, r3
 8011632:	d32e      	bcc.n	8011692 <quorem+0xfa>
 8011634:	613c      	str	r4, [r7, #16]
 8011636:	4638      	mov	r0, r7
 8011638:	f001 f8ba 	bl	80127b0 <__mcmp>
 801163c:	2800      	cmp	r0, #0
 801163e:	db24      	blt.n	801168a <quorem+0xf2>
 8011640:	3601      	adds	r6, #1
 8011642:	4628      	mov	r0, r5
 8011644:	f04f 0c00 	mov.w	ip, #0
 8011648:	f858 2b04 	ldr.w	r2, [r8], #4
 801164c:	f8d0 e000 	ldr.w	lr, [r0]
 8011650:	b293      	uxth	r3, r2
 8011652:	ebac 0303 	sub.w	r3, ip, r3
 8011656:	0c12      	lsrs	r2, r2, #16
 8011658:	fa13 f38e 	uxtah	r3, r3, lr
 801165c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011664:	b29b      	uxth	r3, r3
 8011666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801166a:	45c1      	cmp	r9, r8
 801166c:	f840 3b04 	str.w	r3, [r0], #4
 8011670:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011674:	d2e8      	bcs.n	8011648 <quorem+0xb0>
 8011676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801167a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801167e:	b922      	cbnz	r2, 801168a <quorem+0xf2>
 8011680:	3b04      	subs	r3, #4
 8011682:	429d      	cmp	r5, r3
 8011684:	461a      	mov	r2, r3
 8011686:	d30a      	bcc.n	801169e <quorem+0x106>
 8011688:	613c      	str	r4, [r7, #16]
 801168a:	4630      	mov	r0, r6
 801168c:	b003      	add	sp, #12
 801168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011692:	6812      	ldr	r2, [r2, #0]
 8011694:	3b04      	subs	r3, #4
 8011696:	2a00      	cmp	r2, #0
 8011698:	d1cc      	bne.n	8011634 <quorem+0x9c>
 801169a:	3c01      	subs	r4, #1
 801169c:	e7c7      	b.n	801162e <quorem+0x96>
 801169e:	6812      	ldr	r2, [r2, #0]
 80116a0:	3b04      	subs	r3, #4
 80116a2:	2a00      	cmp	r2, #0
 80116a4:	d1f0      	bne.n	8011688 <quorem+0xf0>
 80116a6:	3c01      	subs	r4, #1
 80116a8:	e7eb      	b.n	8011682 <quorem+0xea>
 80116aa:	2000      	movs	r0, #0
 80116ac:	e7ee      	b.n	801168c <quorem+0xf4>
	...

080116b0 <_dtoa_r>:
 80116b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b4:	ed2d 8b04 	vpush	{d8-d9}
 80116b8:	ec57 6b10 	vmov	r6, r7, d0
 80116bc:	b093      	sub	sp, #76	; 0x4c
 80116be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80116c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80116c4:	9106      	str	r1, [sp, #24]
 80116c6:	ee10 aa10 	vmov	sl, s0
 80116ca:	4604      	mov	r4, r0
 80116cc:	9209      	str	r2, [sp, #36]	; 0x24
 80116ce:	930c      	str	r3, [sp, #48]	; 0x30
 80116d0:	46bb      	mov	fp, r7
 80116d2:	b975      	cbnz	r5, 80116f2 <_dtoa_r+0x42>
 80116d4:	2010      	movs	r0, #16
 80116d6:	f7ff f9b3 	bl	8010a40 <malloc>
 80116da:	4602      	mov	r2, r0
 80116dc:	6260      	str	r0, [r4, #36]	; 0x24
 80116de:	b920      	cbnz	r0, 80116ea <_dtoa_r+0x3a>
 80116e0:	4ba7      	ldr	r3, [pc, #668]	; (8011980 <_dtoa_r+0x2d0>)
 80116e2:	21ea      	movs	r1, #234	; 0xea
 80116e4:	48a7      	ldr	r0, [pc, #668]	; (8011984 <_dtoa_r+0x2d4>)
 80116e6:	f001 fb05 	bl	8012cf4 <__assert_func>
 80116ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80116ee:	6005      	str	r5, [r0, #0]
 80116f0:	60c5      	str	r5, [r0, #12]
 80116f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116f4:	6819      	ldr	r1, [r3, #0]
 80116f6:	b151      	cbz	r1, 801170e <_dtoa_r+0x5e>
 80116f8:	685a      	ldr	r2, [r3, #4]
 80116fa:	604a      	str	r2, [r1, #4]
 80116fc:	2301      	movs	r3, #1
 80116fe:	4093      	lsls	r3, r2
 8011700:	608b      	str	r3, [r1, #8]
 8011702:	4620      	mov	r0, r4
 8011704:	f000 fe12 	bl	801232c <_Bfree>
 8011708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801170a:	2200      	movs	r2, #0
 801170c:	601a      	str	r2, [r3, #0]
 801170e:	1e3b      	subs	r3, r7, #0
 8011710:	bfaa      	itet	ge
 8011712:	2300      	movge	r3, #0
 8011714:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011718:	f8c8 3000 	strge.w	r3, [r8]
 801171c:	4b9a      	ldr	r3, [pc, #616]	; (8011988 <_dtoa_r+0x2d8>)
 801171e:	bfbc      	itt	lt
 8011720:	2201      	movlt	r2, #1
 8011722:	f8c8 2000 	strlt.w	r2, [r8]
 8011726:	ea33 030b 	bics.w	r3, r3, fp
 801172a:	d11b      	bne.n	8011764 <_dtoa_r+0xb4>
 801172c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801172e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011732:	6013      	str	r3, [r2, #0]
 8011734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011738:	4333      	orrs	r3, r6
 801173a:	f000 8592 	beq.w	8012262 <_dtoa_r+0xbb2>
 801173e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011740:	b963      	cbnz	r3, 801175c <_dtoa_r+0xac>
 8011742:	4b92      	ldr	r3, [pc, #584]	; (801198c <_dtoa_r+0x2dc>)
 8011744:	e022      	b.n	801178c <_dtoa_r+0xdc>
 8011746:	4b92      	ldr	r3, [pc, #584]	; (8011990 <_dtoa_r+0x2e0>)
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	3308      	adds	r3, #8
 801174c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801174e:	6013      	str	r3, [r2, #0]
 8011750:	9801      	ldr	r0, [sp, #4]
 8011752:	b013      	add	sp, #76	; 0x4c
 8011754:	ecbd 8b04 	vpop	{d8-d9}
 8011758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801175c:	4b8b      	ldr	r3, [pc, #556]	; (801198c <_dtoa_r+0x2dc>)
 801175e:	9301      	str	r3, [sp, #4]
 8011760:	3303      	adds	r3, #3
 8011762:	e7f3      	b.n	801174c <_dtoa_r+0x9c>
 8011764:	2200      	movs	r2, #0
 8011766:	2300      	movs	r3, #0
 8011768:	4650      	mov	r0, sl
 801176a:	4659      	mov	r1, fp
 801176c:	f7ef f9c4 	bl	8000af8 <__aeabi_dcmpeq>
 8011770:	ec4b ab19 	vmov	d9, sl, fp
 8011774:	4680      	mov	r8, r0
 8011776:	b158      	cbz	r0, 8011790 <_dtoa_r+0xe0>
 8011778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801177a:	2301      	movs	r3, #1
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011780:	2b00      	cmp	r3, #0
 8011782:	f000 856b 	beq.w	801225c <_dtoa_r+0xbac>
 8011786:	4883      	ldr	r0, [pc, #524]	; (8011994 <_dtoa_r+0x2e4>)
 8011788:	6018      	str	r0, [r3, #0]
 801178a:	1e43      	subs	r3, r0, #1
 801178c:	9301      	str	r3, [sp, #4]
 801178e:	e7df      	b.n	8011750 <_dtoa_r+0xa0>
 8011790:	ec4b ab10 	vmov	d0, sl, fp
 8011794:	aa10      	add	r2, sp, #64	; 0x40
 8011796:	a911      	add	r1, sp, #68	; 0x44
 8011798:	4620      	mov	r0, r4
 801179a:	f001 f8af 	bl	80128fc <__d2b>
 801179e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80117a2:	ee08 0a10 	vmov	s16, r0
 80117a6:	2d00      	cmp	r5, #0
 80117a8:	f000 8084 	beq.w	80118b4 <_dtoa_r+0x204>
 80117ac:	ee19 3a90 	vmov	r3, s19
 80117b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80117b8:	4656      	mov	r6, sl
 80117ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80117be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80117c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80117c6:	4b74      	ldr	r3, [pc, #464]	; (8011998 <_dtoa_r+0x2e8>)
 80117c8:	2200      	movs	r2, #0
 80117ca:	4630      	mov	r0, r6
 80117cc:	4639      	mov	r1, r7
 80117ce:	f7ee fd73 	bl	80002b8 <__aeabi_dsub>
 80117d2:	a365      	add	r3, pc, #404	; (adr r3, 8011968 <_dtoa_r+0x2b8>)
 80117d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d8:	f7ee ff26 	bl	8000628 <__aeabi_dmul>
 80117dc:	a364      	add	r3, pc, #400	; (adr r3, 8011970 <_dtoa_r+0x2c0>)
 80117de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e2:	f7ee fd6b 	bl	80002bc <__adddf3>
 80117e6:	4606      	mov	r6, r0
 80117e8:	4628      	mov	r0, r5
 80117ea:	460f      	mov	r7, r1
 80117ec:	f7ee feb2 	bl	8000554 <__aeabi_i2d>
 80117f0:	a361      	add	r3, pc, #388	; (adr r3, 8011978 <_dtoa_r+0x2c8>)
 80117f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f6:	f7ee ff17 	bl	8000628 <__aeabi_dmul>
 80117fa:	4602      	mov	r2, r0
 80117fc:	460b      	mov	r3, r1
 80117fe:	4630      	mov	r0, r6
 8011800:	4639      	mov	r1, r7
 8011802:	f7ee fd5b 	bl	80002bc <__adddf3>
 8011806:	4606      	mov	r6, r0
 8011808:	460f      	mov	r7, r1
 801180a:	f7ef f9bd 	bl	8000b88 <__aeabi_d2iz>
 801180e:	2200      	movs	r2, #0
 8011810:	9000      	str	r0, [sp, #0]
 8011812:	2300      	movs	r3, #0
 8011814:	4630      	mov	r0, r6
 8011816:	4639      	mov	r1, r7
 8011818:	f7ef f978 	bl	8000b0c <__aeabi_dcmplt>
 801181c:	b150      	cbz	r0, 8011834 <_dtoa_r+0x184>
 801181e:	9800      	ldr	r0, [sp, #0]
 8011820:	f7ee fe98 	bl	8000554 <__aeabi_i2d>
 8011824:	4632      	mov	r2, r6
 8011826:	463b      	mov	r3, r7
 8011828:	f7ef f966 	bl	8000af8 <__aeabi_dcmpeq>
 801182c:	b910      	cbnz	r0, 8011834 <_dtoa_r+0x184>
 801182e:	9b00      	ldr	r3, [sp, #0]
 8011830:	3b01      	subs	r3, #1
 8011832:	9300      	str	r3, [sp, #0]
 8011834:	9b00      	ldr	r3, [sp, #0]
 8011836:	2b16      	cmp	r3, #22
 8011838:	d85a      	bhi.n	80118f0 <_dtoa_r+0x240>
 801183a:	9a00      	ldr	r2, [sp, #0]
 801183c:	4b57      	ldr	r3, [pc, #348]	; (801199c <_dtoa_r+0x2ec>)
 801183e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011846:	ec51 0b19 	vmov	r0, r1, d9
 801184a:	f7ef f95f 	bl	8000b0c <__aeabi_dcmplt>
 801184e:	2800      	cmp	r0, #0
 8011850:	d050      	beq.n	80118f4 <_dtoa_r+0x244>
 8011852:	9b00      	ldr	r3, [sp, #0]
 8011854:	3b01      	subs	r3, #1
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	2300      	movs	r3, #0
 801185a:	930b      	str	r3, [sp, #44]	; 0x2c
 801185c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801185e:	1b5d      	subs	r5, r3, r5
 8011860:	1e6b      	subs	r3, r5, #1
 8011862:	9305      	str	r3, [sp, #20]
 8011864:	bf45      	ittet	mi
 8011866:	f1c5 0301 	rsbmi	r3, r5, #1
 801186a:	9304      	strmi	r3, [sp, #16]
 801186c:	2300      	movpl	r3, #0
 801186e:	2300      	movmi	r3, #0
 8011870:	bf4c      	ite	mi
 8011872:	9305      	strmi	r3, [sp, #20]
 8011874:	9304      	strpl	r3, [sp, #16]
 8011876:	9b00      	ldr	r3, [sp, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	db3d      	blt.n	80118f8 <_dtoa_r+0x248>
 801187c:	9b05      	ldr	r3, [sp, #20]
 801187e:	9a00      	ldr	r2, [sp, #0]
 8011880:	920a      	str	r2, [sp, #40]	; 0x28
 8011882:	4413      	add	r3, r2
 8011884:	9305      	str	r3, [sp, #20]
 8011886:	2300      	movs	r3, #0
 8011888:	9307      	str	r3, [sp, #28]
 801188a:	9b06      	ldr	r3, [sp, #24]
 801188c:	2b09      	cmp	r3, #9
 801188e:	f200 8089 	bhi.w	80119a4 <_dtoa_r+0x2f4>
 8011892:	2b05      	cmp	r3, #5
 8011894:	bfc4      	itt	gt
 8011896:	3b04      	subgt	r3, #4
 8011898:	9306      	strgt	r3, [sp, #24]
 801189a:	9b06      	ldr	r3, [sp, #24]
 801189c:	f1a3 0302 	sub.w	r3, r3, #2
 80118a0:	bfcc      	ite	gt
 80118a2:	2500      	movgt	r5, #0
 80118a4:	2501      	movle	r5, #1
 80118a6:	2b03      	cmp	r3, #3
 80118a8:	f200 8087 	bhi.w	80119ba <_dtoa_r+0x30a>
 80118ac:	e8df f003 	tbb	[pc, r3]
 80118b0:	59383a2d 	.word	0x59383a2d
 80118b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80118b8:	441d      	add	r5, r3
 80118ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80118be:	2b20      	cmp	r3, #32
 80118c0:	bfc1      	itttt	gt
 80118c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80118c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80118ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80118ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80118d2:	bfda      	itte	le
 80118d4:	f1c3 0320 	rsble	r3, r3, #32
 80118d8:	fa06 f003 	lslle.w	r0, r6, r3
 80118dc:	4318      	orrgt	r0, r3
 80118de:	f7ee fe29 	bl	8000534 <__aeabi_ui2d>
 80118e2:	2301      	movs	r3, #1
 80118e4:	4606      	mov	r6, r0
 80118e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80118ea:	3d01      	subs	r5, #1
 80118ec:	930e      	str	r3, [sp, #56]	; 0x38
 80118ee:	e76a      	b.n	80117c6 <_dtoa_r+0x116>
 80118f0:	2301      	movs	r3, #1
 80118f2:	e7b2      	b.n	801185a <_dtoa_r+0x1aa>
 80118f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80118f6:	e7b1      	b.n	801185c <_dtoa_r+0x1ac>
 80118f8:	9b04      	ldr	r3, [sp, #16]
 80118fa:	9a00      	ldr	r2, [sp, #0]
 80118fc:	1a9b      	subs	r3, r3, r2
 80118fe:	9304      	str	r3, [sp, #16]
 8011900:	4253      	negs	r3, r2
 8011902:	9307      	str	r3, [sp, #28]
 8011904:	2300      	movs	r3, #0
 8011906:	930a      	str	r3, [sp, #40]	; 0x28
 8011908:	e7bf      	b.n	801188a <_dtoa_r+0x1da>
 801190a:	2300      	movs	r3, #0
 801190c:	9308      	str	r3, [sp, #32]
 801190e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011910:	2b00      	cmp	r3, #0
 8011912:	dc55      	bgt.n	80119c0 <_dtoa_r+0x310>
 8011914:	2301      	movs	r3, #1
 8011916:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801191a:	461a      	mov	r2, r3
 801191c:	9209      	str	r2, [sp, #36]	; 0x24
 801191e:	e00c      	b.n	801193a <_dtoa_r+0x28a>
 8011920:	2301      	movs	r3, #1
 8011922:	e7f3      	b.n	801190c <_dtoa_r+0x25c>
 8011924:	2300      	movs	r3, #0
 8011926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011928:	9308      	str	r3, [sp, #32]
 801192a:	9b00      	ldr	r3, [sp, #0]
 801192c:	4413      	add	r3, r2
 801192e:	9302      	str	r3, [sp, #8]
 8011930:	3301      	adds	r3, #1
 8011932:	2b01      	cmp	r3, #1
 8011934:	9303      	str	r3, [sp, #12]
 8011936:	bfb8      	it	lt
 8011938:	2301      	movlt	r3, #1
 801193a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801193c:	2200      	movs	r2, #0
 801193e:	6042      	str	r2, [r0, #4]
 8011940:	2204      	movs	r2, #4
 8011942:	f102 0614 	add.w	r6, r2, #20
 8011946:	429e      	cmp	r6, r3
 8011948:	6841      	ldr	r1, [r0, #4]
 801194a:	d93d      	bls.n	80119c8 <_dtoa_r+0x318>
 801194c:	4620      	mov	r0, r4
 801194e:	f000 fcad 	bl	80122ac <_Balloc>
 8011952:	9001      	str	r0, [sp, #4]
 8011954:	2800      	cmp	r0, #0
 8011956:	d13b      	bne.n	80119d0 <_dtoa_r+0x320>
 8011958:	4b11      	ldr	r3, [pc, #68]	; (80119a0 <_dtoa_r+0x2f0>)
 801195a:	4602      	mov	r2, r0
 801195c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011960:	e6c0      	b.n	80116e4 <_dtoa_r+0x34>
 8011962:	2301      	movs	r3, #1
 8011964:	e7df      	b.n	8011926 <_dtoa_r+0x276>
 8011966:	bf00      	nop
 8011968:	636f4361 	.word	0x636f4361
 801196c:	3fd287a7 	.word	0x3fd287a7
 8011970:	8b60c8b3 	.word	0x8b60c8b3
 8011974:	3fc68a28 	.word	0x3fc68a28
 8011978:	509f79fb 	.word	0x509f79fb
 801197c:	3fd34413 	.word	0x3fd34413
 8011980:	0806895d 	.word	0x0806895d
 8011984:	08068974 	.word	0x08068974
 8011988:	7ff00000 	.word	0x7ff00000
 801198c:	08068959 	.word	0x08068959
 8011990:	08068950 	.word	0x08068950
 8011994:	0806892d 	.word	0x0806892d
 8011998:	3ff80000 	.word	0x3ff80000
 801199c:	08068a68 	.word	0x08068a68
 80119a0:	080689cf 	.word	0x080689cf
 80119a4:	2501      	movs	r5, #1
 80119a6:	2300      	movs	r3, #0
 80119a8:	9306      	str	r3, [sp, #24]
 80119aa:	9508      	str	r5, [sp, #32]
 80119ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80119b4:	2200      	movs	r2, #0
 80119b6:	2312      	movs	r3, #18
 80119b8:	e7b0      	b.n	801191c <_dtoa_r+0x26c>
 80119ba:	2301      	movs	r3, #1
 80119bc:	9308      	str	r3, [sp, #32]
 80119be:	e7f5      	b.n	80119ac <_dtoa_r+0x2fc>
 80119c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80119c6:	e7b8      	b.n	801193a <_dtoa_r+0x28a>
 80119c8:	3101      	adds	r1, #1
 80119ca:	6041      	str	r1, [r0, #4]
 80119cc:	0052      	lsls	r2, r2, #1
 80119ce:	e7b8      	b.n	8011942 <_dtoa_r+0x292>
 80119d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119d2:	9a01      	ldr	r2, [sp, #4]
 80119d4:	601a      	str	r2, [r3, #0]
 80119d6:	9b03      	ldr	r3, [sp, #12]
 80119d8:	2b0e      	cmp	r3, #14
 80119da:	f200 809d 	bhi.w	8011b18 <_dtoa_r+0x468>
 80119de:	2d00      	cmp	r5, #0
 80119e0:	f000 809a 	beq.w	8011b18 <_dtoa_r+0x468>
 80119e4:	9b00      	ldr	r3, [sp, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	dd32      	ble.n	8011a50 <_dtoa_r+0x3a0>
 80119ea:	4ab7      	ldr	r2, [pc, #732]	; (8011cc8 <_dtoa_r+0x618>)
 80119ec:	f003 030f 	and.w	r3, r3, #15
 80119f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80119f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80119f8:	9b00      	ldr	r3, [sp, #0]
 80119fa:	05d8      	lsls	r0, r3, #23
 80119fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011a00:	d516      	bpl.n	8011a30 <_dtoa_r+0x380>
 8011a02:	4bb2      	ldr	r3, [pc, #712]	; (8011ccc <_dtoa_r+0x61c>)
 8011a04:	ec51 0b19 	vmov	r0, r1, d9
 8011a08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011a0c:	f7ee ff36 	bl	800087c <__aeabi_ddiv>
 8011a10:	f007 070f 	and.w	r7, r7, #15
 8011a14:	4682      	mov	sl, r0
 8011a16:	468b      	mov	fp, r1
 8011a18:	2503      	movs	r5, #3
 8011a1a:	4eac      	ldr	r6, [pc, #688]	; (8011ccc <_dtoa_r+0x61c>)
 8011a1c:	b957      	cbnz	r7, 8011a34 <_dtoa_r+0x384>
 8011a1e:	4642      	mov	r2, r8
 8011a20:	464b      	mov	r3, r9
 8011a22:	4650      	mov	r0, sl
 8011a24:	4659      	mov	r1, fp
 8011a26:	f7ee ff29 	bl	800087c <__aeabi_ddiv>
 8011a2a:	4682      	mov	sl, r0
 8011a2c:	468b      	mov	fp, r1
 8011a2e:	e028      	b.n	8011a82 <_dtoa_r+0x3d2>
 8011a30:	2502      	movs	r5, #2
 8011a32:	e7f2      	b.n	8011a1a <_dtoa_r+0x36a>
 8011a34:	07f9      	lsls	r1, r7, #31
 8011a36:	d508      	bpl.n	8011a4a <_dtoa_r+0x39a>
 8011a38:	4640      	mov	r0, r8
 8011a3a:	4649      	mov	r1, r9
 8011a3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011a40:	f7ee fdf2 	bl	8000628 <__aeabi_dmul>
 8011a44:	3501      	adds	r5, #1
 8011a46:	4680      	mov	r8, r0
 8011a48:	4689      	mov	r9, r1
 8011a4a:	107f      	asrs	r7, r7, #1
 8011a4c:	3608      	adds	r6, #8
 8011a4e:	e7e5      	b.n	8011a1c <_dtoa_r+0x36c>
 8011a50:	f000 809b 	beq.w	8011b8a <_dtoa_r+0x4da>
 8011a54:	9b00      	ldr	r3, [sp, #0]
 8011a56:	4f9d      	ldr	r7, [pc, #628]	; (8011ccc <_dtoa_r+0x61c>)
 8011a58:	425e      	negs	r6, r3
 8011a5a:	4b9b      	ldr	r3, [pc, #620]	; (8011cc8 <_dtoa_r+0x618>)
 8011a5c:	f006 020f 	and.w	r2, r6, #15
 8011a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a68:	ec51 0b19 	vmov	r0, r1, d9
 8011a6c:	f7ee fddc 	bl	8000628 <__aeabi_dmul>
 8011a70:	1136      	asrs	r6, r6, #4
 8011a72:	4682      	mov	sl, r0
 8011a74:	468b      	mov	fp, r1
 8011a76:	2300      	movs	r3, #0
 8011a78:	2502      	movs	r5, #2
 8011a7a:	2e00      	cmp	r6, #0
 8011a7c:	d17a      	bne.n	8011b74 <_dtoa_r+0x4c4>
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d1d3      	bne.n	8011a2a <_dtoa_r+0x37a>
 8011a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f000 8082 	beq.w	8011b8e <_dtoa_r+0x4de>
 8011a8a:	4b91      	ldr	r3, [pc, #580]	; (8011cd0 <_dtoa_r+0x620>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	4650      	mov	r0, sl
 8011a90:	4659      	mov	r1, fp
 8011a92:	f7ef f83b 	bl	8000b0c <__aeabi_dcmplt>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	d079      	beq.n	8011b8e <_dtoa_r+0x4de>
 8011a9a:	9b03      	ldr	r3, [sp, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d076      	beq.n	8011b8e <_dtoa_r+0x4de>
 8011aa0:	9b02      	ldr	r3, [sp, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	dd36      	ble.n	8011b14 <_dtoa_r+0x464>
 8011aa6:	9b00      	ldr	r3, [sp, #0]
 8011aa8:	4650      	mov	r0, sl
 8011aaa:	4659      	mov	r1, fp
 8011aac:	1e5f      	subs	r7, r3, #1
 8011aae:	2200      	movs	r2, #0
 8011ab0:	4b88      	ldr	r3, [pc, #544]	; (8011cd4 <_dtoa_r+0x624>)
 8011ab2:	f7ee fdb9 	bl	8000628 <__aeabi_dmul>
 8011ab6:	9e02      	ldr	r6, [sp, #8]
 8011ab8:	4682      	mov	sl, r0
 8011aba:	468b      	mov	fp, r1
 8011abc:	3501      	adds	r5, #1
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7ee fd48 	bl	8000554 <__aeabi_i2d>
 8011ac4:	4652      	mov	r2, sl
 8011ac6:	465b      	mov	r3, fp
 8011ac8:	f7ee fdae 	bl	8000628 <__aeabi_dmul>
 8011acc:	4b82      	ldr	r3, [pc, #520]	; (8011cd8 <_dtoa_r+0x628>)
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f7ee fbf4 	bl	80002bc <__adddf3>
 8011ad4:	46d0      	mov	r8, sl
 8011ad6:	46d9      	mov	r9, fp
 8011ad8:	4682      	mov	sl, r0
 8011ada:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011ade:	2e00      	cmp	r6, #0
 8011ae0:	d158      	bne.n	8011b94 <_dtoa_r+0x4e4>
 8011ae2:	4b7e      	ldr	r3, [pc, #504]	; (8011cdc <_dtoa_r+0x62c>)
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	4649      	mov	r1, r9
 8011aea:	f7ee fbe5 	bl	80002b8 <__aeabi_dsub>
 8011aee:	4652      	mov	r2, sl
 8011af0:	465b      	mov	r3, fp
 8011af2:	4680      	mov	r8, r0
 8011af4:	4689      	mov	r9, r1
 8011af6:	f7ef f827 	bl	8000b48 <__aeabi_dcmpgt>
 8011afa:	2800      	cmp	r0, #0
 8011afc:	f040 8295 	bne.w	801202a <_dtoa_r+0x97a>
 8011b00:	4652      	mov	r2, sl
 8011b02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011b06:	4640      	mov	r0, r8
 8011b08:	4649      	mov	r1, r9
 8011b0a:	f7ee ffff 	bl	8000b0c <__aeabi_dcmplt>
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	f040 8289 	bne.w	8012026 <_dtoa_r+0x976>
 8011b14:	ec5b ab19 	vmov	sl, fp, d9
 8011b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f2c0 8148 	blt.w	8011db0 <_dtoa_r+0x700>
 8011b20:	9a00      	ldr	r2, [sp, #0]
 8011b22:	2a0e      	cmp	r2, #14
 8011b24:	f300 8144 	bgt.w	8011db0 <_dtoa_r+0x700>
 8011b28:	4b67      	ldr	r3, [pc, #412]	; (8011cc8 <_dtoa_r+0x618>)
 8011b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f280 80d5 	bge.w	8011ce4 <_dtoa_r+0x634>
 8011b3a:	9b03      	ldr	r3, [sp, #12]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	f300 80d1 	bgt.w	8011ce4 <_dtoa_r+0x634>
 8011b42:	f040 826f 	bne.w	8012024 <_dtoa_r+0x974>
 8011b46:	4b65      	ldr	r3, [pc, #404]	; (8011cdc <_dtoa_r+0x62c>)
 8011b48:	2200      	movs	r2, #0
 8011b4a:	4640      	mov	r0, r8
 8011b4c:	4649      	mov	r1, r9
 8011b4e:	f7ee fd6b 	bl	8000628 <__aeabi_dmul>
 8011b52:	4652      	mov	r2, sl
 8011b54:	465b      	mov	r3, fp
 8011b56:	f7ee ffed 	bl	8000b34 <__aeabi_dcmpge>
 8011b5a:	9e03      	ldr	r6, [sp, #12]
 8011b5c:	4637      	mov	r7, r6
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	f040 8245 	bne.w	8011fee <_dtoa_r+0x93e>
 8011b64:	9d01      	ldr	r5, [sp, #4]
 8011b66:	2331      	movs	r3, #49	; 0x31
 8011b68:	f805 3b01 	strb.w	r3, [r5], #1
 8011b6c:	9b00      	ldr	r3, [sp, #0]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	e240      	b.n	8011ff6 <_dtoa_r+0x946>
 8011b74:	07f2      	lsls	r2, r6, #31
 8011b76:	d505      	bpl.n	8011b84 <_dtoa_r+0x4d4>
 8011b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b7c:	f7ee fd54 	bl	8000628 <__aeabi_dmul>
 8011b80:	3501      	adds	r5, #1
 8011b82:	2301      	movs	r3, #1
 8011b84:	1076      	asrs	r6, r6, #1
 8011b86:	3708      	adds	r7, #8
 8011b88:	e777      	b.n	8011a7a <_dtoa_r+0x3ca>
 8011b8a:	2502      	movs	r5, #2
 8011b8c:	e779      	b.n	8011a82 <_dtoa_r+0x3d2>
 8011b8e:	9f00      	ldr	r7, [sp, #0]
 8011b90:	9e03      	ldr	r6, [sp, #12]
 8011b92:	e794      	b.n	8011abe <_dtoa_r+0x40e>
 8011b94:	9901      	ldr	r1, [sp, #4]
 8011b96:	4b4c      	ldr	r3, [pc, #304]	; (8011cc8 <_dtoa_r+0x618>)
 8011b98:	4431      	add	r1, r6
 8011b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8011b9c:	9908      	ldr	r1, [sp, #32]
 8011b9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011ba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ba6:	2900      	cmp	r1, #0
 8011ba8:	d043      	beq.n	8011c32 <_dtoa_r+0x582>
 8011baa:	494d      	ldr	r1, [pc, #308]	; (8011ce0 <_dtoa_r+0x630>)
 8011bac:	2000      	movs	r0, #0
 8011bae:	f7ee fe65 	bl	800087c <__aeabi_ddiv>
 8011bb2:	4652      	mov	r2, sl
 8011bb4:	465b      	mov	r3, fp
 8011bb6:	f7ee fb7f 	bl	80002b8 <__aeabi_dsub>
 8011bba:	9d01      	ldr	r5, [sp, #4]
 8011bbc:	4682      	mov	sl, r0
 8011bbe:	468b      	mov	fp, r1
 8011bc0:	4649      	mov	r1, r9
 8011bc2:	4640      	mov	r0, r8
 8011bc4:	f7ee ffe0 	bl	8000b88 <__aeabi_d2iz>
 8011bc8:	4606      	mov	r6, r0
 8011bca:	f7ee fcc3 	bl	8000554 <__aeabi_i2d>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	4640      	mov	r0, r8
 8011bd4:	4649      	mov	r1, r9
 8011bd6:	f7ee fb6f 	bl	80002b8 <__aeabi_dsub>
 8011bda:	3630      	adds	r6, #48	; 0x30
 8011bdc:	f805 6b01 	strb.w	r6, [r5], #1
 8011be0:	4652      	mov	r2, sl
 8011be2:	465b      	mov	r3, fp
 8011be4:	4680      	mov	r8, r0
 8011be6:	4689      	mov	r9, r1
 8011be8:	f7ee ff90 	bl	8000b0c <__aeabi_dcmplt>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d163      	bne.n	8011cb8 <_dtoa_r+0x608>
 8011bf0:	4642      	mov	r2, r8
 8011bf2:	464b      	mov	r3, r9
 8011bf4:	4936      	ldr	r1, [pc, #216]	; (8011cd0 <_dtoa_r+0x620>)
 8011bf6:	2000      	movs	r0, #0
 8011bf8:	f7ee fb5e 	bl	80002b8 <__aeabi_dsub>
 8011bfc:	4652      	mov	r2, sl
 8011bfe:	465b      	mov	r3, fp
 8011c00:	f7ee ff84 	bl	8000b0c <__aeabi_dcmplt>
 8011c04:	2800      	cmp	r0, #0
 8011c06:	f040 80b5 	bne.w	8011d74 <_dtoa_r+0x6c4>
 8011c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c0c:	429d      	cmp	r5, r3
 8011c0e:	d081      	beq.n	8011b14 <_dtoa_r+0x464>
 8011c10:	4b30      	ldr	r3, [pc, #192]	; (8011cd4 <_dtoa_r+0x624>)
 8011c12:	2200      	movs	r2, #0
 8011c14:	4650      	mov	r0, sl
 8011c16:	4659      	mov	r1, fp
 8011c18:	f7ee fd06 	bl	8000628 <__aeabi_dmul>
 8011c1c:	4b2d      	ldr	r3, [pc, #180]	; (8011cd4 <_dtoa_r+0x624>)
 8011c1e:	4682      	mov	sl, r0
 8011c20:	468b      	mov	fp, r1
 8011c22:	4640      	mov	r0, r8
 8011c24:	4649      	mov	r1, r9
 8011c26:	2200      	movs	r2, #0
 8011c28:	f7ee fcfe 	bl	8000628 <__aeabi_dmul>
 8011c2c:	4680      	mov	r8, r0
 8011c2e:	4689      	mov	r9, r1
 8011c30:	e7c6      	b.n	8011bc0 <_dtoa_r+0x510>
 8011c32:	4650      	mov	r0, sl
 8011c34:	4659      	mov	r1, fp
 8011c36:	f7ee fcf7 	bl	8000628 <__aeabi_dmul>
 8011c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c3c:	9d01      	ldr	r5, [sp, #4]
 8011c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c40:	4682      	mov	sl, r0
 8011c42:	468b      	mov	fp, r1
 8011c44:	4649      	mov	r1, r9
 8011c46:	4640      	mov	r0, r8
 8011c48:	f7ee ff9e 	bl	8000b88 <__aeabi_d2iz>
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	f7ee fc81 	bl	8000554 <__aeabi_i2d>
 8011c52:	3630      	adds	r6, #48	; 0x30
 8011c54:	4602      	mov	r2, r0
 8011c56:	460b      	mov	r3, r1
 8011c58:	4640      	mov	r0, r8
 8011c5a:	4649      	mov	r1, r9
 8011c5c:	f7ee fb2c 	bl	80002b8 <__aeabi_dsub>
 8011c60:	f805 6b01 	strb.w	r6, [r5], #1
 8011c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c66:	429d      	cmp	r5, r3
 8011c68:	4680      	mov	r8, r0
 8011c6a:	4689      	mov	r9, r1
 8011c6c:	f04f 0200 	mov.w	r2, #0
 8011c70:	d124      	bne.n	8011cbc <_dtoa_r+0x60c>
 8011c72:	4b1b      	ldr	r3, [pc, #108]	; (8011ce0 <_dtoa_r+0x630>)
 8011c74:	4650      	mov	r0, sl
 8011c76:	4659      	mov	r1, fp
 8011c78:	f7ee fb20 	bl	80002bc <__adddf3>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	4640      	mov	r0, r8
 8011c82:	4649      	mov	r1, r9
 8011c84:	f7ee ff60 	bl	8000b48 <__aeabi_dcmpgt>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	d173      	bne.n	8011d74 <_dtoa_r+0x6c4>
 8011c8c:	4652      	mov	r2, sl
 8011c8e:	465b      	mov	r3, fp
 8011c90:	4913      	ldr	r1, [pc, #76]	; (8011ce0 <_dtoa_r+0x630>)
 8011c92:	2000      	movs	r0, #0
 8011c94:	f7ee fb10 	bl	80002b8 <__aeabi_dsub>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	4640      	mov	r0, r8
 8011c9e:	4649      	mov	r1, r9
 8011ca0:	f7ee ff34 	bl	8000b0c <__aeabi_dcmplt>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	f43f af35 	beq.w	8011b14 <_dtoa_r+0x464>
 8011caa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011cac:	1e6b      	subs	r3, r5, #1
 8011cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011cb4:	2b30      	cmp	r3, #48	; 0x30
 8011cb6:	d0f8      	beq.n	8011caa <_dtoa_r+0x5fa>
 8011cb8:	9700      	str	r7, [sp, #0]
 8011cba:	e049      	b.n	8011d50 <_dtoa_r+0x6a0>
 8011cbc:	4b05      	ldr	r3, [pc, #20]	; (8011cd4 <_dtoa_r+0x624>)
 8011cbe:	f7ee fcb3 	bl	8000628 <__aeabi_dmul>
 8011cc2:	4680      	mov	r8, r0
 8011cc4:	4689      	mov	r9, r1
 8011cc6:	e7bd      	b.n	8011c44 <_dtoa_r+0x594>
 8011cc8:	08068a68 	.word	0x08068a68
 8011ccc:	08068a40 	.word	0x08068a40
 8011cd0:	3ff00000 	.word	0x3ff00000
 8011cd4:	40240000 	.word	0x40240000
 8011cd8:	401c0000 	.word	0x401c0000
 8011cdc:	40140000 	.word	0x40140000
 8011ce0:	3fe00000 	.word	0x3fe00000
 8011ce4:	9d01      	ldr	r5, [sp, #4]
 8011ce6:	4656      	mov	r6, sl
 8011ce8:	465f      	mov	r7, fp
 8011cea:	4642      	mov	r2, r8
 8011cec:	464b      	mov	r3, r9
 8011cee:	4630      	mov	r0, r6
 8011cf0:	4639      	mov	r1, r7
 8011cf2:	f7ee fdc3 	bl	800087c <__aeabi_ddiv>
 8011cf6:	f7ee ff47 	bl	8000b88 <__aeabi_d2iz>
 8011cfa:	4682      	mov	sl, r0
 8011cfc:	f7ee fc2a 	bl	8000554 <__aeabi_i2d>
 8011d00:	4642      	mov	r2, r8
 8011d02:	464b      	mov	r3, r9
 8011d04:	f7ee fc90 	bl	8000628 <__aeabi_dmul>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	4639      	mov	r1, r7
 8011d10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011d14:	f7ee fad0 	bl	80002b8 <__aeabi_dsub>
 8011d18:	f805 6b01 	strb.w	r6, [r5], #1
 8011d1c:	9e01      	ldr	r6, [sp, #4]
 8011d1e:	9f03      	ldr	r7, [sp, #12]
 8011d20:	1bae      	subs	r6, r5, r6
 8011d22:	42b7      	cmp	r7, r6
 8011d24:	4602      	mov	r2, r0
 8011d26:	460b      	mov	r3, r1
 8011d28:	d135      	bne.n	8011d96 <_dtoa_r+0x6e6>
 8011d2a:	f7ee fac7 	bl	80002bc <__adddf3>
 8011d2e:	4642      	mov	r2, r8
 8011d30:	464b      	mov	r3, r9
 8011d32:	4606      	mov	r6, r0
 8011d34:	460f      	mov	r7, r1
 8011d36:	f7ee ff07 	bl	8000b48 <__aeabi_dcmpgt>
 8011d3a:	b9d0      	cbnz	r0, 8011d72 <_dtoa_r+0x6c2>
 8011d3c:	4642      	mov	r2, r8
 8011d3e:	464b      	mov	r3, r9
 8011d40:	4630      	mov	r0, r6
 8011d42:	4639      	mov	r1, r7
 8011d44:	f7ee fed8 	bl	8000af8 <__aeabi_dcmpeq>
 8011d48:	b110      	cbz	r0, 8011d50 <_dtoa_r+0x6a0>
 8011d4a:	f01a 0f01 	tst.w	sl, #1
 8011d4e:	d110      	bne.n	8011d72 <_dtoa_r+0x6c2>
 8011d50:	4620      	mov	r0, r4
 8011d52:	ee18 1a10 	vmov	r1, s16
 8011d56:	f000 fae9 	bl	801232c <_Bfree>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	9800      	ldr	r0, [sp, #0]
 8011d5e:	702b      	strb	r3, [r5, #0]
 8011d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d62:	3001      	adds	r0, #1
 8011d64:	6018      	str	r0, [r3, #0]
 8011d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	f43f acf1 	beq.w	8011750 <_dtoa_r+0xa0>
 8011d6e:	601d      	str	r5, [r3, #0]
 8011d70:	e4ee      	b.n	8011750 <_dtoa_r+0xa0>
 8011d72:	9f00      	ldr	r7, [sp, #0]
 8011d74:	462b      	mov	r3, r5
 8011d76:	461d      	mov	r5, r3
 8011d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d7c:	2a39      	cmp	r2, #57	; 0x39
 8011d7e:	d106      	bne.n	8011d8e <_dtoa_r+0x6de>
 8011d80:	9a01      	ldr	r2, [sp, #4]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d1f7      	bne.n	8011d76 <_dtoa_r+0x6c6>
 8011d86:	9901      	ldr	r1, [sp, #4]
 8011d88:	2230      	movs	r2, #48	; 0x30
 8011d8a:	3701      	adds	r7, #1
 8011d8c:	700a      	strb	r2, [r1, #0]
 8011d8e:	781a      	ldrb	r2, [r3, #0]
 8011d90:	3201      	adds	r2, #1
 8011d92:	701a      	strb	r2, [r3, #0]
 8011d94:	e790      	b.n	8011cb8 <_dtoa_r+0x608>
 8011d96:	4ba6      	ldr	r3, [pc, #664]	; (8012030 <_dtoa_r+0x980>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f7ee fc45 	bl	8000628 <__aeabi_dmul>
 8011d9e:	2200      	movs	r2, #0
 8011da0:	2300      	movs	r3, #0
 8011da2:	4606      	mov	r6, r0
 8011da4:	460f      	mov	r7, r1
 8011da6:	f7ee fea7 	bl	8000af8 <__aeabi_dcmpeq>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d09d      	beq.n	8011cea <_dtoa_r+0x63a>
 8011dae:	e7cf      	b.n	8011d50 <_dtoa_r+0x6a0>
 8011db0:	9a08      	ldr	r2, [sp, #32]
 8011db2:	2a00      	cmp	r2, #0
 8011db4:	f000 80d7 	beq.w	8011f66 <_dtoa_r+0x8b6>
 8011db8:	9a06      	ldr	r2, [sp, #24]
 8011dba:	2a01      	cmp	r2, #1
 8011dbc:	f300 80ba 	bgt.w	8011f34 <_dtoa_r+0x884>
 8011dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dc2:	2a00      	cmp	r2, #0
 8011dc4:	f000 80b2 	beq.w	8011f2c <_dtoa_r+0x87c>
 8011dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011dcc:	9e07      	ldr	r6, [sp, #28]
 8011dce:	9d04      	ldr	r5, [sp, #16]
 8011dd0:	9a04      	ldr	r2, [sp, #16]
 8011dd2:	441a      	add	r2, r3
 8011dd4:	9204      	str	r2, [sp, #16]
 8011dd6:	9a05      	ldr	r2, [sp, #20]
 8011dd8:	2101      	movs	r1, #1
 8011dda:	441a      	add	r2, r3
 8011ddc:	4620      	mov	r0, r4
 8011dde:	9205      	str	r2, [sp, #20]
 8011de0:	f000 fb5c 	bl	801249c <__i2b>
 8011de4:	4607      	mov	r7, r0
 8011de6:	2d00      	cmp	r5, #0
 8011de8:	dd0c      	ble.n	8011e04 <_dtoa_r+0x754>
 8011dea:	9b05      	ldr	r3, [sp, #20]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	dd09      	ble.n	8011e04 <_dtoa_r+0x754>
 8011df0:	42ab      	cmp	r3, r5
 8011df2:	9a04      	ldr	r2, [sp, #16]
 8011df4:	bfa8      	it	ge
 8011df6:	462b      	movge	r3, r5
 8011df8:	1ad2      	subs	r2, r2, r3
 8011dfa:	9204      	str	r2, [sp, #16]
 8011dfc:	9a05      	ldr	r2, [sp, #20]
 8011dfe:	1aed      	subs	r5, r5, r3
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	9b07      	ldr	r3, [sp, #28]
 8011e06:	b31b      	cbz	r3, 8011e50 <_dtoa_r+0x7a0>
 8011e08:	9b08      	ldr	r3, [sp, #32]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	f000 80af 	beq.w	8011f6e <_dtoa_r+0x8be>
 8011e10:	2e00      	cmp	r6, #0
 8011e12:	dd13      	ble.n	8011e3c <_dtoa_r+0x78c>
 8011e14:	4639      	mov	r1, r7
 8011e16:	4632      	mov	r2, r6
 8011e18:	4620      	mov	r0, r4
 8011e1a:	f000 fbff 	bl	801261c <__pow5mult>
 8011e1e:	ee18 2a10 	vmov	r2, s16
 8011e22:	4601      	mov	r1, r0
 8011e24:	4607      	mov	r7, r0
 8011e26:	4620      	mov	r0, r4
 8011e28:	f000 fb4e 	bl	80124c8 <__multiply>
 8011e2c:	ee18 1a10 	vmov	r1, s16
 8011e30:	4680      	mov	r8, r0
 8011e32:	4620      	mov	r0, r4
 8011e34:	f000 fa7a 	bl	801232c <_Bfree>
 8011e38:	ee08 8a10 	vmov	s16, r8
 8011e3c:	9b07      	ldr	r3, [sp, #28]
 8011e3e:	1b9a      	subs	r2, r3, r6
 8011e40:	d006      	beq.n	8011e50 <_dtoa_r+0x7a0>
 8011e42:	ee18 1a10 	vmov	r1, s16
 8011e46:	4620      	mov	r0, r4
 8011e48:	f000 fbe8 	bl	801261c <__pow5mult>
 8011e4c:	ee08 0a10 	vmov	s16, r0
 8011e50:	2101      	movs	r1, #1
 8011e52:	4620      	mov	r0, r4
 8011e54:	f000 fb22 	bl	801249c <__i2b>
 8011e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	f340 8088 	ble.w	8011f72 <_dtoa_r+0x8c2>
 8011e62:	461a      	mov	r2, r3
 8011e64:	4601      	mov	r1, r0
 8011e66:	4620      	mov	r0, r4
 8011e68:	f000 fbd8 	bl	801261c <__pow5mult>
 8011e6c:	9b06      	ldr	r3, [sp, #24]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	4606      	mov	r6, r0
 8011e72:	f340 8081 	ble.w	8011f78 <_dtoa_r+0x8c8>
 8011e76:	f04f 0800 	mov.w	r8, #0
 8011e7a:	6933      	ldr	r3, [r6, #16]
 8011e7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011e80:	6918      	ldr	r0, [r3, #16]
 8011e82:	f000 fabb 	bl	80123fc <__hi0bits>
 8011e86:	f1c0 0020 	rsb	r0, r0, #32
 8011e8a:	9b05      	ldr	r3, [sp, #20]
 8011e8c:	4418      	add	r0, r3
 8011e8e:	f010 001f 	ands.w	r0, r0, #31
 8011e92:	f000 8092 	beq.w	8011fba <_dtoa_r+0x90a>
 8011e96:	f1c0 0320 	rsb	r3, r0, #32
 8011e9a:	2b04      	cmp	r3, #4
 8011e9c:	f340 808a 	ble.w	8011fb4 <_dtoa_r+0x904>
 8011ea0:	f1c0 001c 	rsb	r0, r0, #28
 8011ea4:	9b04      	ldr	r3, [sp, #16]
 8011ea6:	4403      	add	r3, r0
 8011ea8:	9304      	str	r3, [sp, #16]
 8011eaa:	9b05      	ldr	r3, [sp, #20]
 8011eac:	4403      	add	r3, r0
 8011eae:	4405      	add	r5, r0
 8011eb0:	9305      	str	r3, [sp, #20]
 8011eb2:	9b04      	ldr	r3, [sp, #16]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	dd07      	ble.n	8011ec8 <_dtoa_r+0x818>
 8011eb8:	ee18 1a10 	vmov	r1, s16
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f000 fc06 	bl	80126d0 <__lshift>
 8011ec4:	ee08 0a10 	vmov	s16, r0
 8011ec8:	9b05      	ldr	r3, [sp, #20]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	dd05      	ble.n	8011eda <_dtoa_r+0x82a>
 8011ece:	4631      	mov	r1, r6
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f000 fbfc 	bl	80126d0 <__lshift>
 8011ed8:	4606      	mov	r6, r0
 8011eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d06e      	beq.n	8011fbe <_dtoa_r+0x90e>
 8011ee0:	ee18 0a10 	vmov	r0, s16
 8011ee4:	4631      	mov	r1, r6
 8011ee6:	f000 fc63 	bl	80127b0 <__mcmp>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	da67      	bge.n	8011fbe <_dtoa_r+0x90e>
 8011eee:	9b00      	ldr	r3, [sp, #0]
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	ee18 1a10 	vmov	r1, s16
 8011ef6:	9300      	str	r3, [sp, #0]
 8011ef8:	220a      	movs	r2, #10
 8011efa:	2300      	movs	r3, #0
 8011efc:	4620      	mov	r0, r4
 8011efe:	f000 fa37 	bl	8012370 <__multadd>
 8011f02:	9b08      	ldr	r3, [sp, #32]
 8011f04:	ee08 0a10 	vmov	s16, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	f000 81b1 	beq.w	8012270 <_dtoa_r+0xbc0>
 8011f0e:	2300      	movs	r3, #0
 8011f10:	4639      	mov	r1, r7
 8011f12:	220a      	movs	r2, #10
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 fa2b 	bl	8012370 <__multadd>
 8011f1a:	9b02      	ldr	r3, [sp, #8]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	4607      	mov	r7, r0
 8011f20:	f300 808e 	bgt.w	8012040 <_dtoa_r+0x990>
 8011f24:	9b06      	ldr	r3, [sp, #24]
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	dc51      	bgt.n	8011fce <_dtoa_r+0x91e>
 8011f2a:	e089      	b.n	8012040 <_dtoa_r+0x990>
 8011f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011f32:	e74b      	b.n	8011dcc <_dtoa_r+0x71c>
 8011f34:	9b03      	ldr	r3, [sp, #12]
 8011f36:	1e5e      	subs	r6, r3, #1
 8011f38:	9b07      	ldr	r3, [sp, #28]
 8011f3a:	42b3      	cmp	r3, r6
 8011f3c:	bfbf      	itttt	lt
 8011f3e:	9b07      	ldrlt	r3, [sp, #28]
 8011f40:	9607      	strlt	r6, [sp, #28]
 8011f42:	1af2      	sublt	r2, r6, r3
 8011f44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011f46:	bfb6      	itet	lt
 8011f48:	189b      	addlt	r3, r3, r2
 8011f4a:	1b9e      	subge	r6, r3, r6
 8011f4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011f4e:	9b03      	ldr	r3, [sp, #12]
 8011f50:	bfb8      	it	lt
 8011f52:	2600      	movlt	r6, #0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	bfb7      	itett	lt
 8011f58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011f5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011f60:	1a9d      	sublt	r5, r3, r2
 8011f62:	2300      	movlt	r3, #0
 8011f64:	e734      	b.n	8011dd0 <_dtoa_r+0x720>
 8011f66:	9e07      	ldr	r6, [sp, #28]
 8011f68:	9d04      	ldr	r5, [sp, #16]
 8011f6a:	9f08      	ldr	r7, [sp, #32]
 8011f6c:	e73b      	b.n	8011de6 <_dtoa_r+0x736>
 8011f6e:	9a07      	ldr	r2, [sp, #28]
 8011f70:	e767      	b.n	8011e42 <_dtoa_r+0x792>
 8011f72:	9b06      	ldr	r3, [sp, #24]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	dc18      	bgt.n	8011faa <_dtoa_r+0x8fa>
 8011f78:	f1ba 0f00 	cmp.w	sl, #0
 8011f7c:	d115      	bne.n	8011faa <_dtoa_r+0x8fa>
 8011f7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f82:	b993      	cbnz	r3, 8011faa <_dtoa_r+0x8fa>
 8011f84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011f88:	0d1b      	lsrs	r3, r3, #20
 8011f8a:	051b      	lsls	r3, r3, #20
 8011f8c:	b183      	cbz	r3, 8011fb0 <_dtoa_r+0x900>
 8011f8e:	9b04      	ldr	r3, [sp, #16]
 8011f90:	3301      	adds	r3, #1
 8011f92:	9304      	str	r3, [sp, #16]
 8011f94:	9b05      	ldr	r3, [sp, #20]
 8011f96:	3301      	adds	r3, #1
 8011f98:	9305      	str	r3, [sp, #20]
 8011f9a:	f04f 0801 	mov.w	r8, #1
 8011f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f47f af6a 	bne.w	8011e7a <_dtoa_r+0x7ca>
 8011fa6:	2001      	movs	r0, #1
 8011fa8:	e76f      	b.n	8011e8a <_dtoa_r+0x7da>
 8011faa:	f04f 0800 	mov.w	r8, #0
 8011fae:	e7f6      	b.n	8011f9e <_dtoa_r+0x8ee>
 8011fb0:	4698      	mov	r8, r3
 8011fb2:	e7f4      	b.n	8011f9e <_dtoa_r+0x8ee>
 8011fb4:	f43f af7d 	beq.w	8011eb2 <_dtoa_r+0x802>
 8011fb8:	4618      	mov	r0, r3
 8011fba:	301c      	adds	r0, #28
 8011fbc:	e772      	b.n	8011ea4 <_dtoa_r+0x7f4>
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	dc37      	bgt.n	8012034 <_dtoa_r+0x984>
 8011fc4:	9b06      	ldr	r3, [sp, #24]
 8011fc6:	2b02      	cmp	r3, #2
 8011fc8:	dd34      	ble.n	8012034 <_dtoa_r+0x984>
 8011fca:	9b03      	ldr	r3, [sp, #12]
 8011fcc:	9302      	str	r3, [sp, #8]
 8011fce:	9b02      	ldr	r3, [sp, #8]
 8011fd0:	b96b      	cbnz	r3, 8011fee <_dtoa_r+0x93e>
 8011fd2:	4631      	mov	r1, r6
 8011fd4:	2205      	movs	r2, #5
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f000 f9ca 	bl	8012370 <__multadd>
 8011fdc:	4601      	mov	r1, r0
 8011fde:	4606      	mov	r6, r0
 8011fe0:	ee18 0a10 	vmov	r0, s16
 8011fe4:	f000 fbe4 	bl	80127b0 <__mcmp>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	f73f adbb 	bgt.w	8011b64 <_dtoa_r+0x4b4>
 8011fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff0:	9d01      	ldr	r5, [sp, #4]
 8011ff2:	43db      	mvns	r3, r3
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	f04f 0800 	mov.w	r8, #0
 8011ffa:	4631      	mov	r1, r6
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f000 f995 	bl	801232c <_Bfree>
 8012002:	2f00      	cmp	r7, #0
 8012004:	f43f aea4 	beq.w	8011d50 <_dtoa_r+0x6a0>
 8012008:	f1b8 0f00 	cmp.w	r8, #0
 801200c:	d005      	beq.n	801201a <_dtoa_r+0x96a>
 801200e:	45b8      	cmp	r8, r7
 8012010:	d003      	beq.n	801201a <_dtoa_r+0x96a>
 8012012:	4641      	mov	r1, r8
 8012014:	4620      	mov	r0, r4
 8012016:	f000 f989 	bl	801232c <_Bfree>
 801201a:	4639      	mov	r1, r7
 801201c:	4620      	mov	r0, r4
 801201e:	f000 f985 	bl	801232c <_Bfree>
 8012022:	e695      	b.n	8011d50 <_dtoa_r+0x6a0>
 8012024:	2600      	movs	r6, #0
 8012026:	4637      	mov	r7, r6
 8012028:	e7e1      	b.n	8011fee <_dtoa_r+0x93e>
 801202a:	9700      	str	r7, [sp, #0]
 801202c:	4637      	mov	r7, r6
 801202e:	e599      	b.n	8011b64 <_dtoa_r+0x4b4>
 8012030:	40240000 	.word	0x40240000
 8012034:	9b08      	ldr	r3, [sp, #32]
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 80ca 	beq.w	80121d0 <_dtoa_r+0xb20>
 801203c:	9b03      	ldr	r3, [sp, #12]
 801203e:	9302      	str	r3, [sp, #8]
 8012040:	2d00      	cmp	r5, #0
 8012042:	dd05      	ble.n	8012050 <_dtoa_r+0x9a0>
 8012044:	4639      	mov	r1, r7
 8012046:	462a      	mov	r2, r5
 8012048:	4620      	mov	r0, r4
 801204a:	f000 fb41 	bl	80126d0 <__lshift>
 801204e:	4607      	mov	r7, r0
 8012050:	f1b8 0f00 	cmp.w	r8, #0
 8012054:	d05b      	beq.n	801210e <_dtoa_r+0xa5e>
 8012056:	6879      	ldr	r1, [r7, #4]
 8012058:	4620      	mov	r0, r4
 801205a:	f000 f927 	bl	80122ac <_Balloc>
 801205e:	4605      	mov	r5, r0
 8012060:	b928      	cbnz	r0, 801206e <_dtoa_r+0x9be>
 8012062:	4b87      	ldr	r3, [pc, #540]	; (8012280 <_dtoa_r+0xbd0>)
 8012064:	4602      	mov	r2, r0
 8012066:	f240 21ea 	movw	r1, #746	; 0x2ea
 801206a:	f7ff bb3b 	b.w	80116e4 <_dtoa_r+0x34>
 801206e:	693a      	ldr	r2, [r7, #16]
 8012070:	3202      	adds	r2, #2
 8012072:	0092      	lsls	r2, r2, #2
 8012074:	f107 010c 	add.w	r1, r7, #12
 8012078:	300c      	adds	r0, #12
 801207a:	f7fe fce9 	bl	8010a50 <memcpy>
 801207e:	2201      	movs	r2, #1
 8012080:	4629      	mov	r1, r5
 8012082:	4620      	mov	r0, r4
 8012084:	f000 fb24 	bl	80126d0 <__lshift>
 8012088:	9b01      	ldr	r3, [sp, #4]
 801208a:	f103 0901 	add.w	r9, r3, #1
 801208e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012092:	4413      	add	r3, r2
 8012094:	9305      	str	r3, [sp, #20]
 8012096:	f00a 0301 	and.w	r3, sl, #1
 801209a:	46b8      	mov	r8, r7
 801209c:	9304      	str	r3, [sp, #16]
 801209e:	4607      	mov	r7, r0
 80120a0:	4631      	mov	r1, r6
 80120a2:	ee18 0a10 	vmov	r0, s16
 80120a6:	f7ff fa77 	bl	8011598 <quorem>
 80120aa:	4641      	mov	r1, r8
 80120ac:	9002      	str	r0, [sp, #8]
 80120ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80120b2:	ee18 0a10 	vmov	r0, s16
 80120b6:	f000 fb7b 	bl	80127b0 <__mcmp>
 80120ba:	463a      	mov	r2, r7
 80120bc:	9003      	str	r0, [sp, #12]
 80120be:	4631      	mov	r1, r6
 80120c0:	4620      	mov	r0, r4
 80120c2:	f000 fb91 	bl	80127e8 <__mdiff>
 80120c6:	68c2      	ldr	r2, [r0, #12]
 80120c8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80120cc:	4605      	mov	r5, r0
 80120ce:	bb02      	cbnz	r2, 8012112 <_dtoa_r+0xa62>
 80120d0:	4601      	mov	r1, r0
 80120d2:	ee18 0a10 	vmov	r0, s16
 80120d6:	f000 fb6b 	bl	80127b0 <__mcmp>
 80120da:	4602      	mov	r2, r0
 80120dc:	4629      	mov	r1, r5
 80120de:	4620      	mov	r0, r4
 80120e0:	9207      	str	r2, [sp, #28]
 80120e2:	f000 f923 	bl	801232c <_Bfree>
 80120e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80120ea:	ea43 0102 	orr.w	r1, r3, r2
 80120ee:	9b04      	ldr	r3, [sp, #16]
 80120f0:	430b      	orrs	r3, r1
 80120f2:	464d      	mov	r5, r9
 80120f4:	d10f      	bne.n	8012116 <_dtoa_r+0xa66>
 80120f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80120fa:	d02a      	beq.n	8012152 <_dtoa_r+0xaa2>
 80120fc:	9b03      	ldr	r3, [sp, #12]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	dd02      	ble.n	8012108 <_dtoa_r+0xa58>
 8012102:	9b02      	ldr	r3, [sp, #8]
 8012104:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012108:	f88b a000 	strb.w	sl, [fp]
 801210c:	e775      	b.n	8011ffa <_dtoa_r+0x94a>
 801210e:	4638      	mov	r0, r7
 8012110:	e7ba      	b.n	8012088 <_dtoa_r+0x9d8>
 8012112:	2201      	movs	r2, #1
 8012114:	e7e2      	b.n	80120dc <_dtoa_r+0xa2c>
 8012116:	9b03      	ldr	r3, [sp, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	db04      	blt.n	8012126 <_dtoa_r+0xa76>
 801211c:	9906      	ldr	r1, [sp, #24]
 801211e:	430b      	orrs	r3, r1
 8012120:	9904      	ldr	r1, [sp, #16]
 8012122:	430b      	orrs	r3, r1
 8012124:	d122      	bne.n	801216c <_dtoa_r+0xabc>
 8012126:	2a00      	cmp	r2, #0
 8012128:	ddee      	ble.n	8012108 <_dtoa_r+0xa58>
 801212a:	ee18 1a10 	vmov	r1, s16
 801212e:	2201      	movs	r2, #1
 8012130:	4620      	mov	r0, r4
 8012132:	f000 facd 	bl	80126d0 <__lshift>
 8012136:	4631      	mov	r1, r6
 8012138:	ee08 0a10 	vmov	s16, r0
 801213c:	f000 fb38 	bl	80127b0 <__mcmp>
 8012140:	2800      	cmp	r0, #0
 8012142:	dc03      	bgt.n	801214c <_dtoa_r+0xa9c>
 8012144:	d1e0      	bne.n	8012108 <_dtoa_r+0xa58>
 8012146:	f01a 0f01 	tst.w	sl, #1
 801214a:	d0dd      	beq.n	8012108 <_dtoa_r+0xa58>
 801214c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012150:	d1d7      	bne.n	8012102 <_dtoa_r+0xa52>
 8012152:	2339      	movs	r3, #57	; 0x39
 8012154:	f88b 3000 	strb.w	r3, [fp]
 8012158:	462b      	mov	r3, r5
 801215a:	461d      	mov	r5, r3
 801215c:	3b01      	subs	r3, #1
 801215e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012162:	2a39      	cmp	r2, #57	; 0x39
 8012164:	d071      	beq.n	801224a <_dtoa_r+0xb9a>
 8012166:	3201      	adds	r2, #1
 8012168:	701a      	strb	r2, [r3, #0]
 801216a:	e746      	b.n	8011ffa <_dtoa_r+0x94a>
 801216c:	2a00      	cmp	r2, #0
 801216e:	dd07      	ble.n	8012180 <_dtoa_r+0xad0>
 8012170:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012174:	d0ed      	beq.n	8012152 <_dtoa_r+0xaa2>
 8012176:	f10a 0301 	add.w	r3, sl, #1
 801217a:	f88b 3000 	strb.w	r3, [fp]
 801217e:	e73c      	b.n	8011ffa <_dtoa_r+0x94a>
 8012180:	9b05      	ldr	r3, [sp, #20]
 8012182:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012186:	4599      	cmp	r9, r3
 8012188:	d047      	beq.n	801221a <_dtoa_r+0xb6a>
 801218a:	ee18 1a10 	vmov	r1, s16
 801218e:	2300      	movs	r3, #0
 8012190:	220a      	movs	r2, #10
 8012192:	4620      	mov	r0, r4
 8012194:	f000 f8ec 	bl	8012370 <__multadd>
 8012198:	45b8      	cmp	r8, r7
 801219a:	ee08 0a10 	vmov	s16, r0
 801219e:	f04f 0300 	mov.w	r3, #0
 80121a2:	f04f 020a 	mov.w	r2, #10
 80121a6:	4641      	mov	r1, r8
 80121a8:	4620      	mov	r0, r4
 80121aa:	d106      	bne.n	80121ba <_dtoa_r+0xb0a>
 80121ac:	f000 f8e0 	bl	8012370 <__multadd>
 80121b0:	4680      	mov	r8, r0
 80121b2:	4607      	mov	r7, r0
 80121b4:	f109 0901 	add.w	r9, r9, #1
 80121b8:	e772      	b.n	80120a0 <_dtoa_r+0x9f0>
 80121ba:	f000 f8d9 	bl	8012370 <__multadd>
 80121be:	4639      	mov	r1, r7
 80121c0:	4680      	mov	r8, r0
 80121c2:	2300      	movs	r3, #0
 80121c4:	220a      	movs	r2, #10
 80121c6:	4620      	mov	r0, r4
 80121c8:	f000 f8d2 	bl	8012370 <__multadd>
 80121cc:	4607      	mov	r7, r0
 80121ce:	e7f1      	b.n	80121b4 <_dtoa_r+0xb04>
 80121d0:	9b03      	ldr	r3, [sp, #12]
 80121d2:	9302      	str	r3, [sp, #8]
 80121d4:	9d01      	ldr	r5, [sp, #4]
 80121d6:	ee18 0a10 	vmov	r0, s16
 80121da:	4631      	mov	r1, r6
 80121dc:	f7ff f9dc 	bl	8011598 <quorem>
 80121e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80121e4:	9b01      	ldr	r3, [sp, #4]
 80121e6:	f805 ab01 	strb.w	sl, [r5], #1
 80121ea:	1aea      	subs	r2, r5, r3
 80121ec:	9b02      	ldr	r3, [sp, #8]
 80121ee:	4293      	cmp	r3, r2
 80121f0:	dd09      	ble.n	8012206 <_dtoa_r+0xb56>
 80121f2:	ee18 1a10 	vmov	r1, s16
 80121f6:	2300      	movs	r3, #0
 80121f8:	220a      	movs	r2, #10
 80121fa:	4620      	mov	r0, r4
 80121fc:	f000 f8b8 	bl	8012370 <__multadd>
 8012200:	ee08 0a10 	vmov	s16, r0
 8012204:	e7e7      	b.n	80121d6 <_dtoa_r+0xb26>
 8012206:	9b02      	ldr	r3, [sp, #8]
 8012208:	2b00      	cmp	r3, #0
 801220a:	bfc8      	it	gt
 801220c:	461d      	movgt	r5, r3
 801220e:	9b01      	ldr	r3, [sp, #4]
 8012210:	bfd8      	it	le
 8012212:	2501      	movle	r5, #1
 8012214:	441d      	add	r5, r3
 8012216:	f04f 0800 	mov.w	r8, #0
 801221a:	ee18 1a10 	vmov	r1, s16
 801221e:	2201      	movs	r2, #1
 8012220:	4620      	mov	r0, r4
 8012222:	f000 fa55 	bl	80126d0 <__lshift>
 8012226:	4631      	mov	r1, r6
 8012228:	ee08 0a10 	vmov	s16, r0
 801222c:	f000 fac0 	bl	80127b0 <__mcmp>
 8012230:	2800      	cmp	r0, #0
 8012232:	dc91      	bgt.n	8012158 <_dtoa_r+0xaa8>
 8012234:	d102      	bne.n	801223c <_dtoa_r+0xb8c>
 8012236:	f01a 0f01 	tst.w	sl, #1
 801223a:	d18d      	bne.n	8012158 <_dtoa_r+0xaa8>
 801223c:	462b      	mov	r3, r5
 801223e:	461d      	mov	r5, r3
 8012240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012244:	2a30      	cmp	r2, #48	; 0x30
 8012246:	d0fa      	beq.n	801223e <_dtoa_r+0xb8e>
 8012248:	e6d7      	b.n	8011ffa <_dtoa_r+0x94a>
 801224a:	9a01      	ldr	r2, [sp, #4]
 801224c:	429a      	cmp	r2, r3
 801224e:	d184      	bne.n	801215a <_dtoa_r+0xaaa>
 8012250:	9b00      	ldr	r3, [sp, #0]
 8012252:	3301      	adds	r3, #1
 8012254:	9300      	str	r3, [sp, #0]
 8012256:	2331      	movs	r3, #49	; 0x31
 8012258:	7013      	strb	r3, [r2, #0]
 801225a:	e6ce      	b.n	8011ffa <_dtoa_r+0x94a>
 801225c:	4b09      	ldr	r3, [pc, #36]	; (8012284 <_dtoa_r+0xbd4>)
 801225e:	f7ff ba95 	b.w	801178c <_dtoa_r+0xdc>
 8012262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012264:	2b00      	cmp	r3, #0
 8012266:	f47f aa6e 	bne.w	8011746 <_dtoa_r+0x96>
 801226a:	4b07      	ldr	r3, [pc, #28]	; (8012288 <_dtoa_r+0xbd8>)
 801226c:	f7ff ba8e 	b.w	801178c <_dtoa_r+0xdc>
 8012270:	9b02      	ldr	r3, [sp, #8]
 8012272:	2b00      	cmp	r3, #0
 8012274:	dcae      	bgt.n	80121d4 <_dtoa_r+0xb24>
 8012276:	9b06      	ldr	r3, [sp, #24]
 8012278:	2b02      	cmp	r3, #2
 801227a:	f73f aea8 	bgt.w	8011fce <_dtoa_r+0x91e>
 801227e:	e7a9      	b.n	80121d4 <_dtoa_r+0xb24>
 8012280:	080689cf 	.word	0x080689cf
 8012284:	0806892c 	.word	0x0806892c
 8012288:	08068950 	.word	0x08068950

0801228c <_localeconv_r>:
 801228c:	4800      	ldr	r0, [pc, #0]	; (8012290 <_localeconv_r+0x4>)
 801228e:	4770      	bx	lr
 8012290:	20000a90 	.word	0x20000a90

08012294 <__malloc_lock>:
 8012294:	4801      	ldr	r0, [pc, #4]	; (801229c <__malloc_lock+0x8>)
 8012296:	f000 bd5e 	b.w	8012d56 <__retarget_lock_acquire_recursive>
 801229a:	bf00      	nop
 801229c:	20003b28 	.word	0x20003b28

080122a0 <__malloc_unlock>:
 80122a0:	4801      	ldr	r0, [pc, #4]	; (80122a8 <__malloc_unlock+0x8>)
 80122a2:	f000 bd59 	b.w	8012d58 <__retarget_lock_release_recursive>
 80122a6:	bf00      	nop
 80122a8:	20003b28 	.word	0x20003b28

080122ac <_Balloc>:
 80122ac:	b570      	push	{r4, r5, r6, lr}
 80122ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122b0:	4604      	mov	r4, r0
 80122b2:	460d      	mov	r5, r1
 80122b4:	b976      	cbnz	r6, 80122d4 <_Balloc+0x28>
 80122b6:	2010      	movs	r0, #16
 80122b8:	f7fe fbc2 	bl	8010a40 <malloc>
 80122bc:	4602      	mov	r2, r0
 80122be:	6260      	str	r0, [r4, #36]	; 0x24
 80122c0:	b920      	cbnz	r0, 80122cc <_Balloc+0x20>
 80122c2:	4b18      	ldr	r3, [pc, #96]	; (8012324 <_Balloc+0x78>)
 80122c4:	4818      	ldr	r0, [pc, #96]	; (8012328 <_Balloc+0x7c>)
 80122c6:	2166      	movs	r1, #102	; 0x66
 80122c8:	f000 fd14 	bl	8012cf4 <__assert_func>
 80122cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122d0:	6006      	str	r6, [r0, #0]
 80122d2:	60c6      	str	r6, [r0, #12]
 80122d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80122d6:	68f3      	ldr	r3, [r6, #12]
 80122d8:	b183      	cbz	r3, 80122fc <_Balloc+0x50>
 80122da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80122e2:	b9b8      	cbnz	r0, 8012314 <_Balloc+0x68>
 80122e4:	2101      	movs	r1, #1
 80122e6:	fa01 f605 	lsl.w	r6, r1, r5
 80122ea:	1d72      	adds	r2, r6, #5
 80122ec:	0092      	lsls	r2, r2, #2
 80122ee:	4620      	mov	r0, r4
 80122f0:	f000 fb60 	bl	80129b4 <_calloc_r>
 80122f4:	b160      	cbz	r0, 8012310 <_Balloc+0x64>
 80122f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80122fa:	e00e      	b.n	801231a <_Balloc+0x6e>
 80122fc:	2221      	movs	r2, #33	; 0x21
 80122fe:	2104      	movs	r1, #4
 8012300:	4620      	mov	r0, r4
 8012302:	f000 fb57 	bl	80129b4 <_calloc_r>
 8012306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012308:	60f0      	str	r0, [r6, #12]
 801230a:	68db      	ldr	r3, [r3, #12]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d1e4      	bne.n	80122da <_Balloc+0x2e>
 8012310:	2000      	movs	r0, #0
 8012312:	bd70      	pop	{r4, r5, r6, pc}
 8012314:	6802      	ldr	r2, [r0, #0]
 8012316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801231a:	2300      	movs	r3, #0
 801231c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012320:	e7f7      	b.n	8012312 <_Balloc+0x66>
 8012322:	bf00      	nop
 8012324:	0806895d 	.word	0x0806895d
 8012328:	080689e0 	.word	0x080689e0

0801232c <_Bfree>:
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012330:	4605      	mov	r5, r0
 8012332:	460c      	mov	r4, r1
 8012334:	b976      	cbnz	r6, 8012354 <_Bfree+0x28>
 8012336:	2010      	movs	r0, #16
 8012338:	f7fe fb82 	bl	8010a40 <malloc>
 801233c:	4602      	mov	r2, r0
 801233e:	6268      	str	r0, [r5, #36]	; 0x24
 8012340:	b920      	cbnz	r0, 801234c <_Bfree+0x20>
 8012342:	4b09      	ldr	r3, [pc, #36]	; (8012368 <_Bfree+0x3c>)
 8012344:	4809      	ldr	r0, [pc, #36]	; (801236c <_Bfree+0x40>)
 8012346:	218a      	movs	r1, #138	; 0x8a
 8012348:	f000 fcd4 	bl	8012cf4 <__assert_func>
 801234c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012350:	6006      	str	r6, [r0, #0]
 8012352:	60c6      	str	r6, [r0, #12]
 8012354:	b13c      	cbz	r4, 8012366 <_Bfree+0x3a>
 8012356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012358:	6862      	ldr	r2, [r4, #4]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012360:	6021      	str	r1, [r4, #0]
 8012362:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012366:	bd70      	pop	{r4, r5, r6, pc}
 8012368:	0806895d 	.word	0x0806895d
 801236c:	080689e0 	.word	0x080689e0

08012370 <__multadd>:
 8012370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012374:	690d      	ldr	r5, [r1, #16]
 8012376:	4607      	mov	r7, r0
 8012378:	460c      	mov	r4, r1
 801237a:	461e      	mov	r6, r3
 801237c:	f101 0c14 	add.w	ip, r1, #20
 8012380:	2000      	movs	r0, #0
 8012382:	f8dc 3000 	ldr.w	r3, [ip]
 8012386:	b299      	uxth	r1, r3
 8012388:	fb02 6101 	mla	r1, r2, r1, r6
 801238c:	0c1e      	lsrs	r6, r3, #16
 801238e:	0c0b      	lsrs	r3, r1, #16
 8012390:	fb02 3306 	mla	r3, r2, r6, r3
 8012394:	b289      	uxth	r1, r1
 8012396:	3001      	adds	r0, #1
 8012398:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801239c:	4285      	cmp	r5, r0
 801239e:	f84c 1b04 	str.w	r1, [ip], #4
 80123a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80123a6:	dcec      	bgt.n	8012382 <__multadd+0x12>
 80123a8:	b30e      	cbz	r6, 80123ee <__multadd+0x7e>
 80123aa:	68a3      	ldr	r3, [r4, #8]
 80123ac:	42ab      	cmp	r3, r5
 80123ae:	dc19      	bgt.n	80123e4 <__multadd+0x74>
 80123b0:	6861      	ldr	r1, [r4, #4]
 80123b2:	4638      	mov	r0, r7
 80123b4:	3101      	adds	r1, #1
 80123b6:	f7ff ff79 	bl	80122ac <_Balloc>
 80123ba:	4680      	mov	r8, r0
 80123bc:	b928      	cbnz	r0, 80123ca <__multadd+0x5a>
 80123be:	4602      	mov	r2, r0
 80123c0:	4b0c      	ldr	r3, [pc, #48]	; (80123f4 <__multadd+0x84>)
 80123c2:	480d      	ldr	r0, [pc, #52]	; (80123f8 <__multadd+0x88>)
 80123c4:	21b5      	movs	r1, #181	; 0xb5
 80123c6:	f000 fc95 	bl	8012cf4 <__assert_func>
 80123ca:	6922      	ldr	r2, [r4, #16]
 80123cc:	3202      	adds	r2, #2
 80123ce:	f104 010c 	add.w	r1, r4, #12
 80123d2:	0092      	lsls	r2, r2, #2
 80123d4:	300c      	adds	r0, #12
 80123d6:	f7fe fb3b 	bl	8010a50 <memcpy>
 80123da:	4621      	mov	r1, r4
 80123dc:	4638      	mov	r0, r7
 80123de:	f7ff ffa5 	bl	801232c <_Bfree>
 80123e2:	4644      	mov	r4, r8
 80123e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123e8:	3501      	adds	r5, #1
 80123ea:	615e      	str	r6, [r3, #20]
 80123ec:	6125      	str	r5, [r4, #16]
 80123ee:	4620      	mov	r0, r4
 80123f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f4:	080689cf 	.word	0x080689cf
 80123f8:	080689e0 	.word	0x080689e0

080123fc <__hi0bits>:
 80123fc:	0c03      	lsrs	r3, r0, #16
 80123fe:	041b      	lsls	r3, r3, #16
 8012400:	b9d3      	cbnz	r3, 8012438 <__hi0bits+0x3c>
 8012402:	0400      	lsls	r0, r0, #16
 8012404:	2310      	movs	r3, #16
 8012406:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801240a:	bf04      	itt	eq
 801240c:	0200      	lsleq	r0, r0, #8
 801240e:	3308      	addeq	r3, #8
 8012410:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012414:	bf04      	itt	eq
 8012416:	0100      	lsleq	r0, r0, #4
 8012418:	3304      	addeq	r3, #4
 801241a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801241e:	bf04      	itt	eq
 8012420:	0080      	lsleq	r0, r0, #2
 8012422:	3302      	addeq	r3, #2
 8012424:	2800      	cmp	r0, #0
 8012426:	db05      	blt.n	8012434 <__hi0bits+0x38>
 8012428:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801242c:	f103 0301 	add.w	r3, r3, #1
 8012430:	bf08      	it	eq
 8012432:	2320      	moveq	r3, #32
 8012434:	4618      	mov	r0, r3
 8012436:	4770      	bx	lr
 8012438:	2300      	movs	r3, #0
 801243a:	e7e4      	b.n	8012406 <__hi0bits+0xa>

0801243c <__lo0bits>:
 801243c:	6803      	ldr	r3, [r0, #0]
 801243e:	f013 0207 	ands.w	r2, r3, #7
 8012442:	4601      	mov	r1, r0
 8012444:	d00b      	beq.n	801245e <__lo0bits+0x22>
 8012446:	07da      	lsls	r2, r3, #31
 8012448:	d423      	bmi.n	8012492 <__lo0bits+0x56>
 801244a:	0798      	lsls	r0, r3, #30
 801244c:	bf49      	itett	mi
 801244e:	085b      	lsrmi	r3, r3, #1
 8012450:	089b      	lsrpl	r3, r3, #2
 8012452:	2001      	movmi	r0, #1
 8012454:	600b      	strmi	r3, [r1, #0]
 8012456:	bf5c      	itt	pl
 8012458:	600b      	strpl	r3, [r1, #0]
 801245a:	2002      	movpl	r0, #2
 801245c:	4770      	bx	lr
 801245e:	b298      	uxth	r0, r3
 8012460:	b9a8      	cbnz	r0, 801248e <__lo0bits+0x52>
 8012462:	0c1b      	lsrs	r3, r3, #16
 8012464:	2010      	movs	r0, #16
 8012466:	b2da      	uxtb	r2, r3
 8012468:	b90a      	cbnz	r2, 801246e <__lo0bits+0x32>
 801246a:	3008      	adds	r0, #8
 801246c:	0a1b      	lsrs	r3, r3, #8
 801246e:	071a      	lsls	r2, r3, #28
 8012470:	bf04      	itt	eq
 8012472:	091b      	lsreq	r3, r3, #4
 8012474:	3004      	addeq	r0, #4
 8012476:	079a      	lsls	r2, r3, #30
 8012478:	bf04      	itt	eq
 801247a:	089b      	lsreq	r3, r3, #2
 801247c:	3002      	addeq	r0, #2
 801247e:	07da      	lsls	r2, r3, #31
 8012480:	d403      	bmi.n	801248a <__lo0bits+0x4e>
 8012482:	085b      	lsrs	r3, r3, #1
 8012484:	f100 0001 	add.w	r0, r0, #1
 8012488:	d005      	beq.n	8012496 <__lo0bits+0x5a>
 801248a:	600b      	str	r3, [r1, #0]
 801248c:	4770      	bx	lr
 801248e:	4610      	mov	r0, r2
 8012490:	e7e9      	b.n	8012466 <__lo0bits+0x2a>
 8012492:	2000      	movs	r0, #0
 8012494:	4770      	bx	lr
 8012496:	2020      	movs	r0, #32
 8012498:	4770      	bx	lr
	...

0801249c <__i2b>:
 801249c:	b510      	push	{r4, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	2101      	movs	r1, #1
 80124a2:	f7ff ff03 	bl	80122ac <_Balloc>
 80124a6:	4602      	mov	r2, r0
 80124a8:	b928      	cbnz	r0, 80124b6 <__i2b+0x1a>
 80124aa:	4b05      	ldr	r3, [pc, #20]	; (80124c0 <__i2b+0x24>)
 80124ac:	4805      	ldr	r0, [pc, #20]	; (80124c4 <__i2b+0x28>)
 80124ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80124b2:	f000 fc1f 	bl	8012cf4 <__assert_func>
 80124b6:	2301      	movs	r3, #1
 80124b8:	6144      	str	r4, [r0, #20]
 80124ba:	6103      	str	r3, [r0, #16]
 80124bc:	bd10      	pop	{r4, pc}
 80124be:	bf00      	nop
 80124c0:	080689cf 	.word	0x080689cf
 80124c4:	080689e0 	.word	0x080689e0

080124c8 <__multiply>:
 80124c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124cc:	4691      	mov	r9, r2
 80124ce:	690a      	ldr	r2, [r1, #16]
 80124d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	bfb8      	it	lt
 80124d8:	460b      	movlt	r3, r1
 80124da:	460c      	mov	r4, r1
 80124dc:	bfbc      	itt	lt
 80124de:	464c      	movlt	r4, r9
 80124e0:	4699      	movlt	r9, r3
 80124e2:	6927      	ldr	r7, [r4, #16]
 80124e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124e8:	68a3      	ldr	r3, [r4, #8]
 80124ea:	6861      	ldr	r1, [r4, #4]
 80124ec:	eb07 060a 	add.w	r6, r7, sl
 80124f0:	42b3      	cmp	r3, r6
 80124f2:	b085      	sub	sp, #20
 80124f4:	bfb8      	it	lt
 80124f6:	3101      	addlt	r1, #1
 80124f8:	f7ff fed8 	bl	80122ac <_Balloc>
 80124fc:	b930      	cbnz	r0, 801250c <__multiply+0x44>
 80124fe:	4602      	mov	r2, r0
 8012500:	4b44      	ldr	r3, [pc, #272]	; (8012614 <__multiply+0x14c>)
 8012502:	4845      	ldr	r0, [pc, #276]	; (8012618 <__multiply+0x150>)
 8012504:	f240 115d 	movw	r1, #349	; 0x15d
 8012508:	f000 fbf4 	bl	8012cf4 <__assert_func>
 801250c:	f100 0514 	add.w	r5, r0, #20
 8012510:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012514:	462b      	mov	r3, r5
 8012516:	2200      	movs	r2, #0
 8012518:	4543      	cmp	r3, r8
 801251a:	d321      	bcc.n	8012560 <__multiply+0x98>
 801251c:	f104 0314 	add.w	r3, r4, #20
 8012520:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012524:	f109 0314 	add.w	r3, r9, #20
 8012528:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801252c:	9202      	str	r2, [sp, #8]
 801252e:	1b3a      	subs	r2, r7, r4
 8012530:	3a15      	subs	r2, #21
 8012532:	f022 0203 	bic.w	r2, r2, #3
 8012536:	3204      	adds	r2, #4
 8012538:	f104 0115 	add.w	r1, r4, #21
 801253c:	428f      	cmp	r7, r1
 801253e:	bf38      	it	cc
 8012540:	2204      	movcc	r2, #4
 8012542:	9201      	str	r2, [sp, #4]
 8012544:	9a02      	ldr	r2, [sp, #8]
 8012546:	9303      	str	r3, [sp, #12]
 8012548:	429a      	cmp	r2, r3
 801254a:	d80c      	bhi.n	8012566 <__multiply+0x9e>
 801254c:	2e00      	cmp	r6, #0
 801254e:	dd03      	ble.n	8012558 <__multiply+0x90>
 8012550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012554:	2b00      	cmp	r3, #0
 8012556:	d05a      	beq.n	801260e <__multiply+0x146>
 8012558:	6106      	str	r6, [r0, #16]
 801255a:	b005      	add	sp, #20
 801255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012560:	f843 2b04 	str.w	r2, [r3], #4
 8012564:	e7d8      	b.n	8012518 <__multiply+0x50>
 8012566:	f8b3 a000 	ldrh.w	sl, [r3]
 801256a:	f1ba 0f00 	cmp.w	sl, #0
 801256e:	d024      	beq.n	80125ba <__multiply+0xf2>
 8012570:	f104 0e14 	add.w	lr, r4, #20
 8012574:	46a9      	mov	r9, r5
 8012576:	f04f 0c00 	mov.w	ip, #0
 801257a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801257e:	f8d9 1000 	ldr.w	r1, [r9]
 8012582:	fa1f fb82 	uxth.w	fp, r2
 8012586:	b289      	uxth	r1, r1
 8012588:	fb0a 110b 	mla	r1, sl, fp, r1
 801258c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012590:	f8d9 2000 	ldr.w	r2, [r9]
 8012594:	4461      	add	r1, ip
 8012596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801259a:	fb0a c20b 	mla	r2, sl, fp, ip
 801259e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80125a2:	b289      	uxth	r1, r1
 80125a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80125a8:	4577      	cmp	r7, lr
 80125aa:	f849 1b04 	str.w	r1, [r9], #4
 80125ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80125b2:	d8e2      	bhi.n	801257a <__multiply+0xb2>
 80125b4:	9a01      	ldr	r2, [sp, #4]
 80125b6:	f845 c002 	str.w	ip, [r5, r2]
 80125ba:	9a03      	ldr	r2, [sp, #12]
 80125bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80125c0:	3304      	adds	r3, #4
 80125c2:	f1b9 0f00 	cmp.w	r9, #0
 80125c6:	d020      	beq.n	801260a <__multiply+0x142>
 80125c8:	6829      	ldr	r1, [r5, #0]
 80125ca:	f104 0c14 	add.w	ip, r4, #20
 80125ce:	46ae      	mov	lr, r5
 80125d0:	f04f 0a00 	mov.w	sl, #0
 80125d4:	f8bc b000 	ldrh.w	fp, [ip]
 80125d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80125dc:	fb09 220b 	mla	r2, r9, fp, r2
 80125e0:	4492      	add	sl, r2
 80125e2:	b289      	uxth	r1, r1
 80125e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80125e8:	f84e 1b04 	str.w	r1, [lr], #4
 80125ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80125f0:	f8be 1000 	ldrh.w	r1, [lr]
 80125f4:	0c12      	lsrs	r2, r2, #16
 80125f6:	fb09 1102 	mla	r1, r9, r2, r1
 80125fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80125fe:	4567      	cmp	r7, ip
 8012600:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012604:	d8e6      	bhi.n	80125d4 <__multiply+0x10c>
 8012606:	9a01      	ldr	r2, [sp, #4]
 8012608:	50a9      	str	r1, [r5, r2]
 801260a:	3504      	adds	r5, #4
 801260c:	e79a      	b.n	8012544 <__multiply+0x7c>
 801260e:	3e01      	subs	r6, #1
 8012610:	e79c      	b.n	801254c <__multiply+0x84>
 8012612:	bf00      	nop
 8012614:	080689cf 	.word	0x080689cf
 8012618:	080689e0 	.word	0x080689e0

0801261c <__pow5mult>:
 801261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012620:	4615      	mov	r5, r2
 8012622:	f012 0203 	ands.w	r2, r2, #3
 8012626:	4606      	mov	r6, r0
 8012628:	460f      	mov	r7, r1
 801262a:	d007      	beq.n	801263c <__pow5mult+0x20>
 801262c:	4c25      	ldr	r4, [pc, #148]	; (80126c4 <__pow5mult+0xa8>)
 801262e:	3a01      	subs	r2, #1
 8012630:	2300      	movs	r3, #0
 8012632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012636:	f7ff fe9b 	bl	8012370 <__multadd>
 801263a:	4607      	mov	r7, r0
 801263c:	10ad      	asrs	r5, r5, #2
 801263e:	d03d      	beq.n	80126bc <__pow5mult+0xa0>
 8012640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012642:	b97c      	cbnz	r4, 8012664 <__pow5mult+0x48>
 8012644:	2010      	movs	r0, #16
 8012646:	f7fe f9fb 	bl	8010a40 <malloc>
 801264a:	4602      	mov	r2, r0
 801264c:	6270      	str	r0, [r6, #36]	; 0x24
 801264e:	b928      	cbnz	r0, 801265c <__pow5mult+0x40>
 8012650:	4b1d      	ldr	r3, [pc, #116]	; (80126c8 <__pow5mult+0xac>)
 8012652:	481e      	ldr	r0, [pc, #120]	; (80126cc <__pow5mult+0xb0>)
 8012654:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012658:	f000 fb4c 	bl	8012cf4 <__assert_func>
 801265c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012660:	6004      	str	r4, [r0, #0]
 8012662:	60c4      	str	r4, [r0, #12]
 8012664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801266c:	b94c      	cbnz	r4, 8012682 <__pow5mult+0x66>
 801266e:	f240 2171 	movw	r1, #625	; 0x271
 8012672:	4630      	mov	r0, r6
 8012674:	f7ff ff12 	bl	801249c <__i2b>
 8012678:	2300      	movs	r3, #0
 801267a:	f8c8 0008 	str.w	r0, [r8, #8]
 801267e:	4604      	mov	r4, r0
 8012680:	6003      	str	r3, [r0, #0]
 8012682:	f04f 0900 	mov.w	r9, #0
 8012686:	07eb      	lsls	r3, r5, #31
 8012688:	d50a      	bpl.n	80126a0 <__pow5mult+0x84>
 801268a:	4639      	mov	r1, r7
 801268c:	4622      	mov	r2, r4
 801268e:	4630      	mov	r0, r6
 8012690:	f7ff ff1a 	bl	80124c8 <__multiply>
 8012694:	4639      	mov	r1, r7
 8012696:	4680      	mov	r8, r0
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff fe47 	bl	801232c <_Bfree>
 801269e:	4647      	mov	r7, r8
 80126a0:	106d      	asrs	r5, r5, #1
 80126a2:	d00b      	beq.n	80126bc <__pow5mult+0xa0>
 80126a4:	6820      	ldr	r0, [r4, #0]
 80126a6:	b938      	cbnz	r0, 80126b8 <__pow5mult+0x9c>
 80126a8:	4622      	mov	r2, r4
 80126aa:	4621      	mov	r1, r4
 80126ac:	4630      	mov	r0, r6
 80126ae:	f7ff ff0b 	bl	80124c8 <__multiply>
 80126b2:	6020      	str	r0, [r4, #0]
 80126b4:	f8c0 9000 	str.w	r9, [r0]
 80126b8:	4604      	mov	r4, r0
 80126ba:	e7e4      	b.n	8012686 <__pow5mult+0x6a>
 80126bc:	4638      	mov	r0, r7
 80126be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c2:	bf00      	nop
 80126c4:	08068b30 	.word	0x08068b30
 80126c8:	0806895d 	.word	0x0806895d
 80126cc:	080689e0 	.word	0x080689e0

080126d0 <__lshift>:
 80126d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d4:	460c      	mov	r4, r1
 80126d6:	6849      	ldr	r1, [r1, #4]
 80126d8:	6923      	ldr	r3, [r4, #16]
 80126da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126de:	68a3      	ldr	r3, [r4, #8]
 80126e0:	4607      	mov	r7, r0
 80126e2:	4691      	mov	r9, r2
 80126e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126e8:	f108 0601 	add.w	r6, r8, #1
 80126ec:	42b3      	cmp	r3, r6
 80126ee:	db0b      	blt.n	8012708 <__lshift+0x38>
 80126f0:	4638      	mov	r0, r7
 80126f2:	f7ff fddb 	bl	80122ac <_Balloc>
 80126f6:	4605      	mov	r5, r0
 80126f8:	b948      	cbnz	r0, 801270e <__lshift+0x3e>
 80126fa:	4602      	mov	r2, r0
 80126fc:	4b2a      	ldr	r3, [pc, #168]	; (80127a8 <__lshift+0xd8>)
 80126fe:	482b      	ldr	r0, [pc, #172]	; (80127ac <__lshift+0xdc>)
 8012700:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012704:	f000 faf6 	bl	8012cf4 <__assert_func>
 8012708:	3101      	adds	r1, #1
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	e7ee      	b.n	80126ec <__lshift+0x1c>
 801270e:	2300      	movs	r3, #0
 8012710:	f100 0114 	add.w	r1, r0, #20
 8012714:	f100 0210 	add.w	r2, r0, #16
 8012718:	4618      	mov	r0, r3
 801271a:	4553      	cmp	r3, sl
 801271c:	db37      	blt.n	801278e <__lshift+0xbe>
 801271e:	6920      	ldr	r0, [r4, #16]
 8012720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012724:	f104 0314 	add.w	r3, r4, #20
 8012728:	f019 091f 	ands.w	r9, r9, #31
 801272c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012730:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012734:	d02f      	beq.n	8012796 <__lshift+0xc6>
 8012736:	f1c9 0e20 	rsb	lr, r9, #32
 801273a:	468a      	mov	sl, r1
 801273c:	f04f 0c00 	mov.w	ip, #0
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	fa02 f209 	lsl.w	r2, r2, r9
 8012746:	ea42 020c 	orr.w	r2, r2, ip
 801274a:	f84a 2b04 	str.w	r2, [sl], #4
 801274e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012752:	4298      	cmp	r0, r3
 8012754:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012758:	d8f2      	bhi.n	8012740 <__lshift+0x70>
 801275a:	1b03      	subs	r3, r0, r4
 801275c:	3b15      	subs	r3, #21
 801275e:	f023 0303 	bic.w	r3, r3, #3
 8012762:	3304      	adds	r3, #4
 8012764:	f104 0215 	add.w	r2, r4, #21
 8012768:	4290      	cmp	r0, r2
 801276a:	bf38      	it	cc
 801276c:	2304      	movcc	r3, #4
 801276e:	f841 c003 	str.w	ip, [r1, r3]
 8012772:	f1bc 0f00 	cmp.w	ip, #0
 8012776:	d001      	beq.n	801277c <__lshift+0xac>
 8012778:	f108 0602 	add.w	r6, r8, #2
 801277c:	3e01      	subs	r6, #1
 801277e:	4638      	mov	r0, r7
 8012780:	612e      	str	r6, [r5, #16]
 8012782:	4621      	mov	r1, r4
 8012784:	f7ff fdd2 	bl	801232c <_Bfree>
 8012788:	4628      	mov	r0, r5
 801278a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801278e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012792:	3301      	adds	r3, #1
 8012794:	e7c1      	b.n	801271a <__lshift+0x4a>
 8012796:	3904      	subs	r1, #4
 8012798:	f853 2b04 	ldr.w	r2, [r3], #4
 801279c:	f841 2f04 	str.w	r2, [r1, #4]!
 80127a0:	4298      	cmp	r0, r3
 80127a2:	d8f9      	bhi.n	8012798 <__lshift+0xc8>
 80127a4:	e7ea      	b.n	801277c <__lshift+0xac>
 80127a6:	bf00      	nop
 80127a8:	080689cf 	.word	0x080689cf
 80127ac:	080689e0 	.word	0x080689e0

080127b0 <__mcmp>:
 80127b0:	b530      	push	{r4, r5, lr}
 80127b2:	6902      	ldr	r2, [r0, #16]
 80127b4:	690c      	ldr	r4, [r1, #16]
 80127b6:	1b12      	subs	r2, r2, r4
 80127b8:	d10e      	bne.n	80127d8 <__mcmp+0x28>
 80127ba:	f100 0314 	add.w	r3, r0, #20
 80127be:	3114      	adds	r1, #20
 80127c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80127c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80127c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80127cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80127d0:	42a5      	cmp	r5, r4
 80127d2:	d003      	beq.n	80127dc <__mcmp+0x2c>
 80127d4:	d305      	bcc.n	80127e2 <__mcmp+0x32>
 80127d6:	2201      	movs	r2, #1
 80127d8:	4610      	mov	r0, r2
 80127da:	bd30      	pop	{r4, r5, pc}
 80127dc:	4283      	cmp	r3, r0
 80127de:	d3f3      	bcc.n	80127c8 <__mcmp+0x18>
 80127e0:	e7fa      	b.n	80127d8 <__mcmp+0x28>
 80127e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127e6:	e7f7      	b.n	80127d8 <__mcmp+0x28>

080127e8 <__mdiff>:
 80127e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	460c      	mov	r4, r1
 80127ee:	4606      	mov	r6, r0
 80127f0:	4611      	mov	r1, r2
 80127f2:	4620      	mov	r0, r4
 80127f4:	4690      	mov	r8, r2
 80127f6:	f7ff ffdb 	bl	80127b0 <__mcmp>
 80127fa:	1e05      	subs	r5, r0, #0
 80127fc:	d110      	bne.n	8012820 <__mdiff+0x38>
 80127fe:	4629      	mov	r1, r5
 8012800:	4630      	mov	r0, r6
 8012802:	f7ff fd53 	bl	80122ac <_Balloc>
 8012806:	b930      	cbnz	r0, 8012816 <__mdiff+0x2e>
 8012808:	4b3a      	ldr	r3, [pc, #232]	; (80128f4 <__mdiff+0x10c>)
 801280a:	4602      	mov	r2, r0
 801280c:	f240 2132 	movw	r1, #562	; 0x232
 8012810:	4839      	ldr	r0, [pc, #228]	; (80128f8 <__mdiff+0x110>)
 8012812:	f000 fa6f 	bl	8012cf4 <__assert_func>
 8012816:	2301      	movs	r3, #1
 8012818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801281c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012820:	bfa4      	itt	ge
 8012822:	4643      	movge	r3, r8
 8012824:	46a0      	movge	r8, r4
 8012826:	4630      	mov	r0, r6
 8012828:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801282c:	bfa6      	itte	ge
 801282e:	461c      	movge	r4, r3
 8012830:	2500      	movge	r5, #0
 8012832:	2501      	movlt	r5, #1
 8012834:	f7ff fd3a 	bl	80122ac <_Balloc>
 8012838:	b920      	cbnz	r0, 8012844 <__mdiff+0x5c>
 801283a:	4b2e      	ldr	r3, [pc, #184]	; (80128f4 <__mdiff+0x10c>)
 801283c:	4602      	mov	r2, r0
 801283e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012842:	e7e5      	b.n	8012810 <__mdiff+0x28>
 8012844:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012848:	6926      	ldr	r6, [r4, #16]
 801284a:	60c5      	str	r5, [r0, #12]
 801284c:	f104 0914 	add.w	r9, r4, #20
 8012850:	f108 0514 	add.w	r5, r8, #20
 8012854:	f100 0e14 	add.w	lr, r0, #20
 8012858:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801285c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012860:	f108 0210 	add.w	r2, r8, #16
 8012864:	46f2      	mov	sl, lr
 8012866:	2100      	movs	r1, #0
 8012868:	f859 3b04 	ldr.w	r3, [r9], #4
 801286c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012870:	fa1f f883 	uxth.w	r8, r3
 8012874:	fa11 f18b 	uxtah	r1, r1, fp
 8012878:	0c1b      	lsrs	r3, r3, #16
 801287a:	eba1 0808 	sub.w	r8, r1, r8
 801287e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012882:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012886:	fa1f f888 	uxth.w	r8, r8
 801288a:	1419      	asrs	r1, r3, #16
 801288c:	454e      	cmp	r6, r9
 801288e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012892:	f84a 3b04 	str.w	r3, [sl], #4
 8012896:	d8e7      	bhi.n	8012868 <__mdiff+0x80>
 8012898:	1b33      	subs	r3, r6, r4
 801289a:	3b15      	subs	r3, #21
 801289c:	f023 0303 	bic.w	r3, r3, #3
 80128a0:	3304      	adds	r3, #4
 80128a2:	3415      	adds	r4, #21
 80128a4:	42a6      	cmp	r6, r4
 80128a6:	bf38      	it	cc
 80128a8:	2304      	movcc	r3, #4
 80128aa:	441d      	add	r5, r3
 80128ac:	4473      	add	r3, lr
 80128ae:	469e      	mov	lr, r3
 80128b0:	462e      	mov	r6, r5
 80128b2:	4566      	cmp	r6, ip
 80128b4:	d30e      	bcc.n	80128d4 <__mdiff+0xec>
 80128b6:	f10c 0203 	add.w	r2, ip, #3
 80128ba:	1b52      	subs	r2, r2, r5
 80128bc:	f022 0203 	bic.w	r2, r2, #3
 80128c0:	3d03      	subs	r5, #3
 80128c2:	45ac      	cmp	ip, r5
 80128c4:	bf38      	it	cc
 80128c6:	2200      	movcc	r2, #0
 80128c8:	441a      	add	r2, r3
 80128ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80128ce:	b17b      	cbz	r3, 80128f0 <__mdiff+0x108>
 80128d0:	6107      	str	r7, [r0, #16]
 80128d2:	e7a3      	b.n	801281c <__mdiff+0x34>
 80128d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80128d8:	fa11 f288 	uxtah	r2, r1, r8
 80128dc:	1414      	asrs	r4, r2, #16
 80128de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80128e2:	b292      	uxth	r2, r2
 80128e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80128e8:	f84e 2b04 	str.w	r2, [lr], #4
 80128ec:	1421      	asrs	r1, r4, #16
 80128ee:	e7e0      	b.n	80128b2 <__mdiff+0xca>
 80128f0:	3f01      	subs	r7, #1
 80128f2:	e7ea      	b.n	80128ca <__mdiff+0xe2>
 80128f4:	080689cf 	.word	0x080689cf
 80128f8:	080689e0 	.word	0x080689e0

080128fc <__d2b>:
 80128fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012900:	4689      	mov	r9, r1
 8012902:	2101      	movs	r1, #1
 8012904:	ec57 6b10 	vmov	r6, r7, d0
 8012908:	4690      	mov	r8, r2
 801290a:	f7ff fccf 	bl	80122ac <_Balloc>
 801290e:	4604      	mov	r4, r0
 8012910:	b930      	cbnz	r0, 8012920 <__d2b+0x24>
 8012912:	4602      	mov	r2, r0
 8012914:	4b25      	ldr	r3, [pc, #148]	; (80129ac <__d2b+0xb0>)
 8012916:	4826      	ldr	r0, [pc, #152]	; (80129b0 <__d2b+0xb4>)
 8012918:	f240 310a 	movw	r1, #778	; 0x30a
 801291c:	f000 f9ea 	bl	8012cf4 <__assert_func>
 8012920:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012924:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012928:	bb35      	cbnz	r5, 8012978 <__d2b+0x7c>
 801292a:	2e00      	cmp	r6, #0
 801292c:	9301      	str	r3, [sp, #4]
 801292e:	d028      	beq.n	8012982 <__d2b+0x86>
 8012930:	4668      	mov	r0, sp
 8012932:	9600      	str	r6, [sp, #0]
 8012934:	f7ff fd82 	bl	801243c <__lo0bits>
 8012938:	9900      	ldr	r1, [sp, #0]
 801293a:	b300      	cbz	r0, 801297e <__d2b+0x82>
 801293c:	9a01      	ldr	r2, [sp, #4]
 801293e:	f1c0 0320 	rsb	r3, r0, #32
 8012942:	fa02 f303 	lsl.w	r3, r2, r3
 8012946:	430b      	orrs	r3, r1
 8012948:	40c2      	lsrs	r2, r0
 801294a:	6163      	str	r3, [r4, #20]
 801294c:	9201      	str	r2, [sp, #4]
 801294e:	9b01      	ldr	r3, [sp, #4]
 8012950:	61a3      	str	r3, [r4, #24]
 8012952:	2b00      	cmp	r3, #0
 8012954:	bf14      	ite	ne
 8012956:	2202      	movne	r2, #2
 8012958:	2201      	moveq	r2, #1
 801295a:	6122      	str	r2, [r4, #16]
 801295c:	b1d5      	cbz	r5, 8012994 <__d2b+0x98>
 801295e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012962:	4405      	add	r5, r0
 8012964:	f8c9 5000 	str.w	r5, [r9]
 8012968:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801296c:	f8c8 0000 	str.w	r0, [r8]
 8012970:	4620      	mov	r0, r4
 8012972:	b003      	add	sp, #12
 8012974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801297c:	e7d5      	b.n	801292a <__d2b+0x2e>
 801297e:	6161      	str	r1, [r4, #20]
 8012980:	e7e5      	b.n	801294e <__d2b+0x52>
 8012982:	a801      	add	r0, sp, #4
 8012984:	f7ff fd5a 	bl	801243c <__lo0bits>
 8012988:	9b01      	ldr	r3, [sp, #4]
 801298a:	6163      	str	r3, [r4, #20]
 801298c:	2201      	movs	r2, #1
 801298e:	6122      	str	r2, [r4, #16]
 8012990:	3020      	adds	r0, #32
 8012992:	e7e3      	b.n	801295c <__d2b+0x60>
 8012994:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801299c:	f8c9 0000 	str.w	r0, [r9]
 80129a0:	6918      	ldr	r0, [r3, #16]
 80129a2:	f7ff fd2b 	bl	80123fc <__hi0bits>
 80129a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80129aa:	e7df      	b.n	801296c <__d2b+0x70>
 80129ac:	080689cf 	.word	0x080689cf
 80129b0:	080689e0 	.word	0x080689e0

080129b4 <_calloc_r>:
 80129b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129b6:	fba1 2402 	umull	r2, r4, r1, r2
 80129ba:	b94c      	cbnz	r4, 80129d0 <_calloc_r+0x1c>
 80129bc:	4611      	mov	r1, r2
 80129be:	9201      	str	r2, [sp, #4]
 80129c0:	f7fe f8c8 	bl	8010b54 <_malloc_r>
 80129c4:	9a01      	ldr	r2, [sp, #4]
 80129c6:	4605      	mov	r5, r0
 80129c8:	b930      	cbnz	r0, 80129d8 <_calloc_r+0x24>
 80129ca:	4628      	mov	r0, r5
 80129cc:	b003      	add	sp, #12
 80129ce:	bd30      	pop	{r4, r5, pc}
 80129d0:	220c      	movs	r2, #12
 80129d2:	6002      	str	r2, [r0, #0]
 80129d4:	2500      	movs	r5, #0
 80129d6:	e7f8      	b.n	80129ca <_calloc_r+0x16>
 80129d8:	4621      	mov	r1, r4
 80129da:	f7fe f847 	bl	8010a6c <memset>
 80129de:	e7f4      	b.n	80129ca <_calloc_r+0x16>

080129e0 <_realloc_r>:
 80129e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e4:	4680      	mov	r8, r0
 80129e6:	4614      	mov	r4, r2
 80129e8:	460e      	mov	r6, r1
 80129ea:	b921      	cbnz	r1, 80129f6 <_realloc_r+0x16>
 80129ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129f0:	4611      	mov	r1, r2
 80129f2:	f7fe b8af 	b.w	8010b54 <_malloc_r>
 80129f6:	b92a      	cbnz	r2, 8012a04 <_realloc_r+0x24>
 80129f8:	f7fe f840 	bl	8010a7c <_free_r>
 80129fc:	4625      	mov	r5, r4
 80129fe:	4628      	mov	r0, r5
 8012a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a04:	f000 f9d5 	bl	8012db2 <_malloc_usable_size_r>
 8012a08:	4284      	cmp	r4, r0
 8012a0a:	4607      	mov	r7, r0
 8012a0c:	d802      	bhi.n	8012a14 <_realloc_r+0x34>
 8012a0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012a12:	d812      	bhi.n	8012a3a <_realloc_r+0x5a>
 8012a14:	4621      	mov	r1, r4
 8012a16:	4640      	mov	r0, r8
 8012a18:	f7fe f89c 	bl	8010b54 <_malloc_r>
 8012a1c:	4605      	mov	r5, r0
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	d0ed      	beq.n	80129fe <_realloc_r+0x1e>
 8012a22:	42bc      	cmp	r4, r7
 8012a24:	4622      	mov	r2, r4
 8012a26:	4631      	mov	r1, r6
 8012a28:	bf28      	it	cs
 8012a2a:	463a      	movcs	r2, r7
 8012a2c:	f7fe f810 	bl	8010a50 <memcpy>
 8012a30:	4631      	mov	r1, r6
 8012a32:	4640      	mov	r0, r8
 8012a34:	f7fe f822 	bl	8010a7c <_free_r>
 8012a38:	e7e1      	b.n	80129fe <_realloc_r+0x1e>
 8012a3a:	4635      	mov	r5, r6
 8012a3c:	e7df      	b.n	80129fe <_realloc_r+0x1e>

08012a3e <__ssputs_r>:
 8012a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a42:	688e      	ldr	r6, [r1, #8]
 8012a44:	429e      	cmp	r6, r3
 8012a46:	4682      	mov	sl, r0
 8012a48:	460c      	mov	r4, r1
 8012a4a:	4690      	mov	r8, r2
 8012a4c:	461f      	mov	r7, r3
 8012a4e:	d838      	bhi.n	8012ac2 <__ssputs_r+0x84>
 8012a50:	898a      	ldrh	r2, [r1, #12]
 8012a52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a56:	d032      	beq.n	8012abe <__ssputs_r+0x80>
 8012a58:	6825      	ldr	r5, [r4, #0]
 8012a5a:	6909      	ldr	r1, [r1, #16]
 8012a5c:	eba5 0901 	sub.w	r9, r5, r1
 8012a60:	6965      	ldr	r5, [r4, #20]
 8012a62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	444b      	add	r3, r9
 8012a6e:	106d      	asrs	r5, r5, #1
 8012a70:	429d      	cmp	r5, r3
 8012a72:	bf38      	it	cc
 8012a74:	461d      	movcc	r5, r3
 8012a76:	0553      	lsls	r3, r2, #21
 8012a78:	d531      	bpl.n	8012ade <__ssputs_r+0xa0>
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	f7fe f86a 	bl	8010b54 <_malloc_r>
 8012a80:	4606      	mov	r6, r0
 8012a82:	b950      	cbnz	r0, 8012a9a <__ssputs_r+0x5c>
 8012a84:	230c      	movs	r3, #12
 8012a86:	f8ca 3000 	str.w	r3, [sl]
 8012a8a:	89a3      	ldrh	r3, [r4, #12]
 8012a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a90:	81a3      	strh	r3, [r4, #12]
 8012a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a9a:	6921      	ldr	r1, [r4, #16]
 8012a9c:	464a      	mov	r2, r9
 8012a9e:	f7fd ffd7 	bl	8010a50 <memcpy>
 8012aa2:	89a3      	ldrh	r3, [r4, #12]
 8012aa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012aac:	81a3      	strh	r3, [r4, #12]
 8012aae:	6126      	str	r6, [r4, #16]
 8012ab0:	6165      	str	r5, [r4, #20]
 8012ab2:	444e      	add	r6, r9
 8012ab4:	eba5 0509 	sub.w	r5, r5, r9
 8012ab8:	6026      	str	r6, [r4, #0]
 8012aba:	60a5      	str	r5, [r4, #8]
 8012abc:	463e      	mov	r6, r7
 8012abe:	42be      	cmp	r6, r7
 8012ac0:	d900      	bls.n	8012ac4 <__ssputs_r+0x86>
 8012ac2:	463e      	mov	r6, r7
 8012ac4:	6820      	ldr	r0, [r4, #0]
 8012ac6:	4632      	mov	r2, r6
 8012ac8:	4641      	mov	r1, r8
 8012aca:	f000 f958 	bl	8012d7e <memmove>
 8012ace:	68a3      	ldr	r3, [r4, #8]
 8012ad0:	1b9b      	subs	r3, r3, r6
 8012ad2:	60a3      	str	r3, [r4, #8]
 8012ad4:	6823      	ldr	r3, [r4, #0]
 8012ad6:	4433      	add	r3, r6
 8012ad8:	6023      	str	r3, [r4, #0]
 8012ada:	2000      	movs	r0, #0
 8012adc:	e7db      	b.n	8012a96 <__ssputs_r+0x58>
 8012ade:	462a      	mov	r2, r5
 8012ae0:	f7ff ff7e 	bl	80129e0 <_realloc_r>
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d1e1      	bne.n	8012aae <__ssputs_r+0x70>
 8012aea:	6921      	ldr	r1, [r4, #16]
 8012aec:	4650      	mov	r0, sl
 8012aee:	f7fd ffc5 	bl	8010a7c <_free_r>
 8012af2:	e7c7      	b.n	8012a84 <__ssputs_r+0x46>

08012af4 <_svfiprintf_r>:
 8012af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af8:	4698      	mov	r8, r3
 8012afa:	898b      	ldrh	r3, [r1, #12]
 8012afc:	061b      	lsls	r3, r3, #24
 8012afe:	b09d      	sub	sp, #116	; 0x74
 8012b00:	4607      	mov	r7, r0
 8012b02:	460d      	mov	r5, r1
 8012b04:	4614      	mov	r4, r2
 8012b06:	d50e      	bpl.n	8012b26 <_svfiprintf_r+0x32>
 8012b08:	690b      	ldr	r3, [r1, #16]
 8012b0a:	b963      	cbnz	r3, 8012b26 <_svfiprintf_r+0x32>
 8012b0c:	2140      	movs	r1, #64	; 0x40
 8012b0e:	f7fe f821 	bl	8010b54 <_malloc_r>
 8012b12:	6028      	str	r0, [r5, #0]
 8012b14:	6128      	str	r0, [r5, #16]
 8012b16:	b920      	cbnz	r0, 8012b22 <_svfiprintf_r+0x2e>
 8012b18:	230c      	movs	r3, #12
 8012b1a:	603b      	str	r3, [r7, #0]
 8012b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b20:	e0d1      	b.n	8012cc6 <_svfiprintf_r+0x1d2>
 8012b22:	2340      	movs	r3, #64	; 0x40
 8012b24:	616b      	str	r3, [r5, #20]
 8012b26:	2300      	movs	r3, #0
 8012b28:	9309      	str	r3, [sp, #36]	; 0x24
 8012b2a:	2320      	movs	r3, #32
 8012b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b34:	2330      	movs	r3, #48	; 0x30
 8012b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012ce0 <_svfiprintf_r+0x1ec>
 8012b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b3e:	f04f 0901 	mov.w	r9, #1
 8012b42:	4623      	mov	r3, r4
 8012b44:	469a      	mov	sl, r3
 8012b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b4a:	b10a      	cbz	r2, 8012b50 <_svfiprintf_r+0x5c>
 8012b4c:	2a25      	cmp	r2, #37	; 0x25
 8012b4e:	d1f9      	bne.n	8012b44 <_svfiprintf_r+0x50>
 8012b50:	ebba 0b04 	subs.w	fp, sl, r4
 8012b54:	d00b      	beq.n	8012b6e <_svfiprintf_r+0x7a>
 8012b56:	465b      	mov	r3, fp
 8012b58:	4622      	mov	r2, r4
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	4638      	mov	r0, r7
 8012b5e:	f7ff ff6e 	bl	8012a3e <__ssputs_r>
 8012b62:	3001      	adds	r0, #1
 8012b64:	f000 80aa 	beq.w	8012cbc <_svfiprintf_r+0x1c8>
 8012b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b6a:	445a      	add	r2, fp
 8012b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8012b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 80a2 	beq.w	8012cbc <_svfiprintf_r+0x1c8>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b82:	f10a 0a01 	add.w	sl, sl, #1
 8012b86:	9304      	str	r3, [sp, #16]
 8012b88:	9307      	str	r3, [sp, #28]
 8012b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8012b90:	4654      	mov	r4, sl
 8012b92:	2205      	movs	r2, #5
 8012b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b98:	4851      	ldr	r0, [pc, #324]	; (8012ce0 <_svfiprintf_r+0x1ec>)
 8012b9a:	f7ed fb39 	bl	8000210 <memchr>
 8012b9e:	9a04      	ldr	r2, [sp, #16]
 8012ba0:	b9d8      	cbnz	r0, 8012bda <_svfiprintf_r+0xe6>
 8012ba2:	06d0      	lsls	r0, r2, #27
 8012ba4:	bf44      	itt	mi
 8012ba6:	2320      	movmi	r3, #32
 8012ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bac:	0711      	lsls	r1, r2, #28
 8012bae:	bf44      	itt	mi
 8012bb0:	232b      	movmi	r3, #43	; 0x2b
 8012bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8012bba:	2b2a      	cmp	r3, #42	; 0x2a
 8012bbc:	d015      	beq.n	8012bea <_svfiprintf_r+0xf6>
 8012bbe:	9a07      	ldr	r2, [sp, #28]
 8012bc0:	4654      	mov	r4, sl
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	f04f 0c0a 	mov.w	ip, #10
 8012bc8:	4621      	mov	r1, r4
 8012bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bce:	3b30      	subs	r3, #48	; 0x30
 8012bd0:	2b09      	cmp	r3, #9
 8012bd2:	d94e      	bls.n	8012c72 <_svfiprintf_r+0x17e>
 8012bd4:	b1b0      	cbz	r0, 8012c04 <_svfiprintf_r+0x110>
 8012bd6:	9207      	str	r2, [sp, #28]
 8012bd8:	e014      	b.n	8012c04 <_svfiprintf_r+0x110>
 8012bda:	eba0 0308 	sub.w	r3, r0, r8
 8012bde:	fa09 f303 	lsl.w	r3, r9, r3
 8012be2:	4313      	orrs	r3, r2
 8012be4:	9304      	str	r3, [sp, #16]
 8012be6:	46a2      	mov	sl, r4
 8012be8:	e7d2      	b.n	8012b90 <_svfiprintf_r+0x9c>
 8012bea:	9b03      	ldr	r3, [sp, #12]
 8012bec:	1d19      	adds	r1, r3, #4
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	9103      	str	r1, [sp, #12]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	bfbb      	ittet	lt
 8012bf6:	425b      	neglt	r3, r3
 8012bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8012bfc:	9307      	strge	r3, [sp, #28]
 8012bfe:	9307      	strlt	r3, [sp, #28]
 8012c00:	bfb8      	it	lt
 8012c02:	9204      	strlt	r2, [sp, #16]
 8012c04:	7823      	ldrb	r3, [r4, #0]
 8012c06:	2b2e      	cmp	r3, #46	; 0x2e
 8012c08:	d10c      	bne.n	8012c24 <_svfiprintf_r+0x130>
 8012c0a:	7863      	ldrb	r3, [r4, #1]
 8012c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8012c0e:	d135      	bne.n	8012c7c <_svfiprintf_r+0x188>
 8012c10:	9b03      	ldr	r3, [sp, #12]
 8012c12:	1d1a      	adds	r2, r3, #4
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	9203      	str	r2, [sp, #12]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	bfb8      	it	lt
 8012c1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012c20:	3402      	adds	r4, #2
 8012c22:	9305      	str	r3, [sp, #20]
 8012c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012cf0 <_svfiprintf_r+0x1fc>
 8012c28:	7821      	ldrb	r1, [r4, #0]
 8012c2a:	2203      	movs	r2, #3
 8012c2c:	4650      	mov	r0, sl
 8012c2e:	f7ed faef 	bl	8000210 <memchr>
 8012c32:	b140      	cbz	r0, 8012c46 <_svfiprintf_r+0x152>
 8012c34:	2340      	movs	r3, #64	; 0x40
 8012c36:	eba0 000a 	sub.w	r0, r0, sl
 8012c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8012c3e:	9b04      	ldr	r3, [sp, #16]
 8012c40:	4303      	orrs	r3, r0
 8012c42:	3401      	adds	r4, #1
 8012c44:	9304      	str	r3, [sp, #16]
 8012c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c4a:	4826      	ldr	r0, [pc, #152]	; (8012ce4 <_svfiprintf_r+0x1f0>)
 8012c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c50:	2206      	movs	r2, #6
 8012c52:	f7ed fadd 	bl	8000210 <memchr>
 8012c56:	2800      	cmp	r0, #0
 8012c58:	d038      	beq.n	8012ccc <_svfiprintf_r+0x1d8>
 8012c5a:	4b23      	ldr	r3, [pc, #140]	; (8012ce8 <_svfiprintf_r+0x1f4>)
 8012c5c:	bb1b      	cbnz	r3, 8012ca6 <_svfiprintf_r+0x1b2>
 8012c5e:	9b03      	ldr	r3, [sp, #12]
 8012c60:	3307      	adds	r3, #7
 8012c62:	f023 0307 	bic.w	r3, r3, #7
 8012c66:	3308      	adds	r3, #8
 8012c68:	9303      	str	r3, [sp, #12]
 8012c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c6c:	4433      	add	r3, r6
 8012c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c70:	e767      	b.n	8012b42 <_svfiprintf_r+0x4e>
 8012c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c76:	460c      	mov	r4, r1
 8012c78:	2001      	movs	r0, #1
 8012c7a:	e7a5      	b.n	8012bc8 <_svfiprintf_r+0xd4>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	3401      	adds	r4, #1
 8012c80:	9305      	str	r3, [sp, #20]
 8012c82:	4619      	mov	r1, r3
 8012c84:	f04f 0c0a 	mov.w	ip, #10
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c8e:	3a30      	subs	r2, #48	; 0x30
 8012c90:	2a09      	cmp	r2, #9
 8012c92:	d903      	bls.n	8012c9c <_svfiprintf_r+0x1a8>
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0c5      	beq.n	8012c24 <_svfiprintf_r+0x130>
 8012c98:	9105      	str	r1, [sp, #20]
 8012c9a:	e7c3      	b.n	8012c24 <_svfiprintf_r+0x130>
 8012c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ca0:	4604      	mov	r4, r0
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	e7f0      	b.n	8012c88 <_svfiprintf_r+0x194>
 8012ca6:	ab03      	add	r3, sp, #12
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	462a      	mov	r2, r5
 8012cac:	4b0f      	ldr	r3, [pc, #60]	; (8012cec <_svfiprintf_r+0x1f8>)
 8012cae:	a904      	add	r1, sp, #16
 8012cb0:	4638      	mov	r0, r7
 8012cb2:	f7fe f863 	bl	8010d7c <_printf_float>
 8012cb6:	1c42      	adds	r2, r0, #1
 8012cb8:	4606      	mov	r6, r0
 8012cba:	d1d6      	bne.n	8012c6a <_svfiprintf_r+0x176>
 8012cbc:	89ab      	ldrh	r3, [r5, #12]
 8012cbe:	065b      	lsls	r3, r3, #25
 8012cc0:	f53f af2c 	bmi.w	8012b1c <_svfiprintf_r+0x28>
 8012cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cc6:	b01d      	add	sp, #116	; 0x74
 8012cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ccc:	ab03      	add	r3, sp, #12
 8012cce:	9300      	str	r3, [sp, #0]
 8012cd0:	462a      	mov	r2, r5
 8012cd2:	4b06      	ldr	r3, [pc, #24]	; (8012cec <_svfiprintf_r+0x1f8>)
 8012cd4:	a904      	add	r1, sp, #16
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	f7fe faf4 	bl	80112c4 <_printf_i>
 8012cdc:	e7eb      	b.n	8012cb6 <_svfiprintf_r+0x1c2>
 8012cde:	bf00      	nop
 8012ce0:	08068b3c 	.word	0x08068b3c
 8012ce4:	08068b46 	.word	0x08068b46
 8012ce8:	08010d7d 	.word	0x08010d7d
 8012cec:	08012a3f 	.word	0x08012a3f
 8012cf0:	08068b42 	.word	0x08068b42

08012cf4 <__assert_func>:
 8012cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cf6:	4614      	mov	r4, r2
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	4b09      	ldr	r3, [pc, #36]	; (8012d20 <__assert_func+0x2c>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4605      	mov	r5, r0
 8012d00:	68d8      	ldr	r0, [r3, #12]
 8012d02:	b14c      	cbz	r4, 8012d18 <__assert_func+0x24>
 8012d04:	4b07      	ldr	r3, [pc, #28]	; (8012d24 <__assert_func+0x30>)
 8012d06:	9100      	str	r1, [sp, #0]
 8012d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d0c:	4906      	ldr	r1, [pc, #24]	; (8012d28 <__assert_func+0x34>)
 8012d0e:	462b      	mov	r3, r5
 8012d10:	f000 f80e 	bl	8012d30 <fiprintf>
 8012d14:	f000 fa7c 	bl	8013210 <abort>
 8012d18:	4b04      	ldr	r3, [pc, #16]	; (8012d2c <__assert_func+0x38>)
 8012d1a:	461c      	mov	r4, r3
 8012d1c:	e7f3      	b.n	8012d06 <__assert_func+0x12>
 8012d1e:	bf00      	nop
 8012d20:	2000093c 	.word	0x2000093c
 8012d24:	08068b4d 	.word	0x08068b4d
 8012d28:	08068b5a 	.word	0x08068b5a
 8012d2c:	08068b88 	.word	0x08068b88

08012d30 <fiprintf>:
 8012d30:	b40e      	push	{r1, r2, r3}
 8012d32:	b503      	push	{r0, r1, lr}
 8012d34:	4601      	mov	r1, r0
 8012d36:	ab03      	add	r3, sp, #12
 8012d38:	4805      	ldr	r0, [pc, #20]	; (8012d50 <fiprintf+0x20>)
 8012d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d3e:	6800      	ldr	r0, [r0, #0]
 8012d40:	9301      	str	r3, [sp, #4]
 8012d42:	f000 f867 	bl	8012e14 <_vfiprintf_r>
 8012d46:	b002      	add	sp, #8
 8012d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d4c:	b003      	add	sp, #12
 8012d4e:	4770      	bx	lr
 8012d50:	2000093c 	.word	0x2000093c

08012d54 <__retarget_lock_init_recursive>:
 8012d54:	4770      	bx	lr

08012d56 <__retarget_lock_acquire_recursive>:
 8012d56:	4770      	bx	lr

08012d58 <__retarget_lock_release_recursive>:
 8012d58:	4770      	bx	lr

08012d5a <__ascii_mbtowc>:
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	b901      	cbnz	r1, 8012d60 <__ascii_mbtowc+0x6>
 8012d5e:	a901      	add	r1, sp, #4
 8012d60:	b142      	cbz	r2, 8012d74 <__ascii_mbtowc+0x1a>
 8012d62:	b14b      	cbz	r3, 8012d78 <__ascii_mbtowc+0x1e>
 8012d64:	7813      	ldrb	r3, [r2, #0]
 8012d66:	600b      	str	r3, [r1, #0]
 8012d68:	7812      	ldrb	r2, [r2, #0]
 8012d6a:	1e10      	subs	r0, r2, #0
 8012d6c:	bf18      	it	ne
 8012d6e:	2001      	movne	r0, #1
 8012d70:	b002      	add	sp, #8
 8012d72:	4770      	bx	lr
 8012d74:	4610      	mov	r0, r2
 8012d76:	e7fb      	b.n	8012d70 <__ascii_mbtowc+0x16>
 8012d78:	f06f 0001 	mvn.w	r0, #1
 8012d7c:	e7f8      	b.n	8012d70 <__ascii_mbtowc+0x16>

08012d7e <memmove>:
 8012d7e:	4288      	cmp	r0, r1
 8012d80:	b510      	push	{r4, lr}
 8012d82:	eb01 0402 	add.w	r4, r1, r2
 8012d86:	d902      	bls.n	8012d8e <memmove+0x10>
 8012d88:	4284      	cmp	r4, r0
 8012d8a:	4623      	mov	r3, r4
 8012d8c:	d807      	bhi.n	8012d9e <memmove+0x20>
 8012d8e:	1e43      	subs	r3, r0, #1
 8012d90:	42a1      	cmp	r1, r4
 8012d92:	d008      	beq.n	8012da6 <memmove+0x28>
 8012d94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d9c:	e7f8      	b.n	8012d90 <memmove+0x12>
 8012d9e:	4402      	add	r2, r0
 8012da0:	4601      	mov	r1, r0
 8012da2:	428a      	cmp	r2, r1
 8012da4:	d100      	bne.n	8012da8 <memmove+0x2a>
 8012da6:	bd10      	pop	{r4, pc}
 8012da8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012dac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012db0:	e7f7      	b.n	8012da2 <memmove+0x24>

08012db2 <_malloc_usable_size_r>:
 8012db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012db6:	1f18      	subs	r0, r3, #4
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	bfbc      	itt	lt
 8012dbc:	580b      	ldrlt	r3, [r1, r0]
 8012dbe:	18c0      	addlt	r0, r0, r3
 8012dc0:	4770      	bx	lr

08012dc2 <__sfputc_r>:
 8012dc2:	6893      	ldr	r3, [r2, #8]
 8012dc4:	3b01      	subs	r3, #1
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	b410      	push	{r4}
 8012dca:	6093      	str	r3, [r2, #8]
 8012dcc:	da08      	bge.n	8012de0 <__sfputc_r+0x1e>
 8012dce:	6994      	ldr	r4, [r2, #24]
 8012dd0:	42a3      	cmp	r3, r4
 8012dd2:	db01      	blt.n	8012dd8 <__sfputc_r+0x16>
 8012dd4:	290a      	cmp	r1, #10
 8012dd6:	d103      	bne.n	8012de0 <__sfputc_r+0x1e>
 8012dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ddc:	f000 b94a 	b.w	8013074 <__swbuf_r>
 8012de0:	6813      	ldr	r3, [r2, #0]
 8012de2:	1c58      	adds	r0, r3, #1
 8012de4:	6010      	str	r0, [r2, #0]
 8012de6:	7019      	strb	r1, [r3, #0]
 8012de8:	4608      	mov	r0, r1
 8012dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dee:	4770      	bx	lr

08012df0 <__sfputs_r>:
 8012df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df2:	4606      	mov	r6, r0
 8012df4:	460f      	mov	r7, r1
 8012df6:	4614      	mov	r4, r2
 8012df8:	18d5      	adds	r5, r2, r3
 8012dfa:	42ac      	cmp	r4, r5
 8012dfc:	d101      	bne.n	8012e02 <__sfputs_r+0x12>
 8012dfe:	2000      	movs	r0, #0
 8012e00:	e007      	b.n	8012e12 <__sfputs_r+0x22>
 8012e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e06:	463a      	mov	r2, r7
 8012e08:	4630      	mov	r0, r6
 8012e0a:	f7ff ffda 	bl	8012dc2 <__sfputc_r>
 8012e0e:	1c43      	adds	r3, r0, #1
 8012e10:	d1f3      	bne.n	8012dfa <__sfputs_r+0xa>
 8012e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e14 <_vfiprintf_r>:
 8012e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e18:	460d      	mov	r5, r1
 8012e1a:	b09d      	sub	sp, #116	; 0x74
 8012e1c:	4614      	mov	r4, r2
 8012e1e:	4698      	mov	r8, r3
 8012e20:	4606      	mov	r6, r0
 8012e22:	b118      	cbz	r0, 8012e2c <_vfiprintf_r+0x18>
 8012e24:	6983      	ldr	r3, [r0, #24]
 8012e26:	b90b      	cbnz	r3, 8012e2c <_vfiprintf_r+0x18>
 8012e28:	f000 fb14 	bl	8013454 <__sinit>
 8012e2c:	4b89      	ldr	r3, [pc, #548]	; (8013054 <_vfiprintf_r+0x240>)
 8012e2e:	429d      	cmp	r5, r3
 8012e30:	d11b      	bne.n	8012e6a <_vfiprintf_r+0x56>
 8012e32:	6875      	ldr	r5, [r6, #4]
 8012e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e36:	07d9      	lsls	r1, r3, #31
 8012e38:	d405      	bmi.n	8012e46 <_vfiprintf_r+0x32>
 8012e3a:	89ab      	ldrh	r3, [r5, #12]
 8012e3c:	059a      	lsls	r2, r3, #22
 8012e3e:	d402      	bmi.n	8012e46 <_vfiprintf_r+0x32>
 8012e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e42:	f7ff ff88 	bl	8012d56 <__retarget_lock_acquire_recursive>
 8012e46:	89ab      	ldrh	r3, [r5, #12]
 8012e48:	071b      	lsls	r3, r3, #28
 8012e4a:	d501      	bpl.n	8012e50 <_vfiprintf_r+0x3c>
 8012e4c:	692b      	ldr	r3, [r5, #16]
 8012e4e:	b9eb      	cbnz	r3, 8012e8c <_vfiprintf_r+0x78>
 8012e50:	4629      	mov	r1, r5
 8012e52:	4630      	mov	r0, r6
 8012e54:	f000 f96e 	bl	8013134 <__swsetup_r>
 8012e58:	b1c0      	cbz	r0, 8012e8c <_vfiprintf_r+0x78>
 8012e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e5c:	07dc      	lsls	r4, r3, #31
 8012e5e:	d50e      	bpl.n	8012e7e <_vfiprintf_r+0x6a>
 8012e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e64:	b01d      	add	sp, #116	; 0x74
 8012e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6a:	4b7b      	ldr	r3, [pc, #492]	; (8013058 <_vfiprintf_r+0x244>)
 8012e6c:	429d      	cmp	r5, r3
 8012e6e:	d101      	bne.n	8012e74 <_vfiprintf_r+0x60>
 8012e70:	68b5      	ldr	r5, [r6, #8]
 8012e72:	e7df      	b.n	8012e34 <_vfiprintf_r+0x20>
 8012e74:	4b79      	ldr	r3, [pc, #484]	; (801305c <_vfiprintf_r+0x248>)
 8012e76:	429d      	cmp	r5, r3
 8012e78:	bf08      	it	eq
 8012e7a:	68f5      	ldreq	r5, [r6, #12]
 8012e7c:	e7da      	b.n	8012e34 <_vfiprintf_r+0x20>
 8012e7e:	89ab      	ldrh	r3, [r5, #12]
 8012e80:	0598      	lsls	r0, r3, #22
 8012e82:	d4ed      	bmi.n	8012e60 <_vfiprintf_r+0x4c>
 8012e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e86:	f7ff ff67 	bl	8012d58 <__retarget_lock_release_recursive>
 8012e8a:	e7e9      	b.n	8012e60 <_vfiprintf_r+0x4c>
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e90:	2320      	movs	r3, #32
 8012e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e9a:	2330      	movs	r3, #48	; 0x30
 8012e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013060 <_vfiprintf_r+0x24c>
 8012ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ea4:	f04f 0901 	mov.w	r9, #1
 8012ea8:	4623      	mov	r3, r4
 8012eaa:	469a      	mov	sl, r3
 8012eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eb0:	b10a      	cbz	r2, 8012eb6 <_vfiprintf_r+0xa2>
 8012eb2:	2a25      	cmp	r2, #37	; 0x25
 8012eb4:	d1f9      	bne.n	8012eaa <_vfiprintf_r+0x96>
 8012eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8012eba:	d00b      	beq.n	8012ed4 <_vfiprintf_r+0xc0>
 8012ebc:	465b      	mov	r3, fp
 8012ebe:	4622      	mov	r2, r4
 8012ec0:	4629      	mov	r1, r5
 8012ec2:	4630      	mov	r0, r6
 8012ec4:	f7ff ff94 	bl	8012df0 <__sfputs_r>
 8012ec8:	3001      	adds	r0, #1
 8012eca:	f000 80aa 	beq.w	8013022 <_vfiprintf_r+0x20e>
 8012ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ed0:	445a      	add	r2, fp
 8012ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8012ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	f000 80a2 	beq.w	8013022 <_vfiprintf_r+0x20e>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ee8:	f10a 0a01 	add.w	sl, sl, #1
 8012eec:	9304      	str	r3, [sp, #16]
 8012eee:	9307      	str	r3, [sp, #28]
 8012ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8012ef6:	4654      	mov	r4, sl
 8012ef8:	2205      	movs	r2, #5
 8012efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012efe:	4858      	ldr	r0, [pc, #352]	; (8013060 <_vfiprintf_r+0x24c>)
 8012f00:	f7ed f986 	bl	8000210 <memchr>
 8012f04:	9a04      	ldr	r2, [sp, #16]
 8012f06:	b9d8      	cbnz	r0, 8012f40 <_vfiprintf_r+0x12c>
 8012f08:	06d1      	lsls	r1, r2, #27
 8012f0a:	bf44      	itt	mi
 8012f0c:	2320      	movmi	r3, #32
 8012f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f12:	0713      	lsls	r3, r2, #28
 8012f14:	bf44      	itt	mi
 8012f16:	232b      	movmi	r3, #43	; 0x2b
 8012f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8012f20:	2b2a      	cmp	r3, #42	; 0x2a
 8012f22:	d015      	beq.n	8012f50 <_vfiprintf_r+0x13c>
 8012f24:	9a07      	ldr	r2, [sp, #28]
 8012f26:	4654      	mov	r4, sl
 8012f28:	2000      	movs	r0, #0
 8012f2a:	f04f 0c0a 	mov.w	ip, #10
 8012f2e:	4621      	mov	r1, r4
 8012f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f34:	3b30      	subs	r3, #48	; 0x30
 8012f36:	2b09      	cmp	r3, #9
 8012f38:	d94e      	bls.n	8012fd8 <_vfiprintf_r+0x1c4>
 8012f3a:	b1b0      	cbz	r0, 8012f6a <_vfiprintf_r+0x156>
 8012f3c:	9207      	str	r2, [sp, #28]
 8012f3e:	e014      	b.n	8012f6a <_vfiprintf_r+0x156>
 8012f40:	eba0 0308 	sub.w	r3, r0, r8
 8012f44:	fa09 f303 	lsl.w	r3, r9, r3
 8012f48:	4313      	orrs	r3, r2
 8012f4a:	9304      	str	r3, [sp, #16]
 8012f4c:	46a2      	mov	sl, r4
 8012f4e:	e7d2      	b.n	8012ef6 <_vfiprintf_r+0xe2>
 8012f50:	9b03      	ldr	r3, [sp, #12]
 8012f52:	1d19      	adds	r1, r3, #4
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	9103      	str	r1, [sp, #12]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	bfbb      	ittet	lt
 8012f5c:	425b      	neglt	r3, r3
 8012f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8012f62:	9307      	strge	r3, [sp, #28]
 8012f64:	9307      	strlt	r3, [sp, #28]
 8012f66:	bfb8      	it	lt
 8012f68:	9204      	strlt	r2, [sp, #16]
 8012f6a:	7823      	ldrb	r3, [r4, #0]
 8012f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8012f6e:	d10c      	bne.n	8012f8a <_vfiprintf_r+0x176>
 8012f70:	7863      	ldrb	r3, [r4, #1]
 8012f72:	2b2a      	cmp	r3, #42	; 0x2a
 8012f74:	d135      	bne.n	8012fe2 <_vfiprintf_r+0x1ce>
 8012f76:	9b03      	ldr	r3, [sp, #12]
 8012f78:	1d1a      	adds	r2, r3, #4
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	9203      	str	r2, [sp, #12]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	bfb8      	it	lt
 8012f82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012f86:	3402      	adds	r4, #2
 8012f88:	9305      	str	r3, [sp, #20]
 8012f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013070 <_vfiprintf_r+0x25c>
 8012f8e:	7821      	ldrb	r1, [r4, #0]
 8012f90:	2203      	movs	r2, #3
 8012f92:	4650      	mov	r0, sl
 8012f94:	f7ed f93c 	bl	8000210 <memchr>
 8012f98:	b140      	cbz	r0, 8012fac <_vfiprintf_r+0x198>
 8012f9a:	2340      	movs	r3, #64	; 0x40
 8012f9c:	eba0 000a 	sub.w	r0, r0, sl
 8012fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8012fa4:	9b04      	ldr	r3, [sp, #16]
 8012fa6:	4303      	orrs	r3, r0
 8012fa8:	3401      	adds	r4, #1
 8012faa:	9304      	str	r3, [sp, #16]
 8012fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fb0:	482c      	ldr	r0, [pc, #176]	; (8013064 <_vfiprintf_r+0x250>)
 8012fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012fb6:	2206      	movs	r2, #6
 8012fb8:	f7ed f92a 	bl	8000210 <memchr>
 8012fbc:	2800      	cmp	r0, #0
 8012fbe:	d03f      	beq.n	8013040 <_vfiprintf_r+0x22c>
 8012fc0:	4b29      	ldr	r3, [pc, #164]	; (8013068 <_vfiprintf_r+0x254>)
 8012fc2:	bb1b      	cbnz	r3, 801300c <_vfiprintf_r+0x1f8>
 8012fc4:	9b03      	ldr	r3, [sp, #12]
 8012fc6:	3307      	adds	r3, #7
 8012fc8:	f023 0307 	bic.w	r3, r3, #7
 8012fcc:	3308      	adds	r3, #8
 8012fce:	9303      	str	r3, [sp, #12]
 8012fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fd2:	443b      	add	r3, r7
 8012fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8012fd6:	e767      	b.n	8012ea8 <_vfiprintf_r+0x94>
 8012fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fdc:	460c      	mov	r4, r1
 8012fde:	2001      	movs	r0, #1
 8012fe0:	e7a5      	b.n	8012f2e <_vfiprintf_r+0x11a>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	3401      	adds	r4, #1
 8012fe6:	9305      	str	r3, [sp, #20]
 8012fe8:	4619      	mov	r1, r3
 8012fea:	f04f 0c0a 	mov.w	ip, #10
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ff4:	3a30      	subs	r2, #48	; 0x30
 8012ff6:	2a09      	cmp	r2, #9
 8012ff8:	d903      	bls.n	8013002 <_vfiprintf_r+0x1ee>
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d0c5      	beq.n	8012f8a <_vfiprintf_r+0x176>
 8012ffe:	9105      	str	r1, [sp, #20]
 8013000:	e7c3      	b.n	8012f8a <_vfiprintf_r+0x176>
 8013002:	fb0c 2101 	mla	r1, ip, r1, r2
 8013006:	4604      	mov	r4, r0
 8013008:	2301      	movs	r3, #1
 801300a:	e7f0      	b.n	8012fee <_vfiprintf_r+0x1da>
 801300c:	ab03      	add	r3, sp, #12
 801300e:	9300      	str	r3, [sp, #0]
 8013010:	462a      	mov	r2, r5
 8013012:	4b16      	ldr	r3, [pc, #88]	; (801306c <_vfiprintf_r+0x258>)
 8013014:	a904      	add	r1, sp, #16
 8013016:	4630      	mov	r0, r6
 8013018:	f7fd feb0 	bl	8010d7c <_printf_float>
 801301c:	4607      	mov	r7, r0
 801301e:	1c78      	adds	r0, r7, #1
 8013020:	d1d6      	bne.n	8012fd0 <_vfiprintf_r+0x1bc>
 8013022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013024:	07d9      	lsls	r1, r3, #31
 8013026:	d405      	bmi.n	8013034 <_vfiprintf_r+0x220>
 8013028:	89ab      	ldrh	r3, [r5, #12]
 801302a:	059a      	lsls	r2, r3, #22
 801302c:	d402      	bmi.n	8013034 <_vfiprintf_r+0x220>
 801302e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013030:	f7ff fe92 	bl	8012d58 <__retarget_lock_release_recursive>
 8013034:	89ab      	ldrh	r3, [r5, #12]
 8013036:	065b      	lsls	r3, r3, #25
 8013038:	f53f af12 	bmi.w	8012e60 <_vfiprintf_r+0x4c>
 801303c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801303e:	e711      	b.n	8012e64 <_vfiprintf_r+0x50>
 8013040:	ab03      	add	r3, sp, #12
 8013042:	9300      	str	r3, [sp, #0]
 8013044:	462a      	mov	r2, r5
 8013046:	4b09      	ldr	r3, [pc, #36]	; (801306c <_vfiprintf_r+0x258>)
 8013048:	a904      	add	r1, sp, #16
 801304a:	4630      	mov	r0, r6
 801304c:	f7fe f93a 	bl	80112c4 <_printf_i>
 8013050:	e7e4      	b.n	801301c <_vfiprintf_r+0x208>
 8013052:	bf00      	nop
 8013054:	08068cb4 	.word	0x08068cb4
 8013058:	08068cd4 	.word	0x08068cd4
 801305c:	08068c94 	.word	0x08068c94
 8013060:	08068b3c 	.word	0x08068b3c
 8013064:	08068b46 	.word	0x08068b46
 8013068:	08010d7d 	.word	0x08010d7d
 801306c:	08012df1 	.word	0x08012df1
 8013070:	08068b42 	.word	0x08068b42

08013074 <__swbuf_r>:
 8013074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013076:	460e      	mov	r6, r1
 8013078:	4614      	mov	r4, r2
 801307a:	4605      	mov	r5, r0
 801307c:	b118      	cbz	r0, 8013086 <__swbuf_r+0x12>
 801307e:	6983      	ldr	r3, [r0, #24]
 8013080:	b90b      	cbnz	r3, 8013086 <__swbuf_r+0x12>
 8013082:	f000 f9e7 	bl	8013454 <__sinit>
 8013086:	4b21      	ldr	r3, [pc, #132]	; (801310c <__swbuf_r+0x98>)
 8013088:	429c      	cmp	r4, r3
 801308a:	d12b      	bne.n	80130e4 <__swbuf_r+0x70>
 801308c:	686c      	ldr	r4, [r5, #4]
 801308e:	69a3      	ldr	r3, [r4, #24]
 8013090:	60a3      	str	r3, [r4, #8]
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	071a      	lsls	r2, r3, #28
 8013096:	d52f      	bpl.n	80130f8 <__swbuf_r+0x84>
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	b36b      	cbz	r3, 80130f8 <__swbuf_r+0x84>
 801309c:	6923      	ldr	r3, [r4, #16]
 801309e:	6820      	ldr	r0, [r4, #0]
 80130a0:	1ac0      	subs	r0, r0, r3
 80130a2:	6963      	ldr	r3, [r4, #20]
 80130a4:	b2f6      	uxtb	r6, r6
 80130a6:	4283      	cmp	r3, r0
 80130a8:	4637      	mov	r7, r6
 80130aa:	dc04      	bgt.n	80130b6 <__swbuf_r+0x42>
 80130ac:	4621      	mov	r1, r4
 80130ae:	4628      	mov	r0, r5
 80130b0:	f000 f93c 	bl	801332c <_fflush_r>
 80130b4:	bb30      	cbnz	r0, 8013104 <__swbuf_r+0x90>
 80130b6:	68a3      	ldr	r3, [r4, #8]
 80130b8:	3b01      	subs	r3, #1
 80130ba:	60a3      	str	r3, [r4, #8]
 80130bc:	6823      	ldr	r3, [r4, #0]
 80130be:	1c5a      	adds	r2, r3, #1
 80130c0:	6022      	str	r2, [r4, #0]
 80130c2:	701e      	strb	r6, [r3, #0]
 80130c4:	6963      	ldr	r3, [r4, #20]
 80130c6:	3001      	adds	r0, #1
 80130c8:	4283      	cmp	r3, r0
 80130ca:	d004      	beq.n	80130d6 <__swbuf_r+0x62>
 80130cc:	89a3      	ldrh	r3, [r4, #12]
 80130ce:	07db      	lsls	r3, r3, #31
 80130d0:	d506      	bpl.n	80130e0 <__swbuf_r+0x6c>
 80130d2:	2e0a      	cmp	r6, #10
 80130d4:	d104      	bne.n	80130e0 <__swbuf_r+0x6c>
 80130d6:	4621      	mov	r1, r4
 80130d8:	4628      	mov	r0, r5
 80130da:	f000 f927 	bl	801332c <_fflush_r>
 80130de:	b988      	cbnz	r0, 8013104 <__swbuf_r+0x90>
 80130e0:	4638      	mov	r0, r7
 80130e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130e4:	4b0a      	ldr	r3, [pc, #40]	; (8013110 <__swbuf_r+0x9c>)
 80130e6:	429c      	cmp	r4, r3
 80130e8:	d101      	bne.n	80130ee <__swbuf_r+0x7a>
 80130ea:	68ac      	ldr	r4, [r5, #8]
 80130ec:	e7cf      	b.n	801308e <__swbuf_r+0x1a>
 80130ee:	4b09      	ldr	r3, [pc, #36]	; (8013114 <__swbuf_r+0xa0>)
 80130f0:	429c      	cmp	r4, r3
 80130f2:	bf08      	it	eq
 80130f4:	68ec      	ldreq	r4, [r5, #12]
 80130f6:	e7ca      	b.n	801308e <__swbuf_r+0x1a>
 80130f8:	4621      	mov	r1, r4
 80130fa:	4628      	mov	r0, r5
 80130fc:	f000 f81a 	bl	8013134 <__swsetup_r>
 8013100:	2800      	cmp	r0, #0
 8013102:	d0cb      	beq.n	801309c <__swbuf_r+0x28>
 8013104:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013108:	e7ea      	b.n	80130e0 <__swbuf_r+0x6c>
 801310a:	bf00      	nop
 801310c:	08068cb4 	.word	0x08068cb4
 8013110:	08068cd4 	.word	0x08068cd4
 8013114:	08068c94 	.word	0x08068c94

08013118 <__ascii_wctomb>:
 8013118:	b149      	cbz	r1, 801312e <__ascii_wctomb+0x16>
 801311a:	2aff      	cmp	r2, #255	; 0xff
 801311c:	bf85      	ittet	hi
 801311e:	238a      	movhi	r3, #138	; 0x8a
 8013120:	6003      	strhi	r3, [r0, #0]
 8013122:	700a      	strbls	r2, [r1, #0]
 8013124:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013128:	bf98      	it	ls
 801312a:	2001      	movls	r0, #1
 801312c:	4770      	bx	lr
 801312e:	4608      	mov	r0, r1
 8013130:	4770      	bx	lr
	...

08013134 <__swsetup_r>:
 8013134:	4b32      	ldr	r3, [pc, #200]	; (8013200 <__swsetup_r+0xcc>)
 8013136:	b570      	push	{r4, r5, r6, lr}
 8013138:	681d      	ldr	r5, [r3, #0]
 801313a:	4606      	mov	r6, r0
 801313c:	460c      	mov	r4, r1
 801313e:	b125      	cbz	r5, 801314a <__swsetup_r+0x16>
 8013140:	69ab      	ldr	r3, [r5, #24]
 8013142:	b913      	cbnz	r3, 801314a <__swsetup_r+0x16>
 8013144:	4628      	mov	r0, r5
 8013146:	f000 f985 	bl	8013454 <__sinit>
 801314a:	4b2e      	ldr	r3, [pc, #184]	; (8013204 <__swsetup_r+0xd0>)
 801314c:	429c      	cmp	r4, r3
 801314e:	d10f      	bne.n	8013170 <__swsetup_r+0x3c>
 8013150:	686c      	ldr	r4, [r5, #4]
 8013152:	89a3      	ldrh	r3, [r4, #12]
 8013154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013158:	0719      	lsls	r1, r3, #28
 801315a:	d42c      	bmi.n	80131b6 <__swsetup_r+0x82>
 801315c:	06dd      	lsls	r5, r3, #27
 801315e:	d411      	bmi.n	8013184 <__swsetup_r+0x50>
 8013160:	2309      	movs	r3, #9
 8013162:	6033      	str	r3, [r6, #0]
 8013164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013168:	81a3      	strh	r3, [r4, #12]
 801316a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801316e:	e03e      	b.n	80131ee <__swsetup_r+0xba>
 8013170:	4b25      	ldr	r3, [pc, #148]	; (8013208 <__swsetup_r+0xd4>)
 8013172:	429c      	cmp	r4, r3
 8013174:	d101      	bne.n	801317a <__swsetup_r+0x46>
 8013176:	68ac      	ldr	r4, [r5, #8]
 8013178:	e7eb      	b.n	8013152 <__swsetup_r+0x1e>
 801317a:	4b24      	ldr	r3, [pc, #144]	; (801320c <__swsetup_r+0xd8>)
 801317c:	429c      	cmp	r4, r3
 801317e:	bf08      	it	eq
 8013180:	68ec      	ldreq	r4, [r5, #12]
 8013182:	e7e6      	b.n	8013152 <__swsetup_r+0x1e>
 8013184:	0758      	lsls	r0, r3, #29
 8013186:	d512      	bpl.n	80131ae <__swsetup_r+0x7a>
 8013188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801318a:	b141      	cbz	r1, 801319e <__swsetup_r+0x6a>
 801318c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013190:	4299      	cmp	r1, r3
 8013192:	d002      	beq.n	801319a <__swsetup_r+0x66>
 8013194:	4630      	mov	r0, r6
 8013196:	f7fd fc71 	bl	8010a7c <_free_r>
 801319a:	2300      	movs	r3, #0
 801319c:	6363      	str	r3, [r4, #52]	; 0x34
 801319e:	89a3      	ldrh	r3, [r4, #12]
 80131a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80131a4:	81a3      	strh	r3, [r4, #12]
 80131a6:	2300      	movs	r3, #0
 80131a8:	6063      	str	r3, [r4, #4]
 80131aa:	6923      	ldr	r3, [r4, #16]
 80131ac:	6023      	str	r3, [r4, #0]
 80131ae:	89a3      	ldrh	r3, [r4, #12]
 80131b0:	f043 0308 	orr.w	r3, r3, #8
 80131b4:	81a3      	strh	r3, [r4, #12]
 80131b6:	6923      	ldr	r3, [r4, #16]
 80131b8:	b94b      	cbnz	r3, 80131ce <__swsetup_r+0x9a>
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80131c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131c4:	d003      	beq.n	80131ce <__swsetup_r+0x9a>
 80131c6:	4621      	mov	r1, r4
 80131c8:	4630      	mov	r0, r6
 80131ca:	f000 fa05 	bl	80135d8 <__smakebuf_r>
 80131ce:	89a0      	ldrh	r0, [r4, #12]
 80131d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131d4:	f010 0301 	ands.w	r3, r0, #1
 80131d8:	d00a      	beq.n	80131f0 <__swsetup_r+0xbc>
 80131da:	2300      	movs	r3, #0
 80131dc:	60a3      	str	r3, [r4, #8]
 80131de:	6963      	ldr	r3, [r4, #20]
 80131e0:	425b      	negs	r3, r3
 80131e2:	61a3      	str	r3, [r4, #24]
 80131e4:	6923      	ldr	r3, [r4, #16]
 80131e6:	b943      	cbnz	r3, 80131fa <__swsetup_r+0xc6>
 80131e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80131ec:	d1ba      	bne.n	8013164 <__swsetup_r+0x30>
 80131ee:	bd70      	pop	{r4, r5, r6, pc}
 80131f0:	0781      	lsls	r1, r0, #30
 80131f2:	bf58      	it	pl
 80131f4:	6963      	ldrpl	r3, [r4, #20]
 80131f6:	60a3      	str	r3, [r4, #8]
 80131f8:	e7f4      	b.n	80131e4 <__swsetup_r+0xb0>
 80131fa:	2000      	movs	r0, #0
 80131fc:	e7f7      	b.n	80131ee <__swsetup_r+0xba>
 80131fe:	bf00      	nop
 8013200:	2000093c 	.word	0x2000093c
 8013204:	08068cb4 	.word	0x08068cb4
 8013208:	08068cd4 	.word	0x08068cd4
 801320c:	08068c94 	.word	0x08068c94

08013210 <abort>:
 8013210:	b508      	push	{r3, lr}
 8013212:	2006      	movs	r0, #6
 8013214:	f000 fa48 	bl	80136a8 <raise>
 8013218:	2001      	movs	r0, #1
 801321a:	f7ee f82d 	bl	8001278 <_exit>
	...

08013220 <__sflush_r>:
 8013220:	898a      	ldrh	r2, [r1, #12]
 8013222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013226:	4605      	mov	r5, r0
 8013228:	0710      	lsls	r0, r2, #28
 801322a:	460c      	mov	r4, r1
 801322c:	d458      	bmi.n	80132e0 <__sflush_r+0xc0>
 801322e:	684b      	ldr	r3, [r1, #4]
 8013230:	2b00      	cmp	r3, #0
 8013232:	dc05      	bgt.n	8013240 <__sflush_r+0x20>
 8013234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013236:	2b00      	cmp	r3, #0
 8013238:	dc02      	bgt.n	8013240 <__sflush_r+0x20>
 801323a:	2000      	movs	r0, #0
 801323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013242:	2e00      	cmp	r6, #0
 8013244:	d0f9      	beq.n	801323a <__sflush_r+0x1a>
 8013246:	2300      	movs	r3, #0
 8013248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801324c:	682f      	ldr	r7, [r5, #0]
 801324e:	602b      	str	r3, [r5, #0]
 8013250:	d032      	beq.n	80132b8 <__sflush_r+0x98>
 8013252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013254:	89a3      	ldrh	r3, [r4, #12]
 8013256:	075a      	lsls	r2, r3, #29
 8013258:	d505      	bpl.n	8013266 <__sflush_r+0x46>
 801325a:	6863      	ldr	r3, [r4, #4]
 801325c:	1ac0      	subs	r0, r0, r3
 801325e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013260:	b10b      	cbz	r3, 8013266 <__sflush_r+0x46>
 8013262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013264:	1ac0      	subs	r0, r0, r3
 8013266:	2300      	movs	r3, #0
 8013268:	4602      	mov	r2, r0
 801326a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801326c:	6a21      	ldr	r1, [r4, #32]
 801326e:	4628      	mov	r0, r5
 8013270:	47b0      	blx	r6
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	89a3      	ldrh	r3, [r4, #12]
 8013276:	d106      	bne.n	8013286 <__sflush_r+0x66>
 8013278:	6829      	ldr	r1, [r5, #0]
 801327a:	291d      	cmp	r1, #29
 801327c:	d82c      	bhi.n	80132d8 <__sflush_r+0xb8>
 801327e:	4a2a      	ldr	r2, [pc, #168]	; (8013328 <__sflush_r+0x108>)
 8013280:	40ca      	lsrs	r2, r1
 8013282:	07d6      	lsls	r6, r2, #31
 8013284:	d528      	bpl.n	80132d8 <__sflush_r+0xb8>
 8013286:	2200      	movs	r2, #0
 8013288:	6062      	str	r2, [r4, #4]
 801328a:	04d9      	lsls	r1, r3, #19
 801328c:	6922      	ldr	r2, [r4, #16]
 801328e:	6022      	str	r2, [r4, #0]
 8013290:	d504      	bpl.n	801329c <__sflush_r+0x7c>
 8013292:	1c42      	adds	r2, r0, #1
 8013294:	d101      	bne.n	801329a <__sflush_r+0x7a>
 8013296:	682b      	ldr	r3, [r5, #0]
 8013298:	b903      	cbnz	r3, 801329c <__sflush_r+0x7c>
 801329a:	6560      	str	r0, [r4, #84]	; 0x54
 801329c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801329e:	602f      	str	r7, [r5, #0]
 80132a0:	2900      	cmp	r1, #0
 80132a2:	d0ca      	beq.n	801323a <__sflush_r+0x1a>
 80132a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132a8:	4299      	cmp	r1, r3
 80132aa:	d002      	beq.n	80132b2 <__sflush_r+0x92>
 80132ac:	4628      	mov	r0, r5
 80132ae:	f7fd fbe5 	bl	8010a7c <_free_r>
 80132b2:	2000      	movs	r0, #0
 80132b4:	6360      	str	r0, [r4, #52]	; 0x34
 80132b6:	e7c1      	b.n	801323c <__sflush_r+0x1c>
 80132b8:	6a21      	ldr	r1, [r4, #32]
 80132ba:	2301      	movs	r3, #1
 80132bc:	4628      	mov	r0, r5
 80132be:	47b0      	blx	r6
 80132c0:	1c41      	adds	r1, r0, #1
 80132c2:	d1c7      	bne.n	8013254 <__sflush_r+0x34>
 80132c4:	682b      	ldr	r3, [r5, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d0c4      	beq.n	8013254 <__sflush_r+0x34>
 80132ca:	2b1d      	cmp	r3, #29
 80132cc:	d001      	beq.n	80132d2 <__sflush_r+0xb2>
 80132ce:	2b16      	cmp	r3, #22
 80132d0:	d101      	bne.n	80132d6 <__sflush_r+0xb6>
 80132d2:	602f      	str	r7, [r5, #0]
 80132d4:	e7b1      	b.n	801323a <__sflush_r+0x1a>
 80132d6:	89a3      	ldrh	r3, [r4, #12]
 80132d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132dc:	81a3      	strh	r3, [r4, #12]
 80132de:	e7ad      	b.n	801323c <__sflush_r+0x1c>
 80132e0:	690f      	ldr	r7, [r1, #16]
 80132e2:	2f00      	cmp	r7, #0
 80132e4:	d0a9      	beq.n	801323a <__sflush_r+0x1a>
 80132e6:	0793      	lsls	r3, r2, #30
 80132e8:	680e      	ldr	r6, [r1, #0]
 80132ea:	bf08      	it	eq
 80132ec:	694b      	ldreq	r3, [r1, #20]
 80132ee:	600f      	str	r7, [r1, #0]
 80132f0:	bf18      	it	ne
 80132f2:	2300      	movne	r3, #0
 80132f4:	eba6 0807 	sub.w	r8, r6, r7
 80132f8:	608b      	str	r3, [r1, #8]
 80132fa:	f1b8 0f00 	cmp.w	r8, #0
 80132fe:	dd9c      	ble.n	801323a <__sflush_r+0x1a>
 8013300:	6a21      	ldr	r1, [r4, #32]
 8013302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013304:	4643      	mov	r3, r8
 8013306:	463a      	mov	r2, r7
 8013308:	4628      	mov	r0, r5
 801330a:	47b0      	blx	r6
 801330c:	2800      	cmp	r0, #0
 801330e:	dc06      	bgt.n	801331e <__sflush_r+0xfe>
 8013310:	89a3      	ldrh	r3, [r4, #12]
 8013312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013316:	81a3      	strh	r3, [r4, #12]
 8013318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801331c:	e78e      	b.n	801323c <__sflush_r+0x1c>
 801331e:	4407      	add	r7, r0
 8013320:	eba8 0800 	sub.w	r8, r8, r0
 8013324:	e7e9      	b.n	80132fa <__sflush_r+0xda>
 8013326:	bf00      	nop
 8013328:	20400001 	.word	0x20400001

0801332c <_fflush_r>:
 801332c:	b538      	push	{r3, r4, r5, lr}
 801332e:	690b      	ldr	r3, [r1, #16]
 8013330:	4605      	mov	r5, r0
 8013332:	460c      	mov	r4, r1
 8013334:	b913      	cbnz	r3, 801333c <_fflush_r+0x10>
 8013336:	2500      	movs	r5, #0
 8013338:	4628      	mov	r0, r5
 801333a:	bd38      	pop	{r3, r4, r5, pc}
 801333c:	b118      	cbz	r0, 8013346 <_fflush_r+0x1a>
 801333e:	6983      	ldr	r3, [r0, #24]
 8013340:	b90b      	cbnz	r3, 8013346 <_fflush_r+0x1a>
 8013342:	f000 f887 	bl	8013454 <__sinit>
 8013346:	4b14      	ldr	r3, [pc, #80]	; (8013398 <_fflush_r+0x6c>)
 8013348:	429c      	cmp	r4, r3
 801334a:	d11b      	bne.n	8013384 <_fflush_r+0x58>
 801334c:	686c      	ldr	r4, [r5, #4]
 801334e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d0ef      	beq.n	8013336 <_fflush_r+0xa>
 8013356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013358:	07d0      	lsls	r0, r2, #31
 801335a:	d404      	bmi.n	8013366 <_fflush_r+0x3a>
 801335c:	0599      	lsls	r1, r3, #22
 801335e:	d402      	bmi.n	8013366 <_fflush_r+0x3a>
 8013360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013362:	f7ff fcf8 	bl	8012d56 <__retarget_lock_acquire_recursive>
 8013366:	4628      	mov	r0, r5
 8013368:	4621      	mov	r1, r4
 801336a:	f7ff ff59 	bl	8013220 <__sflush_r>
 801336e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013370:	07da      	lsls	r2, r3, #31
 8013372:	4605      	mov	r5, r0
 8013374:	d4e0      	bmi.n	8013338 <_fflush_r+0xc>
 8013376:	89a3      	ldrh	r3, [r4, #12]
 8013378:	059b      	lsls	r3, r3, #22
 801337a:	d4dd      	bmi.n	8013338 <_fflush_r+0xc>
 801337c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801337e:	f7ff fceb 	bl	8012d58 <__retarget_lock_release_recursive>
 8013382:	e7d9      	b.n	8013338 <_fflush_r+0xc>
 8013384:	4b05      	ldr	r3, [pc, #20]	; (801339c <_fflush_r+0x70>)
 8013386:	429c      	cmp	r4, r3
 8013388:	d101      	bne.n	801338e <_fflush_r+0x62>
 801338a:	68ac      	ldr	r4, [r5, #8]
 801338c:	e7df      	b.n	801334e <_fflush_r+0x22>
 801338e:	4b04      	ldr	r3, [pc, #16]	; (80133a0 <_fflush_r+0x74>)
 8013390:	429c      	cmp	r4, r3
 8013392:	bf08      	it	eq
 8013394:	68ec      	ldreq	r4, [r5, #12]
 8013396:	e7da      	b.n	801334e <_fflush_r+0x22>
 8013398:	08068cb4 	.word	0x08068cb4
 801339c:	08068cd4 	.word	0x08068cd4
 80133a0:	08068c94 	.word	0x08068c94

080133a4 <std>:
 80133a4:	2300      	movs	r3, #0
 80133a6:	b510      	push	{r4, lr}
 80133a8:	4604      	mov	r4, r0
 80133aa:	e9c0 3300 	strd	r3, r3, [r0]
 80133ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133b2:	6083      	str	r3, [r0, #8]
 80133b4:	8181      	strh	r1, [r0, #12]
 80133b6:	6643      	str	r3, [r0, #100]	; 0x64
 80133b8:	81c2      	strh	r2, [r0, #14]
 80133ba:	6183      	str	r3, [r0, #24]
 80133bc:	4619      	mov	r1, r3
 80133be:	2208      	movs	r2, #8
 80133c0:	305c      	adds	r0, #92	; 0x5c
 80133c2:	f7fd fb53 	bl	8010a6c <memset>
 80133c6:	4b05      	ldr	r3, [pc, #20]	; (80133dc <std+0x38>)
 80133c8:	6263      	str	r3, [r4, #36]	; 0x24
 80133ca:	4b05      	ldr	r3, [pc, #20]	; (80133e0 <std+0x3c>)
 80133cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80133ce:	4b05      	ldr	r3, [pc, #20]	; (80133e4 <std+0x40>)
 80133d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80133d2:	4b05      	ldr	r3, [pc, #20]	; (80133e8 <std+0x44>)
 80133d4:	6224      	str	r4, [r4, #32]
 80133d6:	6323      	str	r3, [r4, #48]	; 0x30
 80133d8:	bd10      	pop	{r4, pc}
 80133da:	bf00      	nop
 80133dc:	080136e1 	.word	0x080136e1
 80133e0:	08013703 	.word	0x08013703
 80133e4:	0801373b 	.word	0x0801373b
 80133e8:	0801375f 	.word	0x0801375f

080133ec <_cleanup_r>:
 80133ec:	4901      	ldr	r1, [pc, #4]	; (80133f4 <_cleanup_r+0x8>)
 80133ee:	f000 b8af 	b.w	8013550 <_fwalk_reent>
 80133f2:	bf00      	nop
 80133f4:	0801332d 	.word	0x0801332d

080133f8 <__sfmoreglue>:
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	2268      	movs	r2, #104	; 0x68
 80133fc:	1e4d      	subs	r5, r1, #1
 80133fe:	4355      	muls	r5, r2
 8013400:	460e      	mov	r6, r1
 8013402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013406:	f7fd fba5 	bl	8010b54 <_malloc_r>
 801340a:	4604      	mov	r4, r0
 801340c:	b140      	cbz	r0, 8013420 <__sfmoreglue+0x28>
 801340e:	2100      	movs	r1, #0
 8013410:	e9c0 1600 	strd	r1, r6, [r0]
 8013414:	300c      	adds	r0, #12
 8013416:	60a0      	str	r0, [r4, #8]
 8013418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801341c:	f7fd fb26 	bl	8010a6c <memset>
 8013420:	4620      	mov	r0, r4
 8013422:	bd70      	pop	{r4, r5, r6, pc}

08013424 <__sfp_lock_acquire>:
 8013424:	4801      	ldr	r0, [pc, #4]	; (801342c <__sfp_lock_acquire+0x8>)
 8013426:	f7ff bc96 	b.w	8012d56 <__retarget_lock_acquire_recursive>
 801342a:	bf00      	nop
 801342c:	20003b29 	.word	0x20003b29

08013430 <__sfp_lock_release>:
 8013430:	4801      	ldr	r0, [pc, #4]	; (8013438 <__sfp_lock_release+0x8>)
 8013432:	f7ff bc91 	b.w	8012d58 <__retarget_lock_release_recursive>
 8013436:	bf00      	nop
 8013438:	20003b29 	.word	0x20003b29

0801343c <__sinit_lock_acquire>:
 801343c:	4801      	ldr	r0, [pc, #4]	; (8013444 <__sinit_lock_acquire+0x8>)
 801343e:	f7ff bc8a 	b.w	8012d56 <__retarget_lock_acquire_recursive>
 8013442:	bf00      	nop
 8013444:	20003b2a 	.word	0x20003b2a

08013448 <__sinit_lock_release>:
 8013448:	4801      	ldr	r0, [pc, #4]	; (8013450 <__sinit_lock_release+0x8>)
 801344a:	f7ff bc85 	b.w	8012d58 <__retarget_lock_release_recursive>
 801344e:	bf00      	nop
 8013450:	20003b2a 	.word	0x20003b2a

08013454 <__sinit>:
 8013454:	b510      	push	{r4, lr}
 8013456:	4604      	mov	r4, r0
 8013458:	f7ff fff0 	bl	801343c <__sinit_lock_acquire>
 801345c:	69a3      	ldr	r3, [r4, #24]
 801345e:	b11b      	cbz	r3, 8013468 <__sinit+0x14>
 8013460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013464:	f7ff bff0 	b.w	8013448 <__sinit_lock_release>
 8013468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801346c:	6523      	str	r3, [r4, #80]	; 0x50
 801346e:	4b13      	ldr	r3, [pc, #76]	; (80134bc <__sinit+0x68>)
 8013470:	4a13      	ldr	r2, [pc, #76]	; (80134c0 <__sinit+0x6c>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	62a2      	str	r2, [r4, #40]	; 0x28
 8013476:	42a3      	cmp	r3, r4
 8013478:	bf04      	itt	eq
 801347a:	2301      	moveq	r3, #1
 801347c:	61a3      	streq	r3, [r4, #24]
 801347e:	4620      	mov	r0, r4
 8013480:	f000 f820 	bl	80134c4 <__sfp>
 8013484:	6060      	str	r0, [r4, #4]
 8013486:	4620      	mov	r0, r4
 8013488:	f000 f81c 	bl	80134c4 <__sfp>
 801348c:	60a0      	str	r0, [r4, #8]
 801348e:	4620      	mov	r0, r4
 8013490:	f000 f818 	bl	80134c4 <__sfp>
 8013494:	2200      	movs	r2, #0
 8013496:	60e0      	str	r0, [r4, #12]
 8013498:	2104      	movs	r1, #4
 801349a:	6860      	ldr	r0, [r4, #4]
 801349c:	f7ff ff82 	bl	80133a4 <std>
 80134a0:	68a0      	ldr	r0, [r4, #8]
 80134a2:	2201      	movs	r2, #1
 80134a4:	2109      	movs	r1, #9
 80134a6:	f7ff ff7d 	bl	80133a4 <std>
 80134aa:	68e0      	ldr	r0, [r4, #12]
 80134ac:	2202      	movs	r2, #2
 80134ae:	2112      	movs	r1, #18
 80134b0:	f7ff ff78 	bl	80133a4 <std>
 80134b4:	2301      	movs	r3, #1
 80134b6:	61a3      	str	r3, [r4, #24]
 80134b8:	e7d2      	b.n	8013460 <__sinit+0xc>
 80134ba:	bf00      	nop
 80134bc:	08068918 	.word	0x08068918
 80134c0:	080133ed 	.word	0x080133ed

080134c4 <__sfp>:
 80134c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134c6:	4607      	mov	r7, r0
 80134c8:	f7ff ffac 	bl	8013424 <__sfp_lock_acquire>
 80134cc:	4b1e      	ldr	r3, [pc, #120]	; (8013548 <__sfp+0x84>)
 80134ce:	681e      	ldr	r6, [r3, #0]
 80134d0:	69b3      	ldr	r3, [r6, #24]
 80134d2:	b913      	cbnz	r3, 80134da <__sfp+0x16>
 80134d4:	4630      	mov	r0, r6
 80134d6:	f7ff ffbd 	bl	8013454 <__sinit>
 80134da:	3648      	adds	r6, #72	; 0x48
 80134dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80134e0:	3b01      	subs	r3, #1
 80134e2:	d503      	bpl.n	80134ec <__sfp+0x28>
 80134e4:	6833      	ldr	r3, [r6, #0]
 80134e6:	b30b      	cbz	r3, 801352c <__sfp+0x68>
 80134e8:	6836      	ldr	r6, [r6, #0]
 80134ea:	e7f7      	b.n	80134dc <__sfp+0x18>
 80134ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80134f0:	b9d5      	cbnz	r5, 8013528 <__sfp+0x64>
 80134f2:	4b16      	ldr	r3, [pc, #88]	; (801354c <__sfp+0x88>)
 80134f4:	60e3      	str	r3, [r4, #12]
 80134f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80134fa:	6665      	str	r5, [r4, #100]	; 0x64
 80134fc:	f7ff fc2a 	bl	8012d54 <__retarget_lock_init_recursive>
 8013500:	f7ff ff96 	bl	8013430 <__sfp_lock_release>
 8013504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801350c:	6025      	str	r5, [r4, #0]
 801350e:	61a5      	str	r5, [r4, #24]
 8013510:	2208      	movs	r2, #8
 8013512:	4629      	mov	r1, r5
 8013514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013518:	f7fd faa8 	bl	8010a6c <memset>
 801351c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013524:	4620      	mov	r0, r4
 8013526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013528:	3468      	adds	r4, #104	; 0x68
 801352a:	e7d9      	b.n	80134e0 <__sfp+0x1c>
 801352c:	2104      	movs	r1, #4
 801352e:	4638      	mov	r0, r7
 8013530:	f7ff ff62 	bl	80133f8 <__sfmoreglue>
 8013534:	4604      	mov	r4, r0
 8013536:	6030      	str	r0, [r6, #0]
 8013538:	2800      	cmp	r0, #0
 801353a:	d1d5      	bne.n	80134e8 <__sfp+0x24>
 801353c:	f7ff ff78 	bl	8013430 <__sfp_lock_release>
 8013540:	230c      	movs	r3, #12
 8013542:	603b      	str	r3, [r7, #0]
 8013544:	e7ee      	b.n	8013524 <__sfp+0x60>
 8013546:	bf00      	nop
 8013548:	08068918 	.word	0x08068918
 801354c:	ffff0001 	.word	0xffff0001

08013550 <_fwalk_reent>:
 8013550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013554:	4606      	mov	r6, r0
 8013556:	4688      	mov	r8, r1
 8013558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801355c:	2700      	movs	r7, #0
 801355e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013562:	f1b9 0901 	subs.w	r9, r9, #1
 8013566:	d505      	bpl.n	8013574 <_fwalk_reent+0x24>
 8013568:	6824      	ldr	r4, [r4, #0]
 801356a:	2c00      	cmp	r4, #0
 801356c:	d1f7      	bne.n	801355e <_fwalk_reent+0xe>
 801356e:	4638      	mov	r0, r7
 8013570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013574:	89ab      	ldrh	r3, [r5, #12]
 8013576:	2b01      	cmp	r3, #1
 8013578:	d907      	bls.n	801358a <_fwalk_reent+0x3a>
 801357a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801357e:	3301      	adds	r3, #1
 8013580:	d003      	beq.n	801358a <_fwalk_reent+0x3a>
 8013582:	4629      	mov	r1, r5
 8013584:	4630      	mov	r0, r6
 8013586:	47c0      	blx	r8
 8013588:	4307      	orrs	r7, r0
 801358a:	3568      	adds	r5, #104	; 0x68
 801358c:	e7e9      	b.n	8013562 <_fwalk_reent+0x12>

0801358e <__swhatbuf_r>:
 801358e:	b570      	push	{r4, r5, r6, lr}
 8013590:	460e      	mov	r6, r1
 8013592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013596:	2900      	cmp	r1, #0
 8013598:	b096      	sub	sp, #88	; 0x58
 801359a:	4614      	mov	r4, r2
 801359c:	461d      	mov	r5, r3
 801359e:	da08      	bge.n	80135b2 <__swhatbuf_r+0x24>
 80135a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80135a4:	2200      	movs	r2, #0
 80135a6:	602a      	str	r2, [r5, #0]
 80135a8:	061a      	lsls	r2, r3, #24
 80135aa:	d410      	bmi.n	80135ce <__swhatbuf_r+0x40>
 80135ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135b0:	e00e      	b.n	80135d0 <__swhatbuf_r+0x42>
 80135b2:	466a      	mov	r2, sp
 80135b4:	f000 f8fa 	bl	80137ac <_fstat_r>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	dbf1      	blt.n	80135a0 <__swhatbuf_r+0x12>
 80135bc:	9a01      	ldr	r2, [sp, #4]
 80135be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80135c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80135c6:	425a      	negs	r2, r3
 80135c8:	415a      	adcs	r2, r3
 80135ca:	602a      	str	r2, [r5, #0]
 80135cc:	e7ee      	b.n	80135ac <__swhatbuf_r+0x1e>
 80135ce:	2340      	movs	r3, #64	; 0x40
 80135d0:	2000      	movs	r0, #0
 80135d2:	6023      	str	r3, [r4, #0]
 80135d4:	b016      	add	sp, #88	; 0x58
 80135d6:	bd70      	pop	{r4, r5, r6, pc}

080135d8 <__smakebuf_r>:
 80135d8:	898b      	ldrh	r3, [r1, #12]
 80135da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135dc:	079d      	lsls	r5, r3, #30
 80135de:	4606      	mov	r6, r0
 80135e0:	460c      	mov	r4, r1
 80135e2:	d507      	bpl.n	80135f4 <__smakebuf_r+0x1c>
 80135e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80135e8:	6023      	str	r3, [r4, #0]
 80135ea:	6123      	str	r3, [r4, #16]
 80135ec:	2301      	movs	r3, #1
 80135ee:	6163      	str	r3, [r4, #20]
 80135f0:	b002      	add	sp, #8
 80135f2:	bd70      	pop	{r4, r5, r6, pc}
 80135f4:	ab01      	add	r3, sp, #4
 80135f6:	466a      	mov	r2, sp
 80135f8:	f7ff ffc9 	bl	801358e <__swhatbuf_r>
 80135fc:	9900      	ldr	r1, [sp, #0]
 80135fe:	4605      	mov	r5, r0
 8013600:	4630      	mov	r0, r6
 8013602:	f7fd faa7 	bl	8010b54 <_malloc_r>
 8013606:	b948      	cbnz	r0, 801361c <__smakebuf_r+0x44>
 8013608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801360c:	059a      	lsls	r2, r3, #22
 801360e:	d4ef      	bmi.n	80135f0 <__smakebuf_r+0x18>
 8013610:	f023 0303 	bic.w	r3, r3, #3
 8013614:	f043 0302 	orr.w	r3, r3, #2
 8013618:	81a3      	strh	r3, [r4, #12]
 801361a:	e7e3      	b.n	80135e4 <__smakebuf_r+0xc>
 801361c:	4b0d      	ldr	r3, [pc, #52]	; (8013654 <__smakebuf_r+0x7c>)
 801361e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013620:	89a3      	ldrh	r3, [r4, #12]
 8013622:	6020      	str	r0, [r4, #0]
 8013624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013628:	81a3      	strh	r3, [r4, #12]
 801362a:	9b00      	ldr	r3, [sp, #0]
 801362c:	6163      	str	r3, [r4, #20]
 801362e:	9b01      	ldr	r3, [sp, #4]
 8013630:	6120      	str	r0, [r4, #16]
 8013632:	b15b      	cbz	r3, 801364c <__smakebuf_r+0x74>
 8013634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013638:	4630      	mov	r0, r6
 801363a:	f000 f8c9 	bl	80137d0 <_isatty_r>
 801363e:	b128      	cbz	r0, 801364c <__smakebuf_r+0x74>
 8013640:	89a3      	ldrh	r3, [r4, #12]
 8013642:	f023 0303 	bic.w	r3, r3, #3
 8013646:	f043 0301 	orr.w	r3, r3, #1
 801364a:	81a3      	strh	r3, [r4, #12]
 801364c:	89a0      	ldrh	r0, [r4, #12]
 801364e:	4305      	orrs	r5, r0
 8013650:	81a5      	strh	r5, [r4, #12]
 8013652:	e7cd      	b.n	80135f0 <__smakebuf_r+0x18>
 8013654:	080133ed 	.word	0x080133ed

08013658 <_raise_r>:
 8013658:	291f      	cmp	r1, #31
 801365a:	b538      	push	{r3, r4, r5, lr}
 801365c:	4604      	mov	r4, r0
 801365e:	460d      	mov	r5, r1
 8013660:	d904      	bls.n	801366c <_raise_r+0x14>
 8013662:	2316      	movs	r3, #22
 8013664:	6003      	str	r3, [r0, #0]
 8013666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801366a:	bd38      	pop	{r3, r4, r5, pc}
 801366c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801366e:	b112      	cbz	r2, 8013676 <_raise_r+0x1e>
 8013670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013674:	b94b      	cbnz	r3, 801368a <_raise_r+0x32>
 8013676:	4620      	mov	r0, r4
 8013678:	f000 f830 	bl	80136dc <_getpid_r>
 801367c:	462a      	mov	r2, r5
 801367e:	4601      	mov	r1, r0
 8013680:	4620      	mov	r0, r4
 8013682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013686:	f000 b817 	b.w	80136b8 <_kill_r>
 801368a:	2b01      	cmp	r3, #1
 801368c:	d00a      	beq.n	80136a4 <_raise_r+0x4c>
 801368e:	1c59      	adds	r1, r3, #1
 8013690:	d103      	bne.n	801369a <_raise_r+0x42>
 8013692:	2316      	movs	r3, #22
 8013694:	6003      	str	r3, [r0, #0]
 8013696:	2001      	movs	r0, #1
 8013698:	e7e7      	b.n	801366a <_raise_r+0x12>
 801369a:	2400      	movs	r4, #0
 801369c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80136a0:	4628      	mov	r0, r5
 80136a2:	4798      	blx	r3
 80136a4:	2000      	movs	r0, #0
 80136a6:	e7e0      	b.n	801366a <_raise_r+0x12>

080136a8 <raise>:
 80136a8:	4b02      	ldr	r3, [pc, #8]	; (80136b4 <raise+0xc>)
 80136aa:	4601      	mov	r1, r0
 80136ac:	6818      	ldr	r0, [r3, #0]
 80136ae:	f7ff bfd3 	b.w	8013658 <_raise_r>
 80136b2:	bf00      	nop
 80136b4:	2000093c 	.word	0x2000093c

080136b8 <_kill_r>:
 80136b8:	b538      	push	{r3, r4, r5, lr}
 80136ba:	4d07      	ldr	r5, [pc, #28]	; (80136d8 <_kill_r+0x20>)
 80136bc:	2300      	movs	r3, #0
 80136be:	4604      	mov	r4, r0
 80136c0:	4608      	mov	r0, r1
 80136c2:	4611      	mov	r1, r2
 80136c4:	602b      	str	r3, [r5, #0]
 80136c6:	f7ed fdc7 	bl	8001258 <_kill>
 80136ca:	1c43      	adds	r3, r0, #1
 80136cc:	d102      	bne.n	80136d4 <_kill_r+0x1c>
 80136ce:	682b      	ldr	r3, [r5, #0]
 80136d0:	b103      	cbz	r3, 80136d4 <_kill_r+0x1c>
 80136d2:	6023      	str	r3, [r4, #0]
 80136d4:	bd38      	pop	{r3, r4, r5, pc}
 80136d6:	bf00      	nop
 80136d8:	20003b24 	.word	0x20003b24

080136dc <_getpid_r>:
 80136dc:	f7ed bdb4 	b.w	8001248 <_getpid>

080136e0 <__sread>:
 80136e0:	b510      	push	{r4, lr}
 80136e2:	460c      	mov	r4, r1
 80136e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136e8:	f000 f894 	bl	8013814 <_read_r>
 80136ec:	2800      	cmp	r0, #0
 80136ee:	bfab      	itete	ge
 80136f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136f2:	89a3      	ldrhlt	r3, [r4, #12]
 80136f4:	181b      	addge	r3, r3, r0
 80136f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136fa:	bfac      	ite	ge
 80136fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80136fe:	81a3      	strhlt	r3, [r4, #12]
 8013700:	bd10      	pop	{r4, pc}

08013702 <__swrite>:
 8013702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013706:	461f      	mov	r7, r3
 8013708:	898b      	ldrh	r3, [r1, #12]
 801370a:	05db      	lsls	r3, r3, #23
 801370c:	4605      	mov	r5, r0
 801370e:	460c      	mov	r4, r1
 8013710:	4616      	mov	r6, r2
 8013712:	d505      	bpl.n	8013720 <__swrite+0x1e>
 8013714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013718:	2302      	movs	r3, #2
 801371a:	2200      	movs	r2, #0
 801371c:	f000 f868 	bl	80137f0 <_lseek_r>
 8013720:	89a3      	ldrh	r3, [r4, #12]
 8013722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801372a:	81a3      	strh	r3, [r4, #12]
 801372c:	4632      	mov	r2, r6
 801372e:	463b      	mov	r3, r7
 8013730:	4628      	mov	r0, r5
 8013732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013736:	f000 b817 	b.w	8013768 <_write_r>

0801373a <__sseek>:
 801373a:	b510      	push	{r4, lr}
 801373c:	460c      	mov	r4, r1
 801373e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013742:	f000 f855 	bl	80137f0 <_lseek_r>
 8013746:	1c43      	adds	r3, r0, #1
 8013748:	89a3      	ldrh	r3, [r4, #12]
 801374a:	bf15      	itete	ne
 801374c:	6560      	strne	r0, [r4, #84]	; 0x54
 801374e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013756:	81a3      	strheq	r3, [r4, #12]
 8013758:	bf18      	it	ne
 801375a:	81a3      	strhne	r3, [r4, #12]
 801375c:	bd10      	pop	{r4, pc}

0801375e <__sclose>:
 801375e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013762:	f000 b813 	b.w	801378c <_close_r>
	...

08013768 <_write_r>:
 8013768:	b538      	push	{r3, r4, r5, lr}
 801376a:	4d07      	ldr	r5, [pc, #28]	; (8013788 <_write_r+0x20>)
 801376c:	4604      	mov	r4, r0
 801376e:	4608      	mov	r0, r1
 8013770:	4611      	mov	r1, r2
 8013772:	2200      	movs	r2, #0
 8013774:	602a      	str	r2, [r5, #0]
 8013776:	461a      	mov	r2, r3
 8013778:	f7ed fda5 	bl	80012c6 <_write>
 801377c:	1c43      	adds	r3, r0, #1
 801377e:	d102      	bne.n	8013786 <_write_r+0x1e>
 8013780:	682b      	ldr	r3, [r5, #0]
 8013782:	b103      	cbz	r3, 8013786 <_write_r+0x1e>
 8013784:	6023      	str	r3, [r4, #0]
 8013786:	bd38      	pop	{r3, r4, r5, pc}
 8013788:	20003b24 	.word	0x20003b24

0801378c <_close_r>:
 801378c:	b538      	push	{r3, r4, r5, lr}
 801378e:	4d06      	ldr	r5, [pc, #24]	; (80137a8 <_close_r+0x1c>)
 8013790:	2300      	movs	r3, #0
 8013792:	4604      	mov	r4, r0
 8013794:	4608      	mov	r0, r1
 8013796:	602b      	str	r3, [r5, #0]
 8013798:	f7ed fdb1 	bl	80012fe <_close>
 801379c:	1c43      	adds	r3, r0, #1
 801379e:	d102      	bne.n	80137a6 <_close_r+0x1a>
 80137a0:	682b      	ldr	r3, [r5, #0]
 80137a2:	b103      	cbz	r3, 80137a6 <_close_r+0x1a>
 80137a4:	6023      	str	r3, [r4, #0]
 80137a6:	bd38      	pop	{r3, r4, r5, pc}
 80137a8:	20003b24 	.word	0x20003b24

080137ac <_fstat_r>:
 80137ac:	b538      	push	{r3, r4, r5, lr}
 80137ae:	4d07      	ldr	r5, [pc, #28]	; (80137cc <_fstat_r+0x20>)
 80137b0:	2300      	movs	r3, #0
 80137b2:	4604      	mov	r4, r0
 80137b4:	4608      	mov	r0, r1
 80137b6:	4611      	mov	r1, r2
 80137b8:	602b      	str	r3, [r5, #0]
 80137ba:	f7ed fdac 	bl	8001316 <_fstat>
 80137be:	1c43      	adds	r3, r0, #1
 80137c0:	d102      	bne.n	80137c8 <_fstat_r+0x1c>
 80137c2:	682b      	ldr	r3, [r5, #0]
 80137c4:	b103      	cbz	r3, 80137c8 <_fstat_r+0x1c>
 80137c6:	6023      	str	r3, [r4, #0]
 80137c8:	bd38      	pop	{r3, r4, r5, pc}
 80137ca:	bf00      	nop
 80137cc:	20003b24 	.word	0x20003b24

080137d0 <_isatty_r>:
 80137d0:	b538      	push	{r3, r4, r5, lr}
 80137d2:	4d06      	ldr	r5, [pc, #24]	; (80137ec <_isatty_r+0x1c>)
 80137d4:	2300      	movs	r3, #0
 80137d6:	4604      	mov	r4, r0
 80137d8:	4608      	mov	r0, r1
 80137da:	602b      	str	r3, [r5, #0]
 80137dc:	f7ed fdab 	bl	8001336 <_isatty>
 80137e0:	1c43      	adds	r3, r0, #1
 80137e2:	d102      	bne.n	80137ea <_isatty_r+0x1a>
 80137e4:	682b      	ldr	r3, [r5, #0]
 80137e6:	b103      	cbz	r3, 80137ea <_isatty_r+0x1a>
 80137e8:	6023      	str	r3, [r4, #0]
 80137ea:	bd38      	pop	{r3, r4, r5, pc}
 80137ec:	20003b24 	.word	0x20003b24

080137f0 <_lseek_r>:
 80137f0:	b538      	push	{r3, r4, r5, lr}
 80137f2:	4d07      	ldr	r5, [pc, #28]	; (8013810 <_lseek_r+0x20>)
 80137f4:	4604      	mov	r4, r0
 80137f6:	4608      	mov	r0, r1
 80137f8:	4611      	mov	r1, r2
 80137fa:	2200      	movs	r2, #0
 80137fc:	602a      	str	r2, [r5, #0]
 80137fe:	461a      	mov	r2, r3
 8013800:	f7ed fda4 	bl	800134c <_lseek>
 8013804:	1c43      	adds	r3, r0, #1
 8013806:	d102      	bne.n	801380e <_lseek_r+0x1e>
 8013808:	682b      	ldr	r3, [r5, #0]
 801380a:	b103      	cbz	r3, 801380e <_lseek_r+0x1e>
 801380c:	6023      	str	r3, [r4, #0]
 801380e:	bd38      	pop	{r3, r4, r5, pc}
 8013810:	20003b24 	.word	0x20003b24

08013814 <_read_r>:
 8013814:	b538      	push	{r3, r4, r5, lr}
 8013816:	4d07      	ldr	r5, [pc, #28]	; (8013834 <_read_r+0x20>)
 8013818:	4604      	mov	r4, r0
 801381a:	4608      	mov	r0, r1
 801381c:	4611      	mov	r1, r2
 801381e:	2200      	movs	r2, #0
 8013820:	602a      	str	r2, [r5, #0]
 8013822:	461a      	mov	r2, r3
 8013824:	f7ed fd32 	bl	800128c <_read>
 8013828:	1c43      	adds	r3, r0, #1
 801382a:	d102      	bne.n	8013832 <_read_r+0x1e>
 801382c:	682b      	ldr	r3, [r5, #0]
 801382e:	b103      	cbz	r3, 8013832 <_read_r+0x1e>
 8013830:	6023      	str	r3, [r4, #0]
 8013832:	bd38      	pop	{r3, r4, r5, pc}
 8013834:	20003b24 	.word	0x20003b24

08013838 <expf>:
 8013838:	b508      	push	{r3, lr}
 801383a:	ed2d 8b02 	vpush	{d8}
 801383e:	eef0 8a40 	vmov.f32	s17, s0
 8013842:	f000 f84d 	bl	80138e0 <__ieee754_expf>
 8013846:	eeb0 8a40 	vmov.f32	s16, s0
 801384a:	eeb0 0a68 	vmov.f32	s0, s17
 801384e:	f000 f93b 	bl	8013ac8 <finitef>
 8013852:	b160      	cbz	r0, 801386e <expf+0x36>
 8013854:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013894 <expf+0x5c>
 8013858:	eef4 8ae7 	vcmpe.f32	s17, s15
 801385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013860:	dd0a      	ble.n	8013878 <expf+0x40>
 8013862:	f7fd f8c3 	bl	80109ec <__errno>
 8013866:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013898 <expf+0x60>
 801386a:	2322      	movs	r3, #34	; 0x22
 801386c:	6003      	str	r3, [r0, #0]
 801386e:	eeb0 0a48 	vmov.f32	s0, s16
 8013872:	ecbd 8b02 	vpop	{d8}
 8013876:	bd08      	pop	{r3, pc}
 8013878:	eddf 7a08 	vldr	s15, [pc, #32]	; 801389c <expf+0x64>
 801387c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013884:	d5f3      	bpl.n	801386e <expf+0x36>
 8013886:	f7fd f8b1 	bl	80109ec <__errno>
 801388a:	2322      	movs	r3, #34	; 0x22
 801388c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80138a0 <expf+0x68>
 8013890:	6003      	str	r3, [r0, #0]
 8013892:	e7ec      	b.n	801386e <expf+0x36>
 8013894:	42b17180 	.word	0x42b17180
 8013898:	7f800000 	.word	0x7f800000
 801389c:	c2cff1b5 	.word	0xc2cff1b5
 80138a0:	00000000 	.word	0x00000000

080138a4 <sqrtf>:
 80138a4:	b508      	push	{r3, lr}
 80138a6:	ed2d 8b02 	vpush	{d8}
 80138aa:	eeb0 8a40 	vmov.f32	s16, s0
 80138ae:	f000 f8e5 	bl	8013a7c <__ieee754_sqrtf>
 80138b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80138b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ba:	d60c      	bvs.n	80138d6 <sqrtf+0x32>
 80138bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80138dc <sqrtf+0x38>
 80138c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80138c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c8:	d505      	bpl.n	80138d6 <sqrtf+0x32>
 80138ca:	f7fd f88f 	bl	80109ec <__errno>
 80138ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80138d2:	2321      	movs	r3, #33	; 0x21
 80138d4:	6003      	str	r3, [r0, #0]
 80138d6:	ecbd 8b02 	vpop	{d8}
 80138da:	bd08      	pop	{r3, pc}
 80138dc:	00000000 	.word	0x00000000

080138e0 <__ieee754_expf>:
 80138e0:	ee10 2a10 	vmov	r2, s0
 80138e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80138e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80138ec:	d902      	bls.n	80138f4 <__ieee754_expf+0x14>
 80138ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80138f2:	4770      	bx	lr
 80138f4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80138f8:	d106      	bne.n	8013908 <__ieee754_expf+0x28>
 80138fa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8013a34 <__ieee754_expf+0x154>
 80138fe:	2b00      	cmp	r3, #0
 8013900:	bf18      	it	ne
 8013902:	eeb0 0a67 	vmovne.f32	s0, s15
 8013906:	4770      	bx	lr
 8013908:	484b      	ldr	r0, [pc, #300]	; (8013a38 <__ieee754_expf+0x158>)
 801390a:	4282      	cmp	r2, r0
 801390c:	dd02      	ble.n	8013914 <__ieee754_expf+0x34>
 801390e:	2000      	movs	r0, #0
 8013910:	f000 b8d4 	b.w	8013abc <__math_oflowf>
 8013914:	2a00      	cmp	r2, #0
 8013916:	da05      	bge.n	8013924 <__ieee754_expf+0x44>
 8013918:	4a48      	ldr	r2, [pc, #288]	; (8013a3c <__ieee754_expf+0x15c>)
 801391a:	4291      	cmp	r1, r2
 801391c:	d902      	bls.n	8013924 <__ieee754_expf+0x44>
 801391e:	2000      	movs	r0, #0
 8013920:	f000 b8c6 	b.w	8013ab0 <__math_uflowf>
 8013924:	4a46      	ldr	r2, [pc, #280]	; (8013a40 <__ieee754_expf+0x160>)
 8013926:	4291      	cmp	r1, r2
 8013928:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801392c:	d952      	bls.n	80139d4 <__ieee754_expf+0xf4>
 801392e:	4a45      	ldr	r2, [pc, #276]	; (8013a44 <__ieee754_expf+0x164>)
 8013930:	4291      	cmp	r1, r2
 8013932:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013936:	d834      	bhi.n	80139a2 <__ieee754_expf+0xc2>
 8013938:	4943      	ldr	r1, [pc, #268]	; (8013a48 <__ieee754_expf+0x168>)
 801393a:	4411      	add	r1, r2
 801393c:	ed91 7a00 	vldr	s14, [r1]
 8013940:	4942      	ldr	r1, [pc, #264]	; (8013a4c <__ieee754_expf+0x16c>)
 8013942:	440a      	add	r2, r1
 8013944:	edd2 7a00 	vldr	s15, [r2]
 8013948:	ee30 7a47 	vsub.f32	s14, s0, s14
 801394c:	f1c3 0201 	rsb	r2, r3, #1
 8013950:	1ad2      	subs	r2, r2, r3
 8013952:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013956:	ee20 6a00 	vmul.f32	s12, s0, s0
 801395a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8013a50 <__ieee754_expf+0x170>
 801395e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013a54 <__ieee754_expf+0x174>
 8013962:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013966:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013a58 <__ieee754_expf+0x178>
 801396a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801396e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8013a5c <__ieee754_expf+0x17c>
 8013972:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013976:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8013a60 <__ieee754_expf+0x180>
 801397a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801397e:	eef0 6a40 	vmov.f32	s13, s0
 8013982:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013986:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801398a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801398e:	bb92      	cbnz	r2, 80139f6 <__ieee754_expf+0x116>
 8013990:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013994:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013998:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801399c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80139a0:	4770      	bx	lr
 80139a2:	4b30      	ldr	r3, [pc, #192]	; (8013a64 <__ieee754_expf+0x184>)
 80139a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013a68 <__ieee754_expf+0x188>
 80139a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013a6c <__ieee754_expf+0x18c>
 80139ac:	4413      	add	r3, r2
 80139ae:	edd3 7a00 	vldr	s15, [r3]
 80139b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80139b6:	eeb0 7a40 	vmov.f32	s14, s0
 80139ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139be:	ee17 2a90 	vmov	r2, s15
 80139c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139c6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80139ca:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013a70 <__ieee754_expf+0x190>
 80139ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139d2:	e7be      	b.n	8013952 <__ieee754_expf+0x72>
 80139d4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80139d8:	d20b      	bcs.n	80139f2 <__ieee754_expf+0x112>
 80139da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013a74 <__ieee754_expf+0x194>
 80139de:	ee70 6a26 	vadd.f32	s13, s0, s13
 80139e2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80139e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ea:	dd02      	ble.n	80139f2 <__ieee754_expf+0x112>
 80139ec:	ee30 0a25 	vadd.f32	s0, s0, s11
 80139f0:	4770      	bx	lr
 80139f2:	2200      	movs	r2, #0
 80139f4:	e7af      	b.n	8013956 <__ieee754_expf+0x76>
 80139f6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80139fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80139fe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8013a02:	bfb8      	it	lt
 8013a04:	3264      	addlt	r2, #100	; 0x64
 8013a06:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013a0a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013a0e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8013a12:	ee17 3a90 	vmov	r3, s15
 8013a16:	bfab      	itete	ge
 8013a18:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8013a1c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013a20:	ee00 3a10 	vmovge	s0, r3
 8013a24:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013a78 <__ieee754_expf+0x198>
 8013a28:	bfbc      	itt	lt
 8013a2a:	ee00 3a10 	vmovlt	s0, r3
 8013a2e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013a32:	4770      	bx	lr
 8013a34:	00000000 	.word	0x00000000
 8013a38:	42b17217 	.word	0x42b17217
 8013a3c:	42cff1b5 	.word	0x42cff1b5
 8013a40:	3eb17218 	.word	0x3eb17218
 8013a44:	3f851591 	.word	0x3f851591
 8013a48:	08068cfc 	.word	0x08068cfc
 8013a4c:	08068d04 	.word	0x08068d04
 8013a50:	3331bb4c 	.word	0x3331bb4c
 8013a54:	b5ddea0e 	.word	0xb5ddea0e
 8013a58:	388ab355 	.word	0x388ab355
 8013a5c:	bb360b61 	.word	0xbb360b61
 8013a60:	3e2aaaab 	.word	0x3e2aaaab
 8013a64:	08068cf4 	.word	0x08068cf4
 8013a68:	3fb8aa3b 	.word	0x3fb8aa3b
 8013a6c:	3f317180 	.word	0x3f317180
 8013a70:	3717f7d1 	.word	0x3717f7d1
 8013a74:	7149f2ca 	.word	0x7149f2ca
 8013a78:	0d800000 	.word	0x0d800000

08013a7c <__ieee754_sqrtf>:
 8013a7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013a80:	4770      	bx	lr

08013a82 <with_errnof>:
 8013a82:	b513      	push	{r0, r1, r4, lr}
 8013a84:	4604      	mov	r4, r0
 8013a86:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013a8a:	f7fc ffaf 	bl	80109ec <__errno>
 8013a8e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013a92:	6004      	str	r4, [r0, #0]
 8013a94:	b002      	add	sp, #8
 8013a96:	bd10      	pop	{r4, pc}

08013a98 <xflowf>:
 8013a98:	b130      	cbz	r0, 8013aa8 <xflowf+0x10>
 8013a9a:	eef1 7a40 	vneg.f32	s15, s0
 8013a9e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013aa2:	2022      	movs	r0, #34	; 0x22
 8013aa4:	f7ff bfed 	b.w	8013a82 <with_errnof>
 8013aa8:	eef0 7a40 	vmov.f32	s15, s0
 8013aac:	e7f7      	b.n	8013a9e <xflowf+0x6>
	...

08013ab0 <__math_uflowf>:
 8013ab0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ab8 <__math_uflowf+0x8>
 8013ab4:	f7ff bff0 	b.w	8013a98 <xflowf>
 8013ab8:	10000000 	.word	0x10000000

08013abc <__math_oflowf>:
 8013abc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ac4 <__math_oflowf+0x8>
 8013ac0:	f7ff bfea 	b.w	8013a98 <xflowf>
 8013ac4:	70000000 	.word	0x70000000

08013ac8 <finitef>:
 8013ac8:	b082      	sub	sp, #8
 8013aca:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013ace:	9801      	ldr	r0, [sp, #4]
 8013ad0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013ad4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013ad8:	bfac      	ite	ge
 8013ada:	2000      	movge	r0, #0
 8013adc:	2001      	movlt	r0, #1
 8013ade:	b002      	add	sp, #8
 8013ae0:	4770      	bx	lr
	...

08013ae4 <_init>:
 8013ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ae6:	bf00      	nop
 8013ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aea:	bc08      	pop	{r3}
 8013aec:	469e      	mov	lr, r3
 8013aee:	4770      	bx	lr

08013af0 <_fini>:
 8013af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013af2:	bf00      	nop
 8013af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013af6:	bc08      	pop	{r3}
 8013af8:	469e      	mov	lr, r3
 8013afa:	4770      	bx	lr
